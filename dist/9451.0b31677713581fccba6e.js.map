{"version":3,"file":"9451.0b31677713581fccba6e.js","mappings":"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","sources":["webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/mediaViewer/helpers/getViewableMedia.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/common/ReportAvatarModal.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useSignalRef.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://telegram-t/./src/hooks/useCurrentTimeSignal.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/useVideoWaitingSignal.ts","webpack://telegram-t/./src/lib/video-preview/VideoPreview.ts","webpack://telegram-t/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://telegram-t/./src/components/mediaViewer/SeekLine.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/story/StoryViewer.module.scss?5f32","webpack://telegram-t/./src/components/story/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/story/helpers/dimensions.ts","webpack://telegram-t/./src/components/story/hooks/useSlideSizes.ts","webpack://telegram-t/./src/components/story/hooks/useStoryProps.ts","webpack://telegram-t/./src/components/story/StealthModeModal.module.scss?40cf","webpack://telegram-t/./src/components/story/StealthModeModal.tsx","webpack://telegram-t/./src/components/story/StoryDeleteConfirmModal.tsx","webpack://telegram-t/./src/components/story/privacy/AllowDenyList.tsx","webpack://telegram-t/./src/components/story/privacy/CloseFriends.module.scss?5d02","webpack://telegram-t/./src/components/story/privacy/CloseFriends.tsx","webpack://telegram-t/./src/components/story/StorySettings.module.scss?b887","webpack://telegram-t/./src/components/story/StorySettings.tsx","webpack://telegram-t/./src/components/common/embedded/EmbeddedStoryForward.tsx","webpack://telegram-t/./src/components/story/StoryCaption.tsx","webpack://telegram-t/./src/components/story/StoryFooter.module.scss?19b1","webpack://telegram-t/./src/components/story/StoryFooter.tsx","webpack://telegram-t/./src/components/story/StoryProgress.tsx","webpack://telegram-t/./src/components/story/StoryProgress.module.scss?59b4","webpack://telegram-t/./src/components/story/Story.tsx","webpack://telegram-t/./src/components/story/StoryPreview.tsx","webpack://telegram-t/./src/components/story/StorySlides.tsx","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/components/story/StoryViewModal.module.scss?06b1","webpack://telegram-t/./src/components/story/StoryView.tsx","webpack://telegram-t/./src/components/story/StoryViewModal.tsx","webpack://telegram-t/./src/components/story/StoryViewer.tsx","webpack://telegram-t/./src/components/common/pickers/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.module.scss?0842","webpack://telegram-t/./src/components/modals/map/MapModal.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/hooks/useDraggable.ts","webpack://telegram-t/./src/components/modals/webApp/MinimizedWebAppModal.module.scss?a30f","webpack://telegram-t/./src/components/modals/webApp/MinimizedWebAppModal.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppGridItem.module.scss?b350","webpack://telegram-t/./src/components/modals/webApp/WebAppGridItem.tsx","webpack://telegram-t/./src/components/modals/webApp/MoreAppsTabContent.module.scss?8058","webpack://telegram-t/./src/components/modals/webApp/MoreAppsTabContent.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModalTabContent.module.scss?c843","webpack://telegram-t/./src/components/modals/webApp/WebAppModalTabContent.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/usePopupLimit.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.module.scss?615e","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.module.scss?e925","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.module.scss?b798","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/common/pickers/ItemPicker.tsx","webpack://telegram-t/./src/components/common/CountryPickerModal.module.scss?d5e6","webpack://telegram-t/./src/components/common/CountryPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayChannelPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.module.scss?6d7c","webpack://telegram-t/./src/components/main/premium/GiveawayUserPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.module.scss?ac86","webpack://telegram-t/./src/components/main/premium/GiveawayModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/common/StickerButton.tsx","webpack://telegram-t/./src/components/common/reactions/ReactionEmoji.module.scss?9dc8","webpack://telegram-t/./src/components/common/reactions/ReactionEmoji.tsx","webpack://telegram-t/./src/components/common/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://telegram-t/./src/components/common/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.module.scss?77cd","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.module.scss?aeb4","webpack://telegram-t/./src/components/modals/boost/BoostModal.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.module.scss?1c77","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.tsx","webpack://telegram-t/./src/util/getClosestEntry.ts","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.module.scss?3c02","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.tsx","webpack://telegram-t/./src/components/modals/ageVerification/AgeVerificationModal.module.scss?9c37","webpack://telegram-t/./src/components/modals/ageVerification/AgeVerificationModal.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://telegram-t/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.module.scss?5f0b","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.module.scss?b66d","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.module.scss?2ca6","webpack://telegram-t/./src/components/common/AboutMonetizationModal.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.module.scss?bb6b","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.module.scss?4803","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.module.scss?843e","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.module.scss?b26e","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.module.scss?3c2e","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.module.scss?94bc","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.tsx","webpack://telegram-t/./src/components/modals/suggestMessage/SuggestMessageModal.module.scss?e7f0","webpack://telegram-t/./src/components/modals/suggestMessage/SuggestMessageModal.tsx","webpack://telegram-t/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.module.scss?7108","webpack://telegram-t/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/main/PermissionCheckboxList.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.module.scss?fbca","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/common/SeenByModal.module.scss?1d45","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.module.scss?a8aa","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.module.scss?68c3","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.module.scss?497f","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/BotAppResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultSponsored.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/common/paidMessage/PaidMessageSlider.tsx","webpack://telegram-t/./src/components/common/paidMessage/PaidMessagePrice.tsx","webpack://telegram-t/./src/components/left/settings/PremiumStatusItem.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.module.scss?16a3","webpack://telegram-t/./src/components/left/settings/PrivacyMessages.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPerformance.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsAcceptedGift.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyLastSeen.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.module.scss?6993","webpack://telegram-t/./src/components/left/MuteChatModal.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearchResult.module.scss?f0ab","webpack://telegram-t/./src/components/middle/search/MiddleSearchResult.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.module.scss?725f","webpack://telegram-t/./src/components/middle/search/MiddleSearch.tsx","webpack://telegram-t/./src/hooks/events/useOutsideClick.ts","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.module.scss?0536","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.module.scss?695a","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/util/visibility/isFullyVisible.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/ToDoListModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommand.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.module.scss?f347","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/TextFormatter.tsx","webpack://telegram-t/./src/util/getKeyFromEvent.ts","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPost.module.scss?fea0","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPostMeta.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentStory.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.module.scss?96a0","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.module.scss?bbd6","webpack://telegram-t/./src/components/right/statistics/StatisticsMessagePublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsStoryPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageBot.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/NewDiscussionGroup.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.module.scss?717b","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.module.scss?de6c","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.module.scss?86e3"],"sourcesContent":["import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type {\n  ApiMessage, ApiPeer, ApiPeerPhotos, ApiSponsoredMessage,\n} from '../../../api/types';\nimport type { MediaViewerMedia } from '../../../types';\n\nimport { getMessageContent, isDocumentPhoto, isDocumentVideo } from '../../../global/helpers';\n\nexport type MediaViewerItem = {\n  type: 'message';\n  message: ApiMessage;\n  mediaIndex?: number;\n} | {\n  type: 'avatar';\n  avatarOwner: ApiPeer;\n  profilePhotos: ApiPeerPhotos;\n  mediaIndex: number;\n} | {\n  type: 'standalone';\n  media: MediaViewerMedia[];\n  mediaIndex: number;\n} | {\n  type: 'sponsoredMessage';\n  message: ApiSponsoredMessage;\n  mediaIndex?: number;\n};\n\ntype ViewableMedia = {\n  media: MediaViewerMedia;\n  isSingle?: boolean;\n};\n\nexport function getMediaViewerItem({\n  message, avatarOwner, profilePhotos, standaloneMedia, mediaIndex, sponsoredMessage,\n}: {\n  message?: ApiMessage;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  standaloneMedia?: MediaViewerMedia[];\n  sponsoredMessage?: ApiSponsoredMessage;\n  mediaIndex?: number;\n}): MediaViewerItem | undefined {\n  if (avatarOwner && profilePhotos) {\n    return {\n      type: 'avatar',\n      avatarOwner,\n      profilePhotos,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (standaloneMedia) {\n    return {\n      type: 'standalone',\n      media: standaloneMedia,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (message) {\n    return {\n      type: 'message',\n      message,\n      mediaIndex,\n    };\n  }\n\n  if (sponsoredMessage) {\n    return {\n      type: 'sponsoredMessage',\n      message: sponsoredMessage,\n      mediaIndex,\n    };\n  }\n\n  return undefined;\n}\n\nexport default function getViewableMedia(params?: MediaViewerItem): ViewableMedia | undefined {\n  if (!params) return undefined;\n\n  if (params.type === 'standalone') {\n    return {\n      media: params.media[params.mediaIndex],\n      isSingle: params.media.length === 1,\n    };\n  }\n\n  if (params.type === 'avatar') {\n    const avatar = params.profilePhotos?.photos[params.mediaIndex];\n    if (avatar) {\n      return {\n        media: avatar,\n      };\n    }\n    return undefined;\n  }\n\n  const {\n    action, document, photo, video, webPage, paidMedia,\n  } = getMessageContent(params.message);\n\n  if (action?.type === 'chatEditPhoto' || action?.type === 'suggestProfilePhoto') {\n    return {\n      media: action.photo!,\n      isSingle: true,\n    };\n  }\n\n  if (document && (isDocumentPhoto(document) || isDocumentVideo(document))) {\n    return {\n      media: document,\n    };\n  }\n\n  if (webPage) {\n    const { photo: webPagePhoto, video: webPageVideo, document: webPageDocument } = webPage;\n    const isDocumentMedia = webPageDocument && (isDocumentPhoto(webPageDocument) || isDocumentVideo(webPageDocument));\n    const mediaDocument = isDocumentMedia ? webPageDocument : undefined;\n    const media = webPageVideo || mediaDocument || webPagePhoto;\n    if (media) {\n      return {\n        media,\n        isSingle: true,\n      };\n    }\n  }\n\n  if (paidMedia) {\n    const extendedMedia = paidMedia.extendedMedia[params.mediaIndex || 0];\n    if (!('mediaType' in extendedMedia)) {\n      const { photo: extendedPhoto, video: extendedVideo } = extendedMedia;\n      return {\n        media: (extendedPhoto || extendedVideo)!,\n      };\n    }\n  }\n\n  const media = video || photo;\n\n  if (media) {\n    return {\n      media,\n      isSingle: video?.isGif,\n    };\n  }\n\n  return undefined;\n}\n","import type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport getOffsetToContainer from '../../../util/visibility/getOffsetToContainer';\nimport { isElementInViewport } from '../../../util/visibility/isElementInViewport';\nimport windowSize from '../../../util/windowSize';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n  mediaIndex?: number,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message, mediaIndex);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage, mediaIndex?: number,\n) {\n  const { container, mediaEl: toImage } = getNodes(origin, message, mediaIndex);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [\n      MediaViewerOrigin.Inline,\n      MediaViewerOrigin.ScheduledInline,\n      MediaViewerOrigin.Album,\n      MediaViewerOrigin.ScheduledAlbum,\n    ].includes(origin)\n    && !isMessageImageFullyVisible(toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n\n  const { top } = getOffsetToContainer(imageEl, messageListElement);\n\n  return top > messageListElement.scrollTop\n    && top + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage, index?: number) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      // eslint-disable-next-line @stylistic/max-len\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.PreviewMedia:\n      containerSelector = `#preview-media${index}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ChannelAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.StarsTransaction:\n      containerSelector = '.transaction-media-preview';\n      mediaSelector = index === 0 ? `.stars-transaction-media-${index} :is(img, video)` : undefined;\n      break;\n\n    case MediaViewerOrigin.SponsoredMessage:\n      containerSelector = '.Transition_slide-active > .MessageList .sponsored-media-preview';\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = mediaSelector\n    ? container?.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector) : undefined;\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.StarsTransaction:\n    case MediaViewerOrigin.PreviewMedia:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n    case MediaViewerOrigin.ChannelAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useCallback, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/browser/windowEnvironment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: ElementRef<HTMLVideoElement>,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport type { MediaViewerMedia } from '../../../types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getMediaFileSize,\n  getMediaFormat,\n  getMediaHash,\n  getMediaThumbUri,\n  getPhotoFullDimensions,\n  getProfilePhotoMediaHash,\n  getVideoDimensions,\n  getVideoProfilePhotoMediaHash,\n  isDocumentPhoto,\n  isDocumentVideo,\n} from '../../../global/helpers';\nimport { AVATAR_FULL_DIMENSIONS, VIDEO_AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\n\nconst FALLBACK_DIMENSIONS = AVATAR_FULL_DIMENSIONS;\n\ntype UseMediaProps = {\n  media?: MediaViewerMedia;\n  isAvatar?: boolean;\n  origin?: MediaViewerOrigin;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  media,\n  isAvatar,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const isPhotoAvatar = isAvatar && media?.mediaType === 'photo' && !media.isVideo;\n  const isVideoAvatar = isAvatar && media?.mediaType === 'photo' && media.isVideo;\n  const isDocument = media?.mediaType === 'document';\n  const isVideo = (media?.mediaType === 'video' && !media.isRound) || (isDocument && isDocumentVideo(media));\n  const isPhoto = media?.mediaType === 'photo' || (isDocument && isDocumentPhoto(media));\n  const isGif = media?.mediaType === 'video' && media.isGif;\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaOrAvatarHash = useMemo(() => (isFull?: boolean) => {\n    if (!media) return undefined;\n\n    if ((isPhotoAvatar || isVideoAvatar) && !isFull) {\n      return getProfilePhotoMediaHash(media);\n    }\n\n    if (isVideoAvatar && isFull) {\n      return getVideoProfilePhotoMediaHash(media);\n    }\n\n    return getMediaHash(media, isFull ? 'full' : 'preview');\n  }, [isVideoAvatar, isPhotoAvatar, media]);\n\n  const pictogramBlobUrl = useMedia(\n    media\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocument)\n    && getMediaHash(media, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const previewMediaHash = getMediaOrAvatarHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaOrAvatarHash(true),\n    undefined,\n    media && getMediaFormat(media, 'full'),\n    delay,\n  );\n\n  const localBlobUrl = media && 'blobUrl' in media ? media.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && media && getMediaThumbUri(media));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    (!isVideoAvatar && !isVideo) ? (previewBlobUrl || pictogramBlobUrl || bestImageData) : undefined\n  );\n\n  const mediaSize = media && getMediaFileSize(media);\n\n  const isLocal = Boolean(localBlobUrl);\n\n  const dimensions = useMemo(() => {\n    if (isAvatar) {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n\n    if (isDocument) {\n      return media.mediaSize!;\n    }\n\n    if (isPhoto) {\n      return getPhotoFullDimensions(media);\n    }\n\n    if (isVideo) {\n      return getVideoDimensions(media);\n    }\n\n    return FALLBACK_DIMENSIONS;\n  }, [isAvatar, isDocument, isPhoto, isVideo, isVideoAvatar, media]);\n\n  return {\n    getMediaHash: getMediaOrAvatarHash,\n    media,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocument,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    mediaSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useBlur from './useBlur';\nimport useSyncEffect from './useSyncEffect';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto, ApiReportReason } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  peerId?: string;\n  photo?: ApiPhoto;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nconst ReportAvatarModal: FC<OwnProps> = ({\n  isOpen,\n  peerId,\n  photo,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { reportProfilePhoto } = getActions();\n\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = useLastCallback(() => {\n    reportProfilePhoto({\n      chatId: peerId, photo, reason: selectedReason, description,\n    });\n    onClose();\n  });\n\n  const handleSelectReason = useLastCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  });\n\n  const handleDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  });\n\n  const lang = useOldLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = useMemo(() => [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'illegalDrugs', label: 'Illegal Drugs' },\n    { value: 'personalDetails', label: 'Personal Details' },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ], [lang]);\n\n  if (!peerId || !photo) {\n    return undefined;\n  }\n\n  const title = lang('ReportPeer.Report');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      className=\"narrow\"\n      title={title}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n          {lang('lng_report_button')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAvatarModal);\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useUnmountCleanup(() => {\n    setZoomChange(1);\n  });\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\n\nimport { isUserId } from '../../util/entities/ids';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { ActiveDownloads, MediaViewerOrigin, MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { MenuItemProps } from '../ui/MenuItem';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport {\n  getIsDownloading,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActionsSlow, selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n  selectIsMessageProtected,\n  selectTabState,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport getViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useOldLang from '../../hooks/useOldLang';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  activeDownloads: ActiveDownloads;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  chat?: ApiChat;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  origin?: MediaViewerOrigin;\n};\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  mediaData?: string;\n  isVideo: boolean;\n  canUpdateMedia?: boolean;\n  canReportAvatar?: boolean;\n  activeDownloads?: ActiveDownloads;\n  onReportAvatar: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  item,\n  mediaData,\n  isVideo,\n  chat,\n  isChatProtected,\n  isProtected,\n  canReportAvatar,\n  canDelete,\n  canUpdate,\n  messageListType,\n  activeDownloads,\n  origin,\n  onReportAvatar: onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMedia,\n    cancelMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n    openMediaViewer,\n    openDeleteMessageModal,\n  } = getActions();\n\n  const isMessage = item?.type === 'message';\n\n  const { media } = getViewableMedia(item) || {};\n  const fileName = media && getMediaFilename(media);\n  const isDownloading = media && getIsDownloading(activeDownloads, media);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    media && getMediaHash(media, 'download'),\n    !isDownloading,\n    media && getMediaFormat(media, 'download'),\n  );\n\n  const handleDownloadClick = useLastCallback(() => {\n    if (!media) return;\n\n    if (isDownloading) {\n      cancelMediaDownload({ media });\n    } else {\n      const message = item?.type === 'message' ? item.message : undefined;\n      downloadMedia({ media, originMessage: message });\n    }\n  });\n\n  const handleZoomOut = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  });\n\n  const handleZoomIn = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  });\n\n  const handleUpdate = useLastCallback(() => {\n    if (item?.type !== 'avatar') return;\n    const { avatarOwner, profilePhotos, mediaIndex } = item;\n    const avatarPhoto = profilePhotos?.photos[mediaIndex];\n    if (isUserId(avatarOwner.id)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwner.id, photo: avatarPhoto });\n    }\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: avatarOwner.id,\n      mediaIndex: 0,\n      isAvatarView: true,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const lang = useOldLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModal() {\n    return (item?.type === 'avatar') ? (\n      <DeleteProfilePhotoModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        onConfirm={onBeforeDelete}\n        profileId={item.avatarOwner.id}\n        photo={item.profilePhotos.photos[item.mediaIndex]}\n      />\n    ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected || item?.type === 'standalone') {\n      return undefined;\n    }\n\n    return item?.type !== 'sponsoredMessage' && (isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <Icon name=\"download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <Icon name=\"download\" />\n      </Button>\n    ));\n  }\n\n  const openDeleteModalHandler = useLastCallback(() => {\n    if (item?.type === 'message' && chat) {\n      openDeleteMessageModal({\n        chatId: chat?.id,\n        messageIds: [item.message.id],\n        isSchedule: messageListType === 'scheduled',\n        onConfirm: onBeforeDelete,\n      });\n    } else {\n      openDeleteModal();\n    }\n  });\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (isMessage && item.message.isForwardingAllowed && !item.message.content.action && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'close' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReportAvatar) {\n      menuItems.push({\n        icon: 'flag',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModalHandler,\n        children: lang('Delete'),\n        destructive: true,\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children, destructive,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon as IconName}\n              href={href}\n              download={download}\n              onClick={onClick}\n              destructive={destructive}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModal()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {isMessage && item.message.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <Icon name=\"zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <Icon name=\"zoom-in\" />\n      </Button>\n      {canReportAvatar && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <Icon name=\"flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <Icon name=\"copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModalHandler}\n        >\n          <Icon name=\"delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {canDelete && renderDeleteModal()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    item, canUpdateMedia,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { origin } = tabState.mediaViewer;\n\n    const message = item?.type === 'message' ? item.message : undefined;\n    const avatarOwner = item?.type === 'avatar' ? item.avatarOwner : undefined;\n    const avatarPhoto = item?.type === 'avatar' && item.profilePhotos.photos[item.mediaIndex];\n\n    const chat = selectCurrentChat(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isProtected = selectIsMessageProtected(global, message);\n    const activeDownloads = selectActiveDownloads(global);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActionsSlow(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarPhotoId);\n    const canDeleteAvatar = canUpdateMedia && Boolean(avatarPhoto);\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && Boolean(avatarPhoto) && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      activeDownloads,\n      isProtected,\n      chat,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      origin,\n    };\n  },\n)(MediaViewerActions));\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import { createSignal } from '../../../util/signals';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import { useUnmountCleanup } from '../lib/teact/teact';\n\nimport { createSignal } from '../util/signals';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useUnmountCleanup(() => {\n    setCurrentTime(0);\n  });\n\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { throttle } from '../../util/schedulers';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Button from '../ui/Button';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  buttonText?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', buttonText, isForVideo, onClick, handleSponsoredClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text');\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const onButtonClick = useLastCallback(() => {\n    handleSponsoredClick();\n  });\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll allow-selection ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">\n            {text}\n          </p>\n        </div>\n      )}\n      {Boolean(buttonText) && (\n        <Button\n          className={buildClassName('media-viewer-footer-content', 'media-viewer-button')}\n          size=\"default\"\n          color=\"primary\"\n          isRectangular\n          onClick={onButtonClick}\n        >\n          {buttonText}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nexport const [getIsVideoWaiting, setIsVideoWaiting] = createSignal(false);\n\nexport default function useVideoWaitingSignal() {\n  useUnmountCleanup(() => {\n    setIsVideoWaiting(false);\n  });\n\n  return [getIsVideoWaiting, setIsVideoWaiting] as const;\n}\n","import { ApiMediaFormat } from '../../api/types';\n\nimport { IS_ANDROID, IS_IOS } from '../../util/browser/windowEnvironment';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\nimport { callApi } from '../../api/gramjs';\nimport { requestMutation } from '../fasterdom/fasterdom';\n\nconst IS_MOBILE = IS_ANDROID || IS_IOS;\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst MAX_FRAMES = IS_MOBILE ? 40 : 80;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames = new Map<number, ImageBitmap>();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          MAX_FRAMES,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => {\n    videoPreview?.destroy();\n    videoPreview = undefined;\n  };\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ingarEvU\",\"preview\":\"TqpEWfl3\",\"previewCanvas\":\"fKVz2lln\",\"previewTime\":\"bGiNvx5D\",\"previewTimeText\":\"mnkqvOMR\",\"track\":\"Od9ZSc1U\",\"buffered\":\"ANe2DKfp\",\"played\":\"igaGLblf\",\"seeking\":\"beUP6SqY\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport { createVideoPreviews, getPreviewDimensions, renderVideoPreview } from '../../lib/video-preview/VideoPreview';\nimport { animateNumber } from '../../util/animation';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents } from '../../util/captureEvents';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp, round } from '../../util/math';\n\nimport { useThrottledSignal } from '../../hooks/useAsyncResolvers';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  playbackRate: number;\n  isActive?: boolean;\n  isPlaying?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst LOCK_TIMEOUT = 250;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\n\nconst SeekLine: FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  playbackRate,\n  url,\n  isActive,\n  isPlaying,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  const seekerRef = useRef<HTMLDivElement>();\n  const [getCurrentTimeSignal] = useCurrentTimeSignal();\n  const [getIsWaiting] = useVideoWaitingSignal();\n  const getCurrentTime = useThrottledSignal(getCurrentTimeSignal, LOCK_TIMEOUT);\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  const previewCanvasRef = useRef<HTMLCanvasElement>();\n  const previewRef = useRef<HTMLDivElement>();\n  const progressRef = useRef<HTMLDivElement>();\n  const previewTimeRef = useRef<HTMLDivElement>();\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useLastCallback((time: number) => {\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  });\n\n  useEffect(() => {\n    if (isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (cancelAnimation) cancelAnimation();\n    cancelAnimation = undefined;\n    if (!isLockedRef.current && !isSeeking) {\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime, playbackRate, duration]);\n\n  useEffect(() => {\n    if (!isPlaying || getIsWaiting()) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    }\n  }, [isPlaying, getSelectedTime, getIsWaiting]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n    // eslint-disable-next-line\n  }, [isPlaying, playbackRate, duration]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = getPointerPosition(e).x;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const stopAnimation = () => {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      stopAnimation();\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      stopAnimation();\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      stopAnimation();\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, LOCK_TIMEOUT);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n    playbackRate,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            // @ts-ignore\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef,\n  useSignal,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { IconName } from '../../types/icons';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport SeekLine from './SeekLine';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n  onSeekingChange: (isSeeking: boolean) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n  onSeekingChange,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const closeTimeoutRef = useRef<number | undefined>();\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n      return undefined;\n    }\n    closeTimeoutRef.current = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useOldLang();\n\n  const handleSeek = useLastCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n    onSeekingChange(false);\n  });\n\n  const handleSeekStart = useLastCallback(() => {\n    setIsSeeking(true);\n    onSeekingChange(true);\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPlaying={isPlaying}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        playbackRate={playbackRate}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <Icon name={isPlaying ? 'pause' : 'play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <Icon name=\"pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <Icon name={isFullscreen ? 'smallscreen' : 'fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nexport default memo(VideoPlayerControls);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/browser/windowEnvironment';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp } from '../../util/math';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useFullscreen from '../../hooks/window/useFullscreen';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  isClickDisabled?: boolean;\n  isSponsoredMessage?: boolean;\n  timestamp?: number;\n  handleSponsoredClick?: (isFromMedia?: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n  isSponsoredMessage,\n  timestamp,\n  handleSponsoredClick,\n  onClose,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  const videoRef = useRef<HTMLVideoElement>();\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useLastCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  });\n\n  const handleLeaveFullscreen = useLastCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  });\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n  const lastMousePosition = useRef({ x: 0, y: 0 });\n\n  useEffect(() => {\n    const updateMousePosition = (e: MouseEvent | TouchEvent) => {\n      lastMousePosition.current = getPointerPosition(e);\n    };\n\n    window.addEventListener('mousemove', updateMousePosition);\n    window.addEventListener('touchmove', updateMousePosition);\n\n    return () => {\n      window.removeEventListener('mousemove', updateMousePosition);\n      window.removeEventListener('touchmove', updateMousePosition);\n    };\n  }, []);\n\n  const checkMousePositionAndToggleControls = useLastCallback((clientX: number, clientY: number) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (clientX <= bounds.left || clientX >= bounds.right\n      || clientY <= bounds.top || clientY >= bounds.bottom) {\n      if (!getIsSeeking()) {\n        toggleControls(false);\n      }\n    }\n  });\n\n  const handleVideoMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const handleVideoLeave = useLastCallback((e) => {\n    checkMousePositionAndToggleControls(e.clientX, e.clientY);\n  });\n\n  const handleSeekingChange = useLastCallback((isSeeking: boolean) => {\n    setIsSeeking(isSeeking);\n    if (!isSeeking) {\n      const { x, y } = lastMousePosition.current;\n      checkMousePositionAndToggleControls(x, y);\n    }\n  });\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const isUnsupported = useUnsupportedMedia(videoRef, undefined, !url);\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransitionDeprecated(\n    !isBuffered && !isUnsupported, undefined, undefined, 'slow',\n  );\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransitionDeprecated(\n    IS_IOS && !isPlaying && !shouldRenderSpinner && !isUnsupported, undefined, undefined, 'slow',\n  );\n\n  const [, setCurrentTime] = useCurrentTimeSignal();\n  const [, setIsVideoWaiting] = useVideoWaitingSignal();\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen || isUnsupported) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted, isUnsupported]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  useEffect(() => {\n    if (!timestamp) return;\n    videoRef.current!.currentTime = timestamp;\n    setCurrentTime(timestamp);\n  }, [setCurrentTime, timestamp]);\n\n  const togglePlayState = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isSponsoredMessage) {\n      handleSponsoredClick?.(true);\n      onClose(e);\n    }\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  });\n\n  useVideoCleanup(videoRef, bufferingHandlers);\n\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setIsVideoWaiting(false);\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  });\n\n  const handleEnded = useLastCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  });\n\n  const handleFullscreenChange = useLastCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  });\n\n  const handleSeek = useLastCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  });\n\n  const handleVolumeChange = useLastCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handlePlaybackRateChange = useLastCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  });\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseLeave={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onWaiting={() => setIsVideoWaiting(true)}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n          src={url}\n        />\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <Icon name=\"play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !isSponsoredMessage && !isUnsupported && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n          onSeekingChange={handleSeekingChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type React from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiDimensions, ApiMessage, ApiSponsoredMessage,\n} from '../../api/types';\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport { MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION } from '../../config';\nimport {\n  selectIsMessageProtected, selectMessageTimestampableDuration, selectTabState,\n} from '../../global/selectors';\nimport { ARE_WEBCODECS_SUPPORTED } from '../../util/browser/globalEnvironment';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport getViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport useThrottledCallback from '../../hooks/useThrottledCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  item: MediaViewerItem;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  isMoving?: boolean;\n  onClose: () => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: () => void;\n};\n\ntype StateProps = {\n  textMessage?: ApiMessage | ApiSponsoredMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  threadId?: ThreadId;\n  timestamp?: number;\n  maxTimestamp?: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\nconst PLAYBACK_SAVE_INTERVAL = 1000;\n\nconst MediaViewerContent = ({\n  item,\n  isActive,\n  textMessage,\n  origin,\n  withAnimation,\n  isProtected,\n  volume,\n  playbackRate,\n  isMuted,\n  isHidden,\n  isMoving,\n  threadId,\n  timestamp,\n  maxTimestamp,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}: OwnProps & StateProps) => {\n  const { updateLastPlaybackTimestamp } = getActions();\n\n  const lang = useOldLang();\n\n  const isAvatar = item.type === 'avatar';\n  const isSponsoredMessage = item.type === 'sponsoredMessage';\n  const { media } = getViewableMedia(item) || {};\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    mediaSize,\n    loadProgress,\n  } = useMediaProps({\n    media, isAvatar, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n  const [getCurrentTime] = useCurrentTimeSignal();\n\n  const isOpen = Boolean(media);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const updatePlaybackTimestamp = useThrottledCallback(() => {\n    if (!isActive || !textMessage || media?.mediaType !== 'video') return;\n    if (media.duration < MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION) return;\n\n    const message = 'id' in textMessage ? textMessage : undefined;\n    const currentTime = getCurrentTime();\n    if (!currentTime || !message || message.isInAlbum) return;\n\n    // Reset timestamp if we are close to the end of the video\n    const newTimestamp = media.duration - currentTime > PLAYBACK_SAVE_INTERVAL / 1000 ? currentTime : undefined;\n    updateLastPlaybackTimestamp({ chatId: message.chatId, messageId: message.id, timestamp: newTimestamp });\n  }, [getCurrentTime, isActive, media, textMessage], PLAYBACK_SAVE_INTERVAL);\n\n  useSignalEffect(updatePlaybackTimestamp, [getCurrentTime]);\n\n  if (!media) return undefined;\n\n  if (item.type === 'avatar') {\n    if (!isVideoAvatar) {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={media.id}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={mediaSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n            isSponsoredMessage={isSponsoredMessage}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        </div>\n      );\n    }\n  }\n\n  const textParts = textMessage && (\n    textMessage.content.action\n      ? (textMessage.content.action.type === 'suggestProfilePhoto'\n        ? lang('Conversation.SuggestedPhotoTitle') : undefined)\n      : renderMessageText({\n        message: textMessage, maxTimestamp, threadId, forcePlayback: true, isForMediaViewer: true,\n      }));\n  const buttonText = textMessage && 'buttonText' in textMessage ? textMessage.buttonText : undefined;\n  const hasFooter = Boolean(textParts);\n  const posterSize = calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={media.id}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={mediaSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n          isSponsoredMessage={isSponsoredMessage}\n          handleSponsoredClick={handleSponsoredClick}\n          timestamp={timestamp}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          buttonText={buttonText}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { item }): StateProps => {\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n      origin,\n      timestamp,\n      threadId,\n    } = selectTabState(global).mediaViewer;\n    const message = item.type === 'message' ? item.message : undefined;\n    const sponsoredMessage = item.type === 'sponsoredMessage' ? item.message : undefined;\n    const textMessage = message || sponsoredMessage;\n\n    const maxTimestamp = message && selectMessageTimestampableDuration(global, message, true);\n\n    return {\n      origin,\n      textMessage,\n      isProtected: message && selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n      threadId,\n      timestamp,\n      maxTimestamp,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  chatId?: string;\n  threadId?: ThreadId;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  getNextItem: (from: MediaViewerItem, direction: number) => MediaViewerItem | undefined;\n  selectItem: (item: MediaViewerItem) => void;\n  loadMoreItemsIfNeeded: (item: MediaViewerItem) => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  onClose: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\nlet cancelZoomAnimation: ReturnType<typeof animateNumber> | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  item,\n  isVideo,\n  isGif,\n  isOpen,\n  withAnimation,\n  isHidden,\n  isLoadingMoreMedia,\n  isSynced,\n  loadMoreItemsIfNeeded,\n  getNextItem,\n  selectItem,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const activeSlideRef = useRef<HTMLDivElement>();\n  const leftSlideRef = useRef<HTMLDivElement>();\n  const rightSlideRef = useRef<HTMLDivElement>();\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const initialContentRectRef = useRef<DOMRect | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveItem, setActiveItem] = useSignal<MediaViewerItem | undefined>(item);\n  const activeItemRef = useSignalRef(getActiveItem);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeItem = useDerivedState(getActiveItem);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectItemDebounced = useDebouncedCallback(selectItem, [selectItem], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = Boolean(isGif && !IS_IOS);\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  });\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { scale, x, y } = transformRef.current;\n    // Only update active media if slide is in default position\n    if (x === 0 && y === 0 && scale === 1) {\n      setActiveItem(item);\n    }\n  }, [item, setActiveItem, transformRef]);\n\n  useEffect(() => {\n    if (!isSynced || !activeItem || isLoadingMoreMedia) return;\n    loadMoreItemsIfNeeded(activeItem);\n  }, [activeItem, loadMoreItemsIfNeeded, isSynced, isLoadingMoreMedia]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeItemRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const cActiveItem = activeItemRef.current;\n      if (cActiveItem === undefined) return false;\n      const nextItem = getNextItem(cActiveItem, direction);\n      if (nextItem !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      const initialContentRect = initialContentRectRef.current;\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const cActiveItem = activeItemRef.current;\n      const nextItem = cActiveItem && getNextItem(cActiveItem, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (nextItem !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      withWheelDrag: true,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRectRef.current = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > SWIPE_DIRECTION_THRESHOLD || absOffsetX / absOffsetY > SWIPE_DIRECTION_TOLERANCE) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    activeItemRef,\n    clearSwipeDirectionDebounced,\n    clickXThreshold,\n    getNextItem,\n    isFullscreen,\n    isHidden,\n    onClose,\n    selectItemDebounced,\n    setActiveItem,\n    setIsActiveDebounced,\n    setTransform,\n    shouldCloseOnVideo,\n    transformRef,\n    windowHeight,\n    windowWidth,\n    withAnimation,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  const [prevItem, nextItem] = useMemo(() => {\n    if (activeItem === undefined) return [undefined, undefined];\n    return [getNextItem(activeItem, -1), getNextItem(activeItem, 1)];\n  }, [activeItem, getNextItem]);\n\n  if (activeItem === undefined) return undefined;\n\n  const hasPrev = prevItem !== undefined;\n  const hasNext = nextItem !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={prevItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          item={activeItem}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n          onClose={onClose}\n          onFooterClick={onFooterClick}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={nextItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiPeer } from '../../api/types';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport {\n  isChatChannel, isChatGroup,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectSender,\n} from '../../global/selectors';\nimport { formatMediaDateTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n};\n\ntype StateProps = {\n  owner?: ApiPeer;\n};\n\nconst BULLET = '\\u2022';\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  owner,\n  item,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useLastCallback(() => {\n    closeMediaViewer();\n\n    if (item?.type !== 'message') return;\n\n    const message = item.message;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId: message.chatId, messageId: message.id });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId: message.chatId, messageId: message.id });\n    }\n  });\n\n  const lang = useOldLang();\n\n  const subtitle = useMemo(() => {\n    if (!item || item.type === 'standalone') return undefined;\n\n    const avatarOwner = item.type === 'avatar' ? item.avatarOwner : undefined;\n    const profilePhotos = item.type === 'avatar' ? item.profilePhotos : undefined;\n    const avatar = profilePhotos?.photos[item.mediaIndex!];\n    const isFallbackAvatar = avatar?.id === profilePhotos?.fallbackPhoto?.id;\n    const isPersonalAvatar = avatar?.id === profilePhotos?.personalPhoto?.id;\n    const date = item.type === 'message' ? item.message.date : avatar?.date;\n    if (!date) return undefined;\n\n    const formattedDate = formatMediaDateTime(lang, date * 1000, true);\n    const count = profilePhotos?.count\n      && (profilePhotos.count + (profilePhotos?.fallbackPhoto ? 1 : 0));\n    const currentIndex = item.mediaIndex! + 1 + (profilePhotos?.personalPhoto ? -1 : 0);\n    const countText = count && lang('Of', [currentIndex, count]);\n\n    const parts: string[] = [];\n    if (avatar) {\n      const chat = !isUserId(avatarOwner!.id) ? avatarOwner as ApiChat : undefined;\n      const isChannel = chat && isChatChannel(chat);\n      const isGroup = chat && isChatGroup(chat);\n      parts.push(lang(\n        isPersonalAvatar ? 'lng_mediaview_profile_photo_by_you'\n          : isFallbackAvatar ? 'lng_mediaview_profile_public_photo'\n            : isChannel ? 'lng_mediaview_channel_photo'\n              : isGroup ? 'lng_mediaview_group_photo' : 'lng_mediaview_profile_photo',\n      ));\n    }\n\n    if (countText && !isPersonalAvatar && !isFallbackAvatar) {\n      parts.push(countText);\n    }\n\n    parts.push(formattedDate);\n\n    return parts.join(` ${BULLET} `);\n  }, [item, lang]);\n\n  if (!owner) {\n    return undefined;\n  }\n\n  const senderTitle = getPeerTitle(lang, owner);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      <Avatar key={owner.id} size=\"medium\" peer={owner} />\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {subtitle}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { item }): StateProps => {\n    const message = item?.type === 'message' ? item.message : undefined;\n    const messageSender = message && selectSender(global, message);\n\n    const owner = item?.type === 'avatar' ? item.avatarOwner : messageSender;\n\n    return {\n      owner,\n    };\n  },\n)(SenderInfo);\n","import type React from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPeer,\n  ApiPeerPhotos,\n  ApiPhoto,\n  ApiSponsoredMessage,\n} from '../../api/types';\nimport { type MediaViewerMedia, MediaViewerOrigin, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatMediaMessageIds, getMessagePaidMedia, isChatAdmin,\n} from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChatMediaSearch,\n  selectCurrentSharedMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerPhotos,\n  selectPerformanceSettingsValue,\n  selectScheduledMessage, selectSponsoredMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { isUserId } from '../../util/entities/ids';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport getViewableMedia, { getMediaViewerItem, type MediaViewerItem } from './helpers/getViewableMedia';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Icon from '../common/icons/Icon';\nimport ReportAvatarModal from '../common/ReportAvatarModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  messageId?: number;\n  message?: ApiMessage;\n  collectedMessageIds?: number[];\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatar?: ApiPhoto;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  chatMessages?: Record<number, ApiMessage>;\n  sponsoredMessage?: ApiSponsoredMessage;\n  standaloneMedia?: MediaViewerMedia[];\n  mediaIndex?: number;\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  withDynamicLoading?: boolean;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n};\n\nconst ANIMATION_DURATION = 250;\nconst AVATAR_LOAD_TRIGGER = 4;\n\nconst MediaViewer = ({\n  chatId,\n  threadId,\n  messageId,\n  message,\n  collectedMessageIds,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatar,\n  avatarOwner,\n  profilePhotos,\n  chatMessages,\n  sponsoredMessage,\n  standaloneMedia,\n  mediaIndex,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n  withDynamicLoading,\n  isLoadingMoreMedia,\n  isSynced,\n}: StateProps) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n    searchChatMediaMessages,\n    loadMoreProfilePhotos,\n    clickSponsored,\n    openUrl,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || message || standaloneMedia || sponsoredMessage);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const senderId = message?.senderId || avatarOwner?.id || message?.chatId;\n  const prevSenderId = usePreviousDeprecated<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportAvatarModalOpen, openReportAvatarModal, closeReportAvatarModal] = useFlag();\n\n  const currentItem = getMediaViewerItem({\n    message, avatarOwner, standaloneMedia, profilePhotos, mediaIndex, sponsoredMessage,\n  });\n  const { media, isSingle } = getViewableMedia(currentItem) || {};\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n  } = useMediaProps({\n    media, isAvatar: Boolean(avatarOwner), origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReportAvatar = (() => {\n    if (isChatWithSelf) return false;\n    if (currentItem?.type !== 'avatar' || !avatarOwner) return false;\n    const info = currentItem.profilePhotos;\n    if (media === info.personalPhoto) return false;\n    return true;\n  })();\n  const isVisible = !isHidden && isOpen;\n\n  const messageMediaIds = useMemo(() => {\n    return withDynamicLoading\n      ? collectedMessageIds\n      : getChatMediaMessageIds(chatMessages || {}, collectedMessageIds || [], isFromSharedMedia);\n  }, [chatMessages, collectedMessageIds, isFromSharedMedia, withDynamicLoading]);\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || animationKey.current === undefined)) {\n    animationKey.current = isSingle ? 0 : (messageId || mediaIndex);\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      requestMutation(() => {\n        document.body.classList.toggle('is-media-viewer-open', isOpen);\n      });\n    }\n  }, [isMobile, isOpen]);\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    mql.addEventListener('change', forceUpdate);\n\n    return () => {\n      mql.removeEventListener('change', forceUpdate);\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePreviousDeprecated<ApiMessage | undefined>(message);\n  const prevIsHidden = usePreviousDeprecated<boolean | undefined>(isHidden);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const prevItem = usePreviousDeprecated(currentItem);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const textParts = message ? renderMessageText({ message, forcePlayback: true, isForMediaViewer: true }) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevItem !== currentItem;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (shouldAnimateOpening || !prevItem)) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message, mediaIndex);\n    }\n\n    if (isGhostAnimation && !isOpen && prevItem) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage, prevItem?.mediaIndex);\n    }\n  }, [\n    bestImageData, dimensions, hasFooter, isGhostAnimation, isOpen, isVideo, message, origin,\n    prevBestImageData, prevItem, prevMessage, prevOrigin, shouldAnimateOpening, mediaIndex,\n  ]);\n\n  const handleClose = useLastCallback(() => closeMediaViewer());\n\n  const handleFooterClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (e.target instanceof HTMLElement && e.target.closest('a')) return; // Prevent closing on timestamp click\n\n    handleClose();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId });\n    }\n  });\n\n  const handleSponsoredClick = useLastCallback((isFromMedia?: boolean) => {\n    if (!sponsoredMessage || !chatId) return;\n\n    clickSponsored({ isMedia: isFromMedia, isFullscreen: true, randomId: sponsoredMessage.randomId });\n    openUrl({ url: sponsoredMessage.url });\n    closeMediaViewer();\n  });\n\n  const handleForward = useLastCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [messageId!],\n    });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const loadMoreItemsIfNeeded = useLastCallback((item?: MediaViewerItem) => {\n    if (!item || isLoadingMoreMedia) return;\n\n    if (item.type === 'avatar') {\n      const isNearEnd = item.mediaIndex >= item.profilePhotos.photos.length - AVATAR_LOAD_TRIGGER;\n      if (!isNearEnd) return;\n      loadMoreProfilePhotos({ peerId: item.avatarOwner.id });\n    }\n\n    if (item.type === 'message' && withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: item.message.id });\n    }\n  });\n\n  const getNextItem = useLastCallback((from: MediaViewerItem, direction: number): MediaViewerItem | undefined => {\n    if (direction === 0 || isSingle) return undefined;\n\n    if (from.type === 'standalone') {\n      const { media: fromMedia, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && nextIndex < fromMedia.length) {\n        return { type: 'standalone', media: fromMedia, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'avatar') {\n      const { avatarOwner: fromAvatarOwner, profilePhotos: fromProfilePhotos, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && fromProfilePhotos && nextIndex < fromProfilePhotos.photos.length) {\n        return {\n          type: 'avatar',\n          avatarOwner: fromAvatarOwner,\n          profilePhotos: fromProfilePhotos,\n          mediaIndex: nextIndex,\n        };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'sponsoredMessage') {\n      const { message: fromSponsoredMessage, mediaIndex: fromSponsoredMessageIndex } = from;\n      const nextIndex = fromSponsoredMessageIndex! + direction;\n      if (nextIndex >= 0 && fromSponsoredMessage) {\n        return { type: 'sponsoredMessage', message: fromSponsoredMessage, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    const { message: fromMessage, mediaIndex: fromMediaIndex } = from;\n\n    const paidMedia = getMessagePaidMedia(fromMessage);\n    if (paidMedia) {\n      const nextIndex = fromMediaIndex! + direction;\n\n      if (nextIndex >= 0 && nextIndex < paidMedia.extendedMedia.length) {\n        return { type: 'message', message: fromMessage, mediaIndex: nextIndex };\n      }\n    }\n\n    const index = messageMediaIds?.indexOf(fromMessage.id);\n    if (index === undefined) return undefined;\n    const nextIndex = index + direction;\n    const nextMessageId = messageMediaIds![nextIndex];\n    const nextMessage = chatMessages?.[nextMessageId];\n    if (nextMessage) {\n      return { type: 'message', message: nextMessage };\n    }\n\n    return undefined;\n  });\n\n  const openMediaViewerItem = useLastCallback((item?: MediaViewerItem) => {\n    if (!item) {\n      handleClose();\n      return;\n    }\n\n    const itemChatId = item.type === 'avatar'\n      ? item.avatarOwner.id : item.type === 'message'\n        ? item.message.chatId : undefined;\n    const itemMessageId = item.type === 'message' ? item.message.id : undefined;\n    const itemStandaloneMedia = item.type === 'standalone' ? item.media : undefined;\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: itemChatId,\n      messageId: itemMessageId,\n      standaloneMedia: itemStandaloneMedia,\n      mediaIndex: item.mediaIndex,\n      isAvatarView: item.type === 'avatar',\n      withDynamicLoading,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const handleBeforeDelete = useLastCallback(() => {\n    const mediaCount = profilePhotos?.photos.length\n      || standaloneMedia?.length || messageMediaIds?.length || 0;\n    if (mediaCount <= 1 || !currentItem) {\n      handleClose();\n      return;\n    }\n    // Before deleting, select previous media\n    const prevMedia = getNextItem(currentItem, -1);\n    if (prevMedia) {\n      openMediaViewerItem(prevMedia);\n      return;\n    }\n\n    if ((currentItem.type === 'avatar' && isUserId(currentItem.avatarOwner.id)) || currentItem.type === 'standalone') {\n      // Keep current item, it'll update when indexes shift\n      return;\n    }\n\n    handleClose();\n  });\n\n  const lang = useOldLang();\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined} ref={headerRef}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          <SenderInfo\n            key={media?.id}\n            item={currentItem}\n          />\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          item={currentItem}\n          canUpdateMedia={canUpdateMedia}\n          canReportAvatar={canReportAvatar}\n          onBeforeDelete={handleBeforeDelete}\n          onReportAvatar={openReportAvatarModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportAvatarModal\n          isOpen={isReportAvatarModalOpen}\n          onClose={closeReportAvatarModal}\n          photo={avatar}\n          peerId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        item={currentItem}\n        loadMoreItemsIfNeeded={loadMoreItemsIfNeeded}\n        isLoadingMoreMedia={isLoadingMoreMedia}\n        isSynced={isSynced}\n        getNextItem={getNextItem}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectItem={openMediaViewerItem}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n        handleSponsoredClick={handleSponsoredClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      messageId,\n      origin,\n      isHidden,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isAvatarView,\n      isSponsoredMessage,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId, isSynced } = global;\n    const isChatWithSelf = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    if (isAvatarView) {\n      const peer = selectPeer(global, chatId!);\n      let canUpdateMedia = false;\n      if (peer) {\n        canUpdateMedia = isUserId(peer.id) ? peer.id === currentUserId : isChatAdmin(peer as ApiChat);\n      }\n\n      const profilePhotos = selectPeerPhotos(global, chatId!);\n\n      return {\n        profilePhotos,\n        avatar: profilePhotos?.photos[mediaIndex!],\n        avatarOwner: peer,\n        isLoadingMoreMedia: profilePhotos?.isLoading,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n        standaloneMedia,\n        mediaIndex,\n        isSynced,\n      };\n    }\n\n    let message: ApiMessage | undefined;\n    if (chatId && messageId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        message = selectScheduledMessage(global, chatId, messageId);\n      } else {\n        message = selectChatMessage(global, chatId, messageId);\n      }\n    }\n\n    let sponsoredMessage: ApiSponsoredMessage | undefined;\n    if (isSponsoredMessage && chatId) {\n      if (origin === MediaViewerOrigin.SponsoredMessage) {\n        sponsoredMessage = selectSponsoredMessage(global, chatId);\n      }\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (chatId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        chatMessages = selectChatScheduledMessages(global, chatId);\n      } else {\n        chatMessages = selectChatMessages(global, chatId);\n      }\n    }\n\n    let isLoadingMoreMedia = false;\n    const isOriginInline = origin === MediaViewerOrigin.Inline;\n    const isOriginAlbum = origin === MediaViewerOrigin.Album;\n    let collectedMessageIds: number[] | undefined;\n\n    if (chatId && threadId && messageId) {\n      if (withDynamicLoading && (isOriginInline || isOriginAlbum)) {\n        const currentSearch = selectCurrentChatMediaSearch(global);\n        isLoadingMoreMedia = Boolean(currentSearch?.isLoading);\n        const { foundIds } = (currentSearch?.currentSegment) || {};\n        collectedMessageIds = foundIds;\n      } else if (origin === MediaViewerOrigin.SharedMedia) {\n        const currentSearch = selectCurrentSharedMediaSearch(global);\n        const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n        collectedMessageIds = foundIds;\n      } else if (isOriginInline || isOriginAlbum) {\n        const outlyingList = selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n        collectedMessageIds = outlyingList || selectListedIds(global, chatId, threadId);\n      }\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      sponsoredMessage,\n      collectedMessageIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isLoadingMoreMedia,\n      isSynced,\n    };\n  },\n)(MediaViewer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"bu_hGbaa\",\"fullSize\":\"W9A8SEMl\",\"backdrop\":\"OFh6u50Q\",\"captionBackdrop\":\"Jd1DYS6Y\",\"backdropNonInteractive\":\"xe67dhtF\",\"close\":\"Mye8Dwxa\",\"wrapper\":\"gLHHo5k8\",\"slideAnimation\":\"GJVwqV9e\",\"slideAnimationToActive\":\"_Yn4SWUB\",\"content\":\"hGCH03qc\",\"slideAnimationFromActive\":\"ZecqXqKy\",\"storyHeader\":\"e7HHuS1g\",\"composer\":\"FXineBYO\",\"caption\":\"RKedwa0I\",\"captionGradient\":\"sHNAfxzf\",\"media\":\"PVZ8TOWS\",\"mediaPreview\":\"lQfkulvp\",\"contentInner\":\"Wi0DXPH2\",\"name\":\"Ka1CGfzq\",\"slide\":\"urTtSsk9\",\"mobileSlide\":\"AjXOHOgE\",\"slidePreview\":\"Sef28wEh\",\"activeSlide\":\"uAlXNXJN\",\"slideInner\":\"g8ypsnnC\",\"mediaWrapper\":\"YiuvOPgT\",\"forward\":\"pGKsAszF\",\"storyIndicators\":\"jGDd2sza\",\"sender\":\"eMYhXF_X\",\"senderInfoTransition\":\"PXnfXZur\",\"senderInfo\":\"WpyVfrsc\",\"senderMeta\":\"jmKI_lhC\",\"senderName\":\"H1uod43o\",\"storyMetaRow\":\"zimpR8Hz\",\"storyMeta\":\"hGTnZuar\",\"closeButton\":\"WlLsjJ2Z\",\"actions\":\"GrsJNw3y\",\"active\":\"q756IpZB\",\"visibilityButton\":\"prxptFFf\",\"visibilityButtonSelf\":\"_MVsZpgB\",\"button\":\"TkphaPyQ\",\"buttonMenu\":\"K0_xAdzf\",\"captionInner\":\"D_5mWNmi\",\"captionContent\":\"ilyTRZtw\",\"captionText\":\"hmFA5qb1\",\"hasOverflow\":\"e1gyTmKe\",\"expanded\":\"HIMnUViv\",\"animate\":\"CvnxnCxN\",\"withShowMore\":\"Vq8pl_kQ\",\"captionShowMore\":\"bM5rlQtM\",\"navigate\":\"nZ30pf4g\",\"prev\":\"SXpRZiax\",\"next\":\"twOBFwUE\",\"modal\":\"nLPOogqS\",\"thumbnail\":\"MnNC7VHS\",\"ghost\":\"fME2l_yv\",\"ghost2\":\"TYicp2_K\",\"ghostImage\":\"HjoURJRK\",\"forwardHeader\":\"JJFtefb9\",\"clickable\":\"BsqMBS2I\",\"headerTitle\":\"G8OgmMDJ\",\"forwardInfo\":\"_M8CgT7s\",\"fromPeer\":\"nJr8QgYX\"};","import type { IDimensions } from '../../../types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport fastBlur from '../../../lib/fastBlur';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getPeerStoryHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport storyRibbonStyles from '../StoryRibbon.module.scss';\nimport styles from '../StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 200;\nconst OFFSET_BOTTOM = 3.5 * REM;\nconst MOBILE_OFFSET = 0.5 * REM;\nconst MOBILE_WIDTH = 600;\n\nexport function animateOpening(\n  userId: string,\n  origin: StoryViewerOrigin,\n  thumb: string,\n  bestImageData: string | undefined,\n  dimensions: IDimensions,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, userId);\n  if (!fromImage) {\n    return;\n  }\n  const { width: windowWidth, height: windowHeight } = windowSize.get();\n  let { width: toWidth, height: toHeight } = dimensions;\n\n  const isMobile = windowWidth <= MOBILE_WIDTH;\n\n  if (isMobile) {\n    toWidth = windowWidth - 2 * MOBILE_OFFSET;\n    toHeight = windowHeight - OFFSET_BOTTOM - 2 * MOBILE_OFFSET;\n\n    const safeAreaBottom = getComputedStyle(document.documentElement).getPropertyValue('--safe-area-bottom');\n    if (safeAreaBottom) {\n      toHeight -= parseFloat(safeAreaBottom);\n    }\n  }\n\n  const toLeft = isMobile ? MOBILE_OFFSET : (windowWidth - toWidth) / 2;\n  const toTop = isMobile ? MOBILE_OFFSET : (windowHeight - (toHeight + OFFSET_BOTTOM)) / 2;\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || thumb, !bestImageData);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: '',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  userId: string,\n  origin: StoryViewerOrigin,\n  bestImageData: string,\n) {\n  const { mediaEl: toImage } = getNodes(origin, userId);\n\n  const fromImage = document.getElementById('StoryViewer')!.querySelector<HTMLImageElement>(\n    `.${styles.mobileSlide} .${styles.media}, .${styles.activeSlide} .${styles.media}`,\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: toTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  const toTranslateX = (toLeft + toWidth / 2) - (fromLeft + fromWidth / 2);\n  const toTranslateY = (toTop + toHeight / 2) - (fromTop + fromHeight / 2);\n  const toScaleX = toWidth / fromWidth;\n  const toScaleY = toHeight / fromHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData);\n    applyStyles(ghost, {\n      top: `${fromTop}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromHeight}px`,\n    });\n\n    const ghost2 = createGhost(toImage.src, undefined, true);\n    const ghost2Top = (fromTop + fromHeight / 2) - fromWidth / 2;\n    applyStyles(ghost2, {\n      top: `${ghost2Top}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromWidth}px`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.appendChild(ghost2);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX}, ${toScaleY})`,\n      });\n\n      applyStyles(ghost2, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX})`,\n        opacity: '1',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n\n          if (document.body.contains(ghost2)) {\n            document.body.removeChild(ghost2);\n          }\n\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nfunction createGhost(source: string, hasBlur = false, isGhost2 = false) {\n  const ghost = document.createElement('div');\n  ghost.classList.add(!isGhost2 ? styles.ghost : styles.ghost2);\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n  img.classList.add(styles.ghostImage);\n\n  if (hasBlur) {\n    const canvas = document.createElement('canvas');\n    canvas.classList.add(styles.thumbnail);\n    img.onload = () => {\n      const ctx = canvas.getContext('2d', { alpha: false })!;\n      const {\n        width,\n        height,\n      } = img;\n\n      requestMutation(() => {\n        canvas.width = width;\n        canvas.height = height;\n\n        if (IS_CANVAS_FILTER_SUPPORTED) {\n          ctx.filter = `blur(${RADIUS}px)`;\n        }\n\n        ctx.drawImage(img, -RADIUS * 2, -RADIUS * 2, width + RADIUS * 4, height + RADIUS * 4);\n\n        if (!IS_CANVAS_FILTER_SUPPORTED) {\n          fastBlur(ctx, 0, 0, width, height, RADIUS, ITERATIONS);\n        }\n      });\n    };\n    img.src = source;\n    ghost.appendChild(canvas);\n  } else {\n    img.src = source;\n    ghost.appendChild(img);\n  }\n\n  return ghost;\n}\n\nfunction getNodes(origin: StoryViewerOrigin, userId: string) {\n  let containerSelector;\n  const mediaSelector = `#${getPeerStoryHtmlId(userId)}`;\n\n  switch (origin) {\n    case StoryViewerOrigin.StoryRibbon:\n      containerSelector = `#LeftColumn .${storyRibbonStyles.root}`;\n      break;\n    case StoryViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo';\n      break;\n    case StoryViewerOrigin.ChatList:\n      containerSelector = '#LeftColumn .chat-list';\n      break;\n    case StoryViewerOrigin.SearchResult:\n      containerSelector = '#LeftColumn .LeftSearch--container';\n      break;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement>(`${mediaSelector} img`);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n","import type { IDimensions } from '../../../types';\n\nimport { roundToNearestEven } from '../../../util/math';\n\nexport const BASE_STORY_WIDTH = 720;\nexport const BASE_STORY_HEIGHT = 1280;\nconst BASE_SCREEN_WIDTH = 1200;\nconst BASE_SCREEN_HEIGHT = 800;\nconst BASE_ACTIVE_SLIDE_WIDTH = 405;\nconst BASE_ACTIVE_SLIDE_HEIGHT = 720;\nconst BASE_SLIDE_WIDTH = 135;\nconst BASE_SLIDE_HEIGHT = 240;\nconst BASE_GAP_WIDTH = 40;\n\nexport function calculateSlideSizes(windowWidth: number, windowHeight: number): {\n  activeSlide: IDimensions;\n  slide: IDimensions;\n  scale: number;\n  toActiveScale: number;\n  fromActiveScale: number;\n} {\n  const scale = calculateScale(BASE_SCREEN_WIDTH, BASE_SCREEN_HEIGHT, windowWidth, windowHeight);\n\n  const activeSlideWidth = roundToNearestEven(BASE_ACTIVE_SLIDE_WIDTH * scale);\n  const slideWidth = roundToNearestEven(BASE_SLIDE_WIDTH * scale);\n  // Avoid fractional values to prevent blurry text\n  return {\n    activeSlide: {\n      width: activeSlideWidth,\n      height: roundToNearestEven(BASE_ACTIVE_SLIDE_HEIGHT * scale),\n    },\n    slide: {\n      width: slideWidth,\n      height: roundToNearestEven(BASE_SLIDE_HEIGHT * scale),\n    },\n    scale,\n    toActiveScale: activeSlideWidth / slideWidth,\n    fromActiveScale: slideWidth / activeSlideWidth,\n  };\n}\n\nexport function calculateOffsetX({\n  scale,\n  slideAmount,\n  isActiveSlideSize,\n  isMoveThroughActiveSlide,\n  isBackward,\n}: {\n  scale: number;\n  slideAmount: number;\n  isActiveSlideSize: boolean;\n  isMoveThroughActiveSlide?: boolean;\n  isBackward: boolean;\n}) {\n  const mainOffset = BASE_GAP_WIDTH + (isActiveSlideSize ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH);\n  const additionalOffset = (Math.abs(slideAmount) - 1)\n    * ((isMoveThroughActiveSlide ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH) + BASE_GAP_WIDTH);\n  const totalOffset = roundToNearestEven((mainOffset + additionalOffset) * scale);\n\n  return isBackward ? -totalOffset : totalOffset;\n}\n\nfunction calculateScale(baseWidth: number, baseHeight: number, newWidth: number, newHeight: number) {\n  const widthScale = newWidth / baseWidth;\n  const heightScale = newHeight / baseHeight;\n\n  return Math.min(widthScale, heightScale);\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport { calculateSlideSizes } from '../helpers/dimensions';\n\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nexport default function useSlideSizes() {\n  const { width: windowWidth, height: windowHeight } = useWindowSize();\n  return useMemo(() => calculateSlideSizes(windowWidth, windowHeight), [windowWidth, windowHeight]);\n}\n","import type { ApiTypeStory } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStoryMediaHash, hasMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nexport default function useStoryProps(\n  story?: ApiTypeStory, isCurrentUserPremium = false, isDropdownMenuOpen = false,\n) {\n  const isLoadedStory = story && 'content' in story;\n  const isDeletedStory = story && 'isDeleted' in story;\n  const hasText = isLoadedStory ? hasMessageText(story) : false;\n  const hasForwardInfo = isLoadedStory && Boolean(story.forwardInfo);\n\n  let thumbnail: string | undefined;\n  if (isLoadedStory) {\n    if (story.content.photo?.thumbnail) {\n      thumbnail = story.content.photo.thumbnail.dataUri;\n    }\n    if (story.content.video?.thumbnail?.dataUri) {\n      thumbnail = story.content.video.thumbnail.dataUri;\n    }\n  }\n\n  const previewHash = isLoadedStory ? getStoryMediaHash(story) : undefined;\n  const previewBlobUrl = useMedia(previewHash);\n  const isVideo = Boolean(isLoadedStory && story.content.video);\n  const noSound = isLoadedStory && story.content.video?.noSound;\n  const fullMediaHash = isLoadedStory ? getStoryMediaHash(story, 'full') : undefined;\n  const fullMediaData = useMedia(fullMediaHash, !story, isVideo ? ApiMediaFormat.Progressive : ApiMediaFormat.BlobUrl);\n  const altMediaHash = isVideo && isLoadedStory ? getStoryMediaHash(story, 'full', true) : undefined;\n  const altMediaData = useMedia(altMediaHash, !story, ApiMediaFormat.Progressive);\n\n  const hasFullData = Boolean(fullMediaData || altMediaData);\n  const bestImageData = isVideo ? previewBlobUrl : fullMediaData || previewBlobUrl;\n  const hasThumb = !previewBlobUrl && !hasFullData;\n\n  const canDownload = isCurrentUserPremium && isLoadedStory && !story.noForwards;\n  const downloadHash = isLoadedStory ? getStoryMediaHash(story, 'download') : undefined;\n  const downloadMediaData = useMedia(downloadHash, !canDownload && !isDropdownMenuOpen);\n\n  return {\n    isLoadedStory,\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewHash,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaHash,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    bestImageData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GrE47IXS\",\"closeButton\":\"NlWSF1pA\",\"stealthIcon\":\"qKi5jsGM\",\"title\":\"BFctFGoT\",\"description\":\"fZIJH4IG\",\"listItem\":\"RGD70uBt\",\"icon\":\"HCYfPccW\",\"button\":\"AM_sxoXP\",\"subtitle\":\"L8oRQyKb\"};","import { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStealthMode } from '../../api/types';\n\nimport { selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport TextTimer from '../ui/TextTimer';\n\nimport styles from './StealthModeModal.module.scss';\n\ntype StateProps = {\n  isOpen?: boolean;\n  stealthMode?: ApiStealthMode;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StealthModeModal = ({ isOpen, stealthMode, isCurrentUserPremium }: StateProps) => {\n  const {\n    toggleStealthModal,\n    activateStealthMode,\n    showNotification,\n    openPremiumModal,\n  } = getActions();\n  const [isOnCooldown, setIsOnCooldown] = useState(false);\n\n  useEffect(() => {\n    if (!stealthMode) return;\n    const serverTime = getServerTime();\n    if (stealthMode.cooldownUntil && stealthMode.cooldownUntil > serverTime) {\n      setIsOnCooldown(true);\n    }\n  }, [stealthMode, isOpen]);\n\n  const lang = useOldLang();\n\n  const handleTimerEnds = useLastCallback(() => {\n    setIsOnCooldown(false);\n  });\n\n  const handleClose = useLastCallback(() => {\n    toggleStealthModal({ isOpen: false });\n  });\n\n  const handleActivate = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({ initialSection: 'stories' });\n      return;\n    }\n\n    activateStealthMode();\n    showNotification({\n      title: lang('StealthModeOn'),\n      message: lang('StealthModeOnHint'),\n    });\n    toggleStealthModal({ isOpen: false });\n  });\n\n  return (\n    <Modal\n      className=\"component-theme-dark\"\n      contentClassName={styles.root}\n      isOpen={isOpen}\n      isSlim\n      onClose={handleClose}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.stealthIcon}>\n        <Icon name=\"eye-crossed-outline\" />\n      </div>\n      <div className={styles.title}>{lang('StealthMode')}</div>\n      <div className={styles.description}>\n        {lang(isCurrentUserPremium ? 'StealthModeHint' : 'StealthModePremiumHint')}\n      </div>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-past\" className={styles.icon} />}\n      >\n        <span className=\"title\">{lang('HideRecentViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideRecentViewsDescription')}</span>\n      </ListItem>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-future\" className={styles.icon} aria-hidden />}\n      >\n        <span className=\"title\">{lang('HideNextViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideNextViewsDescription')}</span>\n      </ListItem>\n      <Button\n        className={styles.button}\n        size=\"smaller\"\n        disabled={isOnCooldown}\n        isShiny={!isCurrentUserPremium}\n        withPremiumGradient={!isCurrentUserPremium}\n        onClick={handleActivate}\n      >\n        {!isCurrentUserPremium ? lang('UnlockStealthMode')\n          : isOnCooldown\n            ? (<TextTimer langKey=\"AvailableIn\" endsAt={stealthMode!.cooldownUntil!} onEnd={handleTimerEnds} />)\n            : lang('EnableStealthMode')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const tabState = selectTabState(global);\n\n  return {\n    isOpen: tabState.storyViewer?.isStealthModalOpen,\n    stealthMode: global.stories.stealthMode,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StealthModeModal));\n","import { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ninterface OwnProps {\n  isOpen: boolean;\n  story?: ApiTypeStory;\n  onClose: NoneToVoidFunction;\n}\n\nfunction StoryDeleteConfirmModal({\n  isOpen, story, onClose,\n}: OwnProps) {\n  const { deleteStory, openNextStory } = getActions();\n\n  const lang = useOldLang();\n\n  const handleDeleteStoryClick = useCallback(() => {\n    if (!story) {\n      return;\n    }\n\n    openNextStory();\n    deleteStory({ peerId: story.peerId, storyId: story.id });\n    onClose();\n  }, [onClose, story]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('DeleteStoryTitle')}\n      text={lang('DeleteStorySubtitle')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteStoryClick}\n      confirmIsDestructive\n      className=\"component-theme-dark\"\n    />\n  );\n}\n\nexport default memo(StoryDeleteConfirmModal);\n","import { memo, useMemo, useState } from '../../../lib/teact/teact';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\n\ninterface OwnProps {\n  id: string;\n  contactListIds?: string[];\n  currentUserId: string;\n  selectedIds?: string[];\n  lockedIds?: string[];\n  onSelect: (selectedIds: string[]) => void;\n}\n\nfunction AllowDenyList({\n  id,\n  contactListIds,\n  currentUserId,\n  selectedIds,\n  lockedIds,\n  onSelect,\n}: OwnProps) {\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((userId) => userId !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...selectedIds || [], ...contactIds], query: searchQuery, type: 'user' }));\n  }, [contactListIds, currentUserId, searchQuery, selectedIds]);\n\n  return (\n    <PeerPicker\n      key={id}\n      itemIds={displayedIds}\n      selectedIds={selectedIds ?? MEMO_EMPTY_ARRAY}\n      lockedSelectedIds={lockedIds}\n      filterValue={searchQuery}\n      filterPlaceholder={lang('Search')}\n      searchInputId={`${id}-picker-search`}\n      isSearchable\n      withDefaultPadding\n      forceShowSelf\n      onSelectedIdsChange={onSelect}\n      onFilterChange={setSearchQuery}\n      allowMultiple\n      withStatus\n      itemInputType=\"checkbox\"\n    />\n  );\n}\n\nexport default memo(AllowDenyList);\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonHolder\":\"BDK_pgpt\",\"active\":\"N8ujSwlC\"};","import {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nimport styles from './CloseFriends.module.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  currentUserId: string;\n  usersById: Record<string, ApiUser>;\n  contactListIds?: string[];\n  onClose: NoneToVoidFunction;\n};\n\nfunction CloseFriends({\n  isActive, contactListIds, usersById, currentUserId, onClose,\n}: OwnProps) {\n  const { saveCloseFriends } = getActions();\n\n  const lang = useOldLang();\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>([]);\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((id) => id !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...closeFriendIds, ...contactIds], query: searchQuery, type: 'user' }));\n  }, [closeFriendIds, contactListIds, currentUserId, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (!prevIsActive && isActive) {\n      setIsSubmitShown(false);\n      setNewSelectedContactIds(closeFriendIds);\n    }\n  }, [isActive, closeFriendIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useLastCallback(() => {\n    saveCloseFriends({ userIds: newSelectedContactIds });\n    onClose();\n  });\n\n  return (\n    <>\n      <PeerPicker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        searchInputId=\"close-friends-picker-search\"\n        isSearchable\n        withDefaultPadding\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        withStatus\n        itemInputType=\"checkbox\"\n      />\n\n      <div className={buildClassName(styles.buttonHolder, isSubmitShown && styles.active)}>\n        <FloatingActionButton\n          isShown={isSubmitShown}\n          onClick={handleSubmit}\n          ariaLabel={lang('Save')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n    </>\n  );\n}\n\nexport default memo(CloseFriends);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"hz7SomkK\",\"header\":\"NV6Rt2g9\",\"closeButton\":\"SN1GFS6L\",\"headerTitle\":\"gi0Y6Ns6\",\"content\":\"sTaVDkiD\",\"section\":\"eUiuPoEC\",\"title\":\"iPPiw9DI\",\"list\":\"OUP1Ss0W\",\"option\":\"JL33Sa3b\",\"checked\":\"qVPo_cVL\",\"input\":\"zsDaUk0i\",\"icon\":\"AfYCVlys\",\"action\":\"njMeBBwY\",\"optionContent\":\"TUAAnG2w\",\"footer\":\"r24Qz2bf\",\"info\":\"ljeRVBOm\",\"submit\":\"RwNLN_rH\"};","import type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPrivacySettings, ApiStory, ApiUser, PrivacyVisibility,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectPeerStory, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getHours } from '../../util/dates/units';\nimport stopEvent from '../../util/stopEvent';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Switcher from '../ui/Switcher';\nimport Transition from '../ui/Transition';\nimport AllowDenyList from './privacy/AllowDenyList';\nimport CloseFriends from './privacy/CloseFriends';\n\nimport styles from './StorySettings.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  onClose?: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  story?: ApiStory;\n  visibility?: ApiPrivacySettings;\n  contactListIds?: string[];\n  usersById: Record<string, ApiUser>;\n  currentUserId: string;\n}\n\ntype PrivacyAction = 'blockUserIds' | 'closeFriends' | 'blockContactUserIds' | 'allowUserIds';\n\ninterface PrivacyOption {\n  name: string;\n  value: PrivacyVisibility;\n  color: [string, string];\n  icon: IconName;\n  actions?: PrivacyAction;\n}\n\nconst OPTIONS: PrivacyOption[] = [{\n  name: 'StoryPrivacyOptionEveryone',\n  value: 'everybody',\n  color: ['#50ABFF', '#007AFF'],\n  icon: 'channel-filled',\n  actions: 'blockUserIds',\n}, {\n  name: 'StoryPrivacyOptionContacts',\n  value: 'contacts',\n  color: ['#C36EFF', '#8B60FA'],\n  icon: 'user-filled',\n  actions: 'blockContactUserIds',\n}, {\n  name: 'StoryPrivacyOptionCloseFriends',\n  value: 'closeFriends',\n  color: ['#88D93A', '#30B73B'],\n  icon: 'favorite-filled',\n  actions: 'closeFriends',\n}, {\n  name: 'StoryPrivacyOptionSelectedContacts',\n  value: 'nobody',\n  color: ['#FFB743', '#F69A36'],\n  icon: 'group-filled',\n  actions: 'allowUserIds',\n}];\n\nenum Screens {\n  privacy,\n  allowList,\n  closeFriends,\n  denyList,\n}\n\nfunction StorySettings({\n  isOpen,\n  story,\n  visibility,\n  contactListIds,\n  usersById,\n  currentUserId,\n  onClose,\n}: OwnProps & StateProps) {\n  const { editStoryPrivacy, toggleStoryInProfile } = getActions();\n\n  const lang = useOldLang();\n  const [isOpenModal, openModal, closeModal] = useFlag(false);\n  const [privacy, setPrivacy] = useState<ApiPrivacySettings | undefined>(visibility);\n  const [isPinned, setIsPinned] = useState(story?.isInProfile);\n  const [activeKey, setActiveKey] = useState<Screens>(Screens.privacy);\n  const [editingBlockingCategory, setEditingBlockingCategory] = useState<PrivacyVisibility>('everybody');\n  const isBackButton = activeKey !== Screens.privacy;\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const lockedIds = useMemo(() => {\n    if (activeKey === Screens.allowList\n      && (!privacy?.allowUserIds?.length || privacy.allowUserIds[0] === currentUserId)\n    ) {\n      return [currentUserId];\n    }\n\n    return undefined;\n  }, [activeKey, currentUserId, privacy?.allowUserIds]);\n\n  const selectedBlockedIds = useMemo(() => {\n    if (editingBlockingCategory !== privacy?.visibility) return [];\n    return privacy?.blockUserIds || [];\n  }, [editingBlockingCategory, privacy?.blockUserIds, privacy?.visibility]);\n\n  const handleAllowUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      allowUserIds: newIds?.length ? newIds?.filter((id) => id !== currentUserId) : [currentUserId],\n    });\n  });\n\n  const handleDenyUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      blockUserIds: newIds,\n      visibility: editingBlockingCategory,\n    });\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      setActiveKey(Screens.privacy);\n      openModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setPrivacy(visibility);\n  }, [visibility]);\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (activeKey === Screens.privacy) {\n      closeModal();\n      return;\n    }\n\n    setActiveKey(Screens.privacy);\n  });\n\n  function handleVisibilityChange(newVisibility: PrivacyVisibility) {\n    setPrivacy({\n      ...privacy!,\n      visibility: newVisibility,\n    });\n  }\n\n  function handleActionClick(e: React.MouseEvent<HTMLDivElement>, action: PrivacyAction) {\n    stopEvent(e);\n\n    switch (action) {\n      case 'closeFriends':\n        setActiveKey(Screens.closeFriends);\n        break;\n      case 'allowUserIds':\n        setActiveKey(Screens.allowList);\n        break;\n      case 'blockUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('everybody');\n        break;\n      case 'blockContactUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('contacts');\n        break;\n    }\n  }\n\n  const handleIsPinnedToggle = useLastCallback(() => {\n    setIsPinned(!isPinned);\n  });\n\n  // console.warn(privacy?.visibility, story?.visibility, OPTIONS);\n\n  const handleSubmit = useLastCallback(() => {\n    editStoryPrivacy({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      privacy: privacy!,\n    });\n    if (story!.isInProfile !== isPinned) {\n      toggleStoryInProfile({ peerId: story!.peerId, storyId: story!.id, isInProfile: isPinned });\n    }\n    closeModal();\n  });\n\n  function renderActionName(action: PrivacyAction) {\n    if (action === 'closeFriends') {\n      if (closeFriendIds.length === 0) {\n        return lang('StoryPrivacyOptionCloseFriendsDetail');\n      }\n\n      if (closeFriendIds.length === 1) {\n        return getPeerTitle(lang, usersById[closeFriendIds[0]]);\n      }\n\n      return lang('StoryPrivacyOptionPeople', closeFriendIds.length, 'i');\n    }\n\n    if ((action === 'blockUserIds' && privacy?.visibility === 'everybody')\n      || (action === 'blockContactUserIds' && privacy?.visibility === 'contacts')) {\n      if (!privacy?.blockUserIds?.length) {\n        return lang('StoryPrivacyOptionContactsDetail');\n      }\n\n      if (privacy.blockUserIds.length === 1) {\n        return lang('StoryPrivacyOptionExcludePerson', getUserFullName(usersById[privacy.blockUserIds[0]]));\n      }\n\n      return lang('StoryPrivacyOptionExcludePeople', privacy.blockUserIds.length, 'i');\n    }\n\n    if (!privacy?.allowUserIds || privacy.allowUserIds.length === 0) {\n      return lang('StoryPrivacyOptionSelectedContactsDetail');\n    }\n\n    if (privacy.allowUserIds.length === 1) {\n      return getUserFullName(usersById[privacy.allowUserIds[0]]);\n    }\n\n    return lang('StoryPrivacyOptionPeople', privacy.allowUserIds.length, 'i');\n  }\n\n  function renderHeaderContent() {\n    switch (activeKey) {\n      case Screens.privacy:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertEditTitle')}</h3>;\n      case Screens.allowList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertSelectContactsTitle')}</h3>;\n      case Screens.closeFriends:\n        return <h3 className={styles.headerTitle}>{lang('CloseFriends')}</h3>;\n      case Screens.denyList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertExcludedContactsTitle')}</h3>;\n    }\n  }\n\n  function renderContent(isActive: boolean) {\n    switch (activeKey) {\n      case Screens.privacy:\n        return renderPrivacyList();\n      case Screens.closeFriends:\n        return (\n          <CloseFriends\n            key=\"close-friends\"\n            isActive={isActive}\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            onClose={handleCloseButtonClick}\n          />\n        );\n      case Screens.denyList:\n        return (\n          <AllowDenyList\n            key=\"deny-list\"\n            id=\"deny-list\"\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            selectedIds={selectedBlockedIds}\n            onSelect={handleDenyUserIdsChange}\n          />\n        );\n      case Screens.allowList:\n        return (\n          <AllowDenyList\n            key=\"allow-list\"\n            id=\"allow-list\"\n            contactListIds={contactListIds}\n            lockedIds={lockedIds}\n            currentUserId={currentUserId}\n            selectedIds={privacy?.allowUserIds}\n            onSelect={handleAllowUserIdsChange}\n          />\n        );\n    }\n  }\n\n  function renderPrivacyList() {\n    const storyLifeTime = story ? getHours(story.expireDate - story.date) : 0;\n\n    return (\n      <>\n        <div className={styles.section}>\n          <h3 className={styles.title}>{lang('StoryPrivacyAlertSubtitleProfile')}</h3>\n          <div className={styles.list}>\n            {OPTIONS.map((option) => (\n              <label\n                key={option.value}\n                className={buildClassName(styles.option, option.value === privacy?.visibility && styles.checked)}\n              >\n                <input\n                  type=\"radio\"\n                  name=\"story_privacy\"\n                  className={styles.input}\n                  value={option.value}\n                  checked={option.value === privacy?.visibility}\n                  onChange={() => handleVisibilityChange(option.value)}\n                  teactExperimentControlled\n                />\n                <span\n                  className={styles.icon}\n                  style={`--color-from: ${option.color[0]}; --color-to: ${option.color[1]}`}\n                >\n                  <Icon name={option.icon} />\n                </span>\n                <div className={styles.optionContent}>\n                  <span className={buildClassName(styles.option_name)}>{lang(option.name)}</span>\n                  {option.actions && (\n                    <div\n                      tabIndex={0}\n                      role=\"button\"\n                      className={styles.action}\n                      aria-label={lang('Edit')}\n                      onClick={(e) => { handleActionClick(e, option.actions!); }}\n                    >\n                      <span className={styles.actionInner}>{renderActionName(option.actions)}</span>\n                      <Icon name=\"next\" />\n                    </div>\n                  )}\n                </div>\n              </label>\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <ListItem ripple onClick={handleIsPinnedToggle}>\n            <span>{lang('StoryKeep')}</span>\n            <Switcher\n              id=\"group-notifications\"\n              label={lang('StoryKeep')}\n              checked={isPinned}\n              inactive\n            />\n          </ListItem>\n        </div>\n        <div className={styles.footer}>\n          <div className={styles.info}>{lang('StoryKeepInfo', storyLifeTime)}</div>\n          <div className={styles.submit}>\n            <Button onClick={handleSubmit}>{lang('StoryPrivacyButtonSave')}</Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpenModal}\n      className={buildClassName(styles.modal, 'component-theme-dark')}\n      onClose={closeModal}\n      noBackdrop\n      onCloseAnimationEnd={onClose}\n    >\n      <div className={styles.header}>\n        <Button\n          className={buildClassName(styles.closeButton, 'close-button')}\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleCloseButtonClick}\n          ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n        >\n          <div className={buildClassName('animated-close-icon', isBackButton && 'state-back')} />\n        </Button>\n        <Transition name=\"slideFade\" activeKey={activeKey}>\n          {renderHeaderContent()}\n        </Transition>\n      </div>\n      <Transition\n        activeKey={activeKey}\n        name=\"slideFade\"\n        slideClassName=\"ChatOrUserPicker_slide\"\n        className={styles.content}\n      >\n        {renderContent}\n      </Transition>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      storyId, peerId,\n    },\n  } = selectTabState(global);\n  const story = (peerId && storyId)\n    ? selectPeerStory(global, peerId, storyId)\n    : undefined;\n\n  return {\n    story: story && 'content' in story ? story : undefined,\n    visibility: story && 'visibility' in story ? story.visibility : undefined,\n    contactListIds: global.contactList?.userIds,\n    usersById: global.users.byId,\n    currentUserId: global.currentUserId!,\n  };\n})(StorySettings));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStoryForwardInfo,\n  ApiTypeStory,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectPeer, selectPeerStory } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\nimport { renderTextWithEntities } from '../helpers/renderTextWithEntities';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\nimport PeerColorWrapper from '../PeerColorWrapper';\nimport EmojiIconBackground from './EmojiIconBackground';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  forwardInfo: ApiStoryForwardInfo;\n  className?: string;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  story?: ApiTypeStory;\n};\n\nconst EmbeddedStoryForward: FC<OwnProps & StateProps> = ({\n  className,\n  forwardInfo,\n  sender,\n  story,\n}) => {\n  const { openStoryViewer, loadPeerStoriesByIds, openChat } = getActions();\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!story && forwardInfo.fromPeerId && forwardInfo.storyId) {\n      loadPeerStoriesByIds({\n        peerId: forwardInfo.fromPeerId,\n        storyIds: [forwardInfo.storyId],\n      });\n    }\n  }, [forwardInfo, story]);\n\n  const senderTitle = sender ? getPeerTitle(lang, sender) : forwardInfo.fromName;\n\n  const openOriginalStory = useLastCallback(() => {\n    const { fromPeerId, storyId } = forwardInfo;\n    if (!fromPeerId) return;\n\n    const isStoryReady = story && !('isDeleted' in story && story.isDeleted);\n\n    if (isStoryReady) {\n      openStoryViewer({\n        peerId: fromPeerId,\n        storyId,\n        isSingleStory: true,\n      });\n    } else {\n      openChat({ id: fromPeerId });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(openOriginalStory);\n\n  function renderTextContent() {\n    if (story && 'content' in story && story.content.text) {\n      return (\n        <p className=\"embedded-text-wrapper\">\n          {renderTextWithEntities(story.content.text)}\n        </p>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSender() {\n    if (!sender || !senderTitle) {\n      return undefined;\n    }\n\n    const icon: IconName | undefined = !isUserId(sender.id) ? 'channel-filled' : 'user-filled';\n\n    return (\n      <>\n        {icon && <Icon name={icon} className=\"embedded-chat-icon\" />}\n        {senderTitle && renderText(senderTitle)}\n      </>\n    );\n  }\n\n  return (\n    <PeerColorWrapper\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        getPeerColorClass(sender, true, true),\n      )}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {sender?.color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          emojiDocumentId={sender.color.backgroundEmojiId}\n          className=\"EmbeddedMessage--background-icons\"\n        />\n      )}\n      <div className=\"message-text\">\n        {renderTextContent()}\n        <div className=\"message-title\">\n          {renderSender()}\n        </div>\n      </div>\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { forwardInfo }): StateProps => {\n    const sender = forwardInfo.fromPeerId ? selectPeer(global, forwardInfo.fromPeerId) : undefined;\n    const story = forwardInfo.storyId && forwardInfo.fromPeerId\n      ? selectPeerStory(global, forwardInfo.fromPeerId, forwardInfo.storyId) : undefined;\n    return {\n      sender,\n      story,\n    };\n  },\n)(EmbeddedStoryForward));\n","import {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { requestForcedReflow, requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../util/buildClassName';\nimport calcTextLineHeightAndCount from '../../util/element/calcTextLineHeightAndCount';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport EmbeddedStoryForward from '../common/embedded/EmbeddedStoryForward';\nimport MessageText from '../common/MessageText';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  story: ApiStory;\n  isExpanded: boolean;\n  className?: string;\n  onExpand: NoneToVoidFunction;\n  onFold?: NoneToVoidFunction;\n}\n\nconst EXPAND_ANIMATION_DURATION_MS = 400;\nconst LINES_TO_SHOW = 3;\n\nfunction StoryCaption({\n  story, isExpanded, className, onExpand, onFold,\n}: OwnProps) {\n  const lang = useOldLang();\n  const ref = useRef<HTMLDivElement>();\n  const contentRef = useRef<HTMLDivElement>();\n  const textRef = useRef<HTMLDivElement>();\n  const showMoreButtonRef = useRef<HTMLDivElement>();\n  const renderingStory = useCurrentOrPrev(story, true);\n\n  const caption = renderingStory?.content.text;\n\n  const [hasOverflow, setHasOverflow] = useState(false);\n  const prevIsExpanded = usePrevDuringAnimation(isExpanded || undefined, EXPAND_ANIMATION_DURATION_MS);\n  const isInExpandedState = isExpanded || prevIsExpanded;\n\n  useEffect(() => {\n    requestMutation(() => {\n      if (!contentRef.current) {\n        return;\n      }\n\n      if (isExpanded) {\n        addExtraClass(contentRef.current, styles.animate);\n      } else {\n        removeExtraClass(contentRef.current, styles.animate);\n      }\n    });\n  }, [isExpanded]);\n\n  const canExpand = hasOverflow && !isInExpandedState;\n  const { shouldRender: shouldRenderShowMore, transitionClassNames } = useShowTransitionDeprecated(\n    canExpand, undefined, true, 'slow', true,\n  );\n\n  // Setup gradient to clip caption before button\n  useLayoutEffect(() => {\n    requestMeasure(() => {\n      const container = contentRef.current;\n      const button = showMoreButtonRef.current;\n      if (!container || !button) {\n        return;\n      }\n\n      const { offsetWidth } = button;\n\n      requestMutation(() => {\n        container.style.setProperty('--expand-button-width', `${offsetWidth}px`);\n      });\n    });\n  }, [shouldRenderShowMore, lang]);\n\n  useLayoutEffect(() => {\n    requestForcedReflow(() => {\n      if (!contentRef.current || !textRef.current) {\n        return undefined;\n      }\n\n      const container = contentRef.current;\n      const textContainer = textRef.current;\n\n      const textOffsetTop = textContainer.offsetTop;\n      const { lineHeight, totalLines } = calcTextLineHeightAndCount(textContainer);\n      const isOverflowing = totalLines > LINES_TO_SHOW;\n      const overflowShift = textOffsetTop + lineHeight * LINES_TO_SHOW;\n\n      return () => {\n        if (isOverflowing) {\n          addExtraClass(container, styles.hasOverflow);\n          setHasOverflow(true);\n        }\n\n        container.style.setProperty('--_overflow-shift', `${overflowShift}px`);\n      };\n    });\n  }, [caption]);\n\n  useEffect(() => {\n    if (!isExpanded) {\n      ref.current?.scrollTo({ top: 0 });\n    }\n  }, [isExpanded]);\n\n  const fullClassName = buildClassName(\n    styles.captionContent,\n    isInExpandedState && styles.expanded,\n    shouldRenderShowMore && styles.withShowMore,\n  );\n\n  return (\n    <div className={buildClassName(styles.caption, className)}>\n      <div\n        ref={contentRef}\n        className={fullClassName}\n        role={canExpand ? 'button' : undefined}\n        onClick={canExpand ? onExpand : onFold}\n      >\n        <div\n          ref={ref}\n          className={buildClassName(styles.captionInner, 'allow-selection', 'custom-scroll')}\n        >\n          {renderingStory?.forwardInfo && (\n            <EmbeddedStoryForward\n              forwardInfo={renderingStory.forwardInfo}\n              className={styles.forwardInfo}\n            />\n          )}\n          {renderingStory && caption && (\n            <div ref={textRef} className={styles.captionText}>\n              <MessageText\n                messageOrStory={renderingStory}\n                withTranslucentThumbs\n                forcePlayback\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      {shouldRenderShowMore && (\n        <div\n          ref={showMoreButtonRef}\n          className={buildClassName(styles.captionShowMore, transitionClassNames)}\n          onClick={onExpand}\n        >\n          {lang('Story.CaptionShowMore')}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(StoryCaption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YVD19vOP\",\"viewInfo\":\"cknL5COh\",\"interactive\":\"pJAyeGkG\",\"avatars\":\"Vz_VtJ16\",\"spacer\":\"kKoeDk3Z\",\"reactionCount\":\"sf3u_6Vh\",\"reactionCountHeart\":\"Er2XKRqi\",\"footerItem\":\"vJRk_UUk\",\"views\":\"nIv3YAnZ\",\"viewIcon\":\"WyBiNM6e\",\"reactionButton\":\"lpDXVIuf\",\"reactionHeart\":\"twgMDT1y\"};","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { HEART_REACTION } from '../../config';\nimport {\n  getReactionKey, getStoryKey, isSameReaction,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport ReactionAnimatedEmoji from '../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../ui/Button';\n\nimport styles from './StoryFooter.module.scss';\n\ntype OwnProps = {\n  story: ApiStory;\n  className?: string;\n};\n\nconst StoryFooter = ({\n  story,\n  className,\n}: OwnProps) => {\n  const { openStoryViewModal, openForwardMenu, sendStoryReaction } = getActions();\n  const lang = useOldLang();\n\n  const {\n    views, isOut, peerId, id: storyId, sentReaction,\n  } = story;\n  const { viewsCount, forwardsCount, reactionsCount } = views || {};\n  const isChannel = !isUserId(peerId);\n\n  const isSentStoryReactionHeart = sentReaction && isSameReaction(sentReaction, HEART_REACTION);\n\n  const canForward = Boolean(\n    (isOut || isChannel)\n    && story.isPublic\n    && !story.noForwards,\n  );\n\n  const containerId = getStoryKey(peerId, storyId);\n\n  const recentViewers = useMemo(() => {\n    const { users: { byId: usersById } } = getGlobal();\n\n    const recentViewerIds = views && 'recentViewerIds' in views ? views.recentViewerIds : undefined;\n    if (!recentViewerIds) return undefined;\n\n    return recentViewerIds.map((id) => usersById[id]).filter(Boolean);\n  }, [views]);\n\n  const handleOpenStoryViewModal = useLastCallback(() => {\n    openStoryViewModal({ storyId });\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleLikeStory = useLastCallback(() => {\n    const reaction = sentReaction ? undefined : HEART_REACTION;\n    sendStoryReaction({\n      peerId,\n      storyId,\n      containerId,\n      reaction,\n    });\n  });\n\n  if (!viewsCount) {\n    return (\n      <div className={buildClassName(styles.root, className)}>\n        {lang('NobodyViewed')}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        className,\n      )}\n    >\n      <div\n        className={buildClassName(styles.viewInfo, !isChannel && styles.interactive)}\n        onClick={!isChannel ? handleOpenStoryViewModal : undefined}\n      >\n        {Boolean(recentViewers?.length) && (\n          <AvatarList\n            size=\"small\"\n            peers={recentViewers}\n            className={styles.avatars}\n          />\n        )}\n\n        {isChannel ? (\n          <span className={styles.views}>\n            <Icon name=\"channelviews\" className={styles.viewIcon} />\n            {viewsCount}\n          </span>\n        ) : (\n          <span className={styles.views}>{lang('Views', viewsCount, 'i')}</span>\n        )}\n        {Boolean(reactionsCount) && !isChannel && (\n          <span className={styles.reactionCount}>\n            <Icon name=\"heart\" className={styles.reactionCountHeart} />\n            {reactionsCount}\n          </span>\n        )}\n      </div>\n      <div className={styles.spacer} />\n      {canForward && (\n        <Button\n          color=\"translucent\"\n          size=\"smaller\"\n          round\n          onClick={handleForwardClick}\n          ariaLabel={lang('Forward')}\n          className={styles.footerItem}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {isChannel && (\n        <>\n          {Boolean(forwardsCount) && (\n            <div className={styles.footerItem}>\n              <Button\n                round\n                color=\"translucent\"\n                size=\"smaller\"\n                nonInteractive\n                ariaLabel={lang('PublicShares')}\n              >\n                <Icon name=\"loop\" />\n              </Button>\n              <span>{forwardsCount}</span>\n            </div>\n          )}\n          <div className={styles.footerItem}>\n            <Button\n              round\n              className={styles.reactionButton}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleLikeStory}\n              ariaLabel={lang('AccDescrLike')}\n            >\n              {sentReaction && (\n                <ReactionAnimatedEmoji\n                  key={getReactionKey(sentReaction)}\n                  containerId={containerId}\n                  reaction={sentReaction}\n                  withEffectOnly={isSentStoryReactionHeart}\n                />\n              )}\n              {(!sentReaction || isSentStoryReactionHeart) && (\n                <Icon\n                  name={isSentStoryReactionHeart ? 'heart' : 'heart-outline'}\n                  className={buildClassName(isSentStoryReactionHeart && styles.reactionHeart)}\n                />\n              )}\n            </Button>\n            {Boolean(reactionsCount) && (<span>{reactionsCount}</span>)}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StoryFooter);\n","import type React from '../../lib/teact/teact';\nimport {\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './StoryProgress.module.scss';\n\ninterface OwnProps {\n  isActive: boolean;\n  isViewed: boolean;\n  isVideo?: boolean;\n  duration?: number;\n  isPaused?: boolean;\n  onImageComplete: NoneToVoidFunction;\n}\n\nconst DEFAULT_STORY_DURATION_S = 6;\n\nfunction StoryProgress({\n  isActive, isViewed, isVideo, duration = DEFAULT_STORY_DURATION_S, isPaused, onImageComplete,\n}: OwnProps) {\n  const handleAnimationEnd = useLastCallback((event: React.AnimationEvent<HTMLElement>) => {\n    if (!isVideo && event.animationName === styles.progress) {\n      onImageComplete();\n    }\n  });\n\n  const classNames = buildClassName(\n    styles.root,\n    isViewed && styles.viewed,\n    isActive && styles.active,\n    isPaused && styles.paused,\n  );\n\n  return (\n    <span\n      className={classNames}\n      aria-hidden\n    >\n      {isActive && (\n        <i style={`--progress-duration: ${duration}s`} className={styles.inner} onAnimationEnd={handleAnimationEnd} />\n      )}\n    </span>\n  );\n}\n\nexport default memo(StoryProgress);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c1fbGgcx\",\"viewed\":\"xwOKghO2\",\"active\":\"ZuByYcIx\",\"inner\":\"qyBCpJct\",\"progress\":\"XY98E7VM\",\"paused\":\"n9V6B7hP\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMediaAreaChannelPost,\n  ApiPeer, ApiStealthMode, ApiStory, ApiTypeStory,\n} from '../../api/types';\nimport type { IDimensions } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { EDITABLE_STORY_INPUT_CSS_SELECTOR, EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { isChatChannel } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectChat,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPaidMessagesStars,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { IS_SAFARI } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatMediaDuration, formatRelativePastTime } from '../../util/dates/dateFormat';\nimport download from '../../util/download';\nimport { isUserId } from '../../util/entities/ids';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { round } from '../../util/math';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\nimport { BASE_STORY_HEIGHT, BASE_STORY_WIDTH } from './helpers/dimensions';\nimport { PRIMARY_VIDEO_MIME, SECONDARY_VIDEO_MIME } from './helpers/videoFormats';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout, { getIsMobile } from '../../hooks/useAppLayout';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport { useStreaming } from '../../hooks/useStreaming';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useStoryPreloader from './hooks/useStoryPreloader';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Avatar from '../common/Avatar';\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\nimport Transition from '../ui/Transition';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\nimport StoryCaption from './StoryCaption';\nimport StoryFooter from './StoryFooter';\nimport StoryProgress from './StoryProgress';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peerId: string;\n  storyId: number;\n  dimensions: IDimensions;\n\n  isDeleteModalOpen?: boolean;\n  isPrivateStories?: boolean;\n  isArchivedStories?: boolean;\n  isSingleStory?: boolean;\n  getIsAnimating: Signal<boolean>;\n  onDelete: (story: ApiTypeStory) => void;\n  onClose: NoneToVoidFunction;\n  onReport: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peer: ApiPeer;\n  forwardSender?: ApiPeer;\n  fromPeer?: ApiPeer;\n  story?: ApiTypeStory;\n  isMuted: boolean;\n  orderedIds?: number[];\n  shouldForcePause?: boolean;\n  storyChangelogUserId?: string;\n  viewersExpirePeriod: number;\n  isChatExist?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  isCurrentUserPremium?: boolean;\n  stealthMode: ApiStealthMode;\n  withHeaderAnimation?: boolean;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n}\n\nconst VIDEO_MIN_READY_STATE = IS_SAFARI ? 4 : 3;\nconst SPACEBAR_CODE = 32;\n\nconst STEALTH_MODE_NOTIFICATION_DURATION = 4000;\n\nfunction Story({\n  peerId,\n  storyId,\n  peer,\n  forwardSender,\n  fromPeer,\n  isMuted,\n  isArchivedStories,\n  isPrivateStories,\n  story,\n  orderedIds,\n  isSingleStory,\n  dimensions,\n  shouldForcePause,\n  storyChangelogUserId,\n  viewersExpirePeriod,\n  isChatExist,\n  arePeerSettingsLoaded,\n  getIsAnimating,\n  isCurrentUserPremium,\n  stealthMode,\n  withHeaderAnimation,\n  onDelete,\n  onClose,\n  onReport,\n  paidMessagesStars,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    viewStory,\n    setStoryViewerMuted,\n    openPreviousStory,\n    openNextStory,\n    loadPeerSkippedStories,\n    openForwardMenu,\n    copyStoryLink,\n    toggleStoryInProfile,\n    openChat,\n    showNotification,\n    openStoryPrivacyEditor,\n    loadPeerSettings,\n    fetchChat,\n    loadStoryViews,\n    toggleStealthModal,\n  } = getActions();\n  const serverTime = getServerTime();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const [isComposerHasFocus, markComposerHasFocus, unmarkComposerHasFocus] = useFlag(false);\n  const [isStoryPlaybackRequested, playStory, pauseStory] = useFlag(false);\n  const [isStoryPlaying, markStoryPlaying, unmarkStoryPlaying] = useFlag(false);\n  const [isAppFocused, markAppFocused, unmarkAppFocused] = useFlag(true);\n  const [isCaptionExpanded, expandCaption, foldCaption] = useFlag(false);\n  const [isPausedBySpacebar, setIsPausedBySpacebar] = useState(false);\n  const [isPausedByLongPress, markIsPausedByLongPress, unmarkIsPausedByLongPress] = useFlag(false);\n  const [isDropdownMenuOpen, markDropdownMenuOpen, unmarkDropdownMenuOpen] = useFlag(false);\n  const videoRef = useRef<HTMLVideoElement>();\n  const {\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  } = useStoryProps(story, isCurrentUserPremium, isDropdownMenuOpen);\n\n  const isLoadedStory = story && 'content' in story;\n  const isChangelog = peerId === storyChangelogUserId;\n  const isUserStory = isUserId(peerId);\n  const isChatStory = !isUserStory;\n  const isChannelStory = isChatStory && isChatChannel(peer as ApiChat);\n  const isOut = isLoadedStory && story.isOut;\n\n  const canPinToProfile = useCurrentOrPrev(\n    isOut ? !story.isInProfile : undefined,\n    true,\n  );\n  const canUnpinFromProfile = useCurrentOrPrev(\n    isOut ? story.isInProfile : undefined,\n    true,\n  );\n  const areViewsExpired = Boolean(\n    isOut && (story.date + viewersExpirePeriod) < getServerTime(),\n  );\n\n  const forwardSenderTitle = forwardSender ? getPeerTitle(oldLang, forwardSender)\n    : (isLoadedStory && story.forwardInfo?.fromName);\n\n  const canCopyLink = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !isChangelog\n    && peer?.hasUsername,\n  );\n\n  const canShare = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !story.noForwards\n    && !isChangelog\n    && !isCaptionExpanded,\n  );\n\n  const canPlayStory = Boolean(\n    hasFullData && !shouldForcePause && isAppFocused && !isComposerHasFocus && !isCaptionExpanded\n    && !isPausedBySpacebar && !isPausedByLongPress,\n  );\n\n  const duration = isLoadedStory && story.content.video?.duration\n    ? story.content.video.duration\n    : undefined;\n\n  const shouldShowComposer = !(isOut && isUserStory) && !isChangelog && !isChannelStory && !isAccountFrozen;\n  const shouldShowFooter = isLoadedStory && !shouldShowComposer && (isOut || isChannelStory);\n  const headerAnimation = isMobile && withHeaderAnimation ? 'slideFade' : 'none';\n\n  const {\n    shouldRender: shouldRenderSkeleton,\n    transitionClassNames: skeletonTransitionClassNames,\n  } = useShowTransitionDeprecated(!hasFullData);\n\n  const {\n    transitionClassNames: mediaTransitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(fullMediaData));\n\n  const thumbRef = useCanvasBlur(thumbnail, !hasThumb);\n  const previewTransitionClassNames = useMediaTransitionDeprecated(previewBlobUrl);\n\n  const {\n    shouldRender: shouldRenderComposer,\n    transitionClassNames: composerAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(shouldShowComposer);\n\n  const {\n    shouldRender: shouldRenderCaptionBackdrop,\n    transitionClassNames: captionBackdropTransitionClassNames,\n  } = useShowTransitionDeprecated(hasText && isCaptionExpanded);\n\n  const { transitionClassNames: appearanceAnimationClassNames } = useShowTransitionDeprecated(true);\n  const {\n    shouldRender: shouldRenderCaption,\n    transitionClassNames: captionAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(hasText || hasForwardInfo);\n\n  const isStreamingSupported = useStreaming(videoRef, fullMediaData, PRIMARY_VIDEO_MIME);\n\n  useStoryPreloader(peerId, storyId);\n\n  useEffect(() => {\n    if (storyId) {\n      viewStory({ peerId, storyId });\n    }\n  }, [storyId, peerId]);\n\n  useEffect(() => {\n    loadPeerSkippedStories({ peerId });\n  }, [peerId]);\n\n  // Fetching user privacy settings for use in Composer\n  useEffect(() => {\n    const canWrite = isUserId(peerId);\n    if (!isChatExist && canWrite) {\n      fetchChat({ chatId: peerId });\n    }\n  }, [isChatExist, peerId]);\n  useEffect(() => {\n    if (isChatExist && !arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId });\n    }\n  }, [arePeerSettingsLoaded, isChatExist, peerId]);\n\n  const handlePauseStory = useLastCallback(() => {\n    if (isVideo) {\n      videoRef.current?.pause();\n    }\n\n    unmarkStoryPlaying();\n    pauseStory();\n  });\n\n  const handlePlayStory = useLastCallback(() => {\n    if (!canPlayStory) return;\n\n    playStory();\n    if (!isVideo) markStoryPlaying();\n  });\n\n  const handleLongPressStart = useLastCallback(() => {\n    markIsPausedByLongPress();\n  });\n  const handleLongPressEnd = useLastCallback(() => {\n    unmarkIsPausedByLongPress();\n  });\n\n  const handleDropdownMenuOpen = useLastCallback(() => {\n    markDropdownMenuOpen();\n    handlePauseStory();\n  });\n\n  const handleDropdownMenuClose = useLastCallback(() => {\n    unmarkDropdownMenuOpen();\n    handlePlayStory();\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleLongPressStart,\n    onEnd: handleLongPressEnd,\n  });\n\n  const isUnsupported = useUnsupportedMedia(\n    videoRef,\n    undefined,\n    !isVideo || !fullMediaData || isStreamingSupported,\n  );\n\n  const hasAllData = fullMediaData && (!altMediaHash || altMediaData);\n  // Play story after media has been downloaded\n  useEffect(() => {\n    if (hasAllData && !isUnsupported) handlePlayStory();\n  }, [hasAllData, isUnsupported]);\n\n  useBackgroundMode(unmarkAppFocused, markAppFocused);\n\n  useEffect(() => {\n    if (!hasAllData) return;\n    videoRef.current?.load();\n  }, [hasAllData]);\n\n  useEffect(() => {\n    if (!isLoadedStory || isDeletedStory || areViewsExpired) return;\n\n    if (!isOut && !isChannelStory) return;\n\n    // Refresh counters each time\n    loadStoryViews({ peerId, storyId });\n  }, [isDeletedStory, areViewsExpired, isLoadedStory, peerId, storyId, isOut, isChannelStory]);\n\n  useEffect(() => {\n    if (\n      shouldForcePause || !isAppFocused || isComposerHasFocus\n      || isCaptionExpanded || isPausedBySpacebar || isPausedByLongPress\n    ) {\n      handlePauseStory();\n    } else {\n      handlePlayStory();\n    }\n  }, [\n    handlePlayStory, isAppFocused, isCaptionExpanded, isComposerHasFocus,\n    shouldForcePause, isPausedBySpacebar, isPausedByLongPress,\n  ]);\n\n  useEffect(() => {\n    if (isComposerHasFocus || shouldForcePause || isCaptionExpanded) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (e.keyCode === SPACEBAR_CODE) {\n        e.preventDefault();\n        setIsPausedBySpacebar(!isPausedBySpacebar);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isCaptionExpanded, isComposerHasFocus, isPausedBySpacebar, shouldForcePause]);\n\n  // Reset the state of `isPausedBySpacebar` when closing the caption, losing focus by composer or disable forced pause\n  useEffectWithPrevDeps(([\n    prevIsComposerHasFocus,\n    prevIsCaptionExpanded,\n    prevShouldForcePause,\n    prevIsAppFocused,\n    prevIsPausedByLongPress,\n  ]) => {\n    if (\n      !isPausedBySpacebar || isCaptionExpanded || isComposerHasFocus\n      || shouldForcePause || !isAppFocused || isPausedByLongPress\n    ) {\n      return;\n    }\n\n    if (\n      prevIsCaptionExpanded !== isCaptionExpanded\n      || prevIsComposerHasFocus !== isComposerHasFocus\n      || prevShouldForcePause !== shouldForcePause\n      || prevIsAppFocused !== isAppFocused\n      || prevIsPausedByLongPress !== isPausedByLongPress\n    ) {\n      setIsPausedBySpacebar(false);\n    }\n  }, [isComposerHasFocus, isCaptionExpanded, shouldForcePause, isAppFocused, isPausedByLongPress, isPausedBySpacebar]);\n\n  const handleOpenChat = useLastCallback(() => {\n    onClose();\n    openChat({ id: peerId });\n  });\n\n  const handleForwardPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: forwardSender!.id });\n  });\n\n  const handleFromPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: fromPeer!.id });\n  });\n\n  const handleOpenPrevStory = useLastCallback(() => {\n    openPreviousStory();\n  });\n\n  const handleOpenNextStory = useLastCallback(() => {\n    openNextStory();\n  });\n\n  const handleVideoStoryTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= VIDEO_MIN_READY_STATE) {\n      markStoryPlaying();\n    } else {\n      unmarkStoryPlaying();\n    }\n    if (duration && round(video.currentTime, 2) >= round(duration, 2)) {\n      handleOpenNextStory();\n    }\n  });\n\n  useEffect(() => {\n    return !getIsAnimating() && !isComposerHasFocus ? captureKeyboardListeners({\n      onRight: handleOpenNextStory,\n      onLeft: handleOpenPrevStory,\n    }) : undefined;\n  }, [getIsAnimating, isComposerHasFocus]);\n\n  const handleCopyStoryLink = useLastCallback(() => {\n    copyStoryLink({ peerId, storyId });\n  });\n\n  const handlePinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: true });\n  });\n\n  const handleUnpinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: false });\n  });\n\n  const handleDeleteStoryClick = useLastCallback(() => {\n    onDelete(story!);\n  });\n\n  const handleReportStoryClick = useLastCallback(() => {\n    onReport();\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleInfoPrivacyEdit = useLastCallback(() => {\n    openStoryPrivacyEditor();\n  });\n\n  const handleInfoPrivacyClick = useLastCallback(() => {\n    const visibility = !isLoadedStory || story.isPublic\n      ? undefined\n      : story.isForContacts ? 'contacts' : (story.isForCloseFriends ? 'closeFriends' : 'nobody');\n\n    let message;\n    const myName = getPeerTitle(oldLang, peer);\n    switch (visibility) {\n      case 'nobody':\n        message = oldLang('StorySelectedContactsHint', myName);\n        break;\n      case 'contacts':\n        message = oldLang('StoryContactsHint', myName);\n        break;\n      case 'closeFriends':\n        message = oldLang('StoryCloseFriendsHint', myName);\n        break;\n      default:\n        return;\n    }\n    showNotification({ message });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    if (noSound) {\n      showNotification({\n        message: oldLang('Story.TooltipVideoHasNoSound'),\n      });\n      return;\n    }\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setStoryViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handleOpenStealthModal = useLastCallback(() => {\n    if (stealthMode.activeUntil && getServerTime() < stealthMode.activeUntil) {\n      const diff = stealthMode.activeUntil - getServerTime();\n      showNotification({\n        title: oldLang('StealthModeOn'),\n        message: oldLang('Story.ToastStealthModeActiveText', formatMediaDuration(diff)),\n        duration: STEALTH_MODE_NOTIFICATION_DURATION,\n      });\n      return;\n    }\n\n    toggleStealthModal({ isOpen: true });\n  });\n\n  const handleDownload = useLastCallback(() => {\n    if (!downloadMediaData) return;\n    download(downloadMediaData, `story-${peerId}-${storyId}.${isVideo ? 'mp4' : 'jpg'}`);\n  });\n\n  useEffect(() => {\n    if (!isDeletedStory) return;\n\n    showNotification({\n      message: oldLang('StoryNotFound'),\n    });\n  }, [oldLang, isDeletedStory]);\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => {\n      return (\n        <Button\n          round\n          ripple={!isMobile}\n          size=\"tiny\"\n          color=\"translucent-white\"\n          onClick={onTrigger}\n          className={buildClassName(styles.button, isOpen && 'active')}\n          ariaLabel={oldLang('AccDescrOpenMenu2')}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      );\n    };\n  }, [isMobile, oldLang]);\n\n  function renderStoriesTabs() {\n    return (\n      <div className={styles.storyIndicators}>\n        {(isSingleStory ? [storyId] : orderedIds ?? []).map((id) => (\n          <StoryProgress\n            key={`progress-${id}`}\n            isActive={id === story?.id}\n            isVideo={isVideo}\n            isViewed={Boolean(story?.id && ((isPrivateStories || isArchivedStories) ? id > story?.id : id < story?.id))}\n            isPaused={!isStoryPlaying}\n            duration={duration}\n            onImageComplete={handleOpenNextStory}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderStoryPrivacyButton() {\n    if (!isUserStory) return undefined;\n\n    let privacyIcon: IconName = 'channel-filled';\n    const gradient: Record<string, [string, string]> = {\n      'channel-filled': ['#50ABFF', '#007AFF'],\n      'user-filled': ['#C36EFF', '#8B60FA'],\n      'favorite-filled': ['#88D93A', '#30B73B'],\n      'group-filled': ['#FFB743', '#F69A36'],\n    };\n\n    if (isOut) {\n      const { visibility } = (story && 'visibility' in story && story.visibility) || {};\n\n      switch (visibility) {\n        case 'everybody':\n          privacyIcon = 'channel-filled';\n          break;\n        case 'contacts':\n          privacyIcon = 'user-filled';\n          break;\n        case 'closeFriends':\n          privacyIcon = 'favorite-filled';\n          break;\n        case 'nobody':\n          privacyIcon = 'group-filled';\n      }\n    } else {\n      if (!story || !('content' in story) || story.isPublic) {\n        return undefined;\n      }\n\n      privacyIcon = story.isForCloseFriends\n        ? 'favorite-filled'\n        : (story.isForContacts ? 'user-filled' : 'group-filled');\n    }\n\n    return (\n      <div\n        className={buildClassName(styles.visibilityButton, isOut && styles.visibilityButtonSelf)}\n        onClick={isOut ? handleInfoPrivacyEdit : handleInfoPrivacyClick}\n        style={`--color-from: ${gradient[privacyIcon][0]}; --color-to: ${gradient[privacyIcon][1]}`}\n      >\n        <Icon name={privacyIcon} />\n        {isOut && <Icon name=\"next\" />}\n      </div>\n    );\n  }\n\n  function renderSenderInfo() {\n    return (\n      <div className={styles.senderInfo}>\n        <Avatar\n          peer={peer}\n          size=\"tiny\"\n          onClick={handleOpenChat}\n        />\n        <div className={styles.senderMeta}>\n          <span onClick={handleOpenChat} className={styles.senderName}>\n            {renderText(getPeerTitle(oldLang, peer) || '')}\n          </span>\n          <div className={styles.storyMetaRow}>\n            {forwardSenderTitle && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.forwardHeader, forwardSender && styles.clickable,\n                )}\n                onClick={forwardSender ? handleForwardPeerClick : undefined}\n              >\n                <Icon name=\"loop\" />\n                <span className={styles.headerTitle}>\n                  {renderText(forwardSenderTitle)}\n                </span>\n              </span>\n            )}\n            {fromPeer && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.fromPeer,\n                )}\n                onClick={handleFromPeerClick}\n              >\n                <Avatar peer={fromPeer} size=\"micro\" />\n                <span className={styles.headerTitle}>\n                  {renderText(getPeerTitle(oldLang, fromPeer) || '')}\n                </span>\n              </span>\n            )}\n            {story && 'date' in story && (\n              <span className={styles.storyMeta}>{formatRelativePastTime(oldLang, serverTime, story.date)}</span>\n            )}\n            {isLoadedStory && story.isEdited && (\n              <span className={styles.storyMeta}>{oldLang('Story.HeaderEdited')}</span>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSender() {\n    return (\n      <div className={styles.sender}>\n        <Transition activeKey={Number(peerId)} name={headerAnimation} className={styles.senderInfoTransition}>\n          {renderSenderInfo()}\n        </Transition>\n\n        <div className={styles.actions}>\n          {renderStoryPrivacyButton()}\n          {isVideo && (\n            <Button\n              className={styles.button}\n              round\n              ripple={!isMobile}\n              size=\"tiny\"\n              color=\"translucent-white\"\n              disabled={!hasFullData}\n              onClick={handleVolumeMuted}\n              ariaLabel={oldLang('Volume')}\n            >\n              <Icon name={(isMuted || noSound) ? 'speaker-muted-story' : 'speaker-story'} />\n            </Button>\n          )}\n          <DropdownMenu\n            className={styles.buttonMenu}\n            trigger={MenuButton}\n            positionX=\"right\"\n            onOpen={handleDropdownMenuOpen}\n            onClose={handleDropdownMenuClose}\n          >\n            {canCopyLink && <MenuItem icon=\"copy\" onClick={handleCopyStoryLink}>{oldLang('CopyLink')}</MenuItem>}\n            {canPinToProfile && (\n              <MenuItem icon=\"save-story\" onClick={handlePinClick}>\n                {oldLang(isUserStory ? 'StorySave' : 'SaveToPosts')}\n              </MenuItem>\n            )}\n            {canUnpinFromProfile && (\n              <MenuItem icon=\"delete\" onClick={handleUnpinClick}>\n                {oldLang(isUserStory ? 'ArchiveStory' : 'RemoveFromPosts')}\n              </MenuItem>\n            )}\n            {canDownload && (\n              <MenuItem icon=\"download\" disabled={!downloadMediaData} onClick={handleDownload}>\n                {oldLang('lng_media_download')}\n              </MenuItem>\n            )}\n            {!isOut && isUserStory && (\n              <MenuItem icon=\"eye-crossed-outline\" onClick={handleOpenStealthModal}>\n                {oldLang('StealthMode')}\n              </MenuItem>\n            )}\n            {!isOut && <MenuItem icon=\"flag\" onClick={handleReportStoryClick}>{oldLang('lng_report_story')}</MenuItem>}\n            {isOut && (\n              <MenuItem\n                icon=\"delete\"\n                destructive\n                onClick={handleDeleteStoryClick}\n              >\n                {oldLang('Delete')}\n              </MenuItem>\n            )}\n          </DropdownMenu>\n          <Button\n            className={buildClassName(styles.button, styles.closeButton)}\n            round\n            size=\"tiny\"\n            color=\"translucent-white\"\n            ariaLabel={oldLang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const inputPlaceholder = paidMessagesStars\n    ? lang('ComposerPlaceholderPaidReply', {\n      amount: formatStarsAsIcon(lang, paidMessagesStars, { asFont: true, className: 'placeholder-star-icon' }),\n    }, {\n      withNodes: true,\n    })\n    : oldLang(isChatStory ? 'ReplyToGroupStory' : 'ReplyPrivately');\n\n  return (\n    <div\n      className={buildClassName(styles.slideInner, 'component-theme-dark')}\n      onMouseDown={handleLongPressMouseDown}\n      onMouseUp={handleLongPressMouseUp}\n      onMouseLeave={handleLongPressMouseLeave}\n      onTouchStart={handleLongPressTouchStart}\n      onTouchEnd={handleLongPressTouchEnd}\n    >\n      <div className={buildClassName(styles.storyHeader, appearanceAnimationClassNames)}>\n        {renderStoriesTabs()}\n        {renderSender()}\n      </div>\n\n      <div\n        className={styles.mediaWrapper}\n        style={`width: ${dimensions.width}px; height: ${dimensions.height}px`}\n      >\n        <canvas ref={thumbRef} className={styles.thumbnail} />\n        {previewBlobUrl && (\n          <img\n            key={`preview-${storyId}`}\n            src={previewBlobUrl}\n            draggable={false}\n            alt=\"\"\n            className={buildClassName(styles.media, styles.mediaPreview, previewTransitionClassNames)}\n          />\n        )}\n        {shouldRenderSkeleton && (\n          <Skeleton className={buildClassName(skeletonTransitionClassNames, styles.fullSize)} />\n        )}\n        {!isVideo && fullMediaData && (\n          <img\n            src={fullMediaData}\n            alt=\"\"\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            draggable={false}\n          />\n        )}\n        {isVideo && fullMediaData && (\n          <OptimizedVideo\n            ref={videoRef}\n            key={`video-${storyId}`}\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            canPlay={isStoryPlaybackRequested}\n            muted={isMuted}\n            width={BASE_STORY_WIDTH}\n            height={BASE_STORY_HEIGHT}\n            draggable={false}\n            playsInline\n            disablePictureInPicture\n            isPriority\n            onPause={unmarkStoryPlaying}\n            onWaiting={unmarkStoryPlaying}\n            disableRemotePlayback\n            onTimeUpdate={handleVideoStoryTimeUpdate}\n          >\n            <source src={fullMediaData} type={PRIMARY_VIDEO_MIME} width=\"720\" />\n            {altMediaData && <source src={altMediaData} type={SECONDARY_VIDEO_MIME} width=\"480\" />}\n          </OptimizedVideo>\n        )}\n\n        {!isPausedByLongPress && !isComposerHasFocus && (\n          <>\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.prev)}\n              onClick={handleOpenPrevStory}\n              aria-label={oldLang('Previous')}\n            />\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.next)}\n              onClick={handleOpenNextStory}\n              aria-label={oldLang('Next')}\n            />\n          </>\n        )}\n        {isLoadedStory && fullMediaData && (\n          <MediaAreaOverlay\n            key={`area-overlay-${storyId}-${peerId}`}\n            story={story}\n            isActive\n            isStoryPlaying={isDropdownMenuOpen}\n          />\n        )}\n        {!isMobile && (\n          <div className={styles.content}>\n            <div className={styles.contentInner}>\n              <Avatar\n                peer={peer}\n                withStory\n                storyViewerMode=\"disabled\"\n              />\n              <div className={styles.name}>{renderText(getPeerTitle(oldLang, peer) || '')}</div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldShowFooter && (\n        <StoryFooter story={story} className={appearanceAnimationClassNames} />\n      )}\n      {shouldRenderCaptionBackdrop && (\n        <div\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.captionBackdrop, captionBackdropTransitionClassNames)}\n          onClick={() => foldCaption()}\n          aria-label={oldLang('Close')}\n        />\n      )}\n      {hasText && <div className={buildClassName(styles.captionGradient, captionAppearanceAnimationClassNames)} />}\n      {shouldRenderCaption && (\n        <StoryCaption\n          key={`caption-${storyId}-${peerId}`}\n          story={story as ApiStory}\n          isExpanded={isCaptionExpanded}\n          onExpand={expandCaption}\n          onFold={foldCaption}\n          className={captionAppearanceAnimationClassNames}\n        />\n      )}\n      {shouldRenderComposer && (\n        <Composer\n          type=\"story\"\n          chatId={peerId}\n          threadId={MAIN_THREAD_ID}\n          storyId={storyId}\n          isReady={!isOut}\n          messageListType=\"thread\"\n          isMobile={getIsMobile()}\n          editableInputCssSelector={EDITABLE_STORY_INPUT_CSS_SELECTOR}\n          editableInputId={EDITABLE_STORY_INPUT_ID}\n          inputId=\"story-input-text\"\n          className={buildClassName(styles.composer, composerAppearanceAnimationClassNames)}\n          inputPlaceholder={inputPlaceholder}\n          onForward={canShare ? handleForwardClick : undefined}\n          onFocus={markComposerHasFocus}\n          onBlur={unmarkComposerHasFocus}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, {\n  peerId,\n  storyId,\n  isDeleteModalOpen,\n}): StateProps => {\n  const { appConfig } = global;\n  const user = selectUser(global, peerId);\n  const chat = selectChat(global, peerId);\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  const tabState = selectTabState(global);\n  const {\n    storyViewer: {\n      isMuted,\n      viewModal,\n      isPrivacyModalOpen,\n      isStealthModalOpen,\n      storyList,\n    },\n    forwardMessages: { storyId: forwardedStoryId },\n    premiumModal,\n    safeLinkModalUrl,\n    mapModal,\n    reportModal,\n    giftInfoModal,\n    isPaymentMessageConfirmDialogOpen,\n  } = tabState;\n  const { isOpen: isPremiumModalOpen } = premiumModal || {};\n  const story = selectPeerStory(global, peerId, storyId);\n  const isLoadedStory = story && 'content' in story;\n  const shouldForcePause = Boolean(\n    isPaymentMessageConfirmDialogOpen\n    || viewModal || forwardedStoryId || tabState.reactionPicker?.storyId || reportModal || isPrivacyModalOpen\n    || isPremiumModalOpen || isDeleteModalOpen || safeLinkModalUrl || isStealthModalOpen || mapModal || giftInfoModal,\n  );\n\n  const forwardInfo = isLoadedStory ? story.forwardInfo : undefined;\n  const mediaAreas = isLoadedStory ? story.mediaAreas : undefined;\n  const forwardSenderId = forwardInfo?.fromPeerId\n    || mediaAreas?.find((area): area is ApiMediaAreaChannelPost => area.type === 'channelPost')?.channelId;\n  const forwardSender = forwardSenderId ? selectPeer(global, forwardSenderId) : undefined;\n  const withHeaderAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  const fromPeer = isLoadedStory && story.fromId ? selectPeer(global, story.fromId) : undefined;\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, peerId);\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    peer: (user || chat)!,\n    forwardSender,\n    fromPeer,\n    story,\n    orderedIds: storyList?.storyIdsByPeerId[peerId],\n    isMuted,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    shouldForcePause,\n    storyChangelogUserId: appConfig!.storyChangelogUserId,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    isChatExist: Boolean(chat),\n    arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n    stealthMode: global.stories.stealthMode,\n    withHeaderAnimation,\n    paidMessagesStars,\n    isAccountFrozen,\n  };\n})(Story));\n","import { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPeer, ApiPeerStories, ApiTypeStory,\n} from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectTabState } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peer?: ApiPeer;\n  peerStories?: ApiPeerStories;\n}\n\ninterface StateProps {\n  lastViewedId?: number;\n  origin?: StoryViewerOrigin;\n  storyIdsForViewer?: number[];\n}\n\nfunction StoryPreview({\n  peer, peerStories, lastViewedId, storyIdsForViewer, origin,\n}: OwnProps & StateProps) {\n  const { openStoryViewer, loadPeerSkippedStories } = getActions();\n  const lang = useOldLang();\n\n  const story = useMemo<ApiTypeStory | undefined>(() => {\n    if (!peerStories) {\n      return undefined;\n    }\n\n    const {\n      orderedIds, lastReadId, byId,\n    } = peerStories;\n    const hasUnreadStories = orderedIds[orderedIds.length - 1] !== lastReadId;\n    const previewIndexId = lastViewedId && storyIdsForViewer?.includes(lastViewedId)\n      ? lastViewedId ?? (hasUnreadStories ? (lastReadId ?? -1) : -1)\n      : -1;\n    const resultId = byId[previewIndexId]?.id || storyIdsForViewer?.[0] || orderedIds[0];\n\n    return byId[resultId];\n  }, [lastViewedId, peerStories, storyIdsForViewer]);\n\n  const isLoaded = story && 'content' in story;\n\n  useEffect(() => {\n    if (story && !isLoaded) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [story, isLoaded]);\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  if (!peer || !story || 'isDeleted' in story) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={styles.slideInner}\n      onClick={() => { openStoryViewer({ peerId: story.peerId, storyId: story.id, origin }); }}\n    >\n      {thumbUrl && (\n        <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n      )}\n      {isLoaded && <MediaAreaOverlay story={story} />}\n\n      <div className={styles.content}>\n        <div className={styles.contentInner}>\n          <Avatar\n            peer={peer}\n            withStory\n            storyViewerMode=\"disabled\"\n          />\n          <div className={styles.name}>{renderText(getPeerTitle(lang, peer) || '')}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { peer }): StateProps => {\n  const {\n    storyViewer: {\n      lastViewedByPeerId: lastViewedByPeerIds,\n      origin,\n      storyList,\n    },\n  } = selectTabState(global);\n\n  return {\n    lastViewedId: peer?.id ? lastViewedByPeerIds?.[peer.id] : undefined,\n    origin,\n    storyIdsForViewer: peer?.id ? storyList?.storyIdsByPeerId[peer.id] : undefined,\n  };\n})(StoryPreview));\n","import type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiPeerStories, ApiTypeStory } from '../../api/types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getStoryKey } from '../../global/helpers';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeer,\n  selectTabState,\n} from '../../global/selectors';\nimport { IS_IOS } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport focusEditableElement from '../../util/focusEditableElement';\nimport { clamp } from '../../util/math';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { calculateOffsetX } from './helpers/dimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useSlideSizes from './hooks/useSlideSizes';\n\nimport Story from './Story';\nimport StoryPreview from './StoryPreview';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  isDeleteModalOpen?: boolean;\n  onDelete: (story: ApiTypeStory) => void;\n  onReport: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peerIds: string[];\n  currentPeerId?: string;\n  currentStoryId?: number;\n  byPeerId?: Record<string, ApiPeerStories>;\n  isSinglePeer?: boolean;\n  isSingleStory?: boolean;\n  isPrivate?: boolean;\n  isArchive?: boolean;\n}\n\nconst ACTIVE_SLIDE_VERTICAL_CORRECTION_REM = 1.75;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SCROLL_RELEASE_DELAY = 1500;\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nfunction StorySlides({\n  peerIds,\n  currentPeerId,\n  currentStoryId,\n  isOpen,\n  isSinglePeer,\n  isSingleStory,\n  isPrivate,\n  isArchive,\n  byPeerId,\n  isDeleteModalOpen,\n  onDelete,\n  onClose,\n  onReport,\n}: OwnProps & StateProps) {\n  const { stopActiveReaction } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n  const [renderingPeerId, setRenderingPeerId] = useState(currentPeerId);\n  const [renderingStoryId, setRenderingStoryId] = useState(currentStoryId);\n  const prevPeerId = usePreviousDeprecated(currentPeerId);\n  const renderingIsArchive = useCurrentOrPrev(isArchive, true);\n  const renderingIsPrivate = useCurrentOrPrev(isPrivate, true);\n  const renderingIsSinglePeer = useCurrentOrPrev(isSinglePeer, true);\n  const renderingIsSingleStory = useCurrentOrPrev(isSingleStory, true);\n  const slideSizes = useSlideSizes();\n  const { height: windowHeight, width: windowWidth } = useWindowSize();\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const { isMobile } = useAppLayout();\n\n  const rendersRef = useRef<Record<string, { current: HTMLDivElement }>>({});\n  const [getIsAnimating, setIsAnimating] = useSignal(false);\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  function setRef(ref: HTMLDivElement | undefined, peerId: string) {\n    if (!ref) {\n      return;\n    }\n    if (!rendersRef.current[peerId]) {\n      rendersRef.current[peerId] = { current: ref };\n    } else {\n      rendersRef.current[peerId].current = ref;\n    }\n  }\n\n  const renderingPeerIds = useMemo(() => {\n    if (renderingPeerId && (renderingIsSinglePeer || renderingIsSingleStory)) {\n      return [renderingPeerId];\n    }\n\n    const index = renderingPeerId ? peerIds.indexOf(renderingPeerId) : -1;\n    if (!renderingPeerId || index === -1) {\n      return [];\n    }\n\n    const start = Math.max(index - 4, 0);\n    const end = Math.min(index + 5, peerIds.length);\n\n    return peerIds.slice(start, end);\n  }, [renderingIsSingleStory, renderingIsSinglePeer, renderingPeerId, peerIds]);\n\n  const renderingPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !renderingPeerId) {\n      return -1;\n    }\n\n    return renderingPeerIds.indexOf(renderingPeerId);\n  }, [renderingPeerId, renderingPeerIds]);\n\n  const currentPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !currentPeerId) {\n      return -1;\n    }\n    return renderingPeerIds.indexOf(currentPeerId);\n  }, [currentPeerId, renderingPeerIds]);\n\n  useEffect(() => {\n    if (!isMobile) return;\n\n    // If animation disabled, set rendering peer id to current peer\n    setRenderingPeerId(currentPeerId);\n  }, [currentPeerId, isMobile]);\n\n  // Handling the flipping of stories from a current user\n  useEffect(() => {\n    if (renderingPeerId === currentPeerId && currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n  }, [currentPeerId, currentStoryId, renderingPeerId, renderingStoryId]);\n\n  useEffect(() => {\n    if (isMobile) return undefined;\n    if (prevPeerId && prevPeerId !== currentPeerId) {\n      setIsAnimating(true);\n    }\n\n    return () => {\n      setIsAnimating(false);\n    };\n  }, [prevPeerId, currentPeerId, setIsAnimating, isMobile]);\n\n  useEffect(() => {\n    return () => {\n      if (!currentStoryId || !currentPeerId) return;\n      stopActiveReaction({\n        containerId: getStoryKey(currentPeerId, currentStoryId),\n      });\n    };\n  }, [currentStoryId, currentPeerId]);\n\n  const slideAmount = currentPeerPosition - renderingPeerPosition;\n  const isBackward = renderingPeerPosition > currentPeerPosition;\n\n  const calculateTransformX = useLastCallback(() => {\n    return peerIds.reduce<Record<string, number>>((transformX, peerId, index) => {\n      if (peerId === renderingPeerId) {\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: isBackward,\n        });\n      } else {\n        let isMoveThroughActiveSlide = false;\n        if (!isBackward && index > 0 && peerIds[index - 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n        if (isBackward && index < peerIds.length - 1 && peerIds[index + 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: currentPeerId === peerId && !isBackward,\n          isMoveThroughActiveSlide,\n        });\n      }\n\n      return transformX;\n    }, {});\n  });\n\n  useEffect(() => {\n    if (!containerRef.current || !isOpen) {\n      return undefined;\n    }\n\n    let offsetY = 0;\n\n    const getCurrentStoryRef = () => {\n      return renderingPeerId ? rendersRef.current[renderingPeerId]?.current : undefined;\n    };\n\n    const onRelease = (event: MouseEvent | TouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      const current = getCurrentStoryRef();\n      if (!current) return;\n\n      if (offsetY < -SWIPE_Y_THRESHOLD) {\n        const composer = document.getElementById(EDITABLE_STORY_INPUT_ID);\n        if (composer) {\n          requestMutation(() => {\n            focusEditableElement(composer);\n          });\n        }\n        return;\n      }\n\n      if (offsetY > SWIPE_Y_THRESHOLD) {\n        onClose();\n        if (event.type === 'wheel') {\n          disableScrolling();\n          setTimeout(enableScrolling, SCROLL_RELEASE_DELAY);\n        }\n      } else {\n        requestMutation(() => {\n          current.style.setProperty('--slide-translate-y', '0px');\n        });\n      }\n    };\n\n    return captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      withWheelDrag: true,\n      excludedClosestSelector: '.Composer',\n      onDrag: (event, captureEvent, {\n        dragOffsetX, dragOffsetY,\n      }) => {\n        if (isReleasedRef.current) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (event.type === 'mousemove') return;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const current = getCurrentStoryRef();\n        if (!current) return;\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(absOffsetY) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          offsetY = clamp(dragOffsetY, -limit, limit);\n          if (offsetY > 0) {\n            requestMutation(() => {\n              current.style.setProperty('--slide-translate-y', `${offsetY * (isMobile ? 1 : -1)}px`);\n            });\n          }\n          if (event.type === 'wheel' && Math.abs(offsetY) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onRelease,\n    });\n  }, [isOpen, onClose, windowWidth, windowHeight, isMobile, renderingPeerId]);\n\n  useLayoutEffect(() => {\n    if (isMobile) return;\n    const transformX = calculateTransformX();\n\n    Object.entries(rendersRef.current).forEach(([peerId, { current }]) => {\n      if (!current) return;\n\n      if (!getIsAnimating()) {\n        current.classList.remove(styles.slideAnimation, styles.slideAnimationToActive, styles.slideAnimationFromActive);\n        current.style.setProperty('--slide-translate-x', '0px');\n        current.style.setProperty('--slide-translate-y', '0px');\n        current.style.setProperty('--slide-translate-scale', '1');\n        current.style.setProperty('--slide-content-scale', String(slideSizes.toActiveScale));\n\n        return;\n      }\n\n      const getScale = () => {\n        if (currentPeerId === peerId) {\n          return String(slideSizes.toActiveScale);\n        }\n        if (peerId === renderingPeerId) {\n          return String(slideSizes.fromActiveScale);\n        }\n        return '1';\n      };\n\n      let offsetY = 0;\n      if (peerId === renderingPeerId) {\n        offsetY = -ACTIVE_SLIDE_VERTICAL_CORRECTION_REM * slideSizes.fromActiveScale;\n        current.classList.add(styles.slideAnimationFromActive);\n      }\n      if (peerId === currentPeerId) {\n        offsetY = ACTIVE_SLIDE_VERTICAL_CORRECTION_REM;\n        current.classList.add(styles.slideAnimationToActive);\n      }\n\n      current.classList.add(styles.slideAnimation);\n      current.style.setProperty('--slide-translate-x', `${transformX[peerId] || 0}px`);\n      current.style.setProperty('--slide-translate-y', `${offsetY}rem`);\n      current.style.setProperty('--slide-translate-scale', getScale());\n    });\n  }, [currentPeerId, getIsAnimating, renderingPeerId, slideSizes, isMobile]);\n\n  const handleTransitionEnd = useLastCallback((event: React.TransitionEvent<HTMLDivElement>) => {\n    // It is `target` that is needed here, not `currentTarget`\n    const target = event.target as HTMLDivElement | null;\n\n    if (!target || !target.classList.contains(styles.activeSlide)) return;\n\n    if (renderingPeerId !== currentPeerId) {\n      setRenderingPeerId(currentPeerId);\n      setRenderingStoryId(currentStoryId);\n    } else if (currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n    setIsAnimating(false);\n  });\n\n  if (isMobile) {\n    return (\n      <div className={styles.wrapper} ref={containerRef}>\n        <div\n          className={styles.mobileSlide}\n          ref={(ref) => setRef(ref, renderingPeerId!)}\n        >\n          <Story\n            peerId={renderingPeerId!}\n            storyId={renderingStoryId!}\n            onDelete={onDelete}\n            dimensions={slideSizes.activeSlide}\n            isPrivateStories={renderingIsPrivate}\n            isArchivedStories={renderingIsArchive}\n            isDeleteModalOpen={isDeleteModalOpen}\n            isSingleStory={isSingleStory}\n            getIsAnimating={getIsAnimating}\n            onClose={onClose}\n            onReport={onReport}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  function renderStoryPreview(peerId: string, index: number, position: number) {\n    const style = buildStyle(\n      `width: ${slideSizes.slide.width}px`,\n      `height: ${slideSizes.slide.height}px`,\n    );\n    const className = buildClassName(\n      styles.slide,\n      styles.slidePreview,\n      `slide-${position}`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={className}\n        style={style}\n      >\n        <StoryPreview\n          peer={selectPeer(getGlobal(), peerId)}\n          peerStories={byPeerId?.[peerId]}\n        />\n      </div>\n    );\n  }\n\n  function renderStory(peerId: string) {\n    const style = isMobile ? undefined : buildStyle(\n      `width: ${slideSizes.activeSlide.width}px`,\n      `--slide-media-height: ${slideSizes.activeSlide.height}px`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={buildClassName(styles.slide, styles.activeSlide)}\n        style={style}\n      >\n        <Story\n          peerId={peerId}\n          storyId={renderingStoryId!}\n          onDelete={onDelete}\n          dimensions={slideSizes.activeSlide}\n          isPrivateStories={renderingIsPrivate}\n          isArchivedStories={renderingIsArchive}\n          isDeleteModalOpen={isDeleteModalOpen}\n          isSingleStory={isSingleStory}\n          getIsAnimating={getIsAnimating}\n          onClose={onClose}\n          onReport={onReport}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.wrapper}\n      ref={containerRef}\n      style={`--story-viewer-scale: ${slideSizes.scale}`}\n      onTransitionEnd={handleTransitionEnd}\n    >\n      <div className={styles.fullSize} onClick={onClose} />\n      {renderingPeerIds.length > 1 && (\n        <div className={styles.backdropNonInteractive} style={`height: ${slideSizes.slide.height}px`} />\n      )}\n      {renderingPeerIds.map((peerId, index) => {\n        if (peerId === renderingPeerId) {\n          return renderStory(renderingPeerId);\n        }\n\n        return renderStoryPreview(peerId, index, index - renderingPeerPosition);\n      })}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      peerId: currentPeerId, storyId: currentStoryId, isSinglePeer, isSingleStory, isPrivate, isArchive, storyList,\n    },\n  } = selectTabState(global);\n  const { byPeerId, orderedPeerIds: { active } } = global.stories;\n\n  return {\n    byPeerId,\n    peerIds: storyList?.peerIds ?? active,\n    currentPeerId,\n    currentStoryId,\n    isSinglePeer,\n    isSingleStory,\n    isPrivate,\n    isArchive,\n  };\n}, (global) => selectIsStoryViewerOpen(global))(StorySlides));\n","import { useState } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  });\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"views-list\":\"gpDY8bos\",\"viewsList\":\"gpDY8bos\",\"views-list-loading\":\"vuRAfQ5v\",\"viewsListLoading\":\"vuRAfQ5v\",\"info\":\"AOSUIChK\",\"centeredInfo\":\"oGLhkkS7\",\"view-reaction\":\"MLaabS6n\",\"viewReaction\":\"MLaabS6n\",\"header\":\"d3N2bktu\",\"content\":\"QmRA3HZK\",\"top-button\":\"Dkv8GAxf\",\"topButton\":\"Dkv8GAxf\",\"contact-filter\":\"YpB_9VxE\",\"contactFilter\":\"YpB_9VxE\",\"selected\":\"DoUlpdZJ\",\"sort\":\"axDpgq9G\",\"sort-button\":\"Bm5VA66f\",\"sortButton\":\"Bm5VA66f\",\"icon-sort\":\"YVQiH93R\",\"iconSort\":\"YVQiH93R\",\"icon-down\":\"NXP9aMD0\",\"iconDown\":\"NXP9aMD0\",\"search\":\"QQQqBLK6\",\"bottom-info\":\"_CSv6suH\",\"bottomInfo\":\"_CSv6suH\",\"scrolled\":\"RYQ0liYe\",\"footer\":\"dUK7rP37\",\"closeButton\":\"abPzLiCH\",\"opacity-fade-in\":\"cX8oY3zb\",\"opacityFadeIn\":\"cX8oY3zb\",\"fadeIn\":\"Sx_aeh1o\",\"blocked\":\"L82sciL8\",\"check\":\"UqGBKwjg\",\"menuBubble\":\"dRqemuTA\",\"with-colored-status\":\"GQ96fta9\",\"withColoredStatus\":\"GQ96fta9\"};","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiPeer, ApiTypeStoryView, ApiUser,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectPeer } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\n\nimport styles from './StoryViewModal.module.scss';\n\ntype OwnProps = {\n  storyView: ApiTypeStoryView;\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\nconst BULLET = '\\u2022';\n\nconst StoryView = ({\n  storyView,\n  peer,\n  availableReactions,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    closeStoryViewer,\n    unblockUser,\n    blockUser,\n    deleteContact,\n    updateStoryView,\n    focusMessage,\n    openStoryViewer,\n    closeStoryViewModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    const { type } = storyView;\n\n    if (type === 'repost') {\n      closeStoryViewModal();\n      openStoryViewer({\n        peerId: storyView.peerId,\n        storyId: storyView.storyId,\n      });\n      return;\n    }\n\n    closeStoryViewer();\n\n    setTimeout(() => {\n      if (type === 'user') {\n        openChat({ id: storyView.peerId });\n      } else if (type === 'forward') {\n        focusMessage({ chatId: storyView.peerId, messageId: storyView.messageId });\n      }\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const contextActions = useMemo(() => {\n    if (!isUserId(storyView.peerId)) return undefined;\n    const { peerId, areStoriesBlocked, isUserBlocked } = storyView;\n    const user = peer as ApiUser;\n    const { isContact } = user || {};\n    const fullName = getUserFullName(user);\n\n    const actions: MenuItemContextAction[] = [];\n\n    if (!isUserBlocked) {\n      if (!areStoriesBlocked) {\n        actions.push({\n          handler: () => {\n            blockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: true });\n          },\n          title: lang('StoryHideFrom', fullName),\n          icon: 'hand-stop',\n        });\n      } else {\n        actions.push({\n          handler: () => {\n            unblockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: false });\n          },\n          title: lang('StoryShowBackTo', fullName),\n          icon: 'play-story',\n        });\n      }\n    }\n\n    if (isContact) {\n      actions.push({\n        handler: () => {\n          deleteContact({ userId: peerId });\n        },\n        title: lang('DeleteContact'),\n        icon: 'delete-user',\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        handler: () => {\n          if (isUserBlocked) {\n            unblockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: false });\n          } else {\n            blockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: true });\n          }\n        },\n        title: lang(isUserBlocked ? 'Unblock' : 'BlockUser'),\n        icon: isUserBlocked ? 'user' : 'delete-user',\n        destructive: !isUserBlocked,\n      });\n    }\n\n    return actions;\n  }, [lang, storyView, peer]);\n\n  const statusIcon: IconName = storyView.type === 'user' ? 'message-read'\n    : storyView.type === 'forward' ? 'forward' : 'loop';\n  const shouldColorStatus = storyView.type === 'forward' || storyView.type === 'repost';\n\n  const status = useMemo(() => {\n    const isModified = storyView.type === 'repost' && storyView.story.forwardInfo?.isModified;\n    const parts = [formatDateAtTime(lang, storyView.date * 1000)];\n    if (isModified) {\n      parts.push(lang('lng_edited'));\n    }\n\n    return parts.join(` ${BULLET} `);\n  }, [lang, storyView]);\n\n  return (\n    <ListItem\n      key={storyView.peerId}\n      className={buildClassName(\n        'chat-item-clickable small-icon',\n        styles.opacityFadeIn,\n        (storyView.isUserBlocked || storyView.areStoriesBlocked) && styles.blocked,\n      )}\n      onClick={handleClick}\n      rightElement={storyView.type === 'user' && storyView.reaction ? (\n        <ReactionStaticEmoji\n          reaction={storyView.reaction}\n          className={styles.viewReaction}\n          size={DEFAULT_REACTION_SIZE}\n          availableReactions={availableReactions}\n          withIconHeart\n        />\n      ) : undefined}\n      contextActions={contextActions}\n      withPortalForMenu\n      menuBubbleClassName={styles.menuBubble}\n    >\n      {isUserId(storyView.peerId) ? (\n        <PrivateChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          userId={storyView.peerId}\n          noStatusOrTyping\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n          forceShowSelf\n        />\n      ) : (\n        <GroupChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          chatId={storyView.peerId}\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { storyView }) => {\n  const peer = selectPeer(global, storyView.peerId);\n\n  return {\n    peer,\n    availableReactions: global.reactions.availableReactions,\n  };\n})(StoryView));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStoryView } from '../../api/types';\n\nimport {\n  STORY_MIN_REACTIONS_SORT,\n  STORY_VIEWS_MIN_CONTACTS_FILTER,\n  STORY_VIEWS_MIN_SEARCH,\n} from '../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport PlaceholderChatInfo from '../ui/placeholder/PlaceholderChatInfo';\nimport SearchInput from '../ui/SearchInput';\nimport StoryView from './StoryView';\n\nimport styles from './StoryViewModal.module.scss';\n\ninterface StateProps {\n  story?: ApiStory;\n  isLoading?: boolean;\n  views?: ApiTypeStoryView[];\n  nextOffset?: string;\n  viewersExpirePeriod: number;\n  isCurrentUserPremium?: boolean;\n}\n\nconst REFETCH_DEBOUNCE = 250;\n\nfunction StoryViewModal({\n  story,\n  viewersExpirePeriod,\n  views,\n  nextOffset,\n  isLoading,\n  isCurrentUserPremium,\n}: StateProps) {\n  const {\n    loadStoryViewList, closeStoryViewModal, clearStoryViews,\n  } = getActions();\n\n  const [areJustContacts, markJustContacts, unmarkJustContacts] = useFlag(false);\n  const [areReactionsFirst, markReactionsFirst, unmarkReactionsFirst] = useFlag(true);\n  const [query, setQuery] = useState('');\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(story);\n  const isExpired = Boolean(story?.date) && (story.date + viewersExpirePeriod) < getServerTime();\n  const { viewsCount = 0, reactionsCount = 0 } = story?.views || {};\n\n  const shouldShowJustContacts = story?.isPublic && viewsCount > STORY_VIEWS_MIN_CONTACTS_FILTER;\n  const shouldShowSortByReactions = reactionsCount > STORY_MIN_REACTIONS_SORT;\n  const shouldShowSearch = viewsCount > STORY_VIEWS_MIN_SEARCH;\n  const hasHeader = shouldShowJustContacts || shouldShowSortByReactions || shouldShowSearch;\n\n  useEffect(() => {\n    if (!isOpen) {\n      setQuery('');\n      unmarkJustContacts();\n      markReactionsFirst();\n    }\n  }, [isOpen]);\n\n  const refetchViews = useDebouncedCallback(() => {\n    clearStoryViews({ isLoading: true });\n  }, [], REFETCH_DEBOUNCE, true);\n\n  useEffect(() => {\n    refetchViews();\n  }, [areJustContacts, areReactionsFirst, query, refetchViews]);\n\n  const sortedViews = useMemo(() => {\n    return views?.sort(prepareComparator(areReactionsFirst));\n  }, [areReactionsFirst, views]);\n\n  const placeholderCount = !sortedViews?.length ? Math.min(viewsCount, 8) : 1;\n\n  const notAllAvailable = Boolean(sortedViews?.length) && sortedViews.length < viewsCount && isExpired;\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!story?.id || nextOffset === undefined) return;\n    loadStoryViewList({\n      peerId: story.peerId,\n      storyId: story.id,\n      offset: nextOffset,\n      areReactionsFirst: areReactionsFirst || undefined,\n      areJustContacts: areJustContacts || undefined,\n      query,\n    });\n  });\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const handleClose = useLastCallback(() => {\n    closeStoryViewModal();\n  });\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        fluid\n        size=\"tiny\"\n        color=\"translucent\"\n        className={buildClassName(!isMenuOpen && 'active', styles.sortButton, styles.topButton)}\n        faded={isMenuOpen}\n        onClick={onTrigger}\n        ariaLabel={lang('SortBy')}\n      >\n        <Icon name={areReactionsFirst ? 'heart-outline' : 'recent'} className={styles.iconSort} />\n        <Icon name=\"down\" className={styles.iconDown} />\n      </Button>\n    );\n  }, [areReactionsFirst, lang]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className=\"component-theme-dark\"\n      contentClassName={styles.viewsList}\n      isSlim\n    >\n      {hasHeader && (\n        <div className={styles.header}>\n          {shouldShowJustContacts && (\n            <div className={styles.contactFilter}>\n              <Button\n                className={buildClassName(!areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={unmarkJustContacts}\n              >\n                {lang('AllViewers')}\n              </Button>\n              <Button\n                className={buildClassName(areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={markJustContacts}\n              >\n                {lang('Contacts')}\n              </Button>\n            </div>\n          )}\n          {shouldShowSortByReactions && (\n            <DropdownMenu\n              className={styles.sort}\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"heart-outline\" onClick={markReactionsFirst}>\n                {lang('SortByReactions')}\n                {areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n              <MenuItem icon=\"recent\" onClick={unmarkReactionsFirst}>\n                {lang('SortByTime')}\n                {!areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n            </DropdownMenu>\n          )}\n          {shouldShowSearch && (\n            <SearchInput className={styles.search} value={query} onChange={setQuery} />\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(styles.content, !isAtBeginning && styles.topScrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {isExpired && !isLoading && !query && Boolean(!sortedViews?.length) && (\n          <div className={buildClassName(styles.info, styles.centeredInfo)}>\n            {renderText(\n              lang(isCurrentUserPremium ? 'ServerErrorViewers' : 'ExpiredViewsStub'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n        )}\n        {!isLoading && Boolean(query.length) && !sortedViews?.length && (\n          <div className={styles.info}>\n            {lang('Story.ViewList.EmptyTextSearch')}\n          </div>\n        )}\n        <InfiniteScroll\n          items={sortedViews}\n          onLoadMore={handleLoadMore}\n        >\n          {sortedViews?.map((view) => {\n            const additionalKeyId = view.type === 'forward' ? view.messageId\n              : view.type === 'repost' ? view.storyId : 'user';\n            return (\n              <StoryView key={`${view.peerId}-${view.date}-${additionalKeyId}`} storyView={view} />\n            );\n          })}\n          {isLoading && Array.from({ length: placeholderCount }).map((_, i) => (\n            <ListItem\n\n              key={`placeholder-${i}`}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              disabled\n            >\n              <PlaceholderChatInfo />\n            </ListItem>\n          ))}\n          {notAllAvailable && (\n            <div key=\"not-all-available\" className={buildClassName(styles.info, styles.bottomInfo)}>\n              {lang('Story.ViewList.NotFullyRecorded')}\n            </div>\n          )}\n        </InfiniteScroll>\n      </div>\n      <div className={buildClassName(styles.footer, 'dialog-buttons')}>\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.close)}\n          isText\n          onClick={handleClose}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nfunction prepareComparator(areReactionsFirst?: boolean) {\n  return (a: ApiTypeStoryView, b: ApiTypeStoryView) => {\n    if (areReactionsFirst) {\n      const reactionA = a.type === 'user' && a.reaction;\n      const reactionB = b.type === 'user' && b.reaction;\n      if (reactionA && !reactionB) {\n        return -1;\n      }\n      if (!reactionA && reactionB) {\n        return 1;\n      }\n    }\n\n    return b.date - a.date;\n  };\n}\n\nexport default memo(withGlobal((global) => {\n  const { appConfig } = global;\n  const { storyViewer: { viewModal } } = selectTabState(global);\n  const {\n    storyId, views, nextOffset, isLoading,\n  } = viewModal || {};\n  const story = storyId ? selectPeerStory(global, global.currentUserId!, storyId) : undefined;\n\n  return {\n    storyId,\n    views,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    story: story && 'content' in story ? story : undefined,\n    nextOffset,\n    isLoading,\n    availableReactions: global.reactions.availableReactions,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StoryViewModal));\n","import {\n  beginHeavyAnimation,\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport useSlideSizes from './hooks/useSlideSizes';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport StealthModeModal from './StealthModeModal';\nimport StoryDeleteConfirmModal from './StoryDeleteConfirmModal';\nimport StorySettings from './StorySettings';\nimport StorySlides from './StorySlides';\nimport StoryViewModal from './StoryViewModal';\n\nimport styles from './StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 250;\n\ninterface StateProps {\n  isOpen: boolean;\n  peerId: string;\n  storyId?: number;\n  story?: ApiTypeStory;\n  origin?: StoryViewerOrigin;\n  shouldSkipHistoryAnimations?: boolean;\n  withAnimation?: boolean;\n  isPrivacyModalOpen?: boolean;\n}\n\nfunction StoryViewer({\n  isOpen,\n  peerId,\n  storyId,\n  story,\n  origin,\n  shouldSkipHistoryAnimations,\n  withAnimation,\n  isPrivacyModalOpen,\n}: StateProps) {\n  const { closeStoryViewer, closeStoryPrivacyEditor, reportStory } = getActions();\n\n  const lang = useOldLang();\n  const [storyToDelete, setStoryToDelete] = useState<ApiTypeStory | undefined>(undefined);\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n\n  const { bestImageData, thumbnail } = useStoryProps(story);\n  const slideSizes = useSlideSizes();\n  const isPrevOpen = usePreviousDeprecated(isOpen);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const prevPeerId = usePreviousDeprecated(peerId);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setStoryToDelete(undefined);\n      closeDeleteModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      enableDirectTextInput();\n      stopPriorityPlayback();\n    };\n  }, [isOpen]);\n\n  const handleClose = useCallback(() => {\n    closeStoryViewer();\n  }, [closeStoryViewer]);\n\n  const handleOpenDeleteModal = useLastCallback((s: ApiTypeStory) => {\n    setStoryToDelete(s);\n    openDeleteModal();\n  });\n\n  const handleCloseDeleteModal = useLastCallback(() => {\n    closeDeleteModal();\n    setStoryToDelete(undefined);\n  });\n\n  const openMessageReport = useLastCallback(() => {\n    if (!storyId) return;\n    reportStory({ storyId, peerId });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isGhostAnimation && !isPrevOpen && isOpen && peerId && thumbnail && origin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(peerId, origin, thumbnail, bestImageData, slideSizes.activeSlide);\n    }\n    if (isGhostAnimation && isPrevOpen && !isOpen && prevPeerId && prevBestImageData && prevOrigin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevPeerId, prevOrigin, prevBestImageData);\n    }\n  }, [\n    isGhostAnimation,\n    bestImageData,\n    prevBestImageData,\n    isOpen,\n    isPrevOpen,\n    slideSizes.activeSlide,\n    thumbnail,\n    peerId,\n    prevPeerId,\n    origin,\n    prevOrigin,\n  ]);\n\n  return (\n    <ShowTransition\n      id=\"StoryViewer\"\n      className={styles.root}\n      isOpen={isOpen}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className={styles.backdrop} onClick={handleClose} />\n      <Button\n        className={styles.close}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n\n      <StorySlides\n        isOpen={isOpen}\n        isDeleteModalOpen={isDeleteModalOpen}\n        onReport={openMessageReport}\n        onClose={handleClose}\n        onDelete={handleOpenDeleteModal}\n      />\n\n      <StoryDeleteConfirmModal\n        isOpen={isDeleteModalOpen}\n        story={storyToDelete}\n        onClose={handleCloseDeleteModal}\n      />\n      <StoryViewModal />\n      <StealthModeModal />\n      <StorySettings isOpen={isPrivacyModalOpen} onClose={closeStoryPrivacyEditor} />\n    </ShowTransition>\n  );\n}\n\nexport default memo(withGlobal((global): StateProps => {\n  const {\n    shouldSkipHistoryAnimations, storyViewer: {\n      storyId, peerId, isPrivacyModalOpen, origin,\n    },\n  } = selectTabState(global);\n  const story = peerId && storyId ? selectPeerStory(global, peerId, storyId) : undefined;\n  const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  return {\n    isOpen: selectIsStoryViewerOpen(global),\n    shouldSkipHistoryAnimations,\n    peerId: peerId!,\n    storyId,\n    story,\n    origin,\n    withAnimation,\n    isPrivacyModalOpen,\n  };\n})(StoryViewer));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\n\nimport { PEER_PICKER_ITEM_HEIGHT_PX } from '../../../config';\nimport {\n  getCanPostInChat, getGroupStatus, getUserStatus, isUserOnline,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport { selectMonoforumChannel, selectPeer, selectTopics, selectUserStatus } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../helpers/mediaDimensions';\nimport renderText from '../helpers/renderText';\n\nimport useSelector from '../../../hooks/data/useSelector';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useInputFocusOnOpen from '../../../hooks/useInputFocusOnOpen';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport Avatar from '../Avatar';\nimport FullNameTitle from '../FullNameTitle';\nimport Icon from '../icons/Icon';\nimport TopicIcon from '../TopicIcon';\nimport PickerItem from './PickerItem';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  className?: string;\n  isLowStackPriority?: boolean;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\nconst ITEM_CLASS_NAME = 'ChatOrUserPicker-item';\nconst TOPIC_ITEM_HEIGHT_PX = 56;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  search,\n  searchPlaceholder,\n  className,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n}) => {\n  const { loadTopics } = getActions();\n\n  const oldLang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const topicContainerRef = useRef<HTMLDivElement>();\n  const searchRef = useRef<HTMLInputElement>();\n  const topicSearchRef = useRef<HTMLInputElement>();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds.indexOf(viewportIds![0]);\n\n  const resetSearch = useLastCallback(() => {\n    onSearchChange('');\n  });\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const selectTopicsById = useLastCallback((global: GlobalState) => {\n    if (!forumId) {\n      return undefined;\n    }\n\n    return selectTopics(global, forumId);\n  });\n\n  const forumTopicsById = useSelector(selectTopicsById);\n\n  const [topicIds, topics] = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const chatFullInfoById = global.chats.fullInfoById;\n\n    const chat = chatsById[forumId!];\n\n    if (!chat || !forumTopicsById) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = forumTopicsById\n      ? Object.values(forumTopicsById).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chat, topic, undefined, chatFullInfoById[forumId!])\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : forumTopicsById;\n\n    return [Object.keys(result).map(Number), result];\n  }, [forumId, topicSearch, forumTopicsById]);\n\n  const handleHeaderBackClick = useLastCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  });\n\n  const handleSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  });\n\n  const handleTopicSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatsById = getGlobal().chats.byId;\n\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById[chatId];\n      if (chat?.isForum) {\n        if (!forumTopicsById) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleClick = useLastCallback((chatId: string) => {\n    const chatsById = getGlobal().chats.byId;\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!forumTopicsById) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  });\n\n  const renderChatItem = useCallback((id: string, index: number) => {\n    const global = getGlobal();\n    let peer = selectPeer(global, id);\n    if (!peer) {\n      return undefined;\n    }\n\n    const monoforumChannel = selectMonoforumChannel(global, id);\n    if (monoforumChannel) {\n      peer = monoforumChannel;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n\n    function getSubtitle() {\n      if (!peer) return undefined;\n      if (peer.id === currentUserId) return [oldLang('SavedMessagesInfo')];\n      if (isApiPeerChat(peer)) {\n        return [getGroupStatus(oldLang, peer)];\n      }\n\n      const userStatus = selectUserStatus(global, peer.id);\n      return [\n        getUserStatus(oldLang, peer, userStatus),\n        buildClassName(isUserOnline(peer, userStatus, true) && 'online'),\n      ];\n    }\n\n    const [subtitle, subtitleClassName] = getSubtitle() || [];\n\n    return (\n      <PickerItem\n        key={id}\n        className={ITEM_CLASS_NAME}\n        title={(\n          <div className=\"title-wrapper\">\n            <FullNameTitle\n              className=\"item-title\"\n              peer={peer}\n              isMonoforum={Boolean(monoforumChannel)}\n              isSavedMessages={isSelf}\n            />\n          </div>\n        )}\n        avatarElement={(\n          <Avatar\n            peer={peer}\n            asMessageBubble={Boolean(monoforumChannel)}\n            isSavedMessages={isSelf}\n            size=\"medium\"\n          />\n        )}\n        subtitle={subtitle}\n        subtitleClassName={subtitleClassName}\n        ripple\n        style={`top: ${(viewportOffset + index) * PEER_PICKER_ITEM_HEIGHT_PX}px;`}\n\n        onClick={() => handleClick(id)}\n      />\n    );\n  }, [currentUserId, oldLang, viewportOffset]);\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={oldLang('Back')} onClick={handleHeaderBackClick}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={(topicIds?.length || 0) * TOPIC_ITEM_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {!topicIds && <Loading />}\n          {topicIds?.map((topicId, i) => (\n            <PickerItem\n              key={`${forumId}_${topicId}`}\n              className={ITEM_CLASS_NAME}\n\n              onClick={() => onSelectChatOrUser(forumId!, topicId)}\n              style={`top: ${(viewportOffset + i) * TOPIC_ITEM_HEIGHT_PX}px;`}\n              avatarElement={(\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n              )}\n              title={renderText(topics[topicId].title)}\n            />\n          ))}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={oldLang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            itemSelector={`.${ITEM_CLASS_NAME}`}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds.length * PEER_PICKER_ITEM_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map(renderChatItem)}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{oldLang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName('ChatOrUserPicker', className)}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      isLowStackPriority={isLowStackPriority}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\" slideClassName=\"ChatOrUserPicker_slide\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatType } from '../../api/types';\nimport type { ThreadId } from '../../types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport {\n  getCanPostInChat,\n  getHasAdminRight,\n  isChatChannel,\n  isDeletedUser,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport {\n  filterChatIdsByType, selectChat, selectChatFullInfo, selectIsMonoforumAdmin, selectUser,\n} from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from './helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ChatOrUserPicker from './pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  className?: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  isLowStackPriority?: boolean;\n  isForwarding?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  className,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n  isForwarding,\n}) => {\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n\n    const peerIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = selectChat(global, id);\n      const user = selectUser(global, id);\n      const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n      const isChannel = chat && isChatChannel(chat);\n      if (isForwarding && isChannel && !hasAdminRights) return false;\n      if (user && !isDeletedUser(user)) return true;\n\n      if (!chat) return false;\n\n      if (chat.isMonoforum && selectIsMonoforumAdmin(global, id)) {\n        return false;\n      }\n\n      const chatFullInfo = selectChatFullInfo(global, id);\n      // TODO: Handle bulk check with API call\n      return !chatFullInfo || getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n    });\n\n    const sorted = sortChatIds(\n      filterPeersByQuery({\n        ids: unique([\n          ...(currentUserId ? [currentUserId] : []),\n          ...peerIds,\n          ...(contactIds || []),\n        ]),\n        query: search,\n      }),\n      undefined,\n      priorityIds,\n      currentUserId,\n    );\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [\n    isOpen,\n    pinnedIds,\n    currentUserId,\n    activeListIds,\n    search,\n    archivedListIds,\n    contactIds,\n    filter,\n    isForwarding,\n  ]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      className={className}\n      chatOrUserIds={renderingIds}\n      currentUserId={currentUserId}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      isLowStackPriority={isLowStackPriority}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ThreadId } from '../../types';\n\nimport { getChatTitle, getUserFirstOrLastName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n  isStory?: boolean;\n  isForwarding?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n  isStory,\n  isForwarding,\n}) => {\n  const {\n    openChatOrTopicWithReplyInDraft,\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    forwardStory,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingIsStory = usePreviousDeprecated(isStory, true);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    const isSelf = recipientId === currentUserId;\n    if (isStory) {\n      forwardStory({ toChatId: recipientId });\n      const global = getGlobal();\n      if (isUserId(recipientId)) {\n        showNotification({\n          message: isSelf\n            ? lang('Conversation.StoryForwardTooltip.SavedMessages.One')\n            : lang(\n              'StorySharedTo',\n              getUserFirstOrLastName(selectUser(global, recipientId)),\n            ),\n        });\n      } else {\n        const chat = selectChat(global, recipientId);\n        if (!chat) return;\n\n        showNotification({\n          message: lang('StorySharedTo', getChatTitle(lang, chat)),\n        });\n      }\n      return;\n    }\n\n    if (isSelf) {\n      const message = lang(\n        isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One',\n      );\n\n      forwardToSavedMessages();\n      showNotification({ message });\n    } else {\n      const chatId = recipientId;\n      const topicId = threadId ? Number(threadId) : undefined;\n      if (isForwarding) {\n        setForwardChatOrTopic({ chatId, topicId });\n      } else {\n        openChatOrTopicWithReplyInDraft({ chatId, topicId });\n      }\n    }\n  }, [currentUserId, isManyMessages, isStory, lang, isForwarding]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      className={renderingIsStory ? 'component-theme-dark' : undefined}\n      searchPlaceholder={lang(isForwarding ? 'ForwardTo' : 'ReplyToDialog')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n      isForwarding={isForwarding}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { messageIds, storyId } = selectTabState(global).forwardMessages;\n  const isForwarding = (messageIds && messageIds.length > 0);\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (messageIds?.length || 0) > 1,\n    isStory: Boolean(storyId),\n    isForwarding,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ThreadId } from '../../types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { selectCurrentMessageList, selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport renderText from '../common/helpers/renderText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  dialogs: (ApiError | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, currentMessageList }) => {\n  const {\n    dismissDialog,\n    sendMessage,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      if (!currentMessageList) {\n        return;\n      }\n\n      sendMessage({\n        contact: contactRequest,\n        messageList: currentMessageList,\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiContact) => {\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map((notification) => (\n        <Notification key={notification.localId} notification={notification} />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/browser/url';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (!url) {\n      return;\n    }\n\n    window.open(ensureProtocol(url), '_blank', 'noopener noreferrer');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlText', { url: renderingUrl }, { withNodes: true, withMarkdown: true }))}\n      confirmLabel={lang('OpenUrlConfirm')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VJDwJpsF\",\"buttons\":\"aYO2C2Hx\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { IS_IOS, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport { prepareMapUrl } from '../../../util/map';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './MapModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['mapModal'];\n};\n\nconst OpenMapModal = ({ modal }: OwnProps) => {\n  const { closeMapModal } = getActions();\n\n  const { point: geoPoint, zoom } = modal || {};\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(geoPoint);\n\n  const handleClose = useLastCallback(() => {\n    closeMapModal();\n  });\n\n  const [googleUrl, bingUrl, appleUrl, osmUrl] = useMemo(() => {\n    if (!geoPoint) {\n      return [];\n    }\n\n    const google = prepareMapUrl('google', geoPoint, zoom);\n    const bing = prepareMapUrl('bing', geoPoint, zoom);\n    const osm = prepareMapUrl('osm', geoPoint, zoom);\n    const apple = prepareMapUrl('apple', geoPoint, zoom);\n\n    return [google, bing, apple, osm];\n  }, [geoPoint, zoom]);\n\n  const openUrl = useLastCallback((url: string) => {\n    closeMapModal();\n    window.open(url, '_blank', 'noopener');\n  });\n\n  const handleGoogleClick = useLastCallback(() => {\n    openUrl(googleUrl!);\n  });\n\n  const handleBingClick = useLastCallback(() => {\n    openUrl(bingUrl!);\n  });\n\n  const handleAppleClick = useLastCallback(() => {\n    openUrl(appleUrl!);\n  });\n\n  const handleOsmClick = useLastCallback(() => {\n    openUrl(osmUrl!);\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.root}\n      title={lang('OpenMapWith')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      isSlim\n    >\n      <div className={styles.buttons}>\n        {(IS_IOS || IS_MAC_OS) && (\n          <Button fluid size=\"smaller\" onClick={handleAppleClick}>\n            Apple Maps\n          </Button>\n        )}\n        <Button fluid size=\"smaller\" onClick={handleGoogleClick}>\n          Google Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleBingClick}>\n          Bing Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleOsmClick}>\n          OpenStreetMap\n        </Button>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(OpenMapModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport renderText from '../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal?: TabState['urlAuth'];\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps & StateProps> = ({\n  modal, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(modal, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useOldLang();\n\n  const handleOpen = useCallback(() => {\n    if (modal?.url && isLoginChecked) {\n      const acceptAction = modal.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else if (currentAuth?.url) {\n      window.open(ensureProtocol(currentAuth.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    modal, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(modal?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    return {\n      currentUser,\n    };\n  },\n)(UrlAuthModal));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateToString, formatTime, getDayStart } from '../../util/dates/dateFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  description?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onDateChange?: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  description,\n  onClose,\n  onSubmit,\n  onDateChange,\n  onSecondButtonClick,\n}) => {\n  const lang = useOldLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  const isDisabled = (isFutureMode && selectedDate.getTime() < minDate.getTime())\n    || (isPastMode && selectedDate.getTime() > maxDate.getTime());\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      onDateChange?.(dateCopy);\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    if (isFutureMode && selectedDate < minDate) {\n      onSubmit(minDate);\n    } else if (isPastMode && selectedDate > maxDate) {\n      onSubmit(maxDate);\n    } else {\n      onSubmit(selectedDate);\n    }\n  }, [isFutureMode, isPastMode, minDate, maxDate, onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n    onDateChange?.(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate, onDateChange]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n    onDateChange?.(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate, onDateChange]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <Icon name=\"previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <Icon name=\"next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : gridDate ? 'clickable' : '',\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        {description && (\n          <div className=\"description\">\n            {description}\n          </div>\n        )}\n        <div className=\"footer\">\n          <Button\n            onClick={handleSubmit}\n            disabled={isDisabled}\n          >\n            {submitLabel}\n          </Button>\n          {secondButtonLabel && (\n            <Button onClick={onSecondButtonClick} isText>\n              {secondButtonLabel}\n            </Button>\n          )}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: OldLangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.getTime() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useOldLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useOldLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  const inputRef = useRef<HTMLInputElement>();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => {\n        inputRef.current?.focus();\n      }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            peer={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text NewContactModal__help-text__negative\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import type {\n  ElementRef } from '../lib/teact/teact';\nimport {\n  useEffect, useSignal, useState,\n} from '../lib/teact/teact';\n\nimport type { Point, Size } from '../types';\n\nimport { RESIZE_HANDLE_SELECTOR } from '../config';\nimport buildStyle from '../util/buildStyle';\nimport { captureEvents } from '../util/captureEvents';\nimport getPointerPosition from '../util/events/getPointerPosition';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport enum ResizeHandleType {\n  Top,\n  Bottom,\n  Left,\n  Right,\n  TopLeft,\n  TopRight,\n  BottomLeft,\n  BottomRight,\n}\n\ntype ResizeHandleSelectorType = 'top' | 'bottom' | 'left'\n  | 'right' | 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\nconst resizeHandleSelectorsMap: Record<ResizeHandleSelectorType, ResizeHandleType> = {\n  top: ResizeHandleType.Top,\n  bottom: ResizeHandleType.Bottom,\n  left: ResizeHandleType.Left,\n  right: ResizeHandleType.Right,\n  topLeft: ResizeHandleType.TopLeft,\n  topRight: ResizeHandleType.TopRight,\n  bottomLeft: ResizeHandleType.BottomLeft,\n  bottomRight: ResizeHandleType.BottomRight,\n};\n\nconst resizeHandleSelectors = Object.keys(resizeHandleSelectorsMap) as ResizeHandleSelectorType[];\n\nlet resizeTimeout: number | undefined;\nconst FULLSCREEN_POSITION = { x: 0, y: 0 };\n\nexport default function useDraggable(\n  ref: ElementRef<HTMLElement>,\n  dragHandleElementRef: ElementRef<HTMLElement>,\n  isDragEnabled: boolean = true,\n  originalSize: Size,\n  isFullscreen: boolean = false,\n  minimumSize: Size = { width: 0, height: 0 },\n  cachedPosition?: Point,\n) {\n  const [elementCurrentPosition, setElementCurrentPosition] = useState<Point | undefined>(cachedPosition);\n  const [elementCurrentSize, setElementCurrentSize] = useState<Size | undefined>(undefined);\n\n  const [getElementPositionOnStartTransform, setElementPositionOnStartTransform] = useSignal({ x: 0, y: 0 });\n  const [getElementSizeOnStartTransform, setElementSizeOnStartTransform] = useSignal({ width: 0, height: 0 });\n  const [getTransformStartPoint, setTransformStartPoint] = useSignal({ x: 0, y: 0 });\n\n  const elementPositionOnStartTransform = getElementPositionOnStartTransform();\n  const transformStartPoint = getTransformStartPoint();\n\n  const element = ref.current;\n  const dragHandleElement = dragHandleElementRef.current;\n\n  const [isInitiated, setIsInitiated] = useFlag(false);\n  const [wasElementShown, setWasElementShown] = useFlag(false);\n  const [isDragging, startDragging, stopDragging] = useFlag(false);\n  const [isResizing, startResizing, stopResizing] = useFlag(false);\n  const [isWindowsResizing, startWindowResizing, stopWindowResizing] = useFlag(false);\n\n  const [hitResizeHandle, setHitResizeHandle] = useState<ResizeHandleType | undefined>(undefined);\n\n  function getVisibleArea() {\n    return {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n  }\n\n  const updateCurrentPosition = useLastCallback((position: Point) => {\n    if (!isFullscreen) setElementCurrentPosition({ x: position.x, y: position.y });\n  });\n\n  const getActualPosition = useLastCallback(() => {\n    return isFullscreen ? FULLSCREEN_POSITION : elementCurrentPosition;\n  });\n\n  const getCenteredPosition = useLastCallback(() => {\n    if (!elementCurrentSize) return undefined;\n    const { width, height } = elementCurrentSize;\n\n    const visibleArea = getVisibleArea();\n    const viewportWidth = visibleArea.width;\n    const viewportHeight = visibleArea.height;\n\n    const centeredX = (viewportWidth - width) / 2;\n    const centeredY = (viewportHeight - height) / 2;\n\n    return { x: centeredX, y: centeredY };\n  });\n\n  useEffect(() => {\n    if (element) setWasElementShown();\n  }, [element]);\n\n  useEffect(() => {\n    if (!isInitiated && elementCurrentSize) {\n      const centeredPosition = getCenteredPosition();\n      if (!centeredPosition) return;\n\n      updateCurrentPosition(centeredPosition);\n      setIsInitiated();\n    }\n  }, [elementCurrentSize, isInitiated, element]);\n\n  const handleStartDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (targetElement.closest('.no-drag') || !element) {\n      return;\n    }\n    const { x, y } = getPointerPosition(event);\n\n    const { left, top } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setTransformStartPoint({ x, y });\n\n    startDragging();\n  });\n\n  function getResizeHandleFromTarget(targetElement: HTMLElement) {\n    const closest = (selector: string) => targetElement.closest(selector);\n\n    if (!closest(RESIZE_HANDLE_SELECTOR)) return undefined;\n    for (const selector of resizeHandleSelectors) {\n      if (closest(`.${selector}`)) {\n        return resizeHandleSelectorsMap[selector];\n      }\n    }\n    return undefined;\n  }\n\n  const handleStartResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (!element || !targetElement) {\n      return;\n    }\n    const resizeHandle = getResizeHandleFromTarget(targetElement);\n\n    if (resizeHandle === undefined) return;\n    setHitResizeHandle(resizeHandle);\n\n    const { x, y } = getPointerPosition(event);\n\n    const {\n      left, right, top, bottom,\n    } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setElementSizeOnStartTransform({ width: right - left, height: bottom - top });\n    setTransformStartPoint({ x, y });\n\n    startResizing();\n  });\n\n  const handleDragRelease = useLastCallback(() => {\n    stopDragging();\n  });\n\n  const handleResizeRelease = useLastCallback(() => {\n    stopResizing();\n  });\n\n  useEffect(() => {\n    if (!isDragEnabled) {\n      stopDragging();\n    }\n  }, [isDragEnabled]);\n\n  const ensurePositionInVisibleArea = (x: number, y: number) => {\n    const visibleArea = getVisibleArea();\n\n    const visibleAreaWidth = visibleArea.width;\n    const visibleAreaHeight = visibleArea.height;\n\n    const componentWidth = elementCurrentSize!.width;\n    const componentHeight = elementCurrentSize!.height;\n\n    let newX = x;\n    let newY = y;\n\n    if (newX < 0) newX = 0;\n    if (newY < 0) newY = 0;\n    if (newX + componentWidth > visibleAreaWidth) newX = visibleAreaWidth - componentWidth;\n    if (newY + componentHeight > visibleAreaHeight) newY = visibleAreaHeight - componentHeight;\n\n    return { x: newX, y: newY };\n  };\n\n  const adjustPositionWithinBounds = useLastCallback(() => {\n    if (isFullscreen) return;\n    const position = !wasElementShown && !cachedPosition ? getCenteredPosition() : elementCurrentPosition;\n    if (!elementCurrentSize || !position) return;\n    const newPosition = ensurePositionInVisibleArea(position.x, position.y);\n    updateCurrentPosition(newPosition);\n  });\n\n  const ensureSizeInVisibleArea = useLastCallback((sizeForCheck: Size) => {\n    const newSize = sizeForCheck;\n\n    const visibleArea = getVisibleArea();\n\n    const originalWidth = originalSize.width;\n    const originalHeight = originalSize.height;\n    newSize.width = Math.min(visibleArea.width, Math.max(originalWidth, newSize.width));\n    newSize.height = Math.min(visibleArea.height, Math.max(originalHeight, newSize.height));\n\n    return newSize;\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    const newSize = ensureSizeInVisibleArea({ width: originalSize.width, height: originalSize.height });\n    if (newSize) setElementCurrentSize(newSize);\n  }, [originalSize, isResizing]);\n\n  const adjustSizeWithinBounds = useLastCallback(() => {\n    if (!elementCurrentSize || isResizing) return;\n    const newSize = ensureSizeInVisibleArea(elementCurrentSize);\n    if (newSize) setElementCurrentSize(newSize);\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    adjustPositionWithinBounds();\n  }, [elementCurrentSize, isResizing]);\n\n  useEffect(() => {\n    const handleWindowResize = () => {\n      startWindowResizing();\n      adjustSizeWithinBounds();\n      adjustPositionWithinBounds();\n      if (resizeTimeout) {\n        clearTimeout(resizeTimeout);\n        resizeTimeout = undefined;\n      }\n      resizeTimeout = window.setTimeout(() => {\n        resizeTimeout = undefined;\n        stopWindowResizing();\n      }, 250);\n    };\n\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = undefined;\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, [adjustPositionWithinBounds]);\n\n  const handleDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isDragging || !element) return;\n    const { x, y } = getPointerPosition(event);\n\n    const offsetX = x - transformStartPoint.x;\n    const offsetY = y - transformStartPoint.y;\n\n    const newX = elementPositionOnStartTransform.x + offsetX;\n    const newY = elementPositionOnStartTransform.y + offsetY;\n\n    if (elementCurrentSize) setElementCurrentPosition(ensurePositionInVisibleArea(newX, newY));\n  });\n\n  const handleResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isResizing || !element || hitResizeHandle === undefined) return;\n    const { x, y } = getPointerPosition(event);\n    const sizeOnStartTransform = getElementSizeOnStartTransform();\n\n    const pageVisibleX = Math.min(Math.max(0, x), getVisibleArea().width);\n    const pageVisibleY = Math.min(Math.max(0, y), getVisibleArea().height);\n\n    const offsetX = pageVisibleX - transformStartPoint.x;\n    const offsetY = pageVisibleY - transformStartPoint.y;\n\n    const maxX = elementPositionOnStartTransform.x + sizeOnStartTransform.width - minimumSize.width;\n    const maxY = elementPositionOnStartTransform.y + sizeOnStartTransform.height - minimumSize.height;\n\n    const originalBounds = {\n      x: elementPositionOnStartTransform.x,\n      y: elementPositionOnStartTransform.y,\n      width: sizeOnStartTransform.width,\n      height: sizeOnStartTransform.height,\n    };\n\n    const newBounds = { ...originalBounds };\n\n    if (hitResizeHandle === ResizeHandleType.Left\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width - offsetX, minimumSize.width);\n      newBounds.x = Math.min(newBounds.x + offsetX, maxX);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Right\n      || hitResizeHandle === ResizeHandleType.TopRight\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width + offsetX, minimumSize.width);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Top\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.TopRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height - offsetY, minimumSize.height);\n      newBounds.y = Math.min(newBounds.y + offsetY, maxY);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Bottom\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height + offsetY, minimumSize.height);\n    }\n\n    setElementCurrentSize({ width: newBounds.width, height: newBounds.height });\n    setElementCurrentPosition({ x: newBounds.x, y: newBounds.y });\n  });\n\n  useEffect(() => {\n    let cleanup: NoneToVoidFunction | undefined;\n    if (dragHandleElement && isDragEnabled) {\n      cleanup = captureEvents(dragHandleElement, {\n        onCapture: handleStartDrag,\n        onDrag: handleDrag,\n        onRelease: handleDragRelease,\n        onClick: handleDragRelease,\n        onDoubleClick: handleDragRelease,\n      });\n    }\n    return cleanup;\n  }, [isDragEnabled, dragHandleElement]);\n\n  useEffect(() => {\n    const cleanups: NoneToVoidFunction[] = [];\n    if (element && isDragEnabled) {\n      for (const selector of resizeHandleSelectors) {\n        const resizeHandler = element.querySelector(`.resizeHandle.${selector}`) as HTMLElement;\n\n        if (resizeHandler) {\n          const cleanup = captureEvents(resizeHandler, {\n            onCapture: handleStartResize,\n            onDrag: handleResize,\n            onRelease: handleResizeRelease,\n            onClick: handleResizeRelease,\n            onDoubleClick: handleResizeRelease,\n          });\n\n          if (cleanup) {\n            cleanups.push(cleanup);\n          }\n        }\n      }\n    }\n\n    return () => {\n      cleanups.forEach((cleanup) => cleanup());\n    };\n  }, [isDragEnabled, element]);\n\n  const cursorStyle = isDragging ? 'cursor: grabbing !important; ' : '';\n\n  const actualPosition = getActualPosition();\n\n  if (!isInitiated || !elementCurrentSize || !actualPosition) {\n    return {\n      isDragging: false,\n      style: cursorStyle,\n    };\n  }\n\n  const style = buildStyle(\n    `left: ${actualPosition.x}px;`,\n    `top: ${actualPosition.y}px;`,\n    !isFullscreen && `max-width: ${elementCurrentSize.width}px;`,\n    !isFullscreen && `max-height: ${elementCurrentSize.height}px;`,\n    'position: fixed;',\n    (isDragging || isResizing || isWindowsResizing) && 'transition: none !important;',\n    cursorStyle,\n  );\n\n  return {\n    position: elementCurrentPosition,\n    size: elementCurrentSize,\n    isDragging,\n    isResizing,\n    style,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kUZmBlnN\",\"window-state-button\":\"Rax9j_TK\",\"windowStateButton\":\"Rax9j_TK\",\"button\":\"SMRJmUuE\",\"avatars\":\"GP17QhNN\",\"state-icon\":\"sdbTXCxq\",\"stateIcon\":\"sdbTXCxq\",\"icon\":\"P0P4gW6a\",\"title\":\"TZFjRaG4\"};","import {\n  memo, useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { WebApp } from '../../../types/webapp';\n\nimport { selectActiveWebApp, selectTabState, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './MinimizedWebAppModal.module.scss';\n\ntype StateProps = {\n  activeTabBot?: ApiUser;\n  isMinimizedState?: boolean;\n  openedWebApps?: Record<string, WebApp>;\n};\n\nconst MinimizedWebAppModal = ({\n  activeTabBot, isMinimizedState, openedWebApps,\n}: StateProps) => {\n  const {\n    changeWebAppModalState,\n    closeWebAppModal,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const ref = useRef<HTMLDivElement>();\n\n  const openedWebAppsValues = useMemo(() => {\n    return openedWebApps && Object.values(openedWebApps);\n  }, [openedWebApps]);\n\n  const openedTabsCount = openedWebAppsValues?.length;\n\n  const peers = useMemo(() => {\n    if (!openedTabsCount) return [];\n\n    const global = getGlobal();\n    const activeTabBotId = activeTabBot?.id;\n    const openedApps = unique([activeTabBotId, ...openedWebAppsValues.map((app) => app.botId)]);\n    const bots = openedApps.map((id) => id && selectUser(global, id)).filter(Boolean).slice(0, 3);\n    return bots;\n  }, [openedTabsCount, activeTabBot, openedWebAppsValues]);\n\n  const handleCloseClick = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleExpandClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  });\n\n  if (!isMinimizedState) return undefined;\n\n  function renderTitle() {\n    const activeTabName = peers.length > 0 && peers[0]?.firstName;\n    const title = openedTabsCount && activeTabName && openedTabsCount > 1\n      ? lang('MiniAppsMoreTabs',\n        {\n          botName: activeTabName,\n          count: openedTabsCount - 1,\n        },\n        {\n          pluralValue: openedTabsCount - 1,\n        })\n      : activeTabName;\n\n    return (\n      <div className={styles.title}>\n        {title}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        styles.root,\n      )}\n    >\n      <Button\n        className={styles.button}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        ariaLabel={oldLang('Close')}\n        onClick={handleCloseClick}\n      >\n        <Icon className={styles.icon} name=\"close\" />\n      </Button>\n      <AvatarList className={styles.avatars} size=\"mini\" peers={peers} />\n      {renderTitle()}\n      <Button\n        className={buildClassName(\n          styles.windowStateButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleExpandClick}\n      >\n        <Icon className={styles.stateIcon} name=\"expand-modal\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const webApps = tabState.webApps;\n\n    const { botId } = selectActiveWebApp(global) || {};\n    const { modalState, openedWebApps } = webApps || {};\n    const isMinimizedState = modalState === 'minimized';\n    const activeTabBot = botId ? selectUser(global, botId) : undefined;\n\n    return {\n      activeTabBot,\n      isMinimizedState,\n      openedWebApps,\n    };\n  },\n)(MinimizedWebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"RFg0Ey2I\",\"user-count-badge\":\"UZtJ6ZXb\",\"userCountBadge\":\"UZtJ6ZXb\",\"user-badge-icon\":\"pTiZFhsG\",\"userBadgeIcon\":\"pTiZFhsG\",\"name\":\"TzA5nqCC\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PeerBadge from '../../common/PeerBadge';\n\nimport styles from './WebAppGridItem.module.scss';\n\nexport type OwnProps = {\n\n  chatId: string;\n  isPopularApp?: boolean;\n};\n\nexport type StateProps = {\n  user?: ApiUser;\n};\n\nfunction WebAppGridItem({ user, isPopularApp }: OwnProps & StateProps) {\n  const {\n    requestMainWebView,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useLastCallback(() => {\n    if (!user) {\n      return;\n    }\n    const botId = user?.id;\n    if (!botId) {\n      return;\n    }\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId,\n      peerId: botId,\n      theme,\n    });\n  });\n\n  if (!user) return undefined;\n\n  const title = user?.firstName;\n  const activeUserCount = user?.botActiveUsers;\n  const badgeText = activeUserCount && isPopularApp ? formatIntegerCompact(lang, activeUserCount) : undefined;\n\n  return (\n    <div\n      className={styles.container}\n      onClick={handleClick}\n    >\n      <PeerBadge\n        className={buildClassName(styles.avatarContainer, isPopularApp && 'PopularAppGridItem')}\n        textClassName={styles.name}\n        badgeClassName={styles.userCountBadge}\n        badgeIconClassName={styles.userBadgeIcon}\n        peer={user}\n        text={title}\n        badgeText={badgeText}\n        badgeIcon=\"user-filled\"\n      />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const user = selectUser(global, chatId);\n\n    return {\n      user,\n    };\n  },\n)(WebAppGridItem));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"BJV09FsC\",\"search\":\"bdi8G7GR\",\"section-title\":\"ex3kxgWX\",\"sectionTitle\":\"ex3kxgWX\",\"section-content\":\"uIZzLhEh\",\"sectionContent\":\"uIZzLhEh\",\"showMoreLink\":\"h_Zs9ypA\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback,\n  useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport WebAppGridItem from './WebAppGridItem';\n\nimport styles from './MoreAppsTabContent.module.scss';\n\nconst POPULAR_APPS_SLICE = 30;\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\nconst LESS_GRID_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MoreAppsTabContent: FC<StateProps> = ({\n  foundIds,\n  recentBotIds,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n  const {\n    searchPopularBotApps,\n  } = getActions();\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n\n    return filterPeersByQuery({ ids: foundIds, query: searchQuery, type: 'user' });\n  }, [foundIds, searchQuery]);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleSearchInputReset = useCallback(() => {\n    setSearchQuery('');\n  }, []);\n\n  return (\n    <InfiniteScroll\n      className={buildClassName(styles.root, 'custom-scroll')}\n      items={filteredFoundIds}\n      onLoadMore={handleLoadMore}\n      itemSelector=\".PopularAppGridItem\"\n      noFastList\n      preloadBackwards={POPULAR_APPS_SLICE}\n    >\n      <SearchInput\n        className={styles.search}\n        value={searchQuery}\n        onChange={setSearchQuery}\n        onReset={handleSearchInputReset}\n        placeholder={lang('SearchApps')}\n      />\n      {recentBotIds && !searchQuery && (\n        <div className={styles.section}>\n          <div className={styles.sectionTitle}>\n            <span>{oldLang('SearchAppsMine')}</span>\n            <span className={styles.showMoreLink} onClick={handleToggleShowMoreMine}>\n              {oldLang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n            </span>\n          </div>\n          <div className={styles.sectionContent}>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_GRID_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <WebAppGridItem\n                  chatId={id}\n                />\n              );\n            })}\n          </div>\n        </div>\n      )}\n      <div className={styles.section}>\n        <div className={styles.sectionTitle}>\n          {searchQuery ? lang('Apps') : lang('PopularApps')}\n        </div>\n        <div className={styles.sectionContent}>\n          {filteredFoundIds && filteredFoundIds.map((id) => {\n            return (\n              <WebAppGridItem\n                chatId={id}\n                isPopularApp={!searchQuery}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal((global) => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(MoreAppsTabContent));\n","import type { ElementRef } from '../../../../lib/teact/teact';\nimport { useCallback, useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { WebApp, WebAppInboundEvent, WebAppOutboundEvent } from '../../../../types/webapp';\n\nimport { getWebAppKey } from '../../../../global/helpers';\nimport { extractCurrentThemeParams } from '../../../../util/themeStyle';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst RELOAD_TIMEOUT = 500;\nconst FULLSCREEN_BUTTONS_AREA_HEIGHT = 3.675 * REM;\n\nconst useWebAppFrame = (\n  ref: ElementRef<HTMLIFrameElement>,\n  isOpen: boolean,\n  isFullscreen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  webApp?: WebApp,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n    setWebAppPaymentSlug,\n    openInvoice,\n    closeWebApp,\n    openSuggestedStatusModal,\n    updateWebApp,\n    updateContentSettings,\n  } = getActions();\n\n  const isReloadSupported = useRef<boolean>(false);\n  const reloadTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendFullScreenChanged = useCallback((value: boolean) => {\n    sendEvent({\n      eventType: 'fullscreen_changed',\n      eventData: {\n        is_fullscreen: value,\n      },\n    });\n  }, [sendEvent]);\n\n  const forceReloadFrame = useLastCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  });\n\n  const reloadFrame = useCallback((url: string) => {\n    if (isReloadSupported.current) {\n      sendEvent({\n        eventType: 'reload_iframe',\n      });\n      reloadTimeout.current = setTimeout(() => {\n        forceReloadFrame(url);\n      }, RELOAD_TIMEOUT);\n      return;\n    }\n\n    forceReloadFrame(url);\n  }, [sendEvent]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendSafeArea = useCallback(() => {\n    if (!ref.current) {\n      return;\n    }\n    sendEvent({\n      eventType: 'safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n      },\n    });\n\n    sendEvent({\n      eventType: 'content_safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: isFullscreen ? FULLSCREEN_BUTTONS_AREA_HEIGHT : 0,\n        bottom: 0,\n      },\n    });\n  }, [sendEvent, isFullscreen, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n    const contentWindow = ref.current?.contentWindow;\n    const sourceWindow = event.source as Window;\n\n    if (contentWindow !== sourceWindow) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      const { eventType, eventData } = data;\n      // Handle some app requests here to simplify hook usage\n      if (eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (eventType === 'web_app_close') {\n        if (webApp) {\n          const key = getWebAppKey(webApp);\n          closeWebApp({ key, skipClosingConfirmation: true });\n        }\n      }\n\n      if (eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (eventType === 'web_app_request_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_content_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n        isReloadSupported.current = Boolean(eventData.reload_supported);\n      }\n\n      if (eventType === 'iframe_will_reload') {\n        clearTimeout(reloadTimeout.current);\n      }\n\n      if (eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      // Clipboard access temporarily disabled to address security concerns\n      if (eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_open_scan_qr_popup') {\n        showNotification({\n          message: 'Scanning QR code is not supported in this client yet',\n        });\n      }\n\n      if (eventType === 'web_app_open_invoice') {\n        setWebAppPaymentSlug({\n          slug: eventData.slug,\n        });\n        openInvoice({\n          type: 'slug',\n          slug: eventData.slug,\n        });\n      }\n\n      if (eventType === 'web_app_open_link') {\n        const linkUrl = eventData.url;\n        window.open(linkUrl, '_blank', 'noreferrer');\n      }\n\n      if (eventType === 'web_app_biometry_get_info') {\n        sendEvent({\n          eventType: 'biometry_info_received',\n          eventData: {\n            available: false,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_device_storage_clear'\n        || eventType === 'web_app_device_storage_get_key'\n        || eventType === 'web_app_device_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'device_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_secure_storage_clear'\n        || eventType === 'web_app_secure_storage_get_key'\n        || eventType === 'web_app_secure_storage_restore_key'\n        || eventType === 'web_app_secure_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'secure_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_accelerometer') {\n        sendEvent({\n          eventType: 'accelerometer_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_gyroscope') {\n        sendEvent({\n          eventType: 'gyroscope_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_device_orientation') {\n        sendEvent({\n          eventType: 'device_orientation_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_add_to_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_check_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_checked',\n          eventData: {\n            status: 'unsupported',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_set_emoji_status') {\n        const { custom_emoji_id, duration } = eventData;\n\n        if (!custom_emoji_id || typeof custom_emoji_id !== 'string') {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'SUGGESTED_EMOJI_INVALID',\n            },\n          });\n          return;\n        }\n\n        if (duration) {\n          try {\n            BigInt(duration);\n          } catch (e) {\n            sendEvent({\n              eventType: 'emoji_status_failed',\n              eventData: {\n                error: 'DURATION_INVALID',\n              },\n            });\n            return;\n          }\n        }\n\n        if (!webApp) {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'UNKNOWN_ERROR',\n            },\n          });\n          return;\n        }\n\n        openSuggestedStatusModal({\n          webAppKey: getWebAppKey(webApp),\n          customEmojiId: custom_emoji_id,\n          duration: Number(duration),\n          botId: webApp.botId,\n        });\n      }\n\n      if (eventType === 'web_app_verify_age') {\n        const { passed } = eventData;\n\n        if (passed) {\n          showNotification({\n            message: {\n              key: 'TitleAgeCheckSuccess',\n            },\n          });\n          updateContentSettings({ isSensitiveEnabled: true });\n        } else {\n          showNotification({\n            message: {\n              key: 'TitleAgeCheckFailed',\n            },\n          });\n        }\n      }\n\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [\n    isSimpleView, sendEvent, onEvent, sendCustomStyle, webApp,\n    sendTheme, sendViewport, sendSafeArea, onLoad, windowSize.isResizing,\n    ref,\n  ]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, sendSafeArea, windowSize]);\n\n  useEffect(() => {\n    if (!webApp?.plannedEvents?.length) return;\n    const events = webApp.plannedEvents;\n    events.forEach((event) => {\n      sendEvent(event);\n    });\n\n    updateWebApp({\n      key: getWebAppKey(webApp),\n      update: {\n        plannedEvents: [],\n      },\n    });\n  }, [sendEvent, webApp]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage, ref]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      sendSafeArea();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, isFullscreen, sendViewport, sendSafeArea, ref]);\n\n  return {\n    sendEvent, sendFullScreenChanged, reloadFrame, sendViewport, sendSafeArea, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LeeJZdwH\",\"multi-tab\":\"ESsGT5OD\",\"multiTab\":\"ESsGT5OD\",\"loadingPlaceholder\":\"jEAibDyh\",\"placeholderPath\":\"Gx1BIECZ\",\"fadeOpacityBreath\":\"N5Blieah\",\"defaultPlaceholderGrid\":\"Ig_t1R7i\",\"placeholderSquare\":\"ablUg8HU\",\"hide\":\"Wrl63uWL\",\"frame\":\"OmY14FFl\",\"with-button\":\"liDRl1xT\",\"withButton\":\"liDRl1xT\",\"hidden\":\"vOFiAq3l\",\"secondary-button\":\"ypxiUCFQ\",\"secondaryButton\":\"ypxiUCFQ\",\"main-button\":\"U_ggDKn1\",\"mainButton\":\"U_ggDKn1\",\"visible\":\"KwI4XdkC\",\"buttons-container\":\"mR_hsBdT\",\"buttonsContainer\":\"mR_hsBdT\",\"one-row\":\"YfQO314y\",\"oneRow\":\"YfQO314y\",\"two-rows\":\"gUldkEoy\",\"twoRows\":\"gUldkEoy\",\"left-to-right\":\"ntESqwQ_\",\"leftToRight\":\"ntESqwQ_\",\"right-to-left\":\"q6IUFEL0\",\"rightToLeft\":\"q6IUFEL0\",\"top-to-bottom\":\"gb4iHJ9H\",\"topToBottom\":\"gb4iHJ9H\",\"bottom-to-top\":\"R_bh3GF8\",\"bottomToTop\":\"R_bh3GF8\",\"hide-horizontal\":\"oYaRA7u4\",\"hideHorizontal\":\"oYaRA7u4\",\"secondary-button-spinner\":\"NYV0yA2J\",\"secondaryButtonSpinner\":\"NYV0yA2J\",\"main-button-spinner\":\"oq6HKJur\",\"mainButtonSpinner\":\"oq6HKJur\",\"web-app-popup\":\"YEOURXza\",\"webAppPopup\":\"YEOURXza\",\"without-title\":\"gvljUzY9\",\"withoutTitle\":\"gvljUzY9\",\"closeIcon\":\"BvNtfigU\",\"state-back\":\"rC2wkMIk\",\"stateBack\":\"rC2wkMIk\",\"backIconContainer\":\"JXsuZ01s\",\"moreIcon\":\"T58ozRyW\",\"headerPanel\":\"eYrhewMy\",\"icon\":\"a0AI_he5\",\"headerSplitButton\":\"Tl4_05AQ\",\"headerButton\":\"MvCwTbk_\",\"left\":\"emOpAMBm\",\"right\":\"z4C5VD5o\",\"buttonCaptionContainer\":\"dpZR3YT7\",\"backButtonCaption\":\"dWDprnWa\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiBotAppSettings, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { BotAppPermissions, ThemeKey } from '../../../types';\nimport type {\n  PopupOptions,\n  WebApp,\n  WebAppInboundEvent,\n  WebAppModalStateType,\n  WebAppOutboundEvent,\n} from '../../../types/webapp';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { convertToApiChatType } from '../../../global/helpers';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectBotAppPermissions,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { getGeolocationStatus, IS_GEOLOCATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle.ts';\nimport download from '../../../util/download';\nimport { extractCurrentThemeParams, validateHexColor } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport renderText from '../../common/helpers/renderText';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useFullscreen, { checkIfFullscreen } from '../../../hooks/window/useFullscreen';\nimport usePopupLimit from './hooks/usePopupLimit';\nimport useWebAppFrame from './hooks/useWebAppFrame';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Modal from '../../ui/Modal';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\n\nimport styles from './WebAppModalTabContent.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n  position?: 'left' | 'right' | 'top' | 'bottom';\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n  webApp?: WebApp;\n  registerSendEventCallback: (callback: (event: WebAppOutboundEvent) => void) => void;\n  registerReloadFrameCallback: (callback: (url: string) => void) => void;\n  onContextMenuButtonClick: (e: React.MouseEvent) => void;\n  isTransforming?: boolean;\n  isMultiTabSupported?: boolean;\n  modalHeight: number;\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n  botAppSettings?: ApiBotAppSettings;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n  isPremium?: boolean;\n  modalState?: WebAppModalStateType;\n  botAppPermissions?: BotAppPermissions;\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst ANIMATION_WAIT = 400;\nconst COLLAPSING_WAIT = 350;\nconst POPUP_SEQUENTIAL_LIMIT = 3;\nconst POPUP_RESET_DELAY = 2000; // 2s\nconst APP_NAME_DISPLAY_DURATION = 3800;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModalTabContent: FC<OwnProps & StateProps> = ({\n  modal,\n  webApp,\n  bot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n  registerSendEventCallback,\n  registerReloadFrameCallback,\n  isTransforming,\n  modalState,\n  isMultiTabSupported,\n  onContextMenuButtonClick,\n  botAppPermissions,\n  botAppSettings,\n  modalHeight,\n}) => {\n  const {\n    closeActiveWebApp,\n    sendWebViewData,\n    toggleAttachBot,\n    openTelegramLink,\n    setWebAppPaymentSlug,\n    switchBotInline,\n    sharePhoneWithBot,\n    updateWebApp,\n    resetPaymentStatus,\n    openChatWithInfo,\n    showNotification,\n    openEmojiStatusAccessModal,\n    openLocationAccessModal,\n    changeWebAppModalState,\n    closeWebAppModal,\n    openPreparedInlineMessageModal,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [secondaryButton, setSecondaryButton] = useState<WebAppButton | undefined>();\n\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n\n  const [popupParameters, setPopupParameters] = useState<PopupOptions | undefined>();\n  const [isRequestingPhone, setIsRequestingPhone] = useState(false);\n  const [isRequestingWriteAccess, setIsRequestingWriteAccess] = useState(false);\n  const [requestedFileDownload, setRequestedFileDownload] = useState<{ url: string; fileName: string } | undefined>();\n  const [bottomBarColor, setBottomBarColor] = useState<string | undefined>();\n  const {\n    unlockPopupsAt, handlePopupOpened, handlePopupClosed,\n  } = usePopupLimit(POPUP_SEQUENTIAL_LIMIT, POPUP_RESET_DELAY);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const headerButtonRef = useRef<HTMLDivElement>();\n\n  const headerButtonCaptionRef = useRef<HTMLDivElement>();\n\n  const isFullscreen = modalState === 'fullScreen';\n  const isMinimizedState = modalState === 'minimized';\n\n  const exitFullScreenCallback = useLastCallback(() => {\n    setTimeout(() => {\n      changeWebAppModalState({ state: 'maximized' });\n    }, COLLAPSING_WAIT);\n  });\n\n  const fullscreenElementRef = useRef<HTMLElement>();\n\n  useEffect(() => {\n    fullscreenElementRef.current = document.querySelector('#portals') as HTMLElement;\n  }, []);\n\n  const [, setFullscreen, exitFullscreen] = useFullscreen(fullscreenElementRef, exitFullScreenCallback);\n\n  const activeWebApp = modal?.activeWebAppKey ? modal.openedWebApps[modal.activeWebAppKey] : undefined;\n  const { appName: activeWebAppName, backgroundColor } = activeWebApp || {};\n  const {\n    url, buttonText, isBackButtonVisible,\n  } = webApp || {};\n\n  const {\n    placeholderPath,\n  } = botAppSettings || {};\n\n  const isCloseModalOpen = Boolean(webApp?.isCloseModalOpen);\n  const isRemoveModalOpen = Boolean(webApp?.isRemoveModalOpen);\n\n  const webAppKey = webApp && getWebAppKey(webApp);\n  const activeWebAppKey = activeWebApp && getWebAppKey(activeWebApp);\n\n  const isActive = (activeWebApp && webApp) && activeWebAppKey === webAppKey;\n\n  const isAvailable = IS_GEOLOCATION_SUPPORTED;\n  const isAccessRequested = botAppPermissions?.geolocation !== undefined;\n  const isAccessGranted = Boolean(botAppPermissions?.geolocation);\n\n  const updateCurrentWebApp = useLastCallback((updatedPartialWebApp: Partial<WebApp>) => {\n    if (!webAppKey) return;\n    updateWebApp({ key: webAppKey, update: updatedPartialWebApp });\n  });\n\n  const themeParams = useMemo(() => {\n    return extractCurrentThemeParams();\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [theme]);\n\n  useEffect(() => {\n    setBottomBarColor(themeParams.secondary_bg_color);\n  }, [themeParams]);\n\n  const themeBackgroundColor = themeParams.bg_color;\n  const [backgroundColorFromEvent, setBackgroundColorFromEvent] = useState<string | undefined>();\n  const backgroundColorFromSettings = theme === 'light' ? botAppSettings?.backgroundColor\n    : botAppSettings?.backgroundDarkColor;\n\n  useEffect(() => {\n    const color = backgroundColorFromEvent || backgroundColorFromSettings || themeBackgroundColor;\n\n    updateCurrentWebApp({ backgroundColor: color });\n  }, [themeBackgroundColor, backgroundColorFromEvent, backgroundColorFromSettings]);\n\n  const themeHeaderColor = themeParams.bg_color;\n  const [headerColorFromEvent, setHeaderColorFromEvent] = useState<string | undefined>();\n  const headerColorFromSettings = theme === 'light' ? botAppSettings?.headerColor\n    : botAppSettings?.headerDarkColor;\n\n  useEffect(() => {\n    const color = headerColorFromEvent || headerColorFromSettings || themeHeaderColor;\n\n    updateCurrentWebApp({ headerColor: color });\n  }, [themeHeaderColor, headerColorFromEvent, headerColorFromSettings]);\n\n  const frameRef = useRef<HTMLIFrameElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isOpen = modal?.isModalOpen || false;\n  const isSimple = Boolean(buttonText);\n\n  const {\n    reloadFrame, sendEvent, sendFullScreenChanged, sendViewport, sendSafeArea, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isFullscreen, isSimple, handleEvent, webApp, markLoaded);\n\n  useEffect(() => {\n    if (isActive) registerSendEventCallback(sendEvent);\n  }, [sendEvent, registerSendEventCallback, isActive]);\n\n  useEffect(() => {\n    if (isActive) registerReloadFrameCallback(reloadFrame);\n  }, [reloadFrame, registerReloadFrameCallback, isActive]);\n\n  const isMainButtonVisible = isLoaded && mainButton?.isVisible && mainButton.text.trim().length > 0;\n  const isSecondaryButtonVisible = isLoaded && secondaryButton?.isVisible && secondaryButton.text.trim().length > 0;\n\n  const handleHideCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ isCloseModalOpen: false });\n  });\n  const handleConfirmCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ shouldConfirmClosing: false, isCloseModalOpen: false });\n    setTimeout(() => {\n      closeActiveWebApp();\n    }, ANIMATION_WAIT);\n  });\n\n  const handleHideRemoveModal = useLastCallback(() => {\n    updateCurrentWebApp({ isRemoveModalOpen: false });\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  });\n\n  const handleSecondaryButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'secondary_button_pressed',\n    });\n  });\n\n  const handleAppPopupClose = useLastCallback((buttonId?: string) => {\n    setPopupParameters(undefined);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  });\n\n  const handleAppPopupModalClose = useLastCallback(() => {\n    handleAppPopupClose();\n  });\n\n  const sendThemeCallback = useLastCallback(() => {\n    sendTheme();\n  });\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendThemeCallback();\n    }, ANIMATION_WAIT);\n  }, [theme]);\n\n  const setFullscreenCallback = useLastCallback(() => {\n    if (!checkIfFullscreen() && isActive) {\n      setFullscreen?.();\n    }\n  });\n\n  const exitIfFullscreenCallback = useLastCallback(() => {\n    if (checkIfFullscreen() && isActive) {\n      exitFullscreen?.();\n    }\n  });\n\n  const sendFullScreenChangedCallback = useLastCallback(\n    (value: boolean) => {\n      if (isActive) sendFullScreenChanged(value);\n    },\n  );\n\n  useEffect(() => {\n    if (isFullscreen) {\n      setFullscreenCallback();\n      sendFullScreenChangedCallback(true);\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChangedCallback(false);\n    }\n  }, [isFullscreen]);\n\n  const visibilityChangedCallBack = useLastCallback((visibility: boolean) => {\n    sendEvent({\n      eventType: 'visibility_changed',\n      eventData: {\n        is_visible: visibility,\n      },\n    });\n  });\n\n  useEffect(() => {\n    if (isLoaded) {\n      visibilityChangedCallBack(Boolean(isActive));\n    }\n  }, [isActive, isLoaded]);\n\n  useEffectWithPrevDeps(([prevModalState]) => {\n    if (modalState === 'minimized') {\n      visibilityChangedCallBack(false);\n    }\n    if (modalState && prevModalState === 'minimized') {\n      visibilityChangedCallBack(true);\n    }\n  }, [modalState]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n      resetPaymentStatus();\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, webApp?.slug]);\n\n  const handleRemoveAttachBot = useLastCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: false,\n    });\n    closeActiveWebApp();\n  });\n\n  const handleRejectPhone = useLastCallback(() => {\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleAcceptPhone = useLastCallback(() => {\n    sharePhoneWithBot({ botId: bot!.id });\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'sent',\n      },\n    });\n  });\n\n  const handleRejectFileDownload = useLastCallback((shouldCloseActive?: boolean) => {\n    if (shouldCloseActive) {\n      setRequestedFileDownload(undefined);\n      handlePopupClosed();\n    }\n\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleRejectWriteAccess = useLastCallback(() => {\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  const handleAcceptWriteAccess = useLastCallback(async () => {\n    if (!bot) return;\n    const result = await callApi('allowBotSendMessages', { bot });\n    if (!result) {\n      handleRejectWriteAccess();\n      return;\n    }\n\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'allowed',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  async function handleRequestWriteAccess() {\n    if (!bot) return;\n    const canWrite = await callApi('fetchBotCanSendMessage', {\n      bot,\n    });\n\n    if (canWrite) {\n      sendEvent({\n        eventType: 'write_access_requested',\n        eventData: {\n          status: 'allowed',\n        },\n      });\n    }\n    setIsRequestingWriteAccess(!canWrite);\n  }\n\n  async function handleCheckDownloadFile(fileUrl: string, fileName: string) {\n    const canDownload = await callApi('checkBotDownloadFileParams', {\n      bot: bot!,\n      url: fileUrl,\n      fileName,\n    });\n\n    if (!canDownload) {\n      sendEvent({\n        eventType: 'file_download_requested',\n        eventData: {\n          status: 'cancelled',\n        },\n      });\n      return;\n    }\n\n    setRequestedFileDownload({ url: fileUrl, fileName });\n    handlePopupOpened();\n  }\n\n  const handleDownloadFile = useLastCallback(() => {\n    if (!requestedFileDownload) return;\n    setRequestedFileDownload(undefined);\n    handlePopupClosed();\n\n    download(requestedFileDownload.url, requestedFileDownload.fileName);\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'downloading',\n      },\n    });\n  });\n\n  async function handleInvokeCustomMethod(requestId: string, method: string, parameters: string) {\n    const result = await callApi('invokeWebViewCustomMethod', {\n      bot: bot!,\n      customMethod: method,\n      parameters,\n    });\n\n    sendEvent({\n      eventType: 'custom_method_invoked',\n      eventData: {\n        req_id: requestId,\n        ...result,\n      },\n    });\n  }\n\n  useEffect(() => {\n    if (!isOpen) {\n      setPopupParameters(undefined);\n      setIsRequestingPhone(false);\n      setIsRequestingWriteAccess(false);\n      setMainButton(undefined);\n      setSecondaryButton(undefined);\n      updateCurrentWebApp({\n        isSettingsButtonVisible: false,\n        shouldConfirmClosing: false,\n        isBackButtonVisible: false,\n        isCloseModalOpen: false,\n        isRemoveModalOpen: false,\n      });\n      markUnloaded();\n    }\n  }, [isOpen]);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChatWithInfo({ id: bot!.id });\n  });\n\n  function handleEvent(event: WebAppInboundEvent) {\n    const { eventType, eventData } = event;\n\n    if (eventType === 'web_app_request_fullscreen') {\n      if (getIsWebAppsFullscreenSupported()) {\n        changeWebAppModalState({ state: 'fullScreen' });\n      } else {\n        sendEvent({\n          eventType: 'fullscreen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n    }\n\n    if (eventType === 'web_app_exit_fullscreen') {\n      exitIfFullscreenCallback();\n    }\n\n    if (eventType === 'web_app_open_tg_link') {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl, shouldIgnoreCache: eventData.force_request });\n      closeActiveWebApp();\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      updateCurrentWebApp({ isBackButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_setup_settings_button') {\n      updateCurrentWebApp({ isSettingsButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      setBackgroundColorFromEvent(validateHexColor(eventData.color) ? eventData.color : undefined);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const key = eventData.color_key;\n      setHeaderColorFromEvent(eventData.color || (key ? themeParams[key] : undefined));\n    }\n\n    if (eventType === 'web_app_set_bottom_bar_color') {\n      setBottomBarColor(eventData.color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeActiveWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_secondary_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setSecondaryButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n        position: eventData.position,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      updateCurrentWebApp({ shouldConfirmClosing: true });\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (popupParameters || !eventData.message.trim().length || !eventData.buttons?.length\n        || eventData.buttons.length > 3 || isRequestingPhone || isRequestingWriteAccess\n        || unlockPopupsAt > Date.now()) {\n        handleAppPopupClose(undefined);\n        return;\n      }\n\n      setPopupParameters(eventData);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeActiveWebApp();\n    }\n\n    if (eventType === 'web_app_request_phone') {\n      if (popupParameters || isRequestingWriteAccess || unlockPopupsAt > Date.now()) {\n        handleRejectPhone();\n        return;\n      }\n\n      setIsRequestingPhone(true);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_request_write_access') {\n      if (popupParameters || isRequestingPhone || unlockPopupsAt > Date.now()) {\n        handleRejectWriteAccess();\n        return;\n      }\n\n      handleRequestWriteAccess();\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_invoke_custom_method') {\n      const { method, params, req_id: requestId } = eventData;\n      handleInvokeCustomMethod(requestId, method, JSON.stringify(params));\n    }\n\n    if (eventType === 'web_app_request_file_download') {\n      if (requestedFileDownload || unlockPopupsAt > Date.now()) {\n        handleRejectFileDownload();\n        return;\n      }\n      handleCheckDownloadFile(eventData.url, eventData.file_name);\n    }\n\n    if (eventType === 'web_app_send_prepared_message') {\n      if (!bot || !webAppKey) return;\n      const { id } = eventData;\n      openPreparedInlineMessageModal({ botId: bot.id, messageId: id, webAppKey });\n    }\n\n    if (eventType === 'web_app_request_emoji_status_access') {\n      if (!bot) return;\n      openEmojiStatusAccessModal({ bot, webAppKey });\n    }\n\n    if (eventType === 'web_app_check_location') {\n      const handleGeolocationCheck = () => {\n        sendEvent({\n          eventType: 'location_checked',\n          eventData: {\n            available: isAvailable,\n            access_requested: isAccessRequested,\n            access_granted: isAccessGranted,\n          },\n        });\n      };\n\n      handleGeolocationCheck();\n    }\n\n    if (eventType === 'web_app_request_location') {\n      const handleRequestLocation = async () => {\n        const geolocationData = await getGeolocationStatus();\n        const { accessRequested, accessGranted, geolocation } = geolocationData;\n\n        if (!accessGranted || !accessRequested) {\n          sendEvent({\n            eventType: 'location_requested',\n            eventData: {\n              available: false,\n            },\n          });\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n          return;\n        }\n\n        if (isAvailable) {\n          if (isAccessRequested) {\n            sendEvent({\n              eventType: 'location_requested',\n              eventData: {\n                available: Boolean(botAppPermissions?.geolocation),\n                latitude: geolocation?.latitude,\n                longitude: geolocation?.longitude,\n                altitude: geolocation?.altitude,\n                course: geolocation?.heading,\n                speed: geolocation?.speed,\n                horizontal_accuracy: geolocation?.accuracy,\n                vertical_accuracy: geolocation?.altitudeAccuracy,\n              },\n            });\n          } else {\n            openLocationAccessModal({ bot, webAppKey });\n          }\n        } else {\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n        }\n      };\n\n      handleRequestLocation();\n    }\n\n    if (eventType === 'web_app_open_location_settings') {\n      handleOpenChat();\n    }\n  }\n\n  const mainButtonCurrentColor = useCurrentOrPrev(mainButton?.color, true);\n  const mainButtonCurrentTextColor = useCurrentOrPrev(mainButton?.textColor, true);\n  const mainButtonCurrentIsActive = useCurrentOrPrev(mainButton && Boolean(mainButton.isActive), true);\n  const mainButtonCurrentText = useCurrentOrPrev(mainButton?.text, true);\n\n  const secondaryButtonCurrentPosition = useCurrentOrPrev(secondaryButton?.position, true);\n  const secondaryButtonCurrentColor = useCurrentOrPrev(secondaryButton?.color, true);\n  const secondaryButtonCurrentTextColor = useCurrentOrPrev(secondaryButton?.textColor, true);\n  const secondaryButtonCurrentIsActive = useCurrentOrPrev(secondaryButton && Boolean(secondaryButton.isActive), true);\n  const secondaryButtonCurrentText = useCurrentOrPrev(secondaryButton?.text, true);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideMainButton, setShouldHideMainButton] = useState(true);\n  const [shouldHideSecondaryButton, setShouldHideSecondaryButton] = useState(true);\n  const [shouldShowMainButton, setShouldShowMainButton] = useState(false);\n  const [shouldShowSecondaryButton, setShouldShowSecondaryButton] = useState(false);\n\n  const [shouldShowAppNameInFullscreen, setShouldShowAppNameInFullscreen] = useState(false);\n\n  const [backButtonTextWidth, setBackButtonTextWidth] = useState(0);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n      sendSafeArea();\n    }, isTransforming ? 0 : ANIMATION_WAIT);\n  }, [shouldShowSecondaryButton, shouldHideSecondaryButton,\n    shouldShowMainButton, shouldShowMainButton,\n    secondaryButton?.position, sendViewport, isTransforming, modalHeight,\n    sendSafeArea]);\n\n  const isVerticalLayout = secondaryButtonCurrentPosition === 'top' || secondaryButtonCurrentPosition === 'bottom';\n  const isHorizontalLayout = !isVerticalLayout;\n\n  const rowsCount = (isVerticalLayout && shouldShowMainButton && shouldShowSecondaryButton) ? 2\n    : shouldShowMainButton || shouldShowSecondaryButton ? 1 : 0;\n\n  const hideDirection = (isHorizontalLayout\n    && (!shouldHideMainButton && !shouldHideSecondaryButton)) ? 'horizontal' : 'vertical';\n\n  const mainButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const mainButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const appNameDisplayTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (isFullscreen && isOpen && Boolean(activeWebAppName)) {\n      setShouldShowAppNameInFullscreen(true);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n\n      appNameDisplayTimeout.current = setTimeout(() => {\n        setShouldShowAppNameInFullscreen(false);\n        appNameDisplayTimeout.current = undefined;\n      }, APP_NAME_DISPLAY_DURATION);\n    } else {\n      setShouldShowAppNameInFullscreen(false);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n        appNameDisplayTimeout.current = undefined;\n      }\n    }\n\n    return () => {\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n    };\n  }, [isFullscreen, isOpen, activeWebAppName]);\n\n  useEffect(() => {\n    if (mainButtonChangeTimeout.current) clearTimeout(mainButtonChangeTimeout.current);\n    if (mainButtonFastTimeout.current) clearTimeout(mainButtonFastTimeout.current);\n\n    if (isMainButtonVisible) {\n      mainButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowMainButton(true);\n      }, 35);\n      setShouldHideMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isMainButtonVisible) {\n      setShouldShowMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideMainButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isMainButtonVisible]);\n\n  useEffect(() => {\n    if (secondaryButtonChangeTimeout.current) clearTimeout(secondaryButtonChangeTimeout.current);\n    if (secondaryButtonFastTimeout.current) clearTimeout(secondaryButtonFastTimeout.current);\n\n    if (isSecondaryButtonVisible) {\n      secondaryButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowSecondaryButton(true);\n      }, 35);\n      setShouldHideSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isSecondaryButtonVisible) {\n      setShouldShowSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideSecondaryButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isSecondaryButtonVisible]);\n\n  useEffect(() => {\n    if (!shouldShowSecondaryButton && !shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowSecondaryButton, shouldShowMainButton]);\n\n  const frameStyle = buildStyle(\n    `background-color: ${backgroundColor || 'var(--color-background)'}`,\n    isTransforming && 'pointer-events: none;',\n  );\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChanged(false);\n      changeWebAppModalState({ state: 'maximized' });\n      closeWebAppModal();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    exitIfFullscreenCallback();\n  });\n\n  const handleShowContextMenu = useLastCallback((e: React.MouseEvent) => {\n    onContextMenuButtonClick(e);\n  });\n\n  const backIconClass = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n  const backButtonCaption = shouldShowAppNameInFullscreen ? activeWebAppName\n    : oldLang(isBackButtonVisible ? 'Back' : 'Close');\n\n  const hasHeaderElement = headerButtonCaptionRef?.current;\n\n  useEffect(() => {\n    const width = headerButtonCaptionRef?.current?.clientWidth || 0;\n    setBackButtonTextWidth(width);\n  }, [backButtonCaption, hasHeaderElement]);\n\n  function getBackButtonActiveKey() {\n    if (shouldShowAppNameInFullscreen) return 0;\n    return isBackButtonVisible ? 1 : 2;\n  }\n\n  function renderFullscreenBackButtonCaption() {\n    return (\n      <span\n        className={styles.buttonCaptionContainer}\n        style={\n          `width: ${backButtonTextWidth}px;`\n        }\n      >\n        <Transition\n          activeKey={getBackButtonActiveKey()}\n          name=\"slideFade\"\n        >\n          <div\n            ref={headerButtonCaptionRef}\n            className={styles.backButtonCaption}\n          >\n            {backButtonCaption}\n          </div>\n        </Transition>\n      </span>\n    );\n  }\n\n  function renderFullscreenHeaderPanel() {\n    return (\n      <div className={styles.headerPanel}>\n        <div ref={headerButtonRef} className={styles.headerButton} onClick={handleBackClick}>\n          <div className={styles.backIconContainer}>\n            <div className={backIconClass} />\n          </div>\n          {renderFullscreenBackButtonCaption()}\n        </div>\n        <div className={styles.headerSplitButton}>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.left,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-label={lang('WebAppCollapse')}\n            onClick={handleCollapseClick}\n          >\n            <Icon\n              name=\"down\"\n              className={styles.icon}\n            />\n          </div>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.right,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-haspopup=\"menu\"\n            aria-label={lang('AriaMoreButton')}\n            onClick={handleShowContextMenu}\n          >\n            <Icon\n              name=\"more\"\n              className={buildClassName(\n                styles.icon,\n                styles.moreIcon,\n              )}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderDefaultPlaceholder() {\n    const className = buildClassName(styles.loadingPlaceholder, styles.defaultPlaceholderGrid, isLoaded && styles.hide);\n    return (\n      <div className={className}>\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n      </div>\n    );\n  }\n\n  function renderPlaceholder() {\n    if (!placeholderPath) {\n      return renderDefaultPlaceholder();\n    }\n    return (\n      <svg\n        className={buildClassName(styles.loadingPlaceholder, isLoaded && styles.hide)}\n        viewBox=\"0 0 512 512\"\n      >\n        <path className={styles.placeholderPath} d={placeholderPath} />\n      </svg>\n    );\n  }\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(\n        styles.root,\n        !isActive && styles.hidden,\n        isMultiTabSupported && styles.multiTab,\n      )}\n    >\n      {isFullscreen && getIsWebAppsFullscreenSupported() && renderFullscreenHeaderPanel()}\n      {!isMinimizedState && renderPlaceholder()}\n      <iframe\n        className={buildClassName(\n          styles.frame,\n          shouldDecreaseWebFrameSize && styles.withButton,\n          !isLoaded && styles.hide,\n        )}\n        style={frameStyle}\n        src={url}\n        title={`${bot?.firstName} Web App`}\n        sandbox={SANDBOX_ATTRIBUTES}\n        allow=\"camera; microphone; geolocation; clipboard-write;\"\n        allowFullScreen\n        ref={frameRef}\n      />\n      {!isMinimizedState && (\n        <div\n          style={`background-color: ${bottomBarColor};`}\n          className={buildClassName(\n            styles.buttonsContainer,\n            secondaryButtonCurrentPosition === 'left' && styles.leftToRight,\n            secondaryButtonCurrentPosition === 'right' && styles.rightToLeft,\n            secondaryButtonCurrentPosition === 'top' && styles.topToBottom,\n            secondaryButtonCurrentPosition === 'bottom' && styles.bottomToTop,\n            hideDirection === 'horizontal' && styles.hideHorizontal,\n            rowsCount === 1 && styles.oneRow,\n            rowsCount === 2 && styles.twoRows,\n          )}\n        >\n          <Button\n            className={buildClassName(\n              styles.secondaryButton,\n              shouldShowSecondaryButton && !shouldHideSecondaryButton && styles.visible,\n              shouldHideSecondaryButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${secondaryButtonCurrentColor}; color: ${secondaryButtonCurrentTextColor}`}\n            disabled={!secondaryButtonCurrentIsActive && !secondaryButton?.isProgressVisible}\n            nonInteractive={secondaryButton?.isProgressVisible}\n            onClick={handleSecondaryButtonClick}\n            size=\"smaller\"\n          >\n            {!secondaryButton?.isProgressVisible && secondaryButtonCurrentText}\n            {secondaryButton?.isProgressVisible\n              && <Spinner className={styles.mainButtonSpinner} color=\"blue\" />}\n          </Button>\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && !shouldHideMainButton && styles.visible,\n              shouldHideMainButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive && !mainButton?.isProgressVisible}\n            nonInteractive={mainButton?.isProgressVisible}\n            onClick={handleMainButtonClick}\n            size=\"smaller\"\n          >\n            {!mainButton?.isProgressVisible && mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </div>\n      )}\n      {popupParameters && (\n        <Modal\n          isOpen={Boolean(popupParameters)}\n          title={popupParameters.title || NBSP}\n          onClose={handleAppPopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !popupParameters.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {popupParameters.message}\n          <div className=\"dialog-buttons mt-2\">\n            {popupParameters.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n\n                onClick={() => handleAppPopupClose(button.id)}\n              >\n                {button.text || oldLang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n\n      <ConfirmDialog\n        isOpen={isRequestingPhone}\n        onClose={handleRejectPhone}\n        title={oldLang('ShareYouPhoneNumberTitle')}\n        text={oldLang('AreYouSureShareMyContactInfoBot')}\n        confirmHandler={handleAcceptPhone}\n        confirmLabel={oldLang('ContactShare')}\n      />\n      <ConfirmDialog\n        isOpen={isRequestingWriteAccess}\n        onClose={handleRejectWriteAccess}\n        title={oldLang('lng_bot_allow_write_title')}\n        text={oldLang('lng_bot_allow_write')}\n        confirmHandler={handleAcceptWriteAccess}\n        confirmLabel={oldLang('lng_bot_allow_write_confirm')}\n      />\n      <ConfirmDialog\n        isOpen={Boolean(requestedFileDownload)}\n        title={oldLang('BotDownloadFileTitle')}\n        textParts={lang('BotDownloadFileDescription', {\n          bot: bot?.firstName,\n          filename: requestedFileDownload?.fileName,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n        })}\n        confirmLabel={oldLang('BotDownloadFileButton')}\n        onClose={handleRejectFileDownload}\n        confirmHandler={handleDownloadFile}\n      />\n\n      <ConfirmDialog\n        isOpen={isCloseModalOpen}\n        onClose={handleHideCloseModal}\n        title={oldLang('lng_bot_close_warning_title')}\n        text={oldLang('lng_bot_close_warning')}\n        confirmHandler={handleConfirmCloseModal}\n        confirmIsDestructive\n        confirmLabel={oldLang('lng_bot_close_warning_sure')}\n      />\n      <ConfirmDialog\n        isOpen={isRemoveModalOpen}\n        onClose={handleHideRemoveModal}\n        title={oldLang('BotRemoveFromMenuTitle')}\n        textParts={renderText(oldLang('BotRemoveFromMenu', bot?.firstName), ['simple_markdown'])}\n        confirmHandler={handleRemoveAttachBot}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n    const modalState = modal?.modalState;\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const userFullInfo = activeBotId ? selectUserFullInfo(global, activeBotId) : undefined;\n    const botAppSettings = userFullInfo?.botInfo?.appSettings;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status: regularPaymentStatus } = selectTabState(global).payment;\n    const { status: starsPaymentStatus, inputInvoice: starsInputInvoice } = selectTabState(global).starsPayment;\n    const botAppPermissions = bot ? selectBotAppPermissions(global, bot.id) : undefined;\n\n    const paymentStatus = starsPaymentStatus || regularPaymentStatus;\n\n    return {\n      attachBot,\n      bot,\n      currentUser,\n      theme,\n      isPaymentModalOpen: isPaymentModalOpen || Boolean(starsInputInvoice),\n      paymentStatus,\n      modalState,\n      botAppPermissions,\n      botAppSettings,\n    };\n  },\n)(WebAppModalTabContent));\n","import { useRef, useState } from '../../../../lib/teact/teact';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function usePopupLimit(sequentialLimit: number, resetAfter: number) {\n  const [unlockPopupsAt, setUnlockPopupsAt] = useState(0);\n  const sequentialCalls = useRef(0);\n  const lastClosedDate = useRef(0);\n\n  const handlePopupOpened = useLastCallback(() => {\n    const now = Date.now();\n\n    if (now - lastClosedDate.current > resetAfter) {\n      sequentialCalls.current = 0;\n    }\n\n    sequentialCalls.current += 1;\n\n    if (sequentialCalls.current >= sequentialLimit) {\n      setUnlockPopupsAt(now + resetAfter);\n    }\n  });\n\n  const handlePopupClosed = useLastCallback(() => {\n    if (unlockPopupsAt < Date.now()) { // Prevent confused user from extending lock time\n      lastClosedDate.current = Date.now();\n    }\n  });\n\n  return {\n    unlockPopupsAt,\n    handlePopupOpened,\n    handlePopupClosed,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"XWfkIDLY\",\"multi-tab\":\"gBVR7Hec\",\"multiTab\":\"gBVR7Hec\",\"close-icon\":\"RuJ3d9N6\",\"closeIcon\":\"RuJ3d9N6\",\"minimized\":\"dJ1Ld_PX\",\"fullScreen\":\"ciSTWz16\",\"tabs\":\"X18WbDa5\",\"tool-bar\":\"qK4q0Sat\",\"toolBar\":\"qK4q0Sat\",\"tab-button-wrapper\":\"oHX2d8Or\",\"tabButtonWrapper\":\"oHX2d8Or\",\"tab-button\":\"O4NxErFX\",\"tabButton\":\"O4NxErFX\",\"tab-right-mask\":\"dgdyQDsZ\",\"tabRightMask\":\"dgdyQDsZ\",\"tab-close-button\":\"xGefqS93\",\"tabCloseButton\":\"xGefqS93\",\"tab-button-curve-path\":\"bOuMHiVw\",\"tabButtonCurvePath\":\"bOuMHiVw\",\"tab-button-left-curve\":\"f7EicoVH\",\"tabButtonLeftCurve\":\"f7EicoVH\",\"tab-button-right-curve\":\"s6pBIYMI\",\"tabButtonRightCurve\":\"s6pBIYMI\",\"more-apps-tab-icon\":\"Obu3ui67\",\"moreAppsTabIcon\":\"Obu3ui67\",\"avatar-container\":\"z39ojrWc\",\"avatarContainer\":\"z39ojrWc\",\"web-app-tab-more-menu\":\"txS0KiU0\",\"webAppTabMoreMenu\":\"txS0KiU0\",\"more-button\":\"kKPD09tc\",\"moreButton\":\"kKPD09tc\",\"tab-more-button\":\"gkji2_RB\",\"tabMoreButton\":\"gkji2_RB\",\"more-apps-button\":\"cEuW1_hJ\",\"moreAppsButton\":\"cEuW1_hJ\",\"window-state-button\":\"XpHR_yo0\",\"windowStateButton\":\"XpHR_yo0\",\"header-button\":\"GE5AkJOU\",\"headerButton\":\"GE5AkJOU\",\"fullscreenButton\":\"otlJULGy\",\"tab-close-icon\":\"DoeOewUR\",\"tabCloseIcon\":\"DoeOewUR\",\"state-icon\":\"YRMGpqUS\",\"stateIcon\":\"YRMGpqUS\",\"icon\":\"b13oE9uA\",\"tab-avatar\":\"tI6TE6HP\",\"tabAvatar\":\"tI6TE6HP\",\"state-back\":\"IWA50OWU\",\"stateBack\":\"IWA50OWU\",\"loading-spinner\":\"ZvO65ZK4\",\"loadingSpinner\":\"ZvO65ZK4\",\"hide\":\"_90e04Jo\",\"frame\":\"zA1w1IOq\",\"with-button\":\"XsPaFD9G\",\"withButton\":\"XsPaFD9G\",\"main-button\":\"Os96PEjQ\",\"mainButton\":\"Os96PEjQ\",\"visible\":\"C8aMayAw\",\"hidden\":\"GllU9an9\",\"main-button-spinner\":\"nYSFrf_X\",\"mainButtonSpinner\":\"nYSFrf_X\",\"web-app-popup\":\"cTVKrIjM\",\"webAppPopup\":\"cTVKrIjM\",\"without-title\":\"d0DG1SkF\",\"withoutTitle\":\"d0DG1SkF\"};","import { type MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef,\n  useSignal, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { Point, Size, ThemeKey } from '../../../types';\nimport type { WebApp, WebAppOutboundEvent } from '../../../types/webapp';\n\nimport { RESIZE_HANDLE_CLASS_NAME } from '../../../config';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectCurrentChat, selectTheme, selectUser,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { getColorLuma } from '../../../util/colors';\nimport { hexToRgb } from '../../../util/switchTheme';\nimport windowSize from '../../../util/windowSize';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDraggable from '../../../hooks/useDraggable';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport MinimizedWebAppModal from './MinimizedWebAppModal';\nimport MoreAppsTabContent from './MoreAppsTabContent';\nimport WebAppModalTabContent from './WebAppModalTabContent';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppModalTab = {\n  bot?: ApiUser;\n  webApp: WebApp;\n  isOpen: boolean;\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  cachedSize?: Size;\n  cachedPosition?: Point;\n};\n\nconst PROLONG_INTERVAL = 45000; // 45s\nconst LUMA_THRESHOLD = 128;\n\nconst MINIMIZED_STATE_SIZE = { width: 300, height: 40 };\nconst DEFAULT_MAXIMIZED_STATE_SIZE = { width: 420, height: 730 };\nconst MAXIMIZED_STATE_MINIMUM_SIZE = { width: 300, height: 300 };\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  cachedSize,\n  cachedPosition,\n}) => {\n  const {\n    closeActiveWebApp,\n    closeWebAppModal,\n    prolongWebView,\n    toggleAttachBot,\n    openChat,\n    changeWebAppModalState,\n    openWebAppTab,\n    updateWebApp,\n    openMoreAppsTab,\n    closeMoreAppsTab,\n    updateMiniAppCachedPosition,\n    updateMiniAppCachedSize,\n  } = getActions();\n\n  const [getMaximizedStateSize, setMaximizedStateSize] = useSignal(cachedSize || DEFAULT_MAXIMIZED_STATE_SIZE);\n\n  function getSize() {\n    if (modal?.modalState === 'fullScreen') return windowSize.get();\n    if (modal?.modalState === 'maximized') return getMaximizedStateSize();\n    return MINIMIZED_STATE_SIZE;\n  }\n  function getMinimumSize() {\n    if (modal?.modalState === 'maximized') return MAXIMIZED_STATE_MINIMUM_SIZE;\n    return undefined;\n  }\n\n  const {\n    openedWebApps, activeWebAppKey, openedOrderedKeys, sessionKeys, isMoreAppsTabActive,\n  } = modal || {};\n  const activeWebApp = activeWebAppKey ? openedWebApps?.[activeWebAppKey] : undefined;\n  const {\n    isBackButtonVisible, headerColor, backgroundColor, isSettingsButtonVisible,\n  } = activeWebApp || {};\n\n  const tabs = useMemo(() => {\n    return openedOrderedKeys?.map((key) => {\n      const webApp = openedWebApps![key];\n      return {\n        bot: getGlobal().users.byId[webApp.botId],\n        webApp,\n        isOpen: Boolean(activeWebApp && (key === getWebAppKey(activeWebApp))),\n      };\n    });\n  }, [openedOrderedKeys, openedWebApps, activeWebApp]);\n\n  const { isMobile } = useAppLayout();\n  const isOpen = modal?.isModalOpen || false;\n  const isMaximizedState = modal?.modalState === 'maximized';\n  const isMinimizedState = modal?.modalState === 'minimized';\n  const isFullScreen = modal?.modalState === 'fullScreen';\n\n  const supportMultiTabMode = !isMobile;\n  const ref = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n\n  const getTriggerElement = useLastCallback(() => ref.current!);\n\n  const getRootElement = useLastCallback(\n    () => ref.current!,\n  );\n\n  const getMenuElement = useLastCallback(\n    () => menuRef.current!,\n  );\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const [isDraggingEnabled, setIsDraggingEnabled] = useState(false);\n\n  const headerElement = headerRef.current;\n  const containerElement = ref.current;\n\n  useEffect(() => {\n    setIsDraggingEnabled(Boolean(supportMultiTabMode && headerElement && containerElement && !isFullScreen));\n  }, [supportMultiTabMode, headerElement, containerElement, isFullScreen]);\n\n  useEffect(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  }, [supportMultiTabMode]);\n\n  const {\n    isDragging,\n    isResizing,\n    style: draggableStyle,\n    size,\n    position,\n  } = useDraggable(\n    ref,\n    headerRef,\n    isDraggingEnabled,\n    getSize(),\n    isFullScreen,\n    getMinimumSize(),\n    cachedPosition,\n  );\n\n  const x = position?.x;\n  const y = position?.y;\n  useEffect(() => {\n    if (!isDragging && x !== undefined && y !== undefined) {\n      updateMiniAppCachedPosition({ position: { x, y } });\n    }\n  }, [isDragging, x, y]);\n\n  useEffect(() => {\n    if (!isDragging && size && isMaximizedState) {\n      updateMiniAppCachedSize({ size });\n    }\n  }, [isDragging, isMaximizedState, size]);\n\n  const currentSize = size || getSize();\n\n  const currentWidth = currentSize.width;\n  const currentHeight = currentSize.height;\n\n  useEffect(() => {\n    if (isResizing) {\n      setMaximizedStateSize({ width: currentWidth, height: currentHeight });\n    }\n  }, [currentHeight, currentWidth, isResizing, setMaximizedStateSize]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const {\n    queryId,\n  } = activeWebApp || {};\n\n  const openTabsCount = openedWebApps ? Object.values(openedWebApps).length : 0;\n\n  useInterval(() => {\n    if (!openedWebApps) return;\n    Object.keys(openedWebApps).forEach((key) => {\n      const webApp = openedWebApps[key];\n      if (webApp.queryId) {\n        prolongWebView({\n          botId: webApp.botId,\n          queryId: webApp.queryId,\n          peerId: webApp.peerId || chat!.id,\n          replyInfo: webApp.replyInfo,\n        });\n      }\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const sendEventCallback = useRef<((event: WebAppOutboundEvent) => void) | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const reloadFrameCallback = useRef<((url: string) => void) | null>(null);\n\n  const registerSendEventCallback = useLastCallback((callback: (event: WebAppOutboundEvent) => void) => {\n    sendEventCallback.current = callback;\n  });\n\n  const sendEvent = useLastCallback((event: WebAppOutboundEvent) => {\n    if (sendEventCallback.current) {\n      sendEventCallback.current(event);\n    }\n  });\n\n  const registerReloadFrameCallback = useLastCallback((callback: (url: string) => void) => {\n    reloadFrameCallback.current = callback;\n  });\n\n  const reloadFrame = useLastCallback((url: string) => {\n    if (reloadFrameCallback.current) {\n      reloadFrameCallback.current(url);\n    }\n  });\n\n  const handleSettingsButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  });\n\n  const handleRefreshClick = useLastCallback(() => {\n    reloadFrame(activeWebApp!.url);\n  });\n\n  const handleModalClose = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleCloseMoreAppsTab = useLastCallback(() => {\n    closeMoreAppsTab();\n  });\n\n  const handleTabClose = useLastCallback(() => {\n    if (openTabsCount > 1) {\n      closeActiveWebApp();\n    } else {\n      closeWebAppModal();\n    }\n  });\n\n  const handleToggleClick = useLastCallback(() => {\n    if (attachBot) {\n      const key = getWebAppKey(activeWebApp!);\n      updateWebApp({\n        key,\n        update: {\n          isRemoveModalOpen: true,\n        },\n      });\n      return;\n    }\n\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: true,\n    });\n  });\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleModalClose();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'minimized' });\n  });\n\n  const handleFullscreenClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'fullScreen' });\n  });\n\n  const handleOpenMoreAppsTabClick = useLastCallback(() => {\n    openMoreAppsTab();\n  });\n\n  const handleTabClick = useLastCallback((tab: WebAppModalTab) => {\n    openWebAppTab({ webApp: tab.webApp });\n  });\n\n  const openBotChat = useLastCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n  });\n\n  const MoreMenuButton:\n  FC<{ onTrigger: (e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        className={\n          buildClassName(\n            supportMultiTabMode ? styles.tabMoreButton : styles.moreButton,\n            isMenuOpen && 'active',\n          )\n        }\n        round\n        ripple={!isMobile}\n        size={supportMultiTabMode ? 'tiny' : 'smaller'}\n        color=\"translucent\"\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, supportMultiTabMode]);\n\n  function renderMenuItems() {\n    return (\n      <>\n        {chat && bot && chat.id !== bot.id && (\n          <MenuItem icon=\"bots\" onClick={openBotChat}>{oldLang('BotWebViewOpenBot')}</MenuItem>\n        )}\n        <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{oldLang('WebApp.ReloadPage')}</MenuItem>\n        {isSettingsButtonVisible && (\n          <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n            {oldLang('Settings')}\n          </MenuItem>\n        )}\n        {bot?.isAttachBot && (\n          <MenuItem\n            icon={attachBot ? 'stop' : 'install'}\n            onClick={handleToggleClick}\n            destructive={Boolean(attachBot)}\n          >\n            {oldLang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n          </MenuItem>\n        )}\n      </>\n    );\n  }\n\n  function renderMoreMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        ref={menuRef}\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        getTriggerElement={getTriggerElement}\n        getMenuElement={getMenuElement}\n        getRootElement={getRootElement}\n        autoClose\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n      >\n        {renderMenuItems()}\n      </Menu>\n    );\n  }\n\n  function renderDropdownMoreMenu() {\n    return (\n      <DropdownMenu\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        trigger={MoreMenuButton}\n        positionX={supportMultiTabMode ? 'left' : 'right'}\n      >\n        {renderMenuItems()}\n      </DropdownMenu>\n    );\n  }\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  const headerTextVar = useMemo(() => {\n    if (isMoreAppsTabActive) return 'color-text';\n    if (!headerColor) return undefined;\n    const { r, g, b } = hexToRgb(headerColor);\n    const luma = getColorLuma([r, g, b]);\n    const adaptedLuma = theme === 'dark' ? 255 - luma : luma;\n    return adaptedLuma > LUMA_THRESHOLD ? 'color-text' : 'color-background';\n  }, [headerColor, theme, isMoreAppsTabActive]);\n\n  function renderTabCurveBorder(className: string) {\n    return (\n      <svg\n        className={className}\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        fill=\"none\"\n      >\n        <path\n          className={styles.tabButtonCurvePath}\n          fill-rule=\"evenodd\"\n          clip-rule=\"evenodd\"\n          d=\"M16 16V0C16 12 12 16 0 16H16Z\"\n        />\n      </svg>\n    );\n  }\n\n  function renderActiveTab() {\n    const style = buildStyle(\n      headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n      headerColor && `--active-tab-background: ${headerColor}`,\n    );\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n        style={style}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.avatarContainer}>\n            <Avatar\n              size=\"mini\"\n              peer={bot}\n            />\n            <MoreMenuButton onTrigger={handleContextMenu} isOpen={isContextMenuOpen} />\n          </div>\n          {attachBot?.shortName ?? bot?.firstName}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleTabClose}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsTab() {\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.moreAppsTabIcon}>\n            <Icon className={styles.icon} name=\"add\" />\n          </div>\n          {lang('OpenApp')}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleCloseMoreAppsTab}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsButton() {\n    return (\n      <Button\n        className={buildClassName(\n          styles.moreAppsButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleOpenMoreAppsTabClick}\n      >\n        <Icon className={styles.icon} name=\"add\" />\n      </Button>\n    );\n  }\n\n  const containerRef = useRef<HTMLDivElement>();\n  useHorizontalScroll(containerRef, !isOpen || isMinimizedState || !(containerRef.current));\n\n  function renderTabs() {\n    return (\n      <div\n        className={styles.tabs}\n        ref={containerRef}\n      >\n        {tabs?.map((tab) => (\n          tab.isOpen ? (\n            renderActiveTab()\n          ) : (\n            <Avatar\n              className={styles.tabAvatar}\n              size=\"mini\"\n              peer={tab.bot}\n\n              onClick={() => handleTabClick(tab)}\n            />\n          )\n        ))}\n        {isMoreAppsTabActive && renderMoreAppsTab()}\n      </div>\n    );\n  }\n\n  function renderHeader() {\n    return (\n      <div\n        ref={headerRef}\n      >\n        {!supportMultiTabMode\n          ? renderSinglePageModeHeader()\n          : (isMaximizedState ? renderMultiTabHeader() : <MinimizedWebAppModal />)}\n      </div>\n    );\n  }\n\n  function renderMultiTabHeader() {\n    return (\n      <div\n        className={buildClassName(\n          'modal-header',\n          'multiTab',\n        )}\n        style={buildStyle(\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          className={styles.headerButton}\n          round\n          color=\"translucent\"\n          size=\"tiny\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        {renderTabs()}\n        {renderMoreMenu()}\n\n        <div className={styles.toolBar}>\n          {!isMoreAppsTabActive && renderMoreAppsButton()}\n\n          {!isMoreAppsTabActive && (\n            <Button\n              className={buildClassName(\n                styles.windowStateButton,\n                styles.fullscreenButton,\n                'no-drag',\n              )}\n              round\n              color=\"translucent\"\n              size=\"tiny\"\n              onClick={handleFullscreenClick}\n            >\n              <Icon className={styles.stateIcon} name=\"expand-modal\" />\n            </Button>\n          )}\n\n          <Button\n            className={buildClassName(\n              styles.windowStateButton,\n              'no-drag',\n            )}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            onClick={handleCollapseClick}\n          >\n            <Icon className={styles.stateIcon} name=\"collapse-modal\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSinglePageModeHeader() {\n    return (\n      <div\n        className=\"modal-header\"\n        style={buildStyle(\n          headerColor && `background-color: ${headerColor}`,\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{attachBot?.shortName ?? bot?.firstName}</div>\n        {!isMoreAppsTabActive && renderDropdownMoreMenu()}\n      </div>\n    );\n  }\n\n  function buildResizeHandleClass(handleClassName: string) {\n    return buildClassName(RESIZE_HANDLE_CLASS_NAME, handleClassName);\n  }\n\n  function renderResizeHandles() {\n    return (\n      <>\n        <div className={buildResizeHandleClass('top')} />\n        <div className={buildResizeHandleClass('bottom')} />\n        <div className={buildResizeHandleClass('left')} />\n        <div className={buildResizeHandleClass('right')} />\n        <div className={buildResizeHandleClass('topLeft')} />\n        <div className={buildResizeHandleClass('topRight')} />\n        <div className={buildResizeHandleClass('bottomLeft')} />\n        <div className={buildResizeHandleClass('bottomRight')} />\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      dialogRef={ref}\n      className={buildClassName(\n        styles.root,\n        supportMultiTabMode && styles.multiTab,\n        isMinimizedState && styles.minimized,\n        isFullScreen && styles.fullScreen,\n      )}\n      dialogStyle={supportMultiTabMode ? draggableStyle : undefined}\n      dialogContent={isDraggingEnabled && !isMinimizedState ? renderResizeHandles() : undefined}\n      isOpen={isOpen}\n      isLowStackPriority\n      onClose={handleModalClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor || 'var(--color-background)'}`}\n      noBackdrop\n      noBackdropClose\n    >\n      {isFullScreen && renderMoreMenu()}\n      {openedWebApps && sessionKeys?.map((key) => (\n        <WebAppModalTabContent\n          key={key}\n          modal={modal}\n          registerSendEventCallback={registerSendEventCallback}\n          registerReloadFrameCallback={registerReloadFrameCallback}\n          webApp={openedWebApps[key]}\n          isTransforming={isDragging || isResizing}\n          onContextMenuButtonClick={handleContextMenu}\n          isMultiTabSupported={supportMultiTabMode}\n          modalHeight={currentHeight}\n        />\n      ))}\n      {isMoreAppsTabActive && (<MoreAppsTabContent />)}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { miniAppsCachedPosition, miniAppsCachedSize } = selectSharedSettings(global);\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      cachedPosition: miniAppsCachedPosition,\n      cachedSize: miniAppsCachedSize,\n    };\n  },\n)(WebAppModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useOldLang();\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = type === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (type) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(bot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(bot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [bot, type, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', bot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { MINI_APP_TOS_URL } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['requestedAttachBotInstall'];\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  modal,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const bot = modal?.bot;\n\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n\n  const lang = useOldLang();\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed: Boolean(bot?.shouldRequestWriteAccess),\n    });\n  }, [confirmAttachBotInstall, bot]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsTosAccepted(false);\n    }\n  }, [bot]);\n\n  const tosLabel = useMemo(() => {\n    const base = lang('lng_mini_apps_disclaimer_button');\n    const split = base.split('{link}');\n    const linkText = lang('lng_mini_apps_disclaimer_link');\n    return [\n      split[0],\n      <a href={MINI_APP_TOS_URL} target=\"_blank\" rel=\"noopener noreferrer\">{linkText}</a>,\n      split[1],\n    ];\n  }, [lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={lang('lng_mini_apps_disclaimer_title')}\n      confirmHandler={handleConfirm}\n      isConfirmDisabled={!isTosAccepted}\n    >\n      {renderText(lang('lng_mini_apps_disclaimer_text', bot?.shortName), ['simple_markdown'])}\n      <Checkbox\n        className=\"dialog-checkbox\"\n        checked={isTosAccepted}\n        label={tosLabel}\n        onCheck={setIsTosAccepted}\n      />\n      {renderText(lang('WebBot.Account.Desclaimer.Desc', bot?.shortName), ['simple_markdown'])}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wn7D2H1e\",\"text\":\"IQ1U2TrZ\",\"header\":\"F6qqXRvD\",\"description\":\"ILLaH6qQ\",\"icon\":\"DzGwbpu5\",\"font-icon\":\"Pa9h5mh3\",\"fontIcon\":\"Pa9h5mh3\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { IconName } from '../../../types/icons';\n\nimport { hexToRgb, lerpRgb } from '../../../util/switchTheme';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps<T> = {\n  title: string;\n  text: string;\n  index: number;\n  count: number;\n  section: T;\n  onClick?: (section: T) => void;\n} & ({\n  icon: IconName;\n  isFontIcon: true;\n} | {\n  icon: string;\n  isFontIcon?: false;\n});\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n].map(hexToRgb);\n\nconst PremiumFeatureItem = <T,>({\n  icon,\n  isFontIcon,\n  title,\n  text,\n  index,\n  count,\n  section,\n  onClick,\n}: OwnProps<T>) => {\n  const newIndex = (index / count) * COLORS.length;\n  const colorA = COLORS[Math.floor(newIndex)];\n  const colorB = COLORS[Math.ceil(newIndex)] ?? colorA;\n  const { r, g, b } = lerpRgb(colorA, colorB, 0.5);\n\n  const handleClick = useLastCallback(() => {\n    onClick?.(section);\n  });\n\n  return (\n    <ListItem buttonClassName={styles.root} onClick={handleClick} inactive={!onClick}>\n      {isFontIcon ? (\n        <Icon name={icon} className={styles.fontIcon} style={`--item-color: rgb(${r},${g},${b})`} />\n      ) : (\n        <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: rgb(${r},${g},${b})`} draggable={false} />\n      )}\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HmY1pYD9\",\"arrow\":\"cqNhvdib\",\"right\":\"hIgQCprt\",\"arrow-hidden\":\"wDzTWXzO\",\"arrowHidden\":\"wDzTWXzO\",\"dot\":\"Ac0pMX9w\",\"medium\":\"yDo_8Y7X\",\"small\":\"bhODNwmU\",\"invisible\":\"O9pyrgj0\",\"active\":\"NYDxCNdz\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport Button from '../ui/Button';\nimport Icon from './icons/Icon';\n\nimport styles from './SliderDots.module.scss';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <Icon name=\"previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst || isInvisible) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <Icon name=\"next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"u84X0r2z\",\"floating-badge\":\"hPi4fICJ\",\"floatingBadge\":\"hPi4fICJ\",\"floating-badge-triangle\":\"jufjjcX9\",\"floatingBadgeTriangle\":\"jufjjcX9\",\"floating-badge-icon\":\"XkiOXdMP\",\"floatingBadgeIcon\":\"XkiOXdMP\",\"text\":\"YaiSoFKE\",\"floating-badge-value\":\"iC3LJrvy\",\"floatingBadgeValue\":\"iC3LJrvy\",\"left-text\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"leftText\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"right-text\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"rightText\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"right-value\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"rightValue\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"left-value\":\"RJosx238 YaiSoFKE\",\"leftValue\":\"RJosx238 YaiSoFKE\",\"line\":\"Hy5kWx0p\",\"left\":\"scGr4JS9\",\"right\":\"nPaUalQf\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { IconName } from '../../../../types/icons';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\ntype OwnProps = {\n  floatingBadgeIcon?: IconName;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <Icon name={floatingBadgeIcon} className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle}>\n            <svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\">\n              <path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\" />\n            </svg>\n          </div>\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXp65Wgy\",\"title\":\"W1xG3pjS\",\"description\":\"b_CBXIkT\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"O1fqNCy0\",\"sticker\":\"ogaoEAcn\",\"effect-sticker\":\"Stdz4UIW ogaoEAcn\",\"effectSticker\":\"Stdz4UIW ogaoEAcn\"};","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: (index: number) => void;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useLastCallback(() => {\n    onClick(realIndex);\n  });\n\n  const handleEnded = useLastCallback(() => {\n    inanimate();\n    onEnded(realIndex);\n  });\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\n\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useLastCallback((i: number) => {\n    setOffset(-i);\n  });\n\n  const handleEnded = useLastCallback((i: number) => {\n    const displayIndex = cycleRestrict(renderedStickers.length, i + offset);\n    if (displayIndex !== 0) return;\n\n    setTimeout(() => {\n      setOffset((current) => {\n        return cycleRestrict(renderedStickers.length, current + 1);\n      });\n    }, ENDED_DELAY);\n  });\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {Boolean(size) && renderedStickers?.map((sticker, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={sticker}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mFElmm7a\",\"header\":\"Jjbochk6\",\"circle\":\"ChteQ9C3\",\"title\":\"d2ayix6L\",\"features\":\"ensyCeMe\",\"mobile\":\"DFbZJafh\",\"scrolled\":\"iN1T0a2Y\"};","import { memo, useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\nimport type { IconName } from '../../../../types/icons';\n\nimport { selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useOldLang from '../../../../hooks/useOldLang';\nimport useScrolledState from '../../../../hooks/useScrolledState';\nimport useDevicePixelRatio from '../../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar, { AVATAR_SIZES } from '../../../common/Avatar';\nimport { drawGradientCircle } from '../../../common/AvatarStoryCircle';\nimport PremiumFeatureItem from '../PremiumFeatureItem';\n\nimport styles from './PremiumFeaturePreviewStories.module.scss';\n\ntype StateProps = {\n  currentUser: ApiUser;\n};\n\nconst STORY_FEATURE_TITLES = {\n  stories_order: 'PremiumStoriesPriority',\n  stories_stealth: 'PremiumStoriesStealth',\n  stories_views: 'PremiumStoriesViews',\n  stories_timer: 'lng_premium_stories_subtitle_expiration',\n  stories_save: 'PremiumStoriesSaveToGallery',\n  stories_caption: 'lng_premium_stories_subtitle_caption',\n  stories_link: 'lng_premium_stories_subtitle_links',\n};\n\nconst STORY_FEATURE_DESCRIPTIONS = {\n  stories_order: 'PremiumStoriesPriorityDescription',\n  stories_stealth: 'PremiumStoriesStealthDescription',\n  stories_views: 'PremiumStoriesViewsDescription',\n  stories_timer: 'PremiumStoriesExpirationDescription',\n  stories_save: 'PremiumStoriesSaveToGalleryDescription',\n  stories_caption: 'PremiumStoriesCaptionDescription',\n  stories_link: 'PremiumStoriesFormattingDescription',\n};\n\nconst STORY_FEATURE_ICONS: Record<string, IconName> = {\n  stories_order: 'story-priority',\n  stories_stealth: 'eye-crossed-outline',\n  stories_views: 'eye-outline',\n  stories_timer: 'timer',\n  stories_save: 'arrow-down-circle',\n  stories_caption: 'story-caption',\n  stories_link: 'link-badge',\n};\n\nconst STORY_FEATURE_ORDER = Object.keys(STORY_FEATURE_TITLES) as (keyof typeof STORY_FEATURE_TITLES)[];\n\nconst CIRCLE_SIZE = AVATAR_SIZES.giant + 0.25 * REM;\nconst CIRCLE_SEGMENTS = 8;\nconst CIRCLE_READ_SEGMENTS = 0;\n\nconst PremiumFeaturePreviewVideo = ({\n  currentUser,\n}: StateProps) => {\n  const circleRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const dpr = useDevicePixelRatio();\n\n  useLayoutEffect(() => {\n    if (!circleRef.current) {\n      return;\n    }\n\n    drawGradientCircle({\n      canvas: circleRef.current,\n      size: CIRCLE_SIZE * dpr,\n      segmentsCount: CIRCLE_SEGMENTS,\n      color: 'purple',\n      readSegmentsCount: CIRCLE_READ_SEGMENTS,\n      readSegmentColor: 'transparent',\n      dpr,\n    });\n  }, [dpr]);\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const maxSize = CIRCLE_SIZE;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.header}>\n        <Avatar forPremiumPromo peer={currentUser} size=\"giant\" />\n        <canvas className={styles.circle} ref={circleRef} style={`max-width: ${maxSize}px; max-height: ${maxSize}px`} />\n      </div>\n      <div className={styles.title}>{lang('UpgradedStories')}</div>\n      <div\n        className={buildClassName(styles.features, !isAtBeginning && styles.scrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {STORY_FEATURE_ORDER.map((section, index) => {\n          return (\n            <PremiumFeatureItem\n              key={section}\n              title={lang(STORY_FEATURE_TITLES[section])}\n              text={lang(STORY_FEATURE_DESCRIPTIONS[section])}\n              icon={STORY_FEATURE_ICONS[section]}\n              isFontIcon\n              index={index}\n              count={STORY_FEATURE_ORDER.length}\n              section={section}\n            />\n          );\n        })}\n        <div className={styles.mobile}>{lang('lng_premium_stories_about_mobile')}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      currentUser: selectUser(global, global.currentUserId!)!,\n    };\n  },\n)(PremiumFeaturePreviewVideo));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ot0dA1yZ\",\"wrapper\":\"yxSAGAc1\",\"down\":\"Jcy6cDoc\",\"frame\":\"Vn81yTTJ\",\"video\":\"rrVJClLL\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} draggable={false} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oyUTEj8I\",\"button\":\"EPfM7AgT\",\"button-content\":\"GysZk2mF\",\"buttonContent\":\"GysZk2mF\",\"back-button\":\"njYoMrKM\",\"backButton\":\"njYoMrKM\",\"white-back-button\":\"SB4pczOo\",\"whiteBackButton\":\"SB4pczOo\",\"content\":\"sJubG84j\",\"frame\":\"a7IoUtQG\",\"slide\":\"gubS9KP1\",\"limits\":\"U7ePgVBR\",\"stories\":\"J1M6fEdo\",\"limits-content\":\"n_rowVPI\",\"limitsContent\":\"n_rowVPI\",\"header\":\"mz2Hmd83\",\"no-header-border\":\"AgmNOqi7\",\"noHeaderBorder\":\"AgmNOqi7\",\"preview\":\"dIVBSdWi\",\"title\":\"iZLwcL8v\",\"description\":\"A7YHY8qF\",\"footer\":\"yN2611rA\",\"no-footer-border\":\"rCHMABcD\",\"noFooterBorder\":\"rCHMABcD\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { toggleExtraClass } from '../../../lib/teact/teact-dom';\n\nimport type {\n  ApiLimitTypeForPromo,\n  ApiPremiumPromo,\n  ApiPremiumSection,\n  ApiPremiumSubscriptionOption,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { LangPair } from '../../../types/language';\n\nimport { PREMIUM_BOTTOM_VIDEOS, PREMIUM_FEATURE_SECTIONS, PREMIUM_LIMITS_ORDER } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport SliderDots from '../../common/SliderDots';\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\nimport PremiumFeaturePreviewStories from './previews/PremiumFeaturePreviewStories';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n  translations: 'PremiumPreviewTranslations',\n  stories: 'PremiumPreviewStories',\n  saved_tags: 'PremiumPreviewTags2',\n  last_seen: 'PremiumPreviewLastSeen',\n  message_privacy: 'PremiumPreviewMessagePrivacy',\n  effects: 'Premium.MessageEffects',\n  todo: 'PremiumPreviewTodo',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n  translations: 'PremiumPreviewTranslationsDescription',\n  stories: 'PremiumPreviewStoriesDescription',\n  saved_tags: 'PremiumPreviewTagsDescription2',\n  last_seen: 'PremiumPreviewLastSeenDescription',\n  message_privacy: 'PremiumPreviewMessagePrivacyDescription',\n  effects: 'Premium.MessageEffectsInfo',\n  todo: 'PremiumPreviewTodoDescription',\n};\n\nconst LIMITS_TITLES: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n  recommendedChannels: 'SimilarChannelsLimitTitle',\n  moreAccounts: 'ConnectedAccountsLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n  recommendedChannels: 'SimilarChannelsLimitSubtitle',\n  moreAccounts: 'ConnectedAccountsLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  initialSection: ApiPremiumSection;\n  promo: ApiPremiumPromo;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumPromoOrder?: ApiPremiumSection[];\n  subscriptionOption?: ApiPremiumSubscriptionOption;\n  onBack: VoidFunction;\n  onClickSubscribe: (startParam?: string) => void;\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  isPremium,\n  limits,\n  premiumPromoOrder,\n  subscriptionOption,\n  onBack,\n  onClickSubscribe,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const scrollContainerRef = useRef<HTMLDivElement>();\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePreviousDeprecated(initialSection);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  const subscriptionButtonText = useMemo(() => {\n    if (!subscriptionOption) return undefined;\n\n    const { amount, months, currency } = subscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n\n    return isPremium\n      ? lang('OK')\n      : lang('SubscribeToPremium', { price: formatCurrency(lang, perMonthPrice, currency) }, { withNodes: true });\n  }, [isPremium, lang, subscriptionOption]);\n\n  const handleClick = useLastCallback(() => {\n    onClickSubscribe(initialSection);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const target = e.currentTarget;\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = target;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex}`);\n\n    requestMutation(() => {\n      target.style.setProperty('--scroll-progress', progress.toString());\n      target.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n\n      if (prevElement) toggleExtraClass(prevElement, 'reverse', false);\n      if (reverseElement) toggleExtraClass(reverseElement, 'reverse', true);\n    });\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = filteredSections.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, filteredSections, initialSection, prevInitialSection]);\n\n  const handleSelectSlide = useLastCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  });\n\n  const currentSection = filteredSections[currentSlideIndex];\n  const hasHeaderBackdrop = currentSection !== 'double_limits' && currentSection !== 'stories';\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, hasHeaderBackdrop && styles.whiteBackButton)}\n        color={hasHeaderBackdrop ? 'translucent-white' : 'translucent'}\n        onClick={onBack}\n        ariaLabel={oldLang('Back')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {filteredSections.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {PREMIUM_LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={oldLang(LIMITS_TITLES[limit])}\n                        description={oldLang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (PREMIUM_LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(oldLang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'stories') {\n            return (\n              <div className={buildClassName(styles.slide, styles.stories)}>\n                <PremiumFeaturePreviewStories />\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          const shouldUseNewLang = promo.videoSections[i] === 'todo';\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {shouldUseNewLang\n                  ? lang(\n                    PREMIUM_FEATURE_TITLES[promo.videoSections[i]] as keyof LangPair,\n                    undefined,\n                    { withNodes: true, renderTextFilters: ['br'] },\n                  )\n                  : oldLang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(shouldUseNewLang\n                  ? lang(\n                    PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]] as keyof LangPair,\n                    undefined,\n                    { withNodes: true, renderTextFilters: ['br'] },\n                  )\n                  : oldLang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]]), ['br'],\n                )}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        {Boolean(subscriptionButtonText) && (\n          <Button\n            className={buildClassName(styles.button)}\n            isShiny={!isPremium}\n            withPremiumGradient={!isPremium}\n            onClick={isPremium ? onBack : handleClick}\n          >\n            {subscriptionButtonText}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiPremiumGiftCodeOption, ApiPremiumSubscriptionOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport styles from './PremiumSubscriptionOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumSubscriptionOption | ApiPremiumGiftCodeOption;\n  isGiveaway?: boolean;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  className?: string;\n  onChange: (month: number) => void;\n};\n\nconst PremiumSubscriptionOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount,\n  onChange, className, isGiveaway,\n}) => {\n  const oldLang = useOldLang();\n\n  const {\n    months, amount, currency,\n  } = option;\n  const users = 'users' in option ? option.users : undefined;\n  const perMonth = Math.floor(amount / months);\n  const isUserCountPlural = users ? users > 1 : undefined;\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label\n      className={buildClassName(\n        isGiveaway ? styles.giveawayWrapper : styles.wrapper,\n        (checked && !isGiveaway) && styles.active,\n        className,\n      )}\n      dir={oldLang.isRtl ? 'rtl' : undefined}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"subscription_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>\n          {Boolean(discount) && (\n            <span\n              className={buildClassName(styles.giveawayDiscount, styles.discount)}\n              title={oldLang('GiftDiscount')}\n            >\n              {' '}\n              &minus;\n              {discount}\n              %\n            </span>\n          )}\n          {oldLang('Months', months)}\n        </div>\n        <div className={styles.perMonth}>\n          {(isGiveaway || isUserCountPlural) ? `${formatCurrencyAsString(amount, currency, oldLang.code)} x ${users!}`\n            : oldLang('PricePerMonth', formatCurrencyAsString(perMonth, currency, oldLang.code))}\n        </div>\n        <div className={styles.amount}>\n          {formatCurrencyAsString(amount, currency, oldLang.code)}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(PremiumSubscriptionOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"qZA6S2kc\",\"giveawayWrapper\":\"PkseWxFK\",\"active\":\"EJOQwnRj\",\"input\":\"WOEkhx6R\",\"content\":\"BHUCScsU\",\"month\":\"DfYCMUkL\",\"perMonth\":\"poxOXJ2o\",\"amount\":\"IGMrERf_\",\"discount\":\"uqDlP3Zt\",\"giveawayDiscount\":\"ublijP0j\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sfbpMFHM\",\"transition\":\"ELNkgPve\",\"button\":\"c1tMxuFH\",\"main\":\"ZpOIPrhp\",\"status-emoji\":\"mQwvY9LA\",\"statusEmoji\":\"mQwvY9LA\",\"header-text\":\"y71v6ECL\",\"headerText\":\"y71v6ECL\",\"description\":\"cUcKXV3j\",\"list\":\"c3Ee2oSo\",\"no-button\":\"yWEHoJOL\",\"noButton\":\"yWEHoJOL\",\"header\":\"Bc_F0RKb\",\"hidden-header\":\"ltXo0Xi7\",\"hiddenHeader\":\"ltXo0Xi7\",\"close-button\":\"XyN3eWog\",\"closeButton\":\"XyN3eWog\",\"premium-header-text\":\"xysPdANX\",\"premiumHeaderText\":\"xysPdANX\",\"footer-text\":\"yKm9hKQP\",\"footerText\":\"yKm9hKQP\",\"primary-footer-text\":\"l1WlNpmu\",\"primaryFooterText\":\"l1WlNpmu\",\"footer\":\"nCnlO9UZ\",\"stickerSetText\":\"xw_GbDj7\",\"stickerSetLink\":\"FLzl2ng5\",\"stickerSetLinkIcon\":\"Y0jTcadE\",\"subscriptionOptions\":\"xZC_Oajr\",\"subscriptionOption\":\"gygsbDbE\"};","import type { FC } from '@teact';\nimport { memo, useEffect, useMemo, useRef, useState } from '@teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumPromo,\n  ApiPremiumSection,\n  ApiPremiumSubscriptionOption,\n  ApiSticker,\n  ApiStickerSet,\n  ApiUser,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { LangPair } from '../../../types/language';\n\nimport { PREMIUM_FEATURE_SECTIONS, TME_LINK_PREFIX } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState, selectUser } from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Icon from '../../common/icons/Icon';\nimport ParticlesHeader from '../../modals/common/ParticlesHeader.tsx';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport PremiumFeatureModal, { PREMIUM_FEATURE_DESCRIPTIONS, PREMIUM_FEATURE_TITLES } from './PremiumFeatureModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './PremiumMainModal.module.scss';\n\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumEffects from '../../../assets/premium/PremiumEffects.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumLastSeen from '../../../assets/premium/PremiumLastSeen.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumMessagePrivacy from '../../../assets/premium/PremiumMessagePrivacy.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumTags from '../../../assets/premium/PremiumTags.svg';\nimport PremiumTranslate from '../../../assets/premium/PremiumTranslate.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\n\nconst LIMIT_ACCOUNTS = 4;\nconst STATUS_EMOJI_SIZE = 8 * REM;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<ApiPremiumSection, string> = {\n  stories: PremiumStatus,\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n  translations: PremiumTranslate,\n  saved_tags: PremiumTags,\n  last_seen: PremiumLastSeen,\n  message_privacy: PremiumMessagePrivacy,\n  effects: PremiumEffects,\n  todo: PremiumBadge,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  fromUser?: ApiUser;\n  fromUserStatusEmoji?: ApiSticker;\n  fromUserStatusSet?: ApiStickerSet;\n  toUser?: ApiUser;\n  initialSection?: ApiPremiumSection;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: ApiPremiumSection[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  fromUserStatusEmoji,\n  fromUserStatusSet,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink, loadStickers, openStickerSet,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<ApiPremiumSection | undefined>(initialSection);\n  const [selectedSubscriptionOption, setSubscriptionOption] = useState<ApiPremiumSubscriptionOption>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setCurrentSection(undefined);\n    } else if (initialSection) {\n      setCurrentSection(initialSection);\n    }\n  }, [isOpen, initialSection]);\n\n  const handleOpenSection = useLastCallback((section: ApiPremiumSection) => {\n    setCurrentSection(section);\n  });\n\n  const handleResetSection = useLastCallback(() => {\n    setCurrentSection(undefined);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClickWithStartParam = useLastCallback((startParam?: string) => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        type: 'slug',\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (selectedSubscriptionOption) {\n      handleClickWithStartParam(String(selectedSubscriptionOption.months));\n    } else {\n      handleClickWithStartParam();\n    }\n  });\n\n  const handleChangeSubscriptionOption = useLastCallback((months: number) => {\n    const foundOption = promo?.options.find((option) => option.months === months);\n    setSubscriptionOption(foundOption);\n  });\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  useEffect(() => {\n    if (!fromUserStatusEmoji || fromUserStatusSet) return;\n    loadStickers({\n      stickerSetInfo: fromUserStatusEmoji.stickerSetInfo,\n    });\n  }, [loadStickers, fromUserStatusEmoji, fromUserStatusSet]);\n\n  useEffect(() => {\n    const [defaultOption] = promo?.options ?? [];\n    setSubscriptionOption(defaultOption);\n  }, [promo]);\n\n  const handleOpenStatusSet = useLastCallback(() => {\n    if (!fromUserStatusSet) return;\n\n    openStickerSet({\n      stickerSetInfo: fromUserStatusSet,\n    });\n  });\n\n  const fullMonthlyAmount = useMemo(() => {\n    const monthOption = promo?.options.find((option) => option.months === 1);\n    if (!monthOption) {\n      return undefined;\n    }\n    return Number(monthOption.amount);\n  }, [promo]);\n\n  const subscribeButtonText = useMemo(() => {\n    if (!selectedSubscriptionOption) {\n      return undefined;\n    }\n    const { amount, months, currency } = selectedSubscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n    return formatCurrency(\n      lang,\n      perMonthPrice,\n      currency,\n    );\n  }, [selectedSubscriptionOption, lang]);\n\n  if (!promo || (fromUserStatusEmoji && !fromUserStatusSet)) return undefined;\n\n  function getHeaderText() {\n    if (isGift) {\n      return renderText(\n        fromUser?.id === currentUserId\n          ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n          : oldLang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]),\n        ['simple_markdown', 'emoji'],\n      );\n    }\n\n    if (fromUserStatusSet && fromUser) {\n      const template = oldLang('lng_premium_emoji_status_title').replace('{user}', getUserFullName(fromUser)!);\n      const [first, second] = template.split('{link}');\n\n      const emoji = fromUserStatusSet.thumbCustomEmojiId ? (\n        <CustomEmoji className={styles.stickerSetLinkIcon} documentId={fromUserStatusSet.thumbCustomEmojiId} />\n      ) : undefined;\n      const link = (\n        <span className={styles.stickerSetLink} onClick={handleOpenStatusSet}>\n          {emoji}\n          {renderText(fromUserStatusSet.title)}\n        </span>\n      );\n      return [renderText(first), link, renderText(second)];\n    }\n\n    return renderText(\n      fromUser\n        ? oldLang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n        : oldLang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium'),\n      ['simple_markdown', 'emoji'],\n    );\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : oldLang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    if (fromUserStatusSet) {\n      return oldLang('TelegramPremiumUserStatusDialogSubtitle');\n    }\n\n    return fromUser\n      ? oldLang('TelegramPremiumUserDialogSubtitle')\n      : oldLang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={oldLang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.subscriptionOptions}>\n        {promo?.options\n          .map((option) => (\n            <PremiumSubscriptionOption\n              className={styles.subscriptionOption}\n              key={option.amount}\n              option={option}\n              onChange={handleChangeSubscriptionOption}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={selectedSubscriptionOption?.months === option.months}\n            />\n          ))}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={closePremiumModal}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              onClick={() => closePremiumModal()}\n              ariaLabel={oldLang('Close')}\n            >\n              <Icon name=\"close\" />\n            </Button>\n            {!fromUserStatusEmoji ? (\n              <ParticlesHeader\n                model=\"swaying-star\"\n                color=\"purple\"\n                title={getHeaderText()}\n                description={renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n              />\n            ) : (\n              <>\n                <CustomEmoji\n                  className={styles.statusEmoji}\n                  onClick={handleOpenStatusSet}\n                  documentId={fromUserStatusEmoji.id}\n                  isBig\n                  size={STATUS_EMOJI_SIZE}\n                />\n                <h2 className={buildClassName(styles.headerText, fromUserStatusSet && styles.stickerSetText)}>\n                  {getHeaderText()}\n                </h2>\n                <div className={styles.description}>\n                  {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n                </div>\n              </>\n            )}\n            {!isPremium && !isGift && renderSubscriptionOptions()}\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {oldLang('TelegramPremium')}\n              </h2>\n            </div>\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                const shouldUseNewLang = section === 'todo';\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={shouldUseNewLang\n                      ? lang(PREMIUM_FEATURE_TITLES[section] as keyof LangPair)\n                      : oldLang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : shouldUseNewLang\n                        ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section] as keyof LangPair)\n                        : oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    count={filteredSections.length}\n                    section={section}\n                    onClick={handleOpenSection}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={oldLang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && selectedSubscriptionOption && (\n              <div className={styles.footer}>\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {oldLang('SubscribeToPremium', subscribeButtonText)}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleResetSection}\n            promo={promo}\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n            premiumPromoOrder={premiumPromoOrder}\n            subscriptionOption={selectedSubscriptionOption}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n\n  const fromUser = premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined;\n  const fromUserStatusEmoji = fromUser?.emojiStatus ? global.customEmojis.byId[fromUser.emojiStatus.documentId]\n    : undefined;\n  const fromUserStatusSet = fromUserStatusEmoji ? selectStickerSet(global, fromUserStatusEmoji.stickerSetInfo)\n    : undefined;\n\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser,\n    fromUserStatusEmoji,\n    fromUserStatusSet,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","import type { TeactNode } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Radio from '../../ui/Radio';\nimport Icon from '../icons/Icon';\nimport PickerItem from './PickerItem';\n\nimport styles from './PickerStyles.module.scss';\n\nexport type ItemPickerOption = {\n  label: TeactNode;\n  subLabel?: string;\n  disabled?: boolean;\n  isLoading?: boolean;\n  value: string;\n};\n\ntype SingleModeProps = {\n  allowMultiple?: false;\n  itemInputType?: 'radio';\n  selectedValue?: string;\n  selectedValues?: never; // Help TS to throw an error if this is passed\n  onSelectedValueChange?: (value: string) => void;\n};\n\ntype MultipleModeProps = {\n  allowMultiple: true;\n  itemInputType: 'checkbox';\n  selectedValue?: never;\n  selectedValues: string[];\n  lockedSelectedValues?: string[];\n  lockedUnselectedValues?: string[];\n  onSelectedValuesChange?: (values: string[]) => void;\n};\n\ntype OwnProps = {\n  className?: string;\n  isSearchable?: boolean;\n  searchInputId?: string;\n  items: ItemPickerOption[];\n  itemClassName?: string;\n  filterValue?: string;\n  filterPlaceholder?: string;\n  notFoundText?: string;\n  isLoading?: boolean;\n  noScrollRestore?: boolean;\n  isViewOnly?: boolean;\n  withDefaultPadding?: boolean;\n  forceRenderAllItems?: boolean;\n  onFilterChange?: (value: string) => void;\n  onDisabledClick?: (value: string, isSelected: boolean) => void;\n  onLoadMore?: () => void;\n} & (SingleModeProps | MultipleModeProps);\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst ITEM_CLASS_NAME = 'ItemPickerItem';\n\nconst ItemPicker = ({\n  className,\n  isSearchable,\n  searchInputId,\n  items,\n  filterValue,\n  notFoundText,\n  isLoading,\n  noScrollRestore,\n  filterPlaceholder,\n  isViewOnly,\n  itemInputType,\n  itemClassName,\n  withDefaultPadding,\n  forceRenderAllItems,\n  onFilterChange,\n  onDisabledClick,\n  onLoadMore,\n  ...optionalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n\n  const allowMultiple = optionalProps.allowMultiple;\n  const lockedSelectedValues = allowMultiple ? optionalProps.lockedSelectedValues : undefined;\n  const lockedUnselectedValues = allowMultiple ? optionalProps.lockedUnselectedValues : undefined;\n\n  useEffect(() => {\n    if (!isSearchable) return undefined;\n    const timeoutId = window.setTimeout(() => {\n      requestMeasure(() => {\n        inputRef.current?.focus();\n      });\n    }, FOCUS_DELAY_MS);\n\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [isSearchable]);\n\n  const selectedValues = useMemo(() => {\n    if (allowMultiple) {\n      return optionalProps.selectedValues;\n    }\n\n    return optionalProps.selectedValue ? [optionalProps.selectedValue] : MEMO_EMPTY_ARRAY;\n  }, [allowMultiple, optionalProps.selectedValue, optionalProps.selectedValues]);\n\n  const lockedSelectedValuesSet = useMemo(() => new Set(lockedSelectedValues), [lockedSelectedValues]);\n  const lockedUnselectedValuesSet = useMemo(() => new Set(lockedUnselectedValues), [lockedUnselectedValues]);\n\n  const sortedItemValuesList = useMemo(() => {\n    if (filterValue) {\n      return items.map((item) => item.value);\n    }\n\n    const lockedSelectedBucket: ItemPickerOption[] = [];\n    const unlockedBucket: ItemPickerOption[] = [];\n    const lockedUnselectableBucket: ItemPickerOption[] = [];\n\n    items.forEach((item) => {\n      if (lockedSelectedValuesSet.has(item.value)) {\n        lockedSelectedBucket.push(item);\n      } else if (lockedUnselectedValuesSet.has(item.value)) {\n        lockedUnselectableBucket.push(item);\n      } else {\n        unlockedBucket.push(item);\n      }\n    });\n\n    return lockedSelectedBucket.concat(unlockedBucket, lockedUnselectableBucket).map((item) => item.value);\n  }, [filterValue, items, lockedSelectedValuesSet, lockedUnselectedValuesSet]);\n\n  const handleItemClick = useLastCallback((value: string) => {\n    if (allowMultiple) {\n      const newSelectedValues = selectedValues.slice();\n      const index = newSelectedValues.indexOf(value);\n      if (index >= 0) {\n        newSelectedValues.splice(index, 1);\n      } else {\n        newSelectedValues.push(value);\n      }\n\n      optionalProps.onSelectedValuesChange?.(newSelectedValues);\n      return;\n    }\n\n    optionalProps.onSelectedValueChange?.(value);\n  });\n\n  const [viewportValuesList, getMore] = useInfiniteScroll(\n    onLoadMore, sortedItemValuesList, Boolean(forceRenderAllItems || filterValue),\n  );\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange?.(value);\n  });\n\n  const renderItem = useCallback((value: string) => {\n    const item = items.find((itemOption) => itemOption.value === value);\n    if (!item) return undefined;\n\n    const { label, subLabel, isLoading: isItemLoading } = item;\n    const isAlwaysUnselected = lockedUnselectedValuesSet.has(value);\n    const isAlwaysSelected = lockedSelectedValuesSet.has(value);\n    const isLocked = isAlwaysUnselected || isAlwaysSelected;\n    const isChecked = selectedValues.includes(value);\n\n    function getInputElement() {\n      if (isLocked) return <Icon name=\"lock-badge\" />;\n      if (itemInputType === 'radio') {\n        return <Radio checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      if (itemInputType === 'checkbox') {\n        return <Checkbox checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      return undefined;\n    }\n\n    return (\n      <PickerItem\n        key={value}\n        className={buildClassName(ITEM_CLASS_NAME, itemClassName)}\n        title={label}\n        subtitle={subLabel}\n        disabled={isLocked}\n        inactive={isViewOnly}\n        ripple\n        inputElement={getInputElement()}\n\n        onClick={() => handleItemClick(value)}\n\n        onDisabledClick={onDisabledClick && (() => onDisabledClick(value, isAlwaysSelected))}\n      />\n    );\n  }, [\n    items, lockedUnselectedValuesSet, lockedSelectedValuesSet, selectedValues, isViewOnly, onDisabledClick,\n    itemInputType, itemClassName,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.container, className)}>\n      {isSearchable && (\n        <div className={buildClassName(styles.header, 'custom-scroll')} dir={lang.isRtl ? 'rtl' : undefined}>\n          <InputText\n            id={searchInputId}\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={filterPlaceholder || lang('Search')}\n          />\n        </div>\n      )}\n\n      {viewportValuesList?.length ? (\n        <InfiniteScroll\n          className={buildClassName(styles.pickerList, withDefaultPadding && styles.padded, 'custom-scroll')}\n          items={viewportValuesList}\n          itemSelector={`.${ITEM_CLASS_NAME}`}\n          onLoadMore={getMore}\n          noScrollRestore={noScrollRestore}\n        >\n          {viewportValuesList.map((value) => renderItem(value))}\n        </InfiniteScroll>\n      ) : !isLoading && viewportValuesList && !viewportValuesList.length ? (\n        <p className={styles.noResults}>{notFoundText || lang('SearchEmptyViewTitle')}</p>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ItemPicker);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wzzA3MFh\",\"pickerSelector\":\"xhujrq9i\",\"pickerTitle\":\"YuRK4e7S\",\"picker\":\"YF9nLkCK\",\"footer\":\"ATCZ2Q5G\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport ItemPicker from './pickers/ItemPicker';\n\nimport styles from './CountryPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (value: string[]) => void;\n  countryList: ApiCountry[];\n  selectionLimit?: number | undefined;\n};\n\nconst CountryPickerModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onSubmit,\n  countryList,\n  selectionLimit,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[]>([]);\n  const prevSelectedCountryIds = usePreviousDeprecated(selectedCountryIds);\n  const noPickerScrollRestore = prevSelectedCountryIds === selectedCountryIds;\n\n  const displayedIds = useMemo(() => {\n    if (!countryList) {\n      return [];\n    }\n\n    return countryList.filter((country) => !country.isHidden && country.iso2 !== 'FT')\n      .map(({\n        iso2, defaultName,\n      }) => ({\n        value: iso2,\n        label: defaultName,\n      }));\n  }, [countryList]);\n\n  const handleSelectedIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (selectionLimit && newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningCountries', selectionLimit),\n      });\n      return;\n    }\n    setSelectedCountryIds(newSelectedIds);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    onSubmit(selectedCountryIds);\n    onClose();\n  });\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleSubmit}\n    >\n      <div className={styles.container}>\n        <div className={styles.pickerSelector}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4 className={styles.pickerTitle}>\n            {lang('BoostingSelectCountry')}\n          </h4>\n        </div>\n      </div>\n\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedIds}\n          selectedValues={selectedCountryIds}\n          onSelectedValuesChange={handleSelectedIdsChange}\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <div className={styles.footer}>\n        <Button\n          size=\"smaller\"\n          onClick={handleSubmit}\n        >\n          {lang('SelectCountries.OK')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(CountryPickerModal);\n","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport {\n  isChatChannel, isChatPublic, isChatSuperGroup,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\nconst GiveawayChannelPickerModal = ({\n  isOpen,\n  giveawayChatId,\n  selectionLimit,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [pendingChannelId, setPendingChannelId] = useState<string | undefined>(undefined);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const channelIds = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const { active, archived } = global.chats.listIds;\n    const ids = (active || []).concat(archived || []);\n\n    return unique(ids).map((id) => chatsById[id])\n      .filter((chat) => (\n        chat && (\n          isChatChannel(chat) || isChatSuperGroup(chat)\n        ) && chat.id !== giveawayChatId\n      )).map((chat) => chat.id);\n  }, [giveawayChatId]);\n\n  const displayedChannelIds = useMemo(() => {\n    const foundChannelIds = channelIds ? filterPeersByQuery({ ids: channelIds, query: searchQuery, type: 'chat' }) : [];\n\n    return sortChatIds(foundChannelIds,\n      false,\n      selectedIds);\n  }, [channelIds, searchQuery, selectedIds]);\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    const chatsById = getGlobal().chats.byId;\n    const newlyAddedIds = newSelectedIds.filter((id) => !selectedIds.includes(id));\n    const privateLinkChannelId = newlyAddedIds.find((id) => {\n      const chat = chatsById[id];\n      return chat && !isChatPublic(chat);\n    });\n\n    if (selectedIds?.length >= selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningChannelsPlural', selectionLimit),\n      });\n      return;\n    }\n\n    if (privateLinkChannelId) {\n      setPendingChannelId(privateLinkChannelId);\n      openConfirmModal();\n    } else {\n      setSelectedIds(newSelectedIds);\n    }\n  });\n\n  const confirmPrivateLinkChannelSelection = useLastCallback(() => {\n    if (pendingChannelId) {\n      setSelectedIds(unique([...selectedIds, pendingChannelId]));\n    }\n    closeConfirmModal();\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('RequestPeer.ChooseChannelTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedChannelIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedChannelIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n      <ConfirmDialog\n        title={lang('BoostingGiveawayPrivateChannel')}\n        text={lang('BoostingGiveawayPrivateChannelWarning')}\n        confirmLabel={lang('Add')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmPrivateLinkChannelSelection}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(GiveawayChannelPickerModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './GiveawayTypeOption.module.scss';\n\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\n\ntype OwnProps = {\n  option: ApiGiveawayType;\n  name: string;\n  text: string;\n  img: string;\n  checked?: boolean;\n  isLink: boolean;\n  className?: string;\n  onChange: (value: ApiGiveawayType) => void;\n  onClickAction?: () => void;\n  userNames?: string;\n  selectedMemberIds?: string[];\n};\n\nconst GiveawayTypeOption: FC<OwnProps> = ({\n  option, checked,\n  name, text, img,\n  isLink, onChange, onClickAction, className,\n  userNames, selectedMemberIds,\n}) => {\n  const lang = useOldLang();\n\n  let displayText: string | undefined = lang(text);\n  if (isLink && selectedMemberIds?.length) {\n    displayText = selectedMemberIds.length > 2 ? selectedMemberIds.length.toString() : userNames;\n  }\n\n  const handleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(option);\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    onClickAction?.();\n  });\n\n  return (\n    <label\n      className={buildClassName(styles.wrapper, className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"giveaway_option\"\n        value={option}\n        checked={checked}\n        onChange={handleChange}\n        onClick={(e) => e.stopPropagation()}\n      />\n      <div className={styles.content}>\n        <img className={styles.optionImg} src={img} alt=\"\" draggable={false} />\n        <div className={styles.giveaway}>\n          <h3 className={styles.title}>\n            {lang(name)}\n          </h3>\n          {isLink ? (\n            <div className={styles.link} onClick={handleClick}>\n              <span>{displayText}</span>\n              <Icon name=\"next\" />\n            </div>\n          ) : (\n            <span className={styles.contentText}>{displayText}</span>\n          )}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiveawayTypeOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"w3OGYFKn\",\"input\":\"xy4AclZa\",\"content\":\"TTgSI7Xh\",\"notChecked\":\"JDcXsByU\",\"giveaway\":\"sEt7TF59\",\"title\":\"u4NzVBBi\",\"link\":\"y7XfPOoG\",\"optionImg\":\"lGhZJbMF\",\"contentText\":\"kt2ZKZ6j\"};","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember } from '../../../api/types';\n\nimport {\n  isUserBot,\n  sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\ntype OwnProps = {\n  isOpen?: boolean;\n\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst GiveawayUserPickerModal = ({\n  isOpen,\n  selectionLimit,\n  members,\n  adminMembersById,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const memberIds = useMemo(() => {\n    const global = getGlobal();\n    const { byId, statusesById } = global.users;\n    if (!members?.length) {\n      return [];\n    }\n\n    const adminIdsSet = adminMembersById && new Set(Object.keys(adminMembersById));\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      byId,\n      statusesById,\n    );\n\n    return adminIdsSet ? userIds.filter((userId) => !adminIdsSet.has(userId)) : userIds;\n  }, [adminMembersById, members]);\n\n  const displayedMemberIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const filteredUserIds = memberIds\n      ? filterPeersByQuery({ ids: memberIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(unique(filteredUserIds).filter((userId) => {\n      const user = usersById[userId];\n      if (!user) {\n        return true;\n      }\n\n      return !isUserBot(user);\n    }));\n  }, [memberIds, searchQuery]);\n\n  const handleSelectedMemberIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningUsers', selectionLimit),\n      });\n      return;\n    }\n    setSelectedIds(newSelectedIds);\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('BoostingAwardSpecificUsers')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedMemberIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedMemberIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { giveawayChatId }): StateProps => {\n  const chatFullInfo = giveawayChatId ? selectChatFullInfo(global, giveawayChatId) : undefined;\n  if (!chatFullInfo) {\n    return {};\n  }\n\n  return {\n    members: chatFullInfo.members,\n    adminMembersById: chatFullInfo.adminMembersById,\n  };\n})(GiveawayUserPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"P0kLOw15\",\"button\":\"ILuhBsJG\",\"main\":\"SqiN63Ef\",\"logo\":\"Me2hCsMs\",\"header-text\":\"UVDnB0Wq\",\"headerText\":\"UVDnB0Wq\",\"description\":\"v5yGzV6v\",\"header\":\"U6XNIToQ\",\"hidden-header\":\"tDZc21ZC\",\"hiddenHeader\":\"tDZc21ZC\",\"close-button\":\"OX6_HqAd\",\"closeButton\":\"OX6_HqAd\",\"premium-header-text\":\"v6hiGpEn\",\"premiumHeaderText\":\"v6hiGpEn\",\"primary-footer-text\":\"YGbiSd3e\",\"primaryFooterText\":\"YGbiSd3e\",\"section\":\"rZRDMqUL\",\"types\":\"sQ5PkKEs\",\"footer\":\"hD_AEzjd\",\"options\":\"JjDLNrKG\",\"giveawayTitle\":\"p5Hn4Q6E\",\"subscription\":\"rniPcuiP\",\"starSubscription\":\"bzRAETfR\",\"subscriptionOption\":\"ggZrgZnv\",\"status\":\"q1y2qUTn\",\"info\":\"IsT38nlq\",\"titleInfo\":\"nmsfBLut\",\"month\":\"TsGuei3B\",\"quantity\":\"G9H3tm6D\",\"floatingBadge\":\"xKl2UeV8\",\"floatingBadgeColor\":\"HLx3wTBD\",\"floatingBadgeButtonColor\":\"JLH0MExt\",\"floatingBadgeIcon\":\"Ftr7zf2v\",\"floatingBadgeValue\":\"Ce0Ob2tg\",\"subscriptionFooter\":\"rDFQAfTt\",\"premiumFeatures\":\"eNQ_nrKr\",\"dateButton\":\"GeKqKRgP\",\"title\":\"LZ3vPzak\",\"checkboxSection\":\"Z9QJQ6IS\",\"prizesSection\":\"eQVP0Nx8\",\"prizesInput\":\"qMYNwiUZ\",\"subLabelClassName\":\"txXJxVFu\",\"prepaidImg\":\"ldn4mh2T\",\"addButton\":\"sOXvh85b\",\"addChannel\":\"aGbyR60s\",\"removeChannel\":\"UZdErfVI\",\"starOptions\":\"cLhNkYPB\",\"transition\":\"vEI2Wewt\"};","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiCountry,\n  ApiPremiumGiftCodeOption,\n  ApiPrepaidGiveaway,\n  ApiPrepaidStarsGiveaway,\n  ApiStarGiveawayOption,\n  ApiTypePrepaidGiveaway,\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n  GIVEAWAY_MAX_ADDITIONAL_CHANNELS,\n  GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  GIVEAWAY_MAX_ADDITIONAL_USERS,\n  STARS_CURRENCY_CODE,\n} from '../../../config';\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { unique } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport CountryPickerModal from '../../common/CountryPickerModal';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport StarTopupOptionList from '../../modals/stars/StarTopupOptionList';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSliderWithMarks from '../../ui/RangeSliderWithMarks';\nimport Switcher from '../../ui/Switcher';\nimport GiveawayChannelPickerModal from './GiveawayChannelPickerModal';\nimport GiveawayTypeOption from './GiveawayTypeOption';\nimport GiveawayUserPickerModal from './GiveawayUserPickerModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './GiveawayModal.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\nimport PremiumLogo from '../../../assets/premium/PremiumStar.svg';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  userIds?: string[];\n};\n\ntype StateProps = {\n  chatId?: string;\n  gifts?: ApiPremiumGiftCodeOption[];\n  isOpen?: boolean;\n  fromUser?: ApiUser;\n  selectedMemberList?: string[] | undefined;\n  selectedChannelList?: string[] | undefined;\n  giveawayBoostPerPremiumLimit?: number;\n  userSelectionLimit?: number;\n  countryList: ApiCountry[];\n  prepaidGiveaway?: ApiTypePrepaidGiveaway;\n  countrySelectionLimit: number | undefined;\n  isChannel?: boolean;\n  isStarsGiftEnabled?: boolean;\n  starsGiftOptions?: ApiStarGiveawayOption[] | undefined;\n};\n\ntype GiveawayAction = 'createPremiumGiveaway' | 'createStarsGiveaway';\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\ntype SubscribersType = 'all' | 'new';\n\ninterface TypeOption {\n  name: string;\n  text: string;\n  value: ApiGiveawayType;\n  img: string;\n  actions?: GiveawayAction;\n  isLink: boolean;\n  onClickAction?: () => void;\n}\n\nconst DEFAULT_CUSTOM_EXPIRE_DATE = 86400 * 3 * 1000; // 3 days\nconst MAX_ADDITIONAL_CHANNELS = 9;\nconst DEFAULT_BOOST_COUNT = 5;\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst GiveawayModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  gifts,\n  isOpen,\n  isChannel,\n  selectedMemberList,\n  selectedChannelList,\n  giveawayBoostPerPremiumLimit = GIVEAWAY_BOOST_PER_PREMIUM,\n  countryList,\n  prepaidGiveaway,\n  countrySelectionLimit = GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  userSelectionLimit = GIVEAWAY_MAX_ADDITIONAL_USERS,\n  isStarsGiftEnabled,\n  starsGiftOptions,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closeGiveawayModal, openInvoice, openPremiumModal,\n    launchPrepaidGiveaway, launchPrepaidStarsGiveaway,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isCountryPickerModalOpen, openCountryPickerModal, closeCountryPickerModal] = useFlag();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [isUserPickerModalOpen, openUserPickerModal, closeUserPickerModal] = useFlag();\n  const [isChannelPickerModalOpen, openChannelPickerModal, closeChannelPickerModal] = useFlag();\n\n  const TYPE_OPTIONS: TypeOption[] = [{\n    name: 'Premium.Title',\n    text: 'BoostingWinnersRandomly',\n    value: 'premium_giveaway',\n    img: GiftBlueRound,\n    actions: 'createPremiumGiveaway',\n    isLink: true,\n    onClickAction: () => {\n      openUserPickerModal();\n    },\n  }];\n\n  if (isStarsGiftEnabled) {\n    TYPE_OPTIONS.push({\n      name: 'TelegramStars',\n      text: 'BoostingWinnersRandomly',\n      value: 'stars_giveaway',\n      img: GiftStar,\n      actions: 'createStarsGiveaway',\n      isLink: false,\n    });\n  }\n\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedRandomUserCount, setSelectedRandomUserCount] = useState<number>(DEFAULT_BOOST_COUNT);\n  const [selectedGiveawayOption, setGiveawayOption] = useState<ApiGiveawayType>(TYPE_OPTIONS[0].value);\n  const [selectedStarOption, setSelectedStarOption] = useState<ApiStarGiveawayOption | undefined>();\n  const [selectedSubscriberOption, setSelectedSubscriberOption] = useState<SubscribersType>('all');\n  const [selectedMonthOption, setSelectedMonthOption] = useState<number | undefined>();\n  const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);\n  const [selectedChannelIds, setSelectedChannelIds] = useState<string[]>([]);\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[] | undefined>([]);\n  const [shouldShowWinners, setShouldShowWinners] = useState<boolean>(false);\n  const [shouldShowPrizes, setShouldShowPrizes] = useState<boolean>(false);\n  const [prizeDescription, setPrizeDescription] = useState<string | undefined>(undefined);\n  const [dataPrepaidGiveaway, setDataPrepaidGiveaway] = useState<ApiPrepaidGiveaway | undefined>(undefined);\n  const [\n    dataStarsPrepaidGiveaway, setDataStarsPrepaidGiveaway,\n  ] = useState<ApiPrepaidStarsGiveaway | undefined>(undefined);\n\n  const isPremiumGiveaway = selectedGiveawayOption === 'premium_giveaway';\n  const isStarsGiveaway = selectedGiveawayOption === 'stars_giveaway';\n  const selectedUserCount = isPremiumGiveaway\n    && !selectedUserIds.length ? selectedRandomUserCount : selectedUserIds.length;\n  const boostQuantity = selectedUserCount * giveawayBoostPerPremiumLimit;\n  const boostStarsQuantity = selectedStarOption?.yearlyBoosts;\n\n  const SUBSCRIBER_OPTIONS = useMemo(() => [\n    {\n      value: 'all',\n      label: lang(isChannel ? 'BoostingAllSubscribers' : 'BoostingAllMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n    {\n      value: 'new',\n      label: lang(isChannel ? 'BoostingNewSubscribers' : 'BoostingNewMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n  ], [isChannel, lang, selectedCountryIds]);\n\n  const monthQuantity = lang('Months', selectedMonthOption);\n  const isStarsPrepaidGiveaway = prepaidGiveaway?.type === 'starsGiveaway';\n  const isPremiumPrepaidGiveaway = prepaidGiveaway?.type === 'giveaway';\n\n  const selectedGift = useMemo(() => {\n    return gifts?.find((gift) => gift.months === selectedMonthOption && gift.users === selectedUserCount);\n  }, [gifts, selectedMonthOption, selectedUserCount]);\n\n  const selectedStarsGift = useMemo(() => {\n    return starsGiftOptions?.find((gift) => {\n      return isStarsPrepaidGiveaway && gift.stars === (dataStarsPrepaidGiveaway?.stars);\n    });\n  }, [dataStarsPrepaidGiveaway, starsGiftOptions, isStarsPrepaidGiveaway]);\n\n  const filteredGifts = useMemo(() => {\n    return gifts?.filter((gift) => gift.users === selectedUserCount && gift.currency !== STARS_CURRENCY_CODE);\n  }, [gifts, selectedUserCount]);\n\n  const fullMonthlyAmount = useMemo(() => {\n    const basicGift = filteredGifts?.reduce((acc, gift) => {\n      return gift.amount < acc.amount ? gift : acc;\n    }, filteredGifts[0]);\n\n    return basicGift && Math.floor(basicGift.amount / basicGift.months);\n  }, [filteredGifts]);\n\n  const userCountOptions = useMemo(() => {\n    return unique((gifts?.filter((gift) => gift.currency !== STARS_CURRENCY_CODE)\n      ?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [gifts]);\n\n  const winnerCountOptions = useMemo(() => {\n    return unique((selectedStarOption?.winners?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [selectedStarOption]);\n\n  useEffect(() => {\n    if (isOpen && gifts?.length && !isStarsPrepaidGiveaway) {\n      setSelectedMonthOption(gifts?.[0].months);\n    }\n  }, [isOpen, gifts, isStarsPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && starsGiftOptions?.length && !isPremiumPrepaidGiveaway) {\n      setSelectedStarOption(starsGiftOptions?.[0]);\n    }\n  }, [isOpen, starsGiftOptions, isPremiumPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isStarsPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataStarsPrepaidGiveaway(prepaidGiveaway);\n    }\n  }, [isOpen, isStarsPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isPremiumPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataPrepaidGiveaway(prepaidGiveaway);\n      setSelectedMonthOption(prepaidGiveaway.months);\n    }\n  }, [isOpen, isPremiumPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (selectedMemberList) {\n      setSelectedUserIds(selectedMemberList);\n    }\n  }, [selectedMemberList]);\n\n  useEffect(() => {\n    if (selectedChannelList) {\n      setSelectedChannelIds(selectedChannelList);\n    }\n  }, [selectedChannelList]);\n\n  const handlePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    setDataStarsPrepaidGiveaway(undefined);\n    setDataPrepaidGiveaway(undefined);\n    setSelectedStarOption(undefined);\n    setSelectedMonthOption(undefined);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n    closeGiveawayModal();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (isPremiumGiveaway) {\n      if (selectedUserIds?.length) {\n        openInvoice({\n          type: 'giftcode',\n          boostChannelId: chatId!,\n          userIds: selectedUserIds,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      } else {\n        openInvoice({\n          type: 'giveaway',\n          chatId: chatId!,\n          additionalChannelIds: selectedChannelIds,\n          isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n          countries: selectedCountryIds,\n          areWinnersVisible: shouldShowWinners,\n          prizeDescription,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      }\n    } else {\n      openInvoice({\n        type: 'starsgiveaway',\n        chatId: chatId!,\n        additionalChannelIds: selectedChannelIds,\n        isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n        countries: selectedCountryIds,\n        areWinnersVisible: shouldShowWinners,\n        prizeDescription,\n        untilDate: customExpireDate / 1000,\n        currency: selectedStarOption!.currency,\n        amount: selectedStarOption!.amount,\n        stars: selectedStarOption!.stars,\n        users: selectedRandomUserCount,\n      });\n    }\n\n    handleClose();\n  });\n\n  const confirmLaunchPrepaidGiveaway = useLastCallback(() => {\n    if (isStarsPrepaidGiveaway) {\n      launchPrepaidStarsGiveaway({\n        chatId: chatId!,\n        giveawayId: dataStarsPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          stars: dataStarsPrepaidGiveaway!.stars,\n          currency: selectedStarsGift!.currency,\n          amount: selectedStarsGift!.amount,\n          users: dataStarsPrepaidGiveaway!.quantity,\n        },\n      });\n    } else {\n      launchPrepaidGiveaway({\n        chatId: chatId!,\n        giveawayId: dataPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n        },\n      });\n    }\n\n    closeConfirmModal();\n    handleClose();\n  });\n\n  const handleRandomUserCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handleWinnerCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handlePrizeDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setPrizeDescription(e.target.value);\n  });\n\n  const userNames = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    return selectedUserIds?.map((userId) => getUserFullName(usersById[userId])).join(', ');\n  }, [selectedUserIds]);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleChangeSubscriberOption = useLastCallback((value) => {\n    setSelectedSubscriberOption(value);\n  });\n\n  const handleChangeTypeOption = useLastCallback((value: ApiGiveawayType) => {\n    setGiveawayOption(value);\n    setSelectedUserIds([]);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleSetCountriesListChange = useLastCallback((value: string[]) => {\n    setSelectedCountryIds(value);\n  });\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedUserIds(newSelectedIds);\n    if (!newSelectedIds.length) {\n      setGiveawayOption('premium_giveaway');\n    }\n  });\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedChannelIds(newSelectedIds);\n  });\n\n  const handleShouldShowWinnersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowWinners(e.target.checked);\n  });\n\n  const handleShouldShowPrizesChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowPrizes(e.target.checked);\n  });\n\n  const onClickActionHandler = useLastCallback(() => {\n    openCountryPickerModal();\n  });\n\n  const handleStarClick = useLastCallback((option) => {\n    setSelectedStarOption(option);\n  });\n\n  function renderTypeOptions() {\n    return (\n      <div className={styles.options}>\n        {TYPE_OPTIONS.map((option) => {\n          return (\n            <GiveawayTypeOption\n              key={option.name}\n              name={option.name}\n              text={option.text}\n              option={option.value}\n              img={option.img}\n              onChange={handleChangeTypeOption}\n              checked={selectedGiveawayOption === option.value}\n              isLink={option.isLink}\n              userNames={userNames}\n              selectedMemberIds={selectedUserIds}\n              onClickAction={option.onClickAction}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscribersOptions() {\n    return (\n      <div className={styles.options}>\n        <RadioGroup\n          name=\"subscribers\"\n          options={SUBSCRIBER_OPTIONS}\n          selected={selectedSubscriberOption}\n          onChange={handleChangeSubscriberOption}\n          onClickAction={onClickActionHandler}\n          subLabelClassName={styles.subLabelClassName}\n          isLink\n        />\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.options}>\n        {filteredGifts?.map((gift) => (\n          <PremiumSubscriptionOption\n            isGiveaway\n            key={gift.months}\n            option={gift}\n            fullMonthlyAmount={fullMonthlyAmount}\n            checked={gift.months === selectedMonthOption}\n            onChange={setSelectedMonthOption}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  function deleteParticipantsHandler(id: string) {\n    const filteredChannelIds = selectedChannelIds.filter((channelId) => channelId !== id);\n    setSelectedChannelIds(filteredChannelIds);\n  }\n\n  function renderStarOptionList() {\n    return (\n      <StarTopupOptionList\n        className={styles.starOptions}\n        options={starsGiftOptions}\n        selectedStarCount={selectedRandomUserCount}\n        selectedStarOption={selectedStarOption}\n        onClick={handleStarClick}\n      />\n    );\n  }\n\n  function renderGiveawayOptionList() {\n    return (\n      <>\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingChannelsGroupsIncludedGiveaway')}\n          </h2>\n\n          <ListItem\n            inactive\n            className=\"chat-item-clickable contact-list-item\"\n          >\n            <GroupChatInfo\n              chatId={chatId!}\n              status={lang(isChannel ? 'BoostingChannelWillReceiveBoost'\n                : 'BoostingGroupWillReceiveBoost', boostQuantity || boostStarsQuantity, 'i')}\n            />\n          </ListItem>\n\n          {selectedChannelIds?.map((channelId) => {\n            return (\n              <ListItem\n                ripple\n                key={channelId}\n                className=\"chat-item-clickable contact-list-item\"\n\n                onClick={() => deleteParticipantsHandler(channelId)}\n                rightElement={(<Icon name=\"close\" className={styles.removeChannel} />)}\n              >\n                <GroupChatInfo\n                  chatId={channelId.toString()}\n                />\n              </ListItem>\n            );\n          })}\n\n          {selectedChannelIds.length < MAX_ADDITIONAL_CHANNELS && (\n            <ListItem\n              icon=\"add\"\n              ripple\n              onClick={openChannelPickerModal}\n              className={styles.addButton}\n              iconClassName={styles.addChannel}\n            >\n              {lang('BoostingAddChannelOrGroup')}\n            </ListItem>\n          )}\n        </div>\n\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingEligibleUsers')}\n          </h2>\n\n          {renderSubscribersOptions()}\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang(isChannel ? 'BoostGift.LimitSubscribersInfo' : 'lng_giveaway_users_about_group'))}\n        </div>\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayAdditionalPrizes')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowPrizes}\n              onChange={handleShouldShowPrizesChange}\n            />\n          </div>\n\n          {shouldShowPrizes && (\n            <div className={styles.prizesSection}>\n              <h2 className={styles.title}>\n                {selectedRandomUserCount}\n              </h2>\n              <InputText\n                className={styles.prizesInput}\n                value={prizeDescription}\n                onChange={handlePrizeDescriptionChange}\n                label={lang('BoostingGiveawayEnterYourPrize')}\n              />\n            </div>\n          )}\n        </div>\n\n        {shouldShowPrizes ? (\n          !isStarsGiveaway && !isStarsPrepaidGiveaway ? (\n            <div className={styles.subscription}>\n              {prizeDescription?.length ? renderText(lang('BoostingGiveawayAdditionPrizeCountNameHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, prizeDescription, monthQuantity]\n                  : [selectedUserCount, prizeDescription, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown']) : renderText(lang('BoostingGiveawayAdditionPrizeCountHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, monthQuantity]\n                  : [selectedUserCount, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown'])}\n            </div>\n          ) : undefined\n        ) : (\n          <div className={styles.subscription}>\n            {renderText(lang('BoostingGiveawayAdditionPrizeHint'))}\n          </div>\n        )}\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayShowWinners')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowWinners}\n              onChange={handleShouldShowWinnersChange}\n            />\n          </div>\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang('BoostingGiveawayShowWinnersHint'))}\n        </div>\n\n        <div className={buildClassName(styles.section,\n          (dataPrepaidGiveaway || dataStarsPrepaidGiveaway || isStarsGiveaway) && styles.subscriptionFooter)}\n        >\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingDateWhenGiveawayEnds')}\n          </h2>\n\n          <Button\n            ariaLabel={lang('BoostGift.DateEnds')}\n            className={buildClassName(styles.dateButton, 'expire-limit')}\n            isText\n            onClick={openCalendar}\n          >\n            <h3 className={styles.title}>\n              {lang('BoostGift.DateEnds')}\n            </h3>\n            {formatDateTimeToString(customExpireDate, lang.code)}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={handleClose}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n      onEnter={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          onClick={handleClose}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n        <h2 className={styles.headerText}>\n          {renderText(lang('BoostingBoostsViaGifts'))}\n        </h2>\n        <div className={styles.description}>\n          {renderText(lang(isChannel ? 'BoostingGetMoreBoost' : 'BoostingGetMoreBoostsGroup'))}\n        </div>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.premiumHeaderText}>\n            {lang('BoostingBoostsViaGifts')}\n          </h2>\n        </div>\n        {(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? (\n          <div className={styles.status}>\n            <div>\n              {dataStarsPrepaidGiveaway ? (\n                <img className={styles.prepaidImg} src={GiftStar} alt=\"\" />\n              ) : (\n                <img\n                  className={styles.prepaidImg}\n                  src={GIVEAWAY_IMG_LIST[dataPrepaidGiveaway!.months] || GIVEAWAY_IMG_LIST[3]}\n                  alt=\"\"\n                />\n              )}\n            </div>\n            <div className={styles.info}>\n              <h3 className={styles.title}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Title', dataStarsPrepaidGiveaway?.stars)\n                  : lang('BoostingTelegramPremiumCountPlural', dataPrepaidGiveaway!.quantity)}\n              </h3>\n              <p className={styles.month}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', dataStarsPrepaidGiveaway?.quantity)\n                  : lang('PrepaidGiveawayMonths', dataPrepaidGiveaway?.months)}\n              </p>\n            </div>\n            <div className={styles.quantity}>\n              <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {dataStarsPrepaidGiveaway ? dataStarsPrepaidGiveaway?.boosts\n                    : dataPrepaidGiveaway!.quantity * (giveawayBoostPerPremiumLimit ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className={buildClassName(styles.section, styles.types)}>\n            {renderTypeOptions()}\n          </div>\n        )}\n\n        {isPremiumGiveaway && !selectedUserIds?.length && (\n          <>\n            {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingQuantityPrizes')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedUserCount}\n                    marks={userCountOptions}\n                    onChange={handleRandomUserCountChange}\n                  />\n                </div>\n\n                <div className={styles.subscription}>\n                  {renderText(lang('BoostingChooseHowMany'))}\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {isStarsGiveaway && (\n          <>\n            {!dataStarsPrepaidGiveaway && !dataPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingStarsOptions')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostStarsQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  {renderStarOptionList()}\n                </div>\n\n                <div className={buildClassName(styles.subscription, styles.starSubscription)}>\n                  {renderText(lang('BoostGift.Stars.Info'))}\n                </div>\n\n                <div className={styles.section}>\n                  <h2 className={styles.giveawayTitle}>\n                    {lang('BoostingStarsQuantityPrizes')}\n                  </h2>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedRandomUserCount}\n                    marks={winnerCountOptions}\n                    onChange={handleWinnerCountChange}\n                  />\n\n                  <div className={styles.subscription}>\n                    {renderText(lang('BoostingStarsQuantityPrizesInfo'))}\n                  </div>\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && isPremiumGiveaway && (\n          <>\n            <div className={styles.section}>\n              <h2 className={styles.giveawayTitle}>\n                {lang('BoostingDurationOfPremium')}\n              </h2>\n\n              {renderSubscriptionOptions()}\n            </div>\n\n            <div className={buildClassName(styles.subscription, styles.subscriptionFooter)}>\n              {renderPremiumFeaturesLink()}\n            </div>\n          </>\n        )}\n\n        {selectedGiveawayOption && (\n          <div className={styles.footer}>\n            <Button\n              className={styles.button}\n              onClick={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n            >\n              {lang('BoostingStartGiveaway')}\n            </Button>\n          </div>\n        )}\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n      <CountryPickerModal\n        isOpen={isCountryPickerModalOpen}\n        onClose={closeCountryPickerModal}\n        countryList={countryList}\n        onSubmit={handleSetCountriesListChange}\n        selectionLimit={countrySelectionLimit}\n      />\n      <GiveawayUserPickerModal\n        isOpen={isUserPickerModalOpen}\n        onClose={closeUserPickerModal}\n        onSelectedIdsConfirmed={handleSelectedUserIdsChange}\n        initialSelectedIds={selectedUserIds}\n        selectionLimit={userSelectionLimit}\n        giveawayChatId={chatId}\n      />\n      <GiveawayChannelPickerModal\n        isOpen={isChannelPickerModalOpen}\n        onClose={closeChannelPickerModal}\n        initialSelectedIds={selectedChannelIds}\n        onSelectedIdsConfirmed={handleSelectedChannelIdsChange}\n        selectionLimit={GIVEAWAY_MAX_ADDITIONAL_CHANNELS}\n        giveawayChatId={chatId}\n      />\n      <ConfirmDialog\n        title={lang('BoostingStartGiveawayConfirmTitle')}\n        text={lang('BoostingStartGiveawayConfirmText')}\n        confirmLabel={lang('Start')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmLaunchPrepaidGiveaway}\n      />\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    giveawayModal,\n  } = selectTabState(global);\n  const chatId = giveawayModal?.chatId;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const isChannel = chat && isChatChannel(chat);\n\n  return {\n    chatId,\n    gifts: giveawayModal?.gifts,\n    selectedMemberList: giveawayModal?.selectedMemberIds,\n    selectedChannelList: giveawayModal?.selectedChannelIds,\n    giveawayBoostPerPremiumLimit: global.appConfig?.giveawayBoostsPerPremium,\n    isStarsGiftEnabled: global.appConfig?.isStarsGiftEnabled,\n    userSelectionLimit: global.appConfig?.giveawayAddPeersMax,\n    countrySelectionLimit: global.appConfig?.giveawayCountriesMax,\n    countryList: global.countryList.general,\n    prepaidGiveaway: giveawayModal?.prepaidGiveaway,\n    isChannel,\n    starsGiftOptions: giveawayModal?.starOptions,\n  };\n})(GiveawayModal));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiLimitTypeWithModal } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\nimport type { IconName } from '../../../../types/icons';\n\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogs',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, IconName> = {\n  dialogFiltersChats: 'chat-badge',\n  uploadMaxFileparts: 'file-badge',\n  dialogFilters: 'folder-badge',\n  dialogFolderPinned: 'pin-badge',\n  channelsPublic: 'link-badge',\n  channels: 'chats-badge',\n  chatlistInvites: 'link-badge',\n  chatlistJoined: 'folder-badge',\n  savedDialogsPinned: 'pin-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: OldLangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: OldLangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useOldLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>\n            {valueFormatter?.(\n              lang, isPremium ? premiumValue : defaultValue,\n            ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n          && (\n            <Button\n              className=\"confirm-dialog-button\"\n              isText\n              onClick={handleClick}\n              color=\"primary\"\n            >\n              {lang('IncreaseLimit')}\n              <Icon name=\"double-badge\" className={styles.x2} />\n            </Button>\n          )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QAs_iFxO\",\"limit-compare\":\"k0O6Rnjh\",\"limitCompare\":\"k0O6Rnjh\",\"limit-badge\":\"Q5d_7bB4\",\"limitBadge\":\"Q5d_7bB4\",\"limit-value\":\"ArEy3hhB\",\"limitValue\":\"ArEy3hhB\",\"limit-icon\":\"rbnU7JVX\",\"limitIcon\":\"rbnU7JVX\",\"dialog-buttons\":\"RVM_RSap\",\"dialogButtons\":\"RVM_RSap\",\"x2\":\"esB1OhAF\",\"button-icon\":\"ydpxmYS3\",\"buttonIcon\":\"ydpxmYS3\"};","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useRef, useState } from '../../../lib/teact/teact';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: ElementRef<HTMLDivElement>,\n  headerRef: ElementRef<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useLastCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll({\n        container: containerRef.current!,\n        element: stickerSetEl,\n        position: 'start',\n        margin: FOCUS_MARGIN,\n        maxDistance: isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      });\n\n      return index;\n    });\n  });\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"m6XpTzQX\",\"video\":\"OZHqKbDL\",\"image\":\"enA6c8gc\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport useColorFilter from '../../../hooks/stickers/useColorFilter';\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  forcePlayback,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    hasThumbnail, hasVideoThumb, hasAnimatedThumb, hasStaticThumb, thumbCustomEmojiId,\n  } = stickerSet;\n\n  const { customEmoji } = useCustomEmoji(thumbCustomEmojiId);\n  const hasCustomColor = customEmoji?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(containerRef, undefined, !hasCustomColor);\n  const colorFilter = useColorFilter(customColor);\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const shouldFallbackToSticker = !hasThumbnail\n    || (hasVideoThumb && !IS_WEBM_SUPPORTED && !hasAnimatedThumb && !hasStaticThumb);\n  const firstStickerHash = shouldFallbackToSticker && stickerSet.stickers?.[0]\n    && getStickerMediaHash(stickerSet.stickers[0], 'preview');\n  const firstStickerMediaData = useMedia(firstStickerHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !firstStickerHash) || hasAnimatedThumb) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = thumbCustomEmojiId || mediaData || firstStickerMediaData;\n  const transitionClassNames = useMediaTransitionDeprecated(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: stickerSet,\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'sticker-set-cover')}\n      style={`--_size: ${size}px`}\n    >\n      {isReady ? (\n        thumbCustomEmojiId ? (\n          <CustomEmoji\n            documentId={thumbCustomEmojiId}\n            size={size}\n            observeIntersectionForPlaying={observeIntersection}\n            noPlay={noPlay}\n          />\n        ) : hasAnimatedThumb ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n            forceAlways={forcePlayback}\n          />\n        ) : (hasVideoThumb && !shouldFallbackToSticker) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            style={colorFilter}\n            isPriority={forcePlayback}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || firstStickerMediaData}\n            style={colorFilter}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n            draggable={false}\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import type { MouseEvent as ReactMouseEvent, ReactNode } from 'react';\nimport type {\n  ElementRef } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiBotInlineMediaResult, ApiSticker } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useDynamicColorListener from '../../hooks/stickers/useDynamicColorListener';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport Icon from './icons/Icon';\nimport Sparkles from './Sparkles';\nimport StickerView from './StickerView';\n\nimport './StickerButton.scss';\n\ntype OwnProps<T> = {\n  sticker: ApiSticker;\n  size: number;\n  noPlay?: boolean;\n  title?: string;\n  className?: string;\n  noContextMenu?: boolean;\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  canViewSet?: boolean;\n  isSelected?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldIgnorePremium?: boolean;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  withTranslucentThumb?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  observeIntersectionForShowing?: ObserveFn;\n  noShowPremium?: boolean;\n  onClick?: (arg: OwnProps<T>['clickArg'], isSilent?: boolean, shouldSchedule?: boolean) => void;\n  clickArg: T;\n  onFaveClick?: (sticker: ApiSticker) => void;\n  onUnfaveClick?: (sticker: ApiSticker) => void;\n  onRemoveRecentClick?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n  isEffectEmoji?: boolean;\n  withSparkles?: boolean;\n};\n\nconst contentForStatusMenuContext = [\n  { title: 'SetTimeoutFor.Hours', value: 1, arg: 3600 },\n  { title: 'SetTimeoutFor.Hours', value: 2, arg: 7200 },\n  { title: 'SetTimeoutFor.Hours', value: 8, arg: 28800 },\n  { title: 'SetTimeoutFor.Days', value: 1, arg: 86400 },\n  { title: 'SetTimeoutFor.Days', value: 2, arg: 172800 },\n];\n\nconst StickerButton = <T extends number | ApiSticker | ApiBotInlineMediaResult | undefined = undefined>({\n  sticker,\n  size,\n  noPlay,\n  title,\n  className,\n  noContextMenu,\n  isSavedMessages,\n  isStatusPicker,\n  canViewSet,\n  observeIntersection,\n  observeIntersectionForShowing,\n  isSelected,\n  isCurrentUserPremium,\n  shouldIgnorePremium,\n  noShowPremium,\n  sharedCanvasRef,\n  withTranslucentThumb,\n  forcePlayback,\n  onClick,\n  clickArg,\n  onFaveClick,\n  onUnfaveClick,\n  onRemoveRecentClick,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  isEffectEmoji,\n  withSparkles,\n}: OwnProps<T>) => {\n  const { openStickerSet, openPremiumModal, setEmojiStatus } = getActions();\n  const ref = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n  const lang = useOldLang();\n  const hasCustomColor = sticker.shouldUseTextColor;\n  const customColor = useDynamicColorListener(ref, undefined, !hasCustomColor);\n\n  const {\n    id, stickerSetInfo,\n  } = sticker;\n\n  const isPremium = (!sticker.isFree && isEffectEmoji) || sticker.hasEffect;\n  const isCustomEmoji = sticker.isCustomEmoji || isEffectEmoji;\n  const isLocked = !isCurrentUserPremium && isPremium && !shouldIgnorePremium;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const shouldLoad = isIntersecting;\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const isIntesectingForShowing = useIsIntersecting(ref, observeIntersectionForShowing);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const shouldRenderContextMenu = Boolean(!noContextMenu && contextMenuAnchor);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => {\n    return isStatusPicker ? menuRef.current : ref.current!.querySelector('.sticker-context-menu .bubble');\n  });\n  const getLayout = useLastCallback(() => ({ withPortal: isStatusPicker, shouldAvoidNegativePosition: true }));\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenuOpen?.();\n    } else {\n      onContextMenuClose?.();\n    }\n  }, [isContextMenuOpen, onContextMenuClose, onContextMenuOpen]);\n\n  useEffect(() => {\n    if (!isIntersecting) handleContextMenuClose();\n  }, [handleContextMenuClose, isIntersecting]);\n\n  const handleClick = () => {\n    if (isContextMenuOpen) return;\n    if (isLocked) {\n      if (isEffectEmoji) {\n        openPremiumModal({ initialSection: 'effects' });\n      } else {\n        openPremiumModal({ initialSection: 'premium_stickers' });\n      }\n      return;\n    }\n    onClick?.(clickArg);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleRemoveClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextRemoveRecent = useLastCallback(() => {\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextUnfave = useLastCallback(() => {\n    onUnfaveClick!(sticker);\n  });\n\n  const handleContextFave = useLastCallback(() => {\n    onFaveClick!(sticker);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick?.(clickArg, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick?.(clickArg, undefined, true);\n  });\n\n  const handleOpenSet = useLastCallback(() => {\n    openStickerSet({ stickerSetInfo });\n  });\n\n  const handleEmojiStatusExpiresClick = useLastCallback((e: React.SyntheticEvent, duration = 0) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    handleContextMenuClose();\n    onContextMenuClick?.();\n    setEmojiStatus({\n      emojiStatus: { type: 'regular', documentId: sticker.id, until: getServerTime() + duration },\n    });\n  });\n\n  const shouldShowCloseButton = !IS_TOUCH_ENV && onRemoveRecentClick;\n\n  const fullClassName = buildClassName(\n    'StickerButton',\n    onClick && 'interactive',\n    isSelected && 'selected',\n    isCustomEmoji && 'custom-emoji',\n    isEffectEmoji && 'effect-emoji',\n    className,\n  );\n\n  const contextMenuItems = useMemo(() => {\n    if (!shouldRenderContextMenu || noContextMenu || (isCustomEmoji && !isStatusPicker)) return [];\n\n    const items: ReactNode[] = [];\n\n    if (isCustomEmoji) {\n      contentForStatusMenuContext.forEach((item) => {\n        items.push(\n          <MenuItem onClick={handleEmojiStatusExpiresClick} clickArg={item.arg}>\n            {lang(item.title, item.value, 'i')}\n          </MenuItem>,\n        );\n      });\n\n      return items;\n    }\n\n    if (onUnfaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextUnfave}>\n          {lang('Stickers.RemoveFromFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (onFaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextFave}>\n          {lang('Stickers.AddToFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (!isLocked && onClick) {\n      if (!isSavedMessages) {\n        items.push(<MenuItem onClick={handleSendQuiet} icon=\"muted\">{lang('SendWithoutSound')}</MenuItem>);\n      }\n      items.push(\n        <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>,\n      );\n    }\n\n    if (canViewSet) {\n      items.push(\n        <MenuItem onClick={handleOpenSet} icon=\"stickers\">\n          {lang('ViewPackPreview')}\n        </MenuItem>,\n      );\n    }\n    if (onRemoveRecentClick) {\n      items.push(\n        <MenuItem icon=\"delete\" onClick={handleContextRemoveRecent}>\n          {lang('DeleteFromRecent')}\n        </MenuItem>,\n      );\n    }\n    return items;\n  }, [\n    shouldRenderContextMenu, noContextMenu, isCustomEmoji, isStatusPicker, onUnfaveClick, onFaveClick, isLocked,\n    onClick, canViewSet, onRemoveRecentClick, handleEmojiStatusExpiresClick, lang, handleContextUnfave,\n    handleContextFave, isSavedMessages, handleSendScheduled, handleSendQuiet, handleOpenSet, handleContextRemoveRecent,\n  ]);\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      title={title || (sticker?.emoji)}\n      data-sticker-id={id}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {withSparkles && <Sparkles preset=\"button\" />}\n      {isIntesectingForShowing && (\n        <StickerView\n          containerRef={ref}\n          sticker={sticker}\n          isSmall\n          size={size}\n          shouldLoop\n          shouldPreloadPreview\n          noLoad={!shouldLoad}\n          noPlay={!shouldPlay}\n          noVideoOnMobile\n          withSharedAnimation\n          sharedCanvasRef={sharedCanvasRef}\n          withTranslucentThumb={withTranslucentThumb}\n          customColor={customColor}\n          forceAlways={forcePlayback}\n        />\n      )}\n      {!noShowPremium && isLocked && (\n        <div\n          className=\"sticker-locked\"\n        >\n          <Icon name=\"lock-badge\" />\n        </div>\n      )}\n      {!noShowPremium && isPremium && !isLocked && (\n        <div className=\"sticker-premium\">\n          <Icon name=\"star\" />\n        </div>\n      )}\n      {shouldShowCloseButton && (\n        <Button\n          className=\"sticker-remove-button\"\n          color=\"dark\"\n          round\n          noFastClick\n          onClick={handleRemoveClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      {Boolean(contextMenuItems.length) && (\n        <Menu\n          ref={menuRef}\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className=\"sticker-context-menu\"\n          autoClose\n          withPortal={isStatusPicker}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {contextMenuItems}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AVrrYEbM\",\"selected\":\"QkdO_lz1\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiReactionWithPaid } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../../config';\nimport { getDocumentMediaHash, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../helpers/animatedAssets';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../AnimatedIconWithPreview';\nimport CustomEmoji from '../CustomEmoji';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionWithPaid;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  sharedCanvasHqRef?: ElementRef<HTMLCanvasElement>;\n  forcePlayback?: boolean;\n  onClick: (reaction: ApiReactionWithPaid) => void;\n  onContextMenu?: (reaction: ApiReactionWithPaid) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  forcePlayback,\n  onClick,\n  onContextMenu,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const isCustom = reaction.type === 'custom';\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation, 'full') : undefined,\n    !animationId,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, reaction.type !== 'paid', undefined, undefined, undefined, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenu?.(reaction);\n\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, onContextMenu, handleContextMenuHide, isContextMenuOpen, reaction]);\n\n  const tgsUrl = reaction.type === 'paid' ? LOCAL_TGS_URLS.StarReaction : mediaData;\n  const handleClick = useLastCallback(() => {\n    onClick(reaction);\n  });\n\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n          forceAlways={forcePlayback}\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={tgsUrl}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n          forceAlways={forcePlayback}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiEmojiStatusType, ApiReactionWithPaid, ApiSticker,\n} from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport { getReactionKey } from '../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Icon from './icons/Icon';\nimport ReactionEmoji from './reactions/ReactionEmoji';\nimport StickerButton from './StickerButton';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isChatEmojiSet?: boolean;\n  isChatStickerSet?: boolean;\n  isTranslucent?: boolean;\n  noContextMenus?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  collectibleStatuses?: ApiEmojiStatusType[];\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps & StateProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isChatEmojiSet,\n  isChatStickerSet,\n  isTranslucent,\n  noContextMenus,\n  forcePlayback,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onReactionContext,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  collectibleStatuses,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransitionDeprecated(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isStatusCollectible = stickerSet.id === COLLECTIBLE_STATUS_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useLastCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  });\n\n  const handleAddClick = useLastCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  });\n\n  const handleDefaultTopicIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const handleDefaultStatusIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useLastCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  });\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  });\n\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isCurrentUserPremium && isPremiumSet && !isChatEmojiSet;\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID\n    && stickerSet.id !== POPULAR_SYMBOL_SET_ID && stickerSet.id !== EFFECT_EMOJIS_SET_ID\n    && stickerSet.id !== EFFECT_STICKERS_SET_ID && !isChatEmojiSet && !isChatStickerSet;\n\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = (withDefaultTopicIcon || withDefaultStatusIcon) ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const collectibleEmojiIdsSet = useMemo(() => (\n    collectibleStatuses ? new Set(collectibleStatuses.map(({ documentId }) => documentId)) : undefined\n  ), [collectibleStatuses]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && !isStatusCollectible\n    && isEmoji && !isPopular && !isChatEmojiSet\n    && (!isInstalled || (!isCurrentUserPremium && !isSavedMessages));\n  const addSetButtonText = useMemo(() => {\n    if (isLocked) {\n      if (isInstalled) return lang('lng_emoji_premium_restore');\n      return lang('Unlock');\n    }\n\n    return lang('Add');\n  }, [isLocked, lang, isInstalled]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-title', withAddSetButton && 'symbol-set-title-external')}>\n            {isLocked && <Icon name=\"lock-badge\" className=\"symbol-set-locked-icon\" />}\n            <span className=\"symbol-set-name\">{stickerSet.title}</span>\n            {(isChatEmojiSet || isChatStickerSet) && (\n              <span className=\"symbol-set-chat\">{lang(isChatEmojiSet ? 'GroupEmoji' : 'GroupStickers')}</span>\n            )}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">\n                {lang(isEmoji ? 'EmojiCount' : 'Stickers', stickerSet.stickers.length, 'i')}\n              </span>\n            )}\n          </p>\n          {isRecent && (\n            <Icon className=\"symbol-set-remove\" name=\"close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {addSetButtonText}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'symbol-set-container shared-canvas-container',\n          transitionClassNames,\n          stickerSet.id === EFFECT_EMOJIS_SET_ID && 'effect-emojis',\n        )}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" draggable={false} />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <Icon name=\"star\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              onContextMenu={onReactionContext}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n              forcePlayback={forcePlayback}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            const withSparkles = sticker.id === COLLECTIBLE_STATUS_SET_ID\n              || collectibleEmojiIdsSet?.has(sticker.id);\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                noContextMenu={noContextMenus}\n                isCurrentUserPremium={isCurrentUserPremium}\n                shouldIgnorePremium={isChatEmojiSet}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n                forcePlayback={forcePlayback}\n                isEffectEmoji={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n                noShowPremium={isCurrentUserPremium\n                  && (stickerSet.id === EFFECT_STICKERS_SET_ID || stickerSet.id === EFFECT_EMOJIS_SET_ID)}\n                withSparkles={withSparkles}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +\n            {totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return { collectibleStatuses };\n  },\n)(StickerSet));\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"lq8BD6Hc\",\"main\":\"p7c8y0LH\",\"hasHeader\":\"zTGriBHY\",\"main_customEmoji\":\"U0BL1VvK\",\"mainCustomEmoji\":\"U0BL1VvK\",\"header\":\"Qn3lBUNs\",\"headerWithBorder\":\"HMspKpNp\",\"stickerCover\":\"YKO0Obwy\",\"activated\":\"y02WwQk6\",\"pickerDisabled\":\"BZfaP1GD\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiEmojiStatusType,\n  ApiReaction, ApiReactionWithPaid, ApiSticker, ApiStickerSet,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChatFullInfo,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { pickTruthy, unique, uniqueByField } from '../../util/iteratees';\nimport { REM } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useScrolledState from '../../hooks/useScrolledState';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  pickerListClassName?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  collectibleStatuses?: ApiEmojiStatusType[];\n  chatEmojiSetId?: string;\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  isWithPaidReaction?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst RECENT_DEFAULT_STATUS_COUNT = 7;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  pickerListClassName,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  collectibleStatuses,\n  stickerSetsById,\n  chatEmojiSetId,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  defaultTagReactions,\n  isWithPaidReaction,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onReactionContext,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const collectibleStatusEmojis = useMemo(() => {\n    const collectibleStatusEmojiIds = collectibleStatuses?.map((status) => status.documentId);\n    return customEmojisById && collectibleStatusEmojiIds?.map((id) => customEmojisById[id]).filter(Boolean);\n  }, [customEmojisById, collectibleStatuses]);\n\n  const prefix = `${idPrefix}-custom-emoji`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const canLoadAndPlay = usePrevDuringAnimation(loadAndPlay || undefined, SLIDE_TRANSITION_DURATION);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker && isSavedMessages) {\n      if (defaultTagReactions?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('PremiumPreviewTags'),\n          reactions: defaultTagReactions,\n          count: defaultTagReactions.length,\n          isEmoji: true,\n        });\n      }\n    }\n\n    if (isReactionPicker && !isSavedMessages) {\n      const topReactionsSlice: ApiReactionWithPaid[] = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (isWithPaidReaction) {\n        topReactionsSlice.unshift({ type: 'paid' });\n      }\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .filter(({ isInactive }) => !isInactive)\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = uniqueByField(defaultStatusIconsPack.stickers\n          .slice(0, RECENT_DEFAULT_STATUS_COUNT)\n          .concat(recentCustomEmojis || []), 'id');\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n          isEmoji: true,\n        });\n      }\n      if (collectibleStatusEmojis?.length) {\n        defaultSets.push({\n          id: COLLECTIBLE_STATUS_SET_ID,\n          accessHash: '',\n          count: collectibleStatusEmojis.length,\n          stickers: collectibleStatusEmojis,\n          title: lang('CollectibleStatusesCategory'),\n          isEmoji: true,\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: oldLang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const userSetIds = [...(addedCustomEmojiIds || [])];\n    if (chatEmojiSetId) {\n      userSetIds.unshift(chatEmojiSetId);\n    }\n\n    const setIdsToDisplay = unique(userSetIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, oldLang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId, isSavedMessages, defaultTagReactions, chatEmojiSetId,\n    isWithPaidReaction, collectibleStatusEmojis, lang,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <Icon name=\"recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !canLoadAndPlay}\n              forcePlayback\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !canLoadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n        forcePlayback\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className={pickerStyles.pickerDisabled}>{oldLang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    pickerListClassName,\n    pickerStyles.hasHeader,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={listClassName}\n      >\n        {allSets.map((stickerSet, i) => {\n          const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n            || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n          const isChatEmojiSet = stickerSet.id === chatEmojiSetId;\n\n          return (\n            <StickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              loadAndPlay={Boolean(canAnimate && canLoadAndPlay)}\n              index={i}\n              idPrefix={prefix}\n              observeIntersection={observeIntersectionForSet}\n              observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n              observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n              isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n              isSavedMessages={isSavedMessages}\n              isStatusPicker={isStatusPicker}\n              isReactionPicker={isReactionPicker}\n              shouldHideHeader={shouldHideHeader}\n              withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              isChatEmojiSet={isChatEmojiSet}\n              isCurrentUserPremium={isCurrentUserPremium}\n              selectedReactionIds={selectedReactionIds}\n              availableReactions={availableReactions}\n              isTranslucent={isTranslucent}\n              onReactionSelect={onReactionSelect}\n              onReactionContext={onReactionContext}\n              onStickerSelect={handleEmojiSelect}\n              onContextMenuOpen={onContextMenuOpen}\n              onContextMenuClose={onContextMenuClose}\n              onContextMenuClick={onContextMenuClick}\n              forcePlayback\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      reactions: {\n        availableReactions,\n        recentReactions,\n        topReactions,\n        defaultTags,\n      },\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      customEmojisById,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      collectibleStatuses: isStatusPicker ? collectibleStatuses : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      chatEmojiSetId: chatFullInfo?.emojiSet?.id,\n      isWithPaidReaction: isReactionPicker && chatFullInfo?.isPaidReactionAvailable,\n      availableReactions: isReactionPicker ? availableReactions : undefined,\n      defaultTagReactions: isReactionPicker ? defaultTags : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qk9PEGRE\",\"activated\":\"WYeuJNQx\"};","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"hRzvfaRb\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: ElementRef<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"C9sWDINB\",\"topEmoji\":\"gdG3oY21\",\"description\":\"p7S4AH8A\",\"title\":\"KVpsce1g\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SuggestedStatusModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestedStatusModal'];\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n};\n\nconst CUSTOM_EMOJI_SIZE = 6 * REM;\n\nconst SuggestedStatusModal = ({ modal, currentUser, bot }: OwnProps & StateProps) => {\n  const { setEmojiStatus, closeSuggestedStatusModal, sendWebAppEvent } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !renderingModal) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: renderingModal.customEmojiId,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, renderingModal]);\n\n  const description = useMemo(() => {\n    if (!renderingModal || !bot) return undefined;\n\n    const botName = getUserFullName(bot);\n\n    if (renderingModal.duration) {\n      return lang('BotSuggestedStatusFor', {\n        bot: botName,\n        duration: formatShortDuration(lang, renderingModal.duration),\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n      });\n    }\n\n    return lang('BotSuggestedStatus', { bot: botName }, { withNodes: true, withMarkdown: true });\n  }, [bot, lang, renderingModal]);\n\n  const handleClose = useLastCallback(() => {\n    const webAppKey = renderingModal?.webAppKey;\n\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n      });\n    }\n\n    closeSuggestedStatusModal();\n  });\n\n  const handleSetStatus = useLastCallback(() => {\n    if (!renderingModal) return;\n\n    const expires = renderingModal.duration ? getServerTime() + renderingModal.duration : undefined;\n\n    setEmojiStatus({\n      referrerWebAppKey: renderingModal.webAppKey,\n      emojiStatus: { type: 'regular', documentId: renderingModal.customEmojiId, until: expires },\n    });\n    closeSuggestedStatusModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      contentClassName={styles.content}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      {renderingModal && (\n        <CustomEmoji\n          className={styles.topEmoji}\n          documentId={renderingModal.customEmojiId}\n          size={CUSTOM_EMOJI_SIZE}\n          loopLimit={1}\n          forceAlways\n        />\n      )}\n      <div>\n        <h3 className={styles.title}>{lang('BotSuggestedStatusTitle')}</h3>\n        <p className={styles.description}>{description}</p>\n      </div>\n      {mockPeerWithStatus && (\n        <PeerChip\n          mockPeer={mockPeerWithStatus}\n          withEmojiStatus\n        />\n      )}\n      <Button size=\"smaller\" onClick={handleSetStatus}>\n        {lang('GeneralConfirm')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const bot = modal?.botId ? selectUser(global, modal.botId) : undefined;\n\n    return {\n      currentUser,\n      bot,\n    };\n  },\n)(SuggestedStatusModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"pUyNTysT\",\"modal\":\"IK2mBqbm\",\"loading\":\"zjXCH3pT\",\"description\":\"j6xEoljc\",\"bold\":\"hAA6B1lc\",\"chip\":\"smWR78pO\",\"replaceModal\":\"GIFAjZPY\",\"replaceModalContent\":\"Jxyz9TaL\",\"avatarContainer\":\"OKp6HS1U\",\"arrow\":\"WSJdWV7L\",\"boostedWrapper\":\"NU9itcIm\",\"boostedMark\":\"upXvhNRY\"};","import { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiMyBoost } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getChatTitle, isChatAdmin, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\n\nimport styles from './BoostModal.module.scss';\n\ntype LoadedParams = {\n  boost?: ApiMyBoost;\n  leftText: string;\n  rightText?: string;\n  value: string;\n  progress: number;\n  descriptionText: string;\n  isBoosted?: boolean;\n  canBoostMore?: boolean;\n};\n\ntype BoostInfo = ({\n  isStatusLoaded: false;\n  title: string;\n} & Undefined<LoadedParams>) | ({\n  isStatusLoaded: true;\n  title: string;\n} & LoadedParams);\n\nexport type OwnProps = {\n  modal: TabState['boostModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  prevBoostedChat?: ApiChat;\n  isCurrentUserPremium?: boolean;\n};\n\nconst BoostModal = ({\n  modal,\n  chat,\n  chatFullInfo,\n  prevBoostedChat,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    applyBoost,\n    closeBoostModal,\n    requestConfetti,\n    openPremiumModal,\n    loadFullChat,\n  } = getActions();\n\n  const [isReplaceModalOpen, openReplaceModal, closeReplaceModal] = useFlag();\n  const [isWaitDialogOpen, openWaitDialog, closeWaitDialog] = useFlag();\n  const [isPremiumDialogOpen, openPremiumDialog, closePremiumDialog] = useFlag();\n\n  const isChannel = chat && isChatChannel(chat);\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (chat && !chatFullInfo) {\n      loadFullChat({ chatId: chat.id });\n    }\n  }, [chat, chatFullInfo]);\n\n  const chatTitle = useMemo(() => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, chat);\n  }, [chat, oldLang]);\n\n  const boostedChatTitle = useMemo(() => {\n    if (!prevBoostedChat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, prevBoostedChat);\n  }, [prevBoostedChat, oldLang]);\n\n  const {\n    isStatusLoaded,\n    isBoosted,\n    boost,\n    title,\n    leftText,\n    rightText,\n    value,\n    progress,\n    descriptionText,\n    canBoostMore,\n  }: BoostInfo = useMemo(() => {\n    if (!modal?.boostStatus || !chat) {\n      return {\n        isStatusLoaded: false,\n        title: oldLang('Loading'),\n      };\n    }\n\n    const {\n      hasMyBoost,\n    } = modal.boostStatus;\n\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, chat.id);\n    const areBoostsInDifferentChannels = modal?.myBoosts && !areAllBoostsInChannel(modal.myBoosts, chat.id);\n\n    const {\n      boosts,\n      currentLevel,\n      hasNextLevel,\n      levelProgress,\n      remainingBoosts,\n      isMaxLevel,\n    } = getBoostProgressInfo(modal.boostStatus, true);\n\n    const hasBoost = hasMyBoost;\n\n    const left = oldLang('BoostsLevel', currentLevel);\n    const right = hasNextLevel ? oldLang('BoostsLevel', currentLevel + 1) : undefined;\n\n    const moreBoosts = oldLang('ChannelBoost.MoreBoosts', remainingBoosts);\n\n    const modalTitle = isChannel ? oldLang('BoostChannel') : oldLang('BoostGroup');\n\n    const boostsLeftToUnrestrict = (chatFullInfo?.boostsToUnrestrict || 0) - (chatFullInfo?.boostsApplied || 0);\n\n    let description: string | undefined;\n    if (isMaxLevel) {\n      description = oldLang('BoostsMaxLevelReached');\n    } else if (boostsLeftToUnrestrict > 0 && !isChatAdmin(chat)) {\n      const boostTimes = oldLang('GroupBoost.BoostToUnrestrict.Times', boostsLeftToUnrestrict);\n      description = oldLang('GroupBoost.BoostToUnrestrict', [boostTimes, chatTitle]);\n    } else {\n      description = oldLang('ChannelBoost.MoreBoostsNeeded.Text', [chatTitle, moreBoosts]);\n    }\n\n    return {\n      isStatusLoaded: true,\n      title: modalTitle,\n      leftText: left,\n      rightText: right,\n      value: boosts.toString(),\n      progress: levelProgress,\n      remainingBoosts,\n      descriptionText: description,\n      boost: firstBoost,\n      isBoosted: hasBoost,\n      canBoostMore: areBoostsInDifferentChannels && !isMaxLevel,\n    };\n  }, [chat, chatTitle, modal, oldLang, chatFullInfo, isChannel]);\n\n  const isBoostDisabled = !modal?.myBoosts?.length && isCurrentUserPremium;\n  const isReplacingBoost = boost?.chatId && boost.chatId !== modal?.chatId;\n\n  const handleApplyBoost = useLastCallback(() => {\n    closeReplaceModal();\n    applyBoost({ chatId: chat!.id, slots: [boost!.slot] });\n    requestConfetti({});\n  });\n\n  const handleProceedPremium = useLastCallback(() => {\n    openPremiumModal();\n    closePremiumDialog();\n    closeBoostModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!boost) {\n      if (!isCurrentUserPremium) {\n        openPremiumDialog();\n        return;\n      }\n\n      closeBoostModal();\n      return;\n    }\n\n    if (!canBoostMore) {\n      closeBoostModal();\n      return;\n    }\n\n    if (boost.cooldownUntil) {\n      openWaitDialog();\n      return;\n    }\n\n    if (isReplacingBoost) {\n      openReplaceModal();\n      return;\n    }\n\n    handleApplyBoost();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeBoostModal();\n  });\n\n  function renderContent() {\n    if (!isStatusLoaded) {\n      return <Loading className={styles.loading} />;\n    }\n\n    return (\n      <>\n        <PremiumProgress\n          leftText={leftText}\n          rightText={rightText}\n          progress={progress}\n          floatingBadgeText={value}\n          floatingBadgeIcon=\"boost\"\n        />\n        {isBoosted && (\n          <div className={buildClassName(styles.description, styles.bold)}>\n            {oldLang('ChannelBoost.YouBoostedChannelText', chatTitle)}\n          </div>\n        )}\n        <div className={styles.description}>\n          {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n        </div>\n        <div className=\"dialog-buttons\">\n          <Button isText className=\"confirm-dialog-button\" disabled={isBoostDisabled} onClick={handleButtonClick}>\n            {canBoostMore ? (\n              <>\n                <Icon name=\"boost\" />\n                {oldLang(isChannel ? 'ChannelBoost.BoostChannel' : 'GroupBoost.BoostGroup')}\n              </>\n            ) : oldLang('OK')}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={handleCloseClick}>\n            {oldLang('Cancel')}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      className={styles.modal}\n      contentClassName={styles.content}\n      onClose={closeBoostModal}\n    >\n      {renderContent()}\n      {isReplacingBoost && boostedChatTitle && (\n        <Modal\n          isOpen={isReplaceModalOpen}\n          className={styles.replaceModal}\n          contentClassName={styles.replaceModalContent}\n          onClose={closeReplaceModal}\n        >\n          <div className={styles.avatarContainer}>\n            <div className={styles.boostedWrapper}>\n              <Avatar peer={prevBoostedChat} size=\"large\" />\n              <Icon name=\"boostcircle\" className={styles.boostedMark} />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar peer={chat} size=\"large\" />\n          </div>\n          <div>\n            {renderText(\n              oldLang('ChannelBoost.ReplaceBoost', [boostedChatTitle, chatTitle]), ['simple_markdown', 'emoji'],\n            )}\n          </div>\n          <div className=\"dialog-buttons\">\n            <Button isText className=\"confirm-dialog-button\" onClick={handleApplyBoost}>\n              {oldLang('Replace')}\n            </Button>\n            <Button isText className=\"confirm-dialog-button\" onClick={closeReplaceModal}>\n              {oldLang('Cancel')}\n            </Button>\n          </div>\n        </Modal>\n      )}\n      {Boolean(boost?.cooldownUntil) && (\n        <ConfirmDialog\n          isOpen={isWaitDialogOpen}\n          isOnlyConfirm\n          confirmLabel={oldLang('OK')}\n          title={oldLang('ChannelBoost.Error.BoostTooOftenTitle')}\n          onClose={closeWaitDialog}\n          confirmHandler={closeWaitDialog}\n        >\n          {renderText(\n            oldLang(\n              'ChannelBoost.Error.BoostTooOftenText',\n              formatShortDuration(lang, boost.cooldownUntil - getServerTime()),\n            ),\n            ['simple_markdown', 'emoji'],\n          )}\n        </ConfirmDialog>\n      )}\n      {!isCurrentUserPremium && (\n        <ConfirmDialog\n          isOpen={isPremiumDialogOpen}\n          confirmLabel={oldLang('Common.Yes')}\n          title={oldLang('PremiumNeeded')}\n          onClose={closePremiumDialog}\n          confirmHandler={handleProceedPremium}\n        >\n          {renderText(oldLang('PremiumNeededForBoosting'), ['simple_markdown', 'emoji'])}\n        </ConfirmDialog>\n      )}\n    </Modal>\n  );\n};\n\nfunction getFirstAvailableBoost(myBoosts: ApiMyBoost[], chatId?: string) {\n  return myBoosts.find((boost) => !boost.chatId)\n    || myBoosts.filter((b) => chatId && b.chatId !== chatId)\n      .sort((a, b) => a.date - b.date)[0];\n}\n\nfunction areAllBoostsInChannel(myBoosts: ApiMyBoost[], chatId: string) {\n  return myBoosts.every((boost) => boost.chatId === chatId);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal && selectChat(global, modal?.chatId);\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, modal.chatId);\n    const boostedChat = firstBoost?.chatId ? selectChat(global, firstBoost?.chatId) : undefined;\n\n    return {\n      chat,\n      chatFullInfo,\n      prevBoostedChat: boostedChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(BoostModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"clickable\":\"IzcASdzD\",\"centered\":\"xVLGjLub\",\"logo\":\"Mtx4SWww\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { selectChatMessage, selectSender } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport TableInfoModal, { type TableData } from '../common/TableInfoModal';\n\nimport styles from './GiftCodeModal.module.scss';\n\nimport PremiumLogo from '../../../assets/premium/PremiumStar.svg';\n\nexport type OwnProps = {\n  modal: TabState['giftCodeModal'];\n};\n\nexport type StateProps = {\n  currentUserId?: string;\n  messageSender?: ApiPeer;\n};\n\nconst GIFTCODE_PATH = 'giftcode';\n\nconst GiftCodeModal = ({\n  currentUserId,\n  modal,\n  messageSender,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, applyGiftCode, focusMessage,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const canUse = (!modal?.info.toId || modal?.info.toId === currentUserId) && !modal?.info.usedAt;\n\n  const handleOpenGiveaway = useLastCallback(() => {\n    if (!modal || !modal.info.giveawayMessageId) return;\n    focusMessage({\n      chatId: modal.info.fromId!,\n      messageId: modal.info.giveawayMessageId,\n    });\n    closeGiftCodeModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (canUse) {\n      applyGiftCode({ slug: modal!.slug });\n      return;\n    }\n    closeGiftCodeModal();\n  });\n\n  const modalData = useMemo(() => {\n    if (!modal) return undefined;\n    const { slug, info } = modal;\n\n    const fromId = info.fromId || messageSender?.id;\n\n    const header = (\n      <>\n        <img src={PremiumLogo} alt=\"\" className={styles.logo} />\n        <p className={styles.centered}>{renderText(lang('lng_gift_link_about'), ['simple_markdown'])}</p>\n        <LinkField title=\"BoostingGiftLink\" link={`${TME_LINK_PREFIX}/${GIFTCODE_PATH}/${slug}`} />\n      </>\n    );\n\n    const tableData: TableData = [\n      [lang('BoostingFrom'), fromId ? { chatId: fromId } : lang('BoostingNoRecipient')],\n      [lang('BoostingTo'), info.toId ? { chatId: info.toId } : lang('BoostingNoRecipient')],\n      [lang('BoostingGift'), lang('BoostingTelegramPremiumFor', lang('Months', info.months, 'i'))],\n    ];\n    if (info.isFromGiveaway) {\n      tableData.push([\n        lang('BoostingReason'),\n        (\n          <span\n            className={buildClassName(info.giveawayMessageId && styles.clickable)}\n            onClick={handleOpenGiveaway}\n          >\n            {info.isFromGiveaway && !info.toId\n              ? lang('BoostingIncompleteGiveaway')\n              : lang('BoostingGiveaway')}\n          </span>\n        ),\n      ]);\n    }\n    tableData.push([\n      lang('BoostingDate'),\n      formatDateTimeToString(info.date * 1000, lang.code, true),\n    ]);\n\n    const footer = (\n      <span className={styles.centered}>\n        {renderText(\n          info.usedAt ? lang('BoostingUsedLinkDate', formatDateTimeToString(info.usedAt * 1000, lang.code, true))\n            : lang('BoostingSendLinkToAnyone'),\n          ['simple_markdown'],\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [lang, messageSender?.id, modal]);\n\n  if (!modalData) return undefined;\n\n  return (\n    <TableInfoModal\n      isOpen={isOpen}\n      title={lang('lng_gift_link_title')}\n      tableData={modalData.tableData}\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={canUse ? lang('BoostingUseLink') : lang('Close')}\n      onButtonClick={handleButtonClick}\n      onClose={closeGiftCodeModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { message } = modal || {};\n    const chatMessage = message && selectChatMessage(global, message.chatId, message.messageId);\n    const sender = chatMessage && selectSender(global, chatMessage);\n\n    return {\n      currentUserId: global.currentUserId,\n      messageSender: sender,\n    };\n  },\n)(GiftCodeModal));\n","export function getClosestEntry(arr: number[], value: number): number {\n  return arr.reduce((prev, curr) => {\n    return Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev;\n  });\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"X6K5oA8U\"};","import { memo, useEffect, useMemo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config.ts';\nimport { getClosestEntry } from '../../../util/getClosestEntry.ts';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup.tsx';\n\nimport styles from './DeleteAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['deleteAccountModal'];\n};\n\nexport type StateProps = {\n  selfDestructAccountDays?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst DeleteAccountModal = ({\n  modal,\n  selfDestructAccountDays,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, closeDeleteAccountModal, setAccountTTL,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const [selectedOption, setSelectedOption] = useState<string>();\n\n  const optionToDays = useLastCallback((value: string): number => {\n    return Number(value) * DAYS_PER_MONTH;\n  });\n\n  const initialSelectedOption = useMemo(() => {\n    if (!selfDestructAccountDays) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, selfDestructAccountDays / DAYS_PER_MONTH).toString();\n  }, [selfDestructAccountDays]);\n\n  useEffect(() => {\n    if (initialSelectedOption) {\n      setSelectedOption(initialSelectedOption);\n    }\n  }, [initialSelectedOption]);\n\n  const options: { value: string; label: string }[] = useMemo(() => {\n    return ACCOUNT_TTL_OPTIONS.map((months) => ({\n      value: String(months),\n      label: lang('Months', { count: months }, { pluralValue: 1 }),\n    }));\n  }, [lang]);\n\n  const handleChange = useLastCallback((value: string) => {\n    setSelectedOption(value);\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!selectedOption) return;\n    setAccountTTL({ days: optionToDays(selectedOption) });\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteAccountModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={lang('SelfDestructTitle')}\n      onClose={closeGiftCodeModal}\n      className={styles.root}\n    >\n      <p>{lang('SelfDestructSessionsDescription')}</p>\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedOption}\n        onChange={handleChange}\n        withIcon\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n        >\n          {lang('Save')}\n        </Button>\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { selfDestructAccountDays } = modal || {};\n\n    return {\n      selfDestructAccountDays,\n    };\n  },\n)(DeleteAccountModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OviJR58x\",\"content\":\"BlpqzGYt\",\"header\":\"b9RUzfpF\",\"iconWrapper\":\"l1X5kBUM\",\"icon\":\"qOoRnv_Y\",\"mainText\":\"s2SOQSml\",\"description\":\"wiKBjcl2\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './AgeVerificationModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['isAgeVerificationModalOpen'];\n};\n\ntype StateProps = {\n  verifyAgeBotUsername?: string;\n};\n\nconst AGE_REQUIRED = 18;\n\nconst AgeVerificationModal: FC<OwnProps & StateProps> = ({\n  modal,\n  verifyAgeBotUsername,\n}) => {\n  const { closeAgeVerificationModal, openChatByUsername } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n  const ageRequired = AGE_REQUIRED;\n\n  const handleVerifyAge = useLastCallback(() => {\n    if (verifyAgeBotUsername) {\n      openChatByUsername({\n        shouldStartMainApp: true,\n        username: verifyAgeBotUsername,\n      });\n    }\n    closeAgeVerificationModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeAgeVerificationModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className={styles.root}\n    >\n      <div className={styles.content}>\n        <div className={styles.header}>\n          <div className={styles.iconWrapper}>\n            <Icon name=\"user\" className={styles.icon} />\n          </div>\n        </div>\n        <h2 className={styles.title}>\n          {lang('TitleAgeVerificationModal')}\n        </h2>\n        <p className={styles.mainText}>\n          {lang('TextAgeVerificationModal', { count: ageRequired }, {\n            withMarkdown: true,\n            withNodes: true,\n            pluralValue: ageRequired,\n          })}\n        </p>\n        <p className={styles.description}>\n          {lang('DescriptionAgeVerificationModal')}\n        </p>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          onClick={handleVerifyAge}\n        >\n          {lang('ButtonAgeVerification')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const appConfig = global.appConfig;\n  const verifyAgeBotUsername = appConfig?.verifyAgeBotUsername;\n\n  return {\n    verifyAgeBotUsername,\n  };\n})(AgeVerificationModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"dl10exNi\",\"picker-wrapper\":\"gxWY5c6x\",\"pickerWrapper\":\"gxWY5c6x\",\"picker-header\":\"h8N7eyob\",\"pickerHeader\":\"h8N7eyob\",\"picker-header-info\":\"Rth2Qu07\",\"pickerHeaderInfo\":\"Rth2Qu07\",\"selection-toggle\":\"B6eAugx8\",\"selectionToggle\":\"B6eAugx8\",\"foldersWrapper\":\"mwcvgD2S\",\"folders\":\"LKavx8ww\",\"folder\":\"qglLx5Dn\",\"button-text\":\"bgaRuEMs\",\"buttonText\":\"bgaRuEMs\",\"button-badge\":\"rTe14Z22\",\"buttonBadge\":\"rTe14Z22\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const isNew = invite.alreadyPeerIds.length === 0;\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = isNew ? lang('FolderLinkSubtitleNew')\n    : newChatsCount ? lang('FolderLinkSubtitleAdd', {\n      chats: lang('FolderLinkSubtitleAddCount', { count: newChatsCount }, { pluralValue: newChatsCount }),\n      title: renderTextWithEntities({\n        text: folder.title.text,\n        entities: folder.title.entities,\n        noCustomEmojiPlayback: folder.noTitleAnimations,\n      }),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    }) : lang('FolderLinkSubtitleAlready');\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {oldLang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length\n                  ? oldLang('DeselectAll') : oldLang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.alreadyPeerIds}\n          lockedSelectedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && oldLang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {oldLang('FolderLinkButtonJoinPlural', selectedPeerIds.length, 'i')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>([]);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </div>\n        </>\n      )}\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {lang('FolderLinkSubtitleNew')}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? oldLang('DeselectAll') : oldLang('SelectAll')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.peerIds}\n          lockedSelectedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        size=\"smaller\"\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkAddFolder')}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport ChatlistNew from './ChatlistNew';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  modal?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  modal,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(modal);\n  const renderingInfo = usePreviousDeprecated(modal) || modal;\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) {\n      return renderTextWithEntities({\n        text: renderingFolder.title.text,\n        entities: renderingFolder.title.entities,\n        noCustomEmojiPlayback: renderingFolder.noTitleAnimations,\n      });\n    }\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) {\n      return renderTextWithEntities({\n        text: renderingInfo.invite.title.text,\n        entities: renderingInfo.invite.title.entities,\n        noCustomEmojiPlayback: renderingInfo.invite.noTitleAnimations,\n      });\n    }\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: TeactNode) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab\n            className={styles.folder}\n            isActive\n            badgeCount={folderTabNumber}\n            isBadgeActive\n            title={folderTitle}\n          />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { invite, removal } = modal || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MZ0RCecx\",\"title\":\"ar8XeydN\",\"participantCount\":\"un00TXYY\",\"participants\":\"YvkZ6c2D\",\"participant\":\"DHJSBDeE\",\"buttons\":\"KFtrPtNr\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport PeerBadge from '../../common/PeerBadge';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './ChatInviteModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['chatInviteModal'];\n};\n\nconst ChatInviteModal = ({ modal }: OwnProps) => {\n  const { acceptChatInvite, closeChatInviteModal, showNotification } = getActions();\n  const participantsRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const prevModal = usePrevious(modal);\n  const { hash, inviteInfo } = modal || prevModal || {};\n  const {\n    about, isBroadcast, participantIds, participantsCount, photo, isRequestNeeded,\n  } = inviteInfo || {};\n\n  const handleClose = useLastCallback(() => {\n    closeChatInviteModal();\n  });\n\n  const handleAccept = useLastCallback(() => {\n    acceptChatInvite({ hash: hash! });\n\n    if (isRequestNeeded) {\n      showNotification({\n        message: isBroadcast ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n\n    handleClose();\n  });\n\n  const acceptLangKey = isBroadcast ? 'ProfileJoinChannel' : 'JoinGroup';\n  const requestToJoinLangKey = isBroadcast ? 'MemberRequests.RequestToJoinChannel'\n    : 'MemberRequests.RequestToJoinGroup';\n\n  const customPeer = useMemo(() => {\n    if (!inviteInfo) return undefined;\n\n    return getCustomPeerFromInvite(inviteInfo);\n  }, [inviteInfo]);\n\n  const participants = useMemo(() => {\n    if (!participantIds) {\n      return undefined;\n    }\n\n    const global = getGlobal();\n    return participantIds.map((id) => selectUser(global, id)).filter(Boolean);\n  }, [participantIds]);\n\n  useHorizontalScroll(participantsRef, !modal || !participants);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      contentClassName={styles.content}\n      isSlim\n      onClose={handleClose}\n      onEnter={handleAccept}\n    >\n      {customPeer && <Avatar size=\"jumbo\" photo={photo} peer={customPeer} withVideo />}\n      {customPeer && <FullNameTitle className={styles.title} peer={customPeer} />}\n      {about && <p className={styles.about}>{about}</p>}\n      <p className={styles.participantCount}>\n        {lang(isBroadcast ? 'Subscribers' : 'Members', participantsCount, 'i')}\n      </p>\n      {participants && (\n        <div ref={participantsRef} className={buildClassName(styles.participants, 'no-scrollbar')}>\n          {participants.map((participant) => (\n            <PeerBadge className={styles.participant} peer={participant} text={getUserFullName(participant)} />\n          ))}\n        </div>\n      )}\n      <div className={buildClassName('dialog-buttons', styles.buttons)}>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleAccept}>\n          {lang(isRequestNeeded ? requestToJoinLangKey : acceptLangKey)}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ChatInviteModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LFkgLoAk\",\"title\":\"La4sUYaq\",\"description\":\"Bn5kz5br\",\"moreButton\":\"JdN5pGTw\",\"secondary\":\"hbsLlXSH\",\"content\":\"TZE15Pt_\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { TableAboutData } from '../common/TableAboutModal';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport TableAboutModal from '../common/TableAboutModal';\n\nimport styles from './AboutAdsModal.module.scss';\n\nexport type OwnProps = {\n\n  modal: TabState['aboutAdsModal'];\n};\n\ntype StateProps = {\n  minLevelToRestrictAds?: number;\n};\n\nconst AboutAdsModal = ({ modal, minLevelToRestrictAds }: OwnProps & StateProps) => {\n  const { closeAboutAdsModal } = getActions();\n\n  const moreMenuRef = useRef<HTMLButtonElement>();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const {\n    canReport, randomId, additionalInfo, sponsorInfo,\n  } = renderingModal || {};\n  const isMonetizationSharing = canReport;\n\n  const renderingIsNewDesign = useCurrentOrPrev(isMonetizationSharing);\n\n  const oldLang = useOldLang();\n\n  const regularAdContent = useMemo(() => {\n    return (\n      <>\n        <h3>{oldLang('SponsoredMessageInfoScreen.Title')}</h3>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n        <p>\n          <SafeLink\n            url={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n            text={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n          />\n        </p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      </>\n    );\n  }, [oldLang]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(moreMenuRef, !renderingIsNewDesign);\n\n  const handleClose = useLastCallback(() => {\n    closeAboutAdsModal();\n    handleContextMenuClose();\n    handleContextMenuHide();\n  });\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <>\n        <h3 className={styles.title}>{oldLang('AboutRevenueSharingAds')}</h3>\n        <p className={buildClassName(styles.description, styles.secondary)}>\n          {oldLang('RevenueSharingAdsAlertSubtitle')}\n        </p>\n        <Button\n          ref={moreMenuRef}\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className={styles.moreButton}\n          onClick={handleContextMenu}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      </>\n    );\n\n    const listItemData = [\n      ['lock', oldLang('RevenueSharingAdsInfo1Title'),\n        renderText(oldLang('RevenueSharingAdsInfo1Subtitle'), ['simple_markdown'])],\n      ['revenue-split', oldLang('RevenueSharingAdsInfo2Title'),\n        renderText(oldLang('RevenueSharingAdsInfo2Subtitle'), ['simple_markdown'])],\n      ['nochannel', oldLang('RevenueSharingAdsInfo3Title'),\n        renderText(oldLang('RevenueSharingAdsInfo3Subtitle', minLevelToRestrictAds), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{renderText(oldLang('RevenueSharingAdsInfo4Title'), ['simple_markdown'])}</h3>\n        <p className={styles.description}>\n          {renderText(oldLang('RevenueSharingAdsInfo4Subtitle2', ''), ['simple_markdown'])}\n          <SafeLink\n            url={oldLang('PromoteUrl')}\n            text={oldLang('LearnMoreArrow')}\n          />\n        </p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, handleContextMenu, minLevelToRestrictAds]);\n\n  if (renderingIsNewDesign) {\n    return (\n      <>\n        <TableAboutModal\n          isOpen={isOpen}\n          listItemData={modalData?.listItemData}\n          headerIconName=\"channel\"\n          withSeparator\n          header={modalData?.header}\n          footer={modalData?.footer}\n          buttonText={oldLang('RevenueSharingAdsUnderstood')}\n          onClose={handleClose}\n        />\n        {contextMenuAnchor && randomId && (\n          <SponsoredMessageContextMenuContainer\n            isOpen={isContextMenuOpen}\n            anchor={contextMenuAnchor}\n            triggerRef={moreMenuRef}\n            randomId={randomId}\n            additionalInfo={additionalInfo}\n            canReport={canReport}\n            sponsorInfo={sponsorInfo}\n            shouldSkipAbout\n            onItemClick={handleClose}\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      {regularAdContent}\n      <Button\n        size=\"smaller\"\n        onClick={handleClose}\n      >\n        {oldLang('RevenueSharingAdsUnderstood')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const minLevelToRestrictAds = global.appConfig?.channelRestrictAdsLevelMin;\n\n    return {\n      minLevelToRestrictAds,\n    };\n  },\n)(AboutAdsModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"t9iZUzOj\",\"description\":\"mjveZmdr\",\"toncoin\":\"ATkOSqJ7\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\n\nimport type { TableAboutData } from '../modals/common/TableAboutModal';\n\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TableAboutModal from '../modals/common/TableAboutModal';\nimport Icon from './icons/Icon';\nimport SafeLink from './SafeLink';\n\nimport styles from './AboutMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\nconst AboutMonetizationModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const blockchainText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnLearnCoinAbout',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationInfoTONLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const monetizationTitle = useMemo(() => {\n    return lang(\n      'MonetizationInfoTONTitle',\n      undefined,\n      {\n        withNodes: true,\n        specialReplacement: { '💎': <Icon className={styles.toncoin} name=\"toncoin\" /> },\n      },\n    );\n  }, [lang]);\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <h3 className={styles.title}>{oldLang('lng_channel_earn_learn_title')}</h3>\n    );\n\n    const listItemData = [\n      ['channel', oldLang('lng_channel_earn_learn_in_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_in_about'), ['simple_markdown'])],\n      ['revenue-split', oldLang('lng_channel_earn_learn_split_subtitle'),\n        renderText(oldLang('Monetization.Intro.Split.Text'), ['simple_markdown'])],\n      ['cash-circle', oldLang('lng_channel_earn_learn_out_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_out_about'), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{monetizationTitle}</h3>\n        <p className={styles.description}>{blockchainText}</p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, monetizationTitle, blockchainText]);\n\n  if (!modalData) {\n    return undefined;\n  }\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      listItemData={modalData.listItemData}\n      headerIconName=\"cash-circle\"\n      withSeparator\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={oldLang('RevenueSharingAdsUnderstood')}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(AboutMonetizationModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WqeWhMAS\",\"content\":\"oofoCYlu\"};","import {\n  memo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Modal from '../ui/Modal';\nimport PasswordForm from './PasswordForm';\n\nimport styles from './VerificationMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['monetizationVerificationModal'];\n};\n\ntype StateProps = {\n  passwordHint?: string;\n};\n\nconst VerificationMonetizationModal = ({\n  modal,\n  passwordHint,\n}: OwnProps & StateProps) => {\n  const {\n    closeMonetizationVerificationModal, clearMonetizationVerificationError, processMonetizationRevenueWithdrawalUrl,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useLastCallback((password: string) => {\n    if (!renderingModal) return;\n    processMonetizationRevenueWithdrawalUrl({\n      peerId: renderingModal.chatId,\n      currentPassword: password,\n    });\n  });\n\n  const handleClearError = useLastCallback(() => {\n    clearMonetizationVerificationError();\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeMonetizationVerificationModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('CheckPasswordTitle')}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      <div className={buildClassName(styles.content, 'settings-content password-form custom-scroll')}>\n        <div className=\"settings-item pt-0\">\n          <PasswordForm\n            shouldShowSubmit\n            placeholder={lang('CheckPasswordPlaceholder')}\n            error={renderingModal?.errorKey && lang.withRegular(renderingModal.errorKey)}\n            description={lang('CheckPasswordDescription')}\n            clearError={handleClearError}\n            isLoading={renderingModal?.isLoading}\n            hint={passwordHint}\n            isPasswordVisible={shouldShowPassword}\n            shouldResetValue={isOpen}\n            onChangePasswordVisibility={setShouldShowPassword}\n            onSubmit={handleSubmit}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n\n    return {\n      passwordHint,\n    };\n  },\n)(VerificationMonetizationModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MKdSUg2P\",\"chatItem\":\"qEIwBtp0\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './EmojiStatusAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['emojiStatusAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n  stickerSet?: ApiStickerSet;\n  isPremium?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nconst INTERVAL = 3200;\n\nconst EmojiStatusAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n  stickerSet,\n  isPremium,\n  isAccountFrozen,\n}) => {\n  const {\n    closeEmojiStatusAccessModal,\n    toggleUserEmojiStatusPermission,\n    sendWebAppEvent,\n    openPremiumModal,\n    loadDefaultStatusIcons,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [currentStatusIndex, setCurrentStatusIndex] = useState<number>(0);\n\n  useEffect(() => {\n    if (isOpen && !stickerSet?.stickers && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n    }\n  }, [isOpen, stickerSet, isAccountFrozen]);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !stickerSet?.stickers) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: stickerSet.stickers[currentStatusIndex].id,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, stickerSet, currentStatusIndex]);\n\n  const totalCount = stickerSet?.stickers?.length;\n  useInterval(\n    () => {\n      if (!totalCount) return;\n      setCurrentStatusIndex((prevIndex) => (prevIndex + 1) % totalCount);\n    },\n    totalCount ? INTERVAL : undefined,\n  );\n\n  const renderPickerItem = useLastCallback(() => {\n    return (\n      <PeerChip\n        withEmojiStatus\n        className={styles.chatItem}\n        itemClassName={styles.itemName}\n        mockPeer={mockPeerWithStatus}\n      />\n    );\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      if (isPremium) {\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'allowed',\n            },\n          },\n        });\n        toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: true, isBotAccessEmojiGranted: true });\n      } else {\n        openPremiumModal();\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'cancelled',\n            },\n          },\n        });\n      }\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'emoji_status_access_requested',\n          eventData: {\n            status: 'cancelled',\n          },\n        },\n      });\n    }\n    if (isPremium) {\n      toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: false });\n    }\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('EmojiStatusAccessText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      contentClassName={styles.content}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderPickerItem()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const isPremium = selectIsCurrentUserPremium(global);\n    const stickerSet = global.defaultStatusIconsId ? selectStickerSet(global, global.defaultStatusIconsId) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUser,\n      stickerSet,\n      isPremium,\n      isAccountFrozen,\n    };\n  },\n)(EmojiStatusAccessModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { getGeolocationStatus } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './LocationAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['locationAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst LocationAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n}) => {\n  const {\n    closeLocationAccessModal, toggleUserLocationPermission, sendWebAppEvent,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const confirmHandler = useLastCallback(async () => {\n    const geolocationData = await getGeolocationStatus();\n    const { geolocation } = geolocationData;\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: true,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: true,\n            latitude: geolocation?.latitude,\n            longitude: geolocation?.longitude,\n            altitude: geolocation?.altitude,\n            course: geolocation?.heading,\n            speed: geolocation?.speed,\n            horizontal_accuracy: geolocation?.accuracy,\n            vertical_accuracy: geolocation?.accuracy,\n          },\n        },\n      });\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: false,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: false,\n          },\n        },\n      });\n    }\n  });\n\n  const renderInfo = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return (\n      <div className={styles.avatars}>\n        <Avatar\n          size=\"large\"\n          peer={currentUser}\n        />\n        <Icon name=\"next\" className={styles.arrow} />\n        <Avatar\n          size=\"large\"\n          peer={modal.bot}\n        />\n      </div>\n    );\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('LocationPermissionText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderInfo()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n\n    return {\n      currentUser,\n    };\n  },\n)(LocationAccessModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatars\":\"CGPoDaLo\",\"arrow\":\"pzERgD5x\"};","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"qJDgUtjV\",\"root\":\"njPBcVYr\",\"modalTitle\":\"ZAdG13Ah\",\"optionText\":\"oWujoaSC\",\"option\":\"aFbjDzNo\",\"optionButton\":\"VbE0HzDs\",\"sectionTitle\":\"jrA2dOiw\",\"description\":\"k71Zrc_P\",\"title\":\"mMmY6YR4\",\"titleMultiline\":\"lVVyV0py\",\"subtitle\":\"gSkAFc4u\",\"transition\":\"HjsGIG6e\"};","import {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportAdModal.module.scss';\n\nconst ADDED_PADDING = 56;\n\nexport type OwnProps = {\n  modal: TabState['reportAdModal'];\n};\n\nconst ReportAdModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportSponsored, closeReportAdModal, openPreviousReportAdModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const { chatId, randomId } = modal!;\n    reportSponsored({ peerId: chatId, randomId, option });\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    if (!renderingDepth) {\n      closeReportAdModal();\n      return;\n    }\n\n    openPreviousReportAdModal();\n  });\n\n  const bottomText = useMemo(() => {\n    if (!modal) return undefined;\n    const template = lang('lng_report_sponsored_reported_learn');\n    const parts = template.split('{link}');\n    return [\n      parts[0],\n      <SafeLink\n        text={lang('lng_report_sponsored_reported_link')}\n        url={lang('ReportAd.Help_URL')}\n      />,\n      parts[1],\n    ];\n  }, [lang, modal]);\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(renderingDepth ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <Icon name={renderingDepth ? 'arrow-left' : 'close'} />\n        </Button>\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={styles.title}>{lang('ReportAd')}</h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.subtitle]);\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      className={styles.root}\n      header={header}\n      onClose={closeReportAdModal}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3>\n          {renderingSection?.options.map((option) => (\n            <ListItem\n              narrow\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n        </div>\n        <p className={styles.description}>{bottomText}</p>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAdModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"kq9LwNTZ\",\"root\":\"E1bGWeON\",\"content\":\"tNysQgHL\",\"modalTitle\":\"Lj_ezEWU\",\"header\":\"AlMDkK7c\",\"optionText\":\"FU8m6NUU\",\"option\":\"RoxwMzvA\",\"optionButton\":\"Z6skYdvb\",\"sectionTitle\":\"GSfUuTet\",\"description\":\"zwfjNhF9\",\"title\":\"QawchdxB\",\"hasDepth\":\"CV7kzv9H\",\"titleMultiline\":\"OYFbu8fQ\",\"subtitle\":\"OUFckTb7\",\"transition\":\"n2VxPirU\",\"block\":\"KpptZ3Mk\",\"optionInfo\":\"yc3szGcx\",\"reportIcon\":\"kO8JC4gK\"};","import type { ChangeEvent } from 'react';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport TextArea from '../../ui/TextArea';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportModal.module.scss';\n\nconst MAX_DESCRIPTION = 512;\nconst ADDED_PADDING = 20;\n\nexport type OwnProps = {\n  modal: TabState['reportModal'];\n};\n\nconst ReportModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportMessages, reportStory, closeReportModal, openPreviousReportModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const [text, setText] = useState('');\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    if (!messageIds) return;\n    switch (subject) {\n      case 'message':\n        reportMessages({ chatId: chatId!, messageIds, option });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds[0], peerId: peerId!, option,\n        });\n        break;\n    }\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal?.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    openPreviousReportModal();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeReportModal();\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        {renderingDepth ? (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Back')}\n            onClick={handleBackClick}\n          >\n            <Icon name=\"arrow-left\" />\n          </Button>\n        ) : (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={handleCloseClick}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={buildClassName(styles.title, renderingDepth && styles.hasDepth)}>\n            {renderingSection?.options\n              ? lang(modal?.subject === 'story' ? 'ReportStory' : 'Report') : renderingSection?.title}\n          </h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.options, renderingSection?.subtitle, renderingSection?.title]);\n\n  const handleTextChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setText(e.target.value);\n  });\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  const closeReportMessageModalHandler = useLastCallback(() => {\n    setText('');\n    closeReportModal();\n  });\n\n  const sendMessageReportHandler = useLastCallback(() => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    switch (subject) {\n      case 'message':\n        reportMessages({\n          chatId: chatId!, messageIds, option: renderingSection?.option, description: text,\n        });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds?.[0], peerId: peerId!, option: renderingSection?.option, description: text,\n        });\n        break;\n    }\n    closeReportMessageModalHandler();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      header={header}\n      onClose={closeReportMessageModalHandler}\n      contentClassName={styles.content}\n      className={buildClassName(styles.root, modal?.subject === 'story' && 'component-theme-dark')}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          {renderingSection?.options\n            ? <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3> : undefined}\n          {renderingSection?.options?.map((option) => (\n            <ListItem\n              narrow\n              nonInteractive\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n          {renderingSection?.option ? (\n            <div className={styles.block}>\n              <AnimatedIconWithPreview\n                tgsUrl={LOCAL_TGS_URLS.Report}\n                size={100}\n                className={styles.reportIcon}\n                nonInteractive\n                forceAlways\n                noLoop={false}\n              />\n              <TextArea\n                id=\"option\"\n                className={styles.optionInfo}\n                label={renderingSection.isOptional ? lang('Report2CommentOptional') : lang('Report2Comment')}\n                onChange={handleTextChange}\n                value={text}\n                maxLength={MAX_DESCRIPTION}\n                maxLengthIndicator={(MAX_DESCRIPTION - text.length).toString()}\n                noReplaceNewlines\n              />\n              <Button\n                size=\"smaller\"\n                onClick={sendMessageReportHandler}\n                disabled={!renderingSection.isOptional ? !text.length : undefined}\n              >\n                {lang('ReportSend')}\n              </Button>\n            </div>\n          ) : undefined}\n        </div>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Rzj2LMLf\",\"content\":\"Ve4u2KVI\",\"modalTitle\":\"E42tgAwD\",\"container\":\"pNSCKAVN\",\"header\":\"P1fPh6h8\",\"actionMessageView\":\"McJgXCtB\",\"info\":\"xWnXsG7q\",\"background\":\"_6w75ldP\",\"customBgImage\":\"CZkpv8n0\",\"customBgColor\":\"VJAYrDF_\",\"withTransition\":\"lElCwweL\",\"blurred\":\"m8xzfVvU\",\"withRightColumn\":\"rJCyBVMB\"};","import {\n  type FC,\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getMockPreparedMessageFromResult, getUserFullName } from '../../../global/helpers';\nimport { selectTheme, selectThemeValues, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Message from '../../middle/message/Message';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './PreparedMessageModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['preparedMessageModal'];\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n  isBackgroundBlurred?: boolean;\n  patternColor?: string;\n  customBackground?: string;\n  backgroundColor?: string;\n  bot?: ApiUser;\n};\n\nconst PreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal,\n  theme,\n  isBackgroundBlurred,\n  patternColor,\n  customBackground,\n  backgroundColor,\n  bot,\n}) => {\n  const {\n    closePreparedInlineMessageModal, sendWebAppEvent, openSharePreparedMessageModal,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const { webAppKey, message, botId } = modal || {};\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const handleOpenClick = useLastCallback(() => {\n    if (webAppKey && botId && message) {\n      openSharePreparedMessageModal({\n        webAppKey,\n        message,\n      });\n      closePreparedInlineMessageModal();\n    }\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closePreparedInlineMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.header}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang('Close')}\n          onClick={handleCloseClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <h3 className={buildClassName('modal-title', styles.modalTitle)}>\n          {lang('BotShareMessage')}\n        </h3>\n      </div>\n    );\n  }, [lang, modal]);\n\n  const localMessage = useMemo(() => {\n    if (!botId || !message || !webAppKey) return undefined;\n    return getMockPreparedMessageFromResult(botId, message);\n  }, [botId, message, webAppKey]);\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n  );\n\n  return (\n    <Modal\n      dialogRef={containerRef}\n      isOpen={isOpen}\n      header={header}\n      onClose={handleCloseClick}\n      className={styles.root}\n      contentClassName={styles.content}\n    >\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        {localMessage && (\n          <Message\n            key={botId}\n            message={localMessage}\n            threadId={MAIN_THREAD_ID}\n            messageListType=\"thread\"\n            noComments\n            noReplies\n            appearanceOrder={0}\n            isJustAdded={false}\n            isFirstInGroup\n            isLastInGroup\n            isLastInList={false}\n            isFirstInDocumentGroup={false}\n            isLastInDocumentGroup={false}\n          />\n        )}\n      </div>\n      <div className={styles.container}>\n        <p className={styles.info}>\n          {lang('WebAppShareMessageInfo', { user: getUserFullName(bot) })}\n        </p>\n        <Button\n          size=\"smaller\"\n          onClick={handleOpenClick}\n        >\n          {lang('BotShareMessageShare')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }) => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred,\n      patternColor,\n      background: customBackground,\n      backgroundColor,\n    } = selectThemeValues(global, theme) || {};\n    const bot = modal ? selectUser(global, modal?.botId) : undefined;\n\n    return {\n      theme,\n      isBackgroundBlurred,\n      patternColor,\n      customBackground,\n      backgroundColor,\n      bot,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(PreparedMessageModal));\n","import {\n  type FC,\n  memo, useEffect,\n} from '../../../lib/teact/teact';\nimport {\n  getActions, getGlobal, withGlobal,\n} from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectPeer, selectTabState,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePaidMessageConfirmation from '../../middle/composer/hooks/usePaidMessageConfirmation';\n\nimport PaymentMessageConfirmDialog from '../../common/PaymentMessageConfirmDialog';\nimport RecipientPicker from '../../common/RecipientPicker';\n\nexport type OwnProps = {\n  modal: TabState['sharePreparedMessageModal'];\n};\n\ntype StateProps = {\n  isPaymentMessageConfirmDialogOpen: boolean;\n  starsBalance: number;\n  isStarsBalanceModalOpen: boolean;\n};\n\nexport type SendParams = {\n  peerName?: string;\n  starsForSendMessage: number;\n};\n\nconst SharePreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal, isPaymentMessageConfirmDialogOpen, isStarsBalanceModalOpen, starsBalance,\n}) => {\n  const {\n    closeSharePreparedMessageModal,\n    sendInlineBotResult,\n    sendWebAppEvent,\n    showNotification,\n    updateSharePreparedMessageModalSendArgs,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const {\n    message, filter, webAppKey, pendingSendArgs,\n  } = modal || {};\n\n  const {\n    starsForSendMessage,\n  } = pendingSendArgs || {};\n\n  const {\n    closeConfirmDialog: closeConfirmModalPayForMessage,\n    dialogHandler: paymentMessageConfirmDialogHandler,\n    shouldAutoApprove: shouldPaidMessageAutoApprove,\n    setAutoApprove: setShouldPaidMessageAutoApprove,\n    handleWithConfirmation: handleActionWithPaymentConfirmation,\n  } = usePaidMessageConfirmation(starsForSendMessage || 0, isStarsBalanceModalOpen, starsBalance);\n\n  const handleClose = useLastCallback(() => {\n    closeSharePreparedMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const handleSend = useLastCallback((id: string, threadId?: ThreadId) => {\n    if (message && webAppKey) {\n      const global = getGlobal();\n      const peer = selectPeer(global, id);\n      sendInlineBotResult({\n        chatId: id,\n        threadId: threadId || MAIN_THREAD_ID,\n        id: message.result.id,\n        queryId: message.result.queryId,\n      });\n      if (!starsForSendMessage) {\n        showNotification({\n          message: lang('BotSharedToOne', getPeerTitle(lang, peer!)),\n        });\n      }\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_sent',\n        },\n      });\n      closeSharePreparedMessageModal();\n      updateSharePreparedMessageModalSendArgs({ args: undefined });\n    }\n  });\n\n  const handleSelectRecipient = useLastCallback((id: string, threadId?: ThreadId) => {\n    updateSharePreparedMessageModalSendArgs({ args: { peerId: id, threadId } });\n  });\n\n  const handleSendWithPaymentConfirmation = useLastCallback(() => {\n    if (pendingSendArgs) {\n      handleActionWithPaymentConfirmation(handleSend, pendingSendArgs.peerId, pendingSendArgs.threadId);\n    }\n  });\n\n  const handleClosePaymentMessageConfirmDialog = useLastCallback(() => {\n    closeConfirmModalPayForMessage();\n    updateSharePreparedMessageModalSendArgs({ args: undefined });\n  });\n\n  useEffect(() => {\n    if (pendingSendArgs) {\n      handleSendWithPaymentConfirmation();\n    }\n  }, [pendingSendArgs]);\n\n  const global = getGlobal();\n  const peer = pendingSendArgs ? selectPeer(global, pendingSendArgs.peerId) : undefined;\n  const peerName = peer ? getPeerTitle(lang, peer) : undefined;\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <>\n      <RecipientPicker\n        isOpen={isOpen}\n        searchPlaceholder={lang('Search')}\n        filter={filter}\n        onSelectRecipient={handleSelectRecipient}\n        onClose={handleClose}\n        onCloseAnimationEnd={unmarkIsShown}\n        isLowStackPriority\n      />\n      <PaymentMessageConfirmDialog\n        isOpen={isPaymentMessageConfirmDialogOpen}\n        onClose={handleClosePaymentMessageConfirmDialog}\n        userName={peerName}\n        messagePriceInStars={starsForSendMessage || 0}\n        messagesCount={1}\n        shouldAutoApprove={shouldPaidMessageAutoApprove}\n        setAutoApprove={setShouldPaidMessageAutoApprove}\n        confirmHandler={paymentMessageConfirmDialogHandler}\n      />\n    </>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { isPaymentMessageConfirmDialogOpen } = tabState;\n    const starsBalance = global.stars?.balance.amount || 0;\n    const isStarsBalanceModalOpen = Boolean(tabState.starsBalanceModal);\n    return {\n      isPaymentMessageConfirmDialogOpen,\n      starsBalance,\n      isStarsBalanceModalOpen,\n    };\n  },\n)(SharePreparedMessageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"iGABsB4C\",\"modalHeader\":\"Ofq4u4pq\",\"section\":\"k44LZ99u\",\"form\":\"VhNBPaMY\",\"label\":\"anDcU5bi\",\"input\":\"kYxuUcwe\",\"description\":\"A_JjwhXv\",\"timeInputIcon\":\"pHne2E6K\",\"offerButton\":\"d_PCM2tC\",\"currencySelector\":\"genSNudF\",\"currencyIcon\":\"fT5aRs0H\"};","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiDraft, ApiStarsAmount, ApiTypeCurrencyAmount } from '../../../api/types';\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  STARS_CURRENCY_CODE,\n  STARS_SUGGESTED_POST_AGE_MIN,\n  STARS_SUGGESTED_POST_AMOUNT_MAX,\n  STARS_SUGGESTED_POST_AMOUNT_MIN,\n  STARS_SUGGESTED_POST_FUTURE_MAX,\n  STARS_SUGGESTED_POST_FUTURE_MIN,\n  TON_CURRENCY_CODE,\n  TON_SUGGESTED_POST_AMOUNT_MAX,\n  TON_SUGGESTED_POST_AMOUNT_MIN } from '../../../config';\nimport { selectIsMonoforumAdmin, selectPeer } from '../../../global/selectors';\nimport { selectDraft } from '../../../global/selectors/messages';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatScheduledDateTime, formatShortDuration } from '../../../util/dates/dateFormat';\nimport { convertTonFromNanos, convertTonToNanos } from '../../../util/formatCurrency';\nimport {\n  formatStarsAsIcon,\n  formatStarsAsText,\n  formatTonAsIcon,\n  formatTonAsText } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SuggestMessageModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestMessageModal'];\n};\n\nimport useFlag from '../../../hooks/useFlag';\n\ntype StateProps = {\n  starBalance?: ApiStarsAmount;\n  tonBalance?: number;\n  peer?: ApiPeer;\n  currentDraft?: ApiDraft;\n  maxStarsAmount: number;\n  minStarsAmount: number;\n  tonMaxAmount: number;\n  tonMinAmount: number;\n  ageMinSeconds: number;\n  futureMin: number;\n  futureMax: number;\n  isMonoforumAdmin?: boolean;\n};\n\nconst SuggestMessageModal = ({\n  modal,\n  starBalance,\n  tonBalance,\n  peer,\n  currentDraft,\n  maxStarsAmount,\n  minStarsAmount,\n  tonMaxAmount,\n  tonMinAmount,\n  ageMinSeconds,\n  futureMin,\n  futureMax,\n  isMonoforumAdmin,\n}: OwnProps & StateProps) => {\n  const { closeSuggestMessageModal, updateDraftSuggestedPostInfo, openStarsBalanceModal } = getActions();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n\n  const currentSuggestedPostInfo = currentDraft?.suggestedPostInfo;\n  const currentReplyInfo = currentDraft?.replyInfo;\n  const isInSuggestChangesMode = Boolean(currentReplyInfo);\n\n  const [currencyAmount, setCurrencyAmount] = useState<number | undefined>(\n    currentSuggestedPostInfo?.price?.amount || undefined,\n  );\n  const [selectedCurrency, setSelectedCurrency] = useState<ApiTypeCurrencyAmount['currency']>(\n    currentSuggestedPostInfo?.price?.currency || STARS_CURRENCY_CODE,\n  );\n  const [scheduleDate, setScheduleDate] = useState<number | undefined>(\n    currentSuggestedPostInfo?.scheduleDate\n      ? currentSuggestedPostInfo.scheduleDate * 1000\n      : undefined,\n  );\n\n  useEffect(() => {\n    const price = currentSuggestedPostInfo?.price;\n    const amount = price?.currency === TON_CURRENCY_CODE ? convertTonFromNanos(price.amount) : price?.amount;\n    setCurrencyAmount(amount);\n    setSelectedCurrency(currentSuggestedPostInfo?.price?.currency || STARS_CURRENCY_CODE);\n    setScheduleDate(currentSuggestedPostInfo?.scheduleDate\n      ? currentSuggestedPostInfo.scheduleDate * 1000\n      : undefined);\n  }, [currentSuggestedPostInfo]);\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const isCurrencyStars = selectedCurrency === STARS_CURRENCY_CODE;\n  const now = Math.floor(Date.now() / 1000);\n  const minAt = (now + futureMin) * 1000;\n  const maxAt = (now + futureMax) * 1000;\n  const defaultSelectedTime = (now + futureMin * 2) * 1000;\n\n  const handleAmountChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    const number = parseFloat(value);\n\n    const result = value === '' || Number.isNaN(number) ? undefined\n      : Math.min(Math.max(number, 0), currentMaxAmount);\n\n    setCurrencyAmount(result);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setScheduleDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleAnytimeClick = useLastCallback(() => {\n    setScheduleDate(undefined);\n    closeCalendar();\n  });\n\n  const currentMinAmount = isCurrencyStars ? minStarsAmount : convertTonFromNanos(tonMinAmount);\n  const currentMaxAmount = isCurrencyStars ? maxStarsAmount : convertTonFromNanos(tonMaxAmount);\n  const isDisabled = Boolean(currencyAmount) && currencyAmount < currentMinAmount;\n\n  const handleOffer = useLastCallback(() => {\n    const neededAmount = currencyAmount\n      ? (isCurrencyStars ? currencyAmount : convertTonToNanos(currencyAmount))\n      : 0;\n\n    if (isDisabled) {\n      return;\n    }\n\n    if (!isMonoforumAdmin) {\n      if (isCurrencyStars) {\n        const currentBalance = starBalance?.amount || 0;\n\n        if (neededAmount > currentBalance) {\n          openStarsBalanceModal({\n            topup: {\n              balanceNeeded: neededAmount,\n            },\n          });\n          return;\n        }\n      } else {\n        const currentTonBalance = tonBalance || 0;\n        if (neededAmount > currentTonBalance) {\n          openStarsBalanceModal({\n            currency: TON_CURRENCY_CODE,\n          });\n          return;\n        }\n      }\n    }\n\n    updateDraftSuggestedPostInfo({\n      price: { currency: selectedCurrency, amount: neededAmount, nanos: 0 },\n      scheduleDate: scheduleDate ? scheduleDate / 1000 : undefined,\n    });\n\n    closeSuggestMessageModal();\n  });\n\n  return (\n    <Modal\n      headerClassName={styles.modalHeader}\n      isOpen={Boolean(modal)}\n      onClose={closeSuggestMessageModal}\n      isSlim\n      isLowStackPriority\n      hasCloseButton\n      contentClassName={styles.content}\n      title={isInSuggestChangesMode ? lang('TitleSuggestedChanges') : lang('TitleSuggestMessage')}\n    >\n      <div className={styles.form}>\n        <div className={styles.section}>\n          <div className={styles.currencySelector}>\n            <Button\n              className={styles.currencyButton}\n              color={isCurrencyStars ? 'primary' : 'translucent'}\n              pill\n              fluid\n              size=\"tiny\"\n              noFastClick\n              onClick={() => setSelectedCurrency(STARS_CURRENCY_CODE)}\n            >\n              <Icon name=\"star\" className={styles.currencyIcon} />\n              {lang('CurrencyStars')}\n            </Button>\n            <Button\n              className={styles.currencyButton}\n              fluid\n              color={!isCurrencyStars ? 'primary' : 'translucent'}\n              pill\n              size=\"tiny\"\n              noFastClick\n              onClick={() => setSelectedCurrency(TON_CURRENCY_CODE)}\n            >\n              <Icon name=\"toncoin\" className={styles.currencyIcon} />\n              {lang('CurrencyTon')}\n            </Button>\n          </div>\n          <InputText\n            label={lang('InputPlaceholderPrice')}\n            className={buildClassName(styles.input)}\n            value={currencyAmount?.toString()}\n            onChange={handleAmountChange}\n            inputMode=\"numeric\"\n            tabIndex={0}\n            teactExperimentControlled={isCurrencyStars}\n          />\n          <div className={styles.description}>\n            {currencyAmount !== undefined && currencyAmount > 0 && currencyAmount < currentMinAmount\n              ? lang('DescriptionSuggestedPostMinimumOffer', {\n                amount: isCurrencyStars\n                  ? formatStarsAsText(lang, currentMinAmount)\n                  : formatTonAsText(lang, currentMinAmount) },\n              { withNodes: true, withMarkdown: true })\n              : isCurrencyStars\n                ? lang('SuggestMessagePriceDescriptionStars')\n                : lang('SuggestMessagePriceDescriptionTon')}\n          </div>\n        </div>\n\n        <div className={styles.section}>\n          <div className={buildClassName('input-group', 'touched')}>\n            <input\n              type=\"text\"\n              className={buildClassName('form-control', isCalendarOpened && 'focus')}\n              value={scheduleDate\n                ? formatScheduledDateTime(scheduleDate / 1000, lang, oldLang)\n                : lang('SuggestMessageAnytime')}\n              autoComplete=\"off\"\n              onClick={openCalendar}\n              onFocus={openCalendar}\n              readOnly\n            />\n            <label>{lang('InputTitleSuggestMessageTime')}</label>\n            <Icon name=\"down\" className={styles.timeInputIcon} />\n          </div>\n          <div className={styles.description}>\n            {lang('SuggestMessageTimeDescription', {\n              hint: lang('SuggestMessageDateTimeHint'),\n              duration: formatShortDuration(lang, ageMinSeconds, true),\n            })}\n          </div>\n        </div>\n\n        <CalendarModal\n          isOpen={isCalendarOpened}\n          isFutureMode\n          withTimePicker\n          minAt={minAt}\n          maxAt={maxAt}\n          onClose={closeCalendar}\n          onSubmit={handleExpireDateChange}\n          selectedAt={scheduleDate || defaultSelectedTime}\n          submitButtonLabel={lang('Save')}\n          secondButtonLabel={lang('SuggestMessageAnytime')}\n          onSecondButtonClick={handleAnytimeClick}\n          description={lang('SuggestMessageDateTimeHint')}\n        />\n\n        <Button\n          className={styles.offerButton}\n          onClick={handleOffer}\n          size=\"smaller\"\n          disabled={isDisabled}\n        >\n          {isInSuggestChangesMode ? lang('ButtonUpdateTerms')\n            : currencyAmount ? lang('ButtonOfferAmount', {\n              amount: isCurrencyStars\n                ? formatStarsAsIcon(lang, currencyAmount, { asFont: true })\n                : formatTonAsIcon(lang, currencyAmount, { asFont: true }),\n            }, {\n              withNodes: true,\n              withMarkdown: true,\n            }) : lang('ButtonOfferFree')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const starBalance = global.stars?.balance;\n    const peer = modal ? selectPeer(global, modal.chatId) : undefined;\n    const currentDraft = modal ? selectDraft(global, modal.chatId, MAIN_THREAD_ID) : undefined;\n\n    const { appConfig } = global;\n    const maxStarsAmount = appConfig?.starsSuggestedPostAmountMax || STARS_SUGGESTED_POST_AMOUNT_MAX;\n    const minStarsAmount = appConfig?.starsSuggestedPostAmountMin || STARS_SUGGESTED_POST_AMOUNT_MIN;\n    const ageMinSeconds = appConfig?.starsSuggestedPostAgeMin || STARS_SUGGESTED_POST_AGE_MIN;\n    const futureMin = appConfig?.starsSuggestedPostFutureMin || STARS_SUGGESTED_POST_FUTURE_MIN;\n    const futureMax = appConfig?.starsSuggestedPostFutureMax || STARS_SUGGESTED_POST_FUTURE_MAX;\n\n    const tonMaxAmount = appConfig?.tonSuggestedPostAmountMax || TON_SUGGESTED_POST_AMOUNT_MAX;\n    const tonMinAmount = appConfig?.tonSuggestedPostAmountMin || TON_SUGGESTED_POST_AMOUNT_MIN;\n\n    const isMonoforumAdmin = modal ? selectIsMonoforumAdmin(global, modal.chatId) : false;\n\n    return {\n      peer,\n      starBalance,\n      tonBalance: global.ton?.balance?.amount,\n      currentDraft,\n      maxStarsAmount,\n      minStarsAmount,\n      tonMaxAmount,\n      tonMinAmount,\n      ageMinSeconds,\n      futureMin,\n      futureMax,\n      isMonoforumAdmin,\n    };\n  },\n)(SuggestMessageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"details\":\"xqyFGV8R\"};","import { memo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { STARS_CURRENCY_CODE, STARS_SUGGESTED_POST_AGE_MIN,\n  STARS_SUGGESTED_POST_COMMISSION_PERMILLE,\n  STARS_SUGGESTED_POST_FUTURE_MAX,\n  STARS_SUGGESTED_POST_FUTURE_MIN,\n  TON_CURRENCY_CODE,\n  TON_SUGGESTED_POST_COMMISSION_PERMILLE,\n} from '../../../config';\nimport { getPeerFullTitle } from '../../../global/helpers/peers';\nimport { selectChatMessage, selectIsMonoforumAdmin, selectSender } from '../../../global/selectors';\nimport { formatScheduledDateTime, formatShortDuration } from '../../../util/dates/dateFormat';\nimport { convertTonFromNanos } from '../../../util/formatCurrency';\nimport { formatStarsAsText, formatTonAsText } from '../../../util/localization/format';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './SuggestedPostApprovalModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestedPostApprovalModal'];\n};\n\ntype StateProps = {\n  commissionPermille: number;\n  tonCommissionPermille: number;\n  minAge: number;\n  futureMin: number;\n  futureMax: number;\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  isAdmin?: boolean;\n  scheduleDate?: number;\n};\n\nconst SuggestedPostApprovalModal = ({\n  modal,\n  message,\n  sender,\n  isAdmin,\n  commissionPermille,\n  tonCommissionPermille,\n  minAge,\n  futureMin,\n  futureMax,\n  scheduleDate,\n}: OwnProps & StateProps) => {\n  const {\n    closeSuggestedPostApprovalModal,\n    approveSuggestedPost,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n\n  const now = Math.floor(Date.now() / 1000);\n  const minAt = (now + futureMin) * 1000;\n  const maxAt = (now + futureMax) * 1000;\n  const defaultSelectedTime = now + futureMin * 2;\n\n  const [selectedScheduleDate, setSelectedScheduleDate] = useState<number>(defaultSelectedTime);\n\n  const handleClose = useLastCallback(() => {\n    closeSuggestedPostApprovalModal();\n  });\n\n  const handleApprove = useLastCallback((date?: number) => {\n    if (!modal) return;\n\n    approveSuggestedPost({\n      chatId: modal.chatId,\n      messageId: modal.messageId,\n      scheduleDate: date,\n    });\n\n    closeSuggestedPostApprovalModal();\n  });\n\n  const handleCalendarDateChange = useLastCallback((date: Date) => {\n    const time = Math.floor(date.getTime() / 1000);\n    setSelectedScheduleDate(time);\n  });\n\n  const handleCalendarSubmit = useLastCallback((date: Date) => {\n    const time = Math.floor(date.getTime() / 1000);\n    closeCalendar();\n    handleApprove(time);\n  });\n\n  const handlePublishNow = useLastCallback(() => {\n    closeCalendar();\n    handleApprove();\n  });\n\n  const handleNext = useLastCallback(() => {\n    if (scheduleDate) {\n      handleApprove(scheduleDate);\n    } else {\n      openCalendar();\n    }\n  });\n\n  if (!modal || !message) {\n    return undefined;\n  }\n\n  const senderName = sender ? getPeerFullTitle(oldLang, sender) : '';\n\n  const renderContent = () => {\n    const price = message?.suggestedPostInfo?.price;\n    const amount = price?.amount;\n    const currency = price?.currency || STARS_CURRENCY_CODE;\n\n    const question = lang(\n      'SuggestedPostConfirmMessage',\n      { peer: senderName },\n      { withNodes: true, withMarkdown: true });\n\n    const questionText = renderText(question);\n    if (!amount) {\n      return questionText;\n    }\n\n    const currentCommissionPermille = currency === TON_CURRENCY_CODE ? tonCommissionPermille : commissionPermille;\n    const commission = (currentCommissionPermille / 10);\n    const amountWithCommission = amount / 100 * commission;\n\n    const formattedAmount = currency === TON_CURRENCY_CODE\n      ? formatTonAsText(lang, convertTonFromNanos(amountWithCommission))\n      : formatStarsAsText(lang, amountWithCommission);\n\n    const ageMinSeconds = minAge;\n    const duration = formatShortDuration(lang, ageMinSeconds, true);\n\n    if (scheduleDate) {\n      const time = formatScheduledDateTime(scheduleDate, lang, oldLang);\n\n      const key\n      = isAdmin ? 'SuggestedPostConfirmDetailsWithTimeAdmin' : 'SuggestedPostConfirmDetailsWithTimeUser';\n\n      return (\n        <>\n          <div>\n            {questionText}\n          </div>\n          <div className={styles.details}>\n            {renderText(lang(key, {\n              amount: formattedAmount,\n              commission,\n              duration,\n              time,\n            }, { withNodes: true, withMarkdown: true }))}\n          </div>\n        </>\n      );\n    }\n\n    const key = isAdmin ? 'SuggestedPostConfirmDetailsAdmin' : 'SuggestedPostConfirmDetailsUser';\n\n    return (\n      <>\n        <div>\n          {questionText}\n        </div>\n        <div className={styles.details}>\n          {renderText(lang(key, {\n            amount: formattedAmount,\n            commission,\n            duration,\n          }, { withNodes: true, withMarkdown: true }))}\n        </div>\n      </>\n    );\n  };\n\n  return (\n    <>\n      <ConfirmDialog\n        isOpen={Boolean(modal) && !isCalendarOpened}\n        onClose={handleClose}\n        title={lang('SuggestedPostConfirmTitle')}\n        confirmHandler={handleNext}\n        confirmLabel={scheduleDate ? lang('ButtonPublish') : lang('Next')}\n      >\n        {renderContent()}\n      </ConfirmDialog>\n\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        minAt={minAt}\n        maxAt={maxAt}\n        onClose={closeCalendar}\n        onSubmit={handleCalendarSubmit}\n        onDateChange={handleCalendarDateChange}\n        selectedAt={selectedScheduleDate * 1000}\n        submitButtonLabel={lang('ButtonPublishAtTime', {\n          time: formatScheduledDateTime(selectedScheduleDate, lang, oldLang),\n        })}\n        secondButtonLabel={lang('PublishNow')}\n        onSecondButtonClick={handlePublishNow}\n        description={lang('SuggestMessageDateTimeHint')}\n      />\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const message = modal && selectChatMessage(global, modal.chatId, modal.messageId);\n    const sender = message ? selectSender(global, message) : undefined;\n    const isAdmin = modal && selectIsMonoforumAdmin(global, modal.chatId);\n    const { appConfig } = global;\n    const commissionPermille = appConfig?.starsSuggestedPostCommissionPermille\n      || STARS_SUGGESTED_POST_COMMISSION_PERMILLE;\n    const tonCommissionPermille = appConfig?.tonSuggestedPostCommissionPermille\n      || TON_SUGGESTED_POST_COMMISSION_PERMILLE;\n    const minAge = appConfig?.starsSuggestedPostAgeMin || STARS_SUGGESTED_POST_AGE_MIN;\n    const futureMin = (appConfig?.starsSuggestedPostFutureMin || STARS_SUGGESTED_POST_FUTURE_MIN) * 2;\n    const futureMax = appConfig?.starsSuggestedPostFutureMax || STARS_SUGGESTED_POST_FUTURE_MAX;\n    const scheduleDate = message?.suggestedPostInfo?.scheduleDate;\n\n    return {\n      minAge,\n      futureMin,\n      futureMax,\n      message,\n      sender,\n      isAdmin,\n      commissionPermille,\n      tonCommissionPermille,\n      scheduleDate,\n    };\n  },\n)(SuggestedPostApprovalModal));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  const resetPermissions = useCallback(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n  }, [defaultPermissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n    resetPermissions,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\n\nimport { isChatPublic } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  chatId?: string;\n  handlePermissionChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  permissions: ApiChatBannedRights;\n  isMediaDropdownOpen: boolean;\n  setIsMediaDropdownOpen: (open: boolean) => void;\n  className?: string;\n  shiftedClassName?: string;\n  dropdownClassName?: string;\n  withCheckbox?: boolean;\n  permissionGroup?: boolean;\n  getControlIsDisabled?: (key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => boolean | undefined;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasLinkedChat?: boolean;\n};\n\nconst permissionKeyList: (keyof ApiChatBannedRights)[] = [\n  'sendPhotos', 'sendVideos', 'sendStickers',\n  'sendAudios', 'sendDocs', 'sendVoices', 'sendRoundvideos', 'embedLinks', 'sendPolls',\n];\n\nconst PermissionCheckboxList: FC<OwnProps & StateProps> = ({\n  chat,\n  isMediaDropdownOpen,\n  setIsMediaDropdownOpen,\n  hasLinkedChat,\n  permissions,\n  handlePermissionChange,\n  className,\n  shiftedClassName,\n  dropdownClassName,\n  withCheckbox,\n  getControlIsDisabled,\n  permissionGroup,\n}) => {\n  const {\n    showNotification,\n  } = getActions();\n\n  const { isForum } = chat || {};\n\n  const lang = useOldLang();\n\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  const countCheckedPermissions = useMemo(() => {\n    return permissionKeyList.reduce((count, key) => {\n      if (!permissions[key]) {\n        count += 1;\n      }\n      return count;\n    }, 0);\n  }, [permissions]);\n\n  const handleOpenMediaDropdown = useLastCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  });\n\n  const handleDisabledClick = useLastCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  });\n\n  return (\n    <>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendPlain\"\n          checked={!permissions.sendPlain}\n          label={lang('UserRestrictionsSend')}\n          blocking\n          permissionGroup={permissionGroup}\n          onChange={handlePermissionChange}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendPlain')}\n        />\n      </div>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendMedia\"\n          checked={!permissions.sendMedia}\n          label={lang('UserRestrictionsSendMedia')}\n          labelText={`${countCheckedPermissions}/${permissionKeyList.length}`}\n          blocking\n          permissionGroup={permissionGroup}\n          rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n          onChange={handlePermissionChange}\n          onClickLabel={handleOpenMediaDropdown}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendMedia')}\n        />\n      </div>\n      <div className={dropdownClassName}>\n        <div\n          className={className}\n        >\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPhotos\"\n              checked={!permissions.sendPhotos}\n              label={lang('UserRestrictionsSendPhotos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPhotos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVideos\"\n              checked={!permissions.sendVideos}\n              label={lang('UserRestrictionsSendVideos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendStickers')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendAudios\"\n              checked={!permissions.sendAudios}\n              label={lang('UserRestrictionsSendMusic')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendAudios')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendDocs\"\n              checked={!permissions.sendDocs}\n              label={lang('UserRestrictionsSendFiles')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendDocs')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVoices\"\n              checked={!permissions.sendVoices}\n              label={lang('UserRestrictionsSendVoices')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVoices')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendRoundvideos\"\n              checked={!permissions.sendRoundvideos}\n              label={lang('UserRestrictionsSendRound')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendRoundvideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('embedLinks')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPolls')}\n            />\n          </div>\n        </div>\n      </div>\n      <div className={shiftedClassName}>\n        <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n          <Checkbox\n            name=\"inviteUsers\"\n            checked={!permissions.inviteUsers}\n            label={lang('UserRestrictionsInviteUsers')}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n            disabled={getControlIsDisabled && getControlIsDisabled('inviteUsers')}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"pinMessages\"\n            checked={!permissions.pinMessages}\n            label={lang('UserRestrictionsPinMessages')}\n            disabled={getControlIsDisabled ? getControlIsDisabled('pinMessages')\n              : shouldDisablePermissionForPublicGroup}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"changeInfo\"\n            checked={!permissions.changeInfo}\n            label={lang('UserRestrictionsChangeInfo')}\n            blocking\n            permissionGroup={permissionGroup}\n            disabled={getControlIsDisabled ? getControlIsDisabled('changeInfo')\n              : shouldDisablePermissionForPublicGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        {isForum && (\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"manageTopics\"\n              checked={!permissions.manageTopics}\n              label={lang('CreateTopicsPermission')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('manageTopics')}\n            />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const fullInfo = chat && selectChatFullInfo(global, chat.id);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      hasLinkedChat,\n    };\n  },\n)(PermissionCheckboxList));\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"_YNfwDqt\",\"root\":\"SeaF_shb\",\"container\":\"axa67kqo\",\"title\":\"U4IFhV0a\",\"singleTitle\":\"qd6OFHiG\",\"actionTitle\":\"yGhFKTl5\",\"restrictionTitle\":\"t3KOsBfm\",\"button\":\"goI3MITH\",\"options\":\"b6847Kh3\",\"dropdownList\":\"czTjjKim\",\"dialogButtons\":\"JTT_DIRv\",\"proceedButtons\":\"L4YzeG91\",\"restrictionContainer\":\"iv0u9Zw6\",\"restrictionContainerOpen\":\"qCQftA04\",\"dropdownListOpen\":\"Ifpyv7Jp\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../api/types';\nimport type { IRadioOption } from '../ui/CheckboxGroup';\n\nimport {\n  getHasAdminRight,\n  getPrivateChatUserId,\n  getUserFirstOrLastName, isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isSystemBot,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  getSendersFromSelectedMessages,\n  selectBot,\n  selectCanDeleteSelectedMessages,\n  selectChat,\n  selectChatFullInfo, selectIsChatWithBot,\n  selectSenderFromMessage,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { buildCollectionByCallback, unique } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useManagePermissions from '../right/hooks/useManagePermissions';\n\nimport PermissionCheckboxList from '../main/PermissionCheckboxList';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Avatar from './Avatar';\nimport AvatarList from './AvatarList';\nimport Icon from './icons/Icon';\n\nimport styles from './DeleteMessageModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isGroup?: boolean;\n  isChannel?: boolean;\n  isSuperGroup?: boolean;\n  messageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  currentUserId?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  chatBot?: boolean;\n  isSchedule?: boolean;\n  onConfirm?: NoneToVoidFunction;\n  canBanUsers?: boolean;\n  isCreator?: boolean;\n  linkedChatId?: string;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chat,\n  isChannel,\n  isSuperGroup,\n  isSchedule,\n  currentUserId,\n  messageIds,\n  isCreator,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  chatBot,\n  adminMembersById,\n  canBanUsers,\n  linkedChatId,\n  onConfirm,\n}) => {\n  const {\n    closeDeleteMessageModal,\n    deleteMessages,\n    reportChannelSpam,\n    deleteChatMember,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n    updateChatMemberBannedRights,\n    deleteParticipantHistory,\n  } = getActions();\n\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    permissions, havePermissionChanged, handlePermissionChange, resetPermissions,\n  } = useManagePermissions(chat?.defaultBannedRights);\n\n  const [peerIdsToDeleteAll, setPeerIdsToDeleteAll] = useState<string[]>([]);\n  const [peerIdsToBan, setPeerIdsToBan] = useState<string[]>([]);\n  const [peerIdsToReportSpam, setPeerIdsToReportSpam] = useState<string[]>([]);\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const [isAdditionalOptionsVisible, setIsAdditionalOptionsVisible] = useState(false);\n  const [shouldDeleteForAll, setShouldDeleteForAll] = useState(true);\n\n  const peerList = useMemo(() => {\n    if (isChannel || !messageIds || !chat) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n    const senderArray = getSendersFromSelectedMessages(global, chat.id, messageIds);\n    return senderArray ? unique(senderArray)\n      .filter((peer) => (\n        peer?.id !== chat?.id\n        && peer?.id !== linkedChatId\n        && peer?.id !== chat?.linkedMonoforumId\n      )) : MEMO_EMPTY_ARRAY;\n  }, [chat, isChannel, linkedChatId, messageIds]);\n\n  const buildNestedOptionListWithAvatars = useLastCallback(() => {\n    return peerList.map((member) => {\n      return {\n        value: member.id,\n        label: getPeerTitle(lang, member) || '',\n        leftElement: <Avatar size=\"small\" peer={member} />,\n      };\n    });\n  });\n\n  const peerListToDeleteAll = useMemo(() => {\n    return peerList.filter((peer) => (\n      peer.id !== linkedChatId\n      && peer.id !== chat?.linkedMonoforumId\n      && peer.id !== currentUserId\n    ));\n  }, [peerList, currentUserId, linkedChatId, chat?.linkedMonoforumId]);\n\n  const peerListToReportSpam = useMemo(() => {\n    return peerList.filter((peer) => (\n      peer.id !== currentUserId\n      && peer.id !== linkedChatId\n      && peer.id !== chat?.linkedMonoforumId\n    ));\n  }, [peerList, currentUserId, linkedChatId, chat?.linkedMonoforumId]);\n\n  const peerListToBan = useMemo(() => {\n    const isCurrentUserInList = peerList.some((peer) => peer.id === currentUserId);\n    const shouldReturnEmpty = !canBanUsers || isCurrentUserInList || chat?.isMonoforum;\n\n    if (shouldReturnEmpty) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return peerList.filter((peer) => {\n      const isAdmin = adminMembersById?.[peer.id];\n      return isCreator || !isAdmin;\n    });\n  }, [peerList, isCreator, currentUserId, canBanUsers, adminMembersById, chat?.isMonoforum]);\n\n  const shouldShowAdditionalOptions = useMemo(() => {\n    return Boolean(peerListToDeleteAll.length || peerListToReportSpam.length || peerListToBan.length);\n  }, [peerListToDeleteAll, peerListToReportSpam, peerListToBan]);\n\n  const shouldShowOption = shouldShowAdditionalOptions\n    && !canDeleteForAll && !isSchedule && isSuperGroup;\n\n  const peerNames = useMemo(() => {\n    if (!peerList || isSchedule) return {};\n    return buildCollectionByCallback(peerList, (peer) => [peer.id, getPeerTitle(lang, peer)]);\n  }, [isSchedule, lang, peerList]);\n\n  const ACTION_SPAM_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'spam' : peerList?.[0]?.id,\n        label: oldLang('ReportSpamTitle'),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== chat?.linkedMonoforumId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, linkedChatId, chat?.linkedMonoforumId, currentUserId]);\n\n  const ACTION_DELETE_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'delete_all' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? oldLang('DeleteAllFromUsers')\n          : oldLang('DeleteAllFrom', Object.values(peerNames)[0]),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== chat?.linkedMonoforumId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, peerNames, linkedChatId, chat?.linkedMonoforumId, currentUserId]);\n\n  const ACTION_BAN_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'ban' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? (isAdditionalOptionsVisible ? oldLang('DeleteRestrictUsers') : oldLang('DeleteBanUsers'))\n          : (isAdditionalOptionsVisible ? oldLang('KickFromSupergroup')\n            : oldLang('DeleteBan', Object.values(peerNames)[0])),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars(),\n        ] : undefined,\n      },\n    ];\n  }, [isAdditionalOptionsVisible, oldLang, messageIds, peerList, peerNames]);\n\n  const toggleAdditionalOptions = useLastCallback(() => {\n    setIsAdditionalOptionsVisible((prev) => !prev);\n  });\n\n  const filterMessageIdByPeerId = useLastCallback((peerIds: string[], selectedMessageIdList: number[]) => {\n    if (!chat) return MEMO_EMPTY_ARRAY;\n    const global = getGlobal();\n    return selectedMessageIdList.filter((msgId) => {\n      const sender = selectSenderFromMessage(global, chat.id, msgId);\n      return sender && peerIds.includes(sender.id);\n    });\n  });\n\n  const handleReportSpam = useLastCallback((userMessagesMap: Record<string, number[]>) => {\n    Object.entries(userMessagesMap).forEach(([userId, messageIdList]) => {\n      if (messageIdList.length) {\n        reportChannelSpam({\n          participantId: userId,\n          chatId: chat!.id,\n          messageIds: messageIdList,\n        });\n      }\n    });\n  });\n\n  const handleDeleteMessages = useLastCallback((filteredMessageIdList: number[]) => {\n    deleteMessages({ messageIds: filteredMessageIdList, shouldDeleteForAll: true });\n  });\n\n  const handleDeleteAllPeerMessages = useLastCallback((peerIdList: string[]) => {\n    if (!chat) return;\n    peerIdList.forEach((peerId) => {\n      deleteParticipantHistory({ peerId, chatId: chat.id });\n    });\n  });\n\n  const handleDeleteMember = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      deleteChatMember({ chatId: chat!.id, userId });\n    });\n  });\n\n  const handleUpdateChatMemberBannedRights = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      updateChatMemberBannedRights({\n        chatId: chat!.id,\n        userId,\n        bannedRights: permissions,\n      });\n    });\n  });\n\n  const handleDeleteMessageList = useLastCallback(() => {\n    if (!chat || !messageIds) return;\n\n    onConfirm?.();\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else if (shouldShowOption) {\n      if (peerIdsToReportSpam?.length) {\n        const global = getGlobal();\n        const peerIdList = peerIdsToReportSpam.filter((option) => !Number.isNaN(Number(option)));\n        const messageList = messageIds.reduce<Record<string, number[]>>((acc, msgId) => {\n          const peer = selectSenderFromMessage(global, chat.id, msgId);\n          if (peer && peerIdList.includes(peer.id)) {\n            if (!acc[peer.id]) {\n              acc[peer.id] = [];\n            }\n            acc[peer.id].push(Number(msgId));\n          }\n          return acc;\n        }, {});\n\n        handleReportSpam(messageList);\n      }\n\n      if (peerIdsToDeleteAll?.length) {\n        const peerIdList = peerIdsToDeleteAll.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteAllPeerMessages(peerIdList);\n      }\n\n      if (peerIdsToBan?.length && !havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteMember(peerIdList);\n        const filteredMessageIdList = filterMessageIdByPeerId(peerIdList, messageIds);\n        handleDeleteMessages(filteredMessageIdList);\n      }\n\n      if (peerIdsToBan?.length && havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleUpdateChatMemberBannedRights(peerIdList);\n      }\n\n      if (!peerIdsToReportSpam?.length || !peerIdsToDeleteAll?.length || !peerIdsToBan?.length) {\n        deleteMessages({ messageIds, shouldDeleteForAll });\n      }\n    } else {\n      deleteMessages({ messageIds, shouldDeleteForAll });\n    }\n\n    closeDeleteMessageModal();\n    exitMessageSelectMode();\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteMessageModal();\n  });\n\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      setPeerIdsToReportSpam([]);\n      setPeerIdsToDeleteAll([]);\n      setPeerIdsToBan([]);\n      setShouldDeleteForAll(true);\n      setIsMediaDropdownOpen(false);\n      setIsAdditionalOptionsVisible(false);\n      resetPermissions();\n    }\n  }, [isOpen, prevIsOpen, resetPermissions]);\n\n  function renderHeader() {\n    return (\n      <div\n        className={shouldShowOption && styles.container}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldShowOption && (\n          <AvatarList\n            size=\"small\"\n            peers={peerList}\n          />\n        )}\n        <h3 className={buildClassName(shouldShowOption ? styles.title : styles.singleTitle)}>\n          {oldLang('Chat.DeleteMessagesConfirmation', messageIds?.length)}\n        </h3>\n      </div>\n    );\n  }\n\n  function renderAdditionalActionOptions() {\n    return (\n      <div className={styles.options}>\n        <CheckboxGroup\n          options={ACTION_SPAM_OPTION}\n          onChange={setPeerIdsToReportSpam}\n          selected={peerIdsToReportSpam}\n          nestedCheckbox={messageIds && peerList.length >= 2}\n        />\n        {peerListToDeleteAll?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_DELETE_OPTION}\n            onChange={setPeerIdsToDeleteAll}\n            selected={peerIdsToDeleteAll}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n        {peerListToBan?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_BAN_OPTION}\n            onChange={setPeerIdsToBan}\n            selected={peerIdsToBan}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderPartiallyRestrictedUser() {\n    return (\n      <div className={buildClassName(styles.restrictionContainer,\n        isAdditionalOptionsVisible && styles.restrictionContainerOpen)}\n      >\n        <h3 className={buildClassName(styles.actionTitle, styles.restrictionTitle)}>\n          {oldLang('UserRestrictionsCanDoUsers', peerList.length)}\n        </h3>\n        <PermissionCheckboxList\n          withCheckbox\n          chatId={chat?.id}\n          isMediaDropdownOpen={isMediaDropdownOpen}\n          setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n          handlePermissionChange={handlePermissionChange}\n          permissions={permissions}\n          className={buildClassName(\n            styles.dropdownList,\n            isMediaDropdownOpen && styles.dropdownListOpen,\n          )}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageList}\n      className={styles.root}\n    >\n      <div className={styles.main}>\n        {renderHeader()}\n        {shouldShowOption && (\n          <>\n            <p className={styles.actionTitle}>{oldLang('DeleteAdditionalActions')}</p>\n            {renderAdditionalActionOptions()}\n            {renderPartiallyRestrictedUser()}\n            {peerIdsToBan?.length && canBanUsers ? (\n              <ListItem\n                narrow\n                buttonClassName={styles.button}\n                onClick={toggleAdditionalOptions}\n              >\n                {oldLang(isAdditionalOptionsVisible ? 'DeleteToggleBanUsers' : 'DeleteToggleRestrictUsers')}\n                <Icon\n                  name={isAdditionalOptionsVisible ? 'up' : 'down'}\n                  className={buildClassName(styles.button, 'ml-2')}\n                />\n              </ListItem>\n            ) : setIsAdditionalOptionsVisible(false)}\n          </>\n        )}\n        {(canDeleteForAll || chatBot || !shouldShowOption) && (\n          <>\n            <p>\n              {messageIds && messageIds.length > 1\n                ? lang('AreYouSureDeleteFewMessages') : lang('AreYouSureDeleteSingleMessage')}\n            </p>\n            {willDeleteForCurrentUserOnly && (\n              <p>{oldLang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n            )}\n            {willDeleteForAll && (\n              <p>{oldLang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n            )}\n          </>\n        )}\n        {canDeleteForAll && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={contactName ? renderText(oldLang('DeleteMessagesOptionAlso', contactName))\n              : oldLang('Conversation.DeleteMessagesForEveryone')}\n            checked={shouldDeleteForAll}\n            onCheck={setShouldDeleteForAll}\n          />\n        )}\n        <div className={buildClassName('dialog-buttons',\n          isMediaDropdownOpen ? styles.dialogButtons : styles.proceedButtons)}\n        >\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageList}>\n            {shouldShowOption ? oldLang('DeleteProceedBtn') : lang('Delete')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>{oldLang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      deleteMessageModal,\n    } = selectTabState(global);\n    const messageIds = deleteMessageModal?.messageIds;\n    const chatId = deleteMessageModal?.chatId;\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global, messageIds);\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const linkedChatId = chatFullInfo?.linkedChatId;\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const isSchedule = deleteMessageModal?.isSchedule;\n    const onConfirm = deleteMessageModal?.onConfirm;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n    const chatBot = Boolean(chat && !isSystemBot(chat.id) && selectBot(global, chat.id));\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const canBanUsers = chat && getHasAdminRight(chat, 'banUsers');\n    const isCreator = chat?.isCreator;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const willDeleteForCurrentUserOnly = (chat && isChatBasicGroup(chat) && !canDeleteForAll) || isChatWithBot;\n    const willDeleteForAll = chat && (isChatSuperGroup(chat) || isChannel);\n\n    return {\n      chat,\n      isChannel,\n      isSuperGroup,\n      messageIds,\n      currentUserId: global.currentUserId,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n      adminMembersById,\n      chatBot,\n      canBanUsers,\n      linkedChatId,\n      isSchedule,\n      isCreator,\n      onConfirm,\n    };\n  },\n)(DeleteMessageModal));\n","import { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal = ({\n  isOpen,\n  chatId,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { pinMessage } = getActions();\n\n  const [shouldPinForAll, setShouldPinForAll] = useState(true);\n\n  const handlePinMessage = useLastCallback(() => {\n    pinMessage({\n      chatId,\n      messageId,\n      isUnpin: false,\n      isOneSide: !shouldPinForAll,\n      isSilent: !shouldPinForAll,\n    });\n    onClose();\n  });\n\n  const lang = useOldLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      {canPinForAll && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          label={contactName ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          checked={shouldPinForAll}\n          onCheck={setShouldPinForAll}\n        />\n      )}\n      <div className=\"dialog-buttons\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(useMemo(() => (isActive ? {\n    'Mod+C': handleCopy,\n  } : undefined), [isActive]));\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages, selectCurrentChat,\n  selectCurrentMessageList, selectHasProtectedMessage,\n  selectHasSvg,\n  selectSelectedMessagesCount,\n  selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n  shouldWarnAboutSvg?: boolean;\n  hasSvgs?: boolean;\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  chat,\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n  shouldWarnAboutSvg,\n  hasSvgs,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n    reportMessages,\n    openDeleteMessageModal,\n    setSharedSettingOption,\n  } = getActions();\n  const lang = useOldLang();\n\n  useCopySelectedMessages(isActive);\n\n  const [isSvgDialogOpen, openSvgDialog, closeSvgDialog] = useFlag();\n  const [shouldNotWarnAboutSvg, setShouldNotWarnAboutSvg] = useState(false);\n\n  const handleExitMessageSelectMode = useLastCallback(() => {\n    exitMessageSelectMode();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    openDeleteMessageModal({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n      isSchedule,\n    });\n  });\n\n  useEffect(() => {\n    return isActive && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? handleDelete : undefined,\n        onDelete: canDeleteMessages ? handleDelete : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, handleDelete, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useLastCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  });\n\n  const handleDownload = useLastCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  });\n\n  const handleMessageDownload = useLastCallback(() => {\n    if (shouldWarnAboutSvg && hasSvgs) {\n      openSvgDialog();\n      return;\n    }\n\n    handleDownload();\n  });\n\n  const handleSvgConfirm = useLastCallback(() => {\n    setSharedSettingOption({ shouldWarnAboutSvg: !shouldNotWarnAboutSvg });\n    closeSvgDialog();\n    handleDownload();\n  });\n\n  const prevSelectedMessagesCount = usePreviousDeprecated(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const openMessageReport = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    reportMessages({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n    });\n    exitMessageSelectMode();\n  });\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: IconName, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n        aria-label={label}\n      >\n        <Icon name={icon} />\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div className={className}>\n        <div className=\"MessageSelectToolbar-inner\">\n          <Button\n            color=\"translucent\"\n            round\n            onClick={handleExitMessageSelectMode}\n            ariaLabel=\"Exit select mode\"\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n            {formattedMessagesCount}\n          </span>\n\n          {Boolean(selectedMessagesCount) && (\n            <div className=\"MessageSelectToolbar-actions\">\n              {messageListType !== 'scheduled' && canForwardMessages && (\n                renderButton(\n                  'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n                )\n              )}\n              {canReportMessages && (\n                renderButton('flag', lang('Conversation.ReportMessages'), openMessageReport)\n              )}\n              {canDownloadMessages && !hasProtectedMessage && (\n                renderButton('download', lang('lng_media_download'), handleMessageDownload)\n              )}\n              {!hasProtectedMessage && (\n                renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n              )}\n              {canDeleteMessages && (\n                renderButton('delete', lang('EditAdminGroupDeleteMessages'), handleDelete, true)\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isSvgDialogOpen}\n        onClose={closeSvgDialog}\n        confirmHandler={handleSvgConfirm}\n      >\n        {lang('lng_launch_svg_warning')}\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldNotWarnAboutSvg}\n          label={lang('lng_launch_exe_dont_ask')}\n          onCheck={setShouldNotWarnAboutSvg}\n        />\n      </ConfirmDialog>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n    const chat = selectCurrentChat(global);\n\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const hasSvgs = selectedMessageIds && chatId ? selectHasSvg(global, chatId, selectedMessageIds) : false;\n    const isShareMessageModalOpen = tabState.isShareMessageModalShown;\n    const isAnyModalOpen = Boolean(isShareMessageModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall || tabState.reportModal\n      || tabState.deleteMessageModal);\n\n    return {\n      chat,\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n      shouldWarnAboutSvg,\n      hasSvgs,\n    };\n  },\n)(MessageSelectToolbar));\n","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport styles from './SeenByModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  seenByDates?: Record<string, number>;\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction SeenByModal({\n  isOpen,\n  seenByDates,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingSeenByDates]);\n\n  const handleClick = useLastCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleCloseSeenByModal = useLastCallback(() => {\n    closeSeenByModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className={buildClassName(styles.modal, 'narrow')}\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {memberIds && memberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"message-read\"\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      seenByDates: selectChatMessage(global, chatId, messageId)?.seenByDates,\n    };\n  },\n)(SeenByModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"slqA9gR2\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"tauadiDm\",\"icon\":\"i4wZg_0J\",\"header\":\"MQxuEIRA\",\"desc\":\"AEAN1Au4\",\"separator\":\"sXXb5yOS\",\"button\":\"F7owtTHj\",\"closeButton\":\"i6iFv9YE\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTabState, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal, { ANIMATION_DURATION } from '../ui/Modal';\nimport Separator from '../ui/Separator';\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\nimport Icon from './icons/Icon';\n\nimport styles from './PrivacySettingsNoticeModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isReadDate?: boolean;\n};\n\nconst CLOSE_ANIMATION_DURATION = ANIMATION_DURATION + ANIMATION_END_DELAY;\n\nconst PrivacySettingsNoticeModal = ({ isOpen, isReadDate, user }: OwnProps & StateProps) => {\n  const lang = useOldLang();\n  const {\n    updateGlobalPrivacySettings,\n    openPremiumModal,\n    closePrivacySettingsNoticeModal,\n    showNotification,\n    setPrivacyVisibility,\n    loadUser,\n  } = getActions();\n  const userName = getUserFirstOrLastName(user);\n\n  const handleShowReadTime = useLastCallback(() => {\n    updateGlobalPrivacySettings({ shouldHideReadMarks: false });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumReadSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleShowLastSeen = useLastCallback(() => {\n    setPrivacyVisibility({\n      privacyKey: 'lastSeen',\n      visibility: 'everybody',\n      onSuccess: () => loadUser({ userId: user!.id }),\n    });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumLastSeenSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleOpenPremium = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      openPremiumModal({ initialSection: 'last_seen' });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleClose = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n  });\n\n  return (\n    <Modal isSlim isOpen={isOpen} onClose={handleClose}>\n      <div className={styles.container} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className={styles.closeButton}\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={handleClose}\n          ariaLabel=\"Close\"\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <AnimatedIconWithPreview\n          tgsUrl={isReadDate ? LOCAL_TGS_URLS.ReadTime : LOCAL_TGS_URLS.LastSeen}\n          size={84}\n          className={styles.icon}\n          nonInteractive\n          noLoop\n        />\n        <h2 className={styles.header}>\n          {lang(isReadDate ? 'PremiumReadHeader1' : 'PremiumLastSeenHeader1')}\n        </h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(\n              isReadDate ? 'PremiumReadText1' : 'PremiumLastSeenText1Locked',\n              userName,\n            ),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          size=\"smaller\"\n          onClick={isReadDate ? handleShowReadTime : handleShowLastSeen}\n          className={styles.button}\n        >\n          {lang(isReadDate ? 'PremiumReadButton1' : 'PremiumLastSeenButton1')}\n        </Button>\n        <Separator className={styles.separator}>{lang('PremiumOr')}</Separator>\n        <h2 className={styles.header}>{lang('PremiumReadHeader2')}</h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(isReadDate ? 'PremiumReadText2' : 'PremiumLastSeenText2', userName),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          withPremiumGradient\n          size=\"smaller\"\n          onClick={handleOpenPremium}\n          className={styles.button}\n        >\n          {lang('PremiumLastSeenButton2')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(\n  withGlobal<OwnProps>((global): StateProps => {\n    const { chatId, isReadDate } = selectTabState(global).privacySettingsNoticeModal || {};\n    const user = chatId ? selectUser(global, chatId) : undefined;\n\n    return { user, isReadDate };\n  })(PrivacySettingsNoticeModal),\n);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { getReactionKey, isSameReaction } from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { unique } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\nimport Icon from '../common/icons/Icon';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByDates'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByDates,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on chats or users, so we avoid them\n  const chatsById = getGlobal().chats.byId;\n  const usersById = getGlobal().users.byId;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    startClosing();\n  });\n\n  const handleClick = useLastCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  });\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const peerIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ peerId }) => peerId);\n    }\n\n    const seenByUserIds = Object.keys(seenByDates || {});\n\n    return unique(reactors?.reactions.map(({ peerId }) => peerId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByDates]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, peerIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={oldLang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n\n            onClick={() => setChosenTab(undefined)}\n          >\n            <Icon name=\"heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(lang, reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(lang, count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={oldLang.isRtl ? 'rtl' : undefined} className=\"reactor-list-wrapper\">\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (peerId) => {\n                const peer = usersById[peerId] || chatsById[peerId];\n\n                const peerReactions = reactors?.reactions.filter((reactor) => reactor.peerId === peerId);\n                const items: React.ReactNode[] = [];\n                const seenByUser = seenByDates?.[peerId];\n\n                peerReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-${getReactionKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <Avatar peer={peer} size=\"medium\" />\n                      <div className=\"info\">\n                        <FullNameTitle peer={peer} withEmojiStatus />\n                        <span className=\"status\" dir=\"auto\">\n                          <Icon name=\"heart-outline\" className=\"status-icon\" />\n                          {formatDateAtTime(oldLang, r.addedDate * 1000)}\n                        </span>\n                      </div>\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n\n                if (!chosenTab && !peerReactions?.length) {\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-seen-by`}\n                      className=\"chat-item-clickable scroll-item small-icon\"\n\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <PrivateChatInfo\n                        userId={peerId}\n                        noStatusOrTyping\n                        avatarSize=\"medium\"\n                        status={seenByUser ? formatDateAtTime(oldLang, seenByUser * 1000) : undefined}\n                        statusIcon=\"message-read\"\n                      />\n                    </ListItem>,\n                  );\n                }\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {oldLang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByDates: message?.seenByDates,\n      availableReactions: global.reactions.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../types';\n\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { IS_ANDROID } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useLastCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  });\n\n  const handleCancelAnimation = useLastCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  });\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      endHeavyAnimation();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceAlways\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport {\n  selectLanguageCode,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst ChatLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const {\n    requestMessageTranslation,\n    closeChatLanguageModal,\n    setSettingOption,\n    requestChatTranslation,\n  } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useOldLang();\n\n  const handleSelect = useLastCallback((langCode: string) => {\n    if (!chatId) return;\n\n    if (messageId) {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: langCode });\n    } else {\n      setSettingOption({ translationLanguage: langCode });\n      requestChatTranslation({ chatId, toLanguageCode: langCode });\n    }\n\n    closeChatLanguageModal();\n  });\n\n  const handleSearch = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  });\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeChatLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={buildClassName(styles.listItem, 'no-icon')}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).chatLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId\n      ? messageId\n        ? selectRequestedMessageTranslationLanguage(global, chatId, messageId)\n        : selectRequestedChatTranslationLanguage(global, chatId)\n      : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(ChatLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aMjNU9gm\",\"list-item\":\"T3An6Hoz\",\"listItem\":\"T3An6Hoz\",\"title\":\"dQ9wwFu1\",\"subtitle\":\"m_J41YYl\",\"languages\":\"r3YNWDQr\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"WEJIbFQj\",\"closeButton\":\"_vwPuDEM\",\"icon\":\"BUiGM8qZ\",\"title\":\"Q3NhXpNI\",\"description\":\"frZbGQ0G\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiCountryCode } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './CollectibleInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['collectibleInfoModal'];\n};\n\ntype StateProps = {\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst TOP_ICON_SIZE = 60;\n\nconst CollectibleInfoModal: FC<OwnProps & StateProps> = ({\n  modal,\n  phoneCodeList,\n}) => {\n  const {\n    closeCollectibleInfoModal,\n    openChat,\n    openUrl,\n    showNotification,\n  } = getActions();\n  const lang = useOldLang();\n\n  const isUsername = modal?.type === 'username';\n\n  const handleClose = useLastCallback(() => {\n    closeCollectibleInfoModal();\n  });\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: modal!.peerId });\n    handleClose();\n  });\n\n  const handleOpenUrl = useLastCallback(() => {\n    openUrl({\n      url: modal!.url,\n      shouldSkipModal: true,\n    });\n    handleClose();\n  });\n\n  const handleCopy = useLastCallback(() => {\n    const text = isUsername ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal!.collectible);\n    copyTextToClipboard(text);\n    showNotification({\n      message: lang(isUsername ? 'UsernameCopied' : 'PhoneCopied'),\n    });\n    handleClose();\n  });\n\n  const title = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameTitle' : 'FragmentPhoneTitle';\n    const formattedCollectible = isUsername\n      ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal.collectible);\n    return lang(key, formattedCollectible);\n  }, [modal, isUsername, phoneCodeList, lang]);\n\n  const description = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameMessage' : 'FragmentPhoneMessage';\n    const date = formatDateAtTime(lang, modal.purchaseDate * 1000);\n    const currency = formatCurrencyAsString(modal.amount, modal.currency, lang.code);\n    const cryptoCurrency = formatCurrencyAsString(modal.cryptoAmount, modal.cryptoCurrency, lang.code);\n    const paid = `${cryptoCurrency} (${currency})`;\n    return lang(key, [date, paid]);\n  }, [modal, isUsername, lang]);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      isSlim\n      contentClassName={styles.content}\n      onClose={closeCollectibleInfoModal}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.icon}>\n        <AnimatedIconWithPreview\n          tgsUrl={isUsername ? LOCAL_TGS_URLS.Mention : LOCAL_TGS_URLS.Fragment}\n          size={TOP_ICON_SIZE}\n        />\n      </div>\n      <h3 className={styles.title}>\n        {title && renderText(title, ['simple_markdown'])}\n      </h3>\n      <PeerChip\n        className={styles.chip}\n        peerId={modal?.peerId}\n        forceShowSelf\n        clickArg={modal?.peerId}\n        onClick={handleOpenChat}\n      />\n      <p className={styles.description}>\n        {description && renderText(description, ['simple_markdown'])}\n      </p>\n      <div className=\"dialog-buttons dialog-buttons-centered\">\n        <Button className=\"confirm-dialog-button\" onClick={handleOpenUrl}>\n          {lang('FragmentUsernameOpen')}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleCopy}>\n          {lang(isUsername ? 'FragmentUsernameCopy' : 'FragmentPhoneCopy')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { countryList } = global;\n\n    return {\n      phoneCodeList: countryList.phoneCodes,\n    };\n  },\n)(CollectibleInfoModal));\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { GlobalState, TabState } from '../../../../global/types';\nimport type { ThemeKey } from '../../../../types';\nimport type { SearchResultKey } from '../../../../util/keys/searchResultKey';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\nimport { selectSharedSettings } from '../../../../global/selectors/sharedState';\n\nexport type StateProps = {\n  theme: ThemeKey;\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: SearchResultKey[];\n  searchChatId?: string;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  shouldWarnAboutSvg?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      shouldWarnAboutSvg,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading, getMessageDownloadableMedia } from '../../../global/helpers';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n\n      const media = getMessageDownloadableMedia(message)!;\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Audio\n              key={message.id}\n              theme={theme}\n              message={message}\n              origin={AudioOrigin.Search}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              date={message.date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n              isDownloading={getIsDownloading(activeDownloads, media)}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  const buttonRef = useRef<HTMLDivElement>();\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat, selectIsChatPinned, selectNotifyDefaults, selectNotifyException, selectUser,\n} from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  withOpenAppButton?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n  withOpenAppButton,\n  onClick,\n}) => {\n  const { requestMainWebView } = getActions();\n  const oldLang = useOldLang();\n\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const handleChatFolderChange = useCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  }, [markRenderChatFolderModal, openChatFolderModal]);\n\n  const handleMute = useCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  }, [markRenderMuteModal, openMuteModal]);\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleMute,\n    handleChatFolderChange,\n  }, true);\n\n  const handleClick = useLastCallback(() => {\n    onClick(chatId);\n  });\n\n  const handleOpenApp = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId: chatId,\n      peerId: chatId,\n      theme,\n    });\n  });\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo\n          userId={chatId}\n          withUsername={withUsername}\n          withStory\n          avatarSize=\"medium\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={chatId}\n          withUsername={withUsername}\n          avatarSize=\"medium\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      {withOpenAppButton && user?.hasMainMiniApp && (\n        <Button\n          className=\"ChatBadge miniapp\"\n          pill\n          fluid\n          size=\"tiny\"\n          onClick={handleOpenApp}\n        >\n          {oldLang('BotOpen')}\n        </Button>\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, chatId);\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\n\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst BotAppResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  foundIds,\n  recentBotIds,\n}) => {\n  const {\n    searchPopularBotApps,\n    openChatWithInfo,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n    const recentSet = new Set(recentBotIds);\n    const withoutRecent = foundIds.filter((id) => !recentSet.has(id));\n\n    return filterPeersByQuery({ ids: withoutRecent, query: searchQuery, type: 'user' });\n  }, [foundIds, recentBotIds, searchQuery]);\n\n  const handleChatClick = useLastCallback((id: string) => {\n    openChatWithInfo({ id, shouldReplaceHistory: true });\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll\"\n        items={canRenderContents ? filteredFoundIds : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && !filteredFoundIds?.length && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && !searchQuery && Boolean(recentBotIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">\n              {recentBotIds.length > LESS_LIST_ITEMS_AMOUNT && (\n                <Link className=\"Link\" onClick={handleToggleShowMoreMine}>\n                  {lang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n                </Link>\n              )}\n              {lang('SearchAppsMine')}\n            </h3>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_LIST_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n        {canRenderContents && Boolean(filteredFoundIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">{lang('SearchAppsPopular')}</h3>\n            {filteredFoundIds.map((id) => {\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(BotAppResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiMessageOutgoingStatus,\n  ApiUser,\n} from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageVideo,\n  getPrivateChatUserId,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  });\n\n  const lang = useOldLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  const peer = privateChatUser || chat;\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        peer={peer}\n        isSavedMessages={privateChatUser?.isSelf}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={peer}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: OldLangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n        draggable={false}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      ...(privateChatUserId && { privateChatUser }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport { formatDateToString } from '../../../util/dates/dateFormat';\n\nimport Icon from '../../common/icons/Icon';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <Icon name=\"calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { selectTopic } from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport TopicIcon from '../../common/TopicIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const topic = selectTopic(global, chatId, topicId);\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: SearchResultKey[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openThread } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      if (!searchChatId) return;\n      openThread({ chatId: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId } } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiSponsoredPeer } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { isUserId } from '../../../util/entities/ids';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport BadgeButton from '../../common/BadgeButton';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  sponsoredPeer: ApiSponsoredPeer;\n  observeIntersection?: ObserveFn;\n};\n\nconst LeftSearchResultSponsored: FC<OwnProps> = ({\n  sponsoredPeer,\n  observeIntersection,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const { clickSponsored, viewSponsored, openChat } = getActions();\n  const lang = useLang();\n\n  const {\n    peerId, randomId, additionalInfo, sponsorInfo,\n  } = sponsoredPeer;\n\n  useOnIntersect(ref, observeIntersection, (entry) => {\n    if (entry.intersectionRatio === 1) {\n      viewSponsored({ randomId });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    clickSponsored({ randomId });\n    openChat({ id: peerId });\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const {\n    handleClick: handleBadgeClick,\n    handleMouseDown: handleBadgeMouseDown,\n  } = useFastClick((e: React.MouseEvent) => {\n    e.stopPropagation();\n    handleContextMenu(e);\n  });\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  return (\n    <ListItem\n      ref={ref}\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n      buttonRef={buttonRef}\n    >\n      {isUserId(peerId) ? (\n        <PrivateChatInfo\n          userId={peerId}\n          withUsername\n          withStory\n          avatarSize=\"medium\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={peerId}\n          withUsername\n          avatarSize=\"medium\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      <BadgeButton className=\"search-sponsored-badge\" onMouseDown={handleBadgeMouseDown} onClick={handleBadgeClick}>\n        {lang('SponsoredPeerBadge')}\n        <Icon name=\"more\" />\n      </BadgeButton>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(LeftSearchResultSponsored);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  const topUsersRef = useRef<HTMLDivElement>();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useOldLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar peer={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3\n            className={buildClassName(\n              'section-heading mt-0 recent-chats-header',\n              !topUserIds && 'without-border',\n            )}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {lang('Recent')}\n\n            <Button\n              className=\"clear-recent-chats\"\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel={lang('Clear')}\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <Icon name=\"close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              withOpenAppButton\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageSearchContext, ApiSponsoredPeer } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { ALL_FOLDER_ID, GLOBAL_SUGGESTED_CHANNELS_ID } from '../../../config';\nimport {\n  isChatChannel,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectSimilarChannelIds, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { unique } from '../../../util/iteratees';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PeerChip from '../../common/PeerChip';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Transition from '../../ui/Transition';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport LeftSearchResultSponsored from './LeftSearchResultSponsored';\nimport RecentContacts from './RecentContacts';\n\nimport './ChatResults.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  isChannelList?: boolean;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  contactIds?: string[];\n  accountPeerIds?: string[];\n  globalPeerIds?: string[];\n  foundIds?: SearchResultKey[];\n  sponsoredPeer?: ApiSponsoredPeer;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  suggestedChannelIds?: string[];\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  isChannelList,\n  searchQuery,\n  searchDate,\n  dateSearchQuery,\n  currentUserId,\n  contactIds,\n  accountPeerIds,\n  globalPeerIds,\n  foundIds,\n  globalMessagesByChatId,\n  fetchingStatus,\n  suggestedChannelIds,\n  sponsoredPeer,\n  onReset,\n  onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal,\n    setGlobalSearchChatId, loadChannelRecommendations,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const chatSelectionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n  const [searchContext, setSearchContext] = useState<ApiMessageSearchContext>('all');\n  const ref = useRef<HTMLDivElement>();\n\n  useEffectOnce(() => {\n    if (isChannelList) loadChannelRecommendations({});\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: isChannelList ? 'channels' : 'text',\n          context: searchContext,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery, searchContext]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  function getSearchContextCaption(context: ApiMessageSearchContext) {\n    if (context === 'users') return lang('PrivateChatsSearchContext');\n    if (context === 'groups') return lang('GroupChatsSearchContext');\n    if (context === 'channels') return lang('ChannelsSearchContext');\n    return lang('AllChatsSearchContext');\n  }\n\n  const {\n    isContextMenuOpen, contextMenuAnchor, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getRootElement = useLastCallback(() => ref.current!);\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.chatResultsContextMenu .bubble'));\n  const getTriggerElement = useLastCallback(() => ref.current!.querySelector('.menuTrigger'));\n\n  const handleClickContext = useLastCallback((e: React.MouseEvent): void => {\n    handleContextMenu(e);\n  });\n\n  const itemPlaceholderClass = buildClassName('icon', 'iconPlaceholder');\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getMenuElement={getMenuElement}\n        className=\"chatResultsContextMenu\"\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        autoClose\n      >\n        <>\n          <MenuItem\n            icon={searchContext === 'all' ? 'check' : undefined}\n            customIcon={searchContext !== 'all' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('all')}\n          >\n            {getSearchContextCaption('all')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'users' ? 'check' : undefined}\n            customIcon={searchContext !== 'users' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('users')}\n          >\n            {getSearchContextCaption('users')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'groups' ? 'check' : undefined}\n            customIcon={searchContext !== 'groups' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('groups')}\n          >\n            {getSearchContextCaption('groups')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'channels' ? 'check' : undefined}\n            customIcon={searchContext !== 'channels' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('channels')}\n          >\n            {getSearchContextCaption('channels')}\n          </MenuItem>\n        </>\n      </Menu>\n    );\n  }\n\n  const localResults = useMemo(() => {\n    if (!isChannelList && (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2))) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const orderedChatIds = getOrderedIds(ALL_FOLDER_ID) ?? [];\n    const filteredChatIds = orderedChatIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n    const localChatIds = filterPeersByQuery({ ids: filteredChatIds, query: searchQuery, type: 'chat' });\n\n    if (isChannelList) return localChatIds;\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(contactIds || []),\n    ];\n\n    const localContactIds = filterPeersByQuery({\n      ids: contactIdsWithMe, query: searchQuery, type: 'user',\n    });\n\n    const localPeerIds = [\n      ...localContactIds,\n      ...localChatIds,\n    ];\n\n    return unique([\n      ...sortChatIds(localPeerIds, undefined, currentUserId ? [currentUserId] : undefined),\n      ...sortChatIds(accountPeerIds || []),\n    ]);\n  }, [searchQuery, currentUserId, contactIds, accountPeerIds, isChannelList]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length || isChannelList, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalPeerIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const filteredIds = globalPeerIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n\n    return sortChatIds(filteredIds, true);\n  }, [globalPeerIds, isChannelList, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n        const chat = chatsById[chatId];\n        if (!chat) return undefined;\n        if (isChannelList && !isChatChannel(chat)) return undefined;\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean);\n  }, [searchQuery, searchDate, foundIds, isChannelList, globalMessagesByChatId]);\n\n  useEffect(() => {\n    if (!searchQuery) return;\n    searchMessagesGlobal({\n      type: isChannelList ? 'channels' : 'text',\n      context: searchContext,\n      shouldResetResultsByType: true,\n      shouldCheckFetchingMessagesStatus: true,\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [searchContext]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const chatsById = getGlobal().chats.byId;\n\n    const text = renderMessageSummary(oldLang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const actualFoundIds = foundMessages;\n\n  const nothingFound = searchContext === 'all' && fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !actualFoundIds.length;\n  const isMessagesFetching = fetchingStatus?.messages;\n\n  const shouldRenderTopPeers = !searchQuery && !searchDate && !isChannelList;\n\n  const { observe } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n    isDisabled: !shouldRenderTopPeers,\n  });\n\n  if (shouldRenderTopPeers) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  const shouldRenderMessagesSection = searchContext === 'all' ? Boolean(actualFoundIds.length) : true;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"LeftSearch--content custom-scroll\"\n      items={actualFoundIds}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={oldLang('ChatList.Search.NoResults')}\n          description={oldLang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && !isChannelList && (\n        <div\n          className=\"chat-selection no-scrollbar\"\n          dir={oldLang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PeerChip\n              peerId={id}\n              className=\"left-search-local-suggestion\"\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {oldLang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {oldLang(isChannelList ? 'SearchMyChannels' : 'DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                withOpenAppButton\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {oldLang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {oldLang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {sponsoredPeer && (\n            <LeftSearchResultSponsored sponsoredPeer={sponsoredPeer} observeIntersection={observe} />\n          )}\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(suggestedChannelIds?.length) && !searchQuery && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {oldLang('SearchRecommendedChannels')}\n          </h3>\n          {suggestedChannelIds.map((id) => {\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      <div className=\"menuOwner\" ref={ref}>\n        {renderContextMenu()}\n        {shouldRenderMessagesSection && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n              {!isChannelList && (\n                <Link className=\"Link menuTrigger dropDownLink\" onClick={handleClickContext}>\n                  {lang('SearchContextCaption', {\n                    type: getSearchContextCaption(searchContext),\n                  }, {\n                    withNodes: true,\n                  })}\n\n                  <Transition\n                    name=\"fade\"\n                    shouldCleanup\n                    activeKey={Number(isMessagesFetching)}\n                    className=\"iconContainer\"\n                    slideClassName=\"iconContainerSlide\"\n                  >\n                    {isMessagesFetching && (<Loading />)}\n                    {!isMessagesFetching && <Icon name=\"down\" />}\n                  </Transition>\n                </Link>\n              )}\n              {oldLang('SearchMessages')}\n            </h3>\n            {actualFoundIds.map(renderFoundMessage)}\n          </div>\n        )}\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isChannelList }): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const {\n      currentUserId, messages,\n    } = global;\n\n    if (!contactIds) {\n      return {};\n    }\n\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType, sponsoredPeer,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: accountPeerIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.[isChannelList ? 'channels' : 'text']?.foundIds;\n    const { similarChannelIds } = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID) || {};\n\n    return {\n      currentUserId,\n      contactIds,\n      accountPeerIds,\n      globalPeerIds,\n      foundIds,\n      globalMessagesByChatId,\n      fetchingStatus,\n      sponsoredPeer,\n      suggestedChannelIds: similarChannelIds,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading, getMessageDocument } from '../../../global/helpers';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Document from '../../common/Document';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  shouldWarnAboutSvg,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n      const message = globalMessagesByChatId[chatId]?.byId[messageId];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              dir={lang.isRtl ? 'rtl' : undefined}\n              key={message.date}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Document\n              document={getMessageDocument(message)!}\n              message={message}\n              withDate\n              datetime={message.date}\n              smaller\n              sender={getSenderName(lang, message, chatsById, usersById)}\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, message.content.document!)}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport WebLink from '../../common/WebLink';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            dir={lang.isRtl ? 'rtl' : undefined}\n            key={message.id}\n          >\n            <WebLink\n              key={message.id}\n              message={message}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              isProtected={isChatProtected || message.isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Media from '../../common/Media';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport ChatMessage from './ChatMessage';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      messageId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch--content LeftSearch--media\">\n      <InfiniteScroll\n        className={classNames}\n        items={canRenderContents ? foundMessages : undefined}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { RegularLangKey } from '../../../types/language';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseDateString } from '../../../util/dates/dateFormat';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport AudioResults from './AudioResults';\nimport BotAppResults from './BotAppResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport ChatResults from './ChatResults';\nimport FileResults from './FileResults';\nimport LinkResults from './LinkResults';\nimport MediaResults from './MediaResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\ntype TabInfo = {\n  type: GlobalSearchContent;\n  key: RegularLangKey;\n};\n\nconst TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabChats' },\n  { type: GlobalSearchContent.ChannelList, key: 'SearchTabChannels' },\n  { type: GlobalSearchContent.BotApps, key: 'SearchTabApps' },\n  { type: GlobalSearchContent.Media, key: 'SearchTabMedia' },\n  { type: GlobalSearchContent.Links, key: 'SearchTabLinks' },\n  { type: GlobalSearchContent.Files, key: 'SearchTabFiles' },\n  { type: GlobalSearchContent.Music, key: 'SearchTabMusic' },\n  { type: GlobalSearchContent.Voice, key: 'SearchTabVoice' },\n];\n\nconst CHAT_TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabMessages' },\n  ...TABS.slice(3), // Skip ChatList, ChannelList and BotApps, replaced with All Messages\n];\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const tabs = useMemo(() => {\n    const arr = chatId ? CHAT_TABS : TABS;\n    return arr.map((tab) => ({\n      ...tab,\n      title: lang(tab.key),\n    }));\n  }, [chatId, lang]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    const tab = tabs[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  });\n\n  const handleSearchDateSelect = useLastCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const containerRef = useRef<HTMLDivElement>();\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        renderCount={tabs.length}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n            case GlobalSearchContent.ChannelList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  isChannelList={currentContent === GlobalSearchContent.ChannelList}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.BotApps:\n              return (\n                <BotAppResults\n                  key=\"botApps\"\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaState, TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterPeersByQuery } from '../../../../global/helpers/peers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { unique } from '../../../../util/iteratees';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Loading from '../../../ui/Loading';\n\ntype StateProps = {\n  maxChats: number;\n};\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n  maxChats,\n}) => {\n  const lang = useOldLang();\n\n  const { openLimitReachedModal } = getActions();\n\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = useMemo(() => selectChatFilters(state, mode, true), [mode, state]);\n  const chatTypes = mode === 'included' ? CUSTOM_PEER_INCLUDED_CHAT_TYPES : CUSTOM_PEER_EXCLUDED_CHAT_TYPES;\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  const displayedIds = useMemo(() => {\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...filterPeersByQuery({ ids: chatIds, query: chatFilter, type: 'chat' }),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, chatFilter]);\n\n  const handleFilterChange = useLastCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n    setIsTouched(true);\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    if (mode === 'included') {\n      if (ids.length >= maxChats) {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  const handleSelectedChatTypesChange = useLastCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <div className=\"Picker settings-folders-chat-list\">\n      <PeerPicker\n        categories={shouldHideChatTypes ? undefined : chatTypes}\n        itemIds={displayedIds}\n        selectedIds={selectedChatIds}\n        selectedCategories={selectedChatTypes}\n        filterValue={chatFilter}\n        filterPlaceholder={lang('Search')}\n        categoryPlaceholderKey=\"FilterChatTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        withDefaultPadding\n        withPeerTypes\n        allowMultiple\n        itemInputType=\"checkbox\"\n        onSelectedIdsChange={handleSelectedIdsChange}\n        onSelectedCategoriesChange={handleSelectedChatTypesChange}\n        onFilterChange={handleFilterChange}\n      />\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatFilters));\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatlistExportedInvite } from '../../../../api/types';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { selectCanShareFolder } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { isUserId } from '../../../../util/entities/ids';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport Icon from '../../../common/icons/Icon';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n  onSaveFolder: (cb?: VoidFunction) => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n  maxChatLists: number;\n  chatListCount: number;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nexport const ERROR_NO_TITLE = 'Please provide a title for this folder.';\nexport const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n  maxChatLists,\n  chatListCount,\n  onSaveFolder,\n}) => {\n  const {\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'included'), [state]);\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'excluded'), [state]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: 'setIsLoading', payload: true });\n\n    onSaveFolder(() => {\n      setTimeout(() => {\n        onReset();\n      }, SUBMIT_TIMEOUT);\n    });\n  }, [dispatch, onSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) {\n      if (isCreating) {\n        onSaveFolder(onShareFolder);\n      }\n      return;\n    }\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (chatListCount >= maxChatLists && !state.folder.isChatList) {\n      openLimitReachedModal({\n        limit: 'chatlistJoined',\n      });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        onSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n      return;\n    }\n\n    openLimitReachedModal({\n      limit: 'chatlistInvites',\n    });\n  }, [\n    invites, state.folderId, state.isTouched, chatListCount, maxInviteLinks, isCreating, onSaveFolder,\n    onShareFolder, lang, maxChatLists, state.folder.isChatList,\n  ]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      onSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [onSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? CUSTOM_PEER_INCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key)\n      : CUSTOM_PEER_EXCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.type}\n        className=\"settings-folders-list-item mb-1\"\n        narrow\n        inactive\n      >\n        <PrivateChatInfo\n          avatarSize=\"small\"\n          customPeer={chatType}\n        />\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ListItem\n            key=\"load-more\"\n            className=\"settings-folders-list-item\"\n            narrow\n\n            onClick={clickHandler}\n            icon=\"down\"\n          >\n            {lang('FilterShowMoreChats', leftChatsCount, 'i')}\n          </ListItem>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIconWithPreview\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title.text}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FolderLinkScreen.Title')}\n          </h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary\"\n            icon=\"add\"\n            narrow\n            onClick={handleCreateInviteClick}\n          >\n            {lang('ChatListFilter.CreateLinkNew')}\n          </ListItem>\n\n          {invites?.map((invite) => (\n            <ListItem\n              className=\"settings-folders-list-item\"\n              icon=\"link\"\n              narrow\n              multiline\n              onClick={handleEditInviteClick}\n              clickArg={invite.url}\n            >\n              <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n              <span className=\"subtitle\">\n                {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n              </span>\n            </ListItem>\n          ))}\n\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n    const chatListCount = Object.values(byId).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      chatListCount,\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { isBetween } from '../../../../util/math';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../../hooks/usePreviousDeprecated';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Draggable from '../../../ui/Draggable';\nimport ListItem from '../../../ui/ListItem';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 56;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePreviousDeprecated(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: {\n            text: lang('FilterAllChats'),\n            entities: [],\n          },\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n        noTitleAnimations: folder.noTitleAnimations,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIconWithPreview\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"settings-button with-icon\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <Icon name=\"add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                    allowSelection\n                  >\n                    <span className=\"title\">\n                      {renderTextWithEntities({\n                        text: folder.title.text,\n                        entities: folder.title.entities,\n                        noCustomEmojiPlayback: folder.noTitleAnimations,\n                      })}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                    {isBlocked && <Icon name=\"lock-badge\" className=\"settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <Icon name=\"link\" className=\"mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              narrow\n\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                  </span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { partition } from '../../../../util/iteratees';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Icon from '../../../common/icons/Icon';\nimport LinkField from '../../../common/LinkField';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  folder?: ApiChatFolder;\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  folder,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId && isActive) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, isActive, url]);\n\n  const handleRevoke = useLastCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  });\n\n  const itemIds = useMemo(() => {\n    return (folder?.includedChatIds || []).concat(folder?.pinnedChatIds || []);\n  }, [folder?.includedChatIds, folder?.pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  const isFirstRenderRef = useRef(true);\n  useEffectWithPrevDeps(([prevUrl]) => {\n    if (prevUrl !== url) {\n      isFirstRenderRef.current = true;\n    }\n    if (!isFirstRenderRef.current) return;\n    isFirstRenderRef.current = false;\n    if (!url) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [url, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useLastCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    if (!folderId || !url || !isTouched) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  });\n\n  const chatsCount = selectedIds.length;\n  const isDisabled = !chatsCount || isLoading;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll SettingsFoldersChatsPicker\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        {folder && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('FolderLinkTitleDescription', {\n              folder: renderTextWithEntities({\n                text: folder.title.text,\n                entities: folder.title.entities,\n                noCustomEmojiPlayback: folder.noTitleAnimations,\n              }),\n              chats: lang('FolderLinkTitleDescriptionChats', { count: chatsCount }, { pluralValue: chatsCount }),\n            }, {\n              withMarkdown: true,\n              withNodes: true,\n            })}\n          </p>\n        )}\n      </div>\n\n      <LinkField\n        className=\"settings-item\"\n        link={!url ? oldLang('Loading') : url}\n        withShare\n        onRevoke={handleRevoke}\n        isDisabled={!chatsCount || isTouched}\n      />\n\n      <div className=\"settings-item settings-item-picker\">\n        <PeerPicker\n          itemIds={itemIds}\n          lockedUnselectedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isDisabled}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      folder,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsFoldersEdit, { ERROR_NO_CHATS, ERROR_NO_TITLE } from './SettingsFoldersEdit';\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    openShareChatFolderModal,\n    editChatFolder,\n    addChatFolder,\n    openSettingsScreen,\n  } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  }, [state.mode, dispatch, currentScreen, onReset]);\n\n  const isCreating = state.mode === 'create';\n\n  const saveState = useCallback((newState: FoldersState) => {\n    const { title } = newState.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return false;\n    }\n\n    const {\n      selectedChatIds: includedChatIds,\n      selectedChatTypes: includedChatTypes,\n    } = selectChatFilters(newState, 'included');\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return false;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: newState.folderId!, folderUpdate: newState.folder });\n    } else {\n      addChatFolder({ folder: newState.folder as ApiChatFolder });\n    }\n\n    dispatch({ type: 'setError', payload: undefined });\n    dispatch({ type: 'setIsTouched', payload: false });\n\n    return true;\n  }, [dispatch, isCreating]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    if (!saveState(state)) {\n      return;\n    }\n    cb?.();\n  }, [saveState, state]);\n\n  const handleSaveFilter = useCallback(() => {\n    const newState = dispatch({ type: 'saveFilters' });\n    handleReset();\n    saveState(newState);\n  }, [dispatch, handleReset, saveState]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n  }, [dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n  }, [dispatch]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersIncludedChatsFromChatList\n        : SettingsScreens.FoldersIncludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersExcludedChatsFromChatList\n        : SettingsScreens.FoldersExcludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    dispatch({ type: 'setIsChatlist', payload: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [dispatch, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n          onSaveFolder={handleSaveFolder}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PasswordForm from '../../common/PasswordForm';\nimport PasswordMonkey from '../../common/PasswordMonkey';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useOldLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent })}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeTurnOff })}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram Web A.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram Web A and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { decryptSession } from '../../../../util/passcode';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n  }, [onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeCongratulations });\n  }, [onSetPasscode, passcode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onSetPasscode]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      openSettingsScreen({ screen: SettingsScreens.Privacy });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsText } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../icons/Icon';\n\ntype OwnProps = {\n  min?: number;\n  max: number;\n  value: number;\n  disabled?: boolean;\n  readOnly?: boolean;\n  bold?: boolean;\n  className?: string;\n  defaultValue: number;\n  onChange: (value: number) => void;\n  canChangeChargeForMessages?: boolean;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst PaidMessageSlider: FC<OwnProps> = ({\n  min = 0,\n  max,\n  value,\n  disabled,\n  readOnly,\n  bold,\n  className,\n  defaultValue,\n  onChange,\n  canChangeChargeForMessages,\n}) => {\n  const lang = useLang();\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < max) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= max) {\n        result.push(max);\n        break;\n      }\n    }\n\n    return result;\n  }, [max]);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    onChange(getValue(points, newValue));\n  });\n\n  const mainClassName = buildClassName(\n    className,\n    'RangeSlider',\n    disabled && 'disabled',\n    readOnly && 'readOnly',\n    bold && 'bold',\n  );\n\n  function renderTopRow() {\n    return (\n      <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"value-min\" dir=\"auto\">{lang.number(min)}</span>\n        <span className=\"settings-range-value\">\n          {!canChangeChargeForMessages && (<Icon name=\"lock-badge\" />)}\n          {formatStarsAsText(lang, getValue(points, getProgress(points, value)))}\n        </span>\n        <span className=\"value-max\" dir=\"auto\">{lang.number(max)}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className={mainClassName}>\n      {renderTopRow()}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          style={`width: ${(getProgress(points, value) / points.length) * 100}%`}\n        />\n        <input\n          min={0}\n          max={points.length}\n          defaultValue={getProgress(points, defaultValue)}\n          step=\"any\"\n          type=\"range\"\n          className=\"RangeSlider__input\"\n          onChange={handleChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const pointValue = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return pointValue < 100 ? Math.round(pointValue) : Math.round(pointValue / 10) * 10;\n}\n\nexport default memo(PaidMessageSlider);\n","import {\n  memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n  MINIMUM_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPercent } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Icon from '../icons/Icon';\nimport PaidMessageSlider from './PaidMessageSlider';\n\ntype OwnProps = {\n  chargeForMessages: number;\n  canChangeChargeForMessages?: boolean;\n  isGroupChat?: boolean;\n  onChange: (value: number) => void;\n};\n\ntype StateProps = {\n  starsUsdWithdrawRate: number;\n  starsPaidMessageAmountMax: number;\n  starsPaidMessageCommissionPermille: number;\n};\n\nfunction PaidMessagePrice({\n  starsUsdWithdrawRate,\n  starsPaidMessageAmountMax,\n  starsPaidMessageCommissionPermille,\n  canChangeChargeForMessages,\n  isGroupChat,\n  chargeForMessages,\n  onChange,\n}: OwnProps & StateProps) {\n  const { openPremiumModal } = getActions();\n\n  const lang = useLang();\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    onChange?.(value);\n  });\n\n  const handleUnlockWithPremium = useLastCallback(() => {\n    openPremiumModal({ initialSection: 'message_privacy' });\n  });\n\n  return (\n    <>\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('SectionTitleStarsForForMessages')}\n      </h4>\n      <PaidMessageSlider\n        defaultValue={chargeForMessages}\n        min={MINIMUM_CHARGE_FOR_MESSAGES}\n        max={starsPaidMessageAmountMax}\n        value={chargeForMessages}\n        onChange={handleChargeForMessagesChange}\n        canChangeChargeForMessages={canChangeChargeForMessages}\n        readOnly={!canChangeChargeForMessages}\n      />\n      {!canChangeChargeForMessages && (\n        <Button\n          color=\"primary\"\n          fluid\n          size=\"smaller\"\n          noForcedUpperCase\n          className=\"settings-unlock-button\"\n          onClick={handleUnlockWithPremium}\n        >\n          <span className=\"settings-unlock-button-title\">\n            {lang('UnlockButtonTitle')}\n            <Icon name=\"lock-badge\" className=\"settings-unlock-button-icon\" />\n          </span>\n        </Button>\n      )}\n      {canChangeChargeForMessages && (\n        <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang(isGroupChat ? 'SetPriceGroupDescription' : 'SectionDescriptionStarsForForMessages', {\n            percent: formatPercent(starsPaidMessageCommissionPermille * 100),\n            amount: formatCurrencyAsString(\n              chargeForMessages * starsUsdWithdrawRate * starsPaidMessageCommissionPermille,\n              'USD',\n              lang.code,\n            ),\n          }, {\n            withNodes: true,\n          })}\n        </p>\n      )}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const starsUsdWithdrawRateX1000 = global.appConfig?.starsUsdWithdrawRateX1000;\n    const starsUsdWithdrawRate = starsUsdWithdrawRateX1000 ? starsUsdWithdrawRateX1000 / 1000 : 1;\n    const configStarsPaidMessageCommissionPermille = global.appConfig?.starsPaidMessageCommissionPermille;\n    const starsPaidMessageCommissionPermille = configStarsPaidMessageCommissionPermille\n      ? configStarsPaidMessageCommissionPermille / 1000 : 100;\n\n    return {\n      starsPaidMessageCommissionPermille,\n      starsUsdWithdrawRate,\n      starsPaidMessageAmountMax: global.appConfig?.starsPaidMessageAmountMax || DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(PaidMessagePrice));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPremiumSection } from '../../../api/types';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  premiumSection?: ApiPremiumSection;\n};\n\nfunction PremiumStatusItem({ premiumSection }: OwnProps) {\n  const { openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal({ initialSection: premiumSection }));\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n        onClick={handleOpenPremiumModal}\n      >\n        {lang('PrivacyLastSeenPremium')}\n      </ListItem>\n      <p\n        className=\"settings-item-description-larger premium-info\"\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {lang('lng_messages_privacy_premium_about')}\n      </p>\n    </div>\n  );\n}\n\nexport default memo(PremiumStatusItem);\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './PrivacyLockedOption.module.scss';\n\ntype OwnProps = {\n  label: string;\n  isChecked?: boolean;\n};\n\nfunction PrivacyLockedOption({ label, isChecked }: OwnProps) {\n  const lang = useOldLang();\n  const { showNotification } = getActions();\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        isChecked && styles.checked,\n      )}\n      onClick={() => showNotification({ message: lang('OptionPremiumRequiredMessage') })}\n    >\n      <span>{label}</span>\n      <Icon name=\"lock-badge\" className={styles.lockIcon} />\n    </div>\n  );\n}\n\nexport default memo(PrivacyLockedOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sBptmiga\",\"lock-icon\":\"jWxrRbkh\",\"lockIcon\":\"jWxrRbkh\",\"checked\":\"U_6O1ebL\"};","import {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectNewNoncontactPeersRequirePremium,\n  selectNonContactPeersPaidStars,\n} from '../../../global/selectors';\n\nimport useDebouncedCallback from '../../../hooks/useDebouncedCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages?: boolean;\n  canLimitNewMessagesWithoutPremium?: boolean;\n  canChargeForMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  nonContactPeersPaidStars: number;\n  noPaidReactionsForUsersCount: number;\n  privacy: GlobalState['settings']['privacy'];\n};\n\nfunction PrivacyMessages({\n  isActive,\n  canLimitNewMessagesWithoutPremium,\n  canChargeForMessages,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  nonContactPeersPaidStars,\n  isCurrentUserPremium,\n  noPaidReactionsForUsersCount,\n  onReset,\n  privacy,\n}: OwnProps & StateProps) {\n  const { updateGlobalPrivacySettings, openSettingsScreen, showNotification } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const canChangeForContactsAndPremium = isCurrentUserPremium || canLimitNewMessagesWithoutPremium;\n  const canChangeChargeForMessages = isCurrentUserPremium && canChargeForMessages;\n  const [chargeForMessages, setChargeForMessages] = useState<number>(nonContactPeersPaidStars);\n  const [hasShownNotification, setHasShownNotification] = useState(false);\n\n  const selectedValue = useMemo(() => {\n    if (shouldChargeForMessages) return 'charge_for_messages';\n    if (shouldNewNonContactPeersRequirePremium) return 'contacts_and_premium';\n    return 'everybody';\n  }, [shouldChargeForMessages, shouldNewNonContactPeersRequirePremium]);\n\n  useEffectWithPrevDeps(([prevSelectedValue]) => {\n    if (\n      !hasShownNotification && prevSelectedValue !== undefined\n      && selectedValue !== 'everybody'\n      && selectedValue !== prevSelectedValue\n    ) {\n      if (privacy.chatInvite?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyInviteText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyGroupChats },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      if (privacy.phoneCall?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyCallsText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyPhoneCall },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      setHasShownNotification(true);\n    }\n  }, [selectedValue, shouldChargeForMessages, privacy, lang, hasShownNotification]);\n\n  const options = useMemo(() => {\n    return [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts_and_premium',\n        label: canChangeForContactsAndPremium ? (\n          oldLang('PrivacyMessagesContactsAndPremium')\n        ) : (\n          <PrivacyLockedOption\n            label={oldLang('PrivacyMessagesContactsAndPremium')}\n            isChecked={selectedValue === 'contacts_and_premium'}\n          />\n        ),\n        hidden: !canChangeForContactsAndPremium,\n        isCanCheckedInDisabled: true,\n      },\n      {\n        value: 'charge_for_messages',\n        label: canChangeChargeForMessages ? (\n          lang('PrivacyChargeForMessages')\n        ) : (\n          <PrivacyLockedOption\n            label={lang('PrivacyChargeForMessages')}\n            isChecked={selectedValue === 'charge_for_messages'}\n          />\n        ),\n        hidden: !canChangeChargeForMessages,\n        isCanCheckedInDisabled: true,\n      },\n    ];\n  }, [oldLang, lang, canChangeForContactsAndPremium, canChangeChargeForMessages, selectedValue]);\n\n  const handleChange = useLastCallback((privacyValue: string) => {\n    updateGlobalPrivacySettings({\n      shouldNewNonContactPeersRequirePremium: privacyValue === 'contacts_and_premium',\n      // eslint-disable-next-line no-null/no-null\n      nonContactPeersPaidStars: privacyValue === 'charge_for_messages' ? chargeForMessages : null,\n    });\n  });\n\n  const updateGlobalPrivacySettingsWithDebounced = useDebouncedCallback((value: number) => {\n    updateGlobalPrivacySettings({\n      nonContactPeersPaidStars: value,\n    });\n  }, [updateGlobalPrivacySettings], 300, true);\n\n  const handleChargeForMessagesChange = useCallback((value: number) => {\n    setChargeForMessages(value);\n    updateGlobalPrivacySettingsWithDebounced(value);\n  }, [setChargeForMessages, updateGlobalPrivacySettingsWithDebounced]);\n\n  function renderSectionNoPaidMessagesForUsers() {\n    const itemSubtitle = !noPaidReactionsForUsersCount ? lang('SubtitlePrivacyAddUsers')\n      : oldLang('Users', noPaidReactionsForUsersCount, 'i');\n\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('RemoveFeeTitle')}\n        </h4>\n        <ListItem\n          narrow\n          icon=\"delete-user\"\n\n          onClick={() => {\n            openSettingsScreen({ screen: SettingsScreens.PrivacyNoPaidMessages });\n          }}\n        >\n          <div className=\"multiline-item full-size\">\n            <span className=\"title\">{lang('ExceptionTitlePrivacyChargeForMessages')}</span>\n            <span className=\"subtitle\">\n              {\n                itemSubtitle\n              }\n            </span>\n          </div>\n        </ListItem>\n      </div>\n    );\n  }\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const privacyDescription = useMemo(() => {\n    if (shouldChargeForMessages) return lang('PrivacyDescriptionChargeForMessages');\n    return lang('PrivacyDescriptionMessagesContactsAndPremium');\n  }, [shouldChargeForMessages, lang]);\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('PrivacyMessagesTitle')}\n        </h4>\n        <RadioGroup\n          name=\"privacy-messages\"\n          options={options}\n          onChange={handleChange}\n          selected={selectedValue}\n        />\n        <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {privacyDescription}\n        </p>\n      </div>\n      {selectedValue === 'charge_for_messages' && (\n        <div className=\"settings-item fluid-container\">\n          <PaidMessagePrice\n            canChangeChargeForMessages={canChangeChargeForMessages}\n            chargeForMessages={chargeForMessages}\n            onChange={handleChargeForMessagesChange}\n          />\n        </div>\n      )}\n      {canChangeChargeForMessages && selectedValue === 'charge_for_messages' && renderSectionNoPaidMessagesForUsers()}\n      {!isCurrentUserPremium && selectedValue !== 'charge_for_messages'\n        && <PremiumStatusItem premiumSection=\"message_privacy\" />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    settings: {\n      privacy,\n    },\n  } = global;\n  const nonContactPeersPaidStars = selectNonContactPeersPaidStars(global);\n\n  const noPaidReactionsForUsersCount = global.settings.privacy.noPaidMessages?.allowUserIds.length || 0;\n\n  return {\n    shouldNewNonContactPeersRequirePremium: selectNewNoncontactPeersRequirePremium(global),\n    shouldChargeForMessages: Boolean(nonContactPeersPaidStars),\n    nonContactPeersPaidStars: nonContactPeersPaidStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    canLimitNewMessagesWithoutPremium: global.appConfig?.canLimitNewMessagesWithoutPremium,\n    canChargeForMessages: global.appConfig?.starsPaidMessagesAvailable,\n    noPaidReactionsForUsersCount,\n    privacy,\n  };\n})(PrivacyMessages));\n","import type { ApiSession } from '../../../../api/types';\nimport type { DeviceType } from '../../../../types/icons/device';\n\nexport default function getSessionIcon(session: ApiSession): DeviceType {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"M84mrPgu\",\"settingsActiveSession\":\"M84mrPgu\",\"iconDevice\":\"Add8P_K4\",\"iconDevice__android\":\"onkXVGY4\",\"iconDeviceAndroid\":\"onkXVGY4\",\"iconDevice__apple\":\"xw13aT8u\",\"iconDeviceApple\":\"xw13aT8u\",\"iconDevice__brave\":\"HESrGUdv\",\"iconDeviceBrave\":\"HESrGUdv\",\"iconDevice__chrome\":\"Vpej7wm7\",\"iconDeviceChrome\":\"Vpej7wm7\",\"iconDevice__edge\":\"ueWE77x9\",\"iconDeviceEdge\":\"ueWE77x9\",\"iconDevice__firefox\":\"_lMTmvya\",\"iconDeviceFirefox\":\"_lMTmvya\",\"iconDevice__linux\":\"cDVfvyG_\",\"iconDeviceLinux\":\"cDVfvyG_\",\"iconDevice__opera\":\"nWqlTxZt\",\"iconDeviceOpera\":\"nWqlTxZt\",\"iconDevice__safari\":\"ldFLp1Gf\",\"iconDeviceSafari\":\"ldFLp1Gf\",\"iconDevice__samsung\":\"VHNORBGL\",\"iconDeviceSamsung\":\"VHNORBGL\",\"iconDevice__ubuntu\":\"QBVivtdu\",\"iconDeviceUbuntu\":\"QBVivtdu\",\"iconDevice__unknown\":\"GbjIgrwU\",\"iconDeviceUnknown\":\"GbjIgrwU\",\"iconDevice__vivaldi\":\"yieVnjoI\",\"iconDeviceVivaldi\":\"yieVnjoI\",\"iconDevice__windows\":\"_0dnTFOE\",\"iconDeviceWindows\":\"_0dnTFOE\",\"iconDevice__xbox\":\"fbCjjDpU\",\"iconDeviceXbox\":\"fbCjjDpU\",\"title\":\"c6edjhlh\",\"note\":\"lRqTZAYn\",\"date\":\"oLnN6crs\",\"box\":\"wVEXuPlZ\",\"actionHeader\":\"olQS2T1n\",\"actionName\":\"KuX1APpO\",\"headerButton\":\"VT8pZfMu\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useOldLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName}\n          {' '}\n          {renderingSession?.appVersion}\n          ,\n          {' '}\n          {renderingSession?.platform}\n          {' '}\n          {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)}`} iconClassName=\"icon-device\">\n          <div className=\"multiline-item full-size\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName}\n              {' '}\n              {session.appVersion}\n              ,\n              {' '}\n              {session.platform}\n              {' '}\n              {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">\n              {session.ip}\n              {' '}\n              -\n              {' '}\n              {getLocation(session)}\n            </span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p className=\"settings-item-description-larger\">{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)}`}\n        iconClassName=\"icon-device\"\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName}\n            {' '}\n            {session.appVersion}\n            ,\n            {' '}\n            {session.platform}\n            {' '}\n            {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">\n            {session.ip}\n            {' '}\n            {getLocation(session)}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wd0fmiSY\",\"avatar\":\"OhZHdRsP\",\"title\":\"EQ7__xGn\",\"note\":\"YRYk96ki\",\"box\":\"kmCTIfvf\",\"action-header\":\"qkq5Fa0V\",\"actionHeader\":\"qkq5Fa0V\",\"action-name\":\"zFYUiy13\",\"actionName\":\"zFYUiy13\",\"header-button\":\"lUf0RJ2h\",\"headerButton\":\"lUf0RJ2h\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useOldLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): StateProps => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"v0wP46TR\",\"clear-help\":\"WnnxcARX\",\"clearHelp\":\"WnnxcARX\",\"subtitle\":\"uEUfjByC\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} peer={bot} size=\"tiny\" />\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}\n            ,\n            {session.browser}\n            ,\n            {session.platform}\n          </span>\n          <span className={buildClassName('subtitle', styles.subtitle)}>\n            {session.ip}\n            {' '}\n            {session.region}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { CHAT_HEIGHT_PX, STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useLastCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  });\n\n  if (!stickerSet?.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      className={buildClassName('StickerSetCard', 'chat-item-clickable small-icon', className)}\n      style={`height: ${CHAT_HEIGHT_PX}px;`}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', {\n      limit: lang('FileSizeMB', { count: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] }),\n    });\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettingsContacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsPrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsGroupChats')}\n          checked={canAutoLoadInGroups}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsChannels')}\n          checked={canAutoLoadInChannels}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadFilesTitle'),\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ys1i4ssl\",\"item\":\"skaVPMTF\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { partition } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useOldLang();\n  const language = lang.code || 'en';\n  const [displayedOptions, setDisplayedOptions] = useState<string[]>([]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedOptionList: ItemPickerOption[] = useMemo(() => {\n    const options = SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).filter(Boolean).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n\n    if (!searchQuery.trim()) {\n      const currentLanguageOption = options.find((option) => option.value === language);\n      const otherOptionList = options.filter((option) => option.value !== language);\n      return currentLanguageOption ? [currentLanguageOption, ...otherOptionList] : options;\n    }\n\n    return options?.filter((option) => option.label.toLowerCase().includes(searchQuery.toLowerCase()));\n  }, [language, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive, prevLanguage]) => {\n    if (prevIsActive === isActive && prevLanguage?.find((option) => option === language)) return;\n    const [selected] = partition(displayedOptionList, (option) => doNotTranslate.includes(option.value));\n    setDisplayedOptions([...selected.map((option) => option.value)]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, displayedOptionList]);\n\n  const handleChange = useLastCallback((newSelectedIds: string[]) => {\n    setDisplayedOptions(newSelectedIds);\n    setSettingOption({\n      doNotTranslate: newSelectedIds,\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content infinite-scroll')}>\n      <div className={buildClassName(styles.item)}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedOptionList}\n          selectedValues={displayedOptions}\n          onSelectedValuesChange={handleChange}\n          filterValue={searchQuery}\n          onFilterChange={setSearchQuery}\n          isSearchable\n          allowMultiple\n          withDefaultPadding\n          itemInputType=\"checkbox\"\n          searchInputId=\"lang-picker-search\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUsername } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { isBetween } from '../../util/math';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 56;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useOldLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePreviousDeprecated(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (!usernameForConfirm) {\n      return;\n    }\n\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">\n                    @\n                    {usernameData.username}\n                  </span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PaO1MMi5\",\"header\":\"wSswdVkR\",\"description\":\"oiJc22Aj\",\"sortableContainer\":\"lAeeBh9K\",\"item\":\"l04OwRBg\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  isUsernameValid, MAX_USERNAME_LENGTH, MIN_UPDATE_USERNAME_LENGTH, USERNAME_REGEX,\n} from '../../util/entities/username';\nimport { debounce } from '../../util/schedulers';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useOldLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_UPDATE_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim();\n    // Prevent prefix editing\n    if (asLink && !value.match(LINK_PREFIX_REGEX)) {\n      if (!value.length) {\n        setUsername('');\n        onChange?.('');\n      }\n      return;\n    }\n    const newUsername = value.replace(LINK_PREFIX_REGEX, '');\n\n    setUsername(newUsername);\n\n    const isValid = newUsername === '' ? true : isUsernameValid(newUsername, true);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-item\">\n          <div className=\"settings-input\">\n            <AvatarEditable\n              currentAvatarBlobUrl={currentAvatarBlobUrl}\n              onChange={handlePhotoChange}\n              title=\"Edit your profile photo\"\n              disabled={isLoading}\n            />\n            <InputText\n              value={firstName}\n              onChange={handleFirstNameChange}\n              label={lang('FirstName')}\n              disabled={isLoading}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              value={lastName}\n              onChange={handleLastNameChange}\n              label={lang('LastName')}\n              disabled={isLoading}\n            />\n            <TextArea\n              value={bio}\n              onChange={handleBioChange}\n              label={lang('UserBio')}\n              disabled={isLoading}\n              maxLength={maxBioLength}\n              maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n            />\n          </div>\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <div className=\"settings-input\">\n            <UsernameInput\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n          </div>\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}\n              <br />\n              <span className=\"username-link\">\n                {TME_LINK_PREFIX}\n                {editableUsername}\n              </span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser;\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { DEBUG_LOG_FILENAME } from '../../../config';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_ELECTRON,\n  IS_SNAP_EFFECT_SUPPORTED,\n  IS_WAVE_TRANSFORM_SUPPORTED,\n} from '../../../util/browser/windowEnvironment';\nimport { getDebugLogs } from '../../../util/debugConsole';\nimport download from '../../../util/download';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport { animateSnap } from '../../main/visualEffects/SnapEffectContainer';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  shouldForceHttpTransport?: boolean;\n  shouldAllowHttpTransport?: boolean;\n  shouldCollectDebugLogs?: boolean;\n  shouldDebugExportedSenders?: boolean;\n};\n\nconst SettingsExperimental: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  shouldForceHttpTransport,\n  shouldAllowHttpTransport,\n  shouldCollectDebugLogs,\n  shouldDebugExportedSenders,\n}) => {\n  const { requestConfetti, setSharedSettingOption, requestWave } = getActions();\n\n  const snapButtonRef = useRef<HTMLDivElement>();\n  const [isSnapButtonAnimating, setIsSnapButtonAnimating] = useState(false);\n\n  const lang = useOldLang();\n\n  const [isAutoUpdateEnabled, setIsAutoUpdateEnabled] = useState(false);\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsAutoUpdateEnabled);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDownloadLog = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    const url = URL.createObjectURL(file);\n    download(url, DEBUG_LOG_FILENAME);\n  });\n\n  const handleIsAutoUpdateEnabledChange = useCallback((isChecked: boolean) => {\n    window.electron?.setIsAutoUpdateEnabled(isChecked);\n  }, []);\n\n  const handleRequestWave = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    requestWave({ startX: e.clientX, startY: e.clientY });\n  });\n\n  const handleRequestConfetti = useLastCallback(() => {\n    requestConfetti({ withStars: true });\n  });\n\n  const handleSnap = useLastCallback(() => {\n    const button = snapButtonRef.current;\n    if (!button) return;\n\n    if (animateSnap(button)) {\n      setIsSnapButtonAnimating(true);\n      // Manual reset for debug\n      setTimeout(() => {\n        setIsSnapButtonAnimating(false);\n      }, 1500);\n    }\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description pt-3\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          onClick={handleRequestConfetti}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n        <ListItem\n          onClick={handleRequestWave}\n          icon=\"story-expired\"\n          disabled={!IS_WAVE_TRANSFORM_SUPPORTED}\n        >\n          <div className=\"title\">Start wave</div>\n        </ListItem>\n        <ListItem\n          ref={snapButtonRef}\n          onClick={handleSnap}\n          icon=\"spoiler\"\n          disabled={!IS_SNAP_EFFECT_SUPPORTED}\n          style={isSnapButtonAnimating ? 'visibility: hidden' : ''}\n        >\n          <div className=\"title\">Vaporize this button</div>\n        </ListItem>\n\n        <Checkbox\n          label=\"Allow HTTP Transport\"\n          checked={Boolean(shouldAllowHttpTransport)}\n\n          onCheck={() => setSharedSettingOption({ shouldAllowHttpTransport: !shouldAllowHttpTransport })}\n        />\n\n        <Checkbox\n          label=\"Force HTTP Transport\"\n          disabled={!shouldAllowHttpTransport}\n          checked={Boolean(shouldForceHttpTransport)}\n\n          onCheck={() => setSharedSettingOption({ shouldForceHttpTransport: !shouldForceHttpTransport })}\n        />\n\n        <Checkbox\n          label={lang('DebugMenuEnableLogs')}\n          checked={Boolean(shouldCollectDebugLogs)}\n\n          onCheck={() => setSharedSettingOption({ shouldCollectDebugLogs: !shouldCollectDebugLogs })}\n        />\n\n        <Checkbox\n          label=\"Enable exported senders debug\"\n          checked={Boolean(shouldDebugExportedSenders)}\n\n          onCheck={() => setSharedSettingOption({ shouldDebugExportedSenders: !shouldDebugExportedSenders })}\n        />\n\n        {IS_ELECTRON && (\n          <Checkbox\n            label=\"Enable autoupdates\"\n            checked={Boolean(isAutoUpdateEnabled)}\n            onCheck={handleIsAutoUpdateEnabledChange}\n          />\n        )}\n\n        <ListItem\n          onClick={handleDownloadLog}\n          icon=\"bug\"\n        >\n          <div className=\"title\">Download log</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    } = selectSharedSettings(global);\n\n    return {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    };\n  },\n)(SettingsExperimental));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { SharedSettings, ThemeKey, TimeFormat } from '../../../types';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_MAC_OS, IS_WINDOWS,\n} from '../../../util/browser/windowEnvironment';\nimport { setTimeFormat } from '../../../util/oldLangProvider';\nimport { getSystemTheme } from '../../../util/systemTheme';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<SharedSettings, (\n    'messageTextSize' |\n    'messageSendKeyCombo' |\n    'timeFormat' |\n    'theme' |\n    'shouldUseSystemTheme'\n  )>;\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n  onReset,\n}) => {\n  const {\n    setSharedSettingOption, openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const isMobileDevice = isMobile && (IS_IOS || IS_ANDROID);\n\n  const timeFormatOptions: IRadioOption[] = [{\n    label: lang('SettingsTimeFormat12'),\n    value: '12h',\n  }, {\n    label: lang('SettingsTimeFormat24'),\n    value: '24h',\n  }];\n\n  const appearanceThemeOptions: IRadioOption[] = [{\n    label: lang('EmptyChatAppearanceLight'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChatAppearanceDark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChatAppearanceSystem'),\n    value: 'auto',\n  }];\n\n  const keyboardSendOptions = !isMobileDevice ? [\n    { value: 'enter', label: lang('SettingsSendEnter'), subLabel: lang('SettingsSendEnterDescription') },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS || IS_IOS ? 'SettingsSendCmdenter' : 'SettingsSendCtrlenter'),\n      subLabel: lang('SettingsSendPlusEnterDescription'),\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSharedSettingOption({ messageTextSize: newSize });\n  }, []);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ThemeKey;\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, []);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSharedSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSharedSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, []);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSharedSettingOption({ messageSendKeyCombo: newCombo as SharedSettings['messageSendKeyCombo'] });\n  }, []);\n\n  const [isTrayIconEnabled, setIsTrayIconEnabled] = useState(false);\n  useEffect(() => {\n    window.electron?.getIsTrayIconEnabled().then(setIsTrayIconEnabled);\n  }, []);\n\n  const handleIsTrayIconEnabledChange = useCallback((isChecked: boolean) => {\n    window.electron?.setIsTrayIconEnabled(isChecked);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Settings')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground })}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n\n        {IS_ELECTRON && IS_WINDOWS && (\n          <Checkbox\n            label={lang('SettingsTray')}\n            checked={Boolean(isTrayIconEnabled)}\n            onCheck={handleIsTrayIconEnabledChange}\n          />\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={appearanceThemeOptions}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsTimeFormat')}\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={timeFormatOptions}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {keyboardSendOptions && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SettingsKeyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={keyboardSendOptions}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      theme,\n      shouldUseSystemTheme,\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n    } = selectSharedSettings(global);\n\n    return {\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\n\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransitionDeprecated(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePreviousDeprecated(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransitionDeprecated(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { validateFiles } from '../../../util/files';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n    openSettingsScreen,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.GeneralChatBackgroundColor });\n  }, []);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = selectThemeValues(global, theme) || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\n\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { captureEvents } from '../../../util/captureEvents';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { pick } from '../../../util/iteratees';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  const containerRef = useRef<HTMLDivElement>();\n  const colorPickerRef = useRef<HTMLDivElement>();\n  const huePickerRef = useRef<HTMLDivElement>();\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === `#${hex}` ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: React.RefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: React.RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = selectThemeValues(global, theme) || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    openSettingsScreen({ screen: SettingsScreens.Experimental });\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{oldLang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{oldLang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{oldLang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{oldLang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{oldLang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{oldLang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{oldLang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{oldLang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{oldLang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{oldLang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{oldLang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{oldLang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{oldLang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{oldLang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{oldLang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{oldLang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyBio:\n        return <h3>{oldLang('PrivacyBio')}</h3>;\n      case SettingsScreens.PrivacyBirthday:\n        return <h3>{oldLang('PrivacyBirthday')}</h3>;\n      case SettingsScreens.PrivacyGifts:\n        return <h3>{lang('PrivacyGifts')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{oldLang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{oldLang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyMessages:\n        return <h3>{oldLang('PrivacyMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{oldLang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{oldLang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{oldLang('AlwaysShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{oldLang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{oldLang('AlwaysAllow')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{oldLang('NeverAllow')}</h3>;\n\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return <h3>{lang('RemoveFeeTitle')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('MenuAnimations')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{oldLang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{oldLang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{oldLang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{oldLang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{oldLang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{oldLang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{oldLang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{oldLang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{oldLang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{oldLang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{oldLang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{oldLang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{oldLang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{oldLang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{oldLang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{oldLang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {oldLang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {oldLang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {oldLang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n\n              onClick={() => openSettingsScreen({ screen: SettingsScreens.EditProfile })}\n              ariaLabel={oldLang('lng_settings_information')}\n            >\n              <Icon name=\"edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{oldLang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={oldLang('AccDescrGoBack')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={oldLang('lng_sure_logout')}\n        confirmLabel={oldLang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings, LangCode, SharedSettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { oldSetLanguage } from '../../../util/oldLangProvider';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n} & Pick<AccountSettings, 'canTranslate' | 'canTranslateChats' | 'doNotTranslate'>\n& Pick<SharedSettings, 'language' | 'languages'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  languages,\n  language,\n  canTranslate,\n  canTranslateChats,\n  doNotTranslate,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n    setSharedSettingOption,\n    openPremiumModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const canTranslateChatsEnabled = isCurrentUserPremium && canTranslateChats;\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!languages?.length) {\n      loadLanguages();\n    }\n  }, [languages]);\n\n  const handleChange = useLastCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void oldSetLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSharedSettingOption({ language: langCode as LangCode });\n    });\n  });\n\n  const options = useMemo(() => {\n    if (!languages) return undefined;\n    const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n    const shortLangCode = currentLangCode.substr(0, 2);\n\n    return languages.map(({ langCode, nativeName, name }) => ({\n      value: langCode,\n      label: nativeName,\n      subLabel: name,\n      isLoading: langCode === selectedLanguage && isLoading,\n    } satisfies ItemPickerOption)).sort((a) => {\n      return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n    });\n  }, [isLoading, languages, selectedLanguage]);\n\n  const handleShouldTranslateChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  });\n\n  const handleShouldTranslateChatsChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslateChats: newValue });\n  });\n\n  const handleShouldTranslateChatsClick = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'translations',\n      });\n    }\n  });\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.DoNotTranslate });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          <Checkbox\n            label={lang('ShowTranslateChatButton')}\n            checked={canTranslateChatsEnabled}\n            disabled={!isCurrentUserPremium}\n            rightIcon={!isCurrentUserPremium ? 'lock' : undefined}\n            onClickLabel={handleShouldTranslateChatsClick}\n            onCheck={handleShouldTranslateChatsChange}\n          />\n          {(canTranslate || canTranslateChatsEnabled) && (\n            <ListItem\n              narrow\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item settings-item-picker\">\n        <h4 className=\"settings-item-header\">\n          {lang('Localization.InterfaceLanguage')}\n        </h4>\n        {options ? (\n          <ItemPicker\n            items={options}\n            selectedValue={selectedLanguage}\n            forceRenderAllItems\n            onSelectedValueChange={handleChange}\n            itemInputType=\"radio\"\n            className=\"settings-picker\"\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      canTranslate, canTranslateChats, doNotTranslate,\n    } = global.settings.byKey;\n    const { language, languages } = selectSharedSettings(global);\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      languages,\n      language,\n      canTranslate,\n      canTranslateChats,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarsAmount, ApiTonAmount } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { FAQ_URL, PRIVACY_URL, TON_CURRENCY_CODE } from '../../../config';\nimport { formatStarsAmount } from '../../../global/helpers/payments';\nimport {\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectIsPremiumPurchaseBlocked,\n} from '../../../global/selectors';\nimport { convertCurrencyFromBaseUnit } from '../../../util/formatCurrency';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport ChatExtra from '../../common/profile/ChatExtra';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUserId?: string;\n  canBuyPremium?: boolean;\n  isGiveawayAvailable?: boolean;\n  starsBalance?: ApiStarsAmount;\n  tonBalance?: ApiTonAmount;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentUserId,\n  sessionCount,\n  canBuyPremium,\n  isGiveawayAvailable,\n  starsBalance,\n  tonBalance,\n  onReset,\n}) => {\n  const {\n    loadMoreProfilePhotos,\n    openPremiumModal,\n    openSupportChat,\n    openUrl,\n    openGiftRecipientPicker,\n    openStarsBalanceModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [isSupportDialogOpen, openSupportDialog, closeSupportDialog] = useFlag(false);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (currentUserId) {\n      loadMoreProfilePhotos({ peerId: currentUserId, isPreload: true });\n    }\n  }, [currentUserId]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleOpenSupport = useLastCallback(() => {\n    openSupportChat();\n    closeSupportDialog();\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu self-profile\">\n        {currentUserId && (\n          <ProfileInfo\n            peerId={currentUserId}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUserId && (\n          <ChatExtra\n            chatOrUserId={currentUserId}\n            isInSettings\n          />\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"settings\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.General })}\n        >\n          {lang('TelegramGeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Performance })}\n        >\n          {lang('MenuAnimations')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Notifications })}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.DataStorage })}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Privacy })}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Folders })}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveSessions })}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Language })}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.languageInfo.nativeName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Stickers })}\n        >\n          {lang('MenuStickers')}\n        </ListItem>\n      </div>\n      <div className=\"settings-main-menu\">\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n            narrow\n\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"gold\" size=\"big\" />}\n          narrow\n\n          onClick={() => openStarsBalanceModal({})}\n        >\n          {lang('MenuStars')}\n          {Boolean(starsBalance) && (\n            <span className=\"settings-item__current-value\">\n              {formatStarsAmount(lang, starsBalance)}\n            </span>\n          )}\n        </ListItem>\n        <ListItem\n          leftElement={<Icon className=\"icon ListItem-main-icon\" name=\"toncoin\" />}\n          narrow\n          onClick={() => openStarsBalanceModal({ currency: TON_CURRENCY_CODE })}\n        >\n          {lang('MenuTon')}\n          {Boolean(tonBalance) && (\n            <span className=\"settings-item__current-value\">\n              {convertCurrencyFromBaseUnit(tonBalance.amount, tonBalance.currency)}\n            </span>\n          )}\n        </ListItem>\n        {isGiveawayAvailable && (\n          <ListItem\n            icon=\"gift\"\n            narrow\n\n            onClick={() => openGiftRecipientPicker()}\n          >\n            {lang('MenuSendGift')}\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"ask-support\"\n          narrow\n          onClick={openSupportDialog}\n        >\n          {lang('AskAQuestion')}\n        </ListItem>\n        <ListItem\n          icon=\"help\"\n          narrow\n\n          onClick={() => openUrl({ url: FAQ_URL })}\n        >\n          {lang('MenuTelegramFaq')}\n        </ListItem>\n        <ListItem\n          icon=\"privacy-policy\"\n          narrow\n\n          onClick={() => openUrl({ url: PRIVACY_URL })}\n        >\n          {lang('MenuPrivacyPolicy')}\n        </ListItem>\n      </div>\n      <ConfirmDialog\n        isOpen={isSupportDialogOpen}\n        confirmLabel={lang('OK')}\n        title={lang('AskAQuestion')}\n        textParts={lang('MenuAskText', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        confirmHandler={handleOpenSupport}\n        onClose={closeSupportDialog}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const starsBalance = global.stars?.balance;\n    const tonBalance = global.ton?.balance;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUserId,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isGiveawayAvailable,\n      starsBalance,\n      tonBalance,\n    };\n  },\n)(SettingsMain));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiNotifyPeerType, ApiPeerNotifySettings } from '../../../api/types';\n\nimport {\n  checkIfNotificationsSupported,\n  checkIfOfflinePushFailed,\n  playNotifySound,\n} from '../../../util/notifications';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  notifyDefaults?: Record<ApiNotifyPeerType, ApiPeerNotifySettings>;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  notifyDefaults,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const areNotificationsSupported = checkIfNotificationsSupported();\n  const areOfflineNotificationsSupported = areNotificationsSupported && !checkIfOfflinePushFailed();\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: ApiNotifyPeerType,\n    setting: 'mute' | 'showPreviews',\n  ) => {\n    const currentIsMuted = Boolean(notifyDefaults?.[peerType]?.mutedUntil);\n    const currentShouldShowPreviews = Boolean(notifyDefaults?.[peerType]?.shouldShowPreviews);\n\n    updateNotificationSettings({\n      peerType,\n      isMuted: setting === 'mute' ? !e.target.checked : currentIsMuted,\n      shouldShowPreviews: setting === 'showPreviews' ? e.target.checked : currentShouldShowPreviews,\n    });\n  }, [notifyDefaults]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const isEnabled = e.target.checked;\n    updateWebNotificationSettings({\n      hasWebNotifications: isEnabled,\n      ...(!isEnabled && { hasPushNotifications: false }),\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'mute');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('NotificationsWeb')}\n        </h4>\n        <Checkbox\n          label={lang('NotificationsWeb')}\n          subLabel={lang(hasWebNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={hasWebNotifications}\n          disabled={!areNotificationsSupported}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label={lang('NotificationsOffline')}\n          disabled={!hasWebNotifications || !areOfflineNotificationsSupported}\n          subLabel={areOfflineNotificationsSupported\n            ? lang(hasPushNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')\n            : lang('SettingsOfflineNotificationUnsupported')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label={lang('NotificationsSound')}\n            min={0}\n            max={10}\n            disabled={!areNotificationsSupported}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          subLabel={lang(notifyDefaults?.users?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.users?.mutedUntil)}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.users?.mutedUntil}\n          subLabel={lang(notifyDefaults?.users?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.users?.shouldShowPreviews)}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(notifyDefaults?.groups?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.groups?.mutedUntil)}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.groups?.mutedUntil}\n          subLabel={lang(notifyDefaults?.groups?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.groups?.shouldShowPreviews)}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          subLabel={lang(notifyDefaults?.channels?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.channels?.mutedUntil)}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.channels?.mutedUntil}\n          subLabel={lang(notifyDefaults?.channels?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.channels?.shouldShowPreviews)}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { IS_BACKDROP_BLUR_SUPPORTED, IS_SNAP_EFFECT_SUPPORTED } from '../../../util/browser/windowEnvironment';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype PerformanceSection = [RegularLangKey, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: RegularLangKey;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderMedium',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderCustom',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['SettingsPerformanceInterfaceAnimations', [\n    { key: 'pageTransitions', label: 'SettingsPerformancePageTransitions' },\n    { key: 'messageSendingAnimations', label: 'SettingsPerformanceSending' },\n    { key: 'mediaViewerAnimations', label: 'SettingsPerformanceMediaViewer' },\n    { key: 'messageComposerAnimations', label: 'SettingsPerformanceComposer' },\n    { key: 'contextMenuAnimations', label: 'SettingsPerformanceContextAnimation' },\n    { key: 'contextMenuBlur', label: 'SettingsPerformanceContextBlur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'SettingsPerformanceRightColumn' },\n    { key: 'snapEffect', label: 'SettingsPerformanceThanos' },\n  ]],\n  ['SettingsPerformanceStickers', [\n    { key: 'animatedEmoji', label: 'SettingsPerformanceAnimatedEmoji' },\n    { key: 'loopAnimatedStickers', label: 'SettingsPerformanceLoopStickers' },\n    { key: 'reactionEffects', label: 'SettingsPerformanceReactionEffects' },\n    { key: 'stickerEffects', label: 'SettingsPerformanceStickerEffects' },\n  ]],\n  ['SettingsPerformanceMediaAutoplay', [\n    { key: 'autoplayGifs', label: 'SettingsPerformanceAutoplayGif' },\n    { key: 'autoplayVideos', label: 'SettingsPerformanceAutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSharedSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MID)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n\n  const animationLevelOptions = useMemo(() => {\n    const options = animationLevelState === ANIMATION_LEVEL_CUSTOM\n      ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n      : ANIMATION_LEVEL_OPTIONS;\n\n    return options.map((option) => lang(option));\n  }, [animationLevelState, lang]);\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MID : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performance);\n  }, []);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderTitle')}\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderSubtitle')}\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">Resource-Intensive Processes</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => {\n                    if (key === 'snapEffect' && !IS_SNAP_EFFECT_SUPPORTED) return undefined;\n                    return (\n                      <Checkbox\n                        key={key}\n                        name={key}\n                        checked={performanceSettings[key]}\n                        label={lang(label)}\n                        disabled={disabled}\n                        onChange={handlePropertyChange}\n                      />\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config.ts';\nimport {\n  selectCanSetPasscode, selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { getClosestEntry } from '../../../util/getClosestEntry.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  canSetPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages: boolean;\n  canDisplayChatInTitle?: boolean;\n  isCurrentUserFrozen?: boolean;\n  needAgeVideoVerification?: boolean;\n  privacy: GlobalState['settings']['privacy'];\n  accountDaysTtl?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  canDisplayChatInTitle,\n  canSetPasscode,\n  needAgeVideoVerification,\n  privacy,\n  onReset,\n  isCurrentUserFrozen,\n  accountDaysTtl,\n}) => {\n  const {\n    openDeleteAccountModal,\n    loadPrivacySettings,\n    loadBlockedUsers,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    setSharedSettingOption,\n    openSettingsScreen,\n    loadAccountDaysTtl,\n    openAgeVerificationModal,\n  } = getActions();\n\n  useEffect(() => {\n    if (!isCurrentUserFrozen) {\n      loadBlockedUsers();\n      loadPrivacySettings();\n      loadWebAuthorizations();\n    }\n  }, [isCurrentUserFrozen]);\n\n  useEffect(() => {\n    if (isActive && !isCurrentUserFrozen) {\n      loadGlobalPrivacySettings();\n      loadAccountDaysTtl();\n    }\n  }, [isActive, isCurrentUserFrozen, loadGlobalPrivacySettings]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSharedSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings({ isSensitiveEnabled: isChecked });\n  }, [updateContentSettings]);\n\n  const handleAgeVerification = useCallback(() => {\n    openAgeVerificationModal();\n  }, [openAgeVerificationModal]);\n\n  const handleOpenDeleteAccountModal = useLastCallback(() => {\n    if (!accountDaysTtl) return;\n    openDeleteAccountModal({ days: accountDaysTtl });\n  });\n\n  const dayOption = useMemo(() => {\n    if (!accountDaysTtl) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, accountDaysTtl / DAYS_PER_MONTH).toString();\n  }, [accountDaysTtl]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    if (!setting) return oldLang('Loading');\n\n    const { visibility, shouldAllowPremium, botsPrivacy } = setting;\n\n    const isAllowBots = botsPrivacy === 'allow';\n    const isVisibilityEverybody = visibility === 'everybody';\n    const shouldShowBotsString = isAllowBots && !isVisibilityEverybody;\n\n    const blockCount = setting.blockChatIds.length + setting.blockUserIds.length;\n    const allowCount = setting.allowChatIds.length + setting.allowUserIds.length;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount && !isVisibilityEverybody) total.push(`+${allowCount}`);\n\n    const botPrivacyString = shouldShowBotsString ? lang('PrivacyValueBots') : '';\n    const totalString = lang.conjunction(total);\n\n    const exceptionString = [botPrivacyString, totalString].filter(Boolean).join(' ');\n    if (shouldShowBotsString && !isVisibilityEverybody) return exceptionString;\n\n    if (shouldAllowPremium) {\n      return oldLang(exceptionString ? 'ContactsAndPremium' : 'PrivacyPremium');\n    }\n\n    switch (visibility) {\n      case 'everybody':\n        return `${oldLang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${oldLang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${oldLang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBlockedUsers })}\n        >\n          {oldLang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {canSetPasscode && (\n          <ListItem\n            icon=\"key\"\n            narrow\n\n            onClick={() => openSettingsScreen({\n              screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            })}\n          >\n            <div className=\"multiline-item\">\n              <span className=\"title\">{oldLang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {oldLang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({\n            screen: hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {oldLang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveWebsites })}\n          >\n            {oldLang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{oldLang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.lastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.profilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBio })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBio')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.bio)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBirthday')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.birthday)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGifts })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{lang('PrivacyGifts')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.gifts)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.forwards)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          allowDisabledClick\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.voiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {shouldChargeForMessages ? lang('PrivacyPaidMessagesValue')\n                : shouldNewNonContactPeersRequirePremium\n                  ? oldLang('PrivacyMessagesContactsAndPremium')\n                  : oldLang('P2PEverybody')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.chatInvite)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item fluid-container\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={oldLang('lng_settings_sensitive_disable_filtering')}\n            subLabel={oldLang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive || (!isSensitiveEnabled && needAgeVideoVerification)}\n            onCheck={handleUpdateContentSettings}\n          />\n          {!isSensitiveEnabled && needAgeVideoVerification && (\n            <Button\n              color=\"primary\"\n              fluid\n              size=\"smaller\"\n              noForcedUpperCase\n              className=\"settings-unlock-button\"\n              onClick={handleAgeVerification}\n            >\n              <span className=\"settings-unlock-button-title\">\n                {lang('ButtonAgeVerification')}\n              </span>\n            </Button>\n          )}\n        </div>\n      )}\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={oldLang('ArchiveAndMute')}\n            subLabel={oldLang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={oldLang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('DeleteMyAccount')}\n        </h4>\n        <ListItem\n          narrow\n          onClick={handleOpenDeleteAccountModal}\n        >\n          {lang('DeleteAccountIfAwayFor')}\n          <span className=\"settings-item__current-value\">\n            {lang('Months', { count: dayOption }, { pluralValue: 1 })}\n          </span>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          shouldNewNonContactPeersRequirePremium, nonContactPeersPaidStars,\n        },\n        privacy,\n        accountDaysTtl,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    const { canDisplayChatInTitle } = selectSharedSettings(global);\n    const shouldChargeForMessages = Boolean(nonContactPeersPaidStars);\n    const isCurrentUserFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      shouldNewNonContactPeersRequirePremium,\n      shouldChargeForMessages,\n      needAgeVideoVerification: Boolean(appConfig?.needAgeVideoVerification),\n      privacy,\n      canDisplayChatInTitle,\n      canSetPasscode: selectCanSetPasscode(global),\n      isCurrentUserFrozen,\n      accountDaysTtl,\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockUser,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterPeersByQuery({ ids: availableContactIds, query: search, type: 'user' })\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    blockUser({ userId });\n    onClose();\n  }, [onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockUser } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((userId: string) => {\n    unblockUser({ userId });\n  }, [unblockUser]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, userId) => {\n      const isPrivate = isUserId(userId);\n      const user = isPrivate ? usersByIds[userId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[userId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = usersByIds[contactId];\n    const chat = chatsByIds[contactId];\n    const peer = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          peer={peer}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {peer && <FullNameTitle peer={peer} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (\n            <div className=\"contact-username\" dir=\"auto\">\n              @\n              {userMainUsername}\n            </div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container settings-item\">\n              {blockedIds.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        className=\"block-user-button\"\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <Icon name=\"add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { ApiPrivacyKey } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyBio:\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return 'bio';\n    case SettingsScreens.PrivacyBirthday:\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return 'birthday';\n    case SettingsScreens.PrivacyGifts:\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return 'gifts';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n    case SettingsScreens.PrivacyAddByPhone:\n      return 'addByPhone';\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return 'noPaidMessages';\n  }\n\n  return undefined;\n}\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiDisallowedGiftsSettings } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\n\ntype StateProps = {\n  disallowedGifts?: ApiDisallowedGiftsSettings;\n  isCurrentUserPremium: boolean;\n};\n\nconst SettingsAcceptedGift = ({\n  disallowedGifts, isCurrentUserPremium,\n}: StateProps) => {\n  const { showNotification, updateGlobalPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const handleOpenTelegramPremiumModal = useLastCallback(() => {\n    showNotification({\n      message: lang('PrivacySubscribeToTelegramPremium'),\n      action: {\n        action: 'openPremiumModal',\n        payload: {},\n      },\n      actionText: { key: 'Open' },\n      icon: 'star',\n    });\n  });\n\n  const handleLimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowLimitedStarGifts: !disallowedGifts?.shouldDisallowLimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUnlimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUnlimitedStarGifts: !disallowedGifts?.shouldDisallowUnlimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUniqueChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUniqueStarGifts: !disallowedGifts?.shouldDisallowUniqueStarGifts || undefined,\n      },\n    });\n  });\n\n  const handlePremiumSubscriptionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowPremiumGifts: !disallowedGifts?.shouldDisallowPremiumGifts || undefined,\n      },\n    });\n  });\n\n  return (\n    <div className=\"settings-item\">\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftTitle')}\n      </h4>\n      <ListItem onClick={handleLimitedEditionChange}>\n        <span>{lang('PrivacyGiftLimitedEdition')}</span>\n        <Switcher\n          id=\"limited_edition\"\n          label={disallowedGifts?.shouldDisallowLimitedStarGifts ? lang('PrivacyDisableLimitedEditionStarGifts')\n            : lang('PrivacyEnableLimitedEditionStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowLimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUnlimitedEditionChange}>\n        <span>{lang('PrivacyGiftUnlimited')}</span>\n        <Switcher\n          id=\"unlimited\"\n          label={disallowedGifts?.shouldDisallowUnlimitedStarGifts ? lang('PrivacyDisableUnlimitedStarGifts')\n            : lang('PrivacyEnableUnlimitedStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUnlimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUniqueChange}>\n        <span>{lang('PrivacyGiftUnique')}</span>\n        <Switcher\n          id=\"unique\"\n          label={disallowedGifts?.shouldDisallowUniqueStarGifts ? lang('PrivacyDisableUniqueStarGifts')\n            : lang('PrivacyEnableUniqueStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUniqueStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handlePremiumSubscriptionChange}>\n        <span>{lang('PrivacyGiftPremiumSubscription')}</span>\n        <Switcher\n          id=\"premium_subscription\"\n          label={disallowedGifts?.shouldDisallowPremiumGifts ? lang('PrivacyDisablePremiumGifts')\n            : lang('PrivacyEnablePremiumGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowPremiumGifts}\n        />\n      </ListItem>\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          disallowedGifts,\n        },\n      },\n    } = global;\n\n    return {\n      disallowedGifts,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsAcceptedGift));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { PrivacyVisibility } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium, selectShouldHideReadMarks } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  visibility?: PrivacyVisibility;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n  shouldHideReadMarks: boolean;\n};\n\nconst SettingsPrivacyLastSeen = ({\n  isCurrentUserPremium, shouldHideReadMarks, visibility,\n}: OwnProps & StateProps) => {\n  const { updateGlobalPrivacySettings, openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const canShowHideReadTime = visibility === 'nobody' || visibility === 'contacts';\n\n  const handleChangeShouldHideReadMarks = useLastCallback(\n    (isEnabled) => updateGlobalPrivacySettings({ shouldHideReadMarks: isEnabled }),\n  );\n\n  const handleOpenPremiumModal = useLastCallback(() => {\n    openPremiumModal({\n      initialSection: 'last_seen',\n    });\n  });\n\n  return (\n    <>\n      {canShowHideReadTime && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('HideReadTime')}\n            checked={shouldHideReadMarks}\n            onCheck={handleChangeShouldHideReadMarks}\n          />\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('HideReadTimeInfo'), ['br'])}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n          onClick={handleOpenPremiumModal}\n        >\n          {isCurrentUserPremium ? lang('PrivacyLastSeenPremiumForPremium') : lang('PrivacyLastSeenPremium')}\n        </ListItem>\n        <p\n          className=\"settings-item-description-larger premium-info\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          {isCurrentUserPremium\n            ? lang('PrivacyLastSeenPremiumInfoForPremium')\n            : lang('PrivacyLastSeenPremiumInfo')}\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldHideReadMarks: Boolean(selectShouldHideReadMarks(global)),\n    };\n  },\n)(SettingsPrivacyLastSeen));\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"Qvhl9Jjv\",\"fallbackPhoto\":\"Qvhl9Jjv\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPhoto } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  const inputRef = useRef<HTMLInputElement>();\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUserId });\n    }\n  }, [hasCurrentUserFullInfo, currentUserId, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        narrow\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          narrow\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiPrivacySettings, BotsPrivacyType } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectUserFullInfo } from '../../../global/selectors';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Switcher from '../../ui/Switcher';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\nimport SettingsAcceptedGift from './SettingsAcceptedGift';\nimport SettingsPrivacyLastSeen from './SettingsPrivacyLastSeen';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n  primaryPrivacy?: ApiPrivacySettings;\n  secondaryPrivacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n  shouldDisplayGiftsButton?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  primaryPrivacy,\n  secondaryPrivacy,\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n  isPremiumRequired,\n  onReset,\n  shouldDisplayGiftsButton,\n  isCurrentUserPremium,\n}) => {\n  const { updateGlobalPrivacySettings, showNotification } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleShowGiftIconInChats = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      showNotification({\n        message: lang('PrivacySubscribeToTelegramPremium'),\n        action: {\n          action: 'openPremiumModal',\n          payload: {},\n        },\n        actionText: { key: 'Open' },\n        icon: 'star',\n      });\n      return;\n    }\n    updateGlobalPrivacySettings({\n      shouldDisplayGiftsButton: !shouldDisplayGiftsButton,\n    });\n  });\n\n  const secondaryScreen = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneP2P;\n      case SettingsScreens.PrivacyPhoneNumber: {\n        return primaryPrivacy?.visibility === 'nobody' ? SettingsScreens.PrivacyAddByPhone : undefined;\n      }\n      default:\n        return undefined;\n    }\n  }, [primaryPrivacy, screen]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {screen === SettingsScreens.PrivacyGifts && (\n        <div className=\"settings-item\">\n          <ListItem onClick={handleShowGiftIconInChats}>\n            <span>{lang('PrivacyDisplayGiftsButton')}</span>\n            <Switcher\n              id=\"gift\"\n              disabled={!isCurrentUserPremium}\n              label={shouldDisplayGiftsButton ? lang('HideGiftsButton') : lang('DisplayGiftsButton')}\n              checked={shouldDisplayGiftsButton}\n            />\n          </ListItem>\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('PrivacyDisplayGiftIconInChats', {\n              icon: <Icon name=\"gift\" className=\"gift-icon\" />,\n              gift: lang('PrivacyDisplayGift'),\n            }, {\n              withNodes: true,\n            })}\n          </p>\n        </div>\n      )}\n      <PrivacySubsection\n        screen={screen}\n        privacy={primaryPrivacy}\n        isPremiumRequired={isPremiumRequired}\n      />\n      {screen === SettingsScreens.PrivacyProfilePhoto && primaryPrivacy?.visibility !== 'everybody' && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUserId={currentUserId}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n      {screen === SettingsScreens.PrivacyLastSeen && (\n        <SettingsPrivacyLastSeen visibility={primaryPrivacy?.visibility} />\n      )}\n      {screen === SettingsScreens.PrivacyGifts && (\n        <SettingsAcceptedGift />\n      )}\n      {Boolean(secondaryScreen) && (\n        <PrivacySubsection\n          screen={secondaryScreen}\n          privacy={secondaryPrivacy}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction PrivacySubsection({\n  screen,\n  privacy,\n  isPremiumRequired,\n}: {\n  screen: SettingsScreens;\n  privacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n}) {\n  const { setPrivacyVisibility, openSettingsScreen } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    const hasNobody = screen !== SettingsScreens.PrivacyAddByPhone;\n    const options = [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PContacts')} />\n        ) : (\n          oldLang('P2PContacts')\n        ),\n        hidden: isPremiumRequired,\n      },\n    ];\n\n    if (hasNobody) {\n      options.push({\n        value: 'nobody',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PNobody')} />\n        ) : (\n          oldLang('P2PNobody')\n        ),\n        hidden: isPremiumRequired,\n      });\n    }\n    return options;\n  }, [oldLang, screen, isPremiumRequired]);\n\n  const primaryExceptionLists = useMemo(() => {\n    if (screen === SettingsScreens.PrivacyAddByPhone) {\n      return {\n        shouldShowDenied: false,\n        shouldShowAllowed: false,\n      };\n    }\n\n    return {\n      shouldShowDenied: privacy?.visibility !== 'nobody',\n      shouldShowAllowed: privacy?.visibility !== 'everybody',\n    };\n  }, [privacy, screen]);\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsInfo');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('CustomHelp');\n      case SettingsScreens.PrivacyAddByPhone: {\n        return privacy?.visibility === 'everybody' ? oldLang('PrivacyPhoneInfo') : oldLang('PrivacyPhoneInfo3');\n      }\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesInfo');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen, privacy]);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return oldLang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyAddByPhone:\n        return oldLang('PrivacyPhoneTitle2');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return oldLang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyBio:\n        return oldLang('PrivacyBioTitle');\n      case SettingsScreens.PrivacyBirthday:\n        return oldLang('PrivacyBirthdayTitle');\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return oldLang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return oldLang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return oldLang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return oldLang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen]);\n\n  const prepareSubtitle = useLastCallback(\n    (userIds?: string[], chatIds?: string[], shouldAllowPremium?: boolean, botsPrivacy?: BotsPrivacyType) => {\n      const userIdsCount = userIds?.length || 0;\n      const chatIdsCount = chatIds?.length || 0;\n      const isAllowBots = botsPrivacy === 'allow';\n      const hasPeers = userIdsCount || chatIdsCount;\n\n      if (!hasPeers && !isAllowBots) {\n        return shouldAllowPremium ? oldLang('PrivacyPremium') : oldLang('EditAdminAddUsers');\n      } else if (shouldAllowPremium) {\n        return oldLang('ContactsAndPremium');\n      }\n\n      const userCountString = userIdsCount > 0 ? oldLang('Users', userIdsCount) : undefined;\n      const chatCountString = chatIdsCount > 0 ? oldLang('Chats', chatIdsCount) : undefined;\n\n      const botPrivacyString = isAllowBots ? lang('PrivacyValueBots') : '';\n      const peersString = lang.conjunction([userCountString, chatCountString].filter(Boolean));\n\n      return [botPrivacyString, peersString].filter(Boolean).join(' ');\n    },\n  );\n\n  const allowedString = useMemo(() => {\n    return prepareSubtitle(\n      privacy?.allowUserIds,\n      privacy?.allowChatIds,\n      privacy?.shouldAllowPremium,\n      privacy?.botsPrivacy,\n    );\n  }, [privacy]);\n\n  const blockString = useMemo(() => {\n    return prepareSubtitle(privacy?.blockUserIds, privacy?.blockChatIds);\n  }, [privacy]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioAllowedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayAllowedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioDeniedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayDeniedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={privacy?.visibility}\n        />\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n      {!isPremiumRequired && (primaryExceptionLists.shouldShowAllowed || primaryExceptionLists.shouldShowDenied) && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('PrivacyExceptions')}\n          </h4>\n          {primaryExceptionLists.shouldShowAllowed && (\n            <ListItem\n              narrow\n              icon=\"add-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: allowedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('AlwaysAllow')}</span>\n                <span className=\"subtitle\">{allowedString}</span>\n              </div>\n            </ListItem>\n          )}\n          {primaryExceptionLists.shouldShowDenied && (\n            <ListItem\n              narrow\n              icon=\"delete-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: deniedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('NeverAllow')}</span>\n                <span className=\"subtitle\">{blockString}</span>\n              </div>\n            </ListItem>\n          )}\n        </div>\n      )}\n      {isPremiumRequired && <PremiumStatusItem />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let primaryPrivacy: ApiPrivacySettings | undefined;\n    let secondaryPrivacy: ApiPrivacySettings | undefined;\n\n    const {\n      currentUserId,\n      settings: {\n        privacy,\n        byKey: {\n          shouldDisplayGiftsButton,\n        },\n      },\n    } = global;\n\n    const currentUserFullInfo = selectUserFullInfo(global, currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        primaryPrivacy = privacy.phoneNumber;\n        secondaryPrivacy = privacy.addByPhone;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        primaryPrivacy = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        primaryPrivacy = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyBio:\n        primaryPrivacy = privacy.bio;\n        break;\n\n      case SettingsScreens.PrivacyBirthday:\n        primaryPrivacy = privacy.birthday;\n        break;\n\n      case SettingsScreens.PrivacyGifts:\n        primaryPrivacy = privacy.gifts;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyPhoneCall:\n        primaryPrivacy = privacy.phoneCall;\n        secondaryPrivacy = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        primaryPrivacy = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        primaryPrivacy = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        primaryPrivacy = privacy.chatInvite;\n        break;\n    }\n\n    if (!primaryPrivacy) {\n      return {\n        currentUserId: currentUserId!,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      };\n    }\n\n    return {\n      primaryPrivacy,\n      secondaryPrivacy,\n      currentUserId: currentUserId!,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      isPremiumRequired: screen === SettingsScreens.PrivacyVoiceMessages && !selectIsCurrentUserPremium(global),\n      shouldDisplayGiftsButton,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { CustomPeerType, UniqueCustomPeer } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  isChatChannel, isDeletedUser,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { CUSTOM_PEER_PREMIUM } from '../../../util/objects/customPeer';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  withPremiumCategory?: boolean;\n  withMiniAppsCategory?: boolean;\n  usersOnly?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst PREMIUM_CATEGORY = [CUSTOM_PEER_PREMIUM];\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  withPremiumCategory,\n  withMiniAppsCategory,\n  screen,\n  isActive,\n  currentUserId,\n  settings,\n  usersOnly = false,\n  onReset,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const customPeerBots: UniqueCustomPeer = useMemo(() => {\n    return {\n      isCustomPeer: true,\n      type: 'bots',\n      title: lang('PrivacyValueBots'),\n      avatarIcon: 'bots',\n      isAvatarSquare: true,\n      peerColorId: 6,\n    };\n  }, [lang]);\n\n  const miniAppsCategory = useMemo(() => {\n    return [customPeerBots];\n  }, [customPeerBots]);\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const selectedCategoryTypes = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n    if (settings.shouldAllowPremium) {\n      return [CUSTOM_PEER_PREMIUM.type];\n    }\n    if (settings.botsPrivacy === 'allow' && isAllowList) {\n      return [customPeerBots.type];\n    }\n    return [];\n  }, [settings, isAllowList, customPeerBots]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n  const [newSelectedCategoryTypes, setNewSelectedCategoryTypes] = useState<CustomPeerType[]>(selectedCategoryTypes);\n\n  // Reset selected contact ids on change from other client when screen is not active\n  useEffect(() => {\n    if (!isActive) {\n      setNewSelectedContactIds(selectedContactIds);\n      setNewSelectedCategoryTypes(selectedCategoryTypes);\n    }\n  }, [isActive, selectedCategoryTypes, selectedContactIds]);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n        const user = usersById[chatId];\n        const isDeleted = user && isDeletedUser(user);\n        const isChannel = chat && isChatChannel(chat);\n        return (!usersOnly || user)\n          && chatId !== currentUserId\n          && chatId !== SERVICE_NOTIFICATIONS_USER_ID\n          && !isChannel && !isDeleted;\n      });\n\n    const filteredChats = filterPeersByQuery({ ids: chatIds, query: searchQuery });\n\n    // Show only relevant items\n    if (searchQuery) return filteredChats;\n\n    return unique([\n      ...selectedContactIds,\n      ...chatIds,\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, searchQuery, currentUserId, usersOnly]);\n\n  const handleSelectedCategoriesChange = useCallback((value: CustomPeerType[]) => {\n    setNewSelectedCategoryTypes(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      updatedIds: newSelectedContactIds,\n      isPremiumAllowed: newSelectedCategoryTypes.includes(CUSTOM_PEER_PREMIUM.type) || undefined,\n      botsPrivacy: (!withMiniAppsCategory) ? 'none'\n        : (newSelectedCategoryTypes.includes(customPeerBots.type) ? 'allow' : 'disallow'),\n    });\n\n    onReset();\n  }, [\n    isAllowList,\n    withMiniAppsCategory,\n    newSelectedCategoryTypes,\n    newSelectedContactIds,\n    onReset,\n    screen,\n    customPeerBots,\n  ]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function getCustomCategory() {\n    if (withPremiumCategory) return PREMIUM_CATEGORY;\n    if (withMiniAppsCategory && isAllowList) return miniAppsCategory;\n    return undefined;\n  }\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <PeerPicker\n        categories={getCustomCategory()}\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        selectedCategories={newSelectedCategoryTypes}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? oldLang('AlwaysAllowPlaceholder') : oldLang('NeverAllowPlaceholder')}\n        categoryPlaceholderKey=\"PrivacyUserTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onSelectedCategoriesChange={handleSelectedCategoriesChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        itemInputType=\"checkbox\"\n        withDefaultPadding\n        withStatus\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? oldLang('AlwaysAllow') : oldLang('NeverAllow')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return privacy.bio;\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return privacy.birthday;\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return privacy.gifts;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return privacy.noPaidMessages;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { type: 'emoji', emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n        withIcon\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { config, reactions } = global;\n\n    return {\n      availableReactions: reactions.availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<AccountSettings, (\n    'shouldSuggestStickers' | 'shouldUpdateStickerSetOrder'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldUpdateStickerSetOrder,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n    openSettingsScreen,\n  } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickerSetOrderChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldUpdateStickerSetOrder: newValue });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.CustomEmoji })}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.QuickReaction })}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('InstalledStickers.DynamicPackOrder')}\n        </h4>\n        <Checkbox\n          label={lang('InstalledStickers.DynamicPackOrder')}\n          checked={shouldUpdateStickerSetOrder}\n          onCheck={handleSuggestStickerSetOrderChange}\n        />\n        <p className=\"settings-item-description mt-3\" dir=\"auto\">\n          {lang('InstalledStickers.DynamicPackOrderInfo')}\n        </p>\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldUpdateStickerSetOrder',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.reactions.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.Privacy });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji, selectTabState } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n  recoveryEmail: string;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n  recoveryEmail,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {recoveryEmail && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('TwoStepAuth.ConfirmEmailDescription', recoveryEmail)}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  const tabState = selectTabState(global);\n  const recoveryEmail = tabState.recoveryEmail;\n\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n    recoveryEmail,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent })}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaTurnOff })}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword })}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useFlag from '../../../../hooks/useFlag';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Button from '../../../ui/Button';\nimport InputText from '../../../ui/InputText';\nimport Modal from '../../../ui/Modal';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {type === 'email' && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('RecoveryEmailSubtitle')}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  errorKey,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmailCode });\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCode });\n      }\n    }\n  }, [currentScreen, waitingEmailCodeLength, openSettingsScreen]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.Privacy });\n      },\n    });\n  }, [clearPassword, openSettingsScreen]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updateRecoveryEmail, openSettingsScreen]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          placeholder={oldLang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={oldLang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { LAYERS_ANIMATION_NAME } from '../../../util/browser/windowEnvironment';\n\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMarkScrolled from '../../../hooks/useMarkScrolled/useMarkScrolled';\n\nimport Transition from '../../ui/Transition';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport PrivacyMessages from './PrivacyMessages';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsMain from './SettingsMain';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPerformance from './SettingsPerformance';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_BIO_SCREENS = [\n  SettingsScreens.PrivacyBioAllowedContacts,\n  SettingsScreens.PrivacyBioDeniedContacts,\n];\n\nconst PRIVACY_BIRTHDAY_SCREENS = [\n  SettingsScreens.PrivacyBirthdayAllowedContacts,\n  SettingsScreens.PrivacyBirthdayDeniedContacts,\n];\n\nconst PRIVACY_GIFTS_SCREENS = [\n  SettingsScreens.PrivacyGiftsAllowedContacts,\n  SettingsScreens.PrivacyGiftsDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nconst PRIVACY_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyNoPaidMessages,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal, openSettingsScreen } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  useMarkScrolled({\n    containerRef,\n    selector: '.settings-content',\n  }, [currentScreen]);\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  });\n\n  function renderCurrentSectionContent(isScreenActive: boolean, activeScreen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBio]: PRIVACY_BIO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBirthday]: PRIVACY_BIRTHDAY_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGifts]: PRIVACY_GIFTS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyMessages]: PRIVACY_MESSAGES_SCREENS.includes(activeScreen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(activeScreen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(activeScreen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(activeScreen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(activeScreen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).map(Number).includes(activeScreen)\n      || Object.values(privacyAllowScreens).includes(true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            isActive={isScreenActive\n              || activeScreen === SettingsScreens.GeneralChatBackgroundColor\n              || activeScreen === SettingsScreens.GeneralChatBackground\n              || activeScreen === SettingsScreens.QuickReaction\n              || activeScreen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || activeScreen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            isActive={isScreenActive || activeScreen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyBio:\n      case SettingsScreens.PrivacyBirthday:\n      case SettingsScreens.PrivacyGifts:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            usersOnly={currentScreen === SettingsScreens.PrivacyNoPaidMessages}\n            withPremiumCategory={currentScreen === SettingsScreens.PrivacyGroupChatsAllowedContacts}\n            withMiniAppsCategory={currentScreen === SettingsScreens.PrivacyGiftsAllowedContacts}\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyMessages:\n        return (\n          <PrivacyMessages\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={activeScreen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(\n    isScreenActive: boolean,\n    _isFrom: boolean,\n    _currentKey: SettingsScreens,\n    activeKey: SettingsScreens,\n  ) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, activeKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      ref={containerRef}\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n      withSwipeControl\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { sortUserIds } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterPeersByQuery({ ids: contactIds, query: filter, type: 'user' });\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable contact-list-item\"\n            onClick={() => handleClick(id)}\n          >\n            <PrivateChatInfo\n              userId={id}\n              forceShowSelf\n              avatarSize=\"large\"\n              withStory\n              storyViewerOrigin={StoryViewerOrigin.ChatList}\n              ripple={!isMobile}\n            />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <Icon name=\"add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { isUserBot } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localPeerIds?: string[];\n  globalPeerIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localPeerIds,\n  globalPeerIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds\n      ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localPeerIds || []),\n        ...(globalPeerIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        return user && !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, searchQuery, localPeerIds, globalPeerIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n          withDefaultPadding\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <Icon name=\"arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: localPeerIds } = localResults || {};\n\n    return {\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalPeerIds,\n      localPeerIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst MAX_MEMBERS_FOR_GENERATE_CHAT_NAME = 4;\n\nconst NewChatStep2: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  useEffect(() => {\n    if (isChannel) {\n      return;\n    }\n    if (!memberIds.length || memberIds.length > MAX_MEMBERS_FOR_GENERATE_CHAT_NAME) {\n      setTitle('');\n      return;\n    }\n    const global = getGlobal();\n    const usersById = global.users.byId;\n    const memberFirstNames = [global.currentUserId!, ...memberIds]\n      .map((userId) => getUserFirstOrLastName(usersById[userId]))\n      .filter(Boolean);\n    const generatedChatName = memberFirstNames.slice(0, -1).join(', ')\n      + lang('CreateGroup.PeersTitleLastDelimeter')\n      + memberFirstNames[memberFirstNames.length - 1];\n    setTitle(generatedChatName);\n  }, [isChannel, memberIds, lang]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n      isChannel: true,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/browser/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onReset,\n}) => {\n  const { openLeftColumnContent, setGlobalSearchQuery } = getActions();\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    openLeftColumnContent({\n      contentKey: isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2,\n    });\n  }, [isChannel]);\n\n  const changeSelectedMemberIdsHandler = useLastCallback((ids: string[]) => {\n    const isSelection = ids.length > newChatMemberIds.length;\n\n    setNewChatMemberIds(ids);\n    if (isSelection) {\n      setGlobalSearchQuery({ query: '' });\n    }\n  });\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={changeSelectedMemberIdsHandler}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { ANIMATION_DURATION } from '../story/helpers/ribbonAnimation';\n\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../common/icons/Icon';\nimport StoryRibbon from '../story/StoryRibbon';\nimport StoryToggler from '../story/StoryToggler';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  foldersDispatch: FolderEditDispatch;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  isStoryRibbonShown,\n  onReset,\n  onTopicSearch,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useLastCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransitionDeprecated(!isForumPanelOpen, undefined, undefined, false);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransitionDeprecated(\n    isStoryRibbonShown, undefined, undefined, '', false, ANIMATION_DURATION + ANIMATION_END_DELAY,\n  );\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className={buildClassName('left-header', !shouldRenderStoryRibbon && 'left-header-shadow')}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        <div className=\"story-toggler-wrapper\">\n          <StoryToggler canShow isArchived />\n        </div>\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'chat-list-wrapper',\n          shouldRenderStoryRibbon && 'with-story-ribbon',\n          storyRibbonClassNames,\n        )}\n      >\n        {shouldRenderStoryRibbon && (\n          <StoryRibbon isArchived className=\"left-header-shadow\" isClosing={isStoryRibbonClosing} />\n        )}\n        <ChatList\n          folderType=\"archived\"\n          isActive={isActive}\n          isForumPanelOpen={isForumPanelVisible}\n          isMainList\n          foldersDispatch={foldersDispatch}\n          archiveSettings={archiveSettings}\n        />\n      </div>\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatFolderModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useOldLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID)\n      .map((folderId) => {\n        const folder = foldersById ? foldersById[folderId] : undefined;\n        const label = folder ? renderTextWithEntities({\n          text: folder.title.text,\n          entities: folder.title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }) : '';\n        return {\n          label,\n          value: String(folderId),\n        };\n      }) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className={buildClassName(styles.root, 'delete')}\n      contentClassName={styles.modalContent}\n      title={lang('FilterAddTo')}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <CheckboxGroup\n          options={folders}\n          selected={selectedFolderIds}\n          onChange={setSelectedFolderIds}\n        />\n      </div>\n      <div className={styles.footer}>\n        <div className=\"dialog-buttons\">\n          <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n            {lang('FilterAddTo')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalContent\":\"EG5lPWY1\",\"root\":\"_fJBBCCE\",\"main\":\"heYMHiUt\",\"footer\":\"_jtqAaUU\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { MAX_INT_32 } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  topicId?: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nenum MuteDuration {\n  OneHour = '3600',\n  FourHours = '14400',\n  EightHours = '28800',\n  OneDay = '86400',\n  ThreeDays = '259200',\n  Forever = '-1',\n}\n\nconst MuteChatModal: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  topicId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [muteUntilOption, setMuteUntilOption] = useState(MuteDuration.Forever);\n  const { updateChatMutedState, updateTopicMutedState } = getActions();\n\n  const lang = useOldLang();\n\n  const muteForOptions = useMemo(() => [\n    { label: lang('MuteFor.Hours', 1), value: MuteDuration.OneHour },\n    { label: lang('MuteFor.Hours', 4), value: MuteDuration.FourHours },\n    { label: lang('MuteFor.Hours', 8), value: MuteDuration.EightHours },\n    { label: lang('MuteFor.Days', 1), value: MuteDuration.OneDay },\n    { label: lang('MuteFor.Days', 3), value: MuteDuration.ThreeDays },\n    { label: lang('MuteFor.Forever'), value: MuteDuration.Forever },\n  ], [lang]);\n\n  const handleSubmit = useCallback(() => {\n    let mutedUntil: number;\n    if (muteUntilOption === MuteDuration.Forever) {\n      mutedUntil = MAX_INT_32;\n    } else {\n      mutedUntil = Math.floor(Date.now() / 1000) + Number(muteUntilOption);\n    }\n    if (topicId) {\n      updateTopicMutedState({ chatId, topicId, mutedUntil });\n    } else {\n      updateChatMutedState({ chatId, mutedUntil });\n    }\n    onClose();\n  }, [chatId, muteUntilOption, onClose, topicId]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('Notifications')}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"muteFor\"\n        options={muteForOptions}\n        selected={muteUntilOption}\n        onChange={setMuteUntilOption as any}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('Common.Done')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(MuteChatModal);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectPeerPaidMessagesStars,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport renderText from './helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useSchedule from '../../hooks/useSchedule';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport Loading from '../ui/Loading';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldUpdateStickerSetOrder?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  shouldUpdateStickerSetOrder,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePreviousDeprecated(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          messageList: currentMessageList, sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && isAdded,\n      });\n      onClose();\n    }\n  }, [currentMessageList, shouldSchedule, requestCalendar, onClose, shouldUpdateStickerSetOrder, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const chatBot = chatId && selectBot(global, chatId);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n\n    const sendOptions = chat\n      ? getAllowedAttachmentOptions(chat, chatFullInfo, Boolean(chatBot), isSavedMessages)\n      : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo)\n      && sendOptions?.canSendStickers,\n    );\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n    const paidMessagesStars = chatId ? selectPeerPaidMessagesStars(global, chatId) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: !paidMessagesStars && selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldUpdateStickerSetOrder: global.settings.byKey.shouldUpdateStickerSetOrder,\n      currentMessageList,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nZYT4vJ3\",\"sets\":\"JzkmXjFF\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiSticker } from '../../api/types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSetIds,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useOldLang();\n\n  const customEmojiSets = useMemo(() => {\n    return customEmojiSetIds?.map((id) => getGlobal().stickers.setsById[id]);\n  }, [customEmojiSetIds]);\n\n  const customEmojiModalRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePreviousDeprecated(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useLastCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => {\n          return (\n            <StickerSetCard\n              key={customEmojiSet.id}\n              className={styles.setCard}\n              stickerSet={customEmojiSet}\n              onClick={handleSetClick}\n              observeIntersection={observeIntersectionForCovers}\n              noPlay={!canPlayAnimatedEmojis}\n            />\n          );\n        })}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotCommand, ApiChat, ApiDisallowedGifts,\n} from '../../api/types';\nimport type { IAnchorPosition, ThreadId } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  getIsSavedDialog,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport { getIsChatMuted } from '../../global/helpers/notifications';\nimport {\n  selectBot,\n  selectCanGift,\n  selectCanManage,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatRestricted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsRightColumnShown,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectTopic,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { disableScrolling } from '../../util/scrollLock';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport MuteChatModal from '../left/MuteChatModal.async';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport Portal from '../ui/Portal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: IconName; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canViewBoosts?: boolean;\n  canViewMonetization?: boolean;\n  canShowBoostModal?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  canTranslate?: boolean;\n  channelMonoforumId?: string;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  botPrivacyPolicyUrl?: string;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  isForumAsMessages?: true;\n  canAddContact?: boolean;\n  canDeleteChat?: boolean;\n  canReportChat?: boolean;\n  canGift?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n  isRightColumnShown?: boolean;\n  canManage?: boolean;\n  canTranslate?: boolean;\n  isBlocked?: boolean;\n  isBot?: boolean;\n  isChatWithSelf?: boolean;\n  savedDialog?: ApiChat;\n  disallowedGifts?: ApiDisallowedGifts;\n  isAccountFrozen?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  botPrivacyPolicyUrl,\n  withForumActions,\n  isTopic,\n  isForum,\n  isForumAsMessages,\n  isChatInfoShown,\n  canStartBot,\n  canSubscribe,\n  canReportChat,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canViewMonetization,\n  canViewBoosts,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  canGift,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  canManage,\n  isRightColumnShown,\n  canTranslate,\n  isBlocked,\n  isBot,\n  isChatWithSelf,\n  savedDialog,\n  canShowBoostModal,\n  disallowedGifts,\n  isAccountFrozen,\n  channelMonoforumId,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    openFrozenAccountModal,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openMonetizationStatistics,\n    openBoostStatistics,\n    openGiftModal,\n    openThreadWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n    openUrl,\n    toggleManagement,\n    togglePeerTranslations,\n    blockUser,\n    unblockUser,\n    setViewForumAsMessages,\n    openBoostModal,\n    reportMessages,\n    showNotification,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [shouldCloseFast, setShouldCloseFast] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isMuteModalOpen, setIsMuteModalOpen] = useState(false);\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const { x, y } = anchor;\n\n  useShowTransitionDeprecated(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const areAllGiftsDisallowed = useMemo(() => {\n    if (!disallowedGifts) {\n      return undefined;\n    }\n    return Object.values(disallowedGifts).every(Boolean);\n  }, [disallowedGifts]);\n\n  const closeMuteModal = useLastCallback(() => {\n    setIsMuteModalOpen(false);\n    onClose();\n  });\n\n  const handleReport = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      setIsMenuOpen(false);\n      reportMessages({ chatId, messageIds: [] });\n    }\n    onClose();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      onClose();\n    } else {\n      setIsDeleteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const handleViewGroupInfo = useLastCallback(() => {\n    openThreadWithInfo({ chatId, threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      sendBotCommand({ command: '/start' });\n    }\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      restartBot({ chatId });\n    }\n  });\n\n  const handleUnmuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      updateChatMutedState({ chatId, isMuted: false });\n    }\n    closeMenu();\n  });\n\n  const handleMuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      closeMenu();\n    } else {\n      markRenderMuteModal();\n      setIsMuteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const handleCreateTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openCreateTopicPanel({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      toggleManagement({ force: true });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openEditTopicPanel({ chatId, topicId: Number(threadId) });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleViewAsTopicsClick = useLastCallback(() => {\n    openChat({ id: undefined });\n    setViewForumAsMessages({ chatId, isEnabled: false });\n    closeMenu();\n  });\n\n  const handleEnterVoiceChatClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleLinkedChatClick = useLastCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  });\n\n  const handleGiftClick = useLastCallback(() => {\n    if (areAllGiftsDisallowed && chat) {\n      showNotification({ message: lang('SendDisallowError') });\n      return;\n    }\n    openGiftModal({ forUserId: chatId });\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openGiftModal({ forUserId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleAddContactClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openAddContactDialog({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSubscribe = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      onSubscribeChannel();\n    }\n    closeMenu();\n  });\n\n  const handleVideoCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    }\n    closeMenu();\n  });\n\n  const handleCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSearch = useLastCallback(() => {\n    onSearchClick();\n    closeMenu();\n  });\n\n  const handleStatisticsClick = useLastCallback(() => {\n    toggleStatistics();\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleMonetizationClick = useLastCallback(() => {\n    openMonetizationStatistics({ chatId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleBoostClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canViewBoosts) {\n      openBoostStatistics({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    } else {\n      openBoostModal({ chatId });\n    }\n    closeMenu();\n  });\n\n  const handleEnableTranslations = useLastCallback(() => {\n    togglePeerTranslations({ chatId, isEnabled: true });\n    closeMenu();\n  });\n\n  const handleSelectMessages = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      enterMessageSelectMode();\n    }\n    closeMenu();\n  });\n\n  const handleOpenAsMessages = useLastCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  });\n\n  const handleBlock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      blockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      unblockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSendChannelMessage = useLastCallback(() => {\n    openChat({ id: channelMonoforumId });\n    closeMenu();\n  });\n\n  useEffect(disableScrolling, []);\n\n  const botButtons = useMemo(() => {\n    const commandButtons = botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n\n          onClick={handleClick}\n        >\n          {oldLang(cmd.label)}\n        </MenuItem>\n      );\n    });\n\n    const hasPrivacyCommand = botCommands?.some(({ command }) => command === 'privacy');\n\n    const privacyButton = isBot && (\n      <MenuItem\n        icon=\"privacy-policy\"\n\n        onClick={() => {\n          if (hasPrivacyCommand && !botPrivacyPolicyUrl) {\n            sendBotCommand({ command: '/privacy' });\n          } else {\n            openUrl({ url: botPrivacyPolicyUrl || oldLang('BotDefaultPrivacyPolicy') });\n          }\n          closeMenu();\n        }}\n      >\n        {oldLang('BotPrivacyPolicy')}\n      </MenuItem>\n    );\n\n    return [...commandButtons || [], privacyButton].filter(Boolean);\n  }, [botCommands, oldLang, botPrivacyPolicyUrl, isBot]);\n\n  const deleteTitle = useMemo(() => {\n    if (!chat) return undefined;\n\n    if (savedDialog) {\n      return oldLang('Delete');\n    }\n\n    if (isPrivate) {\n      return oldLang('DeleteChatUser');\n    }\n\n    if (canDeleteChat) {\n      return oldLang('GroupInfo.DeleteAndExit');\n    }\n\n    if (isChannel) {\n      return oldLang('LeaveChannel');\n    }\n\n    return oldLang('Group.LeaveGroup');\n  }, [canDeleteChat, chat, isChannel, isPrivate, savedDialog, oldLang]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n          shouldCloseFast={shouldCloseFast}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {oldLang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {oldLang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {channelMonoforumId && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleSendChannelMessage}\n            >\n              {lang('ChannelSendMessage')}\n            </MenuItem>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? oldLang('lng_context_view_topic') : oldLang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canManage && !canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditClick}\n            >\n              {oldLang('Edit')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {oldLang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {oldLang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && !isForumAsMessages && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {oldLang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {oldLang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {oldLang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canShowBoostModal && !canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang(isChannel ? 'BoostingBoostChannelMenu' : 'BoostingBoostGroupMenu')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {oldLang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {oldLang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {oldLang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (isMuted ? (\n            <MenuItem\n              icon=\"unmute\"\n              onClick={handleUnmuteClick}\n            >\n              {oldLang('ChatsUnmute')}\n            </MenuItem>\n          )\n            : (\n              <MenuItem\n                icon=\"mute\"\n                onClick={handleMuteClick}\n              >\n                {oldLang('ChatsMute')}\n                ...\n              </MenuItem>\n            )\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {oldLang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {oldLang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {oldLang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang('Boosts')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {oldLang('Statistics')}\n            </MenuItem>\n          )}\n          {isChannel && canViewMonetization && (\n            <MenuItem\n              icon=\"cash-circle\"\n              onClick={handleMonetizationClick}\n            >\n              {oldLang('lng_channel_earn_title')}\n            </MenuItem>\n          )}\n          {canTranslate && (\n            <MenuItem\n              icon=\"language\"\n              onClick={handleEnableTranslations}\n            >\n              {oldLang('lng_context_translate')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {oldLang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGift && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftClick}\n            >\n              {oldLang('ProfileSendAGift')}\n            </MenuItem>\n          )}\n          {isBot && (\n            <MenuItem\n              icon={isBlocked ? 'bots' : 'hand-stop'}\n              onClick={isBlocked ? handleRestartBot : handleBlock}\n            >\n              {isBlocked ? oldLang('BotRestart') : oldLang('Bot.Stop')}\n            </MenuItem>\n          )}\n          {isPrivate && !isChatWithSelf && !isBot && (\n            <MenuItem\n              icon={isBlocked ? 'user' : 'hand-stop'}\n              onClick={isBlocked ? handleUnblock : handleBlock}\n            >\n              {isBlocked ? oldLang('Unblock') : oldLang('BlockUser')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {deleteTitle}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={savedDialog || chat}\n            isSavedDialog={Boolean(savedDialog)}\n          />\n        )}\n        {canMute && shouldRenderMuteModal && chat?.id && (\n          <MuteChatModal\n            isOpen={isMuteModalOpen}\n            onClose={closeMuteModal}\n            onCloseAnimationEnd={unmarkRenderMuteModal}\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const isRestricted = selectIsChatRestricted(global, chatId);\n    if (!chat || isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n    const canReportChat = isMainThread && !user && (isChatChannel(chat) || isChatGroup(chat)) && !isChatAdmin(chat);\n\n    const chatBot = !isSystemBot(chatId) ? selectBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const fullInfo = userFullInfo || chatFullInfo;\n    const canGift = selectCanGift(global, chatId);\n\n    const topic = selectTopic(global, chatId, threadId);\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n    const canManage = selectCanManage(global, chatId);\n    // Context menu item should only be displayed if user hid translation panel\n    const canTranslate = selectCanTranslateChat(global, chatId) && fullInfo?.isTranslationDisabled;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const savedDialog = isSavedDialog ? selectChat(global, String(threadId)) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      chat,\n      isMuted: getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      isForumAsMessages: chat?.isForumAsMessages,\n      canAddContact,\n      canDeleteChat: getCanDeleteChat(chat),\n      canReportChat,\n      canGift,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      botPrivacyPolicyUrl: chatBot ? userFullInfo?.botInfo?.privacyPolicyUrl : undefined,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n      canManage,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      canTranslate,\n      isBlocked: userFullInfo?.isBlocked,\n      isBot: Boolean(chatBot),\n      isChatWithSelf,\n      savedDialog,\n      disallowedGifts: userFullInfo?.disallowedGifts,\n      isAccountFrozen,\n    };\n  },\n)(HeaderMenuContainer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vv5ppXel\",\"active\":\"FVgqrSSK\",\"info\":\"DboxqiZd\",\"topRow\":\"Ymu2m1PR\",\"meta\":\"A2rsvUBm\",\"subtitle\":\"qUzmwaIn\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\n\nimport { getMessageSenderName } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport LastMessageMeta from '../../common/LastMessageMeta';\nimport MessageSummary from '../../common/MessageSummary';\n\nimport styles from './MiddleSearchResult.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  message: ApiMessage;\n  senderPeer?: ApiPeer;\n  messageChat?: ApiChat;\n  shouldShowChat?: boolean;\n  query?: string;\n  className?: string;\n  onClick: (message: ApiMessage) => void;\n};\n\nconst TRUNCATE_LENGTH = 200;\n\nconst MiddleSearchResult = ({\n  isActive,\n  message,\n  senderPeer,\n  messageChat,\n  shouldShowChat,\n  query,\n  className,\n  onClick,\n}: OwnProps) => {\n  const lang = useOldLang();\n  const hiddenForwardTitle = message.forwardInfo?.hiddenUserName;\n\n  const peer = shouldShowChat ? messageChat : senderPeer;\n\n  const senderName = shouldShowChat && senderPeer ? getMessageSenderName(lang, message.chatId, senderPeer) : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(message);\n  });\n\n  return (\n    <div\n      role=\"button\"\n      tabIndex={0}\n      className={buildClassName(styles.root, isActive && styles.active, className)}\n      onClick={handleClick}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={peer}\n        text={hiddenForwardTitle}\n        size=\"medium\"\n      />\n      <div className={styles.info}>\n        <div className={styles.topRow}>\n          {(peer && <FullNameTitle peer={peer} withEmojiStatus />) || hiddenForwardTitle}\n          <LastMessageMeta className={styles.meta} message={message} />\n        </div>\n        <div className={styles.subtitle} dir=\"auto\">\n          {senderName && (\n            <>\n              <span className=\"sender-name\">{renderText(senderName)}</span>\n              <span className=\"colon\">:</span>\n            </>\n          )}\n          <MessageSummary message={message} highlight={query} truncateLength={TRUNCATE_LENGTH} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MiddleSearchResult);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FTMljUuX\",\"header\":\"OvmjSMwA\",\"active\":\"DEIUzXQd\",\"avatar\":\"mp1PmoMq\",\"input\":\"z2K8Q7ib\",\"mobile\":\"u0fb78AA\",\"focused\":\"dqF8dYNx\",\"withDropdown\":\"AqhBggrp\",\"adaptSearchBorders\":\"Q9RZQaTu\",\"dropdown\":\"MFGvbICO\",\"dropdownHidden\":\"Alee0CKy\",\"results\":\"RtfTOE72\",\"placeholder\":\"O1HoZFge\",\"separator\":\"_Yy43QLl\",\"savedTags\":\"BcvAfv1E\",\"wrap\":\"JkESCST6\",\"searchTags\":\"rO3pH3LI\",\"savedSearchTag\":\"qA4gov4D\",\"hash\":\"q5NOmUAM\",\"searchTypes\":\"rVYZG__K\",\"searchType\":\"nE1Xwoo7\",\"selectedType\":\"i29dP8iT\",\"footer\":\"jyS1l9yn\",\"keyboard-visible\":\"ao05jKHW\",\"keyboardVisible\":\"ao05jKHW\",\"counter\":\"NmmL_cO3\",\"mobileNavigation\":\"dLO1hlHU\",\"navigationButton\":\"Z4vLAlsu\",\"navigationDisabled\":\"IqA7R2xO\",\"jumpIn\":\"n9kXbTu6\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiReaction, ApiReactionKey, ApiSavedReactionTag,\n} from '../../../api/types';\nimport type {\n  CustomPeer, MiddleSearchParams, MiddleSearchType, ThreadId,\n} from '../../../types';\n\nimport { ANONYMOUS_USER_ID } from '../../../config';\nimport { requestMeasure, requestMutation, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog, getReactionKey, isSameReaction, isSystemBot,\n} from '../../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectMonoforumChannel,\n  selectSender,\n  selectTabState,\n} from '../../../global/selectors';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport { getSearchResultKey, parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { debounce, fastRaf } from '../../../util/schedulers';\n\nimport { useClickOutside } from '../../../hooks/events/useOutsideClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport SavedTagButton from '../message/reactions/SavedTagButton';\nimport MiddleSearchResult from './MiddleSearchResult';\n\nimport styles from './MiddleSearch.module.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  monoforumChat?: ApiChat;\n  threadId?: ThreadId;\n  requestedQuery?: string;\n  savedTags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  savedTag?: ApiReaction;\n  totalCount?: number;\n  lastSearchQuery?: string;\n  foundIds?: SearchResultKey[];\n  isHistoryCalendarOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n  isSavedMessages?: boolean;\n  fetchingQuery?: string;\n  isHashtagQuery?: boolean;\n  searchType?: MiddleSearchType;\n  currentUserId?: string;\n};\n\nconst CHANNELS_PEER: CustomPeer = {\n  isCustomPeer: true,\n  avatarIcon: 'channel-filled',\n  titleKey: 'SearchPublicPosts',\n};\nconst FOCUSED_SEARCH_TRIGGER_OFFSET = 5;\nconst HIDE_TIMEOUT = 200;\nconst RESULT_ITEM_CLASS_NAME = 'MiddleSearchResult';\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MiddleSearch: FC<StateProps> = ({\n  isActive,\n  chat,\n  monoforumChat,\n  threadId,\n  requestedQuery,\n  savedTags,\n  savedTag,\n  totalCount,\n  lastSearchQuery,\n  foundIds,\n  isHistoryCalendarOpen,\n  isCurrentUserPremium,\n  isSavedMessages,\n  fetchingQuery,\n  isHashtagQuery,\n  searchType = 'chat',\n  currentUserId,\n}) => {\n  const {\n    updateMiddleSearch,\n    resetMiddleSearch,\n    performMiddleSearch,\n    focusMessage,\n    closeMiddleSearch,\n    openHistoryCalendar,\n    openPremiumModal,\n    loadSavedReactionTags,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n  const shouldCancelSearchRef = useRef(false);\n\n  const { isMobile } = useAppLayout();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [query, setQuery] = useState(requestedQuery || '');\n  const [focusedIndex, setFocusedIndex] = useState(0);\n  const canFocusNewer = foundIds && focusedIndex > 0;\n  const canFocusOlder = foundIds && focusedIndex < foundIds.length - 1;\n\n  const [isFullyHidden, setIsFullyHidden] = useState(!isActive);\n  const hiddenTimerRef = useRef<number>();\n  const maybeLongPressActiveRef = useRef(true);\n\n  const [isFocused, markFocused, markBlurred] = useFlag();\n  const [isViewAsList, setIsViewAsList] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    if (maybeLongPressActiveRef.current) return;\n    // Ignore clicks inside modals\n    if ((event.target as HTMLElement).closest('.Modal')) return;\n    markBlurred();\n  });\n  useClickOutside([ref], handleClickOutside);\n\n  const hasResultsContainer = Boolean((query && foundIds) || isHashtagQuery);\n  const isOnlyHash = isHashtagQuery && !query;\n  const areResultsEmpty = Boolean(query && foundIds && !foundIds.length && !isLoading && !isOnlyHash);\n  const hasResultsPlaceholder = areResultsEmpty || isOnlyHash;\n  const isNonFocusedDropdownForced = searchType === 'myChats' || searchType === 'channels';\n  const hasResultsDropdown = isActive && (isViewAsList || !isMobile) && (isFocused || isNonFocusedDropdownForced)\n    && Boolean(\n      hasResultsContainer || hasResultsPlaceholder || savedTags,\n    );\n\n  const hasQueryData = Boolean((query && !isOnlyHash) || savedTag);\n  const hasNavigationButtons = searchType === 'chat' && Boolean(foundIds?.length);\n\n  const handleClose = useLastCallback(() => {\n    closeMiddleSearch();\n  });\n\n  const focusInput = useLastCallback(() => {\n    requestMeasure(() => {\n      inputRef.current?.focus();\n    });\n  });\n\n  const blurInput = useLastCallback(() => {\n    inputRef.current?.blur();\n  });\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Reset focus on query result\n  useEffect(() => {\n    setFocusedIndex(-1);\n  }, [lastSearchQuery]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n      setIsViewAsList(true);\n      setFocusedIndex(0);\n      setQuery('');\n      hiddenTimerRef.current = window.setTimeout(() => setIsFullyHidden(true), HIDE_TIMEOUT);\n    } else {\n      setIsFullyHidden(false);\n      clearTimeout(hiddenTimerRef.current);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (!requestedQuery || !chat?.id) return;\n    setQuery(requestedQuery);\n    updateMiddleSearch({ chatId: chat.id, threadId, update: { requestedQuery: undefined } });\n    setIsLoading(true);\n\n    requestNextMutation(() => {\n      const input = inputRef.current;\n      if (!input) return;\n      focusEditableElement(input, true, true);\n      markFocused();\n    });\n  }, [chat?.id, requestedQuery, threadId]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (isActive !== prevIsActive && !query && lastSearchQuery) {\n      setQuery(lastSearchQuery); // Restore query when returning back\n    }\n  }, [isActive, lastSearchQuery, query]);\n\n  useEffectWithPrevDeps(([prevIsCalendarOpen]) => {\n    if (!isActive || prevIsCalendarOpen === isHistoryCalendarOpen) return;\n    if (isHistoryCalendarOpen) {\n      blurInput();\n      markBlurred();\n    } else {\n      focusInput();\n    }\n  }, [isHistoryCalendarOpen, isActive]);\n\n  const handleReset = useLastCallback(() => {\n    if (!query?.length && !savedTag) {\n      handleClose();\n      return;\n    }\n\n    setQuery('');\n    setIsLoading(false);\n    resetMiddleSearch();\n    focusInput();\n  });\n\n  useEffect(() => (isActive ? captureEscKeyListener(handleReset) : undefined), [isActive, handleClose]);\n\n  const savedTagsArray = useMemo(() => {\n    if (!savedTags) return undefined;\n    return Object.values(savedTags);\n  }, [savedTags]);\n\n  const hasSavedTags = Boolean(savedTagsArray?.length);\n  const areSavedTagsDisabled = hasSavedTags && !isCurrentUserPremium;\n\n  useEffect(() => {\n    if (isSavedMessages && isActive) loadSavedReactionTags();\n  }, [isSavedMessages, isActive]);\n\n  const handleSearch = useLastCallback(() => {\n    const chatId = chat?.id;\n    if (!chatId) {\n      return;\n    }\n\n    runDebouncedForSearch(() => {\n      if (shouldCancelSearchRef.current) return;\n      performMiddleSearch({ chatId, threadId, query });\n    });\n  });\n\n  const handleQueryChange = useLastCallback((newQuery: string) => {\n    shouldCancelSearchRef.current = false;\n\n    if (newQuery.startsWith('#') && !isHashtagQuery) {\n      updateMiddleSearch({ chatId: chat!.id, threadId, update: { isHashtag: true } });\n      setQuery(newQuery.slice(1));\n      handleSearch();\n      return;\n    }\n\n    setQuery(newQuery);\n\n    if (!newQuery) {\n      setIsLoading(false);\n      resetMiddleSearch();\n      shouldCancelSearchRef.current = true;\n    }\n  });\n\n  useEffect(() => {\n    if (query) {\n      handleSearch();\n    }\n  }, [query]);\n\n  useEffect(() => {\n    setIsLoading(Boolean(fetchingQuery));\n  }, [fetchingQuery]);\n\n  useEffect(() => {\n    if (!foundIds?.length) return;\n    const isClose = foundIds.length - focusedIndex < FOCUSED_SEARCH_TRIGGER_OFFSET;\n    if (isClose) {\n      handleSearch();\n    }\n  }, [focusedIndex, foundIds?.length]);\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    maybeLongPressActiveRef.current = true;\n\n    function focus() {\n      inputRef.current?.focus();\n      markFocused();\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    function removeListeners() {\n      window.removeEventListener('touchend', focus);\n      window.removeEventListener('mouseup', focus);\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    window.addEventListener('touchend', focus);\n    window.addEventListener('mouseup', focus);\n\n    window.addEventListener('touchstart', removeListeners);\n    window.addEventListener('mousedown', removeListeners);\n\n    return () => {\n      removeListeners();\n      window.removeEventListener('touchstart', removeListeners);\n      window.removeEventListener('mousedown', removeListeners);\n    };\n  }, [isActive]);\n\n  useHistoryBack({\n    isActive,\n    onBack: handleClose,\n  });\n\n  const [viewportIds, getMore, viewportOffset = 0] = useInfiniteScroll(handleSearch, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if ((!query && !savedTag) || !viewportIds?.length) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n\n    return viewportIds.map((searchResultKey) => {\n      const [chatId, id] = parseSearchResultKey(searchResultKey);\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return undefined;\n      }\n\n      const originalSender = (isSavedMessages || isSystemBot(chatId) || chatId === ANONYMOUS_USER_ID)\n        ? selectForwardedSender(global, message) : undefined;\n      const messageSender = selectSender(global, message);\n      const messageChat = selectChat(global, message.chatId);\n\n      const senderPeer = originalSender || messageSender;\n\n      return {\n        searchResultKey,\n        message,\n        messageChat,\n        senderPeer,\n      };\n    }).filter(Boolean);\n  }, [query, savedTag, viewportIds, isSavedMessages]);\n\n  const handleMessageClick = useLastCallback((message: ApiMessage) => {\n    const searchResultKey = getSearchResultKey(message);\n    const index = foundIds?.indexOf(searchResultKey) || 0;\n    const realIndex = index + viewportOffset;\n    setFocusedIndex(realIndex);\n\n    if (searchType === 'chat') {\n      setIsViewAsList(false);\n    }\n\n    focusMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      threadId: !isHashtagQuery ? threadId : undefined,\n    });\n\n    markBlurred();\n  });\n\n  const handleTriggerViewStyle = useLastCallback(() => {\n    setIsViewAsList((prev) => !prev);\n    markFocused();\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, hasResultsContainer, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      handleMessageClick(foundResult.message);\n      setFocusedIndex(index + viewportOffset);\n    }\n  }, `.${RESULT_ITEM_CLASS_NAME}`, true);\n\n  const updateSearchParams = useLastCallback((update: Partial<MiddleSearchParams>) => {\n    updateMiddleSearch({ chatId: chat!.id, threadId, update });\n\n    handleSearch();\n  });\n\n  const activateSearchTag = useLastCallback((tag: ApiReaction) => {\n    if (areSavedTagsDisabled) {\n      openPremiumModal({\n        initialSection: 'saved_tags',\n      });\n      return;\n    }\n\n    updateSearchParams({ savedTag: tag });\n  });\n\n  const removeSearchSavedTag = useLastCallback(() => {\n    updateSearchParams({ savedTag: undefined });\n  });\n\n  const handleDeleteTag = useLastCallback(() => {\n    if (isHashtagQuery) {\n      updateSearchParams({ isHashtag: false });\n      return;\n    }\n\n    if (savedTag) {\n      removeSearchSavedTag();\n    }\n  });\n\n  const handleChangeSearchType = useLastCallback((type: MiddleSearchType) => {\n    updateSearchParams({ type });\n    setIsViewAsList(true);\n  });\n\n  const handleFocusOlder = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleFocusNewer = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  function renderTypeTag(type: MiddleSearchType, isForTag?: boolean) {\n    const isSelected = !isForTag && searchType === type;\n    switch (type) {\n      case 'chat':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={chat?.id}\n            title={oldLang('SearchThisChat')}\n            clickArg=\"chat\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'myChats':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={currentUserId}\n            forceShowSelf\n            title={oldLang('SearchMyMessages')}\n            clickArg=\"myChats\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'channels':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            customPeer={CHANNELS_PEER}\n            title={oldLang('SearchPublicPosts')}\n            clickArg=\"channels\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n    }\n    return undefined;\n  }\n\n  function renderDropdown() {\n    return (\n      <div className={buildClassName(styles.dropdown, !hasResultsDropdown && styles.dropdownHidden)}>\n        {!isMobile && <div className={styles.separator} />}\n        {hasSavedTags && !isHashtagQuery && (\n          <div\n            className={buildClassName(\n              styles.savedTags,\n              !isMobile && styles.wrap,\n              'no-scrollbar',\n            )}\n          >\n            {savedTagsArray.map((tag) => {\n              const isChosen = isSameReaction(tag.reaction, savedTag);\n              return (\n                <SavedTagButton\n                  containerId=\"local-search\"\n                  key={getReactionKey(tag.reaction)}\n                  reaction={tag.reaction}\n                  tag={tag}\n                  withCount\n                  isDisabled={areSavedTagsDisabled}\n                  isChosen={isChosen}\n                  onClick={isChosen ? removeSearchSavedTag : activateSearchTag}\n                />\n              );\n            })}\n          </div>\n        )}\n        {isHashtagQuery && (\n          <div\n            className={buildClassName(styles.searchTypes, 'no-scrollbar')}\n          >\n            {renderTypeTag('chat')}\n            {renderTypeTag('myChats')}\n            {renderTypeTag('channels')}\n          </div>\n        )}\n        {hasResultsContainer && (\n          <InfiniteScroll\n            ref={containerRef}\n            className={buildClassName(styles.results, 'custom-scroll')}\n            items={viewportResults}\n            itemSelector={`.${RESULT_ITEM_CLASS_NAME}`}\n            preloadBackwards={0}\n            onLoadMore={getMore}\n            onKeyDown={handleKeyDown}\n          >\n            {areResultsEmpty && (\n              <span key=\"nothing\" className={styles.placeholder}>\n                {oldLang('NoResultFoundFor', query)}\n              </span>\n            )}\n            {isOnlyHash && (\n              <span key=\"enterhash\" className={styles.placeholder}>\n                {oldLang('HashtagSearchPlaceholder')}\n              </span>\n            )}\n            {viewportResults?.map(({\n              message, senderPeer, messageChat, searchResultKey,\n            }, i) => (\n              <MiddleSearchResult\n                key={searchResultKey}\n                teactOrderKey={-message.date}\n                className={RESULT_ITEM_CLASS_NAME}\n                query={query}\n                message={message}\n                senderPeer={senderPeer}\n                messageChat={messageChat}\n                shouldShowChat={isHashtagQuery}\n                isActive={focusedIndex - viewportOffset === i}\n                onClick={handleMessageClick}\n              />\n            ))}\n          </InfiniteScroll>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      id=\"MiddleSearch\"\n      className={buildClassName(\n        styles.root,\n        isActive && styles.active,\n        !isActive && isFullyHidden && 'visually-hidden', // `display: none` would prevent focus on iOS\n        isFocused && styles.focused,\n        isMobile && styles.mobile,\n      )}\n      ref={ref}\n    >\n      <div className={styles.header}>\n        {!isMobile && (\n          <Avatar\n            className={styles.avatar}\n            peer={monoforumChat || chat}\n            size=\"medium\"\n            isSavedMessages={isSavedMessages}\n          />\n        )}\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          className={buildClassName(\n            styles.input,\n            hasResultsDropdown && styles.withDropdown,\n            hasResultsDropdown && !isMobile && styles.adaptSearchBorders,\n          )}\n          canClose={!isMobile}\n          isLoading={isLoading}\n          resultsItemSelector={`.${styles.results} .${RESULT_ITEM_CLASS_NAME}`}\n          hasUpButton={hasNavigationButtons && !isMobile}\n          hasDownButton={hasNavigationButtons && !isMobile}\n          placeholder={isHashtagQuery ? oldLang('SearchHashtagsHint') : oldLang('Search')}\n          teactExperimentControlled\n          onChange={handleQueryChange}\n          onStartBackspace={handleDeleteTag}\n          onReset={handleReset}\n          withBackIcon={isMobile}\n          onFocus={markFocused}\n          focused={isFocused}\n          onUpClick={canFocusOlder ? handleFocusOlder : undefined}\n          onDownClick={canFocusNewer ? handleFocusNewer : undefined}\n        >\n          <div className={styles.searchTags}>\n            {savedTag && (\n              <SavedTagButton\n                containerId=\"local-search-tags\"\n                className={styles.savedSearchTag}\n                reaction={savedTag}\n                tag={savedTags![getReactionKey(savedTag)]}\n                onClick={removeSearchSavedTag}\n              />\n            )}\n            {isHashtagQuery && <div className={styles.hash}>#</div>}\n          </div>\n          {!isMobile && renderDropdown()}\n        </SearchInput>\n        {!isMobile && (\n          <div className={styles.icons}>\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel={oldLang('JumpToDate')}\n            >\n              <Icon name=\"calendar\" />\n            </Button>\n          </div>\n        )}\n      </div>\n      {isMobile && renderDropdown()}\n      {isMobile && (\n        <div className={styles.footer}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n\n            onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n            ariaLabel={oldLang('JumpToDate')}\n          >\n            <Icon name=\"calendar\" />\n          </Button>\n          <div className={styles.counter}>\n            {hasQueryData && (\n              foundIds?.length ? (\n                oldLang('Of', [Math.max(focusedIndex + 1, 1), totalCount])\n              ) : foundIds && !foundIds.length && (\n                oldLang('NoResult')\n              )\n            )}\n          </div>\n          {searchType === 'chat' && Boolean(foundIds?.length) && (\n            <Button\n              className={styles.viewStyle}\n              size=\"smaller\"\n              isText\n              fluid\n              noForcedUpperCase\n              onClick={handleTriggerViewStyle}\n            >\n              {isViewAsList ? oldLang('SearchAsChat') : oldLang('SearchAsList')}\n            </Button>\n          )}\n          {hasNavigationButtons && !hasResultsDropdown && (\n            <div className={styles.mobileNavigation}>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusOlder && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusOlder}\n                nonInteractive={!canFocusOlder}\n                ariaLabel={lang('AriaSearchOlderResult')}\n              >\n                <Icon name=\"up\" />\n              </Button>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusNewer && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusNewer}\n                nonInteractive={!canFocusNewer}\n                ariaLabel={lang('AriaSearchNewerResult')}\n              >\n                <Icon name=\"down\" />\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n    const { chatId, threadId } = currentMessageList;\n\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const {\n      requestedQuery, savedTag, results, fetchingQuery, isHashtag, type,\n    } = selectCurrentMiddleSearch(global) || {};\n    const { totalCount, foundIds, query: lastSearchQuery } = results || {};\n\n    const currentUserId = global.currentUserId;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    const savedTags = isSavedMessages && !isSavedDialog ? global.savedReactionTags?.byKey : undefined;\n\n    const monoforumChat = selectMonoforumChannel(global, chatId);\n\n    return {\n      chat,\n      monoforumChat,\n      requestedQuery,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n      savedTags,\n      savedTag,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isSavedMessages,\n      fetchingQuery,\n      isHashtagQuery: isHashtag,\n      currentUserId,\n      searchType: type,\n      lastSearchQuery,\n    };\n  },\n)(MiddleSearch));\n","import type { ElementRef } from '../../lib/teact/teact';\nimport { useEffect } from '../../lib/teact/teact';\n\nimport useLastCallback from '../useLastCallback';\n\n// Fragile\nexport function useClickOutside(\n  refs: ElementRef<HTMLElement>[], callback: (event: MouseEvent) => void,\n) {\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    const clickedOutside = refs.every((ref) => {\n      return ref.current && !ref.current.contains(event.target as Node);\n    });\n\n    if (clickedOutside) callback(event);\n  });\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [handleClickOutside]);\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent, ThreadId } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport {\n  selectChat, selectChatFullInfo, selectIsChatWithSelf, selectIsCurrentUserPremium, selectShouldLoopStickers,\n} from '../../../global/selectors';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { pickTruthy } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport StickerSetCover from './StickerSetCover';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  noContextMenus?: boolean;\n  idPrefix: string;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  isForEffects?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  effectStickers?: ApiSticker[];\n  effectEmojis?: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  effectStickers,\n  effectEmojis,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noContextMenus,\n  idPrefix,\n  onStickerSelect,\n  isForEffects,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat?.id, threadId);\n\n  const prefix = `${idPrefix}-sticker-set`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const lang = useOldLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (isForEffects && effectStickers) {\n      const effectSets: StickerSetOrReactionsSetOrRecent[] = [];\n      if (effectEmojis?.length) {\n        effectSets.push({\n          id: EFFECT_EMOJIS_SET_ID,\n          accessHash: '0',\n          title: '',\n          stickers: effectEmojis,\n          count: effectEmojis.length,\n          isEmoji: true,\n        });\n      }\n      if (effectStickers?.length) {\n        effectSets.push({\n          id: EFFECT_STICKERS_SET_ID,\n          accessHash: '0',\n          title: lang('StickerEffects'),\n          stickers: effectStickers,\n          count: effectStickers.length,\n        });\n      }\n      return effectSets;\n    }\n\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    const userSetIds = [...(addedSetIds || [])];\n    if (chatStickerSetId) {\n      userSetIds.unshift(chatStickerSetId);\n    }\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, userSetIds));\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds,\n    stickerSetsById,\n    favoriteStickers,\n    recentStickers,\n    chatStickerSetId,\n    lang,\n    effectStickers,\n    isForEffects,\n    effectEmojis,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents\n    && !noPopulatedSets && (canSendStickers || isForEffects);\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  });\n\n  const handleStickerUnfave = useLastCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  });\n\n  const handleStickerFave = useLastCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  });\n\n  const handleMouseMove = useLastCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  });\n\n  const handleRemoveRecentSticker = useLastCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  });\n\n  if (!chat) return undefined;\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <Icon name=\"recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <Icon name=\"favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar peer={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n              forcePlayback\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n          forcePlayback\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers && !isForEffects ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  return (\n    <div className={fullClassName}>\n      {!isForEffects && (\n        <div ref={headerRef} className={headerClassName}>\n          <div className=\"shared-canvas-container\">\n            <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n            {allSets.map(renderCover)}\n          </div>\n        </div>\n      )}\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        onScroll={handleContentScroll}\n        className={\n          buildClassName(\n            styles.main,\n            IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n            !isForEffects && styles.hasHeader,\n          )\n        }\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            noContextMenus={noContextMenus}\n            index={i}\n            idPrefix={prefix}\n            observeIntersection={observeIntersectionForSet}\n            observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n            observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n            isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            isTranslucent={isTranslucent}\n            isChatStickerSet={stickerSet.id === chatStickerSetId}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n            forcePlayback\n            shouldHideHeader={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      effect,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      effectStickers: effect?.stickers,\n      effectEmojis: effect?.emojis,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo, useRef,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiMessage,\n  ApiReaction,\n  ApiReactionWithPaid,\n} from '../../../../api/types';\n\nimport {\n  getReactionKey, sortReactions,\n} from '../../../../global/helpers';\nimport { selectChatFullInfo } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nimport ReactionEmoji from '../../../common/reactions/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  selectedReactionIds?: string[];\n  message?: ApiMessage;\n  onReactionSelect: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  isWithPaidReaction?: boolean;\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  reactionsLimit?: number;\n  isCurrentUserPremium?: boolean;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  isWithPaidReaction,\n  message,\n  reactionsLimit,\n  onReactionSelect,\n  onReactionContext,\n}) => {\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const currentReactions = message?.reactions?.results;\n\n  const shouldUseCurrentReactions = reactionsLimit && currentReactions\n    && currentReactions.length >= reactionsLimit;\n\n  const allAvailableReactions = useMemo(() => {\n    if (shouldUseCurrentReactions) {\n      const reactions = currentReactions.map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactions.unshift({ type: 'paid' });\n      }\n      return reactions;\n    }\n\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      const reactionsToSort: ApiReactionWithPaid[] = (availableReactions || []).map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactionsToSort.unshift({ type: 'paid' });\n      }\n      return sortReactions(reactionsToSort, topReactions);\n    }\n\n    const reactionsToSort: ApiReactionWithPaid[] = enabledReactions.allowed.slice();\n    if (isWithPaidReaction) {\n      reactionsToSort.unshift({ type: 'paid' });\n    }\n\n    return sortReactions(reactionsToSort, topReactions);\n  }, [\n    availableReactions, enabledReactions, topReactions, shouldUseCurrentReactions, currentReactions, isWithPaidReaction,\n  ]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect}\n                onContextMenu={onReactionContext}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { availableReactions, topReactions } = global.reactions;\n\n    const { maxUniqueReactions } = global.appConfig || {};\n    const { enabledReactions, isPaidReactionAvailable } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n      reactionsLimit: maxUniqueReactions,\n      isWithPaidReaction: isPaidReactionAvailable,\n    };\n  },\n)(ReactionPickerLimited));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"MhpiTAwi\",\"wrapper\":\"NIaqmosK\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiReaction,\n  ApiReactionWithPaid,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n} from '../../../../api/types';\nimport type { IAnchorPosition } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\n\nimport { getReactionKey, getStoryKey } from '../../../../global/helpers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectIsContextMenuTranslucent,\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { isUserId } from '../../../../util/entities/ids';\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { buildCustomEmojiHtml } from '../../composer/helpers/customEmoji';\n\nimport { getIsMobile } from '../../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../../../common/CustomEmojiPicker';\nimport Menu from '../../../ui/Menu';\nimport StickerPicker from '../../composer/StickerPicker';\nimport ReactionPickerLimited from './ReactionPickerLimited';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  shouldUseFullPicker?: boolean;\n  message?: ApiMessage;\n  story?: ApiStory | ApiStorySkipped;\n  isCurrentUserPremium?: boolean;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n  sendAsMessage?: boolean;\n  chatId?: string;\n  isForEffects?: boolean;\n  availableEffectById: Record<string, ApiAvailableEffect>;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\nconst REACTION_SELECTOR_WIDTH = 16.375 * REM;\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  story,\n  position,\n  isTranslucent,\n  isCurrentUserPremium,\n  shouldUseFullPicker,\n  sendAsMessage,\n  chatId,\n  isForEffects,\n  availableEffectById,\n}) => {\n  const {\n    toggleReaction, closeReactionPicker, sendMessage, showNotification, sendStoryReaction, saveEffectInDraft,\n    requestEffectInComposer, addLocalPaidReaction, openPaidReactionModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const renderedStoryPeerId = useCurrentOrPrev(story?.peerId, true);\n  const renderedStoryId = useCurrentOrPrev(story?.id);\n  const storedPosition = useCurrentOrPrev(position, true);\n  const menuRef = useRef<HTMLDivElement>();\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    if (renderedStoryId) {\n      return storedPosition;\n    }\n\n    return {\n      x: storedPosition.x + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [renderedStoryId, storedPosition, shouldUseFullPicker]);\n\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({\n    withPortal: true,\n    isDense: !renderedStoryPeerId,\n    deltaX: !getIsMobile() && menuRef.current\n      ? -(menuRef.current.offsetWidth - REACTION_SELECTOR_WIDTH) / 2 - FULL_PICKER_SHIFT_DELTA.x / 2\n      : 0,\n  }));\n\n  const handleToggleCustomReaction = useLastCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction: ApiReaction = sticker.isCustomEmoji\n      ? { type: 'custom', documentId: sticker.id }\n      : { type: 'emoji', emoticon: sticker.emoji! };\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    if (reaction.type === 'paid') {\n      addLocalPaidReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, count: 1,\n      });\n    } else {\n      toggleReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n      });\n    }\n    closeReactionPicker();\n  });\n\n  const handleReactionContextMenu = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (reaction.type !== 'paid') return;\n\n    openPaidReactionModal({\n      chatId: renderedChatId!,\n      messageId: renderedMessageId!,\n    });\n    closeReactionPicker();\n  });\n\n  const handleStoryReactionSelect = useLastCallback((item: ApiReactionWithPaid | ApiSticker) => {\n    if ('type' in item && item.type === 'paid') return; // Not supported for stories\n\n    const reaction = 'id' in item ? { type: 'custom', documentId: item.id } as const : item;\n\n    const sticker = 'type' in item && item.type === 'custom' ? getGlobal().customEmojis.byId[item.documentId]\n      : 'id' in item ? item : undefined;\n\n    if (sticker && !sticker.isFree && !isCurrentUserPremium) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n\n      closeReactionPicker();\n\n      return;\n    }\n\n    if (!sendAsMessage) {\n      sendStoryReaction({\n        peerId: renderedStoryPeerId!,\n        storyId: renderedStoryId!,\n        containerId: getStoryKey(renderedStoryPeerId!, renderedStoryId!),\n        reaction,\n        shouldAddToRecent: true,\n      });\n      closeReactionPicker();\n      return;\n    }\n\n    let text: string | undefined;\n    let entities: ApiMessageEntity[] | undefined;\n\n    if ('type' in item && item.type === 'emoji') {\n      text = item.emoticon;\n    } else {\n      const customEmojiMessage = parseHtmlAsFormattedText(buildCustomEmojiHtml(sticker!));\n      text = customEmojiMessage.text;\n      entities = customEmojiMessage.entities;\n    }\n\n    sendMessage({ text, entities, isReaction: true });\n    closeReactionPicker();\n  });\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker) => {\n    const availableEffects = Object.values(availableEffectById);\n    const effectId = availableEffects.find((effect) => effect.effectStickerId === sticker.id)?.id;\n\n    if (chatId) saveEffectInDraft({ chatId, threadId: MAIN_THREAD_ID, effectId });\n\n    if (effectId) requestEffectInComposer({});\n    closeReactionPicker();\n  });\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push(getReactionKey(reaction));\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(styles.menu, 'ReactionPicker')}\n      bubbleClassName={buildClassName(\n        styles.menuContent,\n        !shouldUseFullPicker && !renderedStoryId && styles.onlyReactions,\n        renderedStoryId && styles.storyMenu,\n      )}\n      withPortal\n      noCompact\n      anchor={renderingPosition}\n      positionY={story && 'bottom'}\n      getTriggerElement={getTriggerElement}\n      getRootElement={getRootElement}\n      getMenuElement={getMenuElement}\n      getLayout={getLayout}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      {isForEffects && chatId ? (\n        <StickerPicker\n          className=\"\"\n          isHidden={!isOpen}\n          loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n          idPrefix=\"message-effect\"\n          canSendStickers={false}\n          noContextMenus={false}\n          chatId={chatId}\n          isTranslucent={isTranslucent}\n          onStickerSelect={handleStickerSelect}\n          isForEffects={isForEffects}\n        />\n      ) : (\n        <>\n          <CustomEmojiPicker\n            chatId={renderedChatId}\n            idPrefix=\"message-emoji-set-\"\n            isHidden={!isOpen || !(shouldUseFullPicker || renderedStoryId)}\n            loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n            isReactionPicker\n            className={!shouldUseFullPicker && !renderedStoryId ? styles.hidden : undefined}\n            selectedReactionIds={selectedReactionIds}\n            isTranslucent={isTranslucent}\n            onCustomEmojiSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleCustomReaction}\n            onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n            onReactionContext={handleReactionContextMenu}\n          />\n          {!shouldUseFullPicker && Boolean(renderedChatId) && (\n            <ReactionPickerLimited\n              chatId={renderedChatId}\n              loadAndPlay={isOpen}\n              onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n              onReactionContext={handleReactionContextMenu}\n              selectedReactionIds={selectedReactionIds}\n              message={message}\n            />\n          )}\n        </>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const state = selectTabState(global);\n  const availableEffectById = global.availableEffectById;\n  const {\n    chatId, messageId, storyPeerId, storyId, position, sendAsMessage, isForEffects,\n  } = state.reactionPicker || {};\n  const story = storyPeerId && storyId\n    ? selectPeerStory(global, storyPeerId, storyId) as ApiStory | ApiStorySkipped\n    : undefined;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = isUserId(chatId || storyPeerId || '');\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const { maxUniqueReactions } = global.appConfig || {};\n  const areAllReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  const currentReactions = message?.reactions?.results;\n  const shouldUseCurrentReactions = Boolean(maxUniqueReactions && currentReactions\n    && currentReactions.length >= maxUniqueReactions);\n\n  return {\n    message,\n    story,\n    position,\n    shouldUseFullPicker: (chat?.isForbidden || areSomeReactionsAllowed || shouldUseCurrentReactions) ? false\n      : (areAllReactionsAllowed || isPrivateChat),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    sendAsMessage,\n    isForEffects,\n    chatId,\n    availableEffectById,\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"gBh4WvBC\",\"menuContent\":\"qSfKwMzX\",\"storyMenu\":\"srpBMrqr\",\"onlyReactions\":\"dRNSqkOC\",\"hidden\":\"KVwgF6DG\"};","import { fixImageContent } from '../../../../util/parseHtmlAsFormattedText';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QucaiGVU\",\"preview\":\"SHoF85Vw\",\"duration\":\"nI2M1SBH\",\"single\":\"FjrnqGba\",\"no-grouping\":\"g0cTsM9d\",\"noGrouping\":\"g0cTsM9d\",\"file\":\"B6f6GcvN\",\"overlay\":\"bX7LdgxW\",\"action-item\":\"Zo7u5epf\",\"actionItem\":\"Zo7u5epf\",\"delete-file\":\"CYJwy9T_\",\"deleteFile\":\"CYJwy9T_\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { SUPPORTED_PHOTO_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport File from '../../common/File';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useLastCallback(() => {\n    onToggleSpoiler?.(index);\n  });\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'photo':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <Icon\n                name=\"delete\"\n                className={buildClassName(styles.actionItem, styles.deleteFile)}\n\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          <Icon\n            name={attachment.shouldSendAsSpoiler ? 'spoiler-disable' : 'spoiler'}\n            className={styles.actionItem}\n            onClick={handleSpoilerClick}\n          />\n          {onDelete && (\n\n            <Icon name=\"delete\" className={styles.actionItem} onClick={() => onDelete(index)} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport function getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_PHOTO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'photo';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","export default function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","import { type ElementRef } from '../lib/teact/teact';\n\nimport isFullyVisible from './visibility/isFullyVisible';\nimport animateScroll from './animateScroll';\nimport findInViewport from './findInViewport';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: ElementRef<HTMLElement>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll({\n      container,\n      element: allElements[index],\n      position,\n      margin: SCROLL_MARGIN,\n    });\n  }\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useLastCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  });\n\n  const handleArrowKey = useLastCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  });\n\n  const handleItemSelect = useLastCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (!isActive) return false;\n\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  });\n\n  useEffect(() => {\n    if (!isActive) setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n  }, [isActive, shouldRemoveSelectionOnReset]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useLastCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  });\n\n  const handleSelectMention = useLastCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  });\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePreviousDeprecated(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item smaller-icon\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"a27O2Qlr\",\"mobile\":\"khvUZbGZ\",\"symbolMenuOpen\":\"ir5kkMy1\",\"header-border\":\"Pc1k8G8s\",\"headerBorder\":\"Pc1k8G8s\",\"sendButtonStar\":\"C1OOt81o\",\"attachments\":\"_bxSIFgj\",\"attachments-bottom-padding\":\"RPVunBe2\",\"attachmentsBottomPadding\":\"RPVunBe2\",\"caption-wrapper\":\"EtmiUn2k\",\"captionWrapper\":\"EtmiUn2k\",\"caption-top-border\":\"FjjSKMYe\",\"captionTopBorder\":\"FjjSKMYe\",\"caption\":\"Te7lIfpB\",\"dropTarget\":\"AT_d9l0W\",\"dropOutlineContainer\":\"d9O65j_I\",\"dropOutline\":\"jzCBDWMw\",\"outline\":\"xjNY3Z8u\",\"hovered\":\"AnO3BgVv\",\"send-wrapper\":\"wDqWK9MD\",\"sendWrapper\":\"wDqWK9MD\",\"send\":\"kNlWmBJI\",\"is-pointer-env\":\"rYZmraWo\",\"isPointerEnv\":\"rYZmraWo\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAttachment, ApiChatMember, ApiMessage, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getAttachmentMediaType } from '../../../global/helpers';\nimport { selectChatFullInfo, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { validateFiles } from '../../../util/files';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { removeAllSelections } from '../../../util/selection';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useFlag from '../../../hooks/useFlag';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport MentionTooltip from './MentionTooltip';\nimport MessageInput from './MessageInput';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  attachments: ApiAttachment[];\n  editingMessage?: ApiMessage;\n  messageListType?: MessageListType;\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady: boolean;\n  isForMessage?: boolean;\n  shouldSchedule?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  forceDarkTheme?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n  canScheduleUntilOnline?: boolean;\n  canSchedule?: boolean;\n  onSendWhenOnline?: NoneToVoidFunction;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  editingMessage?: ApiMessage;\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  editingMessage,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  isForMessage,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  forceDarkTheme,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n  canScheduleUntilOnline,\n  canSchedule,\n  onSendWhenOnline,\n  paidMessagesStars,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const svgRef = useRef<SVGSVGElement>();\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const mainButtonRef = useRef<HTMLButtonElement>();\n  const inputRef = useRef<HTMLDivElement>();\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePreviousDeprecated(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const isEditing = editingMessage && Boolean(editingMessage);\n  const isInAlbum = editingMessage && editingMessage?.groupedId;\n  const isEditingMessageFile = isEditing && attachments?.length && getAttachmentMediaType(attachments[0]);\n  const notEditingFile = isEditingMessageFile !== 'file';\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const shouldSendCompressed = attachmentSettings.shouldCompress;\n  const isSendingCompressed = Boolean(\n    (shouldSendCompressed || shouldForceCompression || isInAlbum) && !shouldForceAsFile,\n  );\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n  const isInvertedMedia = attachmentSettings.isInvertedMedia;\n  const [shouldSendInHighQuality, setShouldSendInHighQuality] = useState(\n    attachmentSettings.shouldSendInHighQuality,\n  );\n  const [renderingShouldSendInHighQuality, setRenderingShouldSendInHighQuality] = useState(shouldSendInHighQuality);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  const timerRef = useRef<number | undefined>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n      setShouldSendInHighQuality(attachmentSettings.shouldSendInHighQuality);\n    }\n  }, [attachmentSettings, isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [updateAttachmentSettings, isOpen]);\n\n  function setIsInvertedMedia(value?: true) {\n    updateAttachmentSettings({ isInvertedMedia: value });\n  }\n\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      removeAllSelections();\n    }\n  }, [isMobile, isOpen]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useLastCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = ((shouldSchedule || shouldSendScheduled) && isForMessage && !editingMessage) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped, isInvertedMedia);\n      updateAttachmentSettings({\n        shouldCompress: isSendingCompressed,\n        shouldSendGrouped,\n        isInvertedMedia,\n        shouldSendInHighQuality,\n      });\n    }\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendAttachments(true);\n  });\n\n  const handleSendClick = useLastCallback(() => {\n    sendAttachments();\n  });\n\n  const handleScheduleClick = useLastCallback(() => {\n    sendAttachments(false, true);\n  });\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  });\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useLastCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  });\n\n  const handleDelete = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  });\n\n  const handleEnableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: true,\n    })));\n  });\n\n  const handleToggleShouldCompress = useLastCallback(() => {\n    const newValue = !shouldSendCompressed;\n    updateAttachmentSettings({ shouldCompress: newValue });\n  });\n\n  const handleToggleQuality = useLastCallback(() => {\n    const newValue = !shouldSendInHighQuality;\n    setShouldSendInHighQuality(newValue);\n    updateAttachmentSettings({ shouldSendInHighQuality: newValue });\n  });\n\n  const handleDisableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  });\n\n  const handleToggleSpoiler = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  });\n\n  const handleResize = useLastCallback(() => {\n    const svg = svgRef.current;\n    if (!svg) {\n      return;\n    }\n\n    const { width, height } = svg.getBoundingClientRect();\n    svg.viewBox.baseVal.width = width;\n    svg.viewBox.baseVal.height = height;\n  });\n\n  // Can't listen for SVG resize\n  useResizeObserver(ref, handleResize);\n\n  useEffectOnce(handleResize);\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [oldLang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios, hasAnyPhoto] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_PHOTO_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    const hasAnyPhoto = renderingAttachments.some((a) => SUPPORTED_PHOTO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio, hasAnyPhoto];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  useEffect(() => {\n    if (shouldSendInHighQuality === renderingShouldSendInHighQuality) return;\n    if (timerRef.current) clearTimeout(timerRef.current);\n    timerRef.current = window.setTimeout(() => {\n      setRenderingShouldSendInHighQuality(shouldSendInHighQuality);\n    }, CLOSE_MENU_ANIMATION_DURATION);\n    return () => {\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n        timerRef.current = undefined;\n      }\n    };\n  }, [shouldSendInHighQuality, renderingShouldSendInHighQuality]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  const canInvertMedia = (() => {\n    if (isEditing) return false;\n    if (!hasMedia) return false;\n    if (!shouldForceAsFile && !shouldForceCompression && !isSendingCompressed) return false;\n    if (isMultiple && shouldSendGrouped) return false;\n    return true;\n  })();\n\n  let title = '';\n  const attachmentsLength = renderingAttachments.length;\n  if (areAllPhotos) {\n    title = oldLang(isEditing ? 'EditMessageReplacePhoto' : 'PreviewSender.SendPhoto', attachmentsLength, 'i');\n  } else if (areAllVideos) {\n    title = oldLang(isEditing ? 'EditMessageReplaceVideo' : 'PreviewSender.SendVideo', attachmentsLength, 'i');\n  } else if (areAllAudios) {\n    title = oldLang(isEditing ? 'EditMessageReplaceAudio' : 'PreviewSender.SendAudio', attachmentsLength, 'i');\n  } else {\n    title = oldLang(isEditing ? 'EditMessageReplaceFile' : 'PreviewSender.SendFile', attachmentsLength, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        {notEditingFile && !isInAlbum\n          && (\n            <DropdownMenu\n              className=\"attachmeneditingMessaget-modal-more-menu with-menu-transitions\"\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              {Boolean(!editingMessage) && (\n                <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{oldLang('Add')}</MenuItem>\n              )}\n              {hasMedia && (\n                <>\n                  {\n                    canInvertMedia && (!isInvertedMedia ? (\n\n                      <MenuItem icon=\"move-caption-up\" onClick={() => setIsInvertedMedia(true)}>\n                        {oldLang('PreviewSender.MoveTextUp')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"move-caption-down\" onClick={() => setIsInvertedMedia(undefined)}>\n                        {oldLang(('PreviewSender.MoveTextDown'))}\n                      </MenuItem>\n                    ))\n                  }\n                  {\n                    !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n\n                      <MenuItem icon=\"document\" onClick={handleToggleShouldCompress}>\n                        {oldLang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"photo\" onClick={handleToggleShouldCompress}>\n                        {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                      </MenuItem>\n                    ))\n                  }\n                  {isSendingCompressed && !editingMessage && hasAnyPhoto && (\n                    <MenuItem\n                      icon={renderingShouldSendInHighQuality ? 'sd-photo' : 'hd-photo'}\n                      onClick={handleToggleQuality}\n                    >\n                      {lang(renderingShouldSendInHighQuality ? 'SendInStandardQuality' : 'SendInHighQuality')}\n                    </MenuItem>\n                  )}\n                  {isSendingCompressed && hasAnySpoilerable && Boolean(!editingMessage) && (\n                    hasSpoiler ? (\n                      <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                        {oldLang('Attachment.DisableSpoiler')}\n                      </MenuItem>\n                    ) : (\n                      <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                        {oldLang('Attachment.EnableSpoiler')}\n                      </MenuItem>\n                    )\n                  )}\n                </>\n              )}\n              {isMultiple && (\n                shouldSendGrouped ? (\n                  <MenuItem\n                    icon=\"grouped-disable\"\n\n                    onClick={() => setShouldSendGrouped(false)}\n                  >\n                    Ungroup All Media\n                  </MenuItem>\n                ) : (\n\n                  <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                    Group All Media\n                  </MenuItem>\n                )\n              )}\n            </DropdownMenu>\n          )}\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n  const buttonSendCaption = paidMessagesStars ? formatStarsAsIcon(lang,\n    attachmentsLength * paidMessagesStars,\n    {\n      className: styles.sendButtonStar,\n      asFont: true,\n    }) : oldLang('Send');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n        forceDarkTheme && 'component-theme-dark',\n      )}\n      noBackdropClose\n      isLowStackPriority\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={oldLang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <svg className={styles.dropOutlineContainer}>\n          <rect className={styles.dropOutline} x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" rx=\"8\" />\n        </svg>\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n              idPrefix=\"attachment\"\n              forceDarkTheme={forceDarkTheme}\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              customEmojiPrefix=\"attachment\"\n              isReady={isReady}\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={oldLang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule && !editingMessage ? oldLang('Next')\n                  : editingMessage ? oldLang('Save') : buttonSendCaption}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  canSchedule={canSchedule && isForMessage}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                  onSendWhenOnline={onSendWhenOnline}\n                  canScheduleUntilOnline={canScheduleUntilOnline}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { shouldSuggestCustomEmoji } = global.settings.byKey;\n    const { language } = selectSharedSettings(global);\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent } from 'react';\nimport type { ElementRef } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport TextArea from '../../ui/TextArea';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  maxOptionsCount?: number;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst FALLBACK_MAX_OPTIONS_COUNT = 12;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal = ({\n  isOpen,\n  isQuiz,\n  shouldBeAnonymous,\n  maxOptionsCount = FALLBACK_MAX_OPTIONS_COUNT,\n  onSend,\n  onClear,\n}: OwnProps) => {\n  const questionInputRef = useRef<HTMLInputElement>();\n  const optionsListRef = useRef<HTMLDivElement>();\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useOldLang();\n\n  const handleSolutionChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setSolution(e.target.value);\n  });\n\n  const focusInput = useLastCallback((ref: ElementRef<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  const addNewOption = useLastCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const isNoCorrectOptionError = isQuizMode && (correctOption === undefined || !options[correctOption].trim());\n\n    const answers = options\n      .map((text, index) => {\n        text = text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          text: {\n            text,\n          },\n          option: String(index),\n          ...(index === correctOption && { correct: true }),\n        };\n      }).filter(Boolean);\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    if (!questionTrimmed || answers.length < 2) {\n      setQuestion(questionTrimmed);\n      if (answers.length) {\n        const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter(Boolean);\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isNoCorrectOptionError) {\n      setHasErrors(true);\n      return;\n    }\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: {\n          text: questionTrimmed,\n        },\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseHtmlAsFormattedText(solution.substring(0, MAX_SOLUTION_LENGTH)))\n        || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  });\n\n  const updateOption = useLastCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < maxOptionsCount) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  });\n\n  const removeOption = useLastCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleCorrectOptionChange = useLastCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  });\n\n  const handleIsAnonymousChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  });\n\n  const handleMultipleAnswersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  });\n\n  const handleQuizModeChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  });\n\n  const handleQuestionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  });\n\n  const getQuestionError = useLastCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  });\n\n  const getOptionsError = useLastCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          maxLength={MAX_OPTION_LENGTH}\n          label={index !== options.length - 1 || options.length === maxOptionsCount\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n\n            onClick={() => removeOption(index)}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: !options[index].trim() }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <div className=\"dialog-checkbox-group\">\n          {!shouldBeAnonymous && (\n            <Checkbox\n              label={lang('PollAnonymous')}\n              checked={isAnonymous}\n              onChange={handleIsAnonymousChange}\n            />\n          )}\n          <Checkbox\n            label={lang('PollMultiple')}\n            checked={isMultipleAnswers}\n            disabled={isQuizMode}\n            onChange={handleMultipleAnswersChange}\n          />\n          <Checkbox\n            label={lang('PollQuiz')}\n            checked={isQuizMode}\n            disabled={isMultipleAnswers || isQuiz !== undefined}\n            onChange={handleQuizModeChange}\n          />\n        </div>\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <TextArea\n              value={solution}\n              onChange={handleSolutionChange}\n              noReplaceNewlines\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import type { ChangeEvent } from 'react';\nimport type { ElementRef } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiNewMediaTodo } from '../../../api/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { TabState } from '../../../global/types/tabState';\n\nimport {\n  TODO_ITEM_LENGTH_LIMIT,\n  TODO_ITEMS_LIMIT,\n  TODO_TITLE_LENGTH_LIMIT,\n} from '../../../config';\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectChatMessage } from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { generateUniqueNumberId } from '../../../util/generateUniqueId';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\n\nimport './ToDoListModal.scss';\n\nexport type OwnProps = {\n  modal: TabState['todoListModal'];\n  onSend: (todoList: ApiNewMediaTodo) => void;\n  onClear: () => void;\n};\n\nexport type StateProps = {\n  editingMessage?: ApiMessage;\n  maxItemsCount?: number;\n  maxTitleLength?: number;\n  maxItemLength?: number;\n};\n\ntype Item = {\n  id: number;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTION_LENGTH = 100;\n\nconst ToDoListModal = ({\n  modal,\n  maxItemsCount = TODO_ITEMS_LIMIT,\n  maxTitleLength = TODO_TITLE_LENGTH_LIMIT,\n  maxItemLength = TODO_ITEM_LENGTH_LIMIT,\n  editingMessage,\n  onSend,\n  onClear,\n}: OwnProps & StateProps) => {\n  const { editTodo, closeTodoListModal, appendTodoList } = getActions();\n\n  const titleInputRef = useRef<HTMLInputElement>();\n  const itemsListRef = useRef<HTMLDivElement>();\n\n  const [title, setTitle] = useState<string>('');\n  const [items, setItems] = useState<Item[]>([{ id: generateUniqueNumberId(), text: '' }]);\n  const [isOthersCanAppend, setIsOthersCanAppend] = useState(true);\n  const [isOthersCanComplete, setIsOthersCanComplete] = useState(true);\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  // Treat \"Add task\" as edit mode for own checklists\n  const isAddTaskMode = renderingModal?.forNewTask && !editingMessage?.isOutgoing;\n\n  const editingTodo = editingMessage?.content.todo?.todo;\n\n  const frozenTasks = useMemo(() => {\n    if (!isAddTaskMode || !editingTodo) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return editingTodo.items.map((item) => ({\n      id: item.id,\n      text: item.title.text,\n      isDisabled: true,\n    }));\n  }, [isAddTaskMode, editingTodo]);\n\n  const focusInput = useLastCallback((ref: ElementRef<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useLayoutEffect(() => {\n    if (editingTodo) {\n      setTitle(editingTodo.title.text);\n      setIsOthersCanAppend(editingTodo.othersCanAppend ?? false);\n      setIsOthersCanComplete(editingTodo.othersCanComplete ?? false);\n      if (!isAddTaskMode) {\n        const editingItems = editingTodo.items.map((item) => ({\n          id: item.id,\n          text: item.title.text,\n        }));\n        if (editingItems.length < maxItemsCount) {\n          editingItems.push({ id: generateUniqueNumberId(), text: '' });\n        }\n        setItems(editingItems);\n      }\n    }\n  }, [editingTodo, isAddTaskMode, maxItemsCount]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setTitle('');\n      setItems([{ id: generateUniqueNumberId(), text: '' }]);\n      setIsOthersCanAppend(true);\n      setIsOthersCanComplete(true);\n      setHasErrors(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (isOpen) {\n      // Wait for the DOM to be updated\n      requestMeasure(() => {\n        if (renderingModal?.forNewTask) {\n          const inputs = itemsListRef.current?.querySelectorAll('input');\n          const lastInput = inputs?.[inputs.length - 1];\n          lastInput?.focus();\n        } else {\n          focusInput(titleInputRef);\n        }\n      });\n    }\n  }, [focusInput, isOpen, renderingModal?.forNewTask]);\n\n  const addNewItem = useLastCallback((newItems: Item[]) => {\n    const id = generateUniqueNumberId();\n    setItems([...newItems, { id, text: '' }]);\n\n    requestNextMutation(() => {\n      const list = itemsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const todoItems = items\n      .map((item) => {\n        const text = item.text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          id: item.id,\n          title: {\n            text: text.substring(0, maxItemLength),\n          },\n        };\n      }).filter(Boolean);\n\n    const titleTrimmed = title.trim().substring(0, maxTitleLength);\n    if (!titleTrimmed || todoItems.length === 0) {\n      setTitle(titleTrimmed);\n      if (todoItems.length) {\n        const itemsTrimmed = items.map((o) => (\n          { ...o, text: o.text.trim().substring(0, maxItemLength) }))\n          .filter((o) => o.text.length);\n        if (itemsTrimmed.length === 0) {\n          addNewItem([]);\n        } else {\n          setItems([...itemsTrimmed, { id: generateUniqueNumberId(), text: '' }]);\n        }\n      } else {\n        addNewItem([]);\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isAddTaskMode && editingMessage) {\n      appendTodoList({\n        chatId: editingMessage.chatId,\n        messageId: editingMessage.id,\n        items: todoItems,\n      });\n      closeTodoListModal();\n      return;\n    }\n\n    const payload: ApiNewMediaTodo = {\n      todo: {\n        title: {\n          text: titleTrimmed,\n        },\n        items: todoItems,\n        othersCanAppend: isOthersCanAppend,\n        othersCanComplete: isOthersCanComplete,\n      },\n    };\n\n    if (editingMessage) {\n      editTodo({\n        chatId: editingMessage.chatId,\n        todo: payload,\n        messageId: editingMessage.id,\n      });\n    } else {\n      onSend(payload);\n    }\n\n    closeTodoListModal();\n  });\n\n  const updateItem = useLastCallback((index: number, text: string) => {\n    const newItems = [...items];\n    newItems[index] = { ...newItems[index], text };\n    if (newItems[newItems.length - 1].text.trim().length && newItems.length < maxItemsCount) {\n      addNewItem(newItems);\n    } else {\n      setItems(newItems);\n    }\n  });\n\n  const removeItem = useLastCallback((index: number) => {\n    const newItems = [...items];\n    newItems.splice(index, 1);\n    setItems(newItems);\n\n    requestNextMutation(() => {\n      if (!itemsListRef.current) {\n        return;\n      }\n\n      itemsListRef.current.classList.toggle('overflown', itemsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleIsOthersCanAppendChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsOthersCanAppend(e.target.checked);\n  });\n  const handleIsOthersCanCompleteChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsOthersCanComplete(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleCreate();\n    }\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  });\n\n  const getTitleError = useLastCallback(() => {\n    if (hasErrors && !title.trim().length) {\n      return lang('ToDoListErrorChooseTitle');\n    }\n\n    return undefined;\n  });\n\n  const getItemsError = useLastCallback((index: number) => {\n    const itemsTrimmed = items.map((o) => o.text.trim()).filter((o) => o.length);\n    if (hasErrors && itemsTrimmed.length < 1 && !items[index].text.trim().length) {\n      return lang('ToDoListErrorChooseTasks');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    const title = isAddTaskMode ? 'TitleAppendToDoList' : editingMessage ? 'TitleEditToDoList' : 'TitleNewToDoList';\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('AriaToDoCancel')} onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang(title)}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang(isAddTaskMode ? 'Add' : editingMessage ? 'Save' : 'Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderItems() {\n    const tasksToRender = [...frozenTasks, ...items];\n    return tasksToRender.map((item, index) => {\n      const stateIndex = index - frozenTasks.length;\n      return (\n        <div className=\"item-wrapper\">\n          <InputText\n            maxLength={MAX_OPTION_LENGTH}\n            label={index !== tasksToRender.length - 1 || tasksToRender.length === maxItemsCount\n              ? lang('TitleTask')\n              : lang('TitleAddTask')}\n            error={getItemsError(stateIndex)}\n            value={item.text}\n            disabled={item.isDisabled}\n            onChange={(e) => updateItem(stateIndex, e.currentTarget.value)}\n            onKeyPress={handleKeyPress}\n          />\n          {index !== tasksToRender.length - 1 && !item.isDisabled && (\n            <Button\n              className=\"item-remove-button\"\n              round\n              color=\"translucent\"\n              size=\"smaller\"\n              ariaLabel={lang('Delete')}\n              onClick={() => removeItem(stateIndex)}\n            >\n              <Icon name=\"close\" />\n            </Button>\n          )}\n        </div>\n      );\n    });\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"ToDoListModal\">\n      {!isAddTaskMode && (\n        <InputText\n          ref={titleInputRef}\n          label={lang('InputTitle')}\n          value={title}\n          error={getTitleError()}\n          onChange={handleTitleChange}\n          onKeyPress={handleKeyPress}\n        />\n      )}\n      {isAddTaskMode && (\n        <div className=\"readonly-title\">\n          {title}\n        </div>\n      )}\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={itemsListRef}>\n        <h3 className=\"items-header\">\n          {lang('TitleToDoList')}\n        </h3>\n\n        {renderItems()}\n\n      </div>\n\n      <div className=\"items-count-hint\">\n        {lang('HintTodoListTasksCount', {\n          count: maxItemsCount - items.length - (isAddTaskMode && editingTodo ? editingTodo.items.length : 0),\n        })}\n      </div>\n\n      <div className=\"options-divider\" />\n\n      {!isAddTaskMode && (\n        <div className=\"options-footer\">\n          <div className=\"dialog-checkbox-group\">\n            <Checkbox\n              label={lang('AllowOthersAddTasks')}\n              checked={isOthersCanAppend}\n              onChange={handleIsOthersCanAppendChange}\n            />\n            <Checkbox\n              label={lang('AllowOthersMarkAsDone')}\n              checked={isOthersCanComplete}\n              onChange={handleIsOthersCanCompleteChange}\n            />\n          </div>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { appConfig } = global;\n    const editingMessage = modal?.messageId ? selectChatMessage(global, modal.chatId, modal.messageId) : undefined;\n    return {\n      editingMessage,\n      maxItemsCount: appConfig?.todoItemsMax,\n      maxTitleLength: appConfig?.todoTitleLengthMax,\n      maxItemLength: appConfig?.todoItemLengthMax,\n    };\n  },\n)(ToDoListModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport { BASE_URL, IS_PACKAGED_ELECTRON } from '../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji/emoji';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `${IS_PACKAGED_ELECTRON ? BASE_URL : '.'}/img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n          draggable={false}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransitionDeprecated(shouldRender);\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { IconName } from '../../../types/icons';\nimport type {\n  EmojiData,\n  EmojiModule,\n  EmojiRawData,\n} from '../../../util/emoji/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport animateScroll from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { uncompressEmoji } from '../../../util/emoji/emoji';\nimport { pick } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, IconName> = {\n  recent: 'recent',\n  people: 'smile',\n  nature: 'animals',\n  foods: 'eats',\n  activity: 'sport',\n  places: 'car',\n  objects: 'lamp',\n  symbols: 'language',\n  flags: 'flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule> | undefined;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useOldLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useLastCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector<HTMLElement>(`#emoji-category-${index}`)!;\n    animateScroll({\n      container: containerRef.current!,\n      element: categoryEl,\n      position: 'start',\n      margin: FOCUS_MARGIN,\n      maxDistance: SMOOTH_SCROLL_DISTANCE,\n    });\n  });\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  });\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <Icon name={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <div className={containerClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={buildClassName('EmojiPicker-main', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { getVideoMediaHash, getVideoPreviewMediaHash } from '../../global/helpers';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Spinner from '../ui/Spinner';\nimport Icon from './icons/Icon';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewHash = !gif.hasVideoPreview && gif.thumbnail && getVideoMediaHash(gif, 'pictogram');\n  const previewBlobUrl = useMedia(previewHash, !loadAndPlay);\n\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n\n  const videoHash = getVideoPreviewMediaHash(gif) || getVideoMediaHash(gif, 'full');\n  const videoData = useMedia(videoHash, !loadAndPlay);\n\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.gif-context-menu .bubble'));\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  });\n\n  const handleUnsaveClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  });\n\n  const handleContextDelete = useLastCallback(() => {\n    onUnsaveClick?.(gif);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <Icon name=\"close\" className=\"gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n          draggable={false}\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport GifButton from '../../common/GifButton';\nimport Loading from '../../ui/Loading';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useLastCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  });\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div>\n      <div\n        ref={containerRef}\n        className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {!canSendGifs ? (\n          <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n        ) : canRenderContents && savedGifs && savedGifs.length ? (\n          savedGifs.map((gif) => (\n            <GifButton\n              key={gif.id}\n              gif={gif}\n              observeIntersection={observeIntersection}\n              isDisabled={!loadAndPlay}\n              onClick={canSendGifs ? onGifSelect : undefined}\n              onUnsaveClick={handleUnsaveClick}\n              isSavedMessages={isSavedMessages}\n            />\n          ))\n        ) : canRenderContents && savedGifs ? (\n          <div className=\"picker-disabled\">No saved GIFs.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  canSearch?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  Emoji,\n  CustomEmoji,\n  Stickers,\n  GIFs,\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText, canSearch,\n}) => {\n  const lang = useOldLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useLastCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  });\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && canSearch && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <Icon name=\"search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <Icon name=\"delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\nimport type { ThreadId } from '../../../types';\nimport type { MenuPositionOptions } from '../../ui/Menu';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectIsContextMenuTranslucent, selectTabState } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport GifPicker from './GifPicker';\nimport StickerPicker from './StickerPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  isMessageComposer?: boolean;\n  idPrefix: string;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n}\n& MenuPositionOptions;\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isBackgroundTranslucent?: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isMessageComposer,\n  isLeftColumnShown,\n  idPrefix,\n  isAttachmentModal,\n  canSendPlainText,\n  className,\n  isBackgroundTranslucent,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  ...menuPositionOptions\n}) => {\n  const [activeTab, setActiveTab] = useState<SymbolMenuTabs>(SymbolMenuTabs.Emoji);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, onClose, false, false);\n\n  const lang = useOldLang();\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  });\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleSearch = useLastCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, canUpdateStickerSetsOrder);\n  });\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            idPrefix={idPrefix}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            idPrefix={idPrefix}\n            canSendStickers={canSendStickers}\n            noContextMenus={!isMessageComposer}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name=\"slide\"\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        canSearch={isMessageComposer}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n      isMessageComposer && 'in-middle-column',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n\n      {...(isAttachmentModal ? menuPositionOptions : {\n        positionX: 'left',\n        positionY: 'bottom',\n      })}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n    };\n  },\n)(SymbolMenu));\n","import { memo } from '../../../lib/teact/teact';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatCommand.scss';\n\ntype OwnProps<T = undefined> = {\n  command: string;\n  description: string;\n  peer?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  clickArg: T;\n  onClick: (arg: T) => void;\n};\n\nconst ChatCommand = <T,>({\n  withAvatar,\n  focus,\n  command,\n  description,\n  peer,\n  clickArg,\n  onClick,\n}: OwnProps<T>) => {\n  const handleClick = useLastCallback(() => {\n    onClick(clickArg);\n  });\n\n  return (\n    <ListItem\n      key={command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={handleClick}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" peer={peer} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">\n          /\n          {command}\n        </span>\n        <span className=\"subtitle\">{renderText(description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(ChatCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiBotCommand, ApiMessage, ApiQuickReply, ApiUser,\n} from '../../../api/types';\nimport type { Signal } from '../../../util/signals';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport freezeWhenClosed from '../../../util/hoc/freezeWhenClosed';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ChatCommand from './ChatCommand';\n\nimport styles from './ChatCommandTooltip.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  quickReplies?: ApiQuickReply[];\n  quickReplyMessages?: Record<number, ApiMessage>;\n  self: ApiUser;\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype QuickReplyWithDescription = {\n  id: number;\n  command: string;\n  description: string;\n};\n\nconst ChatCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  withUsername,\n  botCommands,\n  quickReplies,\n  quickReplyMessages,\n  self,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand, sendQuickReply } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useLastCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${getMainUsername(bot)}` : ''}`,\n    });\n    onClick();\n  });\n\n  const handleSendQuickReply = useLastCallback((id: number) => {\n    sendQuickReply({ chatId, quickReplyId: id });\n    onClick();\n  });\n\n  const quickRepliesWithDescription = useMemo(() => {\n    if (!quickReplies?.length || !quickReplyMessages) return undefined;\n    return quickReplies.map((reply) => {\n      const message = quickReplyMessages[reply.topMessageId];\n      return {\n        id: reply.id,\n        command: reply.shortcut,\n        description: message?.content.text?.text || '',\n      } satisfies QuickReplyWithDescription;\n    });\n  }, [quickReplies, quickReplyMessages]);\n\n  const handleKeyboardSelect = useLastCallback((item: ApiBotCommand | QuickReplyWithDescription) => {\n    if (!item.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    if ('id' in item) {\n      handleSendQuickReply(item.id);\n    } else {\n      handleSendCommand(item);\n    }\n\n    return true;\n  });\n\n  const keyboardNavigationItems = useMemo(() => {\n    if (!botCommands && !quickRepliesWithDescription) return undefined;\n    return ([] as (ApiBotCommand | QuickReplyWithDescription)[])\n      .concat(quickRepliesWithDescription || [], botCommands || []);\n  }, [botCommands, quickRepliesWithDescription]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: keyboardNavigationItems,\n    onSelect: handleKeyboardSelect,\n    onClose,\n  });\n\n  const isEmpty = (botCommands && !botCommands.length) || (quickReplies && !quickReplies.length);\n\n  useEffect(() => {\n    if (isEmpty) {\n      onClose();\n    }\n  }, [isEmpty, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  if (!shouldRender || isEmpty) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {quickRepliesWithDescription?.map((reply, index) => (\n        <ChatCommand\n          key={`quickReply_${reply.id}`}\n          command={reply.command}\n          description={reply.description}\n          peer={self}\n          withAvatar\n          clickArg={reply.id}\n          onClick={handleSendQuickReply}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n      {botCommands?.map((command, index) => (\n        <ChatCommand\n          key={`${command.botId}_${command.command}`}\n          command={command.command}\n          description={command.description}\n          // No need for expensive global updates on users and chats, so we avoid them\n          peer={getGlobal().users.byId[command.botId]}\n          withAvatar\n          clickArg={command}\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex + (quickRepliesWithDescription?.length || 0) === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(freezeWhenClosed(ChatCommandTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iaTB59vy\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport ChatCommand from './ChatCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useLastCallback((command: string) => {\n    sendBotCommand({\n      command: `/${command}`,\n    });\n    onClose();\n  });\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <ChatCommand\n          key={botCommand.command}\n          command={botCommand.command}\n          description={botCommand.description}\n          clickArg={botCommand.command}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ThreadId } from '../../../types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_8sFuAomM\",\"emojiButton\":\"crWzZ2jr\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useLastCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  });\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport ReactionSelector from '../message/reactions/ReactionSelector';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onRemoveEffect?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  chatId?: string;\n  withEffects?: boolean;\n  hasCurrentEffect?: boolean;\n  effectReactions?: ApiReaction[];\n  allAvailableReactions?: ApiAvailableReaction[];\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n  isInSavedMessages?: boolean;\n  isInStoryViewer?: boolean;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst ANIMATION_DURATION = 200;\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canSchedule,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onRemoveEffect,\n  onClose,\n  onCloseAnimationEnd,\n  chatId,\n  withEffects,\n  hasCurrentEffect,\n  effectReactions,\n  allAvailableReactions,\n  onToggleReaction,\n  canBuyPremium,\n  isCurrentUserPremium,\n  isInSavedMessages,\n  isInStoryViewer,\n  canPlayAnimatedEmojis,\n}) => {\n  const {\n    openEffectPicker,\n  } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [areItemsHidden, hideItems, showItems] = useFlag();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      showItems();\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const handleOpenMessageEffectsPicker = useLastCallback((position: IAnchorPosition) => {\n    hideItems();\n    if (chatId) openEffectPicker({ chatId, position });\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className={buildClassName(\n        'CustomSendMenu', 'fluid', 'with-menu-transitions', withEffects && 'with-effects',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n\n      {withEffects && !isInStoryViewer && (\n        <ReactionSelector\n          allAvailableReactions={allAvailableReactions}\n          effectReactions={effectReactions}\n          currentReactions={undefined}\n          onToggleReaction={onToggleReaction!}\n          isPrivate\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isInSavedMessages={isInSavedMessages}\n          isForEffects\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenMessageEffectsPicker}\n          onClose={onClose}\n          className={buildClassName(areItemsHidden && 'ReactionSelector-hidden')}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'CustomSendMenu_items',\n          areItemsHidden && 'CustomSendMenu_items-hidden',\n        )}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{oldLang('SendWithoutSound')}</MenuItem>}\n        {canSchedule && onSendSchedule && (\n          <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n            {oldLang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n        )}\n        {canSchedule && onSendSchedule && displayScheduleUntilOnline && (\n          <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n            {oldLang('SendWhenOnline')}\n          </MenuItem>\n        )}\n        {withEffects && hasCurrentEffect && (\n          <MenuItem icon=\"delete\" onClick={onRemoveEffect}>\n            {lang('RemoveEffect')}\n          </MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { IAnchorPosition } from '../../../types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../config';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getKeyFromEvent from '../../../util/getKeyFromEvent';\nimport stopEvent from '../../../util/stopEvent';\nimport { INPUT_CUSTOM_EMOJI_SELECTOR } from './helpers/customEmoji';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport useVirtualBackdrop from '../../../hooks/useVirtualBackdrop';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './TextFormatter.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  anchorPosition?: IAnchorPosition;\n  selectedRange?: Range;\n  setSelectedRange: (range: Range) => void;\n  onClose: () => void;\n};\n\ninterface ISelectedTextFormats {\n  bold?: boolean;\n  italic?: boolean;\n  underline?: boolean;\n  strikethrough?: boolean;\n  monospace?: boolean;\n  spoiler?: boolean;\n}\n\nconst TEXT_FORMAT_BY_TAG_NAME: Record<string, keyof ISelectedTextFormats> = {\n  B: 'bold',\n  STRONG: 'bold',\n  I: 'italic',\n  EM: 'italic',\n  U: 'underline',\n  DEL: 'strikethrough',\n  CODE: 'monospace',\n  SPAN: 'spoiler',\n};\nconst fragmentEl = document.createElement('div');\n\nconst TextFormatter: FC<OwnProps> = ({\n  isOpen,\n  anchorPosition,\n  selectedRange,\n  setSelectedRange,\n  onClose,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const linkUrlInputRef = useRef<HTMLInputElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen);\n  const [isLinkControlOpen, openLinkControl, closeLinkControl] = useFlag();\n  const [linkUrl, setLinkUrl] = useState('');\n  const [isEditingLink, setIsEditingLink] = useState(false);\n  const [inputClassName, setInputClassName] = useState<string | undefined>();\n  const [selectedTextFormats, setSelectedTextFormats] = useState<ISelectedTextFormats>({});\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n  useVirtualBackdrop(\n    isOpen,\n    containerRef,\n    onClose,\n    true,\n  );\n\n  useEffect(() => {\n    if (isLinkControlOpen) {\n      linkUrlInputRef.current!.focus();\n    } else {\n      setLinkUrl('');\n      setIsEditingLink(false);\n    }\n  }, [isLinkControlOpen]);\n\n  useEffect(() => {\n    if (!shouldRender) {\n      closeLinkControl();\n      setSelectedTextFormats({});\n      setInputClassName(undefined);\n    }\n  }, [closeLinkControl, shouldRender]);\n\n  useEffect(() => {\n    if (!isOpen || !selectedRange) {\n      return;\n    }\n\n    const selectedFormats: ISelectedTextFormats = {};\n    let { parentElement } = selectedRange.commonAncestorContainer;\n    while (parentElement && parentElement.id !== EDITABLE_INPUT_ID) {\n      const textFormat = TEXT_FORMAT_BY_TAG_NAME[parentElement.tagName];\n      if (textFormat) {\n        selectedFormats[textFormat] = true;\n      }\n\n      parentElement = parentElement.parentElement;\n    }\n\n    setSelectedTextFormats(selectedFormats);\n  }, [isOpen, selectedRange, openLinkControl]);\n\n  const restoreSelection = useLastCallback(() => {\n    if (!selectedRange) {\n      return;\n    }\n\n    const selection = window.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(selectedRange);\n    }\n  });\n\n  const updateSelectedRange = useLastCallback(() => {\n    const selection = window.getSelection();\n    if (selection) {\n      setSelectedRange(selection.getRangeAt(0));\n    }\n  });\n\n  const getSelectedText = useLastCallback((shouldDropCustomEmoji?: boolean) => {\n    if (!selectedRange) {\n      return undefined;\n    }\n    fragmentEl.replaceChildren(selectedRange.cloneContents());\n    if (shouldDropCustomEmoji) {\n      fragmentEl.querySelectorAll(INPUT_CUSTOM_EMOJI_SELECTOR).forEach((el) => {\n        el.replaceWith(el.getAttribute('alt')!);\n      });\n    }\n    return fragmentEl.innerHTML;\n  });\n\n  const getSelectedElement = useLastCallback(() => {\n    if (!selectedRange) {\n      return undefined;\n    }\n\n    return selectedRange.commonAncestorContainer.parentElement;\n  });\n\n  function updateInputStyles() {\n    const input = linkUrlInputRef.current;\n    if (!input) {\n      return;\n    }\n\n    const { offsetWidth, scrollWidth, scrollLeft } = input;\n    if (scrollWidth <= offsetWidth) {\n      setInputClassName(undefined);\n      return;\n    }\n\n    let className = '';\n    if (scrollLeft < scrollWidth - offsetWidth) {\n      className = 'mask-right';\n    }\n    if (scrollLeft > 0) {\n      className += ' mask-left';\n    }\n\n    setInputClassName(className);\n  }\n\n  function handleLinkUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setLinkUrl(e.target.value);\n    updateInputStyles();\n  }\n\n  function getFormatButtonClassName(key: keyof ISelectedTextFormats) {\n    if (selectedTextFormats[key]) {\n      return 'active';\n    }\n\n    if (key === 'monospace' || key === 'strikethrough') {\n      if (Object.keys(selectedTextFormats).some(\n        (fKey) => fKey !== key && Boolean(selectedTextFormats[fKey as keyof ISelectedTextFormats]),\n      )) {\n        return 'disabled';\n      }\n    } else if (selectedTextFormats.monospace || selectedTextFormats.strikethrough) {\n      return 'disabled';\n    }\n\n    return undefined;\n  }\n\n  const handleSpoilerText = useLastCallback(() => {\n    if (selectedTextFormats.spoiler) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.dataset.entityType !== ApiMessageEntityTypes.Spoiler\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        spoiler: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand(\n      'insertHTML', false, `<span class=\"spoiler\" data-entity-type=\"${ApiMessageEntityTypes.Spoiler}\">${text}</span>`,\n    );\n    onClose();\n  });\n\n  const handleBoldText = useLastCallback(() => {\n    setSelectedTextFormats((selectedFormats) => {\n      // Somehow re-applying 'bold' command to already bold text doesn't work\n      document.execCommand(selectedFormats.bold ? 'removeFormat' : 'bold');\n      Object.keys(selectedFormats).forEach((key) => {\n        if ((key === 'italic' || key === 'underline') && Boolean(selectedFormats[key])) {\n          document.execCommand(key);\n        }\n      });\n\n      updateSelectedRange();\n      return {\n        ...selectedFormats,\n        bold: !selectedFormats.bold,\n      };\n    });\n  });\n\n  const handleItalicText = useLastCallback(() => {\n    document.execCommand('italic');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      italic: !selectedFormats.italic,\n    }));\n  });\n\n  const handleUnderlineText = useLastCallback(() => {\n    document.execCommand('underline');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      underline: !selectedFormats.underline,\n    }));\n  });\n\n  const handleStrikethroughText = useLastCallback(() => {\n    if (selectedTextFormats.strikethrough) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'DEL'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        strikethrough: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand('insertHTML', false, `<del>${text}</del>`);\n    onClose();\n  });\n\n  const handleMonospaceText = useLastCallback(() => {\n    if (selectedTextFormats.monospace) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'CODE'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        monospace: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    document.execCommand('insertHTML', false, `<code class=\"text-entity-code\" dir=\"auto\">${text}</code>`);\n    onClose();\n  });\n\n  const handleLinkUrlConfirm = useLastCallback(() => {\n    const formattedLinkUrl = (ensureProtocol(linkUrl) || '').split('%').map(encodeURI).join('%');\n\n    if (isEditingLink) {\n      const element = getSelectedElement();\n      if (!element || element.tagName !== 'A') {\n        return;\n      }\n\n      (element as HTMLAnchorElement).href = formattedLinkUrl;\n\n      onClose();\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    restoreSelection();\n    document.execCommand(\n      'insertHTML',\n      false,\n      `<a href=${formattedLinkUrl} class=\"text-entity-link\" dir=\"auto\">${text}</a>`,\n    );\n    onClose();\n  });\n\n  const handleKeyDown = useLastCallback((e: KeyboardEvent) => {\n    const HANDLERS_BY_KEY: Record<string, AnyToVoidFunction> = {\n      k: openLinkControl,\n      b: handleBoldText,\n      u: handleUnderlineText,\n      i: handleItalicText,\n      m: handleMonospaceText,\n      s: handleStrikethroughText,\n      p: handleSpoilerText,\n    };\n\n    const handler = HANDLERS_BY_KEY[getKeyFromEvent(e)];\n\n    if (\n      e.altKey\n      || !(e.ctrlKey || e.metaKey)\n      || !handler\n    ) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    handler();\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      document.addEventListener('keydown', handleKeyDown);\n    }\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, handleKeyDown]);\n\n  const lang = useOldLang();\n\n  function handleContainerKeyDown(e: React.KeyboardEvent<HTMLDivElement>) {\n    if (e.key === 'Enter' && isLinkControlOpen) {\n      handleLinkUrlConfirm();\n      e.preventDefault();\n    }\n  }\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'TextFormatter',\n    transitionClassNames,\n    isLinkControlOpen && 'link-control-shown',\n  );\n\n  const linkUrlConfirmClassName = buildClassName(\n    'TextFormatter-link-url-confirm',\n    Boolean(linkUrl.length) && 'shown',\n  );\n\n  const style = anchorPosition\n    ? `left: ${anchorPosition.x}px; top: ${anchorPosition.y}px;--text-formatter-left: ${anchorPosition.x}px;`\n    : '';\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      style={style}\n      onKeyDown={handleContainerKeyDown}\n      // Prevents focus loss when clicking on the toolbar\n      onMouseDown={stopEvent}\n    >\n      <div className=\"TextFormatter-buttons\">\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Spoiler text\"\n          className={getFormatButtonClassName('spoiler')}\n          onClick={handleSpoilerText}\n        >\n          <Icon name=\"eye-crossed\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Bold text\"\n          className={getFormatButtonClassName('bold')}\n          onClick={handleBoldText}\n        >\n          <Icon name=\"bold\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Italic text\"\n          className={getFormatButtonClassName('italic')}\n          onClick={handleItalicText}\n        >\n          <Icon name=\"italic\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Underlined text\"\n          className={getFormatButtonClassName('underline')}\n          onClick={handleUnderlineText}\n        >\n          <Icon name=\"underlined\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Strikethrough text\"\n          className={getFormatButtonClassName('strikethrough')}\n          onClick={handleStrikethroughText}\n        >\n          <Icon name=\"strikethrough\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Monospace text\"\n          className={getFormatButtonClassName('monospace')}\n          onClick={handleMonospaceText}\n        >\n          <Icon name=\"monospace\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button color=\"translucent\" ariaLabel={lang('TextFormat.AddLinkTitle')} onClick={openLinkControl}>\n          <Icon name=\"link\" />\n        </Button>\n      </div>\n\n      <div className=\"TextFormatter-link-control\">\n        <div className=\"TextFormatter-buttons\">\n          <Button color=\"translucent\" ariaLabel={lang('Cancel')} onClick={closeLinkControl}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <div className=\"TextFormatter-divider\" />\n\n          <div\n            className={buildClassName('TextFormatter-link-url-input-wrapper', inputClassName)}\n          >\n            <input\n              ref={linkUrlInputRef}\n              className=\"TextFormatter-link-url-input\"\n              type=\"text\"\n              value={linkUrl}\n              placeholder=\"Enter URL...\"\n              autoComplete=\"off\"\n              inputMode=\"url\"\n              dir=\"auto\"\n              onChange={handleLinkUrlChange}\n              onScroll={updateInputStyles}\n            />\n          </div>\n\n          <div className={linkUrlConfirmClassName}>\n            <div className=\"TextFormatter-divider\" />\n            <Button\n              color=\"translucent\"\n              ariaLabel={lang('Save')}\n              className=\"color-primary\"\n              onClick={handleLinkUrlConfirm}\n            >\n              <Icon name=\"check\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(TextFormatter);\n","export default function getKeyFromEvent(e: KeyboardEvent) {\n  const key = e.key || e.code;\n\n  return key.startsWith('Key') ? key.slice(3).toLowerCase() : key;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/visibility/isFullyVisible';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport CustomEmojiButton from './CustomEmojiButton';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useLastCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  });\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const handleSelect = useLastCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  });\n\n  const handleClick = useLastCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  });\n\n  const handleCustomEmojiClick = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    shouldRemoveSelectionOnReset: true,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getWebDocumentHash } from '../../../../global/helpers';\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? getWebDocumentHash(thumbnail) : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult;\n  onClick: (result: ApiBotInlineResult | ApiBotInlineMediaResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, description,\n  } = inlineResult;\n\n  const url = 'url' in inlineResult ? inlineResult.url : undefined;\n  const webThumbnail = 'webThumbnail' in inlineResult ? inlineResult.webThumbnail : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiVideo } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useLastCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  });\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport { getPhotoMediaHash, getWebDocumentHash } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailBlobUrl = useMedia(getWebDocumentHash(webThumbnail));\n  const mediaBlobUrl = useMedia(photo && getPhotoMediaHash(photo, 'pictogram'));\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl || thumbnailBlobUrl);\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailBlobUrl} alt=\"\" draggable={false} />\n        <img\n          src={mediaBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      thumbUrl={mediaBlobUrl || thumbnail?.dataUri}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport MediaResult from './inlineResults/MediaResult';\nimport StickerResult from './inlineResults/StickerResult';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean,\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useLastCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  });\n\n  const handleOpenWebview = useLastCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n      isFromSwitchWebView: true,\n    });\n  });\n\n  const prevInlineBotResults = usePreviousDeprecated(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useLastCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  });\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = usersById[id];\n        const chat = chatsById[id];\n        const peer = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <Icon name=\"lock-badge\" className=\"send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              peer={peer}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {peer && <FullNameTitle peer={peer} noFake />}\n              <span className=\"subtitle\">\n                {user\n                  ? lang('VoipGroupPersonalAccount')\n                  : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerButton from '../common/StickerButton';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { throttle } from '../../util/schedulers';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiVideo } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf, selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport GifButton from '../common/GifButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n  currentMessageList?: MessageList;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  chatFullInfo,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat\n    && getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot, isSavedMessages).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (!currentMessageList) {\n        return;\n      }\n\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({\n            messageList: currentMessageList,\n            gif,\n            scheduledAt,\n            isSilent,\n          });\n        });\n      } else {\n        sendMessage({ messageList: currentMessageList, gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, currentMessageList, requestCalendar]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canPostInChat = Boolean(chat) && Boolean(threadId)\n      && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(GifSearch));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OAKzmAva\",\"withImage\":\"BQ6HUOqN\",\"imageContainer\":\"TmJvv2A6\",\"image\":\"U96CW2I7\",\"round\":\"yxjDeIct\",\"circle\":\"cdfiLmXo\",\"withStoryCircle\":\"BOfHPv20\",\"summary\":\"vXi2JQlj\",\"title\":\"bi3fL59p\",\"info\":\"GUK4ajPK\",\"meta\":\"YH6jeZIh\",\"metaWithIcon\":\"q1LnuIUn\",\"metaIcon\":\"PJZzyVLK\",\"date\":\"C7NpG5Y9\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { StatisticsMessageInteractionCounter, StatisticsStoryInteractionCounter } from '../../../api/types';\n\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\ninterface OwnProps {\n  postStatistic: StatisticsStoryInteractionCounter | StatisticsMessageInteractionCounter;\n}\n\nfunction StatisticsRecentPostMeta({ postStatistic }: OwnProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  return (\n    <div className={styles.meta}>\n      {postStatistic.reactionsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"heart-outline\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.reactionsCount)}\n        </span>\n      )}\n\n      {postStatistic.forwardsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"forward\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.forwardsCount)}\n        </span>\n      )}\n\n      {!postStatistic.forwardsCount && !postStatistic.reactionsCount\n        && oldLang('ChannelStats.SharesCount_ZeroValueHolder')}\n    </div>\n  );\n}\n\nexport default memo(StatisticsRecentPostMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsMessageInteractionCounter } from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageRoundVideo,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  postStatistic: StatisticsMessageInteractionCounter;\n  message: ApiMessage;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ postStatistic, message }) => {\n  const lang = useOldLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        Boolean(mediaBlobUrl || mediaThumbnail) && styles.withImage,\n      )}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: OldLangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span>\n      <img\n        src={blobUrl}\n        alt=\"\"\n        draggable={false}\n        className={buildClassName(styles.image, isRoundVideo && styles.round)}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiTypeStory,\n  StatisticsStoryInteractionCounter,\n} from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport { getStoryMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  story?: ApiTypeStory;\n  postStatistic: StatisticsStoryInteractionCounter;\n};\n\nfunction StatisticsRecentStory({ chat, story, postStatistic }: OwnProps) {\n  const lang = useOldLang();\n  const { toggleStoryStatistics } = getActions();\n  const isLoaded = story && 'content' in story;\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const mediaThumbnail = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  const handleClick = useLastCallback(() => {\n    toggleStoryStatistics({ storyId: postStatistic.storyId });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, styles.withImage)}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, chat, imgBlobUrl || mediaThumbnail)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {isLoaded && Boolean(story.date) && formatDateTimeToString(story.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n}\n\nfunction renderSummary(lang: OldLangFn, chat: ApiChat, blobUrl?: string) {\n  return (\n    <span>\n      {blobUrl ? (\n        <span className={styles.imageContainer}>\n          <img\n            src={blobUrl}\n            alt=\"\"\n            draggable={false}\n            className={buildClassName(styles.image, styles.circle, styles.withStoryCircle)}\n          />\n        </span>\n      ) : (\n        <Avatar\n          peer={chat}\n          size=\"small\"\n          className={styles.image}\n          withStorySolid\n          forceUnreadStorySolid\n        />\n      )}\n\n      {lang('Story')}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentStory);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"T1l_4J8z\",\"pie-slim-in\":\"EgyLOizu\",\"pieSlimIn\":\"EgyLOizu\",\"pie-slim-out\":\"TBiNdFb4\",\"pieSlimOut\":\"TBiNdFb4\",\"messages\":\"suY9dEIz\",\"publicForwards\":\"S1x1ovkC\",\"messages-title\":\"evQIkAqx\",\"messagesTitle\":\"evQIkAqx\",\"publicForwards-title\":\"WxL3i5PM\",\"publicForwardsTitle\":\"WxL3i5PM\",\"ready\":\"aUrozL5_\",\"graph\":\"QQHwjG88\",\"hidden\":\"QGctP1Nk\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChannelStatistics,\n  ApiChat,\n  ApiGroupStatistics,\n  ApiMessage,\n  ApiTypeStory,\n} from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStories,\n  selectStatistics,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\nimport StatisticsRecentStory from './StatisticsRecentStory';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n  reactionsByEmotionGraph: 'ChannelStats.Graph.Reactions',\n  storyInteractionsGraph: 'ChannelStats.Graph.Stories',\n  storyReactionsByEmotionGraph: 'ChannelStats.Graph.StoriesReactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  chat?: ApiChat;\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n  messagesById: Record<string, ApiMessage>;\n  storiesById?: Record<string, ApiTypeStory>;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  statistics,\n  dcId,\n  isGroup,\n  messagesById,\n  storiesById,\n}) => {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll', isReady && styles.ready)}>\n      {statistics && (\n        <StatisticsOverview\n          statistics={statistics}\n          type={isGroup ? 'group' : 'channel'}\n          title={lang('StatisticOverview')}\n        />\n      )}\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics)?.recentPosts?.length) && (\n        <div className={styles.messages}>\n          <h2 className={styles.messagesTitle}>{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentPosts.map((postStatistic) => {\n            if ('msgId' in postStatistic) {\n              const message = messagesById[postStatistic.msgId];\n              if (!message || !('content' in message)) return undefined;\n\n              return (\n                <StatisticsRecentMessage\n                  key={`statistic_message_${postStatistic.msgId}`}\n                  message={message}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            if ('storyId' in postStatistic && chat) {\n              const story = storiesById?.[postStatistic.storyId];\n\n              return (\n                <StatisticsRecentStory\n                  key={`statistic_story_${postStatistic.storyId}`}\n                  chat={chat}\n                  story={story}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            return undefined;\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n    const messagesById = selectChatMessages(global, chatId);\n    const storiesById = selectPeerStories(global, chatId)?.byId;\n\n    return {\n      statistics, dcId, isGroup, chat, messagesById, storiesById,\n    };\n  },\n)(Statistics));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oXLpD4Y4\",\"title\":\"paQ2VBe_\",\"views\":\"WvFuOAIf\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsMessagePublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useOldLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => (data.chat ? getMainUsername(data.chat) : undefined), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={data.chat} />\n\n      <div>\n        <div className={styles.title}>\n          {data.title}\n        </div>\n\n        <div className={styles.views}>\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsMessagePublicForward);\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessagePublicForward,\n  ApiPostStatistics,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { STATISTICS_PUBLIC_FORWARDS_LIMIT } from '../../../config';\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nfunction Statistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadMessagePublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards && messageId) {\n      loadMessagePublicForwards({ chatId, messageId });\n    }\n  });\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <StatisticsOverview statistics={statistics} type=\"message\" title={lang('StatisticOverview')} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName(styles.graph, !loadedCharts.current.includes(graph) && styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            preloadBackwards={STATISTICS_PUBLIC_FORWARDS_LIMIT}\n            noFastList\n          >\n            {(statistics.publicForwardsData as ApiMessagePublicForward[]).map((item) => (\n              <StatisticsMessagePublicForward key={item.messageId} data={item} />\n            ))}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiStoryPublicForward, ApiUser,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiStoryPublicForward;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nfunction StatisticsMessagePublicForward({ data, chatsById, usersById }: OwnProps) {\n  const lang = useOldLang();\n  const { openChat } = getActions();\n  const user = usersById[data.peerId];\n  const chat = chatsById[data.peerId];\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: user.id });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={user || chat} withStorySolid forceUnreadStorySolid />\n\n      <div>\n        <div className={styles.title}>\n          {user ? getUserFullName(user) : getChatTitle(lang, chat)}\n        </div>\n\n        <div className={styles.views}>\n          {data.viewsCount ? lang('ChannelStats.ViewsCount', data.viewsCount, 'i') : lang('NoViews')}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(StatisticsMessagePublicForward);\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiPostStatistics,\n  ApiUser,\n  StatisticsGraph,\n} from '../../../api/types';\n\nimport { STATISTICS_PUBLIC_FORWARDS_LIMIT } from '../../../config';\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsStoryPublicForward from './StatisticsStoryPublicForward';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.StoryInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  storyId?: number;\n  dcId?: number;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n};\n\nfunction StoryStatistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  storyId,\n  chatsById,\n  usersById,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStoryStatistics, loadStoryPublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (storyId) {\n      loadStoryStatistics({ chatId, storyId });\n    }\n  }, [chatId, storyId]);\n\n  useEffect(() => {\n    if (!isActive || storyId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, storyId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, storyId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!storyId) return;\n\n    loadStoryPublicForwards({ chatId, storyId });\n  });\n\n  if (!isReady || !statistics || !storyId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <StatisticsOverview statistics={statistics} type=\"story\" title={lang('StatisticOverview')} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName(styles.graph, !loadedCharts.current.includes(graph) && styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            preloadBackwards={STATISTICS_PUBLIC_FORWARDS_LIMIT}\n            noFastList\n          >\n            {statistics.publicForwardsData!.map((item) => {\n              if ('messageId' in item) {\n                return (\n                  <StatisticsMessagePublicForward key={`message_${item.messageId}`} data={item} />\n                );\n              }\n\n              return (\n                <StatisticsStoryPublicForward\n                  key={`story_${item.storyId}`}\n                  data={item}\n                  chatsById={chatsById}\n                  usersById={usersById}\n                />\n              );\n            })}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentStory;\n    const storyId = tabState.statistics.currentStoryId;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      statistics, dcId, storyId, usersById, chatsById,\n    };\n  },\n)(StoryStatistics));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport ShowMoreButton from '../ui/ShowMoreButton';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePreviousDeprecated<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useOldLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n\n              onClick={() => handleMemberClick(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo\n                  avatarSize=\"tiny\"\n                  userId={id}\n                  forceShowSelf\n                  noStatusOrTyping\n                />\n              ) : (\n                <GroupChatInfo\n                  avatarSize=\"tiny\"\n                  chatId={id}\n                  noStatusOrTyping\n                />\n              )}\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: text.text,\n            entities: text.entities,\n          })}\n        </span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}\n          %\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiPoll } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectPollFromMessage, selectTabState,\n} from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport PollAnswerResults from './PollAnswerResults';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  poll?: ApiPoll;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  message,\n  poll,\n  onClose,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !poll || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = poll;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n        })}\n      </h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${poll.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n    const poll = message && selectPollFromMessage(global, message);\n\n    return {\n      chat,\n      message,\n      poll,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xrnUE4e6\",\"content\":\"z7kF7tij\",\"section\":\"T6wFpdQO\",\"general\":\"YftUWqqw\",\"top\":\"CWsWIKQ1\",\"bottom\":\"KBl0ycLl\",\"iconWrapper\":\"iJ1U9kDD\",\"icon\":\"Rk6PT_yc\",\"clickable\":\"K1CTKtBS\",\"heading\":\"qlo3vSEw\",\"icon-picker\":\"r06zwL42\",\"iconPicker\":\"r06zwL42\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getTopicColors } from '../../util/forumColors';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            pickerListClassName=\"fab-padding-bottom\"\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport {\n  selectChat, selectIsCurrentUserPremium, selectTabState, selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Loading from '../ui/Loading';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top, isGeneral && styles.general)}>\n              <span className={styles.heading}>{lang(isGeneral ? 'CreateGeneralTopicTitle' : 'CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  pickerListClassName=\"fab-padding-bottom\"\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.chatId && editTopicPanel?.topicId\n      ? selectTopic(global, editTopicPanel.chatId, editTopicPanel.topicId) : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotInfo, ApiUser } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  getChatAvatarHash, getMainUsername, getUserFirstOrLastName,\n} from '../../../global/helpers';\nimport {\n  selectBot,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  userId?: string;\n  user?: ApiUser;\n  chatBot?: ApiBotInfo;\n  currentBio?: string;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  maxBioLength: number;\n};\n\nconst ERROR_NAME_MISSING = 'Please provide name';\n\nconst ManageBot: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  onClose,\n  currentBio,\n  isActive,\n  maxBioLength,\n}) => {\n  const {\n    setBotInfo,\n    uploadProfilePhoto,\n    uploadContactProfilePhoto,\n    startBotFatherConversation,\n  } = getActions();\n\n  const [isFieldTouched, markFieldTouched, unmarkProfileTouched] = useFlag(false);\n  const [isAvatarTouched, markAvatarTouched, unmarkAvatarTouched] = useFlag(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useOldLang();\n\n  const username = useMemo(() => (user ? getMainUsername(user) : undefined), [user]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentName = user ? getUserFirstOrLastName(user) : '';\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [name, setName] = useState(currentName || '');\n  const [bio, setBio] = useState(currentBio || '');\n\n  const currentAvatarHash = user && getChatAvatarHash(user);\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  useEffect(() => {\n    unmarkProfileTouched();\n    unmarkAvatarTouched();\n  }, [userId]);\n\n  useEffect(() => {\n    setName(currentName || '');\n    setBio(currentBio || '');\n  }, [currentName, currentBio, user]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkProfileTouched();\n      unmarkAvatarTouched();\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleNameChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n    markFieldTouched();\n\n    if (error === ERROR_NAME_MISSING) {\n      setError(undefined);\n    }\n  });\n\n  const handleBioChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    markFieldTouched();\n  });\n\n  const handlePhotoChange = useLastCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n    markAvatarTouched();\n  });\n\n  const handleProfileSave = useLastCallback(() => {\n    const trimmedName = name.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedName.length) {\n      setError(ERROR_NAME_MISSING);\n      return;\n    }\n\n    setBotInfo({\n      ...(isFieldTouched && {\n        bot: user,\n        name: trimmedName,\n        description: trimmedBio,\n      }),\n    });\n\n    if (photo) {\n      uploadProfilePhoto({\n        file: photo,\n        ...(isAvatarTouched && { bot: user }),\n      });\n    }\n  });\n\n  const handleChangeEditIntro = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-intro` });\n  });\n\n  const handleChangeEditCommands = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-commands` });\n  });\n\n  const handleChangeSettings = useLastCallback(() => {\n    startBotFatherConversation({ param: username! });\n  });\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSelectAvatar = useLastCallback((file: File) => {\n    markAvatarTouched();\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  });\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title={lang('ChatSetPhotoOrVideo')}\n            disabled={isLoading}\n          />\n          <InputText\n            id=\"user-name\"\n            label={lang('PaymentCheckoutName')}\n            onChange={handleNameChange}\n            value={name}\n            error={error === ERROR_NAME_MISSING ? error : undefined}\n            teactExperimentControlled\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('DescriptionPlaceholder')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n        </div>\n        <div className=\"section\">\n          <div className=\"dialog-buttons\">\n            <ListItem icon=\"bot-commands-filled\" ripple onClick={handleChangeEditIntro}>\n              <span>{lang('BotEditIntro')}</span>\n            </ListItem>\n            <ListItem icon=\"bot-command\" ripple onClick={handleChangeEditCommands}>\n              <span>{lang('BotEditCommands')}</span>\n            </ListItem>\n            <ListItem icon=\"bots\" ripple onClick={handleChangeSettings}>\n              <span>{lang('BotChangeSettings')}</span>\n            </ListItem>\n            <div className=\"section-info section-info_push\">\n              {renderText(lang('BotManageInfo'), ['links'])}\n            </div>\n          </div>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isFieldTouched || isAvatarTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectBot(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    return {\n      userId,\n      user,\n      progress,\n      currentBio: userFullInfo?.bio,\n      maxBioLength,\n    };\n  },\n)(ManageBot));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsChatRestricted, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  availableReactions?: ApiAvailableReaction[];\n  hasAutoTranslation?: boolean;\n  canToggleAutoTranslation?: boolean;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n  hasAutoTranslation,\n  canToggleAutoTranslation,\n}) => {\n  const {\n    updateChat,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleAutoTranslation,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useOldLang();\n\n  const hasAutoTranslationAvailable = chat && isChatChannel(chat);\n\n  const handleAutoTranslationChange = useLastCallback(() => {\n    toggleAutoTranslation({ chatId, isEnabled: !hasAutoTranslation });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!canInvite) return;\n    loadExportedChatInvites({ chatId });\n    loadExportedChatInvites({ chatId, isRevoked: true });\n    loadChatJoinRequests({ chatId });\n  }, [chatId, canInvite]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateChannel = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickSubscribers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  });\n\n  const handleRemovedUsersClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  });\n\n  const handleDeleteChannel = useLastCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const isRestricted = selectIsChatRestricted(getGlobal(), chatId);\n  if (isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"channel-title\"\n              label={lang('EnterChannelName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"channel-about\"\n              label={lang('DescriptionPlaceholder')}\n              onChange={handleAboutChange}\n              value={about}\n              maxLength={CHANNEL_MAX_DESCRIPTION}\n              maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          {hasAutoTranslationAvailable && (\n            <ListItem\n              icon=\"language\"\n              narrow\n              ripple\n              disabled={!canToggleAutoTranslation}\n              onClick={handleAutoTranslationChange}\n            >\n              <span>{lang('AutomaticTranslation')}</span>\n              <Switcher\n                id=\"auto-translation\"\n                label={lang('AutomaticTranslation')}\n                checked={hasAutoTranslation}\n              />\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{formatInteger(chat.membersCount!)}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const { invites } = management.byChatId[chatId] || {};\n    const minLevelToToggleAutoTranslation = global.appConfig?.channelAutoTranslationLevelMin;\n    const hasAutoTranslation = chat?.hasAutoTranslation;\n    const chatBoostLevel = chat?.level;\n    const canToggleAutoTranslation = chatBoostLevel && minLevelToToggleAutoTranslation\n      ? chatBoostLevel >= minLevelToToggleAutoTranslation : false;\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      availableReactions: global.reactions.availableReactions,\n      hasAutoTranslation,\n      canToggleAutoTranslation,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageChannel));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  isChannel?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n}) => {\n  const { toggleSignatures } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const areSignaturesEnabled = Boolean(chat?.areSignaturesShown);\n  const areProfilesEnabled = Boolean(chat?.areProfilesShown);\n\n  const canAddNewAdmins = Boolean(chat?.isCreator || (chat && getHasAdminRight(chat, 'addAdmins')));\n  const canToggleSignatures = isChannel && getHasAdminRight(chat!, 'postMessages');\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    const [owner, admins] = partition(Object.values(adminMembersById), (member) => member.isOwner);\n\n    return [...owner, ...admins];\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useLastCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  });\n\n  const handleToggleSignatures = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled,\n      areSignaturesEnabled: !areSignaturesEnabled,\n    });\n  });\n\n  const handleToggleProfiles = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled: !areProfilesEnabled,\n      areSignaturesEnabled,\n    });\n  });\n\n  const handleAddAdminClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  });\n\n  const getMemberStatus = useLastCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\" dir=\"auto\">\n            {lang(isChannel\n              ? 'Channel.Management.AddModeratorHelp'\n              : 'Group.Management.AddModeratorHelp')}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <Icon name=\"add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n\n        {canToggleSignatures && (\n          <div className=\"section\">\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={areSignaturesEnabled}\n                label={lang('ChannelSignMessages')}\n                onChange={handleToggleSignatures}\n              />\n            </div>\n            {areSignaturesEnabled && (\n              <>\n                <div className=\"ListItem narrow\">\n                  <Checkbox\n                    checked={areProfilesEnabled}\n                    label={lang('ChannelSignMessagesWithProfile')}\n                    onChange={handleToggleProfiles}\n                  />\n                </div>\n                <p className=\"section-info section-info_push\">\n                  {lang('ChannelSignProfilesInfo')}\n                </p>\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: chat && isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo,\n  selectManagement, selectTabState,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Spinner from '../../ui/Spinner';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n    resetManagementError,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n\n    if (error) {\n      resetManagementError({\n        chatId: chat.id,\n      });\n    }\n  }, [chat.id, error]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '', shouldDisableUsernames: true });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useOldLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 0;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <LinkField link={privateInviteLink} className=\"invite-link\" />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <div className=\"settings-input\">\n              <UsernameInput\n                asLink\n                currentUsername={currentUsername}\n                isLoading={isLoading}\n                isUsernameAvailable={isUsernameAvailable}\n                checkedUsername={checkedUsername}\n                onChange={handleUsernameChange}\n              />\n            </div>\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId);\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId) && selectManagement(global, chatId));\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    return filterPeersByQuery({ ids: availableMemberIds, query: search, type: 'user' });\n  }, [chatMembers, currentUserId, search]);\n\n  const handleLoadMore = useLastCallback(() => {\n    loadMoreMembers({ chatId: chat.id });\n  });\n\n  const handleRemoveUser = useLastCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  });\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={handleLoadMore}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useOldLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember): MenuItemContextAction[] | undefined => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <Icon name=\"add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Avatar from '../../common/Avatar';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useOldLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (isChatPublic(linkedGroup)) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat?.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line @stylistic/max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat?.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        {linkedChat && (\n          <ListItem\n            className=\"chat-item-clickable\"\n            inactive\n          >\n            <GroupChatInfo chatId={linkedChat.id} />\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat?.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  const handleNewGroupClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.NewDiscussionGroup);\n  });\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            className=\"create-item\"\n            withPrimaryColor\n            teactOrderKey={0}\n            onClick={handleNewGroupClick}\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={isJoinToSend}\n                onCheck={handleJoinToSendCheck}\n                label={lang('ChannelSettingsJoinToSend')}\n              />\n            </div>\n            {isJoinToSend && (\n              <div className=\"ListItem narrow\">\n                <Checkbox\n                  checked={isJoinRequest}\n                  onCheck={handleJoinRequestCheck}\n                  label={lang('ChannelSettingsJoinRequest')}\n                />\n              </div>\n            )}\n            <p className=\"section-info section-info_push\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId ? selectChat(global, linkedChatId) : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsChatRestricted, selectTabState } from '../../../global/selectors';\nimport { debounce } from '../../../util/schedulers';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => isChatPublic(chat), [chat]);\n  const lang = useOldLang();\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, canInvite]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickPermissions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateGroup = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickMembers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  });\n\n  const handleTogglePreHistory = useLastCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  });\n\n  const handleForumToggle = useLastCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  });\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useLastCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  const isRestricted = selectIsChatRestricted(getGlobal(), chatId);\n  if (isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"group-title\"\n              label={lang('GroupName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === GROUP_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"group-about\"\n              label={lang('DescriptionPlaceholder')}\n              maxLength={GROUP_MAX_DESCRIPTION}\n              maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n              onChange={handleAboutChange}\n              value={about}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}\n              /\n              {TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && !hasLinkedChannel && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                subLabel={\n                  chatFullInfo.isPreHistoryHidden ? lang('ChatHistoryHiddenInfo2') : lang('ChatHistoryVisibleInfo')\n                }\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n    const canChangeInfo = chat.isCreator || getHasAdminRight(chat, 'changeInfo');\n    const canBanUsers = chat.isCreator || getHasAdminRight(chat, 'banUsers');\n    const canInvite = chat.isCreator || getHasAdminRight(chat, 'inviteUsers');\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo,\n      canBanUsers,\n      canInvite,\n      exportedInvites: invites,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.reactions.availableReactions,\n      canEditForum,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isActive,\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"postStories\"\n              checked={Boolean(permissions.postStories)}\n              label={lang('EditAdminPostStories')}\n              blocking\n              disabled={getControlIsDisabled('postStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"editStories\"\n              checked={Boolean(permissions.editStories)}\n              label={lang('EditAdminEditStories')}\n              blocking\n              disabled={getControlIsDisabled('editStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteStories\"\n              checked={Boolean(permissions.deleteStories)}\n              label={lang('EditAdminDeleteStories')}\n              blocking\n              disabled={getControlIsDisabled('deleteStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens, NewChatMembersProgress } from '../../../types';\n\nimport {\n  getHasAdminRight, isChatBasicGroup,\n  isChatChannel, isUserBot, isUserRightBanned, sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport usePeerStoriesPolling from '../../../hooks/polling/usePeerStoriesPolling';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Switcher from '../../ui/Switcher';\nimport DeleteMemberModal from '../DeleteMemberModal';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  canAddMembers?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  canAddMembers,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement,\n    toggleParticipantsHidden, setNewChatMembersDialogState, toggleManagement,\n  } = getActions();\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  usePeerStoriesPolling(memberIds);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  });\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  const handleToggleParticipantsHidden = useLastCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    toggleManagement();\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"panel-content custom-scroll\">\n        {canHideParticipants && !isChannel && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                  withPortalForMenu\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf withStory />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig?.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n      && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const canAddMembers = chat && ((getHasAdminRight(chat, 'inviteUsers')\n      || (!isChannel && !isUserRightBanned(chat, 'inviteUsers')))\n    || chat.isCreator\n    );\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      canAddMembers,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  progress?: ManagementProgress;\n  currentUserId?: string;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n  arePaidMessagesAvailable?: boolean;\n  groupPeersPaidStars: number;\n  canChargeForMessages?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  progress,\n  currentUserId,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n  arePaidMessagesAvailable,\n  canChargeForMessages,\n  groupPeersPaidStars,\n}) => {\n  const { updateChatDefaultBannedRights, updatePaidMessagesPrice } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  const [isPriceForMessagesChanged, markPriceForMessagesChanged, unmarkPriceForMessagesChanged] = useFlag();\n  const [isPriceForMessagesOpen, setIsPriceForMessagesOpen] = useState(canChargeForMessages);\n  const [chargeForMessages, setChargeForMessages] = useState<number>(groupPeersPaidStars);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkPriceForMessagesChanged();\n    }\n  }, [progress]);\n\n  const handleSavePermissions = useLastCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  });\n\n  const handleUpdatePaidMessagesPrice = useLastCallback(() => {\n    if (!chat) return;\n    updatePaidMessagesPrice({\n      chatId: chat?.id,\n      paidMessagesStars: isPriceForMessagesOpen ? chargeForMessages : 0,\n    });\n  });\n\n  const handleUpdatePermissions = useLastCallback(() => {\n    if (isPriceForMessagesChanged) {\n      handleUpdatePaidMessagesPrice();\n    }\n    if (havePermissionChanged) {\n      handleSavePermissions();\n    }\n  });\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = oldLang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, oldLang]);\n\n  const handleChargeStarsForMessages = useLastCallback(() => {\n    setIsPriceForMessagesOpen(!isPriceForMessagesOpen);\n    markPriceForMessagesChanged();\n  });\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    setChargeForMessages(value);\n    markPriceForMessagesChanged();\n  });\n\n  const arePermissionsChanged = isPriceForMessagesChanged || havePermissionChanged;\n  const arePermissionsLoading = progress === ManagementProgress.InProgress || isLoading;\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            dropdownClassName=\"DropdownListTrap\"\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n          />\n        </div>\n\n        {arePaidMessagesAvailable && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem onClick={handleChargeStarsForMessages}>\n              <span>{lang('GroupMessagesChargePrice')}</span>\n              <Switcher\n                id=\"charge_for_messages\"\n                label={lang('GroupMessagesChargePrice')}\n                checked={isPriceForMessagesOpen}\n              />\n            </ListItem>\n            <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('RightsChargeStarsAbout')}\n            </p>\n          </div>\n        )}\n\n        {isPriceForMessagesOpen && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <PaidMessagePrice\n              canChangeChargeForMessages\n              isGroupChat\n              chargeForMessages={chargeForMessages}\n              onChange={handleChargeForMessagesChange}\n            />\n          </div>\n        )}\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={arePermissionsChanged}\n        onClick={handleUpdatePermissions}\n        ariaLabel={lang('Save')}\n        disabled={arePermissionsLoading}\n      >\n        {arePermissionsLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { progress } = selectTabState(global).management;\n\n    const paidMessagesStars = chat?.paidMessagesStars;\n    const configStarsPaidMessageCommissionPermille = global.appConfig?.starsPaidMessageCommissionPermille;\n\n    return {\n      chat,\n      progress,\n      currentUserId: global.currentUserId,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n      arePaidMessagesAvailable: Boolean(fullInfo?.arePaidMessagesAvailable && configStarsPaidMessageCommissionPermille),\n      canChargeForMessages: Boolean(paidMessagesStars && configStarsPaidMessageCommissionPermille),\n      groupPeersPaidStars: paidMessagesStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{oldLang('UserRestrictionsCanDo')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            dropdownClassName=\"DropdownListTrap\"\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n            getControlIsDisabled={getControlIsDisabled}\n          />\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {oldLang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={oldLang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text={lang('GroupManagementBanUserConfirm')}\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { isChatChannel, sortUserIds } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"section-help hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-heading\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)}\n              {' '}\n              {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"section-help hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-heading\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"section-help hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId] || {};\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useOldLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"section-help\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"section-help\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"panel-content custom-scroll\">\n        {!invite && (\n          <p className=\"section-help\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <LinkField title={invite.title} link={invite.link} className=\"invite-link\" />\n              {Boolean(expireDate) && (\n                <p className=\"section-help\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p className=\"section-heading\">{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId] || {};\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport NothingFound from '../../common/NothingFound';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(forceUpdate, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.hasUsername ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.hasUsername, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: oldLang('LinkCopied'),\n    });\n  }, [oldLang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = oldLang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = oldLang('PeopleJoined', usage);\n    } else {\n      text = oldLang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${oldLang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${oldLang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${oldLang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = expireDate - getServerTime();\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += oldLang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += oldLang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${oldLang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions: MenuItemContextAction[] = [];\n    actions.push({\n      title: oldLang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: oldLang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: oldLang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: oldLang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"section-help\">{isChannel ? oldLang('PrimaryLinkHelpChannel') : oldLang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <LinkField\n              className=\"settings-input\"\n              link={primaryInviteLink}\n              withShare\n              onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n              title={chat?.usernames ? oldLang('PublicLink') : oldLang('lng_create_permanent_link_title')}\n            />\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <ListItem icon=\"add\" withPrimaryColor key=\"create\" className=\"create-item\" onClick={handleCreateNewClick}>\n            {oldLang('CreateNewLink')}\n          </ListItem>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"section-help hint\" key=\"links-hint\">{oldLang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"section-help\" key=\"title\">{oldLang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{oldLang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={oldLang('DeleteAllRevokedLinks')}\n        text={oldLang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={oldLang('RevokeLink')}\n        text={oldLang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={oldLang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={oldLang('DeleteLink')}\n        text={oldLang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId] || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useOldLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            peer={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport JoinRequest from './JoinRequest';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"section-help\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport {\n  MAX_UNIQUE_REACTIONS,\n} from '../../../config';\nimport { isChatChannel, isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions: number;\n  reactionsLimit?: number;\n  isChannel?: boolean;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n  maxUniqueReactions,\n  reactionsLimit,\n  isChannel,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useOldLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  const [localReactionsLimit, setLocalReactionsLimit] = useState(reactionsLimit);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n      reactionsLimit: localReactionsLimit,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions, localReactionsLimit]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n    setLocalReactionsLimit(reactionsLimit);\n  }, [enabledReactions, reactionsLimit]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  useEffect(() => {\n    if (localReactionsLimit !== undefined && localReactionsLimit !== reactionsLimit) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some') {\n      const isReactionsDisabled = enabledReactions?.type !== 'all' && enabledReactions?.type !== 'some';\n\n      if (isReactionsDisabled && localEnabledReactions.allowed.length === 0) {\n        setIsTouched(false);\n        return;\n      }\n    }\n\n    if (localEnabledReactions?.type !== enabledReactions?.type) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some' && enabledReactions?.type === 'some') {\n      const localAllowedReactions = localEnabledReactions.allowed;\n      const enabledAllowedReactions = enabledReactions?.allowed;\n\n      if (localAllowedReactions.length !== enabledAllowedReactions.length\n        || localAllowedReactions.reverse().some(\n          (localReaction) => !enabledAllowedReactions.find(\n            (enabledReaction) => isSameReaction(localReaction, enabledReaction),\n          ),\n        )) {\n        setIsTouched(true);\n        return;\n      }\n    }\n\n    setIsTouched(false);\n  }, [\n    localReactionsLimit,\n    reactionsLimit,\n    localEnabledReactions,\n    enabledReactions,\n  ]);\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n      setLocalReactionsLimit(reactionsLimit);\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n      setLocalReactionsLimit(reactionsLimit);\n    } else {\n      setLocalEnabledReactions(undefined);\n      setLocalReactionsLimit(undefined);\n    }\n  }, [enabledReactions, reactionsLimit]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  const handleReactionsLimitChange = useCallback((value: number) => {\n    setLocalReactionsLimit(value);\n  }, []);\n\n  const renderReactionsMaxCountValue = useCallback((value: number) => {\n    return lang('PeerInfo.AllowedReactions.MaxCountValue', value);\n  }, [lang]);\n\n  const shouldShowReactionsLimit = isChannel\n    && (localEnabledReactions?.type === 'all' || localEnabledReactions?.type === 'some');\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        {Boolean(localReactionsLimit && shouldShowReactionsLimit) && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('MaximumReactionsHeader')}\n            </h3>\n            <RangeSlider\n              min={1}\n              max={maxUniqueReactions}\n              value={localReactionsLimit!}\n              onChange={handleReactionsLimitChange}\n              renderValue={renderReactionsMaxCountValue}\n              isCenteredLayout\n            />\n            <p className=\"section-info section-info_push\">\n              {lang('ChannelReactions.MaxCount.Info')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section section-with-fab\">\n            <h3 className=\"section-heading\">\n              {lang('OnlyAllowThisReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  withIcon\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { maxUniqueReactions = MAX_UNIQUE_REACTIONS } = global.appConfig || {};\n\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const reactionsLimit = chatFullInfo?.reactionsLimit || maxUniqueReactions;\n    const isChannel = isChatChannel(chat);\n\n    return {\n      enabledReactions: chatFullInfo?.enabledReactions,\n      availableReactions: global.reactions.availableReactions,\n      chat,\n      maxUniqueReactions,\n      reactionsLimit,\n      isChannel,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageReactions));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { isUserBot } from '../../../global/helpers';\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            noStatusOrTyping\n            noEmojiStatus\n            withFullInfo\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"user-first-name\"\n              label={lang('UserInfo.FirstNamePlaceholder')}\n              onChange={handleFirstNameChange}\n              value={firstName}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              id=\"user-last-name\"\n              label={lang('UserInfo.LastNamePlaceholder')}\n              onChange={handleLastNameChange}\n              value={lastName}\n            />\n          </div>\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    peer={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"section-help\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import type { FC } from '../../../lib/teact/teact.ts';\nimport type React from '../../../lib/teact/teact.ts';\nimport { useState } from '../../../lib/teact/teact.ts';\nimport { memo } from '../../../lib/teact/teact.ts';\n\nimport type { ApiChat } from '../../../api/types/index.ts';\nimport type { ManagementScreens } from '../../../types/index.ts';\nimport { ChatCreationProgress } from '../../../types/index.ts';\n\nimport { getActions, withGlobal } from '../../../global/index.ts';\nimport { selectChat, selectTabState } from '../../../global/selectors/index.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack.ts';\nimport useLang from '../../../hooks/useLang.ts';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\n\nimport Icon from '../../common/icons/Icon.tsx';\nimport AvatarEditable from '../../ui/AvatarEditable.tsx';\nimport FloatingActionButton from '../../ui/FloatingActionButton.tsx';\nimport InputText from '../../ui/InputText.tsx';\nimport Spinner from '../../ui/Spinner.tsx';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\nconst NewDiscussionGroup: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  creationProgress,\n  creationError,\n}) => {\n  const { createChannel } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const [title, setTitle] = useState(lang('NewDiscussionChatTitle', { name: chat?.title }));\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.trimStart();\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  });\n\n  const renderedError = (creationError && lang('NewChatTitleEmptyError')) || (\n    error !== lang('NewChatTitleEmptyError') && error !== lang('NewChannelTitleEmptyError')\n      ? error\n      : undefined\n  );\n\n  const handleCreateGroup = useLastCallback(() => {\n    if (!title.length) {\n      setError(lang('NewChatTitleEmptyError'));\n      return;\n    }\n    if (!chat) return;\n\n    createChannel({\n      discussionChannelId: chat.id,\n      title,\n      photo,\n      isSuperGroup: true,\n    });\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"NewChat\">\n          <div className=\"NewChat-inner step-2\">\n            <AvatarEditable\n              onChange={setPhoto}\n              title={lang('AddPhoto')}\n            />\n            <InputText\n              value={title}\n              onChange={handleTitleChange}\n              label={lang('GroupName')}\n              error={error === lang('NewChatTitleEmptyError')\n                || error === lang('NewChannelTitleEmptyError') ? error : undefined}\n            />\n\n            {renderedError && (\n              <p className=\"error\">{renderedError}</p>\n            )}\n          </div>\n\n          <FloatingActionButton\n            isShown={title.length !== 0}\n            onClick={handleCreateGroup}\n            disabled={isLoading}\n            ariaLabel={lang('DiscussionCreateGroup')}\n          >\n            {isLoading ? (\n              <Spinner color=\"white\" />\n            ) : (\n              <Icon name=\"arrow-right\" />\n            )}\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewDiscussionGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageBot from './ManageBot';\nimport ManageChannel from './ManageChannel';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvite from './ManageInvite';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageInvites from './ManageInvites';\nimport ManageJoinRequests from './ManageJoinRequests';\nimport ManageReactions from './ManageReactions';\nimport ManageUser from './ManageUser';\nimport NewDiscussionGroup from './NewDiscussionGroup.tsx';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'bot':\n          return (\n            <ManageBot\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.NewDiscussionGroup:\n      return (\n        <NewDiscussionGroup\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType] || '';\n}\n","import type { RegularLangFnParameters } from '../../util/localization';\nimport type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Partial<Record<string, RegularLangFnParameters>>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormState, FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"maC_9u6e\",\"description\":\"zQ6lEVJ2\",\"checkout-picture\":\"JgWvLdK2\",\"checkoutPicture\":\"JgWvLdK2\",\"text\":\"T2pYH395\",\"checkout-title\":\"HadolzeF\",\"checkoutTitle\":\"HadolzeF\",\"checkout-description\":\"oZW7mUNP\",\"checkoutDescription\":\"oZW7mUNP\",\"price-info\":\"P618Q3yr\",\"priceInfo\":\"P618Q3yr\",\"price-info-item\":\"XNNG_ajy\",\"priceInfoItem\":\"XNNG_ajy\",\"price-info-item-main\":\"D9gYNLVk\",\"priceInfoItemMain\":\"D9gYNLVk\",\"price-info-item-title\":\"NtY5Aah7\",\"priceInfoItemTitle\":\"NtY5Aah7\",\"tipsList\":\"WHO341eB\",\"tipsItem\":\"ksLlzBxw\",\"tipsItem_active\":\"J4yem62L\",\"tipsItemActive\":\"J4yem62L\",\"invoice-info\":\"U2IBOLP1\",\"invoiceInfo\":\"U2IBOLP1\",\"provider\":\"kqWcdro1\",\"stripe\":\"xKztZrna\",\"smartglocal\":\"X_Ge1o4u\",\"checkout-info-item-info-title\":\"ysWuPklS\",\"checkoutInfoItemInfoTitle\":\"ysWuPklS\",\"checkout-info-item-info-data\":\"MpC_P8_c\",\"checkoutInfoItemInfoData\":\"MpC_P8_c\",\"tos-checkbox\":\"OrRb0xG7\",\"tosCheckbox\":\"OrRb0xG7\",\"list\":\"l_wfiFG0\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type {\n  ApiInvoice,\n  ApiLabeledPrice,\n  ApiPaymentCredentials,\n  ApiWebDocument,\n} from '../../api/types';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { IconName } from '../../types/icons';\nimport type { LangFn } from '../../util/localization';\nimport { PaymentStep } from '../../types';\n\nimport { getWebDocumentHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport SafeLink from '../common/SafeLink';\nimport Checkbox from '../ui/Checkbox';\nimport ListItem from '../ui/ListItem';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  title: string;\n  description: string;\n  photo?: ApiWebDocument;\n  invoice: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: ApiLabeledPrice[];\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  title,\n  description,\n  photo,\n  invoice,\n  shippingPrices,\n  checkoutInfo,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    termsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const ref = useMediaTransition<HTMLImageElement>(photoUrl);\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(lang, tipAmount!, invoice.currency)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(lang, tip, invoice.currency, { shouldOmitFractions: true })}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = oldLang('PaymentCheckoutAcceptRecurrent', botName);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, oldLang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && (\n          <img\n            ref={ref}\n            className={styles.checkoutPicture}\n            src={photoUrl}\n            draggable={false}\n            width={photo!.dimensions?.width}\n            height={photo!.dimensions?.height}\n            alt=\"\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {description && (\n            <div className={styles.checkoutDescription}>\n              {renderText(description, ['br', 'links', 'emoji'])}\n            </div>\n          )}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {invoice.prices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang, oldLang('Checkout.TotalAmount'), totalPrice, invoice.currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {!isPaymentFormUrl && renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: oldLang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: oldLang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || (!isInteractive && shippingAddress)) && renderCheckoutItem({\n          title: shippingAddress,\n          label: oldLang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: oldLang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: oldLang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || (!isInteractive && shippingMethod)) && renderCheckoutItem({\n          title: shippingMethod,\n          label: oldLang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {termsUrl && renderTos(termsUrl)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  lang: LangFn, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(lang, value, currency)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title: string | undefined;\n  label: string | undefined;\n  icon?: IconName;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  const isMultiline = Boolean(title && label !== title);\n\n  return (\n    <ListItem\n      className={styles.list}\n      narrow\n      multiline={isMultiline}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n      leftElement={customIcon && <i className={buildClassName('icon', customIcon)} />}\n    >\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n  onPaymentFormSubmit?: (eventData: PaymentFormSubmitEvent['eventData']) => void;\n};\n\nexport interface PaymentFormSubmitEvent {\n  eventType: 'payment_form_submit';\n  eventData: {\n    credentials: {\n      token: string;\n      type: string;\n    };\n    title: string;\n  };\n}\n\ninterface WebAppOpenTgLinkEvent {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full?: string;\n  };\n}\n\ntype IframeCallbackEvent = PaymentFormSubmitEvent | WebAppOpenTgLinkEvent;\n\nconst ConfirmPayment: FC<OwnProps> = ({\n  url, noRedirect, onClose, onPaymentFormSubmit,\n}) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useOldLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n      switch (eventType) {\n        case 'web_app_open_tg_link':\n          if (!noRedirect) {\n            const linkUrl = TME_LINK_PREFIX + eventData.path_full!;\n            openTelegramLink({ url: linkUrl });\n          }\n          onClose();\n          break;\n        case 'payment_form_submit':\n          if (onPaymentFormSubmit) {\n            onPaymentFormSubmit(eventData);\n          }\n          break;\n        default:\n          onClose();\n          break;\n      }\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink, onPaymentFormSubmit]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { RegularLangFnParameters } from '../../util/localization';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport PasswordForm from '../common/PasswordForm';\nimport PasswordMonkey from '../common/PasswordMonkey';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  errorKey?: RegularLangFnParameters;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  errorKey,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={errorKey && lang.withRegular(errorKey)}\n        hint={passwordHint}\n        description={oldLang('PaymentConfirmationMessage', cardName)}\n        placeholder={oldLang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    errorKey: payment.error?.messageKey,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.form?.type === 'regular' ? payment.form.savedCredentials : undefined,\n  };\n})(PasswordConfirm));\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect } from '../lib/teact/teact';\n\nimport { requestMeasure } from '../lib/fasterdom/fasterdom';\nimport { IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst DEFAULT_DURATION = 300;\n\nexport default function useFocusAfterAnimation(\n  ref: ElementRef<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      requestMeasure(() => {\n        ref.current?.focus();\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { CardType, detectCardType } from '../common/helpers/detectCardType';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport mirIconPath from '../../assets/mir.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 19;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput: FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useOldLang();\n  const cardNumberRef = useRef<HTMLInputElement>();\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} draggable={false} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} draggable={false} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} draggable={false} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput: FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useOldLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport CardInput from './CardInput';\nimport ExpiryInput from './ExpiryInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{oldLang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber && lang.withRegular(formErrors.cardNumber)}\n        />\n        {needCardholderName && (\n          <InputText\n            label={oldLang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder && lang.withRegular(formErrors.cardholder)}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry && lang.withRegular(formErrors.expiry)}\n          />\n          <InputText\n            label={oldLang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv && lang.withRegular(formErrors.cvv)}\n            teactExperimentControlled\n          />\n        </section>\n        {needCountry || needZip ? (\n          <h5>{oldLang('PaymentBillingAddress')}</h5>\n        ) : undefined}\n        <section className=\"inline-inputs\">\n          {needCountry && (\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.billingCountry}\n              hasArrow={Boolean(true)}\n              id=\"billing-country\"\n              error={formErrors.billingCountry && lang.withRegular(formErrors.billingCountry)}\n              tabIndex={0}\n              ref={selectCountryRef}\n            >\n              {\n                countryList.map(({ defaultName, name }) => (\n                  <option\n                    value={defaultName}\n                    className=\"county-item\"\n                    selected={defaultName === state.billingCountry}\n                  >\n                    {defaultName || name}\n                  </option>\n                ))\n              }\n            </Select>\n          )}\n          {needZip && (\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handleBillingPostCodeChange}\n              value={state.billingZip}\n              inputMode=\"text\"\n              tabIndex={0}\n              maxLength={12}\n              error={formErrors.billingZip && lang.withRegular(formErrors.billingZip)}\n            />\n          )}\n        </section>\n        <div className=\"checkbox\">\n          <Checkbox\n            label={oldLang('PaymentCardSavePaymentInformation')}\n            checked={canSaveCredentials ? state.saveCredentials : false}\n            tabIndex={0}\n            subLabel={oldLang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n            onChange={handleChangeSaveCredentials}\n            disabled={!canSaveCredentials}\n          />\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useOldLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\n\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(lang, amount, currency),\n    value,\n  }))), [shippingOptions, currency, lang]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{oldLang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const phoneRef = useRef<HTMLInputElement>();\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{oldLang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={oldLang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1 && lang.withRegular(formErrors.streetLine1)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2 && lang.withRegular(formErrors.streetLine2)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city && lang.withRegular(formErrors.city)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state && lang.withRegular(formErrors.state)}\n            />\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2 && lang.withRegular(formErrors.countryIso2)}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode && lang.withRegular(formErrors.postCode)}\n            />\n          </div>\n        ) : undefined}\n        {needName || needEmail || needPhone ? (\n          <h5>{oldLang('PaymentShippingReceiver')}</h5>\n        ) : undefined}\n        {needName && (\n          <InputText\n            label={oldLang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName && lang.withRegular(formErrors.fullName)}\n          />\n        )}\n        {needEmail && (\n          <InputText\n            label={oldLang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email && lang.withRegular(formErrors.email)}\n          />\n        )}\n        {needPhone && (\n          <InputText\n            label={oldLang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone && lang.withRegular(formErrors.phone)}\n            ref={phoneRef}\n          />\n        )}\n        <Checkbox\n          label={oldLang('PaymentShippingSave')}\n          subLabel={oldLang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiCountry, ApiInvoice, ApiLabeledPrice, ApiPaymentCredentials, ApiPaymentFormRegular,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\nimport type { PaymentFormSubmitEvent } from './ConfirmPayment';\nimport { PaymentStep } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectChat, selectTabState, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatCurrencyAsString } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\n\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport Checkout from './Checkout';\nimport ConfirmPayment from './ConfirmPayment';\nimport PasswordConfirm from './PasswordConfirm';\nimport PaymentInfo from './PaymentInfo';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport Shipping from './Shipping';\nimport ShippingInfo from './ShippingInfo';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst DONATE_PROVIDER_URL = 'https://payment.smart-glocal.com';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  step?: PaymentStep;\n  chat?: ApiChat;\n  nativeProvider?: string;\n  invoice?: ApiInvoice;\n  form?: ApiPaymentFormRegular;\n  error?: TabState['payment']['error'];\n  prices?: ApiLabeledPrice[];\n  isProviderError?: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions?: boolean;\n  shippingOptions?: ShippingOption[];\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  form,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n    setSmartGlocalCardInfo,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n  const prevStep = usePreviousDeprecated(step, true);\n  const prevRequestId = usePreviousDeprecated(requestId);\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error, requestId]);\n\n  // When payment verification occurs and the `step` does not change, the card details must be requested\n  useEffect(() => {\n    if (\n      step === PaymentStep.Checkout\n      && step === prevStep\n      && requestId !== prevRequestId\n      && !paymentState.savedCredentialId\n      && !paymentState.cardNumber\n    ) {\n      setStep(PaymentStep.PaymentInfo);\n    }\n  }, [paymentState.cardNumber, paymentState.savedCredentialId, prevRequestId, prevStep, requestId, setStep, step]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.messageKey,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (form?.savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = form.savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [form, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.descriptionKey ? lang.withRegular(error.descriptionKey) : lang('ErrorUnspecified')}</h4>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {oldLang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handlePaymentFormSubmit = useCallback((eventData: PaymentFormSubmitEvent['eventData']) => {\n    const { credentials } = eventData;\n    setSmartGlocalCardInfo(credentials);\n    sendForm();\n  }, [sendForm]);\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            title={form!.title}\n            description={form!.description}\n            photo={form!.photo}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice!}\n            checkoutInfo={checkoutInfo}\n            isPaymentFormUrl={isPaymentFormUrl}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n            botName={botName}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!form!.isPasswordMissing && form!.canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            needEmail={Boolean(invoice?.isEmailRequested || invoice?.isEmailSentToProvider)}\n            needPhone={Boolean(invoice?.isPhoneRequested || invoice?.isPhoneSentToProvider)}\n            needName={Boolean(invoice?.isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={invoice!.currency}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onPaymentFormSubmit={handlePaymentFormSubmit}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const handleButtonClick = useLastCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (isPaymentFormUrl) {\n          setIsLoading(true);\n          setStep(PaymentStep.ConfirmPayment);\n          return;\n        }\n\n        if (form?.savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (invoice?.isEmailRequested && !email)\n          || (invoice?.isPhoneRequested && !phone)\n          || (invoice?.isNameRequested && !fullName);\n\n        if ((invoice?.isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (invoice?.isShippingAddressRequested && !paymentState.shipping && shippingOptions?.length) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  });\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return oldLang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return oldLang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return oldLang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return oldLang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return oldLang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return oldLang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return oldLang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, oldLang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? oldLang('Checkout.PayPrice', formatCurrencyAsString(totalPrice, invoice!.currency, oldLang.code))\n    : lang('PaymentInfoDone');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.termsUrl) && !isTosAccepted;\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram Web A doesn&apos;t support payments with this provider yet.\n          {' '}\n          <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {oldLang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <Icon name={step === PaymentStep.Checkout ? 'close' : 'arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition\n          name=\"slide\"\n          activeKey={step}\n          shouldCleanup\n          cleanupOnlyKey={PaymentStep.ConfirmPayment}\n        >\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            className=\"button-text\"\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      form,\n      step,\n      shippingOptions,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n      url,\n    } = selectTabState(global).payment;\n\n    const { invoice, nativeParams, nativeProvider } = form || {};\n    const countryList = global.countryList.general;\n\n    let providerName = form?.nativeProvider;\n    if (!providerName && url) {\n      providerName = url.startsWith(DONATE_PROVIDER_URL) ? DONATE_PROVIDER : undefined;\n    }\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!providerName || !SUPPORTED_PROVIDERS.has(providerName)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const bot = form?.botId ? selectUser(global, form.botId) : undefined;\n    const botName = getUserFullName(bot);\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      nativeProvider: providerName,\n      isProviderError,\n      form,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl: confirmPaymentUrl ?? url,\n      isPaymentFormUrl: Boolean(!nativeProvider && url),\n      countryList,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n      botName,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: ApiLabeledPrice[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiReceiptRegular, ApiShippingAddress } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Checkout from './Checkout';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  receipt?: ApiReceiptRegular;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  receipt,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const prevReceipt = usePrevious(receipt);\n  const renderingReceipt = receipt || prevReceipt;\n\n  const checkoutInfo = useMemo(() => {\n    if (!renderingReceipt) return undefined;\n    return getCheckoutInfo(renderingReceipt.credentialsTitle, renderingReceipt.info, renderingReceipt.shippingMethod);\n  }, [renderingReceipt]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      {renderingReceipt && (\n        <>\n          <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            <Button\n              className=\"close-button\"\n              color=\"translucent\"\n              round\n              size=\"smaller\"\n              onClick={closeModal}\n              ariaLabel=\"Close\"\n            >\n              <Icon name=\"close\" />\n            </Button>\n            <h3>\n              {' '}\n              {lang('PaymentReceipt')}\n              {' '}\n            </h3>\n          </div>\n          <div className=\"receipt-content custom-scroll\">\n            <Checkout\n              shippingPrices={renderingReceipt.shippingPrices}\n              totalPrice={renderingReceipt.totalAmount}\n              tipAmount={renderingReceipt.tipAmount}\n              invoice={renderingReceipt.invoice}\n              checkoutInfo={checkoutInfo}\n              title={renderingReceipt.title}\n              description={renderingReceipt.description}\n              photo={renderingReceipt.photo}\n            />\n          </div>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n\n    return {\n      receipt,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?: {\n    phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"n8eENbaR\",\"closeButton\":\"smosGkw9\",\"contentText\":\"Qo4PtFZI\",\"title\":\"wtfpombl\",\"separator\":\"UoMeVIyC\",\"userPicker\":\"nEYyTS_m\",\"sendInvites\":\"Ttkq3nqt\",\"avatarList\":\"Nc3SOtKd\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback,\n  useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './InviteViaLinkModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['inviteViaLinkModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst InviteViaLinkModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n}) => {\n  const { sendInviteMessages, closeInviteViaLinkModal, openPremiumModal } = getActions();\n  const { missingUsers } = modal || {};\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n\n  const userIds = useMemo(() => missingUsers?.map((user) => user.id) || MEMO_EMPTY_ARRAY, [missingUsers]);\n  const [unselectableIds, selectableIds] = useMemo(() => {\n    if (!missingUsers?.length) return [[], []];\n    const [requirePremiumIds, regularIds] = partition(missingUsers, (user) => user.isRequiringPremiumToMessage);\n    return [requirePremiumIds.map((user) => user.id), regularIds.map((user) => user.id)];\n  }, [missingUsers]);\n\n  const invitableWithPremiumIds = useMemo(() => {\n    return missingUsers?.filter((user) => user.isRequiringPremiumToInvite || user.isRequiringPremiumToMessage)\n      .map((user) => user.id);\n  }, [missingUsers]);\n\n  const isEveryPremiumBlocksPm = useMemo(() => {\n    if (!missingUsers) return undefined;\n    return !missingUsers.some((user) => user.isRequiringPremiumToInvite && !user.isRequiringPremiumToMessage);\n  }, [missingUsers]);\n\n  const topListPeers = useMemo(() => {\n    const users = getGlobal().users.byId;\n    return invitableWithPremiumIds?.map((id) => users[id]);\n  }, [invitableWithPremiumIds]);\n\n  useEffect(() => {\n    setSelectedMemberIds(selectableIds);\n  }, [selectableIds]);\n\n  const handleClose = useLastCallback(() => closeInviteViaLinkModal());\n\n  const handleSendInviteLink = useCallback(() => {\n    sendInviteMessages({ chatId: chat!.id, userIds: selectedMemberIds });\n    closeInviteViaLinkModal();\n  }, [selectedMemberIds, chat]);\n\n  const handleOpenPremiumModal = useCallback(() => {\n    openPremiumModal();\n  }, []);\n\n  const canSendInviteLink = useMemo(() => {\n    if (!chat) return undefined;\n    return Boolean(chat?.isCreator || chat?.adminRights?.inviteUsers);\n  }, [chat]);\n\n  const inviteSectionText = useMemo(() => {\n    return canSendInviteLink\n      ? lang(missingUsers?.length === 1 ? 'InviteBlockedOneMessage' : 'InviteBlockedManyMessage')\n      : lang('InviteRestrictedUsers2', missingUsers?.length);\n  }, [canSendInviteLink, lang, missingUsers?.length]);\n\n  const premiumSectionText = useMemo(() => {\n    if (!invitableWithPremiumIds?.length || !topListPeers?.length) return undefined;\n    const prefix = isEveryPremiumBlocksPm ? 'InviteMessagePremiumBlocked' : 'InvitePremiumBlocked';\n    let langKey = `${prefix}One`;\n    let params = [getUserFullName(topListPeers[0])];\n    if (invitableWithPremiumIds.length === 2) {\n      langKey = `${prefix}Two`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1])];\n    } else if (invitableWithPremiumIds.length === 3) {\n      langKey = `${prefix}Three`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1]), getUserFullName(topListPeers[2])];\n    } else if (invitableWithPremiumIds.length > 3) {\n      langKey = `${prefix}Many`;\n      params = [\n        getUserFullName(topListPeers[0]),\n        getUserFullName(topListPeers[1]),\n        (invitableWithPremiumIds.length - 2).toString(),\n      ];\n    }\n\n    return lang(langKey, params, undefined, topListPeers.length);\n  }, [invitableWithPremiumIds, isEveryPremiumBlocksPm, lang, topListPeers]);\n\n  const hasPremiumSection = Boolean(topListPeers?.length);\n  const hasSelectableSection = Boolean(selectableIds?.length);\n\n  return (\n    <Modal\n      isOpen={Boolean(userIds && chat)}\n      contentClassName={styles.content}\n      onClose={handleClose}\n      isSlim\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {premiumSectionText && (\n        <>\n          <AvatarList\n            className={styles.avatarList}\n            peers={topListPeers}\n            size=\"large\"\n          />\n          <h3 className={styles.title}>\n            {canSendInviteLink ? lang('InvitePremiumBlockedTitle') : lang('ChannelInviteViaLinkRestricted')}\n          </h3>\n          <p className={styles.contentText}>\n            {renderText(premiumSectionText, ['simple_markdown'])}\n          </p>\n          <Button\n            withPremiumGradient\n            isShiny\n            size=\"smaller\"\n            onClick={handleOpenPremiumModal}\n          >\n            {lang('InvitePremiumBlockedSubscribe')}\n          </Button>\n        </>\n      )}\n      {hasPremiumSection && hasSelectableSection && (\n        <Separator className={styles.separator}>\n          {lang('InvitePremiumBlockedOr')}\n        </Separator>\n      )}\n      {hasSelectableSection && (\n        <>\n          <h3 className={styles.title}>{lang('InviteBlockedTitle')}</h3>\n          <p className={styles.contentText}>\n            {inviteSectionText}\n          </p>\n          <PeerPicker\n            className={styles.userPicker}\n            itemIds={userIds}\n            selectedIds={selectedMemberIds}\n            lockedUnselectedIds={unselectableIds}\n            lockedUnselectedSubtitle={lang('InvitePremiumBlockedUser')}\n            onSelectedIdsChange={setSelectedMemberIds}\n            isViewOnly={!canSendInviteLink}\n            allowMultiple\n            withStatus\n            itemInputType=\"checkbox\"\n          />\n          {canSendInviteLink && (\n            <Button\n              className={styles.sendInvites}\n              size=\"smaller\"\n              onClick={handleSendInviteLink}\n              disabled={!selectedMemberIds.length}\n            >\n              {lang('SendInviteLink.ActionInvite')}\n            </Button>\n          )}\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal?.chatId ? selectChat(global, modal.chatId) : undefined;\n\n    return {\n      chat,\n    };\n  },\n)(InviteViaLinkModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c3xMWwzW\",\"fade-in-opacity\":\"cHb04cFv\",\"fadeInOpacity\":\"cHb04cFv\",\"closing\":\"_0HkZ8ITm\",\"voice\":\"VLiJWMs0\",\"video\":\"ML2YEpGq\",\"footer\":\"VWy1qXJL\",\"closeBtn\":\"FfMrCmD9\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { isOwnMessage } from '../../../global/helpers';\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Audio from '../../common/Audio';\nimport RoundVideo from '../../middle/message/RoundVideo';\nimport Button from '../../ui/Button';\n\nimport styles from './OneTimeMediaModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['oneTimeMediaModal'];\n};\n\nconst OneTimeMediaModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    closeOneTimeMediaModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const message = useCurrentOrPrev(modal?.message, true);\n\n  const {\n    shouldRender,\n    transitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(modal));\n\n  const handlePlayVoice = useLastCallback(() => {\n    return undefined;\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeOneTimeMediaModal();\n  });\n\n  if (!shouldRender || !message) {\n    return undefined;\n  }\n\n  const isOwn = isOwnMessage(message);\n  const theme = selectTheme(getGlobal());\n  const closeBtnTitle = isOwn ? lang('Chat.Voice.Single.Close') : lang('Chat.Voice.Single.DeleteAndClose');\n\n  function renderMedia() {\n    if (!message?.content) {\n      return undefined;\n    }\n    const { voice, video } = message.content;\n    if (voice) {\n      return (\n        <Audio\n          className={styles.voice}\n          theme={theme}\n          message={message}\n          origin={AudioOrigin.OneTimeModal}\n          autoPlay\n          onPlay={handlePlayVoice}\n          onPause={handleClose}\n        />\n      );\n    } else if (video?.isRound) {\n      return (\n        <RoundVideo\n          className={styles.video}\n          message={message}\n          origin=\"oneTimeModal\"\n          onStop={handleClose}\n        />\n      );\n    }\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, transitionClassNames)}>\n      {renderMedia()}\n      <div className={styles.footer}>\n        <Button\n          faded\n          onClick={handleClose}\n          pill\n          size=\"smaller\"\n          color={theme === 'dark' ? 'dark' : 'secondary'}\n          className={styles.closeBtn}\n        >\n          {closeBtnTitle}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(OneTimeMediaModal);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\ntype OwnProps = {\n  isOpen: boolean;\n};\n\nconst WebAppsCloseConfirmationModal: FC<OwnProps> = ({\n  isOpen,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { closeWebAppsCloseConfirmationModal, closeWebAppModal } = getActions();\n\n  const [shouldSkipInFuture, setShouldSkipInFuture] = useState(false);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const onClose = useCallback(() => {\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const confirmHandler = useCallback(() => {\n    closeWebAppModal({ shouldSkipConfirmation: true });\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const handleSelectWithEnter = useCallback((index: number) => {\n    if (index === -1) confirmHandler();\n  }, [confirmHandler]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, handleSelectWithEnter, '.Button');\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      title={lang('CloseMiniApps')}\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <p>{lang('AreYouSureCloseMiniApps')}</p>\n      <Checkbox\n        className=\"dialog-checkbox\"\n        label={lang('DoNotAskAgain')}\n        checked={shouldSkipInFuture}\n        onCheck={setShouldSkipInFuture}\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n        ref={containerRef}\n        onKeyDown={handleKeyDown}\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n          color=\"danger\"\n        >\n          {oldLang('Confirm')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>\n          {oldLang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(WebAppsCloseConfirmationModal);\n","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport TableAboutModal, { type TableAboutData } from '../common/TableAboutModal';\n\nimport styles from './FrozenAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['isFrozenAccountModalOpen'];\n};\n\ntype StateProps = {\n  freezeAppealUrl?: string;\n  botFreezeAppealUsername?: string;\n  freezeUntilDate?: number;\n};\n\nconst FrozenAccountModal = ({\n  modal,\n  freezeUntilDate,\n  freezeAppealUrl,\n  botFreezeAppealUsername,\n}: OwnProps & StateProps) => {\n  const {\n    closeFrozenAccountModal,\n    openUrl,\n  } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n\n  const handleClose = useLastCallback(() => {\n    closeFrozenAccountModal();\n  });\n\n  const handleAppeal = useLastCallback(() => {\n    closeFrozenAccountModal();\n    if (freezeAppealUrl) {\n      openUrl({ url: freezeAppealUrl });\n    }\n  });\n\n  const header = useMemo(() => {\n    return (\n      <div className={styles.header}>\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.BannedDuck}\n          noLoop\n        />\n        <div className={styles.title}>\n          {lang('FrozenAccountModalTitle')}\n        </div>\n      </div>\n    );\n  }, [lang]);\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          className={styles.buttonAppeal}\n          size=\"smaller\"\n          onClick={handleAppeal}\n          noForcedUpperCase\n        >\n          {lang('ButtonAppeal')}\n        </Button>\n        <Button\n          isText\n          size=\"smaller\"\n          onClick={handleClose}\n          noForcedUpperCase\n        >\n          {lang('ButtonUnderstood')}\n        </Button>\n      </div>\n    );\n  }, [lang, isOpen]);\n\n  if (!freezeUntilDate || !botFreezeAppealUsername) return undefined;\n\n  const date = new Date(freezeUntilDate * 1000);\n\n  const botLink = (\n    <Link onClick={handleAppeal} isPrimary>\n      {formatUsername(botFreezeAppealUsername)}\n    </Link>\n  );\n\n  const listItemData = [\n    ['hand-stop', lang('FrozenAccountViolationTitle'), lang('FrozenAccountViolationSubtitle')],\n    ['lock', lang('FrozenAccountReadOnlyTitle'), lang('FrozenAccountReadOnlySubtitle')],\n    ['frozen-time', lang('FrozenAccountAppealTitle'),\n      lang('FrozenAccountAppealSubtitle', {\n        botLink,\n        date: formatDateToString(date, lang.code),\n      }, {\n        withNodes: true,\n      })],\n  ] satisfies TableAboutData;\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const freezeUntilDate = global.appConfig?.freezeUntilDate;\n    const freezeAppealUrl = global.appConfig?.freezeAppealUrl;\n    const botFreezeAppeal = global.botFreezeAppealId ? selectUser(global, global.botFreezeAppealId) : undefined;\n    const botFreezeAppealUsername = botFreezeAppeal && getMainUsername(botFreezeAppeal);\n\n    return {\n      freezeUntilDate,\n      freezeAppealUrl,\n      botFreezeAppealUsername,\n    };\n  },\n)(FrozenAccountModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"cW2rtp6M\",\"title\":\"qLSm0uyC\",\"footer\":\"Vj3QQ_JQ\",\"buttonAppeal\":\"anvg3JaY\"};"],"names":["SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","memo","PasswordMonkey","isPasswordVisible","isBig","isFirstMonkeyLoaded","markFirstMonkeyLoaded","useFlag","isPeekShown","markPeekShown","isMobile","useAppLayout","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","useTimeout","handleFirstMonkeyLoad","useCallback","_jsxs","id","className","children","_jsx","AnimatedSticker","size","STICKER_SIZE_TWO_FA","tgsUrl","LOCAL_TGS_URLS","MonkeyClose","playSegment","noLoop","onLoad","MonkeyPeek","getViewableMedia","params","type","media","mediaIndex","isSingle","length","avatar","profilePhotos","photos","action","document","photo","video","webPage","paidMedia","getMessageContent","message","isDocumentPhoto","isDocumentVideo","webPagePhoto","webPageVideo","webPageDocument","isDocumentMedia","undefined","extendedMedia","extendedPhoto","extendedVideo","isGif","createGhost","source","origin","ghost","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","ProfileAvatar","SettingsAvatar","profileInfo","querySelector","cloneNode","getNodes","index","containerSelector","mediaSelector","Album","ScheduledAlbum","getMessageHtmlId","PreviewMedia","SharedMedia","SearchResult","MiddleHeaderAvatar","ChannelAvatar","SuggestedAvatar","StarsTransaction","SponsoredMessage","MESSAGE_CONTENT_SELECTOR","ScheduledInline","Inline","container","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","style","objectFit","signal","createSignal","setIsPictureInPicture","getSetPresentationMode","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","FALLBACK_DIMENSIONS","AVATAR_FULL_DIMENSIONS","useMediaProps","isAvatar","delay","isPhotoAvatar","mediaType","isVideo","isVideoAvatar","isDocument","isRound","isPhoto","isFromSharedMedia","isFromSearch","getMediaOrAvatarHash","useMemo","isFull","getVideoProfilePhotoMediaHash","getMediaHash","getProfilePhotoMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","BlobUrl","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","clear","set","window","setTimeout","useBlur","Boolean","useBlurSync","getMediaThumbUri","bestData","mediaSize","getMediaFileSize","isLocal","dimensions","VIDEO_AVATAR_FULL_DIMENSIONS","getPhotoFullDimensions","getVideoDimensions","ReportAvatarModal","isOpen","peerId","onClose","onCloseAnimationEnd","reportProfilePhoto","getActions","selectedReason","setSelectedReason","useState","description","setDescription","handleReport","useLastCallback","chatId","reason","handleSelectReason","value","handleDescriptionChange","e","target","lang","useOldLang","REPORT_OPTIONS","label","title","Modal","onEnter","RadioGroup","name","options","onChange","selected","InputText","Button","color","isText","onClick","getZoomChange","setZoomChange","useZoomChange","useUnmountCleanup","DeleteProfilePhotoModal","profileId","onConfirm","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","isUserId","withGlobal","global","item","canUpdateMedia","tabState","selectTabState","mediaViewer","avatarOwner","avatarPhoto","chat","selectCurrentChat","currentMessageList","selectCurrentMessageList","threadId","isProtected","selectIsMessageProtected","activeDownloads","selectActiveDownloads","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","selectAllowedMessageActionsSlow","isCurrentAvatar","avatarPhotoId","canDeleteAvatar","canUpdate","messageListType","MediaViewerActions","canReportAvatar","onReportAvatar","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","downloadMedia","cancelMediaDownload","updateProfilePhoto","updateChatPhoto","openMediaViewer","openDeleteMessageModal","isMessage","fileName","getMediaFilename","isDownloading","getIsDownloading","downloadProgress","handleDownloadClick","originMessage","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","isAvatarView","forceOnHeavyAnimation","MenuButton","onTrigger","round","ariaLabel","Icon","renderDeleteModal","openDeleteModalHandler","messageIds","isSchedule","menuItems","isForwardingAllowed","content","push","icon","Math","href","download","destructive","DropdownMenu","trigger","positionX","map","MenuItem","ProgressSpinner","progress","noCross","renderDownloadButton","useSignalRef","getValue","ref","useEffectOnce","subscribe","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","getCurrentTime","setCurrentTime","useCurrentTimeSignal","MediaViewerFooter","text","buttonText","isForVideo","handleSponsoredClick","isForceMobileVersion","isMultiline","setIsMultiline","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","onButtonClick","classNames","buildClassName","stopPropagation","dir","isRectangular","getIsVideoWaiting","setIsVideoWaiting","useVideoWaitingSignal","IS_MOBILE","IS_ANDROID","IS_IOS","PREVIEW_SIZE_RATIO","MAX_FRAMES","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","frames","currentTime","constructor","url","this","forEach","connector","request","args","MAX_WORKERS","onFrame","time","frame","render","clearCache","close","requestMutation","drawImage","destroy","worker","async","messageId","data","result","callApi","mediaFormat","Progressive","arrayBuffer","postMessage","cancelAnimation","SeekLine","duration","bufferedRanges","isReady","posterSize","playbackRate","isActive","isPlaying","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getCurrentTimeSignal","getIsWaiting","useThrottledSignal","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","ratio","getPreviewDimensions","setPreview","floor","renderVideoPreview","createVideoPreviews","remaining","animateNumber","from","to","onUpdate","useLayoutEffect","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","pageX","getPointerPosition","x","t","clamp","preview","clientWidth","stopAnimation","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","ShowTransition","styles","start","end","PLAYBACK_RATES","renderTime","VideoPlayerControls","bufferedProgress","fileSize","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","onSeekingChange","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","closeTimeoutRef","setVisibility","isVisible","body","remove","handleSeek","position","handleSeekStart","volumeIcon","ripple","RangeSlider","bold","formatFileSize","Menu","positionY","autoClose","rate","disabled","VideoPlayer","posterData","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","isSponsoredMessage","timestamp","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setFullscreen","exitFullscreen","useFullscreen","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","elRef","onLeave","isSupported","setIsSupported","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","lockControls","lastMousePosition","y","updateMousePosition","checkMousePositionAndToggleControls","clientX","clientY","bounds","right","top","bottom","handleVideoMove","handleVideoLeave","handleSeekingChange","bufferingHandlers","useBuffering","isUnsupported","useUnsupportedMedia","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransitionDeprecated","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","readyState","handleEnded","handleFullscreenChange","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","Number","isFinite","handleKeyDown","key","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseLeave","onContextMenu","onDoubleClick","autoPlay","controlsList","playsInline","loop","onWaiting","onPlay","onEnded","onPause","onTimeUpdate","join","sponsoredMessage","textMessage","maxTimestamp","selectMessageTimestampableDuration","MediaViewerContent","withAnimation","isMoving","onFooterClick","updateLastPlaybackTimestamp","toggleControlsOnMove","updatePlaybackTimestamp","useThrottledCallback","MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION","isInAlbum","newTimestamp","PLAYBACK_SAVE_INTERVAL","useSignalEffect","calculateMediaViewerDimensions","ARE_WEBCODECS_SUPPORTED","renderPhoto","textParts","renderMessageText","forcePlayback","isForMediaViewer","hasFooter","shouldForceMobileVersion","imageSize","canDrag","alt","Spinner","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelZoomAnimation","SwipeDirection","MediaViewerSlides","isLoadingMoreMedia","isSynced","loadMoreItemsIfNeeded","getNextItem","selectItem","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","scale","swipeDirectionRef","initialContentRectRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveItem","setActiveItem","activeItemRef","isScaled","activeItem","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","selectItemDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","cActiveItem","nextItem","timing","changeSlideOnClick","closest","calculateOffsetBoundaries","offsetTop","initialContentRect","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","max","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","min","scaleFactor","x1","y1","k","Vx","Vy","dirX","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","withWheelDrag","checkIfControlTarget","event","captureEvent","dragOffsetX","dragOffsetY","cancelDrag","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","SWIPE_DIRECTION_THRESHOLD","SWIPE_DIRECTION_TOLERANCE","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","includes","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","prevItem","hasPrev","hasNext","isRtl","toFixed","element","selector","matches","messageSender","selectSender","owner","SenderInfo","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","subtitle","isFallbackAvatar","fallbackPhoto","isPersonalAvatar","personalPhoto","date","formattedDate","formatMediaDateTime","count","currentIndex","countText","parts","isChannel","isChatChannel","isGroup","isChatGroup","senderTitle","getPeerTitle","Avatar","peer","renderText","shouldSkipHistoryAnimations","withDynamicLoading","standaloneMedia","selectPerformanceSettingsValue","currentUserId","isChatWithSelf","selectIsChatWithSelf","selectPeer","isChatAdmin","selectPeerPhotos","isLoading","chatMessages","selectScheduledMessage","selectChatMessage","selectSponsoredMessage","selectChatScheduledMessages","selectChatMessages","isOriginInline","isOriginAlbum","collectedMessageIds","currentSearch","selectCurrentChatMediaSearch","foundIds","currentSegment","selectCurrentSharedMediaSearch","resultsByType","selectOutlyingListByMessageId","selectListedIds","MediaViewer","openForwardMenu","searchChatMediaMessages","loadMoreProfilePhotos","clickSponsored","openUrl","animationKey","senderId","prevSenderId","usePreviousDeprecated","headerAnimation","isGhostAnimation","isReportAvatarModalOpen","openReportAvatarModal","closeReportAvatarModal","currentItem","getMediaViewerItem","info","messageMediaIds","getChatMediaMessageIds","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","headerRef","useElectronDrag","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","prevMessage","prevIsHidden","prevOrigin","prevBestImageData","shouldAnimateOpening","beginHeavyAnimation","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","applyStyles","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","imageEl","messageListElement","getOffsetToContainer","scrollTop","offsetHeight","isMessageImageFullyVisible","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","HTMLElement","isFromMedia","isMedia","randomId","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","currentMediaMessageId","fromMedia","fromMediaIndex","nextIndex","fromAvatarOwner","fromProfilePhotos","fromSponsoredMessage","fromSponsoredMessageIndex","fromMessage","getMessagePaidMedia","indexOf","nextMessageId","nextMessage","openMediaViewerItem","itemChatId","itemMessageId","itemStandaloneMedia","handleBeforeDelete","prevMedia","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","avatarOwnerId","OFFSET_BOTTOM","MOBILE_OFFSET","hasBlur","isGhost2","ctx","alpha","IS_CANVAS_FILTER_SUPPORTED","filter","RADIUS","userId","getPeerStoryHtmlId","StoryViewerOrigin","StoryRibbon","storyRibbonStyles","root","ChatList","calculateOffsetX","slideAmount","isActiveSlideSize","isMoveThroughActiveSlide","isBackward","mainOffset","additionalOffset","totalOffset","roundToNearestEven","useSlideSizes","baseWidth","baseHeight","newWidth","newHeight","widthScale","heightScale","calculateScale","activeSlideWidth","slideWidth","activeSlide","slide","toActiveScale","fromActiveScale","calculateSlideSizes","useStoryProps","story","isCurrentUserPremium","isDropdownMenuOpen","isLoadedStory","isDeletedStory","hasText","hasMessageText","hasForwardInfo","forwardInfo","thumbnail","previewHash","getStoryMediaHash","noSound","fullMediaHash","fullMediaData","altMediaHash","altMediaData","hasFullData","hasThumb","canDownload","noForwards","downloadHash","downloadMediaData","storyViewer","isStealthModalOpen","stealthMode","stories","selectIsCurrentUserPremium","StealthModeModal","toggleStealthModal","activateStealthMode","showNotification","openPremiumModal","isOnCooldown","setIsOnCooldown","serverTime","getServerTime","cooldownUntil","handleTimerEnds","handleActivate","initialSection","contentClassName","isSlim","ListItem","multiline","inactive","leftElement","isShiny","withPremiumGradient","TextTimer","langKey","endsAt","onEnd","deleteStory","openNextStory","handleDeleteStoryClick","storyId","ConfirmDialog","confirmLabel","confirmHandler","confirmIsDestructive","contactListIds","selectedIds","lockedIds","onSelect","searchQuery","setSearchQuery","displayedIds","contactIds","unique","filterPeersByQuery","ids","query","PeerPicker","itemIds","MEMO_EMPTY_ARRAY","lockedSelectedIds","filterValue","filterPlaceholder","searchInputId","isSearchable","withDefaultPadding","forceShowSelf","onSelectedIdsChange","onFilterChange","allowMultiple","withStatus","itemInputType","usersById","saveCloseFriends","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","closeFriendIds","isCloseFriend","useEffectWithPrevDeps","prevIsActive","handleSelectedContactIdsChange","handleSubmit","userIds","_Fragment","FloatingActionButton","isShown","OPTIONS","actions","Screens","selectPeerStory","visibility","contactList","users","byId","editStoryPrivacy","toggleStoryInProfile","isOpenModal","openModal","closeModal","privacy","setPrivacy","isPinned","setIsPinned","isInProfile","setActiveKey","editingBlockingCategory","setEditingBlockingCategory","isBackButton","allowList","allowUserIds","selectedBlockedIds","blockUserIds","handleAllowUserIdsChange","newIds","handleDenyUserIdsChange","handleCloseButtonClick","handleIsPinnedToggle","modal","noBackdrop","header","closeButton","headerTitle","closeFriends","denyList","renderHeaderContent","slideClassName","storyLifeTime","getHours","expireDate","section","list","option","checked","input","handleVisibilityChange","newVisibility","teactExperimentControlled","optionContent","option_name","tabIndex","role","handleActionClick","actionInner","getUserFullName","Switcher","footer","submit","renderPrivacyList","CloseFriends","AllowDenyList","sender","fromPeerId","EmbeddedStoryForward","openStoryViewer","loadPeerStoriesByIds","openChat","storyIds","fromName","openOriginalStory","isDeleted","isSingleStory","handleMouseDown","useFastClick","PeerColorWrapper","getPeerColorClass","onMouseDown","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","renderTextWithEntities","renderTextContent","renderSender","isExpanded","onExpand","onFold","contentRef","textRef","showMoreButtonRef","renderingStory","useCurrentOrPrev","caption","hasOverflow","setHasOverflow","prevIsExpanded","usePrevDuringAnimation","isInExpandedState","addExtraClass","removeExtraClass","canExpand","shouldRenderShowMore","requestMeasure","button","offsetWidth","setProperty","requestForcedReflow","textContainer","textOffsetTop","lineHeight","totalLines","calcTextLineHeightAndCount","isOverflowing","overflowShift","scrollTo","fullClassName","MessageText","messageOrStory","withTranslucentThumbs","StoryFooter","openStoryViewModal","sendStoryReaction","views","isOut","sentReaction","viewsCount","forwardsCount","reactionsCount","isSentStoryReactionHeart","isSameReaction","HEART_REACTION","canForward","isPublic","containerId","getStoryKey","recentViewers","getGlobal","recentViewerIds","handleOpenStoryViewModal","handleForwardClick","handleLikeStory","reaction","AvatarList","peers","nonInteractive","ReactionAnimatedEmoji","withEffectOnly","getReactionKey","isViewed","isPaused","onImageComplete","handleAnimationEnd","animationName","onAnimationEnd","VIDEO_MIN_READY_STATE","IS_SAFARI","appConfig","user","selectUser","selectChat","userFullInfo","selectUserFullInfo","viewModal","isPrivacyModalOpen","storyList","forwardMessages","forwardedStoryId","premiumModal","safeLinkModalUrl","mapModal","reportModal","giftInfoModal","isPaymentMessageConfirmDialogOpen","isPremiumModalOpen","shouldForcePause","reactionPicker","mediaAreas","forwardSenderId","find","area","channelId","forwardSender","withHeaderAnimation","fromPeer","fromId","paidMessagesStars","selectPeerPaidMessagesStars","isAccountFrozen","selectIsCurrentUserFrozen","orderedIds","storyIdsByPeerId","storyChangelogUserId","viewersExpirePeriod","storyExpirePeriod","storyViewersExpirePeriod","isChatExist","arePeerSettingsLoaded","settings","isArchivedStories","isPrivateStories","getIsAnimating","onDelete","viewStory","setStoryViewerMuted","openPreviousStory","loadPeerSkippedStories","copyStoryLink","openStoryPrivacyEditor","loadPeerSettings","fetchChat","loadStoryViews","oldLang","useLang","isComposerHasFocus","markComposerHasFocus","unmarkComposerHasFocus","isStoryPlaybackRequested","playStory","pauseStory","isStoryPlaying","markStoryPlaying","unmarkStoryPlaying","isAppFocused","markAppFocused","unmarkAppFocused","isCaptionExpanded","expandCaption","foldCaption","isPausedBySpacebar","setIsPausedBySpacebar","isPausedByLongPress","markIsPausedByLongPress","unmarkIsPausedByLongPress","markDropdownMenuOpen","unmarkDropdownMenuOpen","isChangelog","isUserStory","isChatStory","isChannelStory","canPinToProfile","canUnpinFromProfile","areViewsExpired","forwardSenderTitle","canCopyLink","hasUsername","canShare","canPlayStory","shouldShowComposer","shouldShowFooter","shouldRenderSkeleton","skeletonTransitionClassNames","mediaTransitionClassNames","thumbRef","useCanvasBlur","previewTransitionClassNames","useMediaTransitionDeprecated","shouldRenderComposer","composerAppearanceAnimationClassNames","shouldRenderCaptionBackdrop","captionBackdropTransitionClassNames","appearanceAnimationClassNames","shouldRenderCaption","captionAppearanceAnimationClassNames","isStreamingSupported","useStreaming","PRIMARY_VIDEO_MIME","useStoryPreloader","canWrite","handlePauseStory","handlePlayStory","handleLongPressStart","handleLongPressEnd","handleDropdownMenuOpen","handleDropdownMenuClose","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","hasAllData","useBackgroundMode","load","keyCode","prevIsComposerHasFocus","prevIsCaptionExpanded","prevShouldForcePause","prevIsAppFocused","prevIsPausedByLongPress","handleOpenChat","handleForwardPeerClick","handleFromPeerClick","handleOpenPrevStory","handleOpenNextStory","handleVideoStoryTimeUpdate","captureKeyboardListeners","onRight","onLeft","handleCopyStoryLink","handlePinClick","handleUnpinClick","handleReportStoryClick","handleInfoPrivacyEdit","handleInfoPrivacyClick","isForContacts","isForCloseFriends","myName","handleOpenStealthModal","activeUntil","diff","handleDownload","inputPlaceholder","amount","formatStarsAsIcon","asFont","withNodes","StoryProgress","formatRelativePastTime","isEdited","privacyIcon","gradient","renderStoryPrivacyButton","onOpen","Skeleton","OptimizedVideo","canPlay","isPriority","disableRemotePlayback","SECONDARY_VIDEO_MIME","MediaAreaOverlay","withStory","storyViewerMode","StoryCaption","Composer","MAIN_THREAD_ID","getIsMobile","editableInputCssSelector","EDITABLE_STORY_INPUT_CSS_SELECTOR","editableInputId","EDITABLE_STORY_INPUT_ID","inputId","onFocus","onBlur","lastViewedByPeerId","lastViewedByPeerIds","lastViewedId","storyIdsForViewer","peerStories","lastReadId","hasUnreadStories","previewIndexId","isLoaded","imageHash","thumbUrl","currentPeerId","currentStoryId","isSinglePeer","isPrivate","isArchive","byPeerId","orderedPeerIds","active","peerIds","selectIsStoryViewerOpen","stopActiveReaction","renderingPeerId","setRenderingPeerId","renderingStoryId","setRenderingStoryId","prevPeerId","renderingIsArchive","renderingIsPrivate","renderingIsSinglePeer","renderingIsSingleStory","slideSizes","rendersRef","setIsAnimating","setRef","renderingPeerIds","slice","renderingPeerPosition","currentPeerPosition","calculateTransformX","reduce","transformX","getCurrentStoryRef","composer","focusEditableElement","disableScrolling","enableScrolling","Object","entries","String","handleTransitionEnd","Story","onTransitionEnd","buildStyle","renderStory","StoryPreview","renderStoryPreview","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","scrollHeight","DEFAULT_REACTION_SIZE","storyView","availableReactions","reactions","StoryView","closeStoryViewer","unblockUser","blockUser","deleteContact","updateStoryView","closeStoryViewModal","contextActions","areStoriesBlocked","isUserBlocked","isContact","fullName","handler","isOnlyStories","statusIcon","shouldColorStatus","status","isModified","formatDateAtTime","opacityFadeIn","blocked","rightElement","ReactionStaticEmoji","viewReaction","withIconHeart","withPortalForMenu","menuBubbleClassName","menuBubble","PrivateChatInfo","withColoredStatus","noStatusOrTyping","GroupChatInfo","nextOffset","loadStoryViewList","clearStoryViews","areJustContacts","markJustContacts","unmarkJustContacts","areReactionsFirst","markReactionsFirst","unmarkReactionsFirst","setQuery","isExpired","shouldShowJustContacts","STORY_VIEWS_MIN_CONTACTS_FILTER","shouldShowSortByReactions","STORY_MIN_REACTIONS_SORT","shouldShowSearch","STORY_VIEWS_MIN_SEARCH","hasHeader","refetchViews","sortedViews","sort","a","b","reactionA","reactionB","prepareComparator","placeholderCount","notAllAvailable","handleLoadMore","MoreMenuButton","isMenuOpen","fluid","sortButton","topButton","faded","iconSort","iconDown","viewsList","contactFilter","check","SearchInput","search","topScrolled","onScroll","centeredInfo","InfiniteScroll","items","onLoadMore","view","additionalKeyId","Array","_","i","PlaceholderChatInfo","bottomInfo","closeStoryPrivacyEditor","reportStory","storyToDelete","setStoryToDelete","isPrevOpen","handleOpenDeleteModal","s","handleCloseDeleteModal","openMessageReport","thumb","safeAreaBottom","getComputedStyle","documentElement","getPropertyValue","parseFloat","toTranslateX","toTranslateY","toScaleX","toScaleY","ghost2","ghost2Top","StorySlides","StoryDeleteConfirmModal","StoryViewModal","StorySettings","TOPIC_ICON_SIZE","ITEM_CLASS_NAME","ChatOrUserPicker","chatOrUserIds","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","isLowStackPriority","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","selectTopicsById","selectTopics","forumTopicsById","useSelector","topicIds","topics","chatsById","chats","chatFullInfoById","fullInfoById","searchTitle","toLowerCase","values","acc","topic","getCanPostInChat","keys","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","renderChatItem","monoforumChannel","selectMonoforumChannel","isSelf","isApiPeerChat","subtitleClassName","getGroupStatus","userStatus","selectUserStatus","getUserStatus","isUserOnline","getSubtitle","PickerItem","FullNameTitle","isMonoforum","isSavedMessages","avatarElement","asMessageBubble","PEER_PICKER_ITEM_HEIGHT_PX","onKeyDown","placeholder","withAbsolutePositioning","maxHeight","Loading","topicId","TopicIcon","letterClassName","itemSelector","listIds","orderedPinnedIds","activeListIds","archivedListIds","archived","pinnedIds","RecipientPicker","API_CHAT_TYPES","onSelectRecipient","isForwarding","setSearch","priorityIds","hasAdminRights","getHasAdminRight","isDeletedUser","selectIsMonoforumAdmin","chatFullInfo","selectChatFullInfo","sorted","sortChatIds","filterChatIdsByType","renderingIds","isManyMessages","isStory","ForwardRecipientPicker","openChatOrTopicWithReplyInDraft","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","forwardStory","renderingIsStory","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","toChatId","getUserFirstOrLastName","getChatTitle","DraftRecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","AttachBotRecipientPicker","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","Dialogs","dismissDialog","sendMessage","isModalOpen","dialog","contactRequest","handleConfirm","contact","messageList","getReadableErrorText","pick","Notifications","notifications","notification","Notification","localId","SafeLinkModal","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","withMarkdown","OpenMapModal","closeMapModal","point","geoPoint","googleUrl","bingUrl","appleUrl","osmUrl","google","prepareMapUrl","bing","osm","handleGoogleClick","handleBingClick","handleAppleClick","handleOsmClick","IS_MAC_OS","currentUser","UrlAuthModal","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","isWriteAllowed","handleLoginChecked","Checkbox","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","padStart","formatDay","CalendarModal","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onDateChange","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","handleDateSelect","inputMode","historyCalendarSelectedAt","HistoryCalendar","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","phoneCodeList","countryList","phoneCodes","NewContactModal","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","ResizeHandleType","resizeHandleSelectorsMap","Top","Bottom","Left","Right","topLeft","TopLeft","topRight","TopRight","bottomLeft","BottomLeft","bottomRight","BottomRight","resizeHandleSelectors","resizeTimeout","FULLSCREEN_POSITION","webApps","selectActiveWebApp","modalState","openedWebApps","isMinimizedState","activeTabBot","MinimizedWebAppModal","changeWebAppModalState","closeWebAppModal","openedWebAppsValues","openedTabsCount","activeTabBotId","app","handleCloseClick","handleExpandClick","state","activeTabName","botName","pluralValue","renderTitle","isPopularApp","requestMainWebView","theme","extractCurrentThemeParams","activeUserCount","botActiveUsers","badgeText","formatIntegerCompact","PeerBadge","avatarContainer","textClassName","badgeClassName","userCountBadge","badgeIconClassName","userBadgeIcon","badgeIcon","runThrottled","cb","globalSearch","popularBotApps","fetchingStatus","botApps","recentBotIds","topBotApps","MoreAppsTabContent","shouldShowMoreMine","setShouldShowMoreMine","searchPopularBotApps","handleToggleShowMoreMine","prev","filteredFoundIds","LoadMoreDirection","Backwards","handleSearchInputReset","noFastList","preloadBackwards","onReset","sectionTitle","showMoreLink","sectionContent","WebAppGridItem","FULLSCREEN_BUTTONS_AREA_HEIGHT","MAIN_BUTTON_ANIMATION_TIME","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","activeWebApp","activeWebAppKey","selectWebApp","activeBotId","attachBot","attachMenu","bots","botAppSettings","botInfo","appSettings","selectTheme","isPaymentModalOpen","regularPaymentStatus","payment","starsPaymentStatus","inputInvoice","starsInputInvoice","starsPayment","botAppPermissions","selectBotAppPermissions","paymentStatus","WebAppModalTabContent","webApp","registerSendEventCallback","registerReloadFrameCallback","isTransforming","isMultiTabSupported","onContextMenuButtonClick","modalHeight","closeActiveWebApp","sendWebViewData","toggleAttachBot","openTelegramLink","setWebAppPaymentSlug","switchBotInline","sharePhoneWithBot","updateWebApp","resetPaymentStatus","openChatWithInfo","openEmojiStatusAccessModal","openLocationAccessModal","openPreparedInlineMessageModal","mainButton","setMainButton","secondaryButton","setSecondaryButton","markLoaded","markUnloaded","popupParameters","setPopupParameters","isRequestingPhone","setIsRequestingPhone","isRequestingWriteAccess","setIsRequestingWriteAccess","requestedFileDownload","setRequestedFileDownload","bottomBarColor","setBottomBarColor","unlockPopupsAt","handlePopupOpened","handlePopupClosed","setUnlockPopupsAt","sequentialCalls","lastClosedDate","usePopupLimit","headerButtonRef","headerButtonCaptionRef","exitFullScreenCallback","fullscreenElementRef","appName","activeWebAppName","backgroundColor","isBackButtonVisible","placeholderPath","isCloseModalOpen","isRemoveModalOpen","webAppKey","getWebAppKey","isAvailable","IS_GEOLOCATION_SUPPORTED","isAccessRequested","geolocation","isAccessGranted","updateCurrentWebApp","updatedPartialWebApp","update","themeParams","secondary_bg_color","themeBackgroundColor","bg_color","backgroundColorFromEvent","setBackgroundColorFromEvent","backgroundColorFromSettings","backgroundDarkColor","themeHeaderColor","headerColorFromEvent","setHeaderColorFromEvent","headerColorFromSettings","headerColor","headerDarkColor","frameRef","isSimple","reloadFrame","sendEvent","sendFullScreenChanged","sendViewport","sendSafeArea","sendTheme","useWebAppFrame","isSimpleView","onEvent","openInvoice","closeWebApp","openSuggestedStatusModal","updateContentSettings","isReloadSupported","reloadTimeout","ignoreEventsRef","lastFrameSizeRef","handleLoad","contentWindow","JSON","stringify","eventType","eventData","is_fullscreen","forceReloadFrame","once","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","skipClosingConfirmation","scrollbarColor","reload_supported","req_id","slug","linkUrl","available","custom_emoji_id","BigInt","customEmojiId","passed","isSensitiveEnabled","plannedEvents","getIsWebAppsFullscreenSupported","exitIfFullscreenCallback","TME_LINK_PREFIX","path_full","shouldIgnoreCache","force_request","is_visible","isSettingsButtonVisible","validateHexColor","color_key","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","shouldConfirmClosing","buttons","handleAppPopupClose","chat_types","convertToApiChatType","isSamePeer","handleRejectPhone","handleRejectWriteAccess","handleRequestWriteAccess","method","requestId","parameters","customMethod","handleInvokeCustomMethod","handleRejectFileDownload","fileUrl","handleCheckDownloadFile","file_name","access_requested","access_granted","geolocationData","getGeolocationStatus","accessRequested","accessGranted","latitude","longitude","altitude","course","heading","speed","horizontal_accuracy","accuracy","vertical_accuracy","altitudeAccuracy","handleRequestLocation","isMainButtonVisible","isSecondaryButtonVisible","handleHideCloseModal","handleConfirmCloseModal","handleHideRemoveModal","handleMainButtonClick","handleSecondaryButtonClick","buttonId","button_id","handleAppPopupModalClose","sendThemeCallback","setFullscreenCallback","checkIfFullscreen","sendFullScreenChangedCallback","visibilityChangedCallBack","prevModalState","prevIsPaymentModalOpen","handleRemoveAttachBot","isEnabled","handleAcceptPhone","shouldCloseActive","handleAcceptWriteAccess","handleDownloadFile","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","secondaryButtonCurrentPosition","secondaryButtonCurrentColor","secondaryButtonCurrentTextColor","secondaryButtonCurrentIsActive","secondaryButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideMainButton","setShouldHideMainButton","shouldHideSecondaryButton","setShouldHideSecondaryButton","shouldShowMainButton","setShouldShowMainButton","shouldShowSecondaryButton","setShouldShowSecondaryButton","shouldShowAppNameInFullscreen","setShouldShowAppNameInFullscreen","backButtonTextWidth","setBackButtonTextWidth","isVerticalLayout","rowsCount","hideDirection","mainButtonChangeTimeout","mainButtonFastTimeout","secondaryButtonChangeTimeout","secondaryButtonFastTimeout","appNameDisplayTimeout","frameStyle","handleBackClick","handleCollapseClick","handleShowContextMenu","backIconClass","backButtonCaption","hasHeaderElement","viewBox","renderDefaultPlaceholder","sandbox","allow","allowFullScreen","hasCloseButton","filename","MINIMIZED_STATE_SIZE","DEFAULT_MAXIMIZED_STATE_SIZE","MAXIMIZED_STATE_MINIMUM_SIZE","miniAppsCachedPosition","miniAppsCachedSize","selectSharedSettings","cachedPosition","cachedSize","WebAppModal","prolongWebView","openWebAppTab","openMoreAppsTab","closeMoreAppsTab","updateMiniAppCachedPosition","updateMiniAppCachedSize","getMaximizedStateSize","setMaximizedStateSize","getSize","openedOrderedKeys","sessionKeys","isMoreAppsTabActive","tabs","isMaximizedState","isFullScreen","supportMultiTabMode","menuRef","getTriggerElement","getRootElement","getMenuElement","isContextMenuOpen","contextMenuAnchor","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isDraggingEnabled","setIsDraggingEnabled","headerElement","containerElement","isDragging","draggableStyle","dragHandleElementRef","isDragEnabled","originalSize","minimumSize","elementCurrentPosition","setElementCurrentPosition","elementCurrentSize","setElementCurrentSize","getElementPositionOnStartTransform","setElementPositionOnStartTransform","getElementSizeOnStartTransform","setElementSizeOnStartTransform","getTransformStartPoint","setTransformStartPoint","elementPositionOnStartTransform","transformStartPoint","dragHandleElement","isInitiated","setIsInitiated","wasElementShown","setWasElementShown","startDragging","stopDragging","startResizing","stopResizing","isWindowsResizing","startWindowResizing","stopWindowResizing","hitResizeHandle","setHitResizeHandle","getVisibleArea","innerWidth","innerHeight","updateCurrentPosition","getActualPosition","getCenteredPosition","visibleArea","centeredPosition","handleStartDrag","MouseEvent","handleStartResize","targetElement","resizeHandle","RESIZE_HANDLE_SELECTOR","getResizeHandleFromTarget","handleDragRelease","handleResizeRelease","ensurePositionInVisibleArea","visibleAreaWidth","visibleAreaHeight","componentWidth","componentHeight","newX","newY","adjustPositionWithinBounds","newPosition","ensureSizeInVisibleArea","sizeForCheck","newSize","originalWidth","originalHeight","adjustSizeWithinBounds","handleWindowResize","handleDrag","sizeOnStartTransform","pageVisibleX","pageVisibleY","maxX","maxY","newBounds","cleanups","resizeHandler","cursorStyle","actualPosition","useDraggable","getMinimumSize","currentSize","currentWidth","currentHeight","queryId","openTabsCount","useInterval","replyInfo","sendEventCallback","reloadFrameCallback","callback","handleSettingsButtonClick","handleRefreshClick","handleModalClose","handleCloseMoreAppsTab","handleTabClose","handleToggleClick","handleFullscreenClick","handleOpenMoreAppsTabClick","handleTabClick","tab","openBotChat","renderMenuItems","isAttachBot","renderMoreMenu","anchor","backButtonClassName","headerTextVar","r","g","hexToRgb","luma","getColorLuma","renderTabCurveBorder","fill","buildResizeHandleClass","handleClassName","RESIZE_HANDLE_CLASS_NAME","useHorizontalScroll","dialogRef","dialogStyle","dialogContent","shortName","renderActiveTab","noBackdropClose","BotTrustModal","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","handleBotTrustAccept","handleBotTrustDecline","AttachBotInstallModal","confirmAttachBotInstall","cancelAttachBotInstall","isTosAccepted","setIsTosAccepted","tosLabel","split","linkText","MINI_APP_TOS_URL","rel","isConfirmDisabled","DeleteFolderDialog","folder","closeDeleteChatFolderModal","deleteChatFolder","openDeleteChatFolderModal","renderingFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","folderId","isConfirmedForChatlist","COLORS","PremiumFeatureItem","isFontIcon","newIndex","colorA","colorB","ceil","lerpRgb","buttonClassName","fontIcon","SliderDots","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","isLast","isPreLast","isFirst","isPreFirst","isInvisible","PremiumLimitsCompare","leftValue","rightValue","floatingBadgeIcon","rightStyle","COLOR_START","COLOR_END","PremiumLimitPreview","colorStepProgress","lerp","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","play","isLowPriority","stickers","premium","PremiumFeaturePreviewStickers","setOffset","setSize","renderedStickers","cycleRestrict","STORY_FEATURE_TITLES","stories_order","stories_stealth","stories_views","stories_timer","stories_save","stories_caption","stories_link","STORY_FEATURE_DESCRIPTIONS","STORY_FEATURE_ICONS","STORY_FEATURE_ORDER","CIRCLE_SIZE","AVATAR_SIZES","giant","PremiumFeaturePreviewVideo","circleRef","dpr","useDevicePixelRatio","drawGradientCircle","segmentsCount","readSegmentsCount","readSegmentColor","maxSize","forPremiumPromo","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","wrapper","reverse","down","DeviceFrame","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","translations","saved_tags","last_seen","message_privacy","effects","todo","PREMIUM_FEATURE_DESCRIPTIONS","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","recommendedChannels","moreAccounts","LIMITS_DESCRIPTIONS","PremiumFeatureModal","promo","isPremium","limits","premiumPromoOrder","subscriptionOption","onClickSubscribe","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","PREMIUM_FEATURE_SECTIONS","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","filteredSections","subscriptionButtonText","months","currency","perMonthPrice","price","formatCurrency","handleLimitsScroll","scrollContainer","animateHorizontalScroll","then","handleSelectSlide","currentSection","hasHeaderBackdrop","scrollLeft","scrollLeftOriginal","reverseIndex","prevElement","reverseElement","toString","toggleExtraClass","PREMIUM_LIMITS_ORDER","defaultLimit","premiumLimit","PremiumFeaturePreviewStories","videoSections","shouldUseNewLang","videos","PREMIUM_BOTTOM_VIDEOS","renderTextFilters","PremiumSubscriptionOption","fullMonthlyAmount","isGiveaway","perMonth","isUserCountPlural","discount","handleChange","formatCurrencyAsString","STATUS_EMOJI_SIZE","PREMIUM_FEATURE_COLOR_ICONS","PremiumStatus","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumTranslate","PremiumTags","PremiumLastSeen","PremiumMessagePrivacy","PremiumEffects","fromUser","fromUserId","fromUserStatusEmoji","emojiStatus","customEmojis","documentId","fromUserStatusSet","selectStickerSet","stickerSetInfo","isSuccess","isGift","monthsAmount","toUser","toUserId","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","premiumSlug","premiumInvoiceSlug","premiumBotUsername","PremiumMainModal","closePremiumModal","requestConfetti","loadStickers","openStickerSet","isHeaderHidden","setHeaderHidden","setCurrentSection","selectedSubscriptionOption","setSubscriptionOption","handleOpenSection","handleResetSection","handleClickWithStartParam","handleChangeSubscriptionOption","foundOption","showConfetti","withStars","prevIsPremium","defaultOption","handleOpenStatusSet","monthOption","subscribeButtonText","CustomEmoji","getHeaderText","getHeaderDescription","ParticlesHeader","model","statusText","entities","statusEntities","renderFooterText","template","first","second","emoji","thumbCustomEmojiId","link","ItemPicker","notFoundText","noScrollRestore","isViewOnly","itemClassName","forceRenderAllItems","onDisabledClick","optionalProps","lockedSelectedValues","lockedUnselectedValues","timeoutId","selectedValues","selectedValue","lockedSelectedValuesSet","Set","lockedUnselectedValuesSet","sortedItemValuesList","lockedSelectedBucket","unlockedBucket","lockedUnselectableBucket","has","concat","handleItemClick","newSelectedValues","splice","onSelectedValuesChange","onSelectedValueChange","viewportValuesList","handleFilterChange","renderItem","itemOption","subLabel","isItemLoading","isAlwaysUnselected","isAlwaysSelected","isLocked","isChecked","inputElement","Radio","onlyInput","pickerList","padded","noResults","CountryPickerModal","selectionLimit","selectedCountryIds","setSelectedCountryIds","noPickerScrollRestore","country","iso2","defaultName","handleSelectedIdsChange","newSelectedIds","pickerSelector","pickerTitle","main","picker","GiveawayChannelPickerModal","giveawayChatId","initialSelectedIds","onSelectedIdsConfirmed","pendingChannelId","setPendingChannelId","isConfirmModalOpen","openConfirmModal","closeConfirmModal","setSelectedIds","channelIds","isChatSuperGroup","displayedChannelIds","foundChannelIds","handleSelectedChannelIdsChange","privateLinkChannelId","isChatPublic","confirmPrivateLinkChannelSelection","handleModalConfirm","PickerModal","shouldAdaptToSearch","withFixedHeight","confirmButtonText","GiveawayTypeOption","isLink","onClickAction","userNames","selectedMemberIds","displayText","members","adminMembersById","GiveawayUserPickerModal","memberIds","statusesById","adminIdsSet","sortUserIds","displayedMemberIds","filteredUserIds","isUserBot","handleSelectedMemberIdsChange","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","giveawayModal","gifts","selectedMemberList","selectedChannelList","selectedChannelIds","giveawayBoostPerPremiumLimit","giveawayBoostsPerPremium","isStarsGiftEnabled","userSelectionLimit","giveawayAddPeersMax","countrySelectionLimit","giveawayCountriesMax","general","prepaidGiveaway","starsGiftOptions","starOptions","GiveawayModal","GIVEAWAY_BOOST_PER_PREMIUM","GIVEAWAY_MAX_ADDITIONAL_COUNTRIES","GIVEAWAY_MAX_ADDITIONAL_USERS","closeGiveawayModal","launchPrepaidGiveaway","launchPrepaidStarsGiveaway","isCalendarOpened","openCalendar","closeCalendar","isCountryPickerModalOpen","openCountryPickerModal","closeCountryPickerModal","isUserPickerModalOpen","openUserPickerModal","closeUserPickerModal","isChannelPickerModalOpen","openChannelPickerModal","closeChannelPickerModal","TYPE_OPTIONS","GiftStar","customExpireDate","setCustomExpireDate","selectedRandomUserCount","setSelectedRandomUserCount","selectedGiveawayOption","setGiveawayOption","selectedStarOption","setSelectedStarOption","selectedSubscriberOption","setSelectedSubscriberOption","selectedMonthOption","setSelectedMonthOption","selectedUserIds","setSelectedUserIds","setSelectedChannelIds","shouldShowWinners","setShouldShowWinners","shouldShowPrizes","setShouldShowPrizes","prizeDescription","setPrizeDescription","dataPrepaidGiveaway","setDataPrepaidGiveaway","dataStarsPrepaidGiveaway","setDataStarsPrepaidGiveaway","isPremiumGiveaway","isStarsGiveaway","selectedUserCount","boostQuantity","boostStarsQuantity","yearlyBoosts","SUBSCRIBER_OPTIONS","monthQuantity","isStarsPrepaidGiveaway","isPremiumPrepaidGiveaway","selectedGift","gift","selectedStarsGift","stars","filteredGifts","STARS_CURRENCY_CODE","basicGift","userCountOptions","winner","winnerCountOptions","winners","quantity","handlePremiumClick","boostChannelId","additionalChannelIds","isOnlyForNewSubscribers","countries","areWinnersVisible","untilDate","confirmLaunchPrepaidGiveaway","giveawayId","paymentPurpose","handleRandomUserCountChange","newValue","handleWinnerCountChange","handlePrizeDescriptionChange","handleChangeSubscriberOption","handleChangeTypeOption","handleExpireDateChange","handleSetCountriesListChange","handleSelectedUserIdsChange","handleShouldShowWinnersChange","handleShouldShowPrizesChange","onClickActionHandler","handleStarClick","renderGiveawayOptionList","filteredChannelIds","deleteParticipantsHandler","iconClassName","subLabelClassName","formatDateTimeToString","PremiumLogo","boosts","RangeSliderWithMarks","rangeCount","marks","StarTopupOptionList","selectedStarCount","match","Link","isPrimary","renderPremiumFeaturesLink","GIVEAWAY_MAX_ADDITIONAL_CHANNELS","LIMIT_DESCRIPTION","uploadMaxFileparts","chatlistInvites","chatlistJoined","savedDialogsPinned","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","PremiumLimitReachedModal","closeLimitReachedModal","isClosing","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SLIDE_TRANSITION_DURATION","FOCUS_MARGIN","useStickerPickerObservers","idPrefix","stickerSetIntersectionsRef","activeSetIndex","setActiveSetIndex","observe","observeIntersectionForSet","freeze","freezeForSet","unfreeze","unfreezeForSet","useIntersectionObserver","rootRef","stickerSetIntersections","entry","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","observeIntersectionForShowingItems","freezeForShowingItems","unfreezeForShowingItems","throttleMs","margin","observeIntersectionForPlayingItems","observeIntersectionForCovers","stickerSetEl","isClose","animateScroll","maxDistance","StickerSetCover","stickerSet","STICKER_SIZE_PICKER_HEADER","observeIntersection","sharedCanvasRef","hasThumbnail","hasVideoThumb","hasAnimatedThumb","hasStaticThumb","customEmoji","useCustomEmoji","hasCustomColor","shouldUseTextColor","customColor","useDynamicColorListener","colorFilter","useColorFilter","useIsIntersecting","shouldPlay","shouldFallbackToSticker","IS_WEBM_SUPPORTED","firstStickerHash","getStickerMediaHash","firstStickerMediaData","mediaHash","coords","useCoordsInSharedCanvas","observeIntersectionForPlaying","selectIsAlwaysHighPriorityEmoji","sharedCanvas","sharedCanvasCoords","forceAlways","getFirstLetters","contentForStatusMenuContext","arg","StickerButton","noContextMenu","isStatusPicker","canViewSet","observeIntersectionForShowing","isSelected","shouldIgnorePremium","noShowPremium","withTranslucentThumb","clickArg","onFaveClick","onUnfaveClick","onRemoveRecentClick","onContextMenuOpen","onContextMenuClose","onContextMenuClick","isEffectEmoji","withSparkles","setEmojiStatus","isFree","hasEffect","isCustomEmoji","shouldLoad","isIntesectingForShowing","handleBeforeContextMenu","shouldRenderContextMenu","getLayout","withPortal","shouldAvoidNegativePosition","handleRemoveClick","handleContextRemoveRecent","handleContextUnfave","handleContextFave","handleSendQuiet","handleSendScheduled","handleOpenSet","handleEmojiStatusExpiresClick","until","shouldShowCloseButton","contextMenuItems","preventMessageInputBlurWithBubbling","Sparkles","preset","StickerView","isSmall","shouldLoop","shouldPreloadPreview","noLoad","noVideoOnMobile","withSharedAnimation","noFastClick","ReactionEmoji","loadAndPlay","sharedCanvasHqRef","isCustom","availableReaction","staticIcon","animationId","selectAnimation","getDocumentMediaHash","StarReaction","EMOJI_SIZE_PICKER","AnimatedIconWithPreview","collectibleStatuses","collectibleEmojiStatuses","statuses","StickerSet","isNearActive","favoriteStickers","isReactionPicker","shouldHideHeader","withDefaultTopicIcon","selectedReactionIds","withDefaultStatusIcon","isChatEmojiSet","isChatStickerSet","isTranslucent","noContextMenus","onReactionSelect","onReactionContext","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isStatusCollectible","COLLECTIBLE_STATUS_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isPopular","POPULAR_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","accessHash","isInstalled","installedDate","isArchived","canCut","EFFECT_EMOJIS_SET_ID","EFFECT_STICKERS_SET_ID","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","collectibleEmojiIdsSet","withAddSetButton","addSetButtonText","pill","grey","reactionId","isHqEmoji","canvasRef","HEADER_BUTTON_WIDTH","FADED_BUTTON_SET_IDS","STICKER_SET_IDS_WITH_COVER","setsById","stickerSetsById","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","recentReactions","topReactions","defaultTags","addedCustomEmojiIds","added","setIds","canAnimate","selectCanPlayAnimatedEmojis","defaultTopicIconsId","defaultStatusIconsId","chatEmojiSetId","emojiSet","isWithPaidReaction","isPaidReactionAvailable","defaultTagReactions","CustomEmojiPicker","pickerListClassName","withDefaultTopicIcons","onCustomEmojiSelect","handleContentScroll","shouldHideTopBorder","pickTruthy","collectibleStatusEmojis","collectibleStatusEmojiIds","prefix","canLoadAndPlay","areAddedLoaded","allSets","defaultSets","TOP_SYMBOL_SET_ID","topReactionsSlice","unshift","cleanRecentReactions","some","topReaction","cleanAvailableReactions","isInactive","allRecentReactions","defaultStatusIconsPack","uniqueByField","defaultTopicIconsPack","userSetIds","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","useAsyncRendering","shouldRenderContent","newLeft","handleEmojiSelect","pickerStyles","headerClassName","listClassName","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","isFaded","areFeaturedStickersLoaded","selectIsContextMenuTranslucent","StatusPickerMenu","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","CUSTOM_EMOJI_SIZE","SuggestedStatusModal","closeSuggestedStatusModal","sendWebAppEvent","renderingModal","mockPeerWithStatus","formatShortDuration","handleSetStatus","expires","referrerWebAppKey","hasAbsoluteCloseButton","loopLimit","PeerChip","mockPeer","withEmojiStatus","getFirstAvailableBoost","myBoosts","boost","firstBoost","prevBoostedChat","BoostModal","applyBoost","closeBoostModal","loadFullChat","isReplaceModalOpen","openReplaceModal","closeReplaceModal","isWaitDialogOpen","openWaitDialog","closeWaitDialog","isPremiumDialogOpen","openPremiumDialog","closePremiumDialog","chatTitle","boostedChatTitle","isStatusLoaded","isBoosted","leftText","rightText","descriptionText","canBoostMore","boostStatus","hasMyBoost","areBoostsInDifferentChannels","every","currentLevel","hasNextLevel","levelProgress","remainingBoosts","isMaxLevel","getBoostProgressInfo","hasBoost","moreBoosts","modalTitle","boostsLeftToUnrestrict","boostsToUnrestrict","boostsApplied","boostTimes","isBoostDisabled","isReplacingBoost","handleApplyBoost","slots","slot","handleProceedPremium","handleButtonClick","PremiumProgress","floatingBadgeText","isOnlyConfirm","chatMessage","GiftCodeModal","closeGiftCodeModal","applyGiftCode","canUse","toId","usedAt","handleOpenGiveaway","giveawayMessageId","modalData","LinkField","tableData","isFromGiveaway","TableInfoModal","getClosestEntry","arr","curr","selfDestructAccountDays","DeleteAccountModal","closeDeleteAccountModal","setAccountTTL","selectedOption","setSelectedOption","optionToDays","initialSelectedOption","ACCOUNT_TTL_OPTIONS","days","onCloseHandler","withIcon","verifyAgeBotUsername","AgeVerificationModal","closeAgeVerificationModal","openChatByUsername","handleVerifyAge","shouldStartMainApp","username","iconWrapper","mainText","ChatlistAlready","invite","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","missingPeerIds","hasChatsToAdd","isNew","alreadyPeerIds","newChatsCount","noCustomEmojiPlayback","noTitleAnimations","handleSelectionToggle","areAllSelected","pickerWrapper","pickerHeader","pickerHeaderInfo","selectionToggle","Badge","buttonBadge","isAlternateColor","ChatlistDelete","suggestedPeerIds","leaveChatlist","ChatlistNew","joinedIds","isNotJoined","selectedCount","removal","selectChatFolder","ChatlistInviteModal","renderingInfo","renderingFolderTitle","folderTabNumber","renderContent","folderTitle","foldersWrapper","folders","Tab","badgeCount","isBadgeActive","ChatInviteModal","acceptChatInvite","closeChatInviteModal","participantsRef","prevModal","usePrevious","hash","inviteInfo","about","isBroadcast","participantIds","participantsCount","isRequestNeeded","handleAccept","acceptLangKey","requestToJoinLangKey","customPeer","getCustomPeerFromInvite","participants","withVideo","participantCount","participant","minLevelToRestrictAds","channelRestrictAdsLevelMin","AboutAdsModal","closeAboutAdsModal","moreMenuRef","canReport","additionalInfo","sponsorInfo","isMonetizationSharing","renderingIsNewDesign","regularAdContent","SafeLink","listItemData","TableAboutModal","headerIconName","withSeparator","SponsoredMessageContextMenuContainer","triggerRef","shouldSkipAbout","onItemClick","AboutMonetizationModal","blockchainText","monetizationTitle","specialReplacement","twoFaSettings","hint","passwordHint","VerificationMonetizationModal","closeMonetizationVerificationModal","clearMonetizationVerificationError","processMonetizationRevenueWithdrawalUrl","shouldShowPassword","setShouldShowPassword","password","currentPassword","handleClearError","PasswordForm","shouldShowSubmit","errorKey","withRegular","clearError","shouldResetValue","onChangePasswordVisibility","EmojiStatusAccessModal","closeEmojiStatusAccessModal","toggleUserEmojiStatusPermission","loadDefaultStatusIcons","currentStatusIndex","setCurrentStatusIndex","totalCount","prevIndex","renderPickerItem","chatItem","itemName","isBotAccessEmojiGranted","renderStatusText","LocationAccessModal","closeLocationAccessModal","toggleUserLocationPermission","renderInfo","ReportAdModal","reportSponsored","closeReportAdModal","openPreviousReportAdModal","transitionRef","handleOptionClick","renderingSection","renderingDepth","sectionDepth","sections","bottomText","hasSubtitle","ACTIVE_SLIDE_CLASS_NAME","handleAnimationStart","TO_SLIDE_CLASS_NAME","narrow","secondaryIcon","ReportModal","reportMessages","closeReportModal","openPreviousReportModal","setText","subject","handleTextChange","closeReportMessageModalHandler","sendMessageReportHandler","Report","TextArea","isOptional","maxLengthIndicator","noReplaceNewlines","isBlurred","isBackgroundBlurred","patternColor","background","customBackground","selectThemeValues","PreparedMessageModal","closePreparedInlineMessageModal","openSharePreparedMessageModal","customBackgroundValue","useCustomBackground","handleOpenClick","localMessage","getMockPreparedMessageFromResult","bgClassName","inert","Message","noComments","noReplies","appearanceOrder","isJustAdded","isFirstInGroup","isLastInGroup","isLastInList","isFirstInDocumentGroup","isLastInDocumentGroup","starsBalance","balance","isStarsBalanceModalOpen","starsBalanceModal","SharePreparedMessageModal","closeSharePreparedMessageModal","sendInlineBotResult","updateSharePreparedMessageModalSendArgs","pendingSendArgs","starsForSendMessage","closeConfirmDialog","closeConfirmModalPayForMessage","dialogHandler","paymentMessageConfirmDialogHandler","shouldAutoApprove","shouldPaidMessageAutoApprove","setAutoApprove","setShouldPaidMessageAutoApprove","handleWithConfirmation","handleActionWithPaymentConfirmation","usePaidMessageConfirmation","handleSend","handleSendWithPaymentConfirmation","handleClosePaymentMessageConfirmDialog","peerName","PaymentMessageConfirmDialog","userName","messagePriceInStars","messagesCount","starBalance","currentDraft","selectDraft","maxStarsAmount","starsSuggestedPostAmountMax","STARS_SUGGESTED_POST_AMOUNT_MAX","minStarsAmount","starsSuggestedPostAmountMin","STARS_SUGGESTED_POST_AMOUNT_MIN","ageMinSeconds","starsSuggestedPostAgeMin","STARS_SUGGESTED_POST_AGE_MIN","futureMin","starsSuggestedPostFutureMin","STARS_SUGGESTED_POST_FUTURE_MIN","futureMax","starsSuggestedPostFutureMax","STARS_SUGGESTED_POST_FUTURE_MAX","tonMaxAmount","tonSuggestedPostAmountMax","TON_SUGGESTED_POST_AMOUNT_MAX","tonMinAmount","tonSuggestedPostAmountMin","TON_SUGGESTED_POST_AMOUNT_MIN","isMonoforumAdmin","tonBalance","ton","SuggestMessageModal","closeSuggestMessageModal","updateDraftSuggestedPostInfo","openStarsBalanceModal","currentSuggestedPostInfo","suggestedPostInfo","currentReplyInfo","isInSuggestChangesMode","currencyAmount","setCurrencyAmount","selectedCurrency","setSelectedCurrency","scheduleDate","setScheduleDate","TON_CURRENCY_CODE","convertTonFromNanos","isCurrencyStars","defaultSelectedTime","handleAmountChange","number","isNaN","currentMaxAmount","handleAnytimeClick","currentMinAmount","handleOffer","neededAmount","convertTonToNanos","topup","balanceNeeded","nanos","modalHeader","form","currencySelector","currencyButton","currencyIcon","formatStarsAsText","formatTonAsText","formatScheduledDateTime","autoComplete","readOnly","timeInputIcon","offerButton","formatTonAsIcon","isAdmin","commissionPermille","starsSuggestedPostCommissionPermille","STARS_SUGGESTED_POST_COMMISSION_PERMILLE","tonCommissionPermille","tonSuggestedPostCommissionPermille","TON_SUGGESTED_POST_COMMISSION_PERMILLE","minAge","SuggestedPostApprovalModal","closeSuggestedPostApprovalModal","approveSuggestedPost","selectedScheduleDate","setSelectedScheduleDate","handleApprove","handleCalendarDateChange","handleCalendarSubmit","handlePublishNow","handleNext","senderName","getPeerFullTitle","question","questionText","commission","amountWithCommission","formattedAmount","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","setIsLoading","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","sendGifs","checkMedia","mediaPermissions","v","sendMedia","assign","embedLinks","sendPlain","sendMessages","resetPermissions","permissionKeyList","fullInfo","hasLinkedChat","linkedChatId","PermissionCheckboxList","isMediaDropdownOpen","setIsMediaDropdownOpen","shiftedClassName","dropdownClassName","withCheckbox","getControlIsDisabled","permissionGroup","shouldDisablePermissionForPublicGroup","countCheckedPermissions","handleOpenMediaDropdown","handleDisabledClick","blocking","labelText","rightIcon","onClickLabel","sendPhotos","sendVideos","sendStickers","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","deleteMessageModal","canDeleteForAll","selectCanDeleteSelectedMessages","isSuperGroup","contactName","getPrivateChatUserId","chatBot","isSystemBot","selectBot","canBanUsers","isCreator","isChatWithBot","selectIsChatWithBot","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","DeleteMessageModal","closeDeleteMessageModal","deleteMessages","reportChannelSpam","deleteChatMember","deleteScheduledMessages","exitMessageSelectMode","updateChatMemberBannedRights","deleteParticipantHistory","defaultBannedRights","peerIdsToDeleteAll","setPeerIdsToDeleteAll","peerIdsToBan","setPeerIdsToBan","peerIdsToReportSpam","setPeerIdsToReportSpam","isAdditionalOptionsVisible","setIsAdditionalOptionsVisible","shouldDeleteForAll","setShouldDeleteForAll","peerList","senderArray","getSendersFromSelectedMessages","linkedMonoforumId","buildNestedOptionListWithAvatars","member","peerListToDeleteAll","peerListToReportSpam","peerListToBan","isCurrentUserInList","shouldShowOption","peerNames","buildCollectionByCallback","ACTION_SPAM_OPTION","nestedOptions","opt","ACTION_DELETE_OPTION","ACTION_BAN_OPTION","toggleAdditionalOptions","filterMessageIdByPeerId","selectedMessageIdList","msgId","selectSenderFromMessage","handleReportSpam","userMessagesMap","messageIdList","participantId","handleDeleteMessages","filteredMessageIdList","handleDeleteAllPeerMessages","peerIdList","handleDeleteMember","filteredUserIdList","handleUpdateChatMemberBannedRights","bannedRights","handleDeleteMessageList","CheckboxGroup","nestedCheckbox","isPrivateChat","canPinForAll","PinMessageModal","pinMessage","shouldPinForAll","setShouldPinForAll","handlePinMessage","isUnpin","isOneSide","isSilent","UnpinAllMessagesModal","pinnedMessagesCount","onUnpin","shouldWarnAboutSvg","selectCanReportSelectedMessages","selectCanDownloadSelectedMessages","selectedMessageIds","selectedMessages","hasProtectedMessage","selectHasProtectedMessage","selectCanForwardMessages","hasSvgs","selectHasSvg","isShareMessageModalOpen","isShareMessageModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","MessageSelectToolbar","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","setSharedSettingOption","handleCopy","useHotkeys","useCopySelectedMessages","isSvgDialogOpen","openSvgDialog","closeSvgDialog","shouldNotWarnAboutSvg","setShouldNotWarnAboutSvg","handleExitMessageSelectMode","handleDelete","onBackspace","onEsc","handleMessageDownload","handleSvgConfirm","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","seenByDates","closeSeenByModal","renderingSeenByDates","leftId","rightId","handleCloseSeenByModal","CLOSE_ANIMATION_DURATION","isReadDate","privacySettingsNoticeModal","PrivacySettingsNoticeModal","updateGlobalPrivacySettings","closePrivacySettingsNoticeModal","setPrivacyVisibility","loadUser","handleShowReadTime","shouldHideReadMarks","handleShowLastSeen","privacyKey","onSuccess","handleOpenPremium","ReadTime","LastSeen","Separator","reactorModal","reactors","ReactorListModal","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","allReactions","uniqueReactions","seenByUserIds","flatMap","peerReactions","reactor","seenByUser","addedDate","avatarSize","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","EmojiInteractionAnimation","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","endHeavyAnimation","effectHash","effectTgsUrl","startSize","isReversed","quality","chatLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","ChatLanguageModal","requestMessageTranslation","closeChatLanguageModal","setSettingOption","requestChatTranslation","handleSelect","langCode","toLanguageCode","translationLanguage","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","highlight","CollectibleInfoModal","closeCollectibleInfoModal","isUsername","handleOpenUrl","shouldSkipModal","formatUsername","collectible","copyTextToClipboard","formattedCollectible","purchaseDate","cryptoCurrency","cryptoAmount","Mention","Fragment","chip","createMapStateToProps","props","currentType","isVoice","byChatId","globalMessagesByChatId","messages","searchChatId","AudioResults","searchMessagesGlobal","openAudioPlayer","foundMessages","parseSearchResultKey","handleMessageFocus","handlePlayAudio","canRenderContents","NothingFound","shouldDrawDateDivider","toYearMonth","getMessageDownloadableMedia","formatMonthAndYear","Audio","AudioOrigin","Search","getSenderName","onDateClick","buttonRef","activeElement","selectIsChatPinned","getIsChatMuted","selectNotifyDefaults","selectNotifyException","canChangeFolder","chatFolders","LeftSearchResultChat","withUsername","withOpenAppButton","isMuteModalOpen","openMuteModal","closeMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","handleChatFolderChange","handleMute","useChatContextActions","handleOpenApp","useSelectWithEnter","storyViewerOrigin","hasMainMiniApp","MuteChatModal","ChatFolderModal","BotAppResults","recentSet","withoutRecent","handleChatClick","shouldReplaceHistory","renderSummary","isRoundVideo","renderMessageSummary","isSpoiler","getMessageIsSpoiler","getMessageVideo","privateChatUserId","privateChatUser","ChatMessage","mediaThumbnail","getMessageSticker","getMessageMediaThumbDataUri","mediaBlobUrl","getMessageMediaHash","getMessageRoundVideo","formatPastTimeShort","DateSuggest","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","selectTopic","LeftSearchResultTopic","foundTopicIds","ChatMessageResults","dateSearchQuery","onSearchDateSelect","openThread","handleTopicClick","nothingFound","LeftSearchResultSponsored","sponsoredPeer","viewSponsored","useOnIntersect","intersectionRatio","handleBadgeClick","handleBadgeMouseDown","BadgeButton","topUserIds","topPeers","recentlyFoundChatIds","RecentContacts","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","handleClearRecentlyFoundChats","isChannelList","globalResults","localResults","globalPeerIds","accountPeerIds","similarChannelIds","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","suggestedChannelIds","ChatResults","setGlobalSearchChatId","loadChannelRecommendations","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","searchContext","setSearchContext","context","handlePickerItemClick","getSearchContextCaption","handleClickContext","itemPlaceholderClass","startsWith","filteredChatIds","getOrderedIds","ALL_FOLDER_ID","localChatIds","contactIdsWithMe","localPeerIds","filteredIds","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","handleClickShowMoreLocal","handleClickShowMoreGlobal","actualFoundIds","isMessagesFetching","shouldRenderTopPeers","shouldRenderMessagesSection","noScrollRestoreOnTop","customIcon","shouldCleanup","CURRENT_TYPE","FileResults","observeIntersectionForMedia","getMessageDocument","Document","withDate","datetime","smaller","LinkResults","WebLink","onMessageClick","MediaResults","handleSelectMedia","isMediaGrid","isMessageList","Media","TABS","GlobalSearchContent","ChannelList","BotApps","Links","Files","Music","Voice","CHAT_TABS","currentContent","LeftSearch","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","handleSearchDateSelect","TabList","onSwitchTab","renderCount","INITIAL_STATE","email","twoFaReducer","payload","maxChats","selectCurrentLimit","SettingsFoldersChatFilters","mode","dispatch","onSaveFilter","openLimitReachedModal","chatFilter","selectedChatIds","selectedChatTypes","selectChatFilters","chatTypes","CUSTOM_PEER_INCLUDED_CHAT_TYPES","CUSTOM_PEER_EXCLUDED_CHAT_TYPES","isTouched","setIsTouched","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","shouldHideChatTypes","isChatList","chatIds","newFilter","includeFilters","includedChatIds","excludeFilters","excludedChatIds","handleSelectedChatTypesChange","newFilters","categories","selectedCategories","categoryPlaceholderKey","withPeerTypes","onSelectedCategoriesChange","ERROR_NO_TITLE","ERROR_NO_CHATS","invites","chatListCount","el","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","maxInviteLinks","maxChatLists","SettingsFoldersEdit","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","onSaveFolder","loadChatlistInvites","isCreating","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","includedChatTypes","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleCreateInviteClick","selectCanShareFolder","handleEditInviteClick","renderChats","visibleChatIds","leftChatsCount","clickHandler","chatType","typeKey","renderChatType","STICKER_SIZE_FOLDER_SETTINGS","FoldersNew","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","SettingsFoldersMain","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","sortChatFolders","setState","orderedFolderIds","dragOrderIds","draggedIndex","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","getFolderDescriptionText","handleCreateFolderFromRecommended","translation","handleDragEnd","canCreateNewFolder","FoldersAll","isBlocked","isDragged","draggedTop","Draggable","onDragEnd","knobStyle","isStatic","allowSelection","shareFolderScreen","SettingsShareChatlist","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","handleRevoke","pinnedChatIds","unlockedIds","partition","selectCanInviteToChat","isFirstRenderRef","prevUrl","handleClickDisabled","chatsCount","AnimatedIcon","FoldersShare","withShare","onRevoke","lockedUnselectedIds","SettingsFolders","currentScreen","shownScreen","openShareChatFolderModal","editChatFolder","openSettingsScreen","handleReset","SettingsScreens","FoldersCreateFolder","FoldersEditFolder","FoldersEditFolderFromChatList","FoldersEditFolderInvites","FoldersIncludedChats","FoldersExcludedChats","screen","saveState","newState","folderUpdate","handleSaveFolder","handleSaveFilter","handleEditFolder","handleAddIncludedChats","FoldersIncludedChatsFromChatList","handleAddExcludedChats","FoldersExcludedChatsFromChatList","handleShareFolder","noRequestNextScreen","handleOpenInvite","Folders","SettingsPasswordForm","shouldDisablePasswordManager","expectedPassword","validationError","setValidationError","newPassword","SettingsPasscodeCongratulations","fullReset","STICKER_SIZE_PASSCODE","Congratulations","SettingsPasscodeEnabled","Lock","previewUrl","lockPreviewUrl","PasscodeChangePasscodeCurrent","PasscodeTurnOff","SettingsPasscodeStart","passcode","SettingsPasscode","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","handleStartWizard","PasscodeNewPasscode","handleNewPassword","PasscodeNewPasscodeConfirm","handleNewPasswordConfirm","PasscodeCongratulations","handleChangePasswordCurrent","currentPasscode","decryptSession","PasscodeChangePasscodeNew","handleChangePasswordNew","PasscodeChangePasscodeConfirm","handleTurnOff","Privacy","PasscodeDisabled","SettingsPasscodeForm","PasscodeEnabled","DEFAULT_POINTS","getProgress","points","pointIndex","findIndex","prevPoint","nextPoint","pointValue","PaidMessageSlider","canChangeChargeForMessages","mainClassName","step","starsUsdWithdrawRateX1000","starsUsdWithdrawRate","configStarsPaidMessageCommissionPermille","starsPaidMessageCommissionPermille","starsPaidMessageAmountMax","DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES","isGroupChat","chargeForMessages","handleChargeForMessagesChange","handleUnlockWithPremium","MINIMUM_CHARGE_FOR_MESSAGES","noForcedUpperCase","percent","formatPercent","premiumSection","handleOpenPremiumModal","StarIcon","nonContactPeersPaidStars","selectNonContactPeersPaidStars","noPaidReactionsForUsersCount","noPaidMessages","shouldNewNonContactPeersRequirePremium","selectNewNoncontactPeersRequirePremium","shouldChargeForMessages","DEFAULT_CHARGE_FOR_MESSAGES","canLimitNewMessagesWithoutPremium","canChargeForMessages","starsPaidMessagesAvailable","canChangeForContactsAndPremium","setChargeForMessages","hasShownNotification","setHasShownNotification","prevSelectedValue","chatInvite","PrivacyGroupChats","actionText","phoneCall","PrivacyPhoneCall","PrivacyLockedOption","hidden","isCanCheckedInDisabled","privacyValue","updateGlobalPrivacySettingsWithDebounced","privacyDescription","PaidMessagePrice","itemSubtitle","PrivacyNoPaidMessages","renderSectionNoPaidMessagesForUsers","PremiumStatusItem","getSessionIcon","session","platform","device","deviceModel","systemVersion","getLocation","region","activeSessions","byHash","SettingsActiveSession","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","headerButton","iconDevice","dateActive","box","appVersion","ip","note","actionHeader","actionName","SettingsActiveSessions","orderedHashes","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","activeWebSessions","SettingsActiveWebsite","terminateWebAuthorization","renderingBot","browser","SettingsActiveWebsites","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","clearHelp","StickerSetCard","handleCardClick","CHAT_HEIGHT_PX","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","byKey","customEmojiSetIds","canPlayAnimatedEmojis","SettingsCustomEmoji","shouldSuggestCustomEmoji","stickerSettingsRef","handleStickerSetClick","handleSuggestCustomEmojiChange","customEmojiSets","SettingsDataStorage","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderContentSizeSlider","renderValue","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","doNotTranslate","SettingsDoNotTranslate","language","displayedOptions","setDisplayedOptions","displayedOptionList","currentLanguageOption","otherOptionList","prevLanguage","ManageUsernames","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","prevUsernameList","orderedUsernames","dragOrderUsernames","handleCopyUsername","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","usernameData","LINK_PREFIX_REGEX","runDebouncedForCheckUsername","UsernameInput","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","MIN_UPDATE_USERNAME_LENGTH","MAX_USERNAME_LENGTH","USERNAME_REGEX","test","handleUsernameChange","newUsername","isUsernameValid","success","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","currentFirstName","currentLastName","currentUserFullInfo","currentAvatarHash","getChatAvatarHash","currentBio","bio","SettingsEditProfile","loadCurrentUser","updateProfile","firstEditableUsername","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","InProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","Complete","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","renderPurchaseLink","shouldForceHttpTransport","shouldAllowHttpTransport","shouldCollectDebugLogs","shouldDebugExportedSenders","SettingsExperimental","requestWave","snapButtonRef","isSnapButtonAnimating","setIsSnapButtonAnimating","isAutoUpdateEnabled","setIsAutoUpdateEnabled","electron","getIsAutoUpdateEnabled","handleDownloadLog","file","File","getDebugLogs","DEBUG_LOG_FILENAME","URL","createObjectURL","handleIsAutoUpdateEnabledChange","handleRequestWave","startX","startY","handleRequestConfetti","handleSnap","animateSnap","Experimental","IS_WAVE_TRANSFORM_SUPPORTED","IS_SNAP_EFFECT_SUPPORTED","IS_ELECTRON","shouldUseSystemTheme","messageSendKeyCombo","messageTextSize","timeFormat","SettingsGeneral","isMobileDevice","timeFormatOptions","appearanceThemeOptions","keyboardSendOptions","handleMessageTextSizeChange","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","isTrayIconEnabled","setIsTrayIconEnabled","getIsTrayIconEnabled","handleIsTrayIconEnabledChange","GeneralChatBackground","IS_WINDOWS","WallpaperTile","wallpaper","localMediaHash","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","loadedWallpapers","SettingsGeneralBackground","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","GeneralChatBackgroundColor","handleResetToDefault","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","SettingsHeader","editedFolderId","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","currentAmountRef","useMultiClick","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","EditProfile","General","QuickReaction","DataStorage","Language","DoNotTranslate","Stickers","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyForwarding","PrivacyVoiceMessages","PrivacyMessages","PrivacyLastSeenAllowedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyBioAllowedContacts","PrivacyGroupChatsAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioDeniedContacts","PrivacyGroupChatsDeniedContacts","PrivacyPhoneNumberAllowedContacts","PrivacyBirthdayAllowedContacts","PrivacyGiftsAllowedContacts","PrivacyForwardingAllowedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsDeniedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PDeniedContacts","Performance","ActiveSessions","ActiveWebsites","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaNewPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaChangePasswordHint","TwoFaNewPasswordEmail","TwoFaRecoveryEmail","TwoFaNewPasswordEmailCode","TwoFaRecoveryEmailCode","TwoFaCongratulations","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","canTranslate","canTranslateChats","languages","SettingsLanguage","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","canTranslateChatsEnabled","oldSetLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","handleShouldTranslateChange","handleShouldTranslateChatsChange","handleShouldTranslateChatsClick","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","sessionCount","SettingsMain","openSupportChat","openGiftRecipientPicker","isSupportDialogOpen","openSupportDialog","closeSupportDialog","isPreload","handleOpenSupport","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","isInSettings","languageInfo","formatStarsAmount","convertCurrencyFromBaseUnit","FAQ_URL","PRIVACY_URL","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","SettingsNotifications","notifyDefaults","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","areNotificationsSupported","checkIfNotificationsSupported","areOfflineNotificationsSupported","checkIfOfflinePushFailed","handleSettingsChange","peerType","setting","currentIsMuted","mutedUntil","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","groups","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","selectPerformanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MID","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","handleAnimationLevelChange","newLevel","performance","animationLevel","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","hasPassword","canChangeSensitive","shouldArchiveAndMuteNewNonContact","accountDaysTtl","hasPasscode","canDisplayChatInTitle","isCurrentUserFrozen","blockedCount","webAuthCount","canDisplayAutoarchiveSetting","needAgeVideoVerification","canSetPasscode","selectCanSetPasscode","SettingsPrivacy","openDeleteAccountModal","loadPrivacySettings","loadBlockedUsers","loadGlobalPrivacySettings","loadWebAuthorizations","loadAccountDaysTtl","openAgeVerificationModal","handleArchiveAndMuteChange","handleChatInTitleChange","handleUpdateContentSettings","handleAgeVerification","handleOpenDeleteAccountModal","dayOption","getVisibilityValue","shouldAllowPremium","botsPrivacy","isVisibilityEverybody","shouldShowBotsString","blockCount","blockChatIds","allowCount","allowChatIds","total","exceptionString","conjunction","lastSeen","profilePhoto","birthday","forwards","allowDisabledClick","voiceMessages","blockedIds","localContactIds","userSearch","localUserIds","BlockUserModal","setUserSearchQuery","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","SettingsPrivacyBlockedUsers","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","userMainUsername","renderContact","getPrivacyKey","PrivacyPhoneP2P","PrivacyAddByPhone","disallowedGifts","SettingsAcceptedGift","handleOpenTelegramPremiumModal","handleLimitedEditionChange","shouldDisallowLimitedStarGifts","handleUnlimitedEditionChange","shouldDisallowUnlimitedStarGifts","handleUniqueChange","shouldDisallowUniqueStarGifts","handlePremiumSubscriptionChange","shouldDisallowPremiumGifts","selectShouldHideReadMarks","SettingsPrivacyLastSeen","canShowHideReadTime","handleChangeShouldHideReadMarks","SettingsPrivacyPublicProfilePhoto","hasCurrentUserFullInfo","currentUserFallbackPhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","PrivacySubsection","isPremiumRequired","visibilityOptions","hasNobody","primaryExceptionLists","shouldShowDenied","shouldShowAllowed","headerText","prepareSubtitle","userIdsCount","chatIdsCount","isAllowBots","userCountString","chatCountString","allowedString","blockString","allowedContactsScreen","deniedContactsScreen","primaryPrivacy","secondaryPrivacy","shouldDisplayGiftsButton","addByPhone","phoneP2P","SettingsPrivacyVisibility","handleShowGiftIconInChats","secondaryScreen","PREMIUM_CATEGORY","CUSTOM_PEER_PREMIUM","getCurrentPrivacySettings","SettingsPrivacyVisibilityExceptionList","isAllowList","withPremiumCategory","withMiniAppsCategory","usersOnly","setPrivacySettings","customPeerBots","isCustomPeer","avatarIcon","isAvatarSquare","peerColorId","miniAppsCategory","selectedContactIds","selectedCategoryTypes","newSelectedCategoryTypes","setNewSelectedCategoryTypes","SERVICE_NOTIFICATIONS_USER_ID","filteredChats","handleSelectedCategoriesChange","updatedIds","isPremiumAllowed","config","selectedReaction","defaultReaction","SettingsQuickReaction","setDefaultReaction","emoticon","addedSetIds","SettingsStickers","shouldSuggestStickers","shouldUpdateStickerSetOrder","handleSuggestStickerSetOrderChange","handleSuggestStickersChange","stickerSets","SettingsTwoFaCongratulations","recoveryEmail","animatedEmoji","selectAnimatedEmoji","codeLength","waitingEmailCodeLength","SettingsTwoFaEmailCode","focusDelayTimeoutMs","setValue","handleInputChange","AnimatedIconFromSticker","SettingsTwoFaEnabled","SettingsTwoFaSkippableForm","shouldConfirm","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleSkip","handleSkipConfirm","SettingsTwoFaStart","SettingsTwoFa","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleNewPasswordHint","handleNewPasswordEmail","handleChangePasswordConfirm","handleChangePasswordHint","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaPassword","TRANSITION_RENDER_COUNT","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_BIO_SCREENS","PRIVACY_BIRTHDAY_SCREENS","PRIVACY_GIFTS_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","PRIVACY_MESSAGES_SCREENS","Settings","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","useMarkScrolled","forceReturnToChatList","isFromSettings","renderCurrentSectionContent","isScreenActive","activeScreen","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","Main","SettingsGeneralBackgroundColor","SettingsPerformance","LAYERS_ANIMATION_NAME","shouldWrap","withSwipeControl","_isFrom","_currentKey","userStatusesById","ContactList","openNewContactDialog","isSearching","NewChatStep1","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","foundContactIds","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","NewChatStep2","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","memberFirstNames","generatedChatName","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","NewChat","openLeftColumnContent","newChatMemberIds","setNewChatMemberIds","contentKey","NewChannelStep2","NewGroupStep2","changeSelectedMemberIdsHandler","isSelection","isStepActive","NewChannelStep1","NewGroupStep1","ArchivedChats","isForumPanelOpen","archiveSettings","isStoryRibbonShown","onTopicSearch","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","shouldRenderStoryRibbon","storyRibbonClassNames","isStoryRibbonClosing","StoryToggler","canShow","folderType","isMainList","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","idsToRemove","idsToAdd","MuteDuration","muteUntilOption","setMuteUntilOption","Forever","updateChatMutedState","updateTopicMutedState","muteForOptions","OneHour","FourHours","EightHours","OneDay","ThreeDays","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isMessageThread","isCommentsInfo","fromChannelId","canSendStickers","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","StickerSetModal","prevStickerSet","renderingStickerSet","isAdded","requestCalendar","calendar","useSchedule","isScheduleRequested","isPreloadedGlobally","scheduledAt","handleCopyLink","suffix","renderHeader","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","CustomEmojiSetsModal","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","sets","teactFastList","customEmojiSet","setCard","BOT_BUTTONS","help","isRestricted","selectIsChatRestricted","canAddContact","getCanAddContact","isMainThread","currentChatId","currentThreadId","canReportChat","canGift","selectCanGift","canCreateTopic","isUserRightBanned","canEditTopic","getCanManageTopic","canManage","selectCanManage","selectCanTranslateChat","isTranslationDisabled","savedDialog","getIsSavedDialog","isTopic","isForumAsMessages","canDeleteChat","getCanDeleteChat","botCommands","commands","botPrivacyPolicyUrl","privacyPolicyUrl","isChatInfoShown","isRightColumnShown","selectIsRightColumnShown","isBot","HeaderMenuContainer","withExtraActions","withForumActions","canStartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canViewMonetization","canViewBoosts","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","canShowBoostModal","channelMonoforumId","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","openFrozenAccountModal","requestMasterAndRequestCall","toggleStatistics","openMonetizationStatistics","openBoostStatistics","openGiftModal","openThreadWithInfo","openCreateTopicPanel","openEditTopicPanel","toggleManagement","togglePeerTranslations","setViewForumAsMessages","openBoostModal","setIsMenuOpen","shouldCloseFast","setShouldCloseFast","setIsDeleteModalOpen","setIsMuteModalOpen","isViewGroupInfoShown","areAllGiftsDisallowed","closeMenu","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleUnmuteClick","handleMuteClick","handleCreateTopicClick","handleEditClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftClick","forUserId","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleMonetizationClick","handleBoostClick","handleEnableTranslations","handleSelectMessages","handleOpenAsMessages","handleBlock","handleUnblock","handleSendChannelMessage","botButtons","commandButtons","cmd","hasPrivacyCommand","deleteTitle","MenuSeparator","DeleteChatModal","isSavedDialog","MiddleSearchResult","senderPeer","messageChat","shouldShowChat","hiddenForwardTitle","hiddenUserName","getMessageSenderName","topRow","LastMessageMeta","meta","MessageSummary","truncateLength","CHANNELS_PEER","titleKey","RESULT_ITEM_CLASS_NAME","runDebouncedForSearch","requestedQuery","savedTag","fetchingQuery","isHashtag","selectCurrentMiddleSearch","lastSearchQuery","savedTags","savedReactionTags","monoforumChat","isHistoryCalendarOpen","isHashtagQuery","searchType","MiddleSearch","updateMiddleSearch","resetMiddleSearch","performMiddleSearch","closeMiddleSearch","openHistoryCalendar","loadSavedReactionTags","shouldCancelSearchRef","focusedIndex","setFocusedIndex","canFocusNewer","canFocusOlder","isFullyHidden","setIsFullyHidden","hiddenTimerRef","maybeLongPressActiveRef","isFocused","markFocused","markBlurred","isViewAsList","setIsViewAsList","refs","handleClickOutside","useClickOutside","hasResultsContainer","isOnlyHash","areResultsEmpty","hasResultsDropdown","hasQueryData","hasNavigationButtons","focusInput","blurInput","blur","visualViewport","mainEl","pageTop","requestNextMutation","prevIsCalendarOpen","savedTagsArray","hasSavedTags","areSavedTagsDisabled","handleQueryChange","newQuery","removeListeners","fastRaf","viewportResults","searchResultKey","originalSender","ANONYMOUS_USER_ID","selectForwardedSender","handleMessageClick","getSearchResultKey","handleTriggerViewStyle","foundResult","updateSearchParams","activateSearchTag","tag","removeSearchSavedTag","handleDeleteTag","handleChangeSearchType","handleFocusOlder","newFocusIndex","handleFocusNewer","renderTypeTag","isForTag","selectedType","renderDropdown","dropdown","dropdownHidden","separator","wrap","isChosen","SavedTagButton","withCount","searchTypes","teactOrderKey","focused","mobile","withDropdown","adaptSearchBorders","canClose","resultsItemSelector","hasUpButton","hasDownButton","onStartBackspace","withBackIcon","onUpClick","onDownClick","searchTags","savedSearchTag","icons","getDayStartAt","counter","viewStyle","mobileNavigation","navigationButton","navigationDisabled","recent","favorite","effect","chatStickerSetId","effectStickers","effectEmojis","recentStickers","selectShouldLoopStickers","StickerPicker","isForEffects","loadRecentStickers","addRecentSticker","unfaveSticker","faveSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","effectSets","existingAddedSetIds","shouldRenderContents","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleMouseMove","handleRemoveRecentSticker","CHAT_STICKER_SET_ID","maxUniqueReactions","enabledReactions","reactionsLimit","ReactionPickerLimited","isTouchScreen","currentReactions","shouldUseCurrentReactions","allAvailableReactions","reactionsToSort","sortReactions","allowed","pickerHeight","pickerWidth","gapWidth","itemsInRow","pickerMaxHeight","REACTION_SELECTOR_WIDTH","availableEffectById","storyPeerId","sendAsMessage","areSomeReactionsAllowed","areAllReactionsAllowed","areCustomAllowed","shouldUseFullPicker","isForbidden","ReactionPicker","toggleReaction","closeReactionPicker","saveEffectInDraft","requestEffectInComposer","addLocalPaidReaction","openPaidReactionModal","renderedMessageId","renderedChatId","renderedStoryPeerId","renderedStoryId","storedPosition","renderingPosition","isDense","deltaX","FULL_PICKER_SHIFT_DELTA","handleToggleCustomReaction","shouldAddToRecent","handleToggleReaction","handleReactionContextMenu","handleStoryReactionSelect","customEmojiMessage","parseHtmlAsFormattedText","buildCustomEmojiHtml","isReaction","availableEffects","effectId","effectStickerId","chosenOrder","backdropExcludedSelector","div","BLUR_CANVAS_SIZE","AttachmentModalItem","attachment","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_PHOTO_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","extension","getFileExtension","previewData","shouldSkipGrouping","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","isFullyVisible","isHorizontal","viewportY1","viewportY2","y2","findInViewport","selectorOrElements","shouldContainBottom","allElements","visibleIndexes","isFound","setTooltipItemVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","handleArrowKey","handleItemSelect","altKey","metaKey","shiftKey","isSelectionOutOfRange","onUp","onDown","onTab","MentionTooltip","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","selectedMentionIndex","prevChatMembers","renderedChatMembers","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","keywords","customEmojiForEmoji","forEmoji","captionLimit","AttachmentModal","attachments","getHtml","editingMessage","canShowCustomSendMenu","isForMessage","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","forceDarkTheme","onAttachmentsUpdate","onCaptionUpdate","onSend","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","canSchedule","onSendWhenOnline","svgRef","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isEditing","groupedId","notEditingFile","getAttachmentMediaType","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","isInvertedMedia","shouldSendInHighQuality","setShouldSendInHighQuality","renderingShouldSendInHighQuality","setRenderingShouldSendInHighQuality","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","timerRef","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","setIsInvertedMedia","removeAllSelections","isCustomSendMenuOpen","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleToggleShouldCompress","handleToggleQuality","handleDisableSpoilers","handleToggleSpoiler","svg","baseVal","leftChars","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","hasAnyPhoto","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","canInvertMedia","attachmentsLength","isBottomDividerShown","buttonSendCaption","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","rx","uniqueId","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","customEmojiPrefix","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","onSendSchedule","PollModal","isQuiz","shouldBeAnonymous","maxOptionsCount","questionInputRef","optionsListRef","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","handleSolutionChange","addNewOption","newOptions","behavior","handleCreate","isNoCorrectOptionError","answers","correct","questionTrimmed","substring","optionsTrimmed","o","summary","multipleChoice","quiz","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","maxItemsCount","todoItemsMax","maxTitleLength","todoTitleLengthMax","maxItemLength","todoItemLengthMax","ToDoListModal","TODO_ITEMS_LIMIT","TODO_TITLE_LENGTH_LIMIT","TODO_ITEM_LENGTH_LIMIT","editTodo","closeTodoListModal","appendTodoList","titleInputRef","itemsListRef","setItems","generateUniqueNumberId","isOthersCanAppend","setIsOthersCanAppend","isOthersCanComplete","setIsOthersCanComplete","isAddTaskMode","forNewTask","isOutgoing","editingTodo","frozenTasks","othersCanAppend","othersCanComplete","editingItems","inputs","lastInput","addNewItem","newItems","todoItems","titleTrimmed","itemsTrimmed","updateItem","removeItem","handleIsOthersCanAppendChange","handleIsOthersCanCompleteChange","getTitleError","getItemsError","tasksToRender","stateIndex","renderItems","EmojiButton","native","IS_PACKAGED_ELECTRON","BASE_URL","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","EmojiCategory","category","allEmojis","emojisPerRow","displayedEmoji","ICONS_BY_CATEGORY","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","EmojiPicker","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","allCategories","themeCategories","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","GifButton","gif","onUnsaveClick","hasVideoPreview","getVideoMediaHash","withThumb","videoHash","getVideoPreviewMediaHash","videoData","shouldRenderVideo","isVideoReady","handleUnsaveClick","handleContextDelete","preload","gifs","saved","GifPicker","canSendGifs","onGifSelect","loadSavedGifs","saveGif","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","GIFs","SYMBOL_MENU_TAB_ICONS","SymbolMenuFooter","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","isBackgroundTranslucent","SymbolMenu","isMessageComposer","menuPositionOptions","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","recentEmojisRef","recentCustomEmojisRef","handleCustomEmojiSelect","canUpdateStickerSetsOrder","isFrom","mobileClassName","onMouseEnter","ChatCommand","withAvatar","freezeWhenClosed","ChatCommandTooltip","quickReplies","quickReplyMessages","self","sendQuickReply","handleSendCommand","handleSendQuickReply","quickReplyId","quickRepliesWithDescription","reply","topMessageId","shortcut","handleKeyboardSelect","selectedCommandIndex","isEmpty","BotCommandMenu","botCommand","StickerTooltip","prevStickers","displayedStickers","clearCustomEmojiForEmoji","ce","emojiButton","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","onRemoveEffect","withEffects","hasCurrentEffect","effectReactions","onToggleReaction","isInSavedMessages","isInStoryViewer","openEffectPicker","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","areItemsHidden","hideItems","showItems","markIsReady","unmarkIsReady","handleOpenMessageEffectsPicker","ReactionSelector","onShowMore","TEXT_FORMAT_BY_TAG_NAME","B","STRONG","I","EM","U","DEL","CODE","SPAN","fragmentEl","TextFormatter","anchorPosition","selectedRange","setSelectedRange","linkUrlInputRef","isLinkControlOpen","openLinkControl","closeLinkControl","setLinkUrl","isEditingLink","setIsEditingLink","inputClassName","setInputClassName","selectedTextFormats","setSelectedTextFormats","useVirtualBackdrop","selectedFormats","parentElement","commonAncestorContainer","EDITABLE_INPUT_ID","textFormat","tagName","restoreSelection","selection","getSelection","removeAllRanges","addRange","updateSelectedRange","getRangeAt","getSelectedText","shouldDropCustomEmoji","replaceChildren","cloneContents","INPUT_CUSTOM_EMOJI_SELECTOR","getAttribute","getSelectedElement","updateInputStyles","scrollWidth","getFormatButtonClassName","fKey","monospace","strikethrough","handleSpoilerText","spoiler","entityType","ApiMessageEntityTypes","Spoiler","execCommand","handleBoldText","handleItalicText","italic","handleUnderlineText","underline","handleStrikethroughText","handleMonospaceText","handleLinkUrlConfirm","formattedLinkUrl","encodeURI","u","m","p","getKeyFromEvent","linkUrlConfirmClassName","CustomEmojiButton","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","prevSelectedIndex","setItemVisible","BaseResult","thumbnailDataUrl","getWebDocumentHash","decoding","ArticleResult","inlineResult","webThumbnail","GifResult","_gif","MediaResult","isForGallery","thumbnailBlobUrl","getPhotoMediaHash","StickerResult","STICKER_SIZE_INLINE_BOT_RESULT","InlineBotTooltip","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","handleSendPm","param","handleOpenWebview","isFromSwitchWebView","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","SendAsMenu","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","membersCount","StickerSetResult","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","StickerSearch","loadFeaturedStickers","selectCurrentGifSearch","canPostInChat","GifSearch","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","postStatistic","StatisticsRecentMessage","toggleMessageStatistics","StatisticsRecentPostMeta","withStorySolid","forceUnreadStorySolid","toggleStoryStatistics","imgBlobUrl","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","reactionsByEmotionGraph","storyInteractionsGraph","storyReactionsByEmotionGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","statistics","selectStatistics","dcId","statisticsDcId","messagesById","storiesById","selectPeerStories","Statistics","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","isPercentage","ensureLovelyChart","zoomToken","create","zoomOutLabel","StatisticsOverview","recentPosts","StatisticsRecentStory","StatisticsMessagePublicForward","GRAPH_TITLES","viewsGraph","reactionsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","loadMessagePublicForwards","publicForwards","publicForwardsData","STATISTICS_PUBLIC_FORWARDS_LIMIT","currentStory","loadStoryStatistics","loadStoryPublicForwards","StatisticsStoryPublicForward","answer","voters","offsets","pollResults","PollAnswerResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","ShowMoreButton","renderViewMoreButton","poll","selectPollFromMessage","PollResults","resultsByOption","buildCollectionByKey","ICON_SIZE","createTopicPanel","CreateTopic","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","noLoopLimit","editTopicPanel","EditTopic","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","ERROR_NAME_MISSING","management","ManageBot","setBotInfo","uploadContactProfilePhoto","startBotFatherConversation","isFieldTouched","markFieldTouched","unmarkProfileTouched","isAvatarTouched","markAvatarTouched","unmarkAvatarTouched","currentName","setName","ManagementProgress","handleNameChange","trimmedName","handleChangeEditIntro","handleChangeEditCommands","handleChangeSettings","isSuggestRef","handleSelectAvatar","isSuggest","CHANNEL_TITLE_EMPTY","minLevelToToggleAutoTranslation","channelAutoTranslationLevelMin","hasAutoTranslation","chatBoostLevel","level","canToggleAutoTranslation","canChangeInfo","canInvite","exportedInvites","ManageChannel","onScreenSelect","updateChat","closeManagement","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleAutoTranslation","currentTitle","currentAbout","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","hasAutoTranslationAvailable","handleAutoTranslationChange","isRevoked","adminsCount","removedUsersCount","kickedMembers","handleClickEditType","ManagementScreens","ChatPrivacyType","handleClickDiscussion","Discussion","handleClickReactions","Reactions","handleClickAdministrators","ChatAdministrators","handleClickInvites","Invites","handleClickRequests","JoinRequests","handleSetPhoto","handleAboutChange","handleUpdateChannel","trimmedTitle","trimmedAbout","handleClickSubscribers","ChannelSubscribers","handleRemovedUsersClick","ChannelRemovedUsers","handleDeleteChannel","chatReactionsDescription","enabledLength","totalLength","isChannelPublic","formatInteger","joinRequests","ManageChatAdministrators","onChatMemberSelect","toggleSignatures","areSignaturesEnabled","areSignaturesShown","areProfilesEnabled","areProfilesShown","canAddNewAdmins","canToggleSignatures","adminMembers","admins","isOwner","handleAdminMemberClick","promotedByUserId","ChatAdminRights","handleToggleSignatures","handleToggleProfiles","handleAddAdminClick","GroupAddAdmins","getMemberStatus","promotedByUser","selectManagement","maxPublicLinks","privateInviteLink","inviteLink","ManageChatPrivacyType","updatePublicLink","updatePrivateLink","toggleIsProtected","resetManagementError","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","shouldDisableUsernames","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","chatMembers","RemoveGroupUserModal","loadMoreMembers","usersId","availableMemberIds","canDeleteMembers","removedMembers","ManageChatRemovedUsers","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","forDiscussionIds","linkedChat","ManageDiscussion","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","Initial","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","handleNewGroupClick","NewDiscussionGroup","DiscussionGroups","STICKER_SIZE_DISCUSSION_GROUPS","withPrimaryColor","linkedGroup","renderLinkGroupHeader","renderLinkGroupConfirmText","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","canEditForum","isChannelsPremiumLimitReached","ManageGroup","togglePreHistoryHidden","deleteChat","toggleForum","isForumEnabled","setIsForumEnabled","isPublicGroup","isPreHistoryHiddenCheckboxRef","handleClickPermissions","GroupPermissions","handleUpdateGroup","handleClickMembers","GroupMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","enabledPermissionsCount","handleDeleteGroup","isForForum","isPromotedByCurrentUser","isFormFullyDisabled","defaultRights","adminRights","hasFullInfo","ManageGroupAdminRights","isNewAdmin","selectedUserId","updateChatAdmin","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedChatMember","selectedAdminMember","handleSavePermissions","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","postStories","editStories","deleteStories","banUsers","addAdmins","manageCall","anonymous","areParticipantsHidden","hiddenMembersMinCount","canHideParticipants","canAddMembers","globalUserIds","ManageGroupMembers","noAdmins","toggleParticipantsHidden","setNewChatMembersDialogState","deletingUserId","setDeletingUserId","adminIds","usePeerStoriesPolling","shouldUseSearchResults","listedIds","ChatNewAdminRights","handleDeleteMembersModalClose","handleToggleParticipantsHidden","handleNewMemberDialogOpen","newChatMembersProgress","NewChatMembersProgress","memberId","DeleteMemberModal","arePaidMessagesAvailable","groupPeersPaidStars","ManageGroupPermissions","updateChatDefaultBannedRights","updatePaidMessagesPrice","GroupRemovedUsers","handleAddExceptionClick","GroupUserPermissionsCreate","handleExceptionMemberClick","GroupUserPermissions","isPriceForMessagesChanged","markPriceForMessagesChanged","unmarkPriceForMessagesChanged","isPriceForMessagesOpen","setIsPriceForMessagesOpen","handleUpdatePaidMessagesPrice","handleUpdatePermissions","exceptionMembers","getMemberExceptions","getLangKeyForBannedRightKey","translatedString","handleChargeStarsForMessages","arePermissionsChanged","arePermissionsLoading","ManageGroupUserPermissions","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","ManageGroupUserPermissionsCreate","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","ManageInvite","editExportedChatInvite","exportChatInvite","setIsRequestNeeded","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","usageLimit","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleSaveClick","formatFullDate","n","importers","requesters","ManageInviteInfo","loadChatInviteImporters","loadChatInviteRequesters","usage","adminId","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","BULLET","inviteComparator","i1","i2","isPermanent","i1IsPermanent","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","ManageInvites","setEditingExportedInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","revokeInvite","askToRevoke","handleCreateNewClick","EditInvite","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","InviteInfo","deleteInvite","askToDelete","copyLink","prepareUsageText","requested","formatCountdown","getInviteIconClass","prepareContextActions","editInvite","Invite","STICKER_SIZE_INVITES","JoinRequest","hideChatJoinRequest","createClassNameBuilder","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","ManageJoinRequests","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","MAX_UNIQUE_REACTIONS","ManageReactions","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","localReactionsLimit","setLocalReactionsLimit","reactionsOptions","handleSaveReactions","availableActiveReactions","localAllowedReactions","enabledAllowedReactions","localReaction","enabledReaction","handleReactionsOptionChange","handleReactionChange","local","handleReactionsLimitChange","renderReactionsMaxCountValue","shouldShowReactionsLimit","isCenteredLayout","notPersonalPhoto","ManageUser","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","handleNotificationChange","handleDeleteContact","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","canSetPersonalPhoto","noEmojiStatus","withFullInfo","noPersonalPhoto","trimStart","discussionChannelId","managementType","selectCurrentManagementType","Management","GroupRecentActions","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","Checkout","invoice","shippingPrices","checkoutInfo","totalPrice","onAcceptTos","needAddress","hasShippingOptions","savedCredentials","isPaymentFormUrl","setPaymentStep","isInteractive","termsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","useMediaTransition","handleTipsClick","tips","handlePaymentMethodClick","PaymentStep","SavedPayments","PaymentInfo","handleShippingAddressClick","ShippingInfo","handleShippingMethodClick","Shipping","checkoutPicture","forceAspectRatio","checkoutTitle","checkoutDescription","priceInfo","prices","renderPaymentItem","priceInfoItem","priceInfoItemTitle","tipsList","tip","tipsItem","tipsItem_active","shouldOmitFractions","invoiceInfo","renderCheckoutItem","provider","langStringSplit","renderTosLink","tosCheckbox","priceInfoItemMain","checkoutInfoItemInfoTitle","checkoutInfoItemInfoData","ConfirmPayment","noRedirect","onPaymentFormSubmit","messageKey","PasswordConfirm","onPasswordChange","clearPaymentError","cardName","onInputChange","useFocusAfterAnimation","animationDuration","CardInput","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","ExpiryInput","endsWith","formatCardExpiry","canSaveCredentials","needCardholderName","needCountry","needZip","selectCountryRef","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleCountryChange","handleBillingPostCodeChange","handleChangeSaveCredentials","Select","hasArrow","SavedPaymentCredentials","onNewCardClick","shippingOptions","handleShippingSelect","needEmail","needPhone","needName","phoneRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","confirmPaymentUrl","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","nativeParams","nativeProvider","providerName","isProviderError","smartGlocalToken","stripeId","passwordValidUntil","validUntil","PaymentModal","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","setSmartGlocalCardInfo","paymentState","paymentDispatch","twoFaPassword","setTwoFaPassword","prevStep","prevRequestId","canRenderFooter","setStep","nextStep","field","savedInfo","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","sendForm","shippingOptionId","handlePaymentFormSubmit","credentials","validateRequest","requestInfo","getRequestInfo","sendCredentials","expiryMonth","expiryYear","zip","getCredentials","ConfirmPassword","shouldFillRequestedData","isEmailRequested","isPhoneRequested","isNameRequested","isShippingAddressRequested","isSubmitDisabled","getIsSubmitDisabled","isRecurring","cleanupOnlyKey","currentStep","isPasswordMissing","isEmailSentToProvider","isPhoneSentToProvider","renderModalContent","descriptionKey","renderError","optionId","receipt","ReceiptModal","prevReceipt","renderingReceipt","fullAddress","credentialsTitle","totalAmount","InviteViaLinkModal","sendInviteMessages","closeInviteViaLinkModal","missingUsers","setSelectedMemberIds","unselectableIds","selectableIds","requirePremiumIds","regularIds","isRequiringPremiumToMessage","invitableWithPremiumIds","isRequiringPremiumToInvite","isEveryPremiumBlocksPm","topListPeers","handleSendInviteLink","canSendInviteLink","inviteSectionText","premiumSectionText","hasPremiumSection","hasSelectableSection","lockedUnselectedSubtitle","OneTimeMediaModal","closeOneTimeMediaModal","handlePlayVoice","isOwn","isOwnMessage","closeBtnTitle","voice","OneTimeModal","RoundVideo","onStop","renderMedia","WebAppsCloseConfirmationModal","closeWebAppsCloseConfirmationModal","shouldSkipInFuture","setShouldSkipInFuture","shouldSkipConfirmation","handleSelectWithEnter","freezeUntilDate","freezeAppealUrl","botFreezeAppeal","botFreezeAppealId","botFreezeAppealUsername","FrozenAccountModal","closeFrozenAccountModal","handleAppeal","BannedDuck","botLink","hasBackdrop"],"sourceRoot":""}