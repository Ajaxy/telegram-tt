{"version":3,"file":"1006.4c7326510e8b875f3442.js","mappings":"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","sources":["webpack://telegram-t/./src/components/common/MiniTable.module.scss?145f","webpack://telegram-t/./src/components/common/MiniTable.tsx","webpack://telegram-t/./src/components/common/gift/GiftMenuItems.tsx","webpack://telegram-t/./src/components/common/gift/GiftRibbon.module.scss?54c5","webpack://telegram-t/./src/components/common/gift/GiftRibbon.tsx","webpack://telegram-t/./src/components/middle/message/actions/ChannelPhoto.tsx","webpack://telegram-t/./src/components/middle/message/actions/Gift.tsx","webpack://telegram-t/./src/components/middle/message/actions/GiveawayPrize.tsx","webpack://telegram-t/./src/components/middle/message/actions/StarGift.tsx","webpack://telegram-t/./src/components/middle/message/actions/StarGiftUnique.tsx","webpack://telegram-t/./src/components/middle/message/actions/SuggestedPhoto.tsx","webpack://telegram-t/./src/components/middle/message/SimilarChannels.module.scss?86cb","webpack://telegram-t/./src/components/middle/message/SimilarChannels.tsx","webpack://telegram-t/./src/hooks/useAverageColor.ts","webpack://telegram-t/./src/components/middle/message/ActionMessage.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useFluidBackgroundFilter.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"cKr8J5k_\",\"key\":\"c9RLLvfs\",\"value\":\"QEuGpzIc\"};","import React, { memo, type TeactNode } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './MiniTable.module.scss';\n\nexport type TableEntry = [TeactNode, TeactNode];\n\ntype OwnProps = {\n  data: TableEntry[];\n  className?: string;\n  style?: string;\n  valueClassName?: string;\n  keyClassName?: string;\n};\n\nconst MiniTable = ({\n  data,\n  style,\n  className,\n  valueClassName,\n  keyClassName,\n}: OwnProps) => {\n  return (\n    <div className={buildClassName(styles.root, className)} style={style}>\n      {data.map(([key, value]) => (\n        <>\n          <div className={buildClassName(styles.key, keyClassName)}>{key}</div>\n          <div className={buildClassName(styles.value, valueClassName)}>{value}</div>\n        </>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MiniTable);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSavedStarGift, ApiStarGift,\n} from '../../../api/types';\n\nimport { DEFAULT_STATUS_ICON_ID, TME_LINK_PREFIX } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport MenuItem from '../../ui/MenuItem';\n\ntype OwnProps = {\n  peerId: string;\n  canManage?: boolean;\n  gift: ApiSavedStarGift | ApiStarGift;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GiftMenuItems = ({\n  peerId,\n  canManage,\n  gift: typeGift,\n  currentUserEmojiStatus,\n  collectibleEmojiStatuses,\n}: OwnProps) => {\n  const {\n    showNotification,\n    openChatWithDraft,\n    openGiftTransferModal,\n    openGiftStatusInfoModal,\n    setEmojiStatus,\n    toggleSavedGiftPinned,\n    changeGiftVisibility,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isSavedGift = typeGift && 'gift' in typeGift;\n  const savedGift = isSavedGift ? typeGift : undefined;\n  const gift = isSavedGift ? typeGift.gift : typeGift;\n\n  const starGiftUniqueSlug = gift?.type === 'starGiftUnique' ? gift.slug : undefined;\n  const starGiftUniqueLink = useMemo(() => {\n    if (!starGiftUniqueSlug) return undefined;\n    return `${TME_LINK_PREFIX}nft/${starGiftUniqueSlug}`;\n  }, [starGiftUniqueSlug]);\n  const userCollectibleStatus = useMemo(() => {\n    if (!starGiftUniqueSlug) return undefined;\n    return collectibleEmojiStatuses?.find((\n      status,\n    ) => status.type === 'collectible' && status.slug === starGiftUniqueSlug) as ApiEmojiStatusCollectible | undefined;\n  }, [starGiftUniqueSlug, collectibleEmojiStatuses]);\n\n  const currenUniqueEmojiStatusSlug = currentUserEmojiStatus?.type === 'collectible'\n    ? currentUserEmojiStatus.slug : undefined;\n\n  const isGiftUnique = gift && gift.type === 'starGiftUnique';\n  const canTakeOff = isGiftUnique && currenUniqueEmojiStatusSlug === gift.slug;\n  const canWear = userCollectibleStatus && !canTakeOff;\n\n  const hasPinOptions = canManage && savedGift && !savedGift.isUnsaved && isGiftUnique;\n\n  const handleTriggerVisibility = useLastCallback(() => {\n    const { inputGift, isUnsaved } = savedGift!;\n    changeGiftVisibility({ gift: inputGift!, shouldUnsave: !isUnsaved });\n  });\n\n  const handleCopyLink = useLastCallback(() => {\n    if (!starGiftUniqueLink) return;\n    copyTextToClipboard(starGiftUniqueLink);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  });\n\n  const handleLinkShare = useLastCallback(() => {\n    if (!starGiftUniqueLink) return;\n    openChatWithDraft({ text: { text: starGiftUniqueLink } });\n  });\n\n  const handleTransfer = useLastCallback(() => {\n    if (savedGift?.gift.type !== 'starGiftUnique') return;\n    openGiftTransferModal({ gift: savedGift });\n  });\n\n  const handleWear = useLastCallback(() => {\n    if (gift?.type !== 'starGiftUnique' || !userCollectibleStatus) return;\n    openGiftStatusInfoModal({ emojiStatus: userCollectibleStatus });\n  });\n\n  const handleTakeOff = useLastCallback(() => {\n    if (canTakeOff) {\n      setEmojiStatus({\n        emojiStatus: { type: 'regular', documentId: DEFAULT_STATUS_ICON_ID },\n      });\n    }\n  });\n\n  const handleTogglePin = useLastCallback(() => {\n    toggleSavedGiftPinned({ peerId, gift: savedGift! });\n  });\n\n  return (\n    <>\n      {hasPinOptions && (\n        <MenuItem icon={savedGift.isPinned ? 'unpin' : 'pin'} onClick={handleTogglePin}>\n          {lang(savedGift.isPinned ? 'ChatListUnpinFromTop' : 'ChatListPinToTop')}\n        </MenuItem>\n      )}\n      <MenuItem icon=\"link-badge\" onClick={handleCopyLink}>\n        {lang('CopyLink')}\n      </MenuItem>\n      <MenuItem icon=\"forward\" onClick={handleLinkShare}>\n        {lang('Share')}\n      </MenuItem>\n      {canManage && isGiftUnique && (\n        <MenuItem icon=\"diamond\" onClick={handleTransfer}>\n          {lang('GiftInfoTransfer')}\n        </MenuItem>\n      )}\n      {canManage && savedGift && (\n        <MenuItem icon={savedGift.isUnsaved ? 'eye-outline' : 'eye-crossed-outline'} onClick={handleTriggerVisibility}>\n          {lang(savedGift.isUnsaved ? 'GiftActionShow' : 'GiftActionHide')}\n        </MenuItem>\n      )}\n      {canWear && (\n        <MenuItem icon=\"crown-wear\" onClick={handleWear}>\n          {lang('GiftInfoWear')}\n        </MenuItem>\n      )}\n      {canTakeOff && (\n        <MenuItem icon=\"crown-take-off\" onClick={handleTakeOff}>\n          {lang('GiftInfoTakeOff')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(GiftMenuItems);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AmQSvxpZ\",\"text\":\"pQW7dcwr\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useUniqueId from '../../../hooks/useUniqueId';\n\nimport styles from './GiftRibbon.module.scss';\n\nconst COLORS = {\n  red: [['#FF5B54', '#ED1C26'], ['#653633', '#532224']],\n  blue: [['#6ED2FF', '#34A4FC'], ['#344F5A', '#152E42']],\n  purple: [['#E367D7', '#757BF6'], ['#E367D7', '#757BF6']],\n} as const;\ntype ColorKey = keyof typeof COLORS;\n\nconst COLOR_KEYS = new Set(Object.keys(COLORS) as ColorKey[]);\n\ntype OwnProps = {\n  color: ColorKey | string;\n  text: string;\n  className?: string;\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n};\n\nconst GiftRibbon = ({\n  text, color, className, theme,\n}: OwnProps & StateProps) => {\n  const randomId = useUniqueId();\n  const validSvgRandomId = `svg-${randomId}`; // ID must start with a letter\n\n  const colorKey = COLOR_KEYS.has(color as ColorKey) ? color as ColorKey : undefined;\n\n  const isDarkTheme = theme === 'dark';\n\n  const gradientColor = colorKey ? COLORS[colorKey][isDarkTheme ? 1 : 0] : undefined;\n  const startColor = gradientColor ? gradientColor[0] : color;\n  const endColor = gradientColor ? gradientColor[1] : color;\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      <svg className={styles.ribbon} width=\"56\" height=\"56\" viewBox=\"0 0 56 56\" fill=\"none\">\n        <path d=\"M52.4851 26.4853L29.5145 3.51472C27.2641 1.26428 24.2119 0 21.0293 0H2.82824C1.04643 0 0.154103 2.15429 1.41403 3.41422L52.5856 54.5858C53.8455 55.8457 55.9998 54.9534 55.9998 53.1716V34.9706C55.9998 31.788 54.7355 28.7357 52.4851 26.4853Z\" fill={`url(#${validSvgRandomId})`} />\n        <defs>\n          <linearGradient id={validSvgRandomId} x1=\"27.9998\" y1=\"1\" x2=\"27.9998\" y2=\"55\" gradientUnits=\"userSpaceOnUse\">\n            <stop stop-color={startColor} />\n            <stop offset=\"1\" stop-color={endColor} />\n          </linearGradient>\n        </defs>\n      </svg>\n      <div className={styles.text}>{text}</div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      theme: selectTheme(global),\n    };\n  },\n)(GiftRibbon));\n","import React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiMessageActionChatEditPhoto } from '../../../../api/types/messageActions';\n\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport Avatar from '../../../common/Avatar';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  action: ApiMessageActionChatEditPhoto;\n  observeIntersection?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\nconst AVATAR_SIZE = 15 * REM;\n\nconst ChannelPhotoAction = ({\n  action,\n  onClick,\n  observeIntersection,\n} : OwnProps) => {\n  return (\n    <Avatar\n      className={styles.channelPhoto}\n      photo={action.photo}\n      loopIndefinitely\n      withVideo\n      observeIntersection={observeIntersection}\n      onClick={onClick}\n      size={AVATAR_SIZE}\n    />\n  );\n};\n\nexport default memo(ChannelPhotoAction);\n","import React, { memo, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { ApiMessageActionGiftPremium, ApiMessageActionGiftStars } from '../../../../api/types/messageActions';\n\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectGiftStickerForDuration,\n  selectGiftStickerForStars,\n} from '../../../../global/selectors';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  action: ApiMessageActionGiftPremium | ApiMessageActionGiftStars;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst STICKER_SIZE = 150;\n\nconst GiftAction = ({\n  action,\n  sticker,\n  canPlayAnimatedEmojis,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const stickerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const message = action.type === 'giftPremium' ? action.message : undefined;\n\n  return (\n    <div className={styles.contentBox} tabIndex={0} role=\"button\" onClick={onClick}>\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      <div className={styles.info}>\n        <h3 className={styles.title}>\n          {action.type === 'giftPremium' ? (\n            lang('ActionGiftPremiumTitle', { months: action.months }, { pluralValue: action.months })\n          ) : (\n            lang('ActionGiftStarsTitle', { amount: action.stars }, { pluralValue: action.stars })\n          )}\n        </h3>\n        <div>\n          {message && renderTextWithEntities(message)}\n          {!message && (lang(action.type === 'giftPremium' ? 'ActionGiftPremiumText' : 'ActionGiftStarsText'))}\n        </div>\n      </div>\n      <div className={styles.actionButton}>\n        <Sparkles preset=\"button\" />\n        {lang('ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { action }): StateProps => {\n    const sticker = action.type === 'giftPremium'\n      ? selectGiftStickerForDuration(global, action.months)\n      : selectGiftStickerForStars(global, action.stars);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    return {\n      sticker,\n      canPlayAnimatedEmojis,\n    };\n  },\n)(GiftAction));\n","import React, { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiChat, ApiSticker } from '../../../../api/types';\nimport type { ApiMessageActionGiftCode, ApiMessageActionPrizeStars } from '../../../../api/types/messageActions';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectGiftStickerForDuration,\n  selectGiftStickerForStars,\n} from '../../../../global/selectors';\nimport { renderPeerLink } from '../helpers/messageActions';\n\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  action: ApiMessageActionGiftCode | ApiMessageActionPrizeStars;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  channel?: ApiChat;\n  sticker?: ApiSticker;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst STICKER_SIZE = 150;\n\nconst GiveawayPrizeAction = ({\n  action,\n  sticker,\n  canPlayAnimatedEmojis,\n  channel,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const stickerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const channelLink = useMemo(() => {\n    const channelTitle = channel && getPeerTitle(lang, channel);\n    const channelFallbackText = lang('ActionFallbackChannel');\n\n    return renderPeerLink(channel?.id, channelTitle || channelFallbackText);\n  }, [channel, lang]);\n\n  return (\n    <div className={styles.contentBox} tabIndex={0} role=\"button\" onClick={onClick}>\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      <div>\n        <h3 className={styles.title}>{lang('ActionGiveawayResultTitle')}</h3>\n        <div>\n          {action.type === 'giftCode' && (\n            lang(\n              action.isViaGiveaway ? 'ActionGiveawayResultPremiumText' : 'ActionGiftCodePremiumText',\n              { months: action.months, channel: channelLink },\n              {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: action.months,\n                renderTextFilters: ['br'],\n              },\n            )\n          )}\n          {action.type === 'prizeStars' && (\n            lang(\n              'ActionGiveawayResultStarsText',\n              { amount: action.stars, channel: channelLink },\n              {\n                withNodes: true,\n                withMarkdown: true,\n                pluralValue: action.stars,\n                renderTextFilters: ['br'],\n              },\n            )\n          )}\n        </div>\n      </div>\n      <div className={styles.actionButton}>\n        <Sparkles preset=\"button\" />\n        {lang(action.type === 'giftCode' ? 'ActionOpenGiftButton' : 'ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { action }): StateProps => {\n    const sticker = action.type === 'giftCode'\n      ? selectGiftStickerForDuration(global, action.months)\n      : selectGiftStickerForStars(global, action.stars);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n\n    const channel = selectChat(global, action.boostPeerId!);\n\n    return {\n      sticker,\n      canPlayAnimatedEmojis,\n      channel,\n    };\n  },\n)(GiveawayPrizeAction));\n","import React, { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../../api/types';\nimport type { ApiMessageActionStarGift } from '../../../../api/types/messageActions';\n\nimport { isChatChannel } from '../../../../global/helpers';\nimport { getPeerTitle, isApiPeerChat } from '../../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectPeer,\n  selectSender,\n  selectUser,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatStarsAsText } from '../../../../util/localization/format';\nimport { getServerTime } from '../../../../util/serverTime';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { getStickerFromGift } from '../../../common/helpers/gifts';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\nimport { renderPeerLink, translateWithYou } from '../helpers/messageActions';\n\nimport useDynamicColorListener from '../../../../hooks/stickers/useDynamicColorListener';\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport GiftRibbon from '../../../common/gift/GiftRibbon';\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionStarGift;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis: boolean;\n  sender?: ApiPeer;\n  recipient?: ApiPeer;\n  starGiftMaxConvertPeriod?: number;\n};\n\nconst STICKER_SIZE = 120;\n\nconst StarGiftAction = ({\n  action,\n  message,\n  canPlayAnimatedEmojis,\n  sender,\n  recipient,\n  starGiftMaxConvertPeriod,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const stickerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const { isOutgoing } = message;\n\n  const sticker = getStickerFromGift(action.gift)!;\n\n  const peer = isOutgoing ? recipient : sender;\n  const isChannel = peer && isApiPeerChat(peer) && isChatChannel(peer);\n\n  const backgroundColor = useDynamicColorListener(ref, 'background-color', !action.gift.availabilityTotal);\n\n  const fallbackPeerTitle = lang('ActionFallbackSomeone');\n  const peerTitle = peer && getPeerTitle(lang, peer);\n  const isSelf = sender?.id === recipient?.id;\n\n  const giftDescription = useMemo(() => {\n    const peerLink = renderPeerLink(peer?.id, peerTitle || fallbackPeerTitle);\n    const starsAmount = action.starsToConvert !== undefined\n      ? formatStarsAsText(lang, action.starsToConvert) : undefined;\n\n    if (action.isUpgraded) {\n      return lang('ActionStarGiftUpgraded');\n    }\n\n    if (action.alreadyPaidUpgradeStars) {\n      return translateWithYou(\n        lang, 'ActionStarGiftUpgradeText', !isOutgoing || isSelf, { peer: peerLink },\n      );\n    }\n\n    if (action.isConverted) {\n      return translateWithYou(\n        lang, 'ActionStarGiftConvertedText', !isOutgoing || isSelf, { peer: peerLink, amount: starsAmount },\n      );\n    }\n\n    if (starGiftMaxConvertPeriod && getServerTime() < message.date + starGiftMaxConvertPeriod) {\n      return translateWithYou(\n        lang, 'ActionStarGiftConvertText', !isOutgoing || isSelf, { peer: peerLink, amount: starsAmount },\n      );\n    }\n\n    if (isChannel) {\n      return lang(\n        'ActionStarGiftChannelText', { amount: starsAmount }, { withNodes: true },\n      );\n    }\n\n    return translateWithYou(\n      lang, 'ActionStarGiftNoConvertText', !isOutgoing || isSelf, { peer: peerLink },\n    );\n  }, [\n    action, fallbackPeerTitle, isChannel, isOutgoing, lang, message.date, peer?.id, peerTitle, starGiftMaxConvertPeriod,\n    isSelf,\n  ]);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(styles.contentBox, styles.starGift)}\n      tabIndex={0}\n      role=\"button\"\n      onClick={onClick}\n    >\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      {action.gift.availabilityTotal && (\n        <GiftRibbon\n          color={backgroundColor || 'blue'}\n          text={lang('ActionStarGiftLimitedRibbon', {\n            total: formatIntegerCompact(lang, action.gift.availabilityTotal),\n          })}\n        />\n      )}\n      <div className={styles.info}>\n        <h3 className={styles.title}>\n          {isSelf ? lang('ActionStarGiftSelf') : lang(\n            isOutgoing ? 'ActionStarGiftTo' : 'ActionStarGiftFrom',\n            {\n              peer: renderPeerLink(peer?.id, peerTitle || fallbackPeerTitle),\n            },\n            {\n              withNodes: true,\n            },\n          )}\n        </h3>\n        <div className={styles.subtitle}>\n          {action.message && renderTextWithEntities(action.message)}\n          {!action.message && giftDescription}\n        </div>\n      </div>\n      <div className={styles.actionButton}>\n        <Sparkles preset=\"button\" />\n        {action.alreadyPaidUpgradeStars && !action.isUpgraded && !isOutgoing\n          ? lang('ActionStarGiftUnpack') : lang('ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, action }): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n    const messageSender = selectSender(global, message);\n    const giftSender = action.fromId ? selectPeer(global, action.fromId) : undefined;\n    const messageRecipient = message.isOutgoing ? selectPeer(global, message.chatId) : currentUser;\n    const giftRecipient = action.peerId ? selectPeer(global, action.peerId) : undefined;\n\n    return {\n      canPlayAnimatedEmojis,\n      sender: giftSender || messageSender,\n      recipient: giftRecipient || messageRecipient,\n      starGiftMaxConvertPeriod: global.appConfig?.starGiftMaxConvertPeriod,\n    };\n  },\n)(StarGiftAction));\n","import React, { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../../api/types';\nimport type { ApiMessageActionStarGiftUnique } from '../../../../api/types/messageActions';\n\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectPeer,\n  selectSender,\n  selectUser,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport buildStyle from '../../../../util/buildStyle';\nimport { getGiftAttributes, getStickerFromGift } from '../../../common/helpers/gifts';\nimport { renderPeerLink } from '../helpers/messageActions';\n\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\n\nimport GiftRibbon from '../../../common/gift/GiftRibbon';\nimport MiniTable, { type TableEntry } from '../../../common/MiniTable';\nimport RadialPatternBackground from '../../../common/profile/RadialPatternBackground';\nimport Sparkles from '../../../common/Sparkles';\nimport StickerView from '../../../common/StickerView';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionStarGiftUnique;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis: boolean;\n  sender?: ApiPeer;\n  recipient?: ApiPeer;\n};\n\nconst STICKER_SIZE = 120;\n\nconst StarGiftAction = ({\n  action,\n  message,\n  canPlayAnimatedEmojis,\n  sender,\n  recipient,\n  onClick,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}: OwnProps & StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const stickerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const { isOutgoing } = message;\n\n  const sticker = getStickerFromGift(action.gift)!;\n  const attributes = getGiftAttributes(action.gift)!;\n  const model = attributes.model!;\n  const pattern = attributes.pattern!;\n  const backdrop = attributes.backdrop!;\n  const backgroundColors = [backdrop.centerColor, backdrop.edgeColor];\n  const adaptedPatternColor = `${backdrop.patternColor.slice(0, 7)}55`;\n\n  const tableData = useMemo((): TableEntry[] => [\n    [lang('ActionStarGiftUniqueModel'), model.name],\n    [lang('ActionStarGiftUniqueBackdrop'), backdrop.name],\n    [lang('ActionStarGiftUniqueSymbol'), pattern.name],\n  ], [lang, model, pattern, backdrop]);\n\n  const shouldShowFrom = !isOutgoing || action.isUpgrade;\n  const peer = shouldShowFrom && !action.isUpgrade ? sender : recipient;\n\n  const fallbackPeerTitle = lang('ActionFallbackSomeone');\n  const peerTitle = peer && getPeerTitle(lang, peer);\n  const isSelf = sender?.id === recipient?.id;\n\n  return (\n    <div\n      className={buildClassName(styles.contentBox, styles.starGift, styles.uniqueGift)}\n      tabIndex={0}\n      role=\"button\"\n      onClick={onClick}\n    >\n      <div className={styles.uniqueBackgroundWrapper}>\n        <RadialPatternBackground\n          className={styles.uniqueBackground}\n          backgroundColors={backgroundColors}\n          patternColor={backdrop.patternColor}\n          patternIcon={pattern.sticker}\n          clearBottomSector\n        />\n      </div>\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${STICKER_SIZE}px; height: ${STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={STICKER_SIZE}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noLoad={!canPlayAnimatedEmojis}\n          />\n        )}\n      </div>\n      <GiftRibbon\n        color={adaptedPatternColor}\n        text={lang('ActionStarGiftUniqueRibbon')}\n      />\n      <div className={styles.info}>\n        <h3 className={styles.title}>\n          {isSelf ? lang('ActionStarGiftSelf') : lang(\n            shouldShowFrom ? 'ActionStarGiftFrom' : 'ActionStarGiftTo',\n            {\n              peer: renderPeerLink(peer?.id, peerTitle || fallbackPeerTitle),\n            },\n            {\n              withNodes: true,\n            },\n          )}\n        </h3>\n        <div className={styles.subtitle} style={`color: ${backdrop.textColor}`}>\n          {lang('GiftUnique', { title: action.gift.title, number: action.gift.number })}\n        </div>\n        <MiniTable data={tableData} style={`color: ${backdrop.textColor}`} valueClassName={styles.uniqueValue} />\n      </div>\n      <div\n        className={styles.actionButton}\n        style={buildStyle(adaptedPatternColor && `background-color: ${adaptedPatternColor}`)}\n      >\n        <Sparkles preset=\"button\" />\n        {lang('ActionViewButton')}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, action }): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const canPlayAnimatedEmojis = selectCanPlayAnimatedEmojis(global);\n    const messageSender = selectSender(global, message);\n    const giftSender = action.fromId ? selectPeer(global, action.fromId) : undefined;\n    const messageRecipient = message.isOutgoing ? selectPeer(global, message.chatId) : currentUser;\n    const giftRecipient = action.peerId ? selectPeer(global, action.peerId) : undefined;\n\n    return {\n      canPlayAnimatedEmojis,\n      sender: giftSender || messageSender,\n      recipient: giftRecipient || messageRecipient,\n    };\n  },\n)(StarGiftAction));\n","import React, { memo, useMemo, useState } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiMessageActionSuggestProfilePhoto } from '../../../../api/types/messageActions';\nimport { type ApiMessage, type ApiPeer, MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../../../types';\n\nimport { getPhotoMediaHash, getVideoProfilePhotoMediaHash } from '../../../../global/helpers';\nimport { getPeerTitle } from '../../../../global/helpers/peers';\nimport { selectPeer } from '../../../../global/selectors';\nimport { fetchBlob } from '../../../../util/files';\nimport { renderPeerLink } from '../helpers/messageActions';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport { type ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport Avatar from '../../../common/Avatar';\nimport ConfirmDialog from '../../../ui/ConfirmDialog';\nimport CropModal from '../../../ui/CropModal';\n\nimport styles from '../ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  action: ApiMessageActionSuggestProfilePhoto;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n};\n\nconst SuggestedPhotoAction = ({\n  message,\n  action,\n  peer,\n  observeIntersection,\n} : OwnProps & StateProps) => {\n  const { openMediaViewer, uploadProfilePhoto, showNotification } = getActions();\n  const { isOutgoing } = message;\n  const photo = action.photo;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n\n  const suggestedPhotoUrl = useMedia(getPhotoMediaHash(photo, 'full'));\n  const suggestedVideoUrl = useMedia(getVideoProfilePhotoMediaHash(photo));\n  const isVideo = photo.isVideo;\n\n  const text = useMemo(() => {\n    const peerName = (peer && getPeerTitle(lang, peer)) || lang('ActionFallbackUser');\n    const peerLink = renderPeerLink(peer?.id, peerName);\n\n    if (isOutgoing) {\n      return lang('ActionSuggestedPhotoYou', { user: peerLink }, { withNodes: true });\n    }\n\n    return lang('ActionSuggestedPhoto', { user: peerLink }, { withNodes: true });\n  }, [lang, isOutgoing, peer]);\n\n  const showAvatarNotification = useLastCallback(() => {\n    showNotification({\n      title: lang('ActionSuggestedPhotoUpdatedTitle'),\n      message: lang('ActionSuggestedPhotoUpdatedDescription'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  });\n\n  const handleSetSuggestedAvatar = useLastCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  });\n\n  const handleCloseCropModal = useLastCallback(() => {\n    setCropModalBlob(undefined);\n  });\n\n  const handleSetVideo = useLastCallback(async () => {\n    if (!suggestedVideoUrl) return;\n\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const blob = await fetchBlob(suggestedVideoUrl);\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  });\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetchBlob(suggestedPhotoUrl));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        messageId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <div className={styles.contentBox} tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        className={styles.suggestedAvatar}\n        photo={action.photo}\n        loopIndefinitely\n        withVideo\n        observeIntersection={observeIntersection}\n        size=\"jumbo\"\n      />\n      <div className={styles.suggestedText}>\n        {text}\n      </div>\n      <div className={styles.actionButton}>\n        {lang('ActionSuggestedPhotoButton')}\n      </div>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('ActionSuggestedVideoTitle')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        text={lang('ActionSuggestedVideoText')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const peer = selectPeer(global, message.chatId);\n\n    return {\n      peer,\n    };\n  },\n)(SuggestedPhotoAction));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"V3RHiOJR\",\"notch\":\"tfG_BSDt\",\"notch-path\":\"HVbeGv4t\",\"notchPath\":\"HVbeGv4t\",\"header\":\"s7QOi22Q\",\"title\":\"JstcOhAN\",\"close\":\"meewH7t_\",\"icon\":\"d8axZxyN\",\"skeleton\":\"xKVZv7KE\",\"inner\":\"njAC8dR9\",\"is-appearing\":\"eb8rX09E\",\"isAppearing\":\"eb8rX09E\",\"channels-appear\":\"AL2cLQ4i\",\"channelsAppear\":\"AL2cLQ4i\",\"is-hiding\":\"XR6_qLCc\",\"isHiding\":\"XR6_qLCc\",\"channels-disappear\":\"TwwnoiuD\",\"channelsDisappear\":\"TwwnoiuD\",\"channel-list\":\"h4gWlNen\",\"channelList\":\"h4gWlNen\",\"item\":\"glDpC2av\",\"last-item\":\"MBChXyXk\",\"lastItem\":\"MBChXyXk\",\"avatar\":\"gqCs9fSo\",\"badge\":\"gnYhwnvf\",\"members-count\":\"HWgwnKui\",\"membersCount\":\"HWgwnKui\",\"channel-title\":\"BTNQ4KBH\",\"channelTitle\":\"BTNQ4KBH\",\"fake-avatar\":\"Xl9MVMTn\",\"fakeAvatar\":\"Xl9MVMTn\",\"fake-avatar-inner\":\"Qizai7yv\",\"fakeAvatarInner\":\"Qizai7yv\",\"last-fake-avatar\":\"JxSmtOFi\",\"lastFakeAvatar\":\"JxSmtOFi\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatFullInfo } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserPremium,\n  selectSimilarChannelIds,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAverageColor from '../../../hooks/useAverageColor';\nimport useFlag from '../../../hooks/useFlag';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport styles from './SimilarChannels.module.scss';\n\nconst DEFAULT_BADGE_COLOR = '#3C3C4399';\nconst SHOW_CHANNELS_NUMBER = 10;\nconst ANIMATION_DURATION = 150;\nconst MIN_SKELETON_DELAY = 300;\nconst MAX_SKELETON_DELAY = 2000;\nconst AUTO_EXPAND_TIME = 10; // Seconds from joining\n\ntype OwnProps = {\n  chatId: string;\n};\n\ntype StateProps = {\n  similarChannelIds?: string[];\n  isExpanded?: boolean;\n  count?: number;\n  isCurrentUserPremium: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n};\n\nconst SimilarChannels = ({\n  chatId,\n  similarChannelIds,\n  isExpanded,\n  count,\n  isCurrentUserPremium,\n  channelJoinInfo,\n}: StateProps & OwnProps) => {\n  const { toggleChannelRecommendations, loadChannelRecommendations } = getActions();\n\n  const lang = useOldLang();\n\n  const [isShowing, markShowing, markNotShowing] = useFlag(false);\n  const [isHiding, markHiding, markNotHiding] = useFlag(false);\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const ignoreAutoScrollRef = useRef(false);\n  const similarChannels = useMemo(() => {\n    if (!similarChannelIds) {\n      return undefined;\n    }\n\n    const global = getGlobal();\n    return similarChannelIds.map((id) => selectChat(global, id)).filter(Boolean);\n  }, [similarChannelIds]);\n  // Show skeleton while loading similar channels\n  const [shouldRenderSkeleton, setShouldRenderSkeleton] = useState(false);\n  const firstSimilarChannels = useMemo(() => similarChannels?.slice(0, SHOW_CHANNELS_NUMBER), [similarChannels]);\n  const areSimilarChannelsPresent = Boolean(firstSimilarChannels?.length);\n\n  const isAnimating = isHiding || isShowing;\n  const shouldRenderChannels = Boolean(\n    !shouldRenderSkeleton\n      && (isExpanded || isAnimating)\n      && areSimilarChannelsPresent,\n  );\n\n  useHorizontalScroll(ref, !shouldRenderChannels, true);\n\n  useEffect(() => {\n    if (!similarChannelIds) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, similarChannelIds]);\n\n  useTimeout(() => setShouldRenderSkeleton(false), MAX_SKELETON_DELAY);\n\n  useEffect(() => {\n    if (shouldRenderSkeleton && similarChannels && isExpanded) {\n      const id = setTimeout(() => {\n        setShouldRenderSkeleton(false);\n      }, MIN_SKELETON_DELAY);\n\n      return () => clearTimeout(id);\n    }\n\n    return undefined;\n  }, [similarChannels, isExpanded, shouldRenderSkeleton]);\n\n  useEffect(() => {\n    if (isExpanded) {\n      markShowing();\n      markNotHiding();\n      setShouldRenderSkeleton(!similarChannelIds);\n      if (!ignoreAutoScrollRef.current) {\n        setTimeout(() => {\n          ref.current?.scrollIntoView({ behavior: 'smooth' });\n        }, ANIMATION_DURATION);\n      }\n    } else {\n      markNotShowing();\n      markHiding();\n    }\n  }, [isExpanded, similarChannelIds]);\n\n  const handleToggle = useLastCallback(() => {\n    toggleChannelRecommendations({ chatId });\n  });\n\n  useEffect(() => {\n    if (!channelJoinInfo?.joinedDate || isExpanded) return;\n    if (getServerTime() - channelJoinInfo.joinedDate <= AUTO_EXPAND_TIME) {\n      handleToggle();\n      ignoreAutoScrollRef.current = true;\n    }\n  }, [channelJoinInfo, isExpanded]);\n\n  if (!shouldRenderChannels && !shouldRenderSkeleton) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root)}>\n      {shouldRenderSkeleton && <Skeleton className={styles.skeleton} />}\n      {shouldRenderChannels && (\n        <div\n          className={buildClassName(\n            isShowing && styles.isAppearing,\n            isHiding && styles.isHiding,\n          )}\n        >\n          <div className={styles.notch}>\n            <svg\n              width=\"19\"\n              height=\"7\"\n              viewBox=\"0 0 19 7\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                className={styles.notchPath}\n                fill-rule=\"evenodd\"\n                clip-rule=\"evenodd\"\n                d=\"M19 7C16.8992 7 13.59 3.88897 11.5003 1.67424C10.7648 0.894688 10.397 0.50491 10.0434 0.385149C9.70568 0.270811 9.4225 0.270474 9.08456 0.38401C8.73059 0.50293 8.36133 0.892443 7.62279 1.67147C5.52303 3.88637 2.18302 7 0 7L19 7Z\"\n                fill=\"white\"\n              />\n            </svg>\n          </div>\n          <div className={styles.inner}>\n            <div className={styles.header}>\n              <span className={styles.title}>{lang('SimilarChannels')}</span>\n              <Button\n                className={styles.close}\n                color=\"translucent\"\n                onClick={handleToggle}\n              >\n                <Icon name=\"close\" />\n              </Button>\n            </div>\n            <div ref={ref} className={buildClassName(styles.channelList, 'no-scrollbar')}>\n              {firstSimilarChannels?.map((channel, i) => {\n                return i === SHOW_CHANNELS_NUMBER - 1 ? (\n                  <MoreChannels\n                    channel={channel}\n                    chatId={chatId}\n                    channelsCount={count! - SHOW_CHANNELS_NUMBER + 1}\n                    isCurrentUserPremium={isCurrentUserPremium}\n                  />\n                ) : (\n                  <SimilarChannel channel={channel} />\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nfunction SimilarChannel({ channel }: { channel: ApiChat }) {\n  const { openChat } = getActions();\n  const color = useAverageColor(channel, DEFAULT_BADGE_COLOR);\n  const lang = useLang();\n\n  return (\n    <div className={styles.item} onClick={() => openChat({ id: channel.id })}>\n      <Avatar className={styles.avatar} key={channel.id} size=\"large\" peer={channel} />\n      <div style={`background: ${color}`} className={styles.badge}>\n        <Icon name=\"user-filled\" className={styles.icon} />\n        <span className={styles.membersCount}>{formatIntegerCompact(lang, channel?.membersCount || 0)}\n        </span>\n      </div>\n      <span className={styles.channelTitle}>{channel.title}</span>\n    </div>\n  );\n}\n\nfunction MoreChannels({\n  channel,\n  chatId,\n  channelsCount,\n  isCurrentUserPremium,\n}: {\n  channel: ApiChat;\n  chatId: string;\n  channelsCount: number;\n  isCurrentUserPremium: boolean;\n}) {\n  const { openPremiumModal, openChatWithInfo } = getActions();\n  const lang = useOldLang();\n\n  const handleClickMore = () => {\n    if (isCurrentUserPremium) {\n      openChatWithInfo({\n        id: chatId, shouldReplaceHistory: true, profileTab: 'similarChannels', forceScrollProfileTab: true,\n      });\n    } else {\n      openPremiumModal();\n    }\n  };\n\n  return (\n    <div\n      className={buildClassName(styles.item, styles.lastItem)}\n      onClick={() => handleClickMore()}\n    >\n      <Avatar className={styles.avatar} key={channel.id} size=\"large\" peer={channel} />\n      <div className={styles.fakeAvatar}>\n        <div className={styles.fakeAvatarInner} />\n      </div>\n      <div className={buildClassName(styles.fakeAvatar, styles.lastFakeAvatar)}>\n        <div className={styles.fakeAvatarInner} />\n      </div>\n      <div className={styles.badge}>\n        <span className={styles.membersCount}>{`+${channelsCount}`}</span>\n        {!isCurrentUserPremium && <Icon name=\"lock-badge\" className={styles.icon} />}\n      </div>\n      <span className={styles.channelTitle}>{lang('MoreSimilar')}</span>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { chatId }): StateProps => {\n    const { similarChannelIds, isExpanded, count } = selectSimilarChannelIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n\n    return {\n      similarChannelIds,\n      isExpanded,\n      count,\n      isCurrentUserPremium,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n    };\n  })(SimilarChannels),\n);\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ApiPeer } from '../api/types';\nimport { ApiMediaFormat } from '../api/types';\n\nimport { getChatAvatarHash } from '../global/helpers';\nimport { getAverageColor, rgb2hex } from '../util/colors';\nimport useMedia from './useMedia';\n\nfunction useAverageColor(peer: ApiPeer, fallbackColor = '#00000000') {\n  const [color, setColor] = useState(fallbackColor);\n  const imgBlobUrl = useMedia(getChatAvatarHash(peer), false, ApiMediaFormat.BlobUrl);\n\n  useEffect(() => {\n    (async () => {\n      if (!imgBlobUrl) {\n        return;\n      }\n\n      const averageColor = await getAverageColor(imgBlobUrl);\n      setColor(`#${rgb2hex(averageColor)}`);\n    })();\n  }, [imgBlobUrl]);\n\n  return color;\n}\n\nexport default useAverageColor;\n","import React, {\n  memo, useEffect, useMemo, useRef, useUnmountCleanup,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessageAction } from '../../../api/types/messageActions';\nimport type {\n  FocusDirection,\n  ScrollTargetPosition,\n  ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { type ApiMessage, type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { MESSAGE_APPEARANCE_DELAY } from '../../../config';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { getMessageReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectSender,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport { IS_ANDROID, IS_ELECTRON, IS_FLUID_BACKGROUND_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { isElementInViewport } from '../../../util/visibility/isElementInViewport';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageResizeObserver from '../../../hooks/useResizeMessageObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { type OnIntersectPinnedMessage } from '../hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './hooks/useFluidBackgroundFilter';\nimport useFocusMessage from './hooks/useFocusMessage';\n\nimport ActionMessageText from './ActionMessageText';\nimport ChannelPhoto from './actions/ChannelPhoto';\nimport Gift from './actions/Gift';\nimport PremiumGiftCode from './actions/GiveawayPrize';\nimport StarGift from './actions/StarGift';\nimport StarGiftUnique from './actions/StarGiftUnique';\nimport SuggestedPhoto from './actions/SuggestedPhoto';\nimport ContextMenuContainer from './ContextMenuContainer';\nimport Reactions from './reactions/Reactions';\nimport SimilarChannels from './SimilarChannels';\n\nimport styles from './ActionMessage.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId: ThreadId;\n  appearanceOrder: number;\n  isJustAdded?: boolean;\n  isLastInList?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n  getIsMessageListReady?: Signal<boolean>;\n  onIntersectPinnedMessage?: OnIntersectPinnedMessage;\n  observeIntersectionForBottom?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  currentUserId?: string;\n  isInsideTopic?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  replyMessage?: ApiMessage;\n  patternColor?: string;\n  isCurrentUserPremium?: boolean;\n  isInSelectMode?: boolean;\n  hasUnreadReaction?: boolean;\n  isResizingContainer?: boolean;\n  scrollTargetPosition?: ScrollTargetPosition;\n  isAccountFrozen?: boolean;\n};\n\nconst SINGLE_LINE_ACTIONS: Set<ApiMessageAction['type']> = new Set([\n  'pinMessage',\n  'chatEditPhoto',\n  'chatDeletePhoto',\n  'unsupported',\n]);\nconst HIDDEN_TEXT_ACTIONS: Set<ApiMessageAction['type']> = new Set(['giftCode', 'prizeStars', 'suggestProfilePhoto']);\n\nconst ActionMessage = ({\n  message,\n  threadId,\n  sender,\n  currentUserId,\n  appearanceOrder,\n  isJustAdded,\n  isLastInList,\n  memoFirstUnreadIdRef,\n  getIsMessageListReady,\n  isInsideTopic,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  replyMessage,\n  patternColor,\n  isCurrentUserPremium,\n  isInSelectMode,\n  hasUnreadReaction,\n  isResizingContainer,\n  scrollTargetPosition,\n  onIntersectPinnedMessage,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isAccountFrozen,\n}: OwnProps & StateProps) => {\n  const {\n    requestConfetti,\n    openMediaViewer,\n    getReceipt,\n    checkGiftCode,\n    openPrizeStarsTransactionFromGiveaway,\n    openPremiumModal,\n    openStarsTransactionFromGift,\n    openGiftInfoModalFromMessage,\n    toggleChannelRecommendations,\n    animateUnreadReaction,\n    markMentionsRead,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const { id, chatId } = message;\n  const action = message.content.action!;\n  const isLocal = isLocalMessageId(id);\n\n  const isTextHidden = HIDDEN_TEXT_ACTIONS.has(action.type);\n  const isSingleLine = SINGLE_LINE_ACTIONS.has(action.type);\n  const isFluidMultiline = IS_FLUID_BACKGROUND_SUPPORTED && !isSingleLine;\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const { replyToMsgId, replyToPeerId } = messageReplyInfo || {};\n\n  const withServiceReactions = Boolean(message.areReactionsPossible && message?.reactions?.results?.length);\n\n  const shouldSkipRender = isInsideTopic && action.type === 'topicCreate';\n\n  const { isTouchScreen } = useAppLayout();\n\n  useOnIntersect(ref, !shouldSkipRender ? observeIntersectionForBottom : undefined);\n\n  useMessageResizeObserver(ref, !shouldSkipRender && isLastInList && action.type !== 'channelJoined');\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    id,\n  );\n  useFocusMessage({\n    elementRef: ref,\n    chatId,\n    isFocused,\n    focusDirection,\n    noFocusHighlight,\n    isResizingContainer,\n    isJustAdded,\n    scrollTargetPosition,\n  });\n\n  useUnmountCleanup(() => {\n    if (message.isPinned) {\n      onIntersectPinnedMessage?.({ viewportPinnedIdsToRemove: [message.id] });\n    }\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    (isTouchScreen && isInSelectMode) || isAccountFrozen,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n  const isContextMenuShown = contextMenuAnchor !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { ref: refWithTransition } = useShowTransition({\n    isOpen: isShown,\n    noOpenTransition: noAppearanceAnimation,\n    noCloseTransition: true,\n    className: false,\n    ref,\n  });\n\n  useEffect(() => {\n    const bottomMarker = ref.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [id] });\n    }\n\n    if (message.hasUnreadMention) {\n      markMentionsRead({ chatId, messageIds: [id] });\n    }\n  }, [hasUnreadReaction, chatId, id, animateUnreadReaction, message.hasUnreadMention]);\n\n  useEffect(() => {\n    if (action.type !== 'giftPremium') return;\n    if ((memoFirstUnreadIdRef?.current && id >= memoFirstUnreadIdRef.current) || isLocal) {\n      requestConfetti({});\n    }\n  }, [action.type, id, isLocal, memoFirstUnreadIdRef]);\n\n  const fluidBackgroundStyle = useFluidBackgroundFilter(isFluidMultiline ? patternColor : undefined);\n\n  const handleClick = useLastCallback(() => {\n    switch (action.type) {\n      case 'paymentSent':\n      case 'paymentRefunded': {\n        getReceipt({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'chatEditPhoto': {\n        openMediaViewer({\n          chatId: message.chatId,\n          messageId: message.id,\n          threadId,\n          origin: MediaViewerOrigin.ChannelAvatar,\n        });\n        break;\n      }\n\n      case 'giftCode': {\n        checkGiftCode({ slug: action.slug, message: { chatId: message.chatId, messageId: message.id } });\n        break;\n      }\n\n      case 'prizeStars': {\n        openPrizeStarsTransactionFromGiveaway({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'giftPremium': {\n        openPremiumModal({\n          isGift: true,\n          fromUserId: sender?.id,\n          toUserId: sender && sender.id === currentUserId ? chatId : currentUserId,\n          monthsAmount: action.months,\n        });\n        break;\n      }\n\n      case 'giftStars': {\n        openStarsTransactionFromGift({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'starGift':\n      case 'starGiftUnique': {\n        openGiftInfoModalFromMessage({\n          chatId: message.chatId,\n          messageId: message.id,\n        });\n        break;\n      }\n\n      case 'channelJoined': {\n        toggleChannelRecommendations({ chatId });\n        break;\n      }\n    }\n  });\n\n  const fullContent = useMemo(() => {\n    switch (action.type) {\n      case 'chatEditPhoto': {\n        if (!action.photo) return undefined;\n        return (\n          <ChannelPhoto\n            action={action}\n            observeIntersection={observeIntersectionForLoading}\n            onClick={handleClick}\n          />\n        );\n      }\n\n      case 'suggestProfilePhoto':\n        return (\n          <SuggestedPhoto\n            message={message}\n            action={action}\n            observeIntersection={observeIntersectionForLoading}\n          />\n        );\n\n      case 'prizeStars':\n      case 'giftCode':\n        return (\n          <PremiumGiftCode\n            action={action}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'giftPremium':\n      case 'giftStars':\n        return (\n          <Gift\n            action={action}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'starGift':\n        return (\n          <StarGift\n            action={action}\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'starGiftUnique':\n        return (\n          <StarGiftUnique\n            action={action}\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onClick={handleClick}\n          />\n        );\n\n      case 'channelJoined':\n        return (\n          <SimilarChannels\n            chatId={message.chatId}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }, [action, observeIntersectionForLoading, message, observeIntersectionForPlaying]);\n\n  if ((isInsideTopic && action.type === 'topicCreate') || action.type === 'phoneCall') {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={refWithTransition}\n      id={getMessageHtmlId(id)}\n      className={buildClassName(\n        'ActionMessage',\n        'message-list-item',\n        styles.root,\n        isSingleLine && styles.singleLine,\n        isFluidMultiline && styles.fluidMultiline,\n        fullContent && styles.hasFullContent,\n        isFocused && !noFocusHighlight && 'focused',\n        isContextMenuShown && 'has-menu-open',\n        isLastInList && 'last-in-list',\n      )}\n      data-message-id={message.id}\n      data-is-pinned={message.isPinned || undefined}\n      data-has-unread-mention={message.hasUnreadMention || undefined}\n      data-has-unread-reaction={hasUnreadReaction || undefined}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isTextHidden && (\n        <>\n          {isFluidMultiline && (\n            <div className={styles.inlineWrapper}>\n              <span className={styles.fluidBackground} style={fluidBackgroundStyle}>\n                <ActionMessageText message={message} isInsideTopic={isInsideTopic} />\n              </span>\n            </div>\n          )}\n          <div className={styles.inlineWrapper}>\n            <span className={styles.textContent} onClick={handleClick}>\n              <ActionMessageText message={message} isInsideTopic={isInsideTopic} />\n            </span>\n          </div>\n        </>\n      )}\n      {fullContent}\n      {contextMenuAnchor && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          message={message}\n          messageListType=\"thread\"\n          className={styles.contextContainer}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      {withServiceReactions && (\n        <Reactions\n          isOutside\n          message={message!}\n          threadId={threadId}\n          observeIntersection={observeIntersectionForPlaying}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isAccountFrozen={isAccountFrozen}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, threadId }): StateProps => {\n    const tabState = selectTabState(global);\n    const { themes } = global.settings;\n\n    const chat = selectChat(global, message.chatId);\n\n    const sender = selectSender(global, message);\n\n    const isInsideTopic = chat?.isForum && threadId !== MAIN_THREAD_ID;\n\n    const { replyToMsgId, replyToPeerId } = getMessageReplyInfo(message) || {};\n    const replyMessage = replyToMsgId\n      ? selectChatMessage(global, replyToPeerId || message.chatId, replyToMsgId) : undefined;\n\n    const isFocused = threadId ? selectIsMessageFocused(global, message, threadId) : false;\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n      isResizingContainer, scrollTargetPosition,\n    } = (isFocused && tabState.focusedMessage) || {};\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      sender,\n      currentUserId: global.currentUserId,\n      isCurrentUserPremium,\n      isFocused,\n      focusDirection,\n      noFocusHighlight,\n      isInsideTopic,\n      replyMessage,\n      isInSelectMode: selectIsInSelectMode(global),\n      patternColor: themes[selectTheme(global)]?.patternColor,\n      hasUnreadReaction,\n      isResizingContainer,\n      scrollTargetPosition,\n      isAccountFrozen,\n    };\n  },\n)(ActionMessage));\n","import React, { useEffect } from '../../../../lib/teact/teact';\n\nimport { SVG_NAMESPACE } from '../../../../config';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../../util/svgController';\n\nconst SVG_MAP = new Map<string, SvgFluidBackgroundFilter>();\n\nclass SvgFluidBackgroundFilter {\n  public filterId: string;\n\n  private referenceCount = 0;\n\n  constructor(public color: string) {\n    this.filterId = `fluid-background-filter-${color.slice(1)}`;\n\n    addSvgDefinition((\n      <filter color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"4\" result=\"blur\" />\n        <feColorMatrix in=\"blur\" mode=\"matrix\" values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 30 -15\" result=\"goo\" />\n        <feComposite in=\"SourceAlpha\" in2=\"goo\" operator=\"over\" result=\"outline\" />\n        <feFlood flood-color={color} result=\"color\" />\n        <feComposite in=\"color\" in2=\"outline\" operator=\"in\" />\n      </filter>\n    ), this.filterId);\n  }\n\n  public getFilterId() {\n    this.referenceCount += 1;\n    return this.filterId;\n  }\n\n  public removeReference() {\n    this.referenceCount -= 1;\n    if (this.referenceCount === 0) {\n      removeSvgDefinition(this.filterId);\n    }\n  }\n\n  public isUsed() {\n    return this.referenceCount > 0;\n  }\n}\n\nexport default function useFluidBackgroundFilter(color?: string, asValue?: boolean) {\n  useEffect(() => {\n    if (!color) return undefined;\n\n    return () => {\n      const colorFilter = SVG_MAP.get(color);\n      if (colorFilter) {\n        colorFilter.removeReference();\n        if (!colorFilter.isUsed()) {\n          SVG_MAP.delete(colorFilter.color);\n        }\n      }\n    };\n  }, [color]);\n\n  if (!color) return undefined;\n\n  if (SVG_MAP.has(color)) {\n    const svg = SVG_MAP.get(color)!;\n    return prepareStyle(svg.getFilterId(), asValue);\n  }\n\n  const svg = new SvgFluidBackgroundFilter(color);\n  SVG_MAP.set(color, svg);\n\n  return prepareStyle(svg.getFilterId(), asValue);\n}\n\nfunction prepareStyle(filterId: string, asValue?: boolean) {\n  if (asValue) {\n    return `url(#${filterId})`;\n  }\n\n  return `filter: url(#${filterId});`;\n}\n"],"names":["memo","MiniTable","data","style","className","valueClassName","keyClassName","React","createElement","buildClassName","map","key","value","Fragment","GiftMenuItems","peerId","canManage","gift","typeGift","currentUserEmojiStatus","collectibleEmojiStatuses","showNotification","openChatWithDraft","openGiftTransferModal","openGiftStatusInfoModal","setEmojiStatus","toggleSavedGiftPinned","changeGiftVisibility","getActions","lang","useLang","isSavedGift","savedGift","undefined","starGiftUniqueSlug","type","slug","starGiftUniqueLink","useMemo","TME_LINK_PREFIX","userCollectibleStatus","find","status","currenUniqueEmojiStatusSlug","isGiftUnique","canTakeOff","canWear","hasPinOptions","isUnsaved","handleTriggerVisibility","useLastCallback","inputGift","shouldUnsave","handleCopyLink","copyTextToClipboard","message","handleLinkShare","text","handleTransfer","handleWear","emojiStatus","handleTakeOff","documentId","DEFAULT_STATUS_ICON_ID","handleTogglePin","MenuItem","icon","isPinned","onClick","COLORS","red","blue","purple","COLOR_KEYS","Set","Object","keys","withGlobal","global","theme","selectTheme","GiftRibbon","color","validSvgRandomId","useUniqueId","colorKey","has","gradientColor","startColor","endColor","styles","root","ribbon","width","height","viewBox","fill","d","id","x1","y1","x2","y2","gradientUnits","offset","AVATAR_SIZE","REM","ChannelPhotoAction","action","observeIntersection","Avatar","channelPhoto","photo","loopIndefinitely","withVideo","size","sticker","selectGiftStickerForDuration","months","selectGiftStickerForStars","stars","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","GiftAction","observeIntersectionForLoading","observeIntersectionForPlaying","stickerRef","useRef","contentBox","tabIndex","role","ref","stickerWrapper","StickerView","containerRef","noLoad","info","title","pluralValue","amount","renderTextWithEntities","actionButton","Sparkles","preset","channel","selectChat","boostPeerId","GiveawayPrizeAction","channelLink","channelTitle","getPeerTitle","channelFallbackText","renderPeerLink","isViaGiveaway","withNodes","withMarkdown","renderTextFilters","currentUser","selectUser","currentUserId","messageSender","selectSender","giftSender","fromId","selectPeer","messageRecipient","isOutgoing","chatId","sender","recipient","starGiftMaxConvertPeriod","appConfig","StarGiftAction","getStickerFromGift","peer","isChannel","isApiPeerChat","isChatChannel","backgroundColor","useDynamicColorListener","availabilityTotal","fallbackPeerTitle","peerTitle","isSelf","giftDescription","peerLink","starsAmount","starsToConvert","formatStarsAsText","isUpgraded","alreadyPaidUpgradeStars","translateWithYou","isConverted","getServerTime","date","starGift","total","formatIntegerCompact","subtitle","attributes","getGiftAttributes","model","pattern","backdrop","backgroundColors","centerColor","edgeColor","adaptedPatternColor","patternColor","slice","tableData","name","shouldShowFrom","isUpgrade","uniqueGift","uniqueBackgroundWrapper","RadialPatternBackground","uniqueBackground","patternIcon","clearBottomSector","textColor","number","uniqueValue","buildStyle","SuggestedPhotoAction","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","useState","isVideoModalOpen","openVideoModal","closeVideoModal","useFlag","suggestedPhotoUrl","useMedia","getPhotoMediaHash","suggestedVideoUrl","getVideoProfilePhotoMediaHash","isVideo","peerName","user","showAvatarNotification","payload","screen","SettingsScreens","Main","actionText","handleSetSuggestedAvatar","file","handleCloseCropModal","handleSetVideo","async","blob","fetchBlob","File","videoTs","videoSizes","l","videoStartTs","messageId","threadId","MAIN_THREAD_ID","origin","MediaViewerOrigin","SuggestedAvatar","suggestedAvatar","suggestedText","CropModal","onClose","onChange","ConfirmDialog","isOpen","confirmHandler","SimilarChannel","openChat","fallbackColor","setColor","imgBlobUrl","getChatAvatarHash","ApiMediaFormat","BlobUrl","useEffect","averageColor","getAverageColor","rgb2hex","useAverageColor","Icon","membersCount","MoreChannels","channelsCount","isCurrentUserPremium","openPremiumModal","openChatWithInfo","useOldLang","shouldReplaceHistory","profileTab","forceScrollProfileTab","similarChannelIds","isExpanded","count","selectSimilarChannelIds","selectIsCurrentUserPremium","chatFullInfo","selectChatFullInfo","channelJoinInfo","joinInfo","SimilarChannels","toggleChannelRecommendations","loadChannelRecommendations","isShowing","markShowing","markNotShowing","isHiding","markHiding","markNotHiding","ignoreAutoScrollRef","similarChannels","getGlobal","filter","Boolean","shouldRenderSkeleton","setShouldRenderSkeleton","firstSimilarChannels","areSimilarChannelsPresent","length","shouldRenderChannels","useHorizontalScroll","useTimeout","setTimeout","clearTimeout","current","scrollIntoView","behavior","handleToggle","joinedDate","Skeleton","xmlns","Button","i","SHOW_CHANNELS_NUMBER","SINGLE_LINE_ACTIONS","HIDDEN_TEXT_ACTIONS","tabState","selectTabState","themes","settings","chat","isInsideTopic","isForum","replyToMsgId","replyToPeerId","getMessageReplyInfo","replyMessage","selectChatMessage","isFocused","selectIsMessageFocused","direction","focusDirection","noHighlight","noFocusHighlight","isResizingContainer","scrollTargetPosition","focusedMessage","hasUnreadReaction","unreadReactions","includes","isAccountFrozen","selectIsCurrentUserFrozen","isInSelectMode","selectIsInSelectMode","ActionMessage","appearanceOrder","isJustAdded","isLastInList","memoFirstUnreadIdRef","getIsMessageListReady","onIntersectPinnedMessage","observeIntersectionForBottom","requestConfetti","getReceipt","checkGiftCode","openPrizeStarsTransactionFromGiveaway","openStarsTransactionFromGift","openGiftInfoModalFromMessage","animateUnreadReaction","markMentionsRead","content","isLocal","isLocalMessageId","isTextHidden","isSingleLine","isFluidMultiline","IS_FLUID_BACKGROUND_SUPPORTED","messageReplyInfo","withServiceReactions","areReactionsPossible","reactions","results","shouldSkipRender","isTouchScreen","useAppLayout","useOnIntersect","useMessageResizeObserver","useEnsureMessage","useFocusMessage","elementRef","useUnmountCleanup","viewportPinnedIdsToRemove","isContextMenuOpen","contextMenuAnchor","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","IS_ELECTRON","IS_ANDROID","isContextMenuShown","noAppearanceAnimation","isShown","markShown","MESSAGE_APPEARANCE_DELAY","refWithTransition","useShowTransition","noOpenTransition","noCloseTransition","bottomMarker","isElementInViewport","messageIds","hasUnreadMention","fluidBackgroundStyle","useFluidBackgroundFilter","handleClick","ChannelAvatar","isGift","fromUserId","toUserId","monthsAmount","fullContent","ChannelPhoto","SuggestedPhoto","PremiumGiftCode","Gift","StarGift","StarGiftUnique","getMessageHtmlId","singleLine","fluidMultiline","hasFullContent","onMouseDown","e","preventMessageInputBlur","onContextMenu","inlineWrapper","fluidBackground","ActionMessageText","textContent","ContextMenuContainer","anchor","messageListType","contextContainer","onCloseAnimationEnd","Reactions","isOutside","SVG_MAP","Map","SvgFluidBackgroundFilter","constructor","_defineProperty","this","filterId","addSvgDefinition","SVG_NAMESPACE","in","stdDeviation","result","mode","values","in2","operator","getFilterId","referenceCount","removeReference","removeSvgDefinition","isUsed","asValue","colorFilter","get","delete","prepareStyle","svg","set"],"sourceRoot":""}