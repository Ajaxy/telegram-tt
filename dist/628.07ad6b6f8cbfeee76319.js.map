{"version":3,"file":"628.07ad6b6f8cbfeee76319.js","mappings":"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","sources":["webpack://telegram-t/./node_modules/music-metadata/lib/ogg/vorbis/VorbisParser.js","webpack://telegram-t/./node_modules/music-metadata/lib/ogg/opus/Opus.js","webpack://telegram-t/./node_modules/music-metadata/lib/ogg/opus/OpusParser.js","webpack://telegram-t/./node_modules/music-metadata/lib/ogg/speex/Speex.js","webpack://telegram-t/./node_modules/music-metadata/lib/ogg/speex/SpeexParser.js","webpack://telegram-t/./node_modules/music-metadata/lib/ogg/theora/Theora.js","webpack://telegram-t/./node_modules/music-metadata/lib/ogg/theora/TheoraParser.js","webpack://telegram-t/./node_modules/music-metadata/lib/ogg/OggParser.js","webpack://telegram-t/./node_modules/music-metadata/lib/ogg/vorbis/VorbisDecoder.js","webpack://telegram-t/./node_modules/music-metadata/lib/ogg/vorbis/Vorbis.js"],"sourcesContent":["import * as Token from 'token-types';\nimport debugInit from 'debug';\nimport { VorbisDecoder } from './VorbisDecoder.js';\nimport { CommonHeader, IdentificationHeader, VorbisPictureToken } from './Vorbis.js';\nimport { makeUnexpectedFileContentError } from '../../ParseError.js';\nconst debug = debugInit('music-metadata:parser:ogg:vorbis1');\nexport class VorbisContentError extends makeUnexpectedFileContentError('Vorbis') {\n}\n/**\n * Vorbis 1 Parser.\n * Used by OggParser\n */\nexport class VorbisParser {\n    constructor(metadata, options) {\n        this.pageSegments = [];\n        this.metadata = metadata;\n        this.options = options;\n    }\n    /**\n     * Vorbis 1 parser\n     * @param header Ogg Page Header\n     * @param pageData Page data\n     */\n    async parsePage(header, pageData) {\n        if (header.headerType.firstPage) {\n            this.parseFirstPage(header, pageData);\n        }\n        else {\n            if (header.headerType.continued) {\n                if (this.pageSegments.length === 0) {\n                    throw new VorbisContentError('Cannot continue on previous page');\n                }\n                this.pageSegments.push(pageData);\n            }\n            if (header.headerType.lastPage || !header.headerType.continued) {\n                // Flush page segments\n                if (this.pageSegments.length > 0) {\n                    const fullPage = VorbisParser.mergeUint8Arrays(this.pageSegments);\n                    await this.parseFullPage(fullPage);\n                }\n                // Reset page segments\n                this.pageSegments = header.headerType.lastPage ? [] : [pageData];\n            }\n        }\n        if (header.headerType.lastPage) {\n            this.calculateDuration(header);\n        }\n    }\n    static mergeUint8Arrays(arrays) {\n        const totalSize = arrays.reduce((acc, e) => acc + e.length, 0);\n        const merged = new Uint8Array(totalSize);\n        arrays.forEach((array, i, _arrays) => {\n            const offset = _arrays.slice(0, i).reduce((acc, e) => acc + e.length, 0);\n            merged.set(array, offset);\n        });\n        return merged;\n    }\n    async flush() {\n        await this.parseFullPage(VorbisParser.mergeUint8Arrays(this.pageSegments));\n    }\n    async parseUserComment(pageData, offset) {\n        const decoder = new VorbisDecoder(pageData, offset);\n        const tag = decoder.parseUserComment();\n        await this.addTag(tag.key, tag.value);\n        return tag.len;\n    }\n    async addTag(id, value) {\n        if (id === 'METADATA_BLOCK_PICTURE' && (typeof value === 'string')) {\n            if (this.options.skipCovers) {\n                debug(\"Ignore picture\");\n                return;\n            }\n            value = VorbisPictureToken.fromBase64(value);\n            debug(`Push picture: id=${id}, format=${value.format}`);\n        }\n        else {\n            debug(`Push tag: id=${id}, value=${value}`);\n        }\n        await this.metadata.addTag('vorbis', id, value);\n    }\n    calculateDuration(header) {\n        if (this.metadata.format.sampleRate && header.absoluteGranulePosition >= 0) {\n            // Calculate duration\n            this.metadata.setFormat('numberOfSamples', header.absoluteGranulePosition);\n            this.metadata.setFormat('duration', header.absoluteGranulePosition / this.metadata.format.sampleRate);\n        }\n    }\n    /**\n     * Parse first Ogg/Vorbis page\n     * @param header\n     * @param pageData\n     */\n    parseFirstPage(header, pageData) {\n        this.metadata.setFormat('codec', 'Vorbis I');\n        debug('Parse first page');\n        // Parse  Vorbis common header\n        const commonHeader = CommonHeader.get(pageData, 0);\n        if (commonHeader.vorbis !== 'vorbis')\n            throw new VorbisContentError('Metadata does not look like Vorbis');\n        if (commonHeader.packetType === 1) {\n            const idHeader = IdentificationHeader.get(pageData, CommonHeader.len);\n            this.metadata.setFormat('sampleRate', idHeader.sampleRate);\n            this.metadata.setFormat('bitrate', idHeader.bitrateNominal);\n            this.metadata.setFormat('numberOfChannels', idHeader.channelMode);\n            debug('sample-rate=%s[hz], bitrate=%s[b/s], channel-mode=%s', idHeader.sampleRate, idHeader.bitrateNominal, idHeader.channelMode);\n        }\n        else\n            throw new VorbisContentError('First Ogg page should be type 1: the identification header');\n    }\n    async parseFullPage(pageData) {\n        // New page\n        const commonHeader = CommonHeader.get(pageData, 0);\n        debug('Parse full page: type=%s, byteLength=%s', commonHeader.packetType, pageData.byteLength);\n        switch (commonHeader.packetType) {\n            case 3: //  type 3: comment header\n                return this.parseUserCommentList(pageData, CommonHeader.len);\n            case 1: // type 1: the identification header\n            case 5: // type 5: setup header type\n                break; // ignore\n        }\n    }\n    /**\n     * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-840005.2\n     */\n    async parseUserCommentList(pageData, offset) {\n        const strLen = Token.UINT32_LE.get(pageData, offset);\n        offset += 4;\n        // const vendorString = new Token.StringType(strLen, 'utf-8').get(pageData, offset);\n        offset += strLen;\n        let userCommentListLength = Token.UINT32_LE.get(pageData, offset);\n        offset += 4;\n        while (userCommentListLength-- > 0) {\n            offset += (await this.parseUserComment(pageData, offset));\n        }\n    }\n}\n//# sourceMappingURL=VorbisParser.js.map","import * as Token from 'token-types';\nimport { makeUnexpectedFileContentError } from '../../ParseError.js';\nexport class OpusContentError extends makeUnexpectedFileContentError('Opus') {\n}\n/**\n * Opus ID Header parser\n * Ref: https://wiki.xiph.org/OggOpus#ID_Header\n */\nexport class IdHeader {\n    constructor(len) {\n        if (len < 19) {\n            throw new OpusContentError('ID-header-page 0 should be at least 19 bytes long');\n        }\n        this.len = len;\n    }\n    get(buf, off) {\n        return {\n            magicSignature: new Token.StringType(8, 'ascii').get(buf, off + 0),\n            version: Token.UINT8.get(buf, off + 8),\n            channelCount: Token.UINT8.get(buf, off + 9),\n            preSkip: Token.UINT16_LE.get(buf, off + 10),\n            inputSampleRate: Token.UINT32_LE.get(buf, off + 12),\n            outputGain: Token.UINT16_LE.get(buf, off + 16),\n            channelMapping: Token.UINT8.get(buf, off + 18)\n        };\n    }\n}\n//# sourceMappingURL=Opus.js.map","import * as Token from 'token-types';\nimport { VorbisParser } from '../vorbis/VorbisParser.js';\nimport * as Opus from './Opus.js';\nimport { OpusContentError } from './Opus.js';\n/**\n * Opus parser\n * Internet Engineering Task Force (IETF) - RFC 6716\n * Used by OggParser\n */\nexport class OpusParser extends VorbisParser {\n    constructor(metadata, options, tokenizer) {\n        super(metadata, options);\n        this.idHeader = null;\n        this.lastPos = -1;\n        this.tokenizer = tokenizer;\n    }\n    /**\n     * Parse first Opus Ogg page\n     * @param {IPageHeader} header\n     * @param {Uint8Array} pageData\n     */\n    parseFirstPage(header, pageData) {\n        this.metadata.setFormat('codec', 'Opus');\n        // Parse Opus ID Header\n        this.idHeader = new Opus.IdHeader(pageData.length).get(pageData, 0);\n        if (this.idHeader.magicSignature !== \"OpusHead\")\n            throw new OpusContentError(\"Illegal ogg/Opus magic-signature\");\n        this.metadata.setFormat('sampleRate', this.idHeader.inputSampleRate);\n        this.metadata.setFormat('numberOfChannels', this.idHeader.channelCount);\n    }\n    async parseFullPage(pageData) {\n        const magicSignature = new Token.StringType(8, 'ascii').get(pageData, 0);\n        switch (magicSignature) {\n            case 'OpusTags':\n                await this.parseUserCommentList(pageData, 8);\n                this.lastPos = this.tokenizer.position - pageData.length;\n                break;\n            default:\n                break;\n        }\n    }\n    calculateDuration(header) {\n        if (this.metadata.format.sampleRate && header.absoluteGranulePosition >= 0) {\n            // Calculate duration\n            const pos_48bit = header.absoluteGranulePosition - this.idHeader.preSkip;\n            this.metadata.setFormat('numberOfSamples', pos_48bit);\n            this.metadata.setFormat('duration', pos_48bit / 48000);\n            if (this.lastPos !== -1 && this.tokenizer.fileInfo.size && this.metadata.format.duration) {\n                const dataSize = this.tokenizer.fileInfo.size - this.lastPos;\n                this.metadata.setFormat('bitrate', 8 * dataSize / this.metadata.format.duration);\n            }\n        }\n    }\n}\n//# sourceMappingURL=OpusParser.js.map","import * as Token from 'token-types';\nimport * as util from '../../common/Util.js';\n/**\n * Speex Header Packet\n * Ref: https://www.speex.org/docs/manual/speex-manual/node8.html#SECTION00830000000000000000\n */\nexport const Header = {\n    len: 80,\n    get: (buf, off) => {\n        return {\n            speex: new Token.StringType(8, 'ascii').get(buf, off + 0),\n            version: util.trimRightNull(new Token.StringType(20, 'ascii').get(buf, off + 8)),\n            version_id: Token.INT32_LE.get(buf, off + 28),\n            header_size: Token.INT32_LE.get(buf, off + 32),\n            rate: Token.INT32_LE.get(buf, off + 36),\n            mode: Token.INT32_LE.get(buf, off + 40),\n            mode_bitstream_version: Token.INT32_LE.get(buf, off + 44),\n            nb_channels: Token.INT32_LE.get(buf, off + 48),\n            bitrate: Token.INT32_LE.get(buf, off + 52),\n            frame_size: Token.INT32_LE.get(buf, off + 56),\n            vbr: Token.INT32_LE.get(buf, off + 60),\n            frames_per_packet: Token.INT32_LE.get(buf, off + 64),\n            extra_headers: Token.INT32_LE.get(buf, off + 68),\n            reserved1: Token.INT32_LE.get(buf, off + 72),\n            reserved2: Token.INT32_LE.get(buf, off + 76)\n        };\n    }\n};\n//# sourceMappingURL=Speex.js.map","import initDebug from 'debug';\nimport { VorbisParser } from '../vorbis/VorbisParser.js';\nimport * as Speex from './Speex.js';\nconst debug = initDebug('music-metadata:parser:ogg:speex');\n/**\n * Speex, RFC 5574\n * Ref:\n * - https://www.speex.org/docs/manual/speex-manual/\n * - https://tools.ietf.org/html/rfc5574\n */\nexport class SpeexParser extends VorbisParser {\n    constructor(metadata, options, tokenizer) {\n        super(metadata, options);\n        this.tokenizer = tokenizer;\n    }\n    /**\n     * Parse first Speex Ogg page\n     * @param {IPageHeader} header\n     * @param {Uint8Array} pageData\n     */\n    parseFirstPage(header, pageData) {\n        debug('First Ogg/Speex page');\n        const speexHeader = Speex.Header.get(pageData, 0);\n        this.metadata.setFormat('codec', `Speex ${speexHeader.version}`);\n        this.metadata.setFormat('numberOfChannels', speexHeader.nb_channels);\n        this.metadata.setFormat('sampleRate', speexHeader.rate);\n        if (speexHeader.bitrate !== -1) {\n            this.metadata.setFormat('bitrate', speexHeader.bitrate);\n        }\n    }\n}\n//# sourceMappingURL=SpeexParser.js.map","import * as Token from 'token-types';\n/**\n * 6.2 Identification Header\n * Ref: https://theora.org/doc/Theora.pdf: 6.2 Identification Header Decode\n */\nexport const IdentificationHeader = {\n    len: 42,\n    get: (buf, off) => {\n        return {\n            id: new Token.StringType(7, 'ascii').get(buf, off),\n            vmaj: Token.UINT8.get(buf, off + 7),\n            vmin: Token.UINT8.get(buf, off + 8),\n            vrev: Token.UINT8.get(buf, off + 9),\n            vmbw: Token.UINT16_BE.get(buf, off + 10),\n            vmbh: Token.UINT16_BE.get(buf, off + 17),\n            nombr: Token.UINT24_BE.get(buf, off + 37),\n            nqual: Token.UINT8.get(buf, off + 40)\n        };\n    }\n};\n//# sourceMappingURL=Theora.js.map","import initDebug from 'debug';\nimport { IdentificationHeader } from './Theora.js';\nconst debug = initDebug('music-metadata:parser:ogg:theora');\n/**\n * Ref:\n * - https://theora.org/doc/Theora.pdf\n */\nexport class TheoraParser {\n    constructor(metadata, options, tokenizer) {\n        this.metadata = metadata;\n        this.tokenizer = tokenizer;\n    }\n    /**\n     * Vorbis 1 parser\n     * @param header Ogg Page Header\n     * @param pageData Page data\n     */\n    async parsePage(header, pageData) {\n        if (header.headerType.firstPage) {\n            await this.parseFirstPage(header, pageData);\n        }\n    }\n    async flush() {\n        debug('flush');\n    }\n    calculateDuration(header) {\n        debug('duration calculation not implemented');\n    }\n    /**\n     * Parse first Theora Ogg page. the initial identification header packet\n     * @param {IPageHeader} header\n     * @param {Buffer} pageData\n     */\n    async parseFirstPage(header, pageData) {\n        debug('First Ogg/Theora page');\n        this.metadata.setFormat('codec', 'Theora');\n        const idHeader = IdentificationHeader.get(pageData, 0);\n        this.metadata.setFormat('bitrate', idHeader.nombr);\n    }\n}\n//# sourceMappingURL=TheoraParser.js.map","import * as Token from 'token-types';\nimport { EndOfStreamError } from 'strtok3';\nimport initDebug from 'debug';\nimport * as util from '../common/Util.js';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { BasicParser } from '../common/BasicParser.js';\nimport { VorbisParser } from './vorbis/VorbisParser.js';\nimport { OpusParser } from './opus/OpusParser.js';\nimport { SpeexParser } from './speex/SpeexParser.js';\nimport { TheoraParser } from './theora/TheoraParser.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nexport class OggContentError extends makeUnexpectedFileContentError('Ogg') {\n}\nconst debug = initDebug('music-metadata:parser:ogg');\nexport class SegmentTable {\n    static sum(buf, off, len) {\n        const dv = new DataView(buf.buffer, 0);\n        let s = 0;\n        for (let i = off; i < off + len; ++i) {\n            s += dv.getUint8(i);\n        }\n        return s;\n    }\n    constructor(header) {\n        this.len = header.page_segments;\n    }\n    get(buf, off) {\n        return {\n            totalPageSize: SegmentTable.sum(buf, off, this.len)\n        };\n    }\n}\n/**\n * Parser for Ogg logical bitstream framing\n */\nexport class OggParser extends BasicParser {\n    constructor() {\n        super(...arguments);\n        this.header = null;\n        this.pageNumber = 0;\n        this.pageConsumer = null;\n    }\n    /**\n     * Parse page\n     * @returns {Promise<void>}\n     */\n    async parse() {\n        debug('pos=%s, parsePage()', this.tokenizer.position);\n        try {\n            let header;\n            do {\n                header = await this.tokenizer.readToken(OggParser.Header);\n                if (header.capturePattern !== 'OggS')\n                    throw new OggContentError('Invalid Ogg capture pattern');\n                this.metadata.setFormat('container', 'Ogg');\n                this.header = header;\n                this.pageNumber = header.pageSequenceNo;\n                debug('page#=%s, Ogg.id=%s', header.pageSequenceNo, header.capturePattern);\n                const segmentTable = await this.tokenizer.readToken(new SegmentTable(header));\n                debug('totalPageSize=%s', segmentTable.totalPageSize);\n                const pageData = await this.tokenizer.readToken(new Token.Uint8ArrayType(segmentTable.totalPageSize));\n                debug('firstPage=%s, lastPage=%s, continued=%s', header.headerType.firstPage, header.headerType.lastPage, header.headerType.continued);\n                if (header.headerType.firstPage) {\n                    const id = new TextDecoder('ascii').decode(pageData.subarray(0, 7));\n                    switch (id) {\n                        case '\\x01vorbis': // Ogg/Vorbis\n                            debug('Set page consumer to Ogg/Vorbis');\n                            this.pageConsumer = new VorbisParser(this.metadata, this.options);\n                            break;\n                        case 'OpusHea': // Ogg/Opus\n                            debug('Set page consumer to Ogg/Opus');\n                            this.pageConsumer = new OpusParser(this.metadata, this.options, this.tokenizer);\n                            break;\n                        case 'Speex  ': // Ogg/Speex\n                            debug('Set page consumer to Ogg/Speex');\n                            this.pageConsumer = new SpeexParser(this.metadata, this.options, this.tokenizer);\n                            break;\n                        case 'fishead':\n                        case '\\x00theora': // Ogg/Theora\n                            debug('Set page consumer to Ogg/Theora');\n                            this.pageConsumer = new TheoraParser(this.metadata, this.options, this.tokenizer);\n                            break;\n                        default:\n                            throw new OggContentError(`gg audio-codec not recognized (id=${id})`);\n                    }\n                }\n                await this.pageConsumer.parsePage(header, pageData);\n            } while (!header.headerType.lastPage);\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                if (err instanceof EndOfStreamError) {\n                    this.metadata.addWarning('Last OGG-page is not marked with last-page flag');\n                    debug(\"End-of-stream\");\n                    this.metadata.addWarning('Last OGG-page is not marked with last-page flag');\n                    if (this.header) {\n                        this.pageConsumer.calculateDuration(this.header);\n                    }\n                }\n                else if (err.message.startsWith('FourCC')) {\n                    if (this.pageNumber > 0) {\n                        // ignore this error: work-around if last OGG-page is not marked with last-page flag\n                        this.metadata.addWarning('Invalid FourCC ID, maybe last OGG-page is not marked with last-page flag');\n                        await this.pageConsumer.flush();\n                    }\n                }\n            }\n            else\n                throw err;\n        }\n    }\n}\nOggParser.Header = {\n    len: 27,\n    get: (buf, off) => {\n        return {\n            capturePattern: FourCcToken.get(buf, off),\n            version: Token.UINT8.get(buf, off + 4),\n            headerType: {\n                continued: util.getBit(buf, off + 5, 0),\n                firstPage: util.getBit(buf, off + 5, 1),\n                lastPage: util.getBit(buf, off + 5, 2)\n            },\n            // packet_flag: Token.UINT8.get(buf, off + 5),\n            absoluteGranulePosition: Number(Token.UINT64_LE.get(buf, off + 6)),\n            streamSerialNumber: Token.UINT32_LE.get(buf, off + 14),\n            pageSequenceNo: Token.UINT32_LE.get(buf, off + 18),\n            pageChecksum: Token.UINT32_LE.get(buf, off + 22),\n            page_segments: Token.UINT8.get(buf, off + 26)\n        };\n    }\n};\n//# sourceMappingURL=OggParser.js.map","import * as Token from 'token-types';\nexport class VorbisDecoder {\n    constructor(data, offset) {\n        this.data = data;\n        this.offset = offset;\n    }\n    readInt32() {\n        const value = Token.UINT32_LE.get(this.data, this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readStringUtf8() {\n        const len = this.readInt32();\n        const value = new TextDecoder('utf-8').decode(this.data.subarray(this.offset, this.offset + len));\n        this.offset += len;\n        return value;\n    }\n    parseUserComment() {\n        const offset0 = this.offset;\n        const v = this.readStringUtf8();\n        const idx = v.indexOf('=');\n        return {\n            key: v.slice(0, idx).toUpperCase(),\n            value: v.slice(idx + 1),\n            len: this.offset - offset0\n        };\n    }\n}\n//# sourceMappingURL=VorbisDecoder.js.map","import * as Token from 'token-types';\nimport { AttachedPictureType } from '../../id3v2/ID3v2Token.js';\n/**\n * Parse the METADATA_BLOCK_PICTURE\n * Ref: https://wiki.xiph.org/VorbisComment#METADATA_BLOCK_PICTURE\n * Ref: https://xiph.org/flac/format.html#metadata_block_picture\n * // ToDo: move to ID3 / APIC?\n */\nexport class VorbisPictureToken {\n    static fromBase64(base64str) {\n        return VorbisPictureToken.fromBuffer(Uint8Array.from(atob(base64str), c => c.charCodeAt(0)));\n    }\n    static fromBuffer(buffer) {\n        const pic = new VorbisPictureToken(buffer.length);\n        return pic.get(buffer, 0);\n    }\n    constructor(len) {\n        this.len = len;\n    }\n    get(buffer, offset) {\n        const type = AttachedPictureType[Token.UINT32_BE.get(buffer, offset)];\n        offset += 4;\n        const mimeLen = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const format = new Token.StringType(mimeLen, 'utf-8').get(buffer, offset);\n        offset += mimeLen;\n        const descLen = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const description = new Token.StringType(descLen, 'utf-8').get(buffer, offset);\n        offset += descLen;\n        const width = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const height = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const colour_depth = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const indexed_color = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const picDataLen = Token.UINT32_BE.get(buffer, offset);\n        offset += 4;\n        const data = Uint8Array.from(buffer.slice(offset, offset + picDataLen));\n        return {\n            type,\n            format,\n            description,\n            width,\n            height,\n            colour_depth,\n            indexed_color,\n            data\n        };\n    }\n}\n/**\n * Comment header decoder\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-620004.2.1\n */\nexport const CommonHeader = {\n    len: 7,\n    get: (buf, off) => {\n        return {\n            packetType: Token.UINT8.get(buf, off),\n            vorbis: new Token.StringType(6, 'ascii').get(buf, off + 1)\n        };\n    }\n};\n/**\n * Identification header decoder\n * Ref: https://xiph.org/vorbis/doc/Vorbis_I_spec.html#x1-630004.2.2\n */\nexport const IdentificationHeader = {\n    len: 23,\n    get: (uint8Array, off) => {\n        return {\n            version: Token.UINT32_LE.get(uint8Array, off + 0),\n            channelMode: Token.UINT8.get(uint8Array, off + 4),\n            sampleRate: Token.UINT32_LE.get(uint8Array, off + 5),\n            bitrateMax: Token.UINT32_LE.get(uint8Array, off + 9),\n            bitrateNominal: Token.UINT32_LE.get(uint8Array, off + 13),\n            bitrateMin: Token.UINT32_LE.get(uint8Array, off + 17)\n        };\n    }\n};\n//# sourceMappingURL=Vorbis.js.map"],"names":["debug","VorbisContentError","VorbisParser","constructor","metadata","options","this","pageSegments","parsePage","header","pageData","headerType","firstPage","parseFirstPage","continued","length","push","lastPage","fullPage","mergeUint8Arrays","parseFullPage","calculateDuration","arrays","totalSize","reduce","acc","e","merged","Uint8Array","forEach","array","i","_arrays","offset","slice","set","flush","parseUserComment","tag","addTag","key","value","len","id","skipCovers","fromBase64","format","sampleRate","absoluteGranulePosition","setFormat","commonHeader","get","vorbis","packetType","idHeader","bitrateNominal","channelMode","byteLength","parseUserCommentList","strLen","userCommentListLength","OpusContentError","IdHeader","buf","off","magicSignature","version","channelCount","preSkip","inputSampleRate","outputGain","channelMapping","OpusParser","tokenizer","super","lastPos","position","pos_48bit","fileInfo","size","duration","dataSize","SpeexParser","speexHeader","speex","version_id","header_size","rate","mode","mode_bitstream_version","nb_channels","bitrate","frame_size","vbr","frames_per_packet","extra_headers","reserved1","reserved2","TheoraParser","vmaj","vmin","vrev","vmbw","vmbh","nombr","nqual","OggContentError","SegmentTable","sum","dv","DataView","buffer","s","getUint8","page_segments","totalPageSize","OggParser","BasicParser","arguments","pageNumber","pageConsumer","parse","readToken","Header","capturePattern","pageSequenceNo","segmentTable","TextDecoder","decode","subarray","err","Error","addWarning","message","startsWith","Number","streamSerialNumber","pageChecksum","VorbisDecoder","data","readInt32","readStringUtf8","offset0","v","idx","indexOf","toUpperCase","VorbisPictureToken","base64str","fromBuffer","from","atob","c","charCodeAt","type","mimeLen","descLen","description","width","height","colour_depth","indexed_color","picDataLen","CommonHeader","IdentificationHeader","uint8Array","bitrateMax","bitrateMin"],"sourceRoot":""}