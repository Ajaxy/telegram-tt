{"version":3,"file":"2715.6a1a12206dadd89382ad.js","mappings":"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","sources":["webpack://telegram-t/./src/config.ts","webpack://telegram-t/./src/util/schedulers.ts","webpack://telegram-t/./src/serviceWorker/assetCache.ts","webpack://telegram-t/./src/util/browser/globalEnvironment.ts","webpack://telegram-t/./src/util/multiaccount.ts","webpack://telegram-t/./src/serviceWorker/progressive.ts","webpack://telegram-t/./src/util/generateUniqueId.ts","webpack://telegram-t/./src/serviceWorker/download.ts","webpack://telegram-t/./src/serviceWorker/pushNotification.ts","webpack://telegram-t/./src/util/Deferred.ts","webpack://telegram-t/./src/serviceWorker/share.ts","webpack://telegram-t/./src/serviceWorker/index.ts"],"sourcesContent":["import type {\n  ApiLimitType, ApiLimitTypeForPromo, ApiPremiumSection, ApiReactionEmoji,\n} from './api/types';\nimport type {\n  GiftProfileFilterOptions,\n} from './types';\n\nexport const APP_CODE_NAME = 'A';\nexport const APP_NAME = process.env.APP_NAME || `Telegram Web ${APP_CODE_NAME}`;\nexport const RELEASE_DATETIME = process.env.RELEASE_DATETIME;\n\nexport const PRODUCTION_HOSTNAME = 'web.telegram.org';\nexport const PRODUCTION_URL = 'https://web.telegram.org/a';\nexport const WEB_VERSION_BASE = 'https://web.telegram.org/'; // Used to redirect to other versions\nexport const BASE_URL = process.env.BASE_URL;\nexport const ACCOUNT_QUERY = 'account';\n\nexport const IS_MOCKED_CLIENT = process.env.APP_MOCKED_CLIENT === '1';\nexport const IS_TEST = process.env.APP_ENV === 'test';\nexport const IS_PERF = process.env.APP_ENV === 'perf';\nexport const IS_BETA = process.env.APP_ENV === 'staging';\nexport const IS_PACKAGED_ELECTRON = process.env.IS_PACKAGED_ELECTRON;\nexport const PAID_MESSAGES_PURPOSE = 'paid_messages';\n\nexport const DEBUG = process.env.APP_ENV !== 'production';\nexport const DEBUG_MORE = false;\nexport const DEBUG_LOG_FILENAME = 'tt-log.json';\nexport const STRICTERDOM_ENABLED = DEBUG;\nexport const BOT_VERIFICATION_PEERS_LIMIT = 20;\n\nexport const BETA_CHANGELOG_URL = 'https://telegra.ph/WebA-Beta-03-20';\nexport const ELECTRON_HOST_URL = process.env.ELECTRON_HOST_URL!;\n\nexport const DEBUG_ALERT_MSG = 'Shoot!\\nSomething went wrong, please see the error details in Dev Tools Console.';\nexport const DEBUG_GRAMJS = false;\n\nexport const PAGE_TITLE = process.env.APP_TITLE!;\nexport const INACTIVE_MARKER = '[Inactive]';\n\nexport const DEBUG_PAYMENT_SMART_GLOCAL = false;\n\nexport const SESSION_LEGACY_USER_KEY = 'user_auth';\nexport const SESSION_ACCOUNT_PREFIX = 'account';\nexport const LEGACY_PASSCODE_CACHE_NAME = 'tt-passcode';\n\nexport const MULTIACCOUNT_MAX_SLOTS = 6;\nexport const GLOBAL_STATE_CACHE_DISABLED = false;\nexport const GLOBAL_STATE_CACHE_PREFIX = 'tt-global-state';\nexport const SHARED_STATE_CACHE_KEY = 'tt-shared-state';\nexport const GLOBAL_STATE_CACHE_USER_LIST_LIMIT = 500;\nexport const GLOBAL_STATE_CACHE_CHAT_LIST_LIMIT = 200;\nexport const GLOBAL_STATE_CACHE_ARCHIVED_CHAT_LIST_LIMIT = 10;\nexport const GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT = 150;\n\nexport const IS_SCREEN_LOCKED_CACHE_KEY = 'tt-is-screen-locked';\n\nexport const MEDIA_CACHE_DISABLED = false;\nexport const MEDIA_CACHE_NAME = 'tt-media';\nexport const MEDIA_CACHE_NAME_AVATARS = 'tt-media-avatars';\nexport const MEDIA_PROGRESSIVE_CACHE_DISABLED = false;\nexport const MEDIA_PROGRESSIVE_CACHE_NAME = 'tt-media-progressive';\nexport const MEDIA_CACHE_MAX_BYTES = 512 * 1024; // 512 KB\nexport const CUSTOM_BG_CACHE_NAME = 'tt-custom-bg';\nexport const LANG_CACHE_NAME = 'tt-lang-packs-v49';\nexport const ASSET_CACHE_NAME = 'tt-assets';\nexport const AUTODOWNLOAD_FILESIZE_MB_LIMITS = [1, 5, 10, 50, 100, 500];\nexport const DATA_BROADCAST_CHANNEL_PREFIX = 'tt-global';\nexport const ESTABLISH_BROADCAST_CHANNEL_PREFIX = 'tt-establish';\nexport const MULTITAB_LOCALSTORAGE_KEY_PREFIX = 'tt-multitab';\nexport const DC_IDS = [1, 2, 3, 4, 5] as const;\n\nexport const DOWNLOAD_WORKERS = 16;\nexport const UPLOAD_WORKERS = 16;\n\nconst isBigScreen = typeof window !== 'undefined' && window.innerHeight >= 900;\n\nexport const MIN_PASSWORD_LENGTH = 1;\n\nexport const MESSAGE_LIST_SLICE = isBigScreen ? 60 : 40;\nexport const MESSAGE_LIST_VIEWPORT_LIMIT = MESSAGE_LIST_SLICE * 2;\n\nexport const ARCHIVE_MINIMIZED_HEIGHT = 36;\nexport const CHAT_HEIGHT_PX = 72;\nexport const TOPIC_HEIGHT_PX = 65;\nexport const PEER_PICKER_ITEM_HEIGHT_PX = 56;\nexport const CHAT_LIST_SLICE = isBigScreen ? 30 : 25;\nexport const CHAT_LIST_LOAD_SLICE = 100;\nexport const SHARED_MEDIA_SLICE = 42;\nexport const CHAT_MEDIA_SLICE = 42;\nexport const MESSAGE_SEARCH_SLICE = 42;\nexport const GLOBAL_SEARCH_SLICE = 20;\nexport const GLOBAL_TOPIC_SEARCH_SLICE = 5;\nexport const GLOBAL_SEARCH_CONTACTS_LIMIT = 20;\nexport const MEMBERS_SLICE = 30;\nexport const MEMBERS_LOAD_SLICE = 200;\nexport const PINNED_MESSAGES_LIMIT = 50;\nexport const BLOCKED_LIST_LIMIT = 100;\nexport const PROFILE_SENSITIVE_AREA = 500;\nexport const TOPIC_LIST_SENSITIVE_AREA = 600;\nexport const GROUP_CALL_PARTICIPANTS_LIMIT = 100;\nexport const STORY_LIST_LIMIT = 100;\nexport const API_GENERAL_ID_LIMIT = 100;\nexport const STATISTICS_PUBLIC_FORWARDS_LIMIT = 50;\n\nexport const STORY_VIEWS_MIN_SEARCH = 15;\nexport const STORY_MIN_REACTIONS_SORT = 10;\nexport const STORY_VIEWS_MIN_CONTACTS_FILTER = 20;\n\nexport const MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION = 30; // 30s\n\nexport const GLOBAL_SUGGESTED_CHANNELS_ID = 'global';\n\n// As in Telegram for Android\n// https://github.com/DrKLO/Telegram/blob/51e9947527/TMessagesProj/src/main/java/org/telegram/messenger/MediaDataController.java#L7799\nexport const TOP_REACTIONS_LIMIT = 100;\n\n// As in Telegram for Android\n// https://github.com/DrKLO/Telegram/blob/51e9947527/TMessagesProj/src/main/java/org/telegram/messenger/MediaDataController.java#L7781\nexport const RECENT_REACTIONS_LIMIT = 50;\nexport const REACTION_LIST_LIMIT = 100;\nexport const REACTION_UNREAD_SLICE = 100;\nexport const MENTION_UNREAD_SLICE = 100;\nexport const TOPICS_SLICE = 20;\nexport const TOPICS_SLICE_SECOND_LOAD = 500;\n\nexport const TOP_CHAT_MESSAGES_PRELOAD_LIMIT = 20;\n\nexport const SPONSORED_MESSAGE_CACHE_MS = 300000; // 5 min\n\nexport const DEFAULT_CHARGE_FOR_MESSAGES = 250;\nexport const MINIMUM_CHARGE_FOR_MESSAGES = 1;\nexport const DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES = 10000;\n\nexport const DEFAULT_VOLUME = 1;\nexport const DEFAULT_PLAYBACK_RATE = 1;\nexport const PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION = 20 * 60; // 20 min\n\nexport const ANIMATION_LEVEL_CUSTOM = -1;\nexport const ANIMATION_LEVEL_MIN = 0;\nexport const ANIMATION_LEVEL_MED = 1;\nexport const ANIMATION_LEVEL_MAX = 2;\nexport const ANIMATION_LEVEL_DEFAULT = ANIMATION_LEVEL_MAX;\n\nexport const DEFAULT_MESSAGE_TEXT_SIZE_PX = 16;\nexport const IOS_DEFAULT_MESSAGE_TEXT_SIZE_PX = 17;\nexport const MACOS_DEFAULT_MESSAGE_TEXT_SIZE_PX = 15;\n\nexport const PREVIEW_AVATAR_COUNT = 3;\n\nexport const DRAFT_DEBOUNCE = 10000; // 10s\nexport const SEND_MESSAGE_ACTION_INTERVAL = 3000; // 3s\n// 10000s from https://corefork.telegram.org/api/url-authorization#automatic-authorization\nexport const APP_CONFIG_REFETCH_INTERVAL = 10000 * 1000;\nexport const GENERAL_REFETCH_INTERVAL = 60 * 60 * 1000; // 1h\n\nexport const EDITABLE_INPUT_ID = 'editable-message-text';\nexport const EDITABLE_INPUT_MODAL_ID = 'editable-message-text-modal';\nexport const EDITABLE_STORY_INPUT_ID = 'editable-story-input-text';\n// eslint-disable-next-line max-len\nexport const EDITABLE_INPUT_CSS_SELECTOR = `.messages-layout .Transition_slide-active #${EDITABLE_INPUT_ID}, .messages-layout .Transition > .Transition_slide-to #${EDITABLE_INPUT_ID}`;\nexport const EDITABLE_INPUT_MODAL_CSS_SELECTOR = `#${EDITABLE_INPUT_MODAL_ID}`;\nexport const EDITABLE_STORY_INPUT_CSS_SELECTOR = `#${EDITABLE_STORY_INPUT_ID}`;\n\nexport const CUSTOM_APPENDIX_ATTRIBUTE = 'data-has-custom-appendix';\nexport const MESSAGE_CONTENT_CLASS_NAME = 'message-content';\nexport const MESSAGE_CONTENT_SELECTOR = '.message-content';\nexport const VIEW_TRANSITION_CLASS_NAME = 'active-view-transition';\n\nexport const RESIZE_HANDLE_CLASS_NAME = 'resizeHandle';\nexport const RESIZE_HANDLE_SELECTOR = `.${RESIZE_HANDLE_CLASS_NAME}`;\n\nexport const SNAP_EFFECT_CONTAINER_ID = 'snap-effect-container';\nexport const SNAP_EFFECT_ID = 'snap-effect';\n\nexport const STARS_ICON_PLACEHOLDER = '⭐';\nexport const STARS_CURRENCY_CODE = 'XTR';\n\nexport const MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN = 1275; // px\nexport const MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN = 925; // px\nexport const MOBILE_SCREEN_MAX_WIDTH = 600; // px\nexport const MOBILE_SCREEN_LANDSCAPE_MAX_WIDTH = 950; // px\nexport const MOBILE_SCREEN_LANDSCAPE_MAX_HEIGHT = 450; // px\n\nexport const MAX_INT_32 = 2 ** 31 - 1;\nexport const TMP_CHAT_ID = '0';\n\nexport const ANIMATION_END_DELAY = 100;\nexport const ANIMATION_WAVE_MIN_INTERVAL = 200;\nexport const MESSAGE_APPEARANCE_DELAY = 10;\nexport const PAID_SEND_DELAY = 5000;\n\nexport const SCROLL_MIN_DURATION = 300;\nexport const SCROLL_MAX_DURATION = 600;\nexport const SCROLL_MAX_DISTANCE = 800;\nexport const SCROLL_SHORT_TRANSITION_MAX_DISTANCE = 300; // px\n\n// Average duration of message sending animation\nexport const API_UPDATE_THROTTLE = Math.round((SCROLL_MIN_DURATION + SCROLL_MAX_DURATION) / 2);\nexport const API_THROTTLE_RESET_UPDATES = new Set([\n  'newMessage',\n  'newScheduledMessage',\n  'deleteMessages',\n  'deleteScheduledMessages',\n  'deleteHistory',\n  'deleteParticipantHistory',\n]);\n\nexport const LOCK_SCREEN_ANIMATION_DURATION_MS = 200;\n\nexport const STICKER_SIZE_INLINE_DESKTOP_FACTOR = 13;\nexport const STICKER_SIZE_INLINE_MOBILE_FACTOR = 11;\nexport const STICKER_SIZE_AUTH = 160;\nexport const STICKER_SIZE_AUTH_MOBILE = 120;\nexport const STICKER_SIZE_PICKER = 72;\nexport const EMOJI_SIZE_PICKER = 36;\nexport const COMPOSER_EMOJI_SIZE_PICKER = 32;\nexport const STICKER_SIZE_GENERAL_SETTINGS = 40;\nexport const STICKER_SIZE_PICKER_HEADER = 32;\nexport const STICKER_PICKER_MAX_SHARED_COVERS = 20;\nexport const STICKER_SIZE_SEARCH = 72;\nexport const STICKER_SIZE_MODAL = 72;\nexport const EMOJI_SIZE_MODAL = 36;\nexport const STICKER_SIZE_TWO_FA = 160;\nexport const STICKER_SIZE_PASSCODE = 160;\nexport const STICKER_SIZE_DISCUSSION_GROUPS = 140;\nexport const STICKER_SIZE_FOLDER_SETTINGS = 100;\nexport const STICKER_SIZE_INLINE_BOT_RESULT = 100;\nexport const STICKER_SIZE_JOIN_REQUESTS = 140;\nexport const STICKER_SIZE_INVITES = 140;\nexport const RECENT_STICKERS_LIMIT = 20;\nexport const RECENT_STATUS_LIMIT = 20;\nexport const EMOJI_STATUS_LOOP_LIMIT = 2;\nexport const EMOJI_SIZES = 7;\nexport const TOP_SYMBOL_SET_ID = 'top';\nexport const POPULAR_SYMBOL_SET_ID = 'popular';\nexport const RECENT_SYMBOL_SET_ID = 'recent';\nexport const COLLECTIBLE_STATUS_SET_ID = 'collectibleStatus';\nexport const FAVORITE_SYMBOL_SET_ID = 'favorite';\nexport const EFFECT_STICKERS_SET_ID = 'effectStickers';\nexport const EFFECT_EMOJIS_SET_ID = 'effectEmojis';\nexport const CHAT_STICKER_SET_ID = 'chatStickers';\nexport const DEFAULT_TOPIC_ICON_STICKER_ID = 'topic-default-icon';\nexport const DEFAULT_STATUS_ICON_ID = 'status-default-icon';\nexport const EMOJI_IMG_REGEX = /<img[^>]+alt=\"([^\"]+)\"(?![^>]*data-document-id)[^>]*>/gm;\n\nexport const BASE_EMOJI_KEYWORD_LANG = 'en';\n\nexport const MENU_TRANSITION_DURATION = 200;\nexport const SLIDE_TRANSITION_DURATION = 450;\n\nexport const BIRTHDAY_NUMBERS_SET = 'FestiveFontEmoji';\nexport const RESTRICTED_EMOJI_SET = 'RestrictedEmoji';\n\nexport const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n\nexport const VIDEO_WEBM_TYPE = 'video/webm';\nexport const GIF_MIME_TYPE = 'image/gif';\n\nexport const LOTTIE_STICKER_MIME_TYPE = 'application/x-tgsticker';\nexport const VIDEO_STICKER_MIME_TYPE = VIDEO_WEBM_TYPE;\n\nexport const SUPPORTED_PHOTO_CONTENT_TYPES = new Set([\n  'image/png', 'image/jpeg', GIF_MIME_TYPE,\n]);\n\nexport const SUPPORTED_VIDEO_CONTENT_TYPES = new Set([\n  'video/mp4', 'video/quicktime',\n]);\n\nexport const SUPPORTED_AUDIO_CONTENT_TYPES = new Set([\n  'audio/mp3',\n  'audio/ogg',\n  'audio/wav',\n  'audio/mpeg',\n  'audio/flac',\n  'audio/aac',\n  'audio/m4a',\n  'audio/mp4',\n  'audio/x-m4a',\n]);\n\nexport const CONTENT_TYPES_WITH_PREVIEW = new Set([\n  ...SUPPORTED_PHOTO_CONTENT_TYPES,\n  ...SUPPORTED_VIDEO_CONTENT_TYPES,\n]);\n\nexport const CONTENT_NOT_SUPPORTED = 'The message is not supported on this version of Telegram.';\n\n// Taken from https://github.com/telegramdesktop/tdesktop/blob/41d9a9fcbd0c809c60ddbd9350791b1436aff7d9/Telegram/SourceFiles/ui/boxes/choose_language_box.cpp#L28\nexport const SUPPORTED_TRANSLATION_LANGUAGES = [\n  // Official\n  'en', 'ar', 'be', 'ca', 'zh', 'nl', 'fr', 'de', 'id',\n  'it', 'ja', 'ko', 'pl', 'pt', 'ru', 'es', 'uk',\n  // Unofficial\n  'af', 'sq', 'am', 'hy', 'az', 'eu', 'bn', 'bs', 'bg',\n  'ceb', 'zh-CN', 'zh-TW', 'co', 'hr', 'cs', 'da', 'eo',\n  'et', 'fi', 'fy', 'gl', 'ka', 'el', 'gu', 'ht', 'ha',\n  'haw', 'he', 'iw', 'hi', 'hmn', 'hu', 'is', 'ig', 'ga',\n  'jv', 'kn', 'kk', 'km', 'rw', 'ku', 'ky', 'lo', 'la',\n  'lv', 'lt', 'lb', 'mk', 'mg', 'ms', 'ml', 'mt', 'mi',\n  'mr', 'mn', 'my', 'ne', 'no', 'ny', 'or', 'ps', 'fa',\n  'pa', 'ro', 'sm', 'gd', 'sr', 'st', 'sn', 'sd', 'si',\n  'sk', 'sl', 'so', 'su', 'sw', 'sv', 'tl', 'tg', 'ta',\n  'tt', 'te', 'th', 'tr', 'tk', 'ur', 'ug', 'uz', 'vi',\n  'cy', 'xh', 'yi', 'yo', 'zu',\n];\n\n// eslint-disable-next-line max-len\nexport const RE_LINK_TEMPLATE = '((ftp|https?):\\\\/\\\\/)?((www\\\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\\\.[a-zA-Z][-a-zA-Z0-9]{1,62})\\\\b([-a-zA-Z0-9()@:%_+.,~#?&/=]*)';\nexport const RE_MENTION_TEMPLATE = '(@[\\\\w\\\\d_-]+)';\nexport const RE_TG_LINK = /^tg:(\\/\\/)?/i;\nexport const RE_TME_LINK = /^(https?:\\/\\/)?([-a-zA-Z0-9@:%_+~#=]{1,32}\\.)?t\\.me/i;\nexport const RE_TELEGRAM_LINK = /^(https?:\\/\\/)?telegram\\.org\\//i;\nexport const TME_LINK_PREFIX = 'https://t.me/';\nexport const BOT_FATHER_USERNAME = 'botfather';\nexport const USERNAME_PURCHASE_ERROR = 'USERNAME_PURCHASE_AVAILABLE';\nexport const MESSAGE_ID_REQUIRED_ERROR = 'MESSAGE_ID_REQUIRED';\nexport const PURCHASE_USERNAME = 'auction';\nexport const ACCEPTABLE_USERNAME_ERRORS = new Set([USERNAME_PURCHASE_ERROR, 'USERNAME_INVALID']);\nexport const TME_WEB_DOMAINS = new Set(['t.me', 'web.t.me', 'a.t.me', 'k.t.me', 'z.t.me']);\nexport const WEB_APP_PLATFORM = 'weba';\nexport const LANG_PACK = 'weba';\n\n// eslint-disable-next-line max-len\nexport const COUNTRIES_WITH_12H_TIME_FORMAT = new Set(['AU', 'BD', 'CA', 'CO', 'EG', 'HN', 'IE', 'IN', 'JO', 'MX', 'MY', 'NI', 'NZ', 'PH', 'PK', 'SA', 'SV', 'US']);\n\nexport const API_CHAT_TYPES = ['bots', 'channels', 'chats', 'users', 'groups'] as const;\n\nexport const HEART_REACTION: ApiReactionEmoji = {\n  type: 'emoji',\n  emoticon: '❤',\n};\n\n// MTProto constants\nexport const SERVICE_NOTIFICATIONS_USER_ID = '777000';\nexport const REPLIES_USER_ID = '1271266957'; // TODO For Test connection ID must be equal to 708513\nexport const VERIFICATION_CODES_USER_ID = '489000';\nexport const ANONYMOUS_USER_ID = '2666000';\nexport const RESTRICTED_EMOJI_SET_ID = '7173162320003080';\nexport const CHANNEL_ID_LENGTH = 14; // 14 symbols, based on TDLib's `ZERO_CHANNEL_ID = -1000000000000`\nexport const DEFAULT_GIF_SEARCH_BOT_USERNAME = 'gif';\nexport const ALL_FOLDER_ID = 0;\nexport const ARCHIVED_FOLDER_ID = 1;\nexport const SAVED_FOLDER_ID = -1;\nexport const DELETED_COMMENTS_CHANNEL_ID = '-1000000000777';\nexport const MAX_MEDIA_FILES_FOR_ALBUM = 10;\nexport const MAX_ACTIVE_PINNED_CHATS = 5;\nexport const SCHEDULED_WHEN_ONLINE = 0x7FFFFFFE;\nexport const LANG_PACKS = ['android', 'ios', 'tdesktop', 'macos'] as const;\nexport const FEEDBACK_URL = 'https://bugs.telegram.org/?tag_ids=41&sort=time';\nexport const FAQ_URL = 'https://telegram.org/faq';\nexport const PRIVACY_URL = 'https://telegram.org/privacy';\nexport const MINI_APP_TOS_URL = 'https://telegram.org/tos/mini-apps';\nexport const FRAGMENT_ADS_URL = 'https://fragment.com/ads';\nexport const GENERAL_TOPIC_ID = 1;\nexport const STORY_EXPIRE_PERIOD = 86400; // 1 day\nexport const STORY_VIEWERS_EXPIRE_PERIOD = 86400; // 1 day\nexport const FRESH_AUTH_PERIOD = 86400; // 1 day\nexport const GIVEAWAY_BOOST_PER_PREMIUM = 4;\nexport const GIVEAWAY_MAX_ADDITIONAL_CHANNELS = 10;\nexport const GIVEAWAY_MAX_ADDITIONAL_USERS = 10;\nexport const GIVEAWAY_MAX_ADDITIONAL_COUNTRIES = 10;\nexport const BOOST_PER_SENT_GIFT = 3;\nexport const FRAGMENT_PHONE_CODE = '888';\nexport const FRAGMENT_PHONE_LENGTH = 11;\n\nexport const LIGHT_THEME_BG_COLOR = '#99BA92';\nexport const DARK_THEME_BG_COLOR = '#0F0F0F';\nexport const DEFAULT_PATTERN_COLOR = '#4A8E3A8C';\nexport const DARK_THEME_PATTERN_COLOR = '#0A0A0A8C';\nexport const PEER_COLOR_BG_OPACITY = '1a';\nexport const PEER_COLOR_BG_ACTIVE_OPACITY = '2b';\nexport const PEER_COLOR_GRADIENT_STEP = 5; // px\nexport const MAX_UPLOAD_FILEPART_SIZE = 524288;\nexport const MAX_UNIQUE_REACTIONS = 11;\n\nexport const IGNORE_UNHANDLED_ERRORS = new Set([\n  'USER_CANCELED',\n]);\n\n// Group calls\nexport const GROUP_CALL_VOLUME_MULTIPLIER = 100;\nexport const GROUP_CALL_DEFAULT_VOLUME = 100 * GROUP_CALL_VOLUME_MULTIPLIER;\n\nexport const DEFAULT_LIMITS: Record<ApiLimitType, readonly [number, number]> = {\n  uploadMaxFileparts: [4000, 8000],\n  stickersFaved: [5, 10],\n  savedGifs: [200, 400],\n  dialogFiltersChats: [100, 200],\n  dialogFilters: [10, 20],\n  dialogFolderPinned: [5, 10],\n  captionLength: [1024, 4096],\n  channels: [500, 1000],\n  channelsPublic: [10, 20],\n  aboutLength: [70, 140],\n  chatlistInvites: [3, 100],\n  chatlistJoined: [2, 20],\n  recommendedChannels: [10, 100],\n  savedDialogsPinned: [5, 100],\n  moreAccounts: [3, MULTIACCOUNT_MAX_SLOTS],\n};\nexport const DEFAULT_MAX_MESSAGE_LENGTH = 4096;\n\nexport const ONE_TIME_MEDIA_TTL_SECONDS = 2147483647;\n\n// Premium\nexport const PREMIUM_FEATURE_SECTIONS = [\n  'stories',\n  'double_limits',\n  'more_upload',\n  'faster_download',\n  'voice_to_text',\n  'no_ads',\n  'infinite_reactions',\n  'premium_stickers',\n  'animated_emoji',\n  'advanced_chat_management',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n  'translations',\n  'saved_tags',\n  'last_seen',\n  'message_privacy',\n  'effects',\n] as const;\n\nexport const PREMIUM_BOTTOM_VIDEOS: ApiPremiumSection[] = [\n  'faster_download',\n  'voice_to_text',\n  'advanced_chat_management',\n  'infinite_reactions',\n  'profile_badge',\n  'animated_userpics',\n  'emoji_status',\n  'translations',\n  'saved_tags',\n  'last_seen',\n  'message_privacy',\n  'effects',\n];\n\nexport const PREMIUM_LIMITS_ORDER: ApiLimitTypeForPromo[] = [\n  'channels',\n  'dialogFolderPinned',\n  'channelsPublic',\n  'savedGifs',\n  'stickersFaved',\n  'aboutLength',\n  'captionLength',\n  'dialogFilters',\n  'dialogFiltersChats',\n  'moreAccounts',\n  'recommendedChannels',\n];\n\nexport const DEFAULT_GIFT_PROFILE_FILTER_OPTIONS : GiftProfileFilterOptions = {\n  sortType: 'byDate',\n  shouldIncludeUnlimited: true,\n  shouldIncludeLimited: true,\n  shouldIncludeUnique: true,\n  shouldIncludeDisplayed: true,\n  shouldIncludeHidden: true,\n} as const;\n","export type Scheduler = typeof requestAnimationFrame | typeof onTickEnd;\n\nexport function debounce<F extends AnyToVoidFunction>(\n  fn: F,\n  ms: number,\n  shouldRunFirst = true,\n  shouldRunLast = true,\n) {\n  let waitingTimeout: number | undefined;\n\n  return (...args: Parameters<F>) => {\n    if (waitingTimeout) {\n      clearTimeout(waitingTimeout);\n      waitingTimeout = undefined;\n    } else if (shouldRunFirst) {\n      fn(...args);\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    waitingTimeout = self.setTimeout(() => {\n      if (shouldRunLast) {\n        fn(...args);\n      }\n\n      waitingTimeout = undefined;\n    }, ms);\n  };\n}\n\nexport function throttle<F extends AnyToVoidFunction>(\n  fn: F,\n  ms: number,\n  shouldRunFirst = true,\n) {\n  let interval: number | undefined;\n  let isPending: boolean;\n  let args: Parameters<F>;\n\n  return (..._args: Parameters<F>) => {\n    isPending = true;\n    args = _args;\n\n    if (!interval) {\n      if (shouldRunFirst) {\n        isPending = false;\n        fn(...args);\n      }\n\n      // eslint-disable-next-line no-restricted-globals\n      interval = self.setInterval(() => {\n        if (!isPending) {\n          // eslint-disable-next-line no-restricted-globals\n          self.clearInterval(interval!);\n          interval = undefined;\n          return;\n        }\n\n        isPending = false;\n        fn(...args);\n      }, ms);\n    }\n  };\n}\n\nexport function throttleWithTickEnd<F extends AnyToVoidFunction>(fn: F) {\n  return throttleWith(onTickEnd, fn);\n}\n\nexport function throttleWith<F extends AnyToVoidFunction>(schedulerFn: Scheduler, fn: F) {\n  let waiting = false;\n  let args: Parameters<F>;\n\n  return (..._args: Parameters<F>) => {\n    args = _args;\n\n    if (!waiting) {\n      waiting = true;\n\n      schedulerFn(() => {\n        waiting = false;\n        fn(...args);\n      });\n    }\n  };\n}\n\nexport const pause = (ms: number) => new Promise<void>((resolve) => {\n  setTimeout(() => resolve(), ms);\n});\n\nexport function rafPromise() {\n  return new Promise<void>((resolve) => {\n    fastRaf(resolve);\n  });\n}\n\nconst FAST_RAF_TIMEOUT_FALLBACK_MS = 35; // < 30 FPS\n\nlet fastRafCallbacks: Set<NoneToVoidFunction> | undefined;\nlet fastRafFallbackCallbacks: Set<NoneToVoidFunction> | undefined;\nlet fastRafFallbackTimeout: number | undefined;\n\n// May result in an immediate execution if called from another RAF callback which was scheduled\n// (and therefore is executed) earlier than RAF callback scheduled by `fastRaf`\nexport function fastRaf(callback: NoneToVoidFunction, withTimeoutFallback = false) {\n  if (!fastRafCallbacks) {\n    fastRafCallbacks = new Set([callback]);\n\n    requestAnimationFrame(() => {\n      const currentCallbacks = fastRafCallbacks!;\n\n      fastRafCallbacks = undefined;\n      fastRafFallbackCallbacks = undefined;\n\n      if (fastRafFallbackTimeout) {\n        clearTimeout(fastRafFallbackTimeout);\n        fastRafFallbackTimeout = undefined;\n      }\n\n      currentCallbacks.forEach((cb) => cb());\n    });\n  } else {\n    fastRafCallbacks.add(callback);\n  }\n\n  if (withTimeoutFallback) {\n    if (!fastRafFallbackCallbacks) {\n      fastRafFallbackCallbacks = new Set([callback]);\n    } else {\n      fastRafFallbackCallbacks.add(callback);\n    }\n\n    if (!fastRafFallbackTimeout) {\n      fastRafFallbackTimeout = window.setTimeout(() => {\n        const currentTimeoutCallbacks = fastRafFallbackCallbacks!;\n\n        if (fastRafCallbacks) {\n          currentTimeoutCallbacks.forEach(fastRafCallbacks.delete, fastRafCallbacks);\n        }\n        fastRafFallbackCallbacks = undefined;\n\n        if (fastRafFallbackTimeout) {\n          clearTimeout(fastRafFallbackTimeout);\n          fastRafFallbackTimeout = undefined;\n        }\n\n        currentTimeoutCallbacks.forEach((cb) => cb());\n      }, FAST_RAF_TIMEOUT_FALLBACK_MS);\n    }\n  }\n}\n\nlet onTickEndCallbacks: NoneToVoidFunction[] | undefined;\n\nexport function onTickEnd(callback: NoneToVoidFunction) {\n  if (!onTickEndCallbacks) {\n    onTickEndCallbacks = [callback];\n\n    Promise.resolve().then(() => {\n      const currentCallbacks = onTickEndCallbacks!;\n      onTickEndCallbacks = undefined;\n      currentCallbacks.forEach((cb) => cb());\n    });\n  } else {\n    onTickEndCallbacks.push(callback);\n  }\n}\n\nconst IDLE_TIMEOUT = 500;\n\nlet onIdleCallbacks: NoneToVoidFunction[] | undefined;\n\nexport function onIdle(callback: NoneToVoidFunction) {\n  // eslint-disable-next-line no-restricted-globals\n  if (!self.requestIdleCallback) {\n    onTickEnd(callback);\n    return;\n  }\n\n  if (!onIdleCallbacks) {\n    onIdleCallbacks = [callback];\n\n    requestIdleCallback((deadline) => {\n      const currentCallbacks = onIdleCallbacks!;\n      onIdleCallbacks = undefined;\n\n      while (currentCallbacks.length) {\n        const cb = currentCallbacks.shift()!;\n        cb();\n\n        if (!deadline.timeRemaining()) break;\n      }\n\n      if (currentCallbacks.length) {\n        if (onIdleCallbacks) {\n          // Prepend the remaining callbacks if the next pass is already planned\n          onIdleCallbacks = currentCallbacks.concat(onIdleCallbacks);\n        } else {\n          currentCallbacks.forEach(onIdle);\n        }\n      }\n    }, { timeout: IDLE_TIMEOUT });\n  } else {\n    onIdleCallbacks.push(callback);\n  }\n}\n\nlet beforeUnloadCallbacks: NoneToVoidFunction[] | undefined;\n\nexport function onBeforeUnload(callback: NoneToVoidFunction, isLast = false) {\n  if (!beforeUnloadCallbacks) {\n    beforeUnloadCallbacks = [];\n    // eslint-disable-next-line no-restricted-globals\n    self.addEventListener('beforeunload', () => {\n      beforeUnloadCallbacks!.forEach((cb) => cb());\n    });\n  }\n\n  if (isLast) {\n    beforeUnloadCallbacks.push(callback);\n  } else {\n    beforeUnloadCallbacks.unshift(callback);\n  }\n\n  return () => {\n    beforeUnloadCallbacks = beforeUnloadCallbacks!.filter((cb) => cb !== callback);\n  };\n}\n","import { ASSET_CACHE_NAME } from '../config';\nimport { pause } from '../util/schedulers';\n\ndeclare const self: ServiceWorkerGlobalScope;\n\n// An attempt to fix freezing UI on iOS\nconst TIMEOUT = 3000;\n\nexport async function respondWithCacheNetworkFirst(e: FetchEvent) {\n  const remote = await withTimeout(() => fetch(e.request), TIMEOUT);\n  if (!remote?.ok) {\n    return respondWithCache(e);\n  }\n\n  const toCache = remote.clone();\n  self.caches.open(ASSET_CACHE_NAME).then((cache) => {\n    return cache?.put(e.request, toCache);\n  });\n\n  return remote;\n}\n\nexport async function respondWithCache(e: FetchEvent) {\n  const cacheResult = await withTimeout(async () => {\n    const cache = await self.caches.open(ASSET_CACHE_NAME);\n    const cached = await cache.match(e.request);\n\n    return { cache, cached };\n  }, TIMEOUT);\n\n  const { cache, cached } = cacheResult || {};\n\n  if (cache && cached) {\n    if (cached.ok) {\n      return cached;\n    } else {\n      await cache.delete(e.request);\n    }\n  }\n\n  const remote = await fetch(e.request);\n\n  if (remote.ok && cache) {\n    cache.put(e.request, remote.clone());\n  }\n\n  return remote;\n}\n\nasync function withTimeout<T>(cb: () => Promise<T>, timeout: number) {\n  let isResolved = false;\n\n  try {\n    return await Promise.race([\n      pause(timeout).then(() => (isResolved ? undefined : Promise.reject(new Error('TIMEOUT')))),\n      cb(),\n    ]);\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err);\n    return undefined;\n  } finally {\n    isResolved = true;\n  }\n}\n\nexport function clearAssetCache() {\n  return self.caches.delete(ASSET_CACHE_NAME);\n}\n","declare const globalThis: ServiceWorkerGlobalScope & WorkerGlobalScope & SharedWorkerGlobalScope & Window;\n\nexport const IS_MULTIACCOUNT_SUPPORTED = 'SharedWorker' in globalThis;\nexport const IS_INTL_LIST_FORMAT_SUPPORTED = 'ListFormat' in Intl;\nexport const IS_BAD_URL_PARSER = new URL('tg://host').host !== 'host';\nexport const ARE_WEBCODECS_SUPPORTED = 'VideoDecoder' in globalThis;\n","import type { AccountInfo, SessionUserInfo, SharedSessionData } from '../types';\n\nimport {\n  ACCOUNT_QUERY,\n  DATA_BROADCAST_CHANNEL_PREFIX,\n  ESTABLISH_BROADCAST_CHANNEL_PREFIX,\n  GLOBAL_STATE_CACHE_PREFIX,\n  MULTIACCOUNT_MAX_SLOTS,\n  MULTITAB_LOCALSTORAGE_KEY_PREFIX,\n  SESSION_ACCOUNT_PREFIX,\n} from '../config';\nimport { IS_MULTIACCOUNT_SUPPORTED } from './browser/globalEnvironment';\n\nconst WORKER_NAME = typeof WorkerGlobalScope !== 'undefined' && globalThis.self instanceof WorkerGlobalScope\n  ? globalThis.self.name : undefined;\nconst WORKER_ACCOUNT_SLOT = WORKER_NAME ? Number(new URLSearchParams(WORKER_NAME).get(ACCOUNT_QUERY)) : undefined;\n\nexport const ACCOUNT_SLOT = WORKER_ACCOUNT_SLOT || (\n  IS_MULTIACCOUNT_SUPPORTED ? getAccountSlot(globalThis.location.href) : undefined\n);\n\nexport const DATA_BROADCAST_CHANNEL_NAME = `${DATA_BROADCAST_CHANNEL_PREFIX}_${ACCOUNT_SLOT || 1}`;\nexport const ESTABLISH_BROADCAST_CHANNEL_NAME = `${ESTABLISH_BROADCAST_CHANNEL_PREFIX}_${ACCOUNT_SLOT || 1}`;\nexport const MULTITAB_STORAGE_KEY = `${MULTITAB_LOCALSTORAGE_KEY_PREFIX}_${ACCOUNT_SLOT || 1}`;\nexport const GLOBAL_STATE_CACHE_KEY = ACCOUNT_SLOT\n  ? `${GLOBAL_STATE_CACHE_PREFIX}_${ACCOUNT_SLOT}` : GLOBAL_STATE_CACHE_PREFIX;\n\nexport function getAccountSlot(url: string) {\n  const params = new URL(url).searchParams;\n  const slot = params.get(ACCOUNT_QUERY);\n  const slotNumber = slot ? Number(slot) : 1;\n  if (!slotNumber || Number.isNaN(slotNumber) || slotNumber === 1) return undefined;\n  return slotNumber;\n}\n\nexport function getAccountsInfo() {\n  if (!IS_MULTIACCOUNT_SUPPORTED) return {};\n  const accountInfo: Record<number, AccountInfo> = {};\n  for (let i = 1; i <= MULTIACCOUNT_MAX_SLOTS; i++) {\n    const info = getAccountInfo(i);\n    if (info) {\n      accountInfo[i] = info;\n    }\n  }\n  return accountInfo;\n}\n\nfunction getAccountInfo(slot: number): AccountInfo | undefined {\n  const sessionData = loadSlotSession(slot);\n  const {\n    userId, avatarUri, color, emojiStatusId, firstName, lastName, isPremium, isTest, phone,\n  } = sessionData || {};\n\n  if (!userId) return undefined;\n\n  return {\n    userId,\n    avatarUri,\n    color,\n    emojiStatusId,\n    firstName,\n    lastName,\n    isPremium,\n    isTest,\n    phone,\n  };\n}\n\nexport function loadSlotSession(slot: number | undefined): SharedSessionData | undefined {\n  try {\n    const data = JSON.parse(localStorage.getItem(`${SESSION_ACCOUNT_PREFIX}${slot || 1}`) || '{}') as SharedSessionData;\n    if (!data.dcId) return undefined;\n    return data;\n  } catch (e) {\n    return undefined;\n  }\n}\n\nexport function storeAccountData(slot: number | undefined, data: Partial<SessionUserInfo>) {\n  const currentSlotData = loadSlotSession(slot);\n\n  if (!currentSlotData) return;\n\n  const updatedSharedData: SharedSessionData = {\n    ...currentSlotData,\n    ...data,\n  };\n\n  if (!updatedSharedData.userId) return;\n\n  writeSlotSession(slot, updatedSharedData);\n}\n\nexport function writeSlotSession(slot: number | undefined, data: SharedSessionData) {\n  localStorage.setItem(`${SESSION_ACCOUNT_PREFIX}${slot || 1}`, JSON.stringify(data));\n}\n\nexport function getAccountSlotUrl(slot: number, forLogin?: boolean) {\n  const url = new URL(globalThis.location.href);\n  if (slot !== 1) {\n    url.searchParams.set(ACCOUNT_QUERY, String(slot));\n  } else {\n    url.searchParams.delete(ACCOUNT_QUERY);\n  }\n  url.hash = forLogin ? 'login' : '';\n  return url.toString();\n}\n\n// Validate current version across all tabs to avoid conflicts\nif (typeof window === 'object') {\n  const versionChannel = new BroadcastChannel('tt-version');\n  versionChannel.postMessage({ version: APP_VERSION });\n\n  versionChannel.addEventListener('message', (event) => {\n    const { version } = event.data;\n    if (!version) return;\n    if (semverCompare(APP_VERSION, version) === -1) {\n      window.location.reload();\n    }\n\n    // If incoming version is older, send back the current version\n    if (semverCompare(APP_VERSION, version) === 1) {\n      versionChannel.postMessage({ version: APP_VERSION });\n    }\n  });\n}\n\nfunction semverCompare(a: string, b: string) {\n  if (a.startsWith(`${b}-`)) return -1;\n  if (b.startsWith(`${a}-`)) return 1;\n  return a.localeCompare(b, undefined, { numeric: true, sensitivity: 'case', caseFirst: 'upper' });\n}\n","import {\n  DEBUG,\n  MEDIA_CACHE_MAX_BYTES,\n  MEDIA_PROGRESSIVE_CACHE_DISABLED,\n  MEDIA_PROGRESSIVE_CACHE_NAME,\n} from '../config';\nimport generateUniqueId from '../util/generateUniqueId';\nimport { getAccountSlot } from '../util/multiaccount';\nimport { pause } from '../util/schedulers';\n\ndeclare const self: ServiceWorkerGlobalScope;\n\ntype PartInfo = {\n  type: 'PartInfo';\n  arrayBuffer: ArrayBuffer;\n  mimeType: 'string';\n  fullSize: number;\n};\n\ntype RequestStates = {\n  resolve: (response: PartInfo) => void;\n  reject: () => void;\n};\n\nconst MB = 1024 * 1024;\nconst DEFAULT_PART_SIZE = 0.5 * MB;\nconst MAX_END_TO_CACHE = 2 * MB - 1; // We only cache the first 2 MB of each file\nconst PART_TIMEOUT = 60000;\n\nconst requestStates = new Map<string, RequestStates>();\n\nexport async function respondForProgressive(e: FetchEvent) {\n  const { url } = e.request;\n  const accountSlot = getAccountSlot(url);\n  const range = e.request.headers.get('range');\n  const bytes = /^bytes=(\\d+)-(\\d+)?$/g.exec(range || '')!;\n  const start = Number(bytes[1]);\n  const originalEnd = Number(bytes[2]);\n\n  let end = originalEnd;\n  if (!end || (end - start + 1) > DEFAULT_PART_SIZE) {\n    end = start + DEFAULT_PART_SIZE - 1;\n  }\n\n  const parsedUrl = new URL(url);\n\n  // Optimization for Safari\n  if (start === 0 && end === 1) {\n    const fileSizeParam = parsedUrl.searchParams.get('fileSize');\n    const fileSize = fileSizeParam && Number(fileSizeParam);\n    const mimeType = parsedUrl.searchParams.get('mimeType');\n\n    if (fileSize && mimeType) {\n      return new Response(new Uint8Array(2).buffer, {\n        status: 206,\n        statusText: 'Partial Content',\n        headers: [\n          ['Content-Range', `bytes 0-1/${fileSize}`],\n          ['Accept-Ranges', 'bytes'],\n          ['Content-Length', '2'],\n          ['Content-Type', mimeType],\n        ],\n      });\n    }\n  }\n\n  parsedUrl.searchParams.set('start', String(start));\n  parsedUrl.searchParams.set('end', String(end));\n  const cacheKey = parsedUrl.href;\n  const [cachedArrayBuffer, cachedHeaders] = !MEDIA_PROGRESSIVE_CACHE_DISABLED\n    ? await fetchFromCache(accountSlot, cacheKey) : [];\n\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log(\n      `FETCH PROGRESSIVE ${cacheKey} (request: ${start}-${originalEnd}) CACHED: ${Boolean(cachedArrayBuffer)}`,\n    );\n  }\n\n  if (cachedArrayBuffer) {\n    return new Response(cachedArrayBuffer, {\n      status: 206,\n      statusText: 'Partial Content',\n      headers: cachedHeaders,\n    });\n  }\n\n  let partInfo;\n  try {\n    partInfo = await requestPart(e, { url, start, end });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('FETCH PROGRESSIVE', err);\n    }\n  }\n\n  if (!partInfo) {\n    return new Response('', {\n      status: 500,\n      statusText: 'Failed to fetch progressive part',\n    });\n  }\n\n  const { arrayBuffer, fullSize, mimeType } = partInfo;\n\n  const partSize = Math.min(end - start + 1, arrayBuffer.byteLength);\n  end = start + partSize - 1;\n  const arrayBufferPart = arrayBuffer.slice(0, partSize);\n  const headers: [string, string][] = [\n    ['Content-Range', `bytes ${start}-${end}/${fullSize}`],\n    ['Accept-Ranges', 'bytes'],\n    ['Content-Length', String(partSize)],\n    ['Content-Type', mimeType],\n  ];\n\n  if (!MEDIA_PROGRESSIVE_CACHE_DISABLED && partSize <= MEDIA_CACHE_MAX_BYTES && end < MAX_END_TO_CACHE) {\n    saveToCache(accountSlot, cacheKey, arrayBufferPart, headers);\n  }\n\n  return new Response(arrayBufferPart, {\n    status: 206,\n    statusText: 'Partial Content',\n    headers,\n  });\n}\n\n// We can not cache 206 responses: https://github.com/GoogleChrome/workbox/issues/1644#issuecomment-638741359\nasync function fetchFromCache(accountSlot: number | undefined, cacheKey: string) {\n  const cacheName = !accountSlot ? MEDIA_PROGRESSIVE_CACHE_NAME : `${MEDIA_PROGRESSIVE_CACHE_NAME}_${accountSlot}`;\n  const cache = await self.caches.open(cacheName);\n\n  return Promise.all([\n    cache.match(`${cacheKey}&type=arrayBuffer`).then((r) => (r ? r.arrayBuffer() : undefined)),\n    cache.match(`${cacheKey}&type=headers`).then((r) => (r ? r.json() : undefined)),\n  ]);\n}\n\nasync function saveToCache(\n  accountSlot: number | undefined, cacheKey: string, arrayBuffer: ArrayBuffer, headers: HeadersInit,\n) {\n  const cacheName = !accountSlot ? MEDIA_PROGRESSIVE_CACHE_NAME : `${MEDIA_PROGRESSIVE_CACHE_NAME}_${accountSlot}`;\n  const cache = await self.caches.open(cacheName);\n\n  return Promise.all([\n    cache.put(new Request(`${cacheKey}&type=arrayBuffer`), new Response(arrayBuffer)),\n    cache.put(new Request(`${cacheKey}&type=headers`), new Response(JSON.stringify(headers))),\n  ]);\n}\n\nexport async function requestPart(\n  e: FetchEvent,\n  params: { url: string; start: number; end: number },\n): Promise<PartInfo | undefined> {\n  const isDownload = params.url.includes('/download/');\n  const client = await (isDownload ? getClientForRequest(params.url) : self.clients.get(e.clientId));\n  if (!client) {\n    return undefined;\n  }\n\n  const messageId = generateUniqueId();\n  const requestState = {} as RequestStates;\n\n  let isResolved = false;\n  const promise = Promise.race([\n    pause(PART_TIMEOUT).then(() => (isResolved ? undefined : Promise.reject(new Error('ERROR_PART_TIMEOUT')))),\n    new Promise<PartInfo>((resolve, reject) => {\n      Object.assign(requestState, { resolve, reject });\n    }),\n  ]);\n\n  requestStates.set(messageId, requestState);\n  promise\n    .catch(() => undefined)\n    .finally(() => {\n      requestStates.delete(messageId);\n      isResolved = true;\n    });\n\n  client.postMessage({\n    type: 'requestPart',\n    messageId,\n    params,\n  });\n\n  return promise;\n}\n\nasync function getClientForRequest(url: string) {\n  const urlAccountSlot = getAccountSlot(url);\n  const clients = await self.clients.matchAll();\n  return clients.find((c) => (\n    c.type === 'window' && c.frameType === 'top-level' && getAccountSlot(c.url) === urlAccountSlot\n  ));\n}\n\nself.addEventListener('message', (e) => {\n  const { type, messageId, result } = e.data as {\n    type: string;\n    messageId: string;\n    result: PartInfo;\n  };\n\n  if (type === 'partResponse') {\n    const requestState = requestStates.get(messageId);\n    if (requestState) {\n      requestState.resolve(result);\n    }\n  }\n});\n","export default function generateUniqueId() {\n  return Date.now().toString(36) + Math.random().toString(36).slice(2);\n}\n","import { DEBUG } from '../config';\nimport { requestPart } from './progressive';\n\nconst DOWNLOAD_PART_SIZE = 1024 * 1024;\nconst TEST_PART_SIZE = 64 * 1024;\n\nconst QUEUE_SIZE = 8;\n\nclass FilePartQueue<T> {\n  queue: Promise<T>[];\n\n  constructor() {\n    this.queue = [];\n  }\n\n  push(task: Promise<T>) {\n    this.queue.push(task);\n  }\n\n  async pop(): Promise<T> {\n    const result = await this.queue.shift()!;\n    return result;\n  }\n\n  get size() {\n    return this.queue.length;\n  }\n}\n\nexport async function respondForDownload(e: FetchEvent) {\n  const { url } = e.request;\n\n  let partInfo;\n  try {\n    partInfo = await requestPart(e, { url, start: 0, end: TEST_PART_SIZE });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error('FETCH DOWNLOAD', err);\n    }\n  }\n\n  if (!partInfo) {\n    return new Response('', {\n      status: 500,\n      statusText: 'Failed to fetch file to download',\n    });\n  }\n\n  const matchedFilename = e.request.url.match(/filename=(.*)/);\n  const filenameHeader = matchedFilename ? `filename=\"${decodeURIComponent(matchedFilename[1])}\"` : '';\n  const { fullSize, mimeType } = partInfo;\n\n  const headers: [string, string][] = [\n    ['Content-Length', String(fullSize)],\n    ['Content-Type', mimeType],\n    ['Content-Disposition', `attachment; ${filenameHeader}`],\n  ];\n\n  const queue = new FilePartQueue<ArrayBuffer | undefined>();\n  const enqueue = (offset: number) => {\n    queue.push(requestPart(e, {\n      url, start: offset, end: offset + DOWNLOAD_PART_SIZE - 1,\n    })\n      .then((part) => part?.arrayBuffer));\n    return offset + DOWNLOAD_PART_SIZE;\n  };\n  let lastOffset = 0;\n  const stream = new ReadableStream({\n    start() {\n      for (let i = 0; i < QUEUE_SIZE; i++) {\n        if (lastOffset >= fullSize) break;\n        lastOffset = enqueue(lastOffset);\n      }\n    },\n\n    async pull(controller) {\n      const buffer = await queue.pop();\n      if (!buffer) {\n        controller.close();\n        return;\n      }\n      controller.enqueue(new Uint8Array(buffer));\n\n      if (buffer.byteLength < DOWNLOAD_PART_SIZE) {\n        controller.close();\n        return;\n      }\n\n      if (lastOffset < fullSize) {\n        lastOffset = enqueue(lastOffset);\n      }\n    },\n  });\n\n  return new Response(stream, {\n    status: 200,\n    statusText: 'OK',\n    headers,\n  });\n}\n","import { APP_NAME, DEBUG, DEBUG_MORE } from '../config';\n\ndeclare const self: ServiceWorkerGlobalScope;\n\nenum Boolean {\n  True = '1',\n  False = '0',\n}\n\ntype PushData = {\n  custom: {\n    msg_id?: string;\n    silent?: string;\n    channel_id?: string;\n    chat_id?: string;\n    from_id?: string;\n  };\n  mute: Boolean;\n  badge: Boolean;\n  loc_key: string;\n  loc_args: string[];\n  random_id: number;\n  title: string;\n  description: string;\n};\n\ntype NotificationData = {\n  messageId?: number;\n  chatId?: string;\n  title: string;\n  body: string;\n  isSilent?: boolean;\n  icon?: string;\n  reaction?: string;\n  shouldReplaceHistory?: boolean;\n};\n\ntype FocusMessageData = {\n  chatId?: string;\n  messageId?: number;\n  reaction?: string;\n  shouldReplaceHistory?: boolean;\n};\n\ntype CloseNotificationData = {\n  lastReadInboxMessageId?: number;\n  chatId: string;\n};\n\nlet lastSyncAt = new Date().valueOf();\nconst shownNotifications = new Set();\nconst clickBuffer: Record<string, NotificationData> = {};\n\nfunction getPushData(e: PushEvent | Notification): PushData | undefined {\n  try {\n    return e.data.json();\n  } catch (error) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.log('[SW] Unable to parse push notification data', e.data);\n    }\n    return undefined;\n  }\n}\n\nfunction getChatId(data: PushData) {\n  if (data.custom.from_id) {\n    return data.custom.from_id;\n  }\n\n  // Chats and channels have “negative” IDs\n  if (data.custom.chat_id || data.custom.channel_id) {\n    return `-${data.custom.chat_id || data.custom.channel_id}`;\n  }\n\n  return undefined;\n}\n\nfunction getMessageId(data: PushData) {\n  if (!data.custom.msg_id) return undefined;\n  return parseInt(data.custom.msg_id, 10);\n}\n\nfunction getNotificationData(data: PushData): NotificationData {\n  let title = data.title || APP_NAME;\n  const isSilent = data.custom?.silent === Boolean.True;\n  if (isSilent) {\n    title += ' 🔕';\n  }\n  return {\n    chatId: getChatId(data),\n    messageId: getMessageId(data),\n    body: data.description,\n    isSilent,\n    title,\n  };\n}\n\nasync function getClients() {\n  const appUrl = new URL(self.registration.scope).origin;\n  const clients = await self.clients.matchAll({ type: 'window' }) as WindowClient[];\n  return clients.filter((client) => {\n    return new URL(client.url).origin === appUrl;\n  });\n}\n\nasync function playNotificationSound(id: string) {\n  const clients = await getClients();\n  const client = clients[0];\n  if (!client) return;\n  client.postMessage({\n    type: 'playNotificationSound',\n    payload: { id },\n  });\n}\n\nfunction showNotification({\n  chatId,\n  messageId,\n  body,\n  title,\n  icon,\n  reaction,\n  isSilent,\n  shouldReplaceHistory,\n}: NotificationData) {\n  const isFirstBatch = new Date().valueOf() - lastSyncAt < 1000;\n  const tag = String(isFirstBatch ? 0 : chatId || 0);\n  const options: NotificationOptions = {\n    body,\n    data: {\n      chatId,\n      messageId,\n      reaction,\n      count: 1,\n      shouldReplaceHistory,\n    },\n    icon: icon || 'icon-192x192.png',\n    badge: 'icon-192x192.png',\n    tag,\n    // @ts-ignore\n    vibrate: [200, 100, 200],\n  };\n\n  return Promise.all([\n    // TODO Update condition when reaction badges are implemented\n    (!reaction && !isSilent) ? playNotificationSound(String(messageId) || chatId || '') : undefined,\n    self.registration.showNotification(title, options),\n  ]);\n}\n\nasync function closeNotifications({\n  chatId,\n  lastReadInboxMessageId,\n}: CloseNotificationData) {\n  const notifications = await self.registration.getNotifications();\n  const lastMessageId = lastReadInboxMessageId || Number.MAX_VALUE;\n  notifications.forEach((notification) => {\n    if (\n      notification.tag === '0'\n      || (notification.data.chatId === chatId && notification.data.messageId <= lastMessageId)\n    ) {\n      notification.close();\n    }\n  });\n}\n\nexport function handlePush(e: PushEvent) {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('[SW] Push received event', e);\n    if (e.data) {\n      // eslint-disable-next-line no-console\n      console.log('[SW] Push received with data', e.data.json());\n    }\n  }\n\n  const data = getPushData(e);\n\n  // Do not show muted notifications\n  if (!data || data.mute === Boolean.True) return;\n\n  const notification = getNotificationData(data);\n\n  // Don't show already triggered notification\n  if (shownNotifications.has(notification.messageId)) {\n    shownNotifications.delete(notification.messageId);\n    return;\n  }\n\n  e.waitUntil(showNotification(notification));\n}\n\nasync function focusChatMessage(client: WindowClient, data: FocusMessageData) {\n  if (!data.chatId) return;\n  client.postMessage({\n    type: 'focusMessage',\n    payload: data,\n  });\n  if (!client.focused) {\n    // Catch \"focus not allowed\" DOM Exceptions\n    try {\n      await client.focus();\n    } catch (error) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.warn('[SW] ', error);\n      }\n    }\n  }\n}\n\nexport function handleNotificationClick(e: NotificationEvent) {\n  const appUrl = self.registration.scope;\n  e.notification.close(); // Android needs explicit close.\n  const { data } = e.notification;\n  const notifyClients = async () => {\n    const clients = await getClients();\n    await Promise.all(clients.map((client) => {\n      clickBuffer[client.id] = data;\n      return focusChatMessage(client, data);\n    }));\n    if (!self.clients.openWindow || clients.length > 0) return undefined;\n    // Store notification data for default client (fix for android)\n    clickBuffer[0] = data;\n    // If there is no opened client we need to open one and wait until it is fully loaded\n    try {\n      const newClient = await self.clients.openWindow(appUrl);\n      if (newClient) {\n        // Store notification data until client is fully loaded\n        clickBuffer[newClient.id] = data;\n      }\n    } catch (error) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.warn('[SW] ', error);\n      }\n    }\n    return undefined;\n  };\n  e.waitUntil(notifyClients());\n}\n\nexport function handleClientMessage(e: ExtendableMessageEvent) {\n  if (DEBUG_MORE) {\n    // eslint-disable-next-line no-console\n    console.log('[SW] New message from client', e);\n  }\n  if (!e.data) return;\n  const source = e.source as WindowClient;\n  if (e.data.type === 'clientReady') {\n    // focus on chat message when client is fully ready\n    const data = clickBuffer[source.id] || clickBuffer[0];\n    if (data) {\n      delete clickBuffer[source.id];\n      delete clickBuffer[0];\n      e.waitUntil(focusChatMessage(source, data));\n    }\n  }\n  if (e.data.type === 'showMessageNotification') {\n    // store messageId for already shown notification\n    const notification: NotificationData = e.data.payload;\n    e.waitUntil((async () => {\n      // Close existing notification if it is already shown\n      if (notification.chatId) {\n        const notifications = await self.registration.getNotifications({ tag: notification.chatId });\n        notifications.forEach((n) => n.close());\n      }\n      // Mark this notification as shown if it was handled locally\n      shownNotifications.add(notification.messageId);\n      return showNotification(notification);\n    })());\n  }\n\n  if (e.data.type === 'closeMessageNotifications') {\n    e.waitUntil(closeNotifications(e.data.payload));\n  }\n}\n\nself.addEventListener('sync', () => {\n  lastSyncAt = Date.now();\n});\n","export default class Deferred<T = void> {\n  promise: Promise<T>;\n\n  reject!: (reason?: any) => void;\n\n  resolve!: (value: T | PromiseLike<T>) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n  }\n\n  static resolved(): Deferred<void>;\n  static resolved<T>(value: T): Deferred<T>;\n  static resolved<T>(value?: T): Deferred<T | void> {\n    const deferred = new Deferred<T | void>();\n    deferred.resolve(value);\n    return deferred;\n  }\n}\n","import Deferred from '../util/Deferred';\n\ndeclare const self: ServiceWorkerGlobalScope;\n\ntype ShareData = {\n  title?: string;\n  text?: string;\n  url?: string;\n  files?: File[];\n};\n\nconst READY_CLIENT_DEFERREDS = new Map<string, Deferred<void>>();\n\nexport async function respondForShare(e: FetchEvent) {\n  if (e.request.method === 'POST') {\n    try {\n      const formData = await e.request.formData();\n      const data = parseFormData(formData);\n      requestShare(data, e.resultingClientId);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.warn('[SHARE] Failed to parse input data', err);\n    }\n  }\n\n  return Response.redirect('.');\n}\n\nexport function handleClientMessage(e: ExtendableMessageEvent) {\n  const { source, data } = e;\n  if (!source) return;\n\n  if (data.type === 'clientReady') {\n    const { id } = (source as Client);\n    const deferred = READY_CLIENT_DEFERREDS.get(id);\n    if (deferred) {\n      deferred.resolve();\n    } else {\n      READY_CLIENT_DEFERREDS.set(id, Deferred.resolved());\n    }\n  }\n}\n\nasync function requestShare(data: ShareData, clientId: string) {\n  const client = await self.clients.get(clientId);\n  if (!client) {\n    return;\n  }\n\n  await getClientReadyDeferred(clientId);\n\n  client.postMessage({\n    type: 'share',\n    payload: data,\n  });\n}\n\nfunction getClientReadyDeferred(clientId: string) {\n  const deferred = READY_CLIENT_DEFERREDS.get(clientId);\n  if (deferred) {\n    return deferred.promise;\n  }\n\n  const newDeferred = new Deferred<void>();\n  READY_CLIENT_DEFERREDS.set(clientId, newDeferred);\n  return newDeferred.promise;\n}\n\nfunction parseFormData(formData: FormData): ShareData {\n  const files = formData.getAll('files') as File[];\n  const title = formData.get('title') as string;\n  const text = formData.get('text') as string;\n  const url = formData.get('url') as string;\n\n  return {\n    title,\n    text,\n    url,\n    files,\n  };\n}\n","import { DEBUG, ELECTRON_HOST_URL, IS_PACKAGED_ELECTRON } from '../config';\nimport { pause } from '../util/schedulers';\nimport { clearAssetCache, respondWithCache, respondWithCacheNetworkFirst } from './assetCache';\nimport { respondForDownload } from './download';\nimport { respondForProgressive } from './progressive';\nimport {\n  handleClientMessage as handleNotificationMessage,\n  handleNotificationClick,\n  handlePush,\n} from './pushNotification';\nimport { handleClientMessage as handleShareMessage, respondForShare } from './share';\n\ndeclare const self: ServiceWorkerGlobalScope;\n\nconst RE_NETWORK_FIRST_ASSETS = /\\.(wasm|html)$/;\nconst RE_CACHE_FIRST_ASSETS = /[\\da-f]{20}.*\\.(js|css|woff2?|svg|png|jpg|jpeg|tgs|json|wasm)$/;\nconst ACTIVATE_TIMEOUT = 3000;\n\nself.addEventListener('install', (e) => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('ServiceWorker installed');\n  }\n\n  // Activate worker immediately\n  e.waitUntil(self.skipWaiting());\n});\n\nself.addEventListener('activate', (e) => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('ServiceWorker activated');\n  }\n\n  e.waitUntil(\n    Promise.race([\n      // An attempt to fix freezing UI on iOS\n      pause(ACTIVATE_TIMEOUT),\n      Promise.all([\n        clearAssetCache(),\n        // Become available to all pages\n        self.clients.claim(),\n      ]),\n    ]),\n  );\n});\n\nself.addEventListener('fetch', (e: FetchEvent) => {\n  const { url } = e.request;\n  const scope = IS_PACKAGED_ELECTRON ? ELECTRON_HOST_URL : self.registration.scope;\n  if (!url.startsWith(scope)) {\n    return false;\n  }\n\n  const { pathname, protocol } = new URL(url);\n  const { pathname: scopePathname } = new URL(scope);\n\n  if (pathname.includes('/progressive/')) {\n    e.respondWith(respondForProgressive(e));\n    return true;\n  }\n\n  if (pathname.includes('/download/')) {\n    e.respondWith(respondForDownload(e));\n    return true;\n  }\n\n  if (pathname.includes('/share/')) {\n    e.respondWith(respondForShare(e));\n  }\n\n  if (protocol === 'http:' || protocol === 'https:') {\n    if (pathname === scopePathname || pathname.match(RE_NETWORK_FIRST_ASSETS)) {\n      e.respondWith(respondWithCacheNetworkFirst(e));\n      return true;\n    }\n\n    if (pathname.match(RE_CACHE_FIRST_ASSETS)) {\n      e.respondWith(respondWithCache(e));\n      return true;\n    }\n  }\n\n  return false;\n});\n\nself.addEventListener('push', handlePush);\nself.addEventListener('notificationclick', handleNotificationClick);\nself.addEventListener('message', (event) => {\n  handleNotificationMessage(event);\n  handleShareMessage(event);\n});\n"],"names":["ACCOUNT_QUERY","DEBUG","process","MEDIA_PROGRESSIVE_CACHE_NAME","ASSET_CACHE_NAME","SUPPORTED_PHOTO_CONTENT_TYPES","window","innerHeight","Math","round","Set","SUPPORTED_VIDEO_CONTENT_TYPES","pause","ms","Promise","resolve","setTimeout","async","respondWithCache","e","cacheResult","withTimeout","cache","self","caches","open","cached","match","request","ok","delete","remote","fetch","put","clone","cb","timeout","isResolved","race","then","undefined","reject","Error","err","console","error","IS_MULTIACCOUNT_SUPPORTED","globalThis","WORKER_NAME","Intl","URL","host","WorkerGlobalScope","name","getAccountSlot","url","slot","searchParams","get","slotNumber","Number","isNaN","URLSearchParams","location","href","versionChannel","BroadcastChannel","postMessage","version","APP_VERSION","addEventListener","event","data","semverCompare","reload","a","b","startsWith","localeCompare","numeric","sensitivity","caseFirst","DEFAULT_PART_SIZE","PART_TIMEOUT","requestStates","Map","requestPart","params","isDownload","includes","client","urlAccountSlot","clients","matchAll","find","c","type","frameType","getClientForRequest","clientId","messageId","Date","now","toString","random","slice","requestState","promise","Object","assign","set","catch","finally","result","DOWNLOAD_PART_SIZE","FilePartQueue","constructor","this","queue","push","task","pop","shift","size","length","Boolean","lastSyncAt","valueOf","shownNotifications","clickBuffer","getChatId","custom","from_id","chat_id","channel_id","getMessageId","msg_id","parseInt","getClients","appUrl","registration","scope","origin","filter","playNotificationSound","id","payload","showNotification","chatId","body","title","icon","reaction","isSilent","shouldReplaceHistory","isFirstBatch","options","count","badge","tag","String","vibrate","all","focusChatMessage","focused","focus","warn","Deferred","_defineProperty","resolved","value","deferred","READY_CLIENT_DEFERREDS","RE_NETWORK_FIRST_ASSETS","RE_CACHE_FIRST_ASSETS","log","waitUntil","skipWaiting","claim","pathname","protocol","scopePathname","respondWith","accountSlot","range","headers","bytes","exec","start","originalEnd","end","parsedUrl","fileSizeParam","fileSize","mimeType","Response","Uint8Array","buffer","status","statusText","cacheKey","cachedArrayBuffer","cachedHeaders","cacheName","r","arrayBuffer","json","fetchFromCache","partInfo","fullSize","partSize","min","byteLength","arrayBufferPart","Request","JSON","stringify","saveToCache","respondForProgressive","matchedFilename","filenameHeader","decodeURIComponent","enqueue","offset","part","lastOffset","stream","ReadableStream","i","pull","controller","close","respondForDownload","method","newDeferred","getClientReadyDeferred","requestShare","formData","files","getAll","text","parseFormData","resultingClientId","redirect","respondForShare","toCache","respondWithCacheNetworkFirst","getPushData","mute","True","notification","silent","description","getNotificationData","has","map","openWindow","newClient","notifyClients","source","getNotifications","forEach","n","add","lastReadInboxMessageId","notifications","lastMessageId","MAX_VALUE","closeNotifications","handleNotificationMessage","handleShareMessage"],"sourceRoot":""}