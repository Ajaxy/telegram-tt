{"version":3,"file":"8422.50842dba91ca4d24ddfc.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type {\n  ApiChat, ApiChatFolder, ApiChatlistExportedInvite,\n  ApiChatMember, ApiError, ApiUser,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ChatListType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport {\n  ChatCreationProgress,\n  ManagementProgress,\n  NewChatMembersProgress,\n  SettingsScreens,\n  type ThreadId,\n} from '../../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  CHAT_LIST_LOAD_SLICE,\n  DEBUG,\n  GLOBAL_STATE_CACHE_ARCHIVED_CHAT_LIST_LIMIT,\n  RE_TG_LINK,\n  SAVED_FOLDER_ID,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport { formatShareText, parseChooseParameter, processDeepLink } from '../../../util/deeplink';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { buildCollectionByKey, omit, pick } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { isLocalMessageId } from '../../../util/messageKey';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserBot,\n  toChannelId,\n} from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMembers,\n  addChats,\n  addMessages,\n  addSimilarChannels,\n  addUsers,\n  addUserStatuses,\n  addUsersToRestrictedInviteList,\n  deleteChatMessages,\n  deleteTopic,\n  leaveChat,\n  removeChatFromChatLists,\n  replaceChatFullInfo,\n  replaceChatListIds,\n  replaceChats,\n  replaceThreadParam,\n  replaceUsers,\n  replaceUserStatuses,\n  toggleSimilarChannels,\n  updateChat,\n  updateChatFullInfo,\n  updateChatLastMessageId,\n  updateChatListIds,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateChatsLastMessageId,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updatePeerFullInfo,\n  updateThread,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n} from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatByUsername,\n  selectChatFolder,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatLastMessageId,\n  selectChatListType,\n  selectChatMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsChatPinned,\n  selectIsChatWithSelf,\n  selectLastServiceNotification,\n  selectStickerSet,\n  selectSupportChat,\n  selectTabState,\n  selectThread,\n  selectThreadInfo,\n  selectUser,\n  selectUserByPhoneNumber,\n  selectVisibleUsers,\n} from '../../selectors';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\nconst CHATLIST_LIMIT_ERROR_LIST = new Set([\n  'FILTERS_TOO_MUCH',\n  'CHATLISTS_TOO_MUCH',\n  'INVITES_TOO_MUCH',\n]);\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\nfunction abortChatRequests(chatId: string, threadId?: ThreadId) {\n  callApi('abortChatRequests', { chatId, threadId });\n}\n\nfunction abortChatRequestsForCurrentChat<T extends GlobalState>(\n  global: T, newChatId?: string, newThreadId?: ThreadId,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const currentChatId = currentMessageList?.chatId;\n  const currentThreadId = currentMessageList?.threadId;\n\n  if (currentChatId && (currentChatId !== newChatId || currentThreadId !== newThreadId)) {\n    const [isChatOpened, isThreadOpened] = Object.values(global.byTabId)\n      .reduce(([accHasChatOpened, accHasThreadOpened], { id: otherTabId }) => {\n        if (otherTabId === tabId || (accHasChatOpened && accHasThreadOpened)) {\n          return [accHasChatOpened, accHasThreadOpened];\n        }\n\n        const otherMessageList = selectCurrentMessageList(global, otherTabId);\n        const isSameChat = otherMessageList?.chatId === currentChatId;\n        const isSameThread = isSameChat && otherMessageList?.threadId === currentThreadId;\n\n        return [accHasChatOpened || isSameChat, accHasThreadOpened || isSameThread];\n      }, [currentChatId === newChatId, false]);\n\n    const shouldAbortChatRequests = !isChatOpened || !isThreadOpened;\n\n    if (shouldAbortChatRequests) {\n      abortChatRequests(currentChatId, isChatOpened ? currentThreadId : undefined);\n    }\n  }\n}\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, type, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  actions.processOpenChatOrThread({\n    chatId: id,\n    type,\n    threadId: MAIN_THREAD_ID,\n    noForumTopicPanel,\n    shouldReplaceHistory,\n    shouldReplaceLast,\n    tabId,\n  });\n\n  abortChatRequestsForCurrentChat(global, id, MAIN_THREAD_ID, tabId);\n\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  const isChatOnlySummary = !selectChatLastMessageId(global, id);\n\n  if (!chat) {\n    if (selectIsChatWithSelf(global, id)) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatOnlySummary && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n  actions.closeStoryViewer({ tabId });\n});\n\naddActionHandler('openSavedDialog', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId(), ...otherParams } = payload;\n\n  actions.openThread({\n    chatId: global.currentUserId!,\n    threadId: chatId,\n    tabId,\n    ...otherParams,\n  });\n});\n\naddActionHandler('openThread', async (global, actions, payload): Promise<void> => {\n  const {\n    type, isComments, noForumTopicPanel, shouldReplaceHistory, shouldReplaceLast,\n    focusMessageId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { chatId } = payload;\n  let threadId: ThreadId | undefined;\n  let loadingChatId: string;\n  let loadingThreadId: ThreadId;\n\n  if (!isComments) {\n    loadingChatId = payload.chatId;\n    threadId = payload.threadId;\n    loadingThreadId = threadId;\n\n    const originalChat = selectChat(global, loadingChatId);\n    if (threadId === MAIN_THREAD_ID) {\n      actions.openChat({\n        id: chatId,\n        type,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    } else if (originalChat?.isForum || (chatId && getIsSavedDialog(chatId, threadId, global.currentUserId))) {\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n        tabId,\n      });\n      return;\n    }\n  } else {\n    const { originChannelId, originMessageId } = payload;\n\n    loadingChatId = originChannelId;\n    loadingThreadId = originMessageId;\n  }\n\n  const chat = selectChat(global, loadingChatId);\n  const threadInfo = selectThreadInfo(global, loadingChatId, loadingThreadId);\n  const thread = selectThread(global, loadingChatId, loadingThreadId);\n  if (!chat) return;\n\n  abortChatRequestsForCurrentChat(global, loadingChatId, loadingThreadId, tabId);\n\n  if (chatId\n    && threadInfo?.threadId\n    && (isComments || (thread?.listedIds?.length && thread.listedIds.includes(Number(threadInfo.threadId))))) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadInfo.threadId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n      tabId,\n    });\n    return;\n  }\n\n  let { loadingThread } = selectTabState(global, tabId);\n  if (loadingThread) {\n    abortChatRequests(loadingThread.loadingChatId, loadingThread.loadingMessageId);\n  }\n\n  global = updateTabState(global, {\n    loadingThread: {\n      loadingChatId,\n      loadingMessageId: Number(loadingThreadId),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const openPreviousChat = () => {\n    // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n    const currentGlobal = getGlobal();\n    if (isComments\n      || selectCurrentMessageList(currentGlobal, tabId)?.chatId !== loadingChatId\n      || selectCurrentMessageList(currentGlobal, tabId)?.threadId !== loadingThreadId) {\n      return;\n    }\n    actions.openPreviousChat({ tabId });\n  };\n\n  if (!isComments) {\n    actions.processOpenChatOrThread({\n      chatId,\n      type,\n      threadId: threadId!,\n      tabId,\n      isComments,\n      noForumTopicPanel,\n      shouldReplaceHistory,\n      shouldReplaceLast,\n    });\n  }\n\n  const result = await callApi('fetchDiscussionMessage', {\n    chat: selectChat(global, loadingChatId)!,\n    messageId: Number(loadingThreadId),\n  });\n\n  global = getGlobal();\n  loadingThread = selectTabState(global, tabId).loadingThread;\n  if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n    openPreviousChat();\n    return;\n  }\n\n  if (!result) {\n    global = updateTabState(global, {\n      loadingThread: undefined,\n    }, tabId);\n    setGlobal(global);\n\n    actions.showNotification({\n      message: langProvider.translate(isComments ? 'ChannelPostDeleted' : 'lng_message_not_found'),\n      tabId,\n    });\n\n    openPreviousChat();\n    return;\n  }\n\n  threadId ??= result.threadId;\n  chatId ??= result.chatId;\n\n  if (!chatId) {\n    openPreviousChat();\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  if (isComments) {\n    global = updateThreadInfo(global, loadingChatId, loadingThreadId, {\n      threadId,\n    });\n\n    global = updateThreadInfo(global, chatId, threadId, {\n      isCommentsInfo: false,\n      threadId,\n      chatId,\n      fromChannelId: loadingChatId,\n      fromMessageId: loadingThreadId,\n      ...(threadInfo\n        && pick(threadInfo, ['messagesCount', 'lastMessageId', 'lastReadInboxMessageId', 'recentReplierIds'])),\n    });\n  }\n  global = updateThread(global, chatId, threadId, {\n    firstMessageId: result.firstMessageId,\n  });\n  setGlobal(global);\n\n  if (focusMessageId) {\n    actions.focusMessage({\n      chatId,\n      threadId: threadId!,\n      messageId: focusMessageId,\n      tabId,\n    });\n  }\n\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    onError: () => {\n      global = getGlobal();\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.showNotification({\n        message: langProvider.translate('Group.ErrorAccessDenied'),\n        tabId,\n      });\n    },\n    onLoaded: () => {\n      global = getGlobal();\n      loadingThread = selectTabState(global, tabId).loadingThread;\n      if (loadingThread?.loadingChatId !== loadingChatId || loadingThread?.loadingMessageId !== loadingThreadId) {\n        return;\n      }\n\n      global = updateTabState(global, {\n        loadingThread: undefined,\n      }, tabId);\n      setGlobal(global);\n\n      actions.processOpenChatOrThread({\n        chatId,\n        type,\n        threadId: threadId!,\n        tabId,\n        isComments,\n        noForumTopicPanel,\n        shouldReplaceHistory,\n        shouldReplaceLast,\n      });\n    },\n  });\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const listType = payload.listType;\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return selectChatLastMessage(global, chat.id, listType === 'saved' ? 'saved' : 'all')?.date || chat.creationDate;\n  };\n\n  while (shouldReplace || !global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n\n    await loadChats(\n      listType,\n      oldestChat?.id,\n      oldestChat ? getOrderDate(oldestChat) : undefined,\n      shouldReplace,\n      true,\n    );\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, force, tabId = getCurrentTabId(), withPhotos,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const loadChat = async () => {\n    await loadFullChat(global, actions, chat, tabId);\n    if (withPhotos) {\n      actions.loadProfilePhotos({ profileId: chatId });\n    }\n  };\n\n  if (force) {\n    void loadChat();\n  } else {\n    runDebouncedForLoadFullChat(loadChat);\n  }\n});\n\naddActionHandler('loadTopChats', (): ActionReturnType => {\n  runThrottledForLoadTopChats(() => {\n    loadChats('active');\n    loadChats('archived');\n  });\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('requestSavedDialogUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchMessages', {\n    chat,\n    isSavedDialog: true,\n    limit: 1,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addMessages(global, result.messages);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  if (result.messages.length) {\n    global = updateChatLastMessageId(global, chatId, result.messages[0].id, 'saved');\n    global = updateChatListIds(global, 'saved', [chatId]);\n\n    setGlobal(global);\n  } else {\n    global = removeChatFromChatLists(global, chatId, 'saved');\n\n    setGlobal(global);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      const currentMessageList = selectCurrentMessageList(global, tabId);\n      if (!currentMessageList) return;\n      const { chatId: tabChatId, threadId } = currentMessageList;\n\n      if (selectIsChatWithSelf(global, tabChatId) && threadId === chatId) {\n        actions.openChat({ id: undefined, tabId });\n      }\n    });\n  }\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted, muteUntil });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted, muteUntil,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n  let restrictedUserIds: string[] | undefined;\n  try {\n    const result = await callApi('createChannel', { title, about, users });\n    createdChannel = result?.channel;\n    restrictedUserIds = result?.restrictedUserIds;\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (restrictedUserIds) {\n    global = getGlobal();\n    global = addUsersToRestrictedInviteList(global, restrictedUserIds, channelId, tabId);\n    setGlobal(global);\n  }\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    await callApi('leaveChannel', { channelId, accessHash });\n    global = getGlobal();\n    const chatMessages = selectChatMessages(global, chatId);\n    const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n    global = deleteChatMessages(global, chatId, localMessageIds);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChatId: string | undefined;\n  try {\n    const { chat: createdChat, restrictedUserIds } = await callApi('createGroupChat', {\n      title,\n      users,\n    }) ?? {};\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n    createdChatId = chatId;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n    if (restrictedUserIds) {\n      global = getGlobal();\n      global = addUsersToRestrictedInviteList(global, restrictedUserIds, chatId, tabId);\n      setGlobal(global);\n    }\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (err) {\n    if ((err as ApiError).message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    } else if ((err as ApiError).message === 'USER_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n      global = addUsersToRestrictedInviteList(global, users.map(({ id }) => id), createdChatId!, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('toggleSavedDialogPinned', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'savedDialogsPinned');\n\n  const isPinned = selectIsChatPinned(global, id, SAVED_FOLDER_ID);\n\n  const ids = global.chats.orderedPinnedIds.saved;\n  if ((ids?.length || 0) >= limit && !isPinned) {\n    actions.openLimitReachedModal({\n      limit: 'savedDialogsPinned',\n      tabId,\n    });\n    return;\n  }\n  void callApi('toggleSavedDialogPinned', { chat, shouldBePinned: !isPinned });\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  const newId = maxId + 1;\n  const folderUpdate = {\n    id: newId,\n    ...newFolder,\n  };\n  await callApi('editChatFolder', {\n    id: newId,\n    folderUpdate,\n  });\n\n  // Update called from the above `callApi` is throttled, but we need to apply changes immediately\n  actions.apiUpdate({\n    '@type': 'updateChatFolder',\n    id: newId,\n    folder: folderUpdate,\n  });\n\n  actions.requestNextSettingsScreen({\n    foldersAction: {\n      type: 'setFolderId',\n      payload: maxId + 1,\n    },\n    tabId,\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const lastTopicMessageId = chat.topics?.[topicId]?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId, tabId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, tabId = getCurrentTabId(),\n  } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.translate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id, tabId });\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload): ActionReturnType => {\n  const {\n    url,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (isDeepLink(url)) {\n    const isProcessed = processDeepLink(url);\n    if (isProcessed || url.match(RE_TG_LINK)) {\n      return;\n    }\n  }\n\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    checkChatlistInvite,\n    openChatByUsername: openChatByUsernameAction,\n    openStoryViewerByUsername,\n    processBoostParameters,\n    checkGiftCode,\n  } = actions;\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const hasStartAttach = params.hasOwnProperty('startattach');\n  const hasStartApp = params.hasOwnProperty('startapp');\n  const choose = parseChooseParameter(params.choose);\n  const storyId = part2 === 's' && (Number(part3) || undefined);\n  const hasBoost = params.hasOwnProperty('boost');\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach: params.startattach,\n      attach: params.attach,\n      tabId,\n    });\n    return;\n  }\n\n  if (storyId) {\n    openStoryViewerByUsername({\n      username: part1,\n      storyId,\n      tabId,\n    });\n\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n    return;\n  }\n\n  if (part1 === 'addlist') {\n    const slug = part2;\n    checkChatlistInvite({ slug, tabId });\n    return;\n  }\n\n  if (part1 === 'giftcode') {\n    const slug = part2;\n    checkGiftCode({ slug, tabId });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'boost') {\n    const username = part2;\n    const id = params.c;\n\n    const isPrivate = !username && Boolean(id);\n\n    processBoostParameters({\n      usernameOrId: username || id,\n      isPrivate,\n      tabId,\n    });\n  } else if (hasBoost) {\n    const isPrivate = part1 === 'c' && Boolean(chatOrChannelPostId);\n    processBoostParameters({\n      usernameOrId: chatOrChannelPostId || part1,\n      isPrivate,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = toChannelId(chatOrChannelPostId);\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n\n    if (messageId) {\n      focusMessage({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n    }\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n      tabId,\n    });\n  } else if ((hasStartAttach && choose) || (!part2 && hasStartApp)) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      startParam: params.startattach || params.startapp,\n      tabId,\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach: params.startattach,\n      attach: params.attach,\n      startApp: params.startapp,\n      originalParts: [part1, part2, part3],\n      tabId,\n    });\n  }\n});\n\naddActionHandler('processBoostParameters', async (global, actions, payload): Promise<void> => {\n  const { usernameOrId, isPrivate, tabId = getCurrentTabId() } = payload;\n\n  let chat: ApiChat | undefined;\n\n  if (isPrivate) {\n    const chatId = toChannelId(usernameOrId);\n    chat = selectChat(global, chatId);\n    if (!chat) {\n      actions.showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n  } else {\n    chat = await fetchChatByUsername(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: 'User does not exist', tabId });\n      return;\n    }\n  }\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    actions.openChat({ id: chat.id, tabId });\n    return;\n  }\n\n  actions.openBoostModal({\n    chatId: chat.id,\n    tabId,\n  });\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId, originalParts, startApp,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  const webAppName = originalParts?.[1];\n  const isWebApp = webAppName && !Number(webAppName) && !originalParts?.[2];\n\n  if (!commentId) {\n    if (startAttach === undefined && messageId && !startParam\n      && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n    if (!isWebApp) {\n      await openChatByUsername(\n        global, actions, username, threadId, messageId, startParam, startAttach, attach, tabId,\n      );\n      return;\n    }\n  }\n\n  const usernameChat = selectChatByUsername(global, username);\n  if (commentId && messageId && usernameChat) {\n    actions.openThread({\n      isComments: true,\n      originChannelId: usernameChat.id,\n      originMessageId: messageId,\n      tabId,\n      focusMessageId: commentId,\n    });\n    return;\n  }\n\n  if (!isWebApp) actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  if (isWebApp && chatByUsername) {\n    const theme = extractCurrentThemeParams();\n\n    actions.requestAppWebView({\n      appName: webAppName,\n      botId: chatByUsername.id,\n      tabId,\n      startApp,\n      theme,\n    });\n    return;\n  }\n\n  if (!messageId) return;\n\n  actions.openThread({\n    isComments: true,\n    originChannelId: chatByUsername.id,\n    originMessageId: messageId,\n    tabId,\n    focusMessageId: commentId,\n  });\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: isEnabled });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const updatedFullInfo = selectChatFullInfo(global, chat.id);\n  if (!updatedFullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = updatedFullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChatFullInfo(global, chat.id, {\n    ...(members && isBanned && {\n      members: members.filter((m) => m.userId !== userId),\n    }),\n    ...(members && !isBanned && {\n      members: members.map((m) => (\n        m.userId === userId\n          ? { ...m, bannedRights }\n          : m\n      )),\n    }),\n    ...(isUnblocked && kickedMembers && {\n      kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n    }),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  if (newAdminMembersById) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { adminMembersById: newAdminMembersById });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    fullInfo?.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (photo) {\n    actions.loadFullChat({ chatId, tabId, withPhotos: true });\n  }\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  global = updateChat(global, chatId, { avatarHash: undefined });\n  global = updateChatFullInfo(global, chatId, { profilePhoto: undefined });\n  setGlobal(global);\n  // This method creates a new entry in photos array\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  // Explicitly delete the old photo reference\n  await callApi('deleteProfilePhotos', [photo]);\n  actions.loadFullChat({ chatId, tabId, withPhotos: true });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const photosToDelete = [photo];\n  if (chat.avatarHash === photo.id) {\n    // Select next photo to set as avatar\n    const nextPhoto = chat.photos?.[1];\n    if (nextPhoto) {\n      photosToDelete.push(nextPhoto);\n    }\n    global = updateChat(global, chatId, { avatarHash: undefined });\n    global = updateChatFullInfo(global, chatId, { profilePhoto: undefined });\n    setGlobal(global);\n    // Set next photo as avatar\n    await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n      photo: nextPhoto,\n    });\n  }\n\n  const { photos = [] } = chat;\n\n  const newPhotos = photos.filter((p) => photosToDelete.some((toDelete) => toDelete.id !== p.id));\n  global = getGlobal();\n  global = updateChat(global, chatId, { photos: newPhotos });\n\n  setGlobal(global);\n\n  // Delete references to the old photos\n  const result = await callApi('deleteProfilePhotos', photosToDelete);\n  if (!result) return;\n  actions.loadFullChat({ chatId, tabId, withPhotos: true });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let fullInfo = selectChatFullInfo(global, chat.id);\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: false });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, tabId = getCurrentTabId() } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const fullInfo = selectChatFullInfo(global, channelId);\n  let chat: ApiChat | undefined;\n  if (fullInfo?.linkedChatId) {\n    chat = selectChat(global, fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat, tabId);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = selectChatFullInfo(global, chat.id)?.members?.length;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  const restrictedUserIds = await callApi('addChatMembers', chat, users);\n  if (restrictedUserIds) {\n    global = getGlobal();\n    global = addUsersToRestrictedInviteList(global, restrictedUserIds, chat.id, tabId);\n    setGlobal(global);\n  }\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, enabledReactions, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('fetchChat', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    return;\n  }\n\n  if (selectIsChatWithSelf(global, chatId)) {\n    void callApi('fetchChat', { type: 'self' });\n  } else {\n    const user = selectUser(global, chatId);\n    if (user) {\n      void callApi('fetchChat', { type: 'user', user });\n    }\n  }\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n  const { settings, users } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  actions.toggleStoryRibbon({ isShown: false, tabId });\n  actions.toggleStoryRibbon({ isShown: false, isArchived: true, tabId });\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  const isForChat = Boolean(filter);\n\n  if (!isForChat) {\n    actions.callAttachBot({\n      isFromSideMenu: true,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (!force && chat.listedTopicIds && chat.listedTopicIds.length === chat.topicsCount) {\n    return;\n  }\n\n  const offsetTopic = !force && chat.listedTopicIds ? chat.listedTopicIds.reduce((acc, el) => {\n    const topic = chat.topics?.[el];\n    const accTopic = chat.topics?.[acc];\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && chat.topics?.[offsetTopic]) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  let result: true | undefined;\n  try {\n    result = await callApi('toggleForum', { chat, isEnabled });\n  } catch (error) {\n    if ((error as ApiError).message.startsWith('A wait of')) {\n      actions.showNotification({ message: langProvider.translate('FloodWait'), tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (result) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, { isForum: isEnabled });\n    setGlobal(global);\n\n    if (!isEnabled) {\n      actions.closeForumPanel({ tabId });\n    } else {\n      actions.openForumPanel({ chatId: chat.id, tabId });\n    }\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = selectChatFullInfo(global, chat.id)?.areParticipantsHidden;\n  global = updateChatFullInfo(global, chatId, { areParticipantsHidden: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { areParticipantsHidden: prevIsEnabled });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openThread({\n      chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('deleteTopic', { chat, topicId });\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = chat?.topics?.[topicId];\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(chat.topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.translate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\naddActionHandler('checkChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatlistInvite', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('lng_group_invite_bad_link'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateTabState(global, {\n    chatlistModal: {\n      invite: result.invite,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('joinChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { invite, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const peers = peerIds.map((peerId) => selectChat(global, peerId)).filter(Boolean);\n  const notJoinedCount = peers.filter((peer) => peer.isNotJoined).length;\n\n  const folder = 'folderId' in invite ? selectChatFolder(global, invite.folderId) : undefined;\n  const folderTitle = 'title' in invite ? invite.title : folder?.title;\n\n  try {\n    const result = await callApi('joinChatlistInvite', { slug: invite.slug, peers });\n    if (!result) return;\n\n    actions.showNotification({\n      title: langProvider.translate(folder ? 'FolderLinkUpdatedTitle' : 'FolderLinkAddedTitle', folderTitle),\n      message: langProvider.translate('FolderLinkAddedSubtitle', notJoinedCount, 'i'),\n      tabId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHATLISTS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'chatlistJoined', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('leaveChatlist', async (global, actions, payload): Promise<void> => {\n  const { folderId, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n\n  const peers = peerIds?.map((peerId) => selectChat(global, peerId)).filter(Boolean) || [];\n\n  const result = await callApi('leaveChatlist', { folderId, peers });\n\n  if (!result) return;\n\n  actions.showNotification({\n    title: langProvider.translate('FolderLinkDeletedTitle', folder.title),\n    message: langProvider.translate('FolderLinkDeletedSubtitle', peers.length, 'i'),\n    tabId,\n  });\n});\n\naddActionHandler('loadChatlistInvites', async (global, actions, payload): Promise<void> => {\n  const { folderId } = payload;\n\n  const result = await callApi('fetchChatlistInvites', { folderId });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: result.invites,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('createChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let result: { filter: ApiChatFolder; invite: ApiChatlistExportedInvite | undefined } | undefined;\n\n  try {\n    result = await callApi('createChalistInvite', {\n      folderId,\n      peers: folder.includedChatIds.concat(folder.pinnedChatIds || [])\n        .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean),\n    });\n  } catch (error) {\n    if (CHATLIST_LIMIT_ERROR_LIST.has((error as ApiError).message)) {\n      actions.openLimitReachedModal({ limit: 'chatlistInvites', tabId });\n      actions.requestNextSettingsScreen({ screen: SettingsScreens.Folders, tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result || !result.invite) return;\n\n  const { shareFolderScreen } = selectTabState(global, tabId);\n\n  if (!shareFolderScreen) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      byId: {\n        ...global.chatFolders.byId,\n        [folderId]: {\n          ...global.chatFolders.byId[folderId],\n          ...result.filter,\n        },\n      },\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: [\n          ...(global.chatFolders.invites[folderId] || []),\n          result.invite,\n        ],\n      },\n    },\n  };\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...shareFolderScreen,\n      url: result.invite.url,\n      isLoading: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    folderId, peerIds, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const slug = url.split('/').pop();\n  if (!slug) return;\n\n  const peers = peerIds\n    .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean);\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const result = await callApi('editChatlistInvite', { folderId, slug, peers });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        invites: {\n          ...global.chatFolders.invites,\n          [folderId]: global.chatFolders.invites[folderId]?.map((invite) => {\n            if (invite.url === url) {\n              return result;\n            }\n            return invite;\n          }),\n        },\n      },\n    };\n    setGlobal(global);\n  } catch (error) {\n    actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n  } finally {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      shareFolderScreen: {\n        ...selectTabState(global, tabId).shareFolderScreen!,\n        isLoading: false,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, url } = payload;\n\n  const slug = url.split('/').pop();\n\n  if (!slug) return;\n\n  const result = await callApi('deleteChatlistInvite', { folderId, slug });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: global.chatFolders.invites[folderId]?.filter((invite) => invite.url !== url),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openDeleteChatFolderModal', async (global, actions, payload): Promise<void> => {\n  const { folderId, isConfirmedForChatlist, tabId = getCurrentTabId() } = payload;\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  if (folder.isChatList && (!folder.hasMyInvites || isConfirmedForChatlist)) {\n    const suggestions = await callApi('fetchLeaveChatlistSuggestions', { folderId });\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatlistModal: {\n        removal: {\n          folderId,\n          suggestedPeerIds: suggestions,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateChatDetectedLanguage', (global, actions, payload): ActionReturnType => {\n  const { chatId, detectedLanguage } = payload;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    detectedLanguage,\n  });\n\n  return global;\n});\n\naddActionHandler('togglePeerTranslations', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('togglePeerTranslations', { chat, isEnabled });\n\n  if (result === undefined) return;\n\n  global = getGlobal();\n  global = updatePeerFullInfo(global, chatId, {\n    isTranslationDisabled: isEnabled ? undefined : true,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('setViewForumAsMessages', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat?.isForum || chat.isForumAsMessages === isEnabled) {\n    return;\n  }\n\n  global = updateChat(global, chatId, { isForumAsMessages: isEnabled || undefined });\n  setGlobal(global);\n\n  void callApi('setViewForumAsMessages', { chat, isEnabled });\n});\n\naddActionHandler('fetchChannelRecommendations', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  const { similarChannels, count } = await callApi('fetchChannelRecommendations', {\n    chat,\n  }) || {};\n\n  if (!similarChannels) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addChats(global, buildCollectionByKey(similarChannels, 'id'));\n  global = addSimilarChannels(global, chatId, similarChannels.map((channel) => channel.id), count);\n  setGlobal(global);\n});\n\naddActionHandler('toggleChannelRecommendations', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  global = toggleSimilarChannels(global, chatId);\n  setGlobal(global);\n});\n\nasync function loadChats(\n  listType: ChatListType,\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal();\n  let lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n  const result = listType === 'saved' ? await callApi('fetchSavedChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    withPinned: shouldReplace,\n  }) : await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: shouldReplace,\n    lastLocalServiceMessageId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n  lastLocalServiceMessageId = selectLastServiceNotification(global)?.id;\n\n  if (shouldReplace) {\n    if (listType === 'active') {\n      // Always include service notifications chat\n      if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n        const result2 = await callApi('fetchChat', {\n          type: 'user',\n          user: SERVICE_NOTIFICATIONS_USER_MOCK,\n        });\n\n        global = getGlobal();\n\n        const notificationsChat = result2 && selectChat(global, result2.chatId);\n        if (notificationsChat) {\n          chatIds.unshift(notificationsChat.id);\n          result.chats.unshift(notificationsChat);\n          if (lastLocalServiceMessageId) {\n            result.lastMessageByChatId[notificationsChat.id] = lastLocalServiceMessageId;\n          }\n        }\n      }\n\n      const tabStates = Object.values(global.byTabId);\n      const topArchivedChats = getOrderedIds(ARCHIVED_FOLDER_ID)\n        ?.slice(0, GLOBAL_STATE_CACHE_ARCHIVED_CHAT_LIST_LIMIT)\n        .map((chatId) => selectChat(global, chatId))\n        .filter(Boolean);\n      const visibleChats = tabStates.flatMap(({ id: tabId }) => {\n        const currentChat = selectCurrentChat(global, tabId);\n        return currentChat ? [currentChat] : [];\n      });\n      const chatsToSave = visibleChats.concat(topArchivedChats || []);\n\n      const visibleUsers = tabStates.flatMap(({ id: tabId }) => {\n        return selectVisibleUsers(global, tabId) || [];\n      });\n\n      if (global.currentUserId && global.users.byId[global.currentUserId]) {\n        visibleUsers.push(global.users.byId[global.currentUserId]);\n      }\n\n      global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n      global = replaceUserStatuses(global, result.userStatusesById);\n      global = replaceChats(global, buildCollectionByKey(chatsToSave.concat(result.chats), 'id'));\n      global = replaceChatListIds(global, listType, chatIds);\n    } else {\n      // Archived and Saved\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      global = addUserStatuses(global, result.userStatusesById);\n      global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n      global = replaceChatListIds(global, listType, chatIds);\n    }\n  } else {\n    const newChats = buildCollectionByKey(result.chats, 'id');\n\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, newChats);\n    global = updateChatListIds(global, listType, chatIds);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n  global = addMessages(global, result.messages);\n  global = updateChatsLastMessageId(global, result.lastMessageByChatId, listType);\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    const draft = result.draftsById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!draft && !thread) return;\n\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', draft,\n      );\n    }\n  });\n\n  if ((chatIds.length === 0 || chatIds.length === result.totalChatCount) && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    chats, users, userStatusesById, fullInfo, groupCall, membersCount, isForumAsMessages,\n  } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState', 'isLoaded']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  if (membersCount !== undefined) {\n    global = updateChat(global, chat.id, { membersCount });\n  }\n  if (chat.isForum) {\n    global = updateChat(global, chat.id, { isForumAsMessages });\n  }\n  global = replaceChatFullInfo(global, chat.id, fullInfo);\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  const localSet = stickerSet && selectStickerSet(global, stickerSet);\n  if (stickerSet && !localSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n      tabId,\n    });\n  }\n\n  const emojiSet = fullInfo.emojiSet;\n  const localEmojiSet = emojiSet && selectStickerSet(global, emojiSet);\n  if (emojiSet && !localEmojiSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: emojiSet.id,\n        accessHash: emojiSet.accessHash,\n      },\n      tabId,\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n) {\n  global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n  setGlobal(global);\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  username: string,\n  threadId?: ThreadId,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string,\n  attach?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach !== undefined && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat.id,\n      startParam: startAttach,\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openThread({ chatId: chat.id, threadId: threadId ?? MAIN_THREAD_ID, tabId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.loadFullChat({ chatId: newChat.id, tabId });\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { ApiGroupCall } from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, CallSound, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.translate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: \"Sorry, your browser doesn't support group calls\",\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat, tabId);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.translate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.translate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { ApiGroupCall } from '../../api/types';\nimport type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\n\nimport { omit } from '../../util/iteratees';\nimport { selectChat } from '../selectors';\nimport { selectGroupCall } from '../selectors/calls';\nimport { updateChatFullInfo } from './chats';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChatFullInfo(global, groupCall.chatId, {\n        groupCallId: undefined,\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["SERVICE_NOTIFICATIONS_USER_MOCK","id","SERVICE_NOTIFICATIONS_USER_ID","accessHash","type","isMin","phoneNumber","CHATLIST_LIMIT_ERROR_LIST","Set","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","abortChatRequests","chatId","threadId","callApi","abortChatRequestsForCurrentChat","global","newChatId","newThreadId","tabId","getCurrentTabId","currentMessageList","selectCurrentMessageList","currentChatId","currentThreadId","isChatOpened","isThreadOpened","Object","values","byTabId","reduce","accHasChatOpened","accHasThreadOpened","otherTabId","otherMessageList","isSameChat","undefined","async","loadChats","listType","offsetId","offsetDate","shouldReplace","isFullDraftSync","getGlobal","lastLocalServiceMessageId","selectLastServiceNotification","result","limit","CHAT_LIST_LOAD_SLICE","withPinned","archived","chatIds","length","shift","includes","result2","user","notificationsChat","selectChat","unshift","chats","lastMessageByChatId","tabStates","topArchivedChats","getOrderedIds","ARCHIVED_FOLDER_ID","slice","GLOBAL_STATE_CACHE_ARCHIVED_CHAT_LIST_LIMIT","map","filter","Boolean","chatsToSave","flatMap","currentChat","selectCurrentChat","concat","visibleUsers","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","replaceUserStatuses","userStatusesById","replaceChats","replaceChatListIds","addUsers","addUserStatuses","updateChats","newChats","updateChatListIds","updateChatListSecondaryInfo","addMessages","messages","updateChatsLastMessageId","keys","draftsById","forEach","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","totalChatCount","isFullyLoaded","setGlobal","loadFullChat","actions","chat","fullInfo","groupCall","membersCount","isForumAsMessages","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","isForum","replaceChatFullInfo","stickerSet","localSet","selectStickerSet","loadStickers","stickerSetInfo","emojiSet","localEmojiSet","fetchChatByUsername","username","localChat","selectChatByUsername","updateUser","getAttachBotOrNotify","selectUser","isUserBot","bot","showNotification","message","langProvider","openAttachMenuFromLink","attach","startAttach","callAttachBot","startParam","ensureIsSuperGroup","isChatBasicGroup","newChat","error","openLimitReachedModal","showDialog","data","hasErrorKey","migrateChat","openChat","addActionHandler","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","folderAllOrderedIds","ALL_FOLDER_ID","nextChatId","find","has","add","loadViewportMessages","payload","noForumTopicPanel","shouldReplaceHistory","shouldReplaceLast","processOpenChatOrThread","hasUnreadMark","toggleChatUnread","isChatOnlySummary","selectChatLastMessageId","requestChatUpdate","selectIsChatWithSelf","closeStoryViewer","otherParams","openThread","isComments","focusMessageId","loadingChatId","loadingThreadId","originChannelId","originMessageId","originalChat","getIsSavedDialog","threadInfo","selectThreadInfo","listedIds","Number","updateTabState","loadingThread","selectTabState","loadingMessageId","openPreviousChat","currentGlobal","messageId","addChats","updateThreadInfo","isCommentsInfo","fromChannelId","fromMessageId","pick","updateThread","firstMessageId","focusMessage","onError","onLoaded","chatFullInfo","linkedChatId","selectSupportChat","TMP_CHAT_ID","onReplace","getOrderDate","selectChatLastMessage","date","creationDate","DEBUG","console","connectionState","authState","listIds","oldestChat","selectIsChatPinned","sort","chat1","chat2","force","withPhotos","loadChat","loadProfilePhotos","profileId","lastLocalMessage","isSavedDialog","updateChatLastMessageId","removeChatFromChatLists","tabChatId","muteUntil","isMuted","topicId","updateTopic","title","about","photo","memberIds","createdChannel","restrictedUserIds","chatCreation","progress","ChatCreationProgress","InProgress","channel","Error","channelId","Complete","addUsersToRestrictedInviteList","userId","leaveChat","chatMessages","selectChatMessages","localMessageIds","isLocalMessageId","deleteChatMessages","createdChatId","createdChat","err","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ids","orderedPinnedIds","isChatArchived","SAVED_FOLDER_ID","saved","chatFolders","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","emoticon","orderedIds","maxId","Math","max","recommendedId","description","newFolder","newId","apiUpdate","requestNextSettingsScreen","foldersAction","folderIds","unreadCount","lastTopicMessageId","topics","lastMessageId","lastReadInboxMessageId","hash","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","url","isDeepLink","processDeepLink","match","RE_TG_LINK","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","checkChatlistInvite","openChatByUsername","openChatByUsernameAction","openStoryViewerByUsername","processBoostParameters","checkGiftCode","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","part1","part2","part3","part","decodeURI","params","fromEntries","searchParams","hasStartAttach","hasOwnProperty","hasStartApp","choose","parseChooseParameter","storyId","hasBoost","substr","startattach","shortName","text","formatShareText","slug","chatOrChannelPostId","commentId","comment","inviteHash","voicechat","livestream","c","usernameOrId","isPrivate","toChannelId","substring","startapp","start","startApp","originalParts","isChatChannel","isChatSuperGroup","openBoostModal","webAppName","isWebApp","usernames","channelPostId","isCurrentChat","startBot","botId","param","usernameChat","chatByUsername","theme","extractCurrentThemeParams","requestAppWebView","appName","isEnabled","updateChatFullInfo","isPreHistoryHidden","bannedRights","updatedFullInfo","selectChatFullInfo","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","chatAfterUpdate","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","avatarHash","profilePhoto","photosToDelete","nextPhoto","photos","newPhotos","p","toDelete","groups","addedById","group","forDiscussionIds","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","Loading","Closed","isProtected","enabledReactions","settings","toggleStoryRibbon","isShown","isArchived","forumPanelChatId","isFromSideMenu","attachMenu","bots","requestedAttachBotInstall","onConfirm","action","requestAttachBotInChat","listedTopicIds","topicsCount","offsetTopic","acc","el","topic","accTopic","offsetTopicId","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","updateTopics","count","updateListedTopicIds","entries","readInboxMessageIdByTopicId","shouldCloseChatOnError","openForumPanel","closeForumPanel","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","chatlistModal","invite","peerIds","peers","peerId","notJoinedCount","peer","isNotJoined","folderTitle","invites","shareFolderScreen","screen","SettingsScreens","Folders","pop","isConfirmedForChatlist","isChatList","hasMyInvites","suggestions","removal","suggestedPeerIds","deleteFolderDialogModal","detectedLanguage","updatePeerFullInfo","isTranslationDisabled","similarChannels","addSimilarChannels","toggleSimilarChannels","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","isCallPanelVisible","subscribed","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","isVideo","state","participantId","adminId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","getTracks","track","stop","checkMicrophonePermission","catch","audio","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}