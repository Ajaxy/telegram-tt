{"version":3,"file":"7768.1a9b7f4d32420f65bf30.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/stars.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/bots.ts","webpack://telegram-t/./src/global/helpers/meta.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/account.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/stars.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/ui/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/AccountMenuItems.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.tsx","webpack://telegram-t/./src/components/middle/FrozenAccountPlaceholder.module.scss?f487","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.module.scss?912e","webpack://telegram-t/./src/components/middle/MessageListAccountInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.module.scss?0f2f","webpack://telegram-t/./src/components/middle/message/SenderGroupContainer.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.module.scss?677e","webpack://telegram-t/./src/components/middle/RequirementToContactMessage.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/panes/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.module.scss?7a09","webpack://telegram-t/./src/components/middle/panes/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/panes/BotAdPane.module.scss?ff1a","webpack://telegram-t/./src/components/middle/panes/BotAdPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.tsx","webpack://telegram-t/./src/components/middle/panes/BotVerificationPane.module.scss?a09a","webpack://telegram-t/./src/components/middle/panes/ChatReportPane.tsx","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.module.scss?0dc7","webpack://telegram-t/./src/components/middle/panes/PaidMessageChargePane.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.tsx","webpack://telegram-t/./src/components/middle/MiddleHeaderPanes.module.scss?d2aa","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestMessage/SuggestMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedPostApproval/SuggestedPostApprovalModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/value/GiftInfoValueModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/resale/GiftResalePriceComposerModal.async.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.async.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.async.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/upgrade/GiftUpgradeModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/withdraw/GiftWithdrawModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/status/GiftStatusInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/transfer/GiftTransferModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/chatRefund/ChatRefundModal.async.tsx","webpack://telegram-t/./src/components/modals/priceConfirm/PriceConfirmModal.async.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.async.tsx","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.async.tsx","webpack://telegram-t/./src/components/modals/ageVerification/AgeVerificationModal.async.tsx","webpack://telegram-t/./src/components/modals/profileRating/ProfileRatingModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/gift/SavedGift.module.scss?4193","webpack://telegram-t/./src/components/common/gift/SavedGift.tsx","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/common/AnimatedTabItem.module.scss?3313","webpack://telegram-t/./src/components/common/AnimatedTabItem.tsx","webpack://telegram-t/./src/components/common/AnimatedTabList.tsx","webpack://telegram-t/./src/components/common/AnimatedTabList.module.scss?5731","webpack://telegram-t/./src/components/right/gifts/StarGiftCollectionList.tsx","webpack://telegram-t/./src/components/right/gifts/StarGiftCollectionList.module.scss?00be","webpack://telegram-t/./src/components/right/stories/StoryAlbumList.tsx","webpack://telegram-t/./src/components/right/stories/StoryAlbumList.module.scss?ff67","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/hooks/tauri/useTauriEvent.ts","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = 3 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  replaceWebPage,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePeerFullInfo,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateSnapEffect,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\nconst SNAP_ANIMATION_DELAY = 1000;\nconst VIDEO_PROCESSING_NOTIFICATION_DELAY = 1000;\nlet lastVideoProcessingNotificationTime = 0;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll, webPage,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      if (message.reportDeliveryUntilDate && message.reportDeliveryUntilDate > getServerTime()) {\n        actions.reportMessageDelivery({ chatId, messageId: id });\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message)?.text !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll, webPage,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const {\n        chatId, id, message, poll, webPage, isFromNew,\n      } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newScheduledMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message as ApiMessage,\n            poll: update.poll,\n            webPage: update.webPage,\n          });\n        }\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const {\n        chatId, id, message, poll, webPage, isFromNew, shouldForceReply,\n      } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n\n      if (!currentMessage) {\n        if (isFromNew) {\n          actions.apiUpdate({\n            '@type': 'newMessage',\n            id: update.id,\n            chatId: update.chatId,\n            message: update.message,\n            poll: update.poll,\n            webPage: update.webPage,\n            shouldForceReply,\n          });\n        }\n        return;\n      }\n\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message, poll, webPage } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      if (webPage) {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateVideoProcessingPending': {\n      const {\n        chatId, localId, newScheduledMessageId,\n      } = update;\n\n      global = deleteChatMessages(global, chatId, [localId]);\n      global = updatePeerFullInfo(global, chatId, {\n        hasScheduledMessages: true,\n      });\n\n      setGlobal(global);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const currentMessageList = selectCurrentMessageList(global, tabId);\n        if (currentMessageList?.chatId !== chatId) return;\n\n        const now = Date.now();\n        if (now - lastVideoProcessingNotificationTime < VIDEO_PROCESSING_NOTIFICATION_DELAY) {\n          return;\n        }\n        lastVideoProcessingNotificationTime = now;\n\n        actions.showNotification({\n          message: {\n            key: 'VideoConversionText',\n          },\n          title: {\n            key: 'VideoConversionTitle',\n          },\n          tabId,\n        });\n\n        actions.focusMessage({\n          chatId,\n          messageId: newScheduledMessageId,\n          messageListType: 'scheduled',\n          tabId,\n        });\n      });\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n\n      global = updateListedAndViewportIds(global, actions, message);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      const chat = selectChat(global, chatId);\n      // Reload dialogs if chat is not present in the list\n      if (!chat?.isNotJoined && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const {\n        chatId, localId, message, poll,\n      } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n        isDeleting: undefined,\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (chat?.isForum) {\n        if (!topic || topic.lastMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        } else {\n          global = updateTopic(global, chatId, Number(threadId), {\n            unreadCount: 0,\n          });\n        }\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, newIds, chatId } = update;\n\n      const hadVideoProcessing = ids?.some((id) => (\n        selectScheduledMessage(global, chatId, id)?.isVideoProcessingPending\n      ));\n      const processedVideoId = newIds?.find((id) => {\n        const message = selectChatMessage(global, chatId, id);\n        return message?.content.video;\n      });\n\n      if (hadVideoProcessing && processedVideoId) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showNotification({\n            message: {\n              key: 'VideoConversionDone',\n            },\n            actionText: {\n              key: 'VideoConversionView',\n            },\n            action: {\n              action: 'focusMessage',\n              payload: {\n                chatId,\n                messageId: processedVideoId,\n                tabId,\n              },\n            },\n            tabId,\n          });\n        });\n      }\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'deleteParticipantHistory': {\n      const { chatId, peerId } = update;\n\n      global = getGlobal();\n      deleteParticipantHistory(global, chatId, peerId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'failedMessageTranslations': {\n      const { chatId, messageIds, toLanguageCode } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, []);\n\n      setGlobal(global);\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    const { localIsPrivate: isPrivate, localAmount, localPeerId } = localPaidReaction;\n    reactions.results = addPaidReaction(reactions.results, localAmount, isPrivate, localPeerId);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nexport function updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const threadId = selectThreadIdFromMessage(global, message);\n  global = updateThreadInfo(global, chatId, threadId, {\n    lastMessageId: message.id,\n  });\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteParticipantHistory<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  peerId: string,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n\n  const messageIds = Object.values(byId).filter((message) => {\n    return message.senderId === peerId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      // Prevent local deletion of sent messages in case of desync\n      const stillDeletedIds = ids.filter((id) => selectChatMessage(global, chatId, id)?.isDeleting);\n      global = deleteChatMessages(global, chatId, stillDeletedIds);\n      setGlobal(global);\n    }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.type === 'chatEditPhoto' && message.content.action.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  const isAnimatingAsSnap = selectCanAnimateSnapEffect(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, isAnimatingAsSnap ? SNAP_ANIMATION_DELAY : ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiChatType,\n  ApiDraft,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiInputSuggestedPostInfo,\n  ApiMessage,\n  ApiOnProgress,\n  ApiStory,\n  ApiUser,\n  MediaContent,\n} from '../../../api/types';\nimport type {\n  ForwardMessagesParams,\n  SendMessageParams,\n  ThreadId,\n} from '../../../types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  STARS_CURRENCY_CODE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { ensureProtocol, isMixedScriptUrl } from '../../../util/browser/url';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { getTranslationFn, type RegularLangFnParameters } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n  splitMessagesForForwarding,\n} from '../../helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../helpers/peers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateGlobalSearch,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updatePeerFullInfo,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanForwardMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectCustomEmoji,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatBotNotStarted,\n  selectIsChatRestricted,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsMonoforumAdmin,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectSavedDialogIdFromMessage,\n  selectScheduledMessage,\n  selectSendAs,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { updateWithLocalMedia } from '../apiUpdaters/messages';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  const isRestricted = selectIsChatRestricted(global, chatId);\n  // TODO Revise if `isRestricted` check is needed\n  if (!chat || isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadMessagesById', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageIds } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messages = await callApi('fetchMessagesById', {\n    chat,\n    messageIds,\n  });\n  if (!messages) return;\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chatId, buildCollectionByKey(messages, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    global = updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n  const draftSuggestedPostInfo = !isForwarding && !isStoryReply\n    ? draft?.suggestedPostInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n\n  const threadInfo = selectThreadInfo(global, chatId!, threadId!);\n  const lastMessageId = threadId === MAIN_THREAD_ID\n    ? selectChatLastMessageId(global, chatId!) : threadInfo?.lastMessageId;\n\n  const messagePriceInStars = await getPeerStarsForMessage(global, chatId!);\n\n  const suggestedPostPrice = draftSuggestedPostInfo?.price;\n  const suggestedPostCurrency = suggestedPostPrice?.currency || STARS_CURRENCY_CODE;\n  const suggestedPostAmount = suggestedPostPrice?.amount || 0;\n  if (suggestedPostAmount && !draftReplyInfo) {\n    if (suggestedPostCurrency === STARS_CURRENCY_CODE) {\n      const currentBalance = global.stars?.balance?.amount || 0;\n\n      if (suggestedPostAmount > currentBalance) {\n        actions.openStarsBalanceModal({\n          topup: {\n            balanceNeeded: suggestedPostAmount,\n          },\n          tabId,\n        });\n        return;\n      }\n    } else if (suggestedPostCurrency === TON_CURRENCY_CODE) {\n      const currentTonBalance = global.ton?.balance?.amount || 0;\n      if (suggestedPostAmount > currentTonBalance) {\n        actions.openStarsBalanceModal({\n          currency: TON_CURRENCY_CODE,\n          tabId,\n        });\n        return;\n      }\n    }\n  }\n\n  const suggestedMessage = draftReplyInfo && draftSuggestedPostInfo\n    ? selectChatMessage(global, chatId!, draftReplyInfo.replyToMsgId) : undefined;\n  let suggestedMedia: MediaContent | undefined;\n  if (draftSuggestedPostInfo && suggestedMessage?.content) {\n    suggestedMedia = suggestedMessage.content;\n  }\n\n  const params: SendMessageParams = {\n    ...payload,\n    chat,\n    replyInfo,\n    suggestedPostInfo: draftSuggestedPostInfo,\n    suggestedMedia,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n    messagePriceInStars,\n    isStoryReply,\n    isPending: messagePriceInStars ? true : undefined,\n    ...suggestedMessage && { isInvertedMedia: suggestedMessage?.isInvertedMedia },\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = (!payload.attachments || payload.attachments.length <= 1) && !isForwarding;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n  const localMessages: SendMessageParams[] = [];\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    const sendParams: SendMessageParams = {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    };\n    await sendMessageOrReduceLocal(global, sendParams, localMessages);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    for (let groupIndex = 0; groupIndex < byType.length; groupIndex++) {\n      const group = byType[groupIndex];\n      const groupedAttachments = split(group, MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n\n          let sendParams: SendMessageParams = {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n\n          for (const attachment of restAttachments) {\n            sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          for (const attachment of firstAttachments) {\n            const sendParams = {\n              ...commonParams,\n              attachment,\n              groupedId,\n            };\n            await sendMessageOrReduceLocal(global, sendParams, localMessages);\n          }\n\n          const sendParams = {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          };\n          await sendMessageOrReduceLocal(global, sendParams, localMessages);\n\n          hasSentCaption = true;\n        }\n      }\n    }\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      const sendParams = {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      };\n      await sendMessageOrReduceLocal(global, sendParams, localMessages);\n    }\n\n    if (attachments) {\n      for (const attachment of attachments) {\n        const sendParams = {\n          ...commonParams,\n          attachment,\n        };\n        await sendMessageOrReduceLocal(global, sendParams, localMessages);\n      }\n    }\n  }\n  if (isForwarding) {\n    const localForwards = await executeForwardMessages(global, params, tabId);\n    if (localForwards) {\n      localMessages.push(...localForwards);\n    }\n  }\n  if (localMessages?.length) sendMessagesWithNotification(global, localMessages);\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('editTodo', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, todo, messageId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  callApi('editTodo', {\n    chat,\n    message,\n    todo,\n  });\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!text || !chat) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  if (chat.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n    suggestedPostInfo: currentDraft?.suggestedPostInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply, shouldKeepSuggestedPost,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = (shouldKeepReply && currentReplyInfo)\n    || (shouldKeepSuggestedPost && currentDraft.suggestedPostInfo) ? {\n      replyInfo: shouldKeepReply ? currentReplyInfo : undefined,\n      suggestedPostInfo: shouldKeepSuggestedPost ? currentDraft.suggestedPostInfo : undefined,\n    } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n    suggestedPostInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('updateDraftSuggestedPostInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedSuggestedPostInfo = {\n    ...currentDraft?.suggestedPostInfo,\n    ...update,\n  } as ApiInputSuggestedPostInfo;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    suggestedPostInfo: updatedSuggestedPostInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftSuggestedPostInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  saveDraft({\n    global, chatId, threadId, draft: undefined, isLocalOnly: false,\n  });\n});\n\naddActionHandler('initDraftFromSuggestedMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n\n  actions.clearDraft({\n    chatId,\n    threadId,\n    isLocalOnly: true,\n  });\n\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId,\n    monoforumPeerId: selectSavedDialogIdFromMessage(global, message),\n    tabId,\n  });\n\n  if (message.suggestedPostInfo) {\n    const { scheduleDate, ...messageSuggestedPost } = message.suggestedPostInfo;\n    const now = getServerTime();\n    const futureMin = global.appConfig.starsSuggestedPostFutureMin;\n\n    const validScheduleDate = scheduleDate && scheduleDate > now + futureMin ? scheduleDate : undefined;\n\n    actions.updateDraftSuggestedPostInfo({\n      ...messageSuggestedPost,\n      scheduleDate: validScheduleDate,\n      tabId,\n    });\n  }\n\n  actions.saveDraft({\n    chatId,\n    threadId,\n    text: message.content.text,\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (chat?.isMonoforum && !currentDraft?.replyInfo && !currentDraft?.suggestedPostInfo) {\n    return; // Monoforum doesn't support drafts outside threads\n  }\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('updateInsertingPeerIdMention', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    insertingPeerIdMention: peerId,\n  }, tabId);\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n}: {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, isUnpin, isOneSide, isSilent,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    messageIds, shouldDeleteForAll, messageList: payloadMessageList, tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const messageList = payloadMessageList || currentMessageList;\n  if (!messageList) {\n    return;\n  }\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) || isChatSuperGroup(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('resetLocalPaidMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const notifications = selectTabState(global, tabId).notifications;\n  if (!notifications || !notifications.length) return global;\n\n  notifications.forEach((notification) => {\n    if (notification.type === 'paidMessage') {\n      const action = notification.dismissAction;\n      if (action && !Array.isArray(action)) {\n        // @ts-ignore\n        actions[action.action](action.payload);\n      }\n      actions.dismissNotification({ localId: notification.localId, tabId });\n    }\n  });\n  return global;\n});\n\naddActionHandler('deleteParticipantHistory', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, peerId,\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n  const peer = selectPeer(global, peerId)!;\n\n  void callApi('deleteParticipantHistory', { chat, peer });\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || chat.isMonoforum) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return undefined;\n  const { maxId, tabId = getCurrentTabId() } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreviewId: webPagePreview?.id,\n  }, tabId);\n  setGlobal(global);\n\n  if (!webPagePreview) return;\n\n  actions.apiUpdate({\n    '@type': 'updateWebPage',\n    webPage: webPagePreview,\n  });\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webPagePreviewId: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('toggleTodoCompleted', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, completedIds, incompletedIds } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const currentUserId = global.currentUserId;\n\n  const currentTodo = message?.content.todo;\n  if (!currentTodo || !currentUserId || !chat) {\n    return;\n  }\n\n  const currentCompletions = currentTodo.completions || [];\n  const currentCompletionIds = currentCompletions.map((c) => c.itemId);\n\n  const newCompletions = [...currentCompletions];\n  const now = getServerTime();\n\n  completedIds.forEach((itemId) => {\n    if (!currentCompletionIds.includes(itemId)) {\n      newCompletions.push({\n        itemId,\n        completedBy: currentUserId,\n        completedAt: now,\n      });\n    }\n  });\n\n  const finalCompletions = newCompletions.filter((c) => !incompletedIds.includes(c.itemId));\n\n  const newContent = {\n    ...message.content,\n    todo: {\n      ...currentTodo,\n      completions: finalCompletions,\n    },\n  };\n\n  const messageUpdate: Partial<ApiMessage> = {\n    ...message,\n    content: newContent,\n  };\n\n  global = updateWithLocalMedia(global, chatId, message.id, messageUpdate);\n  setGlobal(global);\n\n  callApi('toggleTodoCompleted', { chat, messageId: message.id, completedIds, incompletedIds });\n});\naddActionHandler('appendTodoList', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, items, messageId,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  callApi('appendTodoList', {\n    chat,\n    message,\n    items,\n  });\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (!ids.length) {\n    global = updatePeerFullInfo(global, chat.id, { hasScheduledMessages: false });\n  }\n\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !selectCustomEmoji(global, documentId)));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n  const { toChatId } = selectTabState(global, tabId).forwardMessages;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  if (!toChat) return;\n  executeForwardMessages(global, { chat: toChat, isSilent, scheduledAt }, tabId);\n});\n\nasync function executeForwardMessages(global: GlobalState, sendParams: SendMessageParams, tabId: number) {\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n  const { messagePriceInStars, isSilent, scheduledAt } = sendParams;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return undefined;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n  const localMessages: SendMessageParams[] = [];\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  const forwardableRealMessages = realMessages.filter((message) => selectCanForwardMessage(global, message));\n  if (forwardableRealMessages.length) {\n    const messageSlices = global.config?.maxForwardedCount\n      ? splitMessagesForForwarding(forwardableRealMessages, global.config.maxForwardedCount)\n      : [forwardableRealMessages];\n    for (const slice of messageSlices) {\n      const forwardParams: ForwardMessagesParams = {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: slice,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n        messagePriceInStars,\n      };\n\n      if (!messagePriceInStars) {\n        callApi('forwardMessages', forwardParams);\n      } else {\n        const forwardedLocalMessagesSlice = await callApi('forwardMessagesLocal', forwardParams);\n        localMessages.push({\n          ...sendParams,\n          forwardParams: { ...forwardParams, forwardedLocalMessagesSlice },\n          forwardedLocalMessagesSlice,\n        });\n      }\n    }\n  }\n\n  for (const message of serviceMessages) {\n    const { text, entities } = message.content.text || {};\n    const { sticker } = message.content;\n\n    const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n    const params: SendMessageParams = {\n      chat: toChat,\n      replyInfo,\n      text,\n      entities,\n      sticker,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      lastMessageId,\n    };\n\n    await sendMessageOrReduceLocal(global, params, localMessages);\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  return localMessages;\n}\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nexport async function getPeerStarsForMessage<T extends GlobalState>(\n  global: T,\n  peerId: string,\n): Promise<number | undefined> {\n  const peer = selectPeer(global, peerId);\n  if (!peer) return undefined;\n\n  if (isApiPeerChat(peer)) {\n    if (selectIsMonoforumAdmin(global, peerId)) {\n      return undefined;\n    }\n    return peer.paidMessagesStars;\n  }\n\n  if (!peer?.paidMessagesStars) return undefined;\n\n  const fullInfo = selectUserFullInfo(global, peer.id);\n  if (fullInfo) {\n    return fullInfo.paidMessagesStars;\n  }\n\n  const result = await callApi('fetchPaidMessagesStarsAmount', peer);\n  return result;\n}\n\nasync function sendMessageOrReduceLocal<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams,\n  localMessages: SendMessageParams[],\n) {\n  if (!sendParams.messagePriceInStars) {\n    sendMessage(global, sendParams);\n  } else {\n    const message = await callApi('sendMessageLocal', sendParams);\n    if (message) {\n      localMessages.push({\n        ...sendParams,\n        localMessage: message,\n      });\n    }\n  }\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: SendMessageParams) {\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n  await callApi('sendMessage', params, progressCallback);\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\nasync function sendMessagesWithNotification<T extends GlobalState>(\n  global: T,\n  sendParams: SendMessageParams[],\n) {\n  const chat = sendParams[0]?.chat;\n  if (!chat || !sendParams.length) return;\n  const starsForOneMessage = await getPeerStarsForMessage(global, chat.id);\n  if (!starsForOneMessage) {\n    getActions().sendMessages({ sendParams });\n    return;\n  }\n  const messageIdsForUndo = sendParams.reduce((ids, params) => {\n    if (params.localMessage?.id) {\n      ids.push(params.localMessage.id);\n    } else if (params.forwardedLocalMessagesSlice?.localMessages) {\n      const forwardedIds = Object.values(params.forwardedLocalMessagesSlice.localMessages)\n        .map((forwardedMessage) => forwardedMessage.id)\n        .filter(Boolean);\n      ids.push(...forwardedIds);\n    }\n    return ids;\n  }, [] as number[]);\n\n  const localForwards = sendParams[0]?.forwardedLocalMessagesSlice?.localMessages;\n  const firstMessage = sendParams[0]?.localMessage\n    || (localForwards && Object.values(localForwards)[0]);\n  if (!firstMessage) return;\n\n  const messagesCount = messageIdsForUndo.length;\n\n  const firstSendParam = sendParams[0];\n  let storySendMessage: RegularLangFnParameters | undefined;\n  if (sendParams.length === 1 && firstSendParam.isStoryReply) {\n    const { gif, sticker, isReaction } = firstSendParam;\n\n    if (gif) {\n      storySendMessage = { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } };\n    } else if (sticker) {\n      storySendMessage = { key: 'StoryTooltipStickerSent' };\n    } else if (isReaction) {\n      storySendMessage = { key: 'StoryTooltipReactionSent' };\n    }\n  }\n\n  const titleKey: RegularLangFnParameters = storySendMessage || {\n    key: 'MessageSentPaidToastTitle',\n    variables: { count: messagesCount },\n    options: { pluralValue: messagesCount },\n  };\n\n  getActions().sendMessages({ sendParams });\n\n  getActions().showNotification({\n    localId: getMessageKey(firstMessage),\n    title: titleKey,\n    message: {\n      key: 'MessageSentPaidToastText',\n      variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage * messagesCount) },\n    },\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n  });\n}\n\naddActionHandler('sendMessages', async (global, actions, payload): Promise<void> => {\n  const { sendParams } = payload;\n  await Promise.all(sendParams.map(async (params) => {\n    if (params.forwardedLocalMessagesSlice && params.forwardParams) {\n      await rafPromise();\n      await callApi('forwardApiMessages', params.forwardParams);\n    } else {\n      await sendMessage(global, params);\n    }\n  }));\n  if (sendParams.length > 0 && sendParams[0].messagePriceInStars) actions.loadStarStatus();\n});\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSendPaidReactionsAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat, isForPaidReactions: true });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendPaidReactionsAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendPaidReactionsAsPeerIds: result });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  if (isApiPeerUser(peer) && selectIsChatBotNotStarted(global, peer.id)) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, peerId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId } = payload;\n\n  void callApi('viewSponsoredMessage', { random: randomId });\n});\n\naddActionHandler('clickSponsored', (global, actions, payload): ActionReturnType => {\n  const { randomId, isMedia, isFullscreen } = payload;\n\n  void callApi('clickSponsoredMessage', {\n    random: randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsored', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('reportSponsoredMessage', { randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    if (peerId) {\n      global = deleteSponsoredMessage(global, peerId);\n    } else {\n      global = updateGlobalSearch(global, {\n        sponsoredPeer: undefined,\n      }, tabId);\n    }\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId: peerId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsored', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\naddActionHandler('approveSuggestedPost', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, scheduleDate, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const message = selectChatMessage(global, chatId, messageId);\n\n  const isAdmin = selectIsMonoforumAdmin(global, chatId);\n\n  if (!isAdmin && message?.suggestedPostInfo?.price?.amount) {\n    const neededAmount = message.suggestedPostInfo.price.amount;\n    const isCurrencyStars = message.suggestedPostInfo.price.currency === STARS_CURRENCY_CODE;\n\n    if (isCurrencyStars) {\n      const currentBalance = global.stars?.balance?.amount || 0;\n      if (neededAmount > currentBalance) {\n        actions.openStarsBalanceModal({\n          topup: {\n            balanceNeeded: neededAmount,\n          },\n          tabId,\n        });\n        return;\n      }\n    } else {\n      const currentTonBalance = global.ton?.balance?.amount || 0;\n      if (neededAmount > currentTonBalance) {\n        actions.openStarsBalanceModal({\n          currency: TON_CURRENCY_CODE,\n          tabId,\n        });\n        return;\n      }\n    }\n  }\n\n  const result = await callApi('toggleSuggestedPostApproval', {\n    chat,\n    messageId,\n    reject: false,\n    scheduleDate,\n  });\n\n  if (!result) return;\n\n  actions.showNotification({\n    message: { key: 'SuggestedPostApproved' },\n    tabId,\n  });\n});\n\naddActionHandler('rejectSuggestedPost', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, rejectComment, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('toggleSuggestedPostApproval', {\n    chat,\n    messageId,\n    reject: true,\n    rejectComment,\n  });\n\n  if (!result) return;\n\n  actions.showNotification({\n    message: { key: 'SuggestedPostRejectedNotification' },\n    tabId,\n  });\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chatId, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateChat(global, chat.id, {\n      unreadMentionsCount: undefined,\n      unreadMentions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support mentions in threads\n  return undefined;\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, linkContext, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url);\n  const parsedUrl = new URL(urlWithProtocol);\n  const isMixedScript = isMixedScriptUrl(urlWithProtocol);\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, linkContext, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n    parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n    window.open(parsedUrl.href, '_blank', 'noopener');\n    return;\n  }\n\n  if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n    actions.closeStoryViewer({ tabId });\n\n    actions.requestLinkUrlAuth({ url, tabId });\n    return;\n  }\n\n  const isWhitelisted = appConfig.whitelistedDomains.includes(parsedUrl.hostname);\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal && !isWhitelisted;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: isMixedScript ? parsedUrl.toString() : urlWithProtocol, tabId });\n  } else {\n    window.open(parsedUrl, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    monoforumPeerId: replyingInfo.toThreadId,\n    quoteText: replyingInfo.quoteText,\n    quoteOffset: replyingInfo.quoteOffset,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nconst MESSAGES_TO_REPORT_DELIVERY = new Map<string, number[]>();\nlet reportDeliveryTimeout: number | undefined;\naddActionHandler('reportMessageDelivery', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const currentIds = MESSAGES_TO_REPORT_DELIVERY.get(chatId) || [];\n  currentIds.push(messageId);\n  MESSAGES_TO_REPORT_DELIVERY.set(chatId, currentIds);\n\n  if (!reportDeliveryTimeout) {\n    // Slightly unsafe in the multitab environment, but there is no better way to do it now.\n    // Not critical if user manages to close the tab in a show window before the report is sent.\n    reportDeliveryTimeout = window.setTimeout(() => {\n      reportDeliveryTimeout = undefined;\n\n      MESSAGES_TO_REPORT_DELIVERY.forEach((messageIds, cId) => {\n        const chat = selectChat(global, cId);\n        if (!chat) return;\n\n        callApi('reportMessagesDelivery', { chat, messageIds });\n      });\n      MESSAGES_TO_REPORT_DELIVERY.clear();\n    }, 500);\n  }\n});\n\naddActionHandler('openPreparedInlineMessageModal', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, messageId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const result = await callApi('fetchPreparedInlineMessage', {\n    bot,\n    id: messageId,\n  });\n  if (!result) {\n    actions.sendWebAppEvent({\n      webAppKey,\n      event: {\n        eventType: 'prepared_message_failed',\n        eventData: { error: 'MESSAGE_EXPIRED' },\n      },\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    preparedMessageModal: {\n      message: result,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    webAppKey, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const supportedFilters = message.peerTypes?.filter((type): type is ApiChatType => type !== 'self');\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      webAppKey,\n      filter: supportedFilters,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectTabState,\n} from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTonGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchTonGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    tonGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserCollectibleStatuses', async (global, actions): Promise<void> => {\n  setGlobal(global);\n\n  const { hash } = global.collectibleEmojiStatuses || {};\n\n  const result = await callApi('fetchCollectibleEmojiStatuses', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    collectibleEmojiStatuses: {\n      hash: result.hash,\n      statuses: result.statuses,\n    },\n  };\n  setGlobal(global);\n  const documentIds = result.statuses.map(({ documentId }) => documentId);\n\n  actions.loadCustomEmojis({ ids: documentIds });\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error: unknown) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, shouldIgnoreCache, tabId = getCurrentTabId() } = payload;\n  if (shouldIgnoreCache || !selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiMessageSearchContext, ApiPeer, ApiSearchPostsFlood, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { toChannelId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup } from '../../helpers/chats';\nimport { isApiPeerChat } from '../../helpers/peers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectPeer, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const [searchResult, sponsoredResult] = await Promise.all([\n        callApi('searchChats', { query }),\n        callApi('fetchSponsoredPeer', { query }),\n      ]);\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!searchResult || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = searchResult;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n        sponsoredPeer: sponsoredResult,\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const {\n    type, context, shouldResetResultsByType, shouldCheckFetchingMessagesStatus, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (shouldCheckFetchingMessagesStatus) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: true }, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = (!shouldResetResultsByType && resultsByType?.[type]) || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectPeer(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectPeer(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    context,\n    shouldResetResultsByType,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    peer: chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('checkSearchPostsFlood', async (global, actions, payload): Promise<void> => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkSearchPostsFlood', query);\n\n  global = getGlobal();\n  if (!result) {\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    searchFlood: result,\n  }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  context?: ApiMessageSearchContext;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiPeer;\n  peer?: ApiPeer;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n  shouldResetResultsByType?: boolean;\n}) {\n  const {\n    query = '', type, context, offsetRate, offsetId, offsetPeer,\n    peer, maxDate, minDate, shouldResetResultsByType, tabId = getCurrentTabId(),\n  } = params;\n\n  if (type === 'publicPosts') {\n    global = updateGlobalSearchFetchingStatus(global, { publicPosts: true }, tabId);\n    setGlobal(global);\n  }\n\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n    searchFlood?: ApiSearchPostsFlood;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  const previousSearchFlood = selectTabState(global, tabId).globalSearch.searchFlood;\n\n  if (peer) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      peer,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const isChat = isApiPeerChat(peer);\n    const topicsRequest = isChat && peer.isForum ? callApi('fetchTopics', {\n      chat: peer,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      context,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (shouldResetResultsByType) {\n    global = updateGlobalSearch(global, {\n      resultsByType: {\n        ...(selectTabState(global, tabId).globalSearch || {}).resultsByType,\n        [type]: undefined,\n      },\n    }, tabId);\n  }\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false, publicPosts: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  const searchFlood = result.searchFlood || previousSearchFlood;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    searchFlood,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, peer!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n\n  if (type === 'publicPosts' && searchFlood && !searchFlood.queryIsFree && !offsetId\n    && previousSearchFlood?.remains === 0) {\n    const lang = getTranslationFn();\n    getActions().showNotification({\n      icon: 'star',\n      message: {\n        key: 'NotificationPaidExtraSearch',\n        variables: {\n          stars: formatStarsAsText(lang, searchFlood.starsAmount),\n        },\n      },\n    });\n  }\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiPeer, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n  selectPeer,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = realChatId ? selectPeer(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!peer) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const shouldReuseParams = results?.query === query;\n\n  const offsetId = shouldReuseParams ? results?.nextOffsetId : undefined;\n  const offsetRate = shouldReuseParams ? results?.nextOffsetRate : undefined;\n  const offsetPeerId = shouldReuseParams ? results?.nextOffsetPeerId : undefined;\n  const offsetPeer = shouldReuseParams && offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      peer,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchPublicPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : peer.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const peer = selectPeer(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!peer || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, peer, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, peer, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n): number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction: LoadMoreDirection,\n  limit: number, newFoundIdsCount: number,\n  currentSegment?: ChatMediaSearchSegment,\n): LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  peer: ApiPeer,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : peer.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    peer,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectIsCurrentUserFrozen,\n  selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }));\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hidePeerSettingsBar', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const user = selectUser(global, peerId);\n  if (!user) return;\n\n  const result = await callApi('hidePeerSettingsBar', user);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { Thread, ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadAccountDaysTtl', async (global, actions, payload): Promise<void> => {\n  const result = await callApi('fetchAccountTTL');\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: result.days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('setAccountTTL', async (global, actions, payload): Promise<void> => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  const result = await callApi('setAccountTTL', { days });\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      accountDaysTtl: days,\n    },\n  };\n  setGlobal(global);\n  actions.closeDeleteAccountModal({ tabId });\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_VERIFICATION_PEERS_LIMIT } from '../../../config';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsChatRestricted,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    return;\n  }\n\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleNoPaidMessagesException', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefundCharged } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('toggleNoPaidMessagesException',\n    { user, shouldRefundCharged });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, userId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatRefundModal', async (global, actions, payload): Promise<void> => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const starsAmount = await callApi('fetchPaidMessagesRevenue', { user });\n  if (starsAmount === undefined) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    chatRefundModal: {\n      userId,\n      starsToRefund: starsAmount,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadPeerSettings({ peerId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n\n  if (chat && selectIsChatRestricted(global, peerId)) {\n    return;\n  }\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', async (global, actions, payload): Promise<void> => {\n  const {\n    emojiStatus, referrerWebAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    if (referrerWebAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n        tabId,\n      });\n    }\n\n    actions.openPremiumModal({ initialSection: 'emoji_status', tabId });\n    return;\n  }\n\n  const result = await callApi('updateEmojiStatus', emojiStatus);\n\n  if (referrerWebAppKey) {\n    if (!result) {\n      actions.sendWebAppEvent({\n        webAppKey: referrerWebAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SERVER_ERROR',\n          },\n        },\n        tabId,\n      });\n      return;\n    }\n\n    actions.sendWebAppEvent({\n      webAppKey: referrerWebAppKey,\n      event: {\n        eventType: 'emoji_status_set',\n      },\n      tabId,\n    });\n    actions.showNotification({\n      message: {\n        key: 'BotSuggestedStatusUpdated',\n      },\n      customEmojiIconId: emojiStatus.documentId,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openSuggestedStatusModal', async (global, actions, payload): Promise<void> => {\n  const {\n    customEmojiId, duration, botId, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: [customEmojiId],\n  });\n  if (!customEmoji?.[0]) {\n    if (webAppKey) {\n      actions.sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'SUGGESTED_EMOJI_INVALID',\n          },\n        },\n        tabId,\n      });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    suggestedStatusModal: {\n      customEmojiId,\n      duration,\n      webAppKey,\n      botId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerSettings', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  if (!userFullInfo) {\n    actions.loadFullUser({ userId: peerId });\n    return;\n  }\n\n  const user = selectUser(global, peerId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerSettings', user);\n  if (!result) return;\n\n  const { settings } = result;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, peerId, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('markBotVerificationInfoShown', (global, actions, payload): ActionReturnType => {\n  const { peerId } = payload;\n\n  const currentPeerIds = global.settings.botVerificationShownPeerIds;\n  const newPeerIds = unique([peerId, ...currentPeerIds]).slice(0, BOT_VERIFICATION_PEERS_LIMIT);\n\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      botVerificationShownPeerIds: newPeerIds,\n    },\n  };\n\n  setGlobal(global);\n});\n","import type { InlineBotSettings } from '../../types';\nimport type { WebApp, WebAppModalStateType } from '../../types/webapp';\nimport type {\n  GlobalState, TabArgs,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectActiveWebApp, selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp<T extends GlobalState>(\n  global: T, key: string, webAppUpdate: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const originalWebApp = openedWebApps[key];\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webAppUpdate,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: webAppKey,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebAppKey: key },\n      isMoreAppsTabActive: false,\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const activeWebAppKey = currentTabState.webApps.activeWebAppKey;\n\n  if (!activeWebAppKey) return global;\n\n  return removeWebAppFromOpenList(global, activeWebAppKey, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, key: string, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const { openedWebApps, openedOrderedKeys, activeWebAppKey } = currentTabState.webApps;\n  const webApp = openedWebApps[key];\n  if (!webApp) return global;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, key, { isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = openedOrderedKeys.filter((k) => k !== removingWebAppKey);\n  }\n\n  const isRemovedAppActive = activeWebAppKey === getWebAppKey(webApp);\n\n  const openedWebAppsKeys = Object.keys(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebAppKey: openedWebAppsCount\n          ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      ([, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebAppKey: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = selectActiveWebApp(global, tabId);\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  const newActiveWebAppKey = getWebAppKey(newActiveWebApp);\n\n  if (newActiveWebAppKey) {\n    webAppsNotAllowedToClose[newActiveWebAppKey] = {\n      ...newActiveWebApp,\n      isCloseModalOpen: true,\n    };\n  }\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => webAppsNotAllowedToClose[k]);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebAppKey: newActiveWebAppKey,\n      isMoreAppsTabActive: false,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function hasOpenedMoreThanOneWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 1;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings, ThreadId } from '../../../types';\nimport type { WebApp } from '../../../types/webapp';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport {\n  type ApiChat,\n  type ApiContact,\n  type ApiInputMessageReplyInfo,\n  type ApiPeer,\n  type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getUsernameFromDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { pick } from '../../../util/iteratees.ts';\nimport { getTranslationFn } from '../../../util/localization';\nimport { formatStarsAsText } from '../../../util/localization/format';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  getWebAppKey,\n} from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser,\n  updateBotAppPermissions,\n  updateManagementProgress,\n  updateSharedSettings,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList,\n  replaceInlineBotSettings,\n  replaceInlineBotsIsLoading,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsCurrentUserFrozen,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\nimport { fetchChatByUsername } from './chats';\nimport { getPeerStarsForMessage } from './messages';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickSuggestedMessageButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { buttonType } = button;\n  const message = selectChatMessage(global, chatId, messageId);\n\n  switch (buttonType) {\n    case 'suggestChanges':\n      if (!message) break;\n\n      actions.initDraftFromSuggestedMessage({ chatId, messageId, tabId });\n      break;\n  }\n});\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId, linkContext: { type: 'message', chatId, messageId, threadId } });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, threadId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, threadId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${getMainUsername(botSender)} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotApiResult', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, id, queryId, replyInfo, sendAs, isSilent, scheduledAt, allowPaidStars,\n  } = payload;\n\n  await callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs,\n    isSilent,\n    scheduleDate: scheduledAt,\n    allowPaidStars,\n  });\n\n  if (allowPaidStars) actions.loadStarStatus();\n});\n\naddActionHandler('sendInlineBotResult', async (global, actions, payload): Promise<void> => {\n  const {\n    id, queryId, isSilent, scheduledAt, threadId, chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const starsForOneMessage = await getPeerStarsForMessage(global, chatId);\n  const params = {\n    chat,\n    id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduledAt,\n    allowPaidStars: starsForOneMessage,\n  };\n  if (!starsForOneMessage) {\n    actions.sendInlineBotApiResult(params);\n    return;\n  }\n\n  actions.sendInlineBotApiResult({ ...params });\n\n  actions.showNotification({\n    localId: queryId,\n    title: { key: 'MessageSentPaidToastTitle', variables: { count: 1 }, options: { pluralValue: 1 } },\n    message: {\n      key: 'MessageSentPaidToastText', variables: { amount: formatStarsAsText(getTranslationFn(), starsForOneMessage) },\n    },\n\n    icon: 'star',\n    shouldUseCustomIcon: true,\n    type: 'paidMessage',\n    tabId,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    appName: bot.firstName,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam, isFullscreen,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n    isFullscreen,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullScreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullScreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, mode, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n    mode,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId, isFullscreen } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    appName: bot.firstName,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeWebAppsCloseConfirmationModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipInFuture, tabId = getCurrentTabId() } = payload || {};\n\n  global = updateSharedSettings(global, {\n    shouldSkipWebAppCloseConfirmation: Boolean(shouldSkipInFuture),\n  });\n\n  return updateTabState(global, {\n    isWebAppsCloseConfirmationModalOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, mode, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const { url, isFullscreen } = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    mode,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    appName: appName && bot.firstName,\n    peerId,\n    botId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n\n  if (isFullscreen && getIsWebAppsFullscreenSupported()) {\n    actions.changeWebAppModalState({ state: 'fullScreen', tabId });\n  }\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId,\n      botId: (isFromBotMenu ? chatId : bot.id),\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const currentInlineBotSettings = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !currentInlineBotSettings || query !== currentInlineBotSettings.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((currentInlineBotSettings.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...currentInlineBotSettings,\n    ...pick(result, ['help', 'switchPm', 'switchWebview']),\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: currentInlineBotSettings.offset === '' || currentInlineBotSettings.offset === result.nextOffset\n      ? result.results\n      : (currentInlineBotSettings.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, threadId?: ThreadId, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      openGame({\n        url, chatId: chat.id, messageId, tabId,\n      });\n    } else {\n      openUrl({ url, tabId, linkContext: { type: 'message', chatId: chat.id, messageId, threadId } });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = selectSharedSettings(global).language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserEmojiStatusPermission', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, isEnabled, isBotAccessEmojiGranted,\n  } = payload;\n\n  const bot = selectBot(global, botId);\n\n  if (!botId || !bot) {\n    return;\n  }\n\n  const result = await callApi('toggleUserEmojiStatusPermission', {\n    bot, isEnabled,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateUserFullInfo(global, botId, {\n    isBotCanManageEmojiStatus: isEnabled,\n    isBotAccessEmojiGranted,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('toggleUserLocationPermission', (global, actions, payload): ActionReturnType => {\n  const {\n    botId, isAccessGranted,\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  global = getGlobal();\n  global = updateBotAppPermissions(global, bot.id, { geolocation: isAccessGranted });\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n\naddActionHandler('loadBotFreezeAppeal', async (global): Promise<void> => {\n  const botUrl = global.appConfig.freezeAppealUrl;\n  if (!botUrl) return;\n  const botAppealUsername = botUrl ? getUsernameFromDeepLink(botUrl) : undefined;\n  if (!botAppealUsername) return;\n  const chat = await fetchChatByUsername(global, botAppealUsername);\n  global = getGlobal();\n  global = {\n    ...global,\n    botFreezeAppealId: chat?.id,\n  };\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, errorKey: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: email,\n  }, tabId);\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  global = updateTabState(global, {\n    recoveryEmail: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { errorKey: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type {\n  ApiInputInvoice, ApiInputInvoicePremiumGiftStars, ApiInputInvoiceStarGift, ApiInputInvoiceStarGiftResale,\n  ApiRequestInputInvoice,\n} from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type { RegularLangFnParameters } from '../../../util/localization';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL, STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n  getRequestInputSavedStarGift,\n} from '../../helpers/payments';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectIsCurrentUserFrozen,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, message, shouldHideName, shouldUpgrade, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    peerId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n    shouldUpgrade: shouldUpgrade || undefined,\n  };\n\n  payInputStarInvoice(global, inputInvoice, gift.stars, tabId);\n});\n\naddActionHandler('buyStarGift', (global, actions, payload): ActionReturnType => {\n  const {\n    slug, peerId, price, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoiceStarGiftResale = {\n    type: 'stargiftResale',\n    slug,\n    peerId,\n    currency: price.currency,\n  };\n\n  payInputStarInvoice(global, inputInvoice, price.amount, tabId);\n});\n\naddActionHandler('sendPremiumGiftByStars', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, months, amount, message, tabId = getCurrentTabId(),\n  } = payload;\n\n  const inputInvoice: ApiInputInvoicePremiumGiftStars = {\n    type: 'premiumGiftStars',\n    userId,\n    months,\n    message,\n  };\n\n  payInputStarInvoice(global, inputInvoice, amount, tabId);\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { directInfo, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || directInfo?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || directInfo?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: directInfo ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n    && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { descriptionKey: { key: 'ErrorUnexpected' } satisfies RegularLangFnParameters };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId, gift,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n      gift,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, selectedResaleGift, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forPeerId: forUserId,\n      gifts,\n      selectedResaleGift,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return;\n  }\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { messageKey: { key: 'ErrorUnexpected' }, field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { messageKey: result.messageKey, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = getServerTime();\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('upgradeGift', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, shouldKeepOriginalDetails, upgradeStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftUpgrade: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftUpgradeModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!upgradeStars) {\n    const result = await callApi('upgradeStarGift', {\n      inputSavedGift: requestSavedGift,\n      shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n    });\n\n    global = getGlobal();\n    if (result && global.currentUserId) {\n      actions.reloadPeerSavedGifts({ peerId: global.currentUserId });\n    }\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftUpgrade',\n    inputSavedGift: gift,\n    shouldKeepOriginalDetails: shouldKeepOriginalDetails || undefined,\n  };\n\n  payInputStarInvoice(global, invoice, upgradeStars, tabId);\n});\n\naddActionHandler('transferGift', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, recipientId, transferStars, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectChat(global, recipientId);\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n  if (!peer || !requestSavedGift) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isWaitingForStarGiftTransfer: true,\n  }, tabId);\n\n  setGlobal(global);\n  global = getGlobal();\n\n  actions.closeGiftTransferModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!transferStars) {\n    callApi('transferStarGift', {\n      inputSavedGift: requestSavedGift,\n      toPeer: peer,\n    });\n\n    return;\n  }\n\n  const invoice: ApiInputInvoice = {\n    type: 'stargiftTransfer',\n    inputSavedGift: gift,\n    recipientId,\n  };\n\n  payInputStarInvoice(global, invoice, transferStars, tabId);\n});\n\nasync function payInputStarInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice, price: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const actions = getActions();\n  const isTon = inputInvoice.type === 'stargiftResale' && inputInvoice.currency === TON_CURRENCY_CODE;\n  const balance = isTon ? global.ton?.balance : global.stars?.balance;\n  const currency = isTon ? TON_CURRENCY_CODE : STARS_CURRENCY_CODE;\n\n  if (balance === undefined) return;\n\n  if (balance.amount < price) {\n    actions.openStarsBalanceModal({ currency, tabId });\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    handlePaymentFormError(form.error, tabId);\n    return;\n  }\n\n  const formPrice = form.invoice.totalAmount;\n  if (formPrice !== price) {\n    actions.openPriceConfirmModal({\n      originalAmount: price,\n      newAmount: formPrice,\n      currency,\n      directInfo: {\n        inputInvoice,\n        formId: form.formId,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    directInfo: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n}\n\naddActionHandler('openUniqueGiftBySlug', async (global, actions, payload): Promise<void> => {\n  const {\n    slug, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gift = await callApi('fetchUniqueStarGift', { slug });\n\n  if (!gift) {\n    actions.showNotification({\n      message: {\n        key: 'GiftWasNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  actions.openGiftInfoModal({ gift, tabId });\n});\n\naddActionHandler('processStarGiftWithdrawal', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, password, tabId = getCurrentTabId(),\n  } = payload;\n\n  let giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  global = updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      isLoading: true,\n      errorKey: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const inputGift = getRequestInputSavedStarGift(global, gift);\n  if (!inputGift) {\n    return;\n  }\n\n  const result = await callApi('fetchStarGiftWithdrawalUrl', { inputGift, password });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  giftWithdrawModal = selectTabState(global, tabId).giftWithdrawModal;\n  if (!giftWithdrawModal) return;\n\n  if ('error' in result) {\n    global = updateTabState(global, {\n      giftWithdrawModal: {\n        ...giftWithdrawModal,\n        isLoading: false,\n        errorKey: result.messageKey,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.openUrl({ url: result.url, tabId });\n  actions.closeGiftWithdrawModal({ tabId });\n});\n\nfunction handlePaymentFormError(error: string, tabId: number) {\n  if (error === 'SLUG_INVALID') {\n    getActions().showNotification({\n      message: {\n        key: 'PaymentInvoiceNotFound',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  getActions().showDialog({ data: { message: error, hasErrorKey: true }, tabId });\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type { ApiSavedStarGift, ApiStarGiftUnique } from '../../../api/types';\nimport type { StarGiftCategory } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport {\n  DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n  STARS_CURRENCY_CODE,\n  TON_CURRENCY_CODE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { RESALE_GIFTS_LIMIT } from '../../../limits';\nimport { areInputSavedGiftsEqual, getRequestInputSavedStarGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  replacePeerSavedGifts,\n  updateChats,\n  updatePeerStarGiftCollections,\n  updateStarsBalance,\n  updateStarsSubscriptionLoading,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveGiftsCollectionId,\n  selectGiftProfileFilter,\n  selectPeer,\n  selectPeerSavedGifts,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStarsStatus = global.stars;\n  const needsTopupOptions = !currentStarsStatus?.topupOptions;\n\n  const [starsStatus, tonStatus, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    callApi('fetchStarsStatus', { isTon: true }),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!(starsStatus || tonStatus) || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (starsStatus && starsStatus.balance.currency === STARS_CURRENCY_CODE) {\n    global = {\n      ...global,\n      stars: {\n        ...currentStarsStatus,\n        balance: starsStatus.balance,\n        topupOptions: topupOptions || currentStarsStatus!.topupOptions,\n        history: {\n          all: undefined,\n          inbound: undefined,\n          outbound: undefined,\n        },\n        subscriptions: undefined,\n      },\n    };\n\n    if (starsStatus.history) {\n      global = appendStarsTransactions(global, 'all', starsStatus.history, starsStatus.nextHistoryOffset);\n    }\n\n    if (starsStatus.subscriptions) {\n      global = appendStarsSubscriptions(global, starsStatus.subscriptions, starsStatus.nextSubscriptionOffset);\n    }\n  }\n\n  if (tonStatus?.balance.currency === TON_CURRENCY_CODE) {\n    global = {\n      ...global,\n      ton: {\n        ...tonStatus,\n        balance: tonStatus.balance,\n        history: {\n          all: undefined,\n          inbound: undefined,\n          outbound: undefined,\n        },\n      },\n    };\n\n    global = updateStarsBalance(global, tonStatus.balance);\n\n    if (tonStatus.history) {\n      global = appendStarsTransactions(global, 'all', tonStatus.history, tonStatus.nextHistoryOffset, true);\n    }\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type, isTon } = payload;\n\n  const history = isTon ? global.ton?.history[type] : global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound',\n    isOutbound: type === 'outbound',\n    offset: offset || '',\n    isTon,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset, isTon);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const byId = buildCollectionByKey(result.gifts, 'id');\n\n  const idsByCategoryName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    stock: [],\n    limited: [],\n    resale: [],\n  };\n\n  const allStarGiftIds = Object.keys(byId);\n  const allStarGifts = Object.values(byId);\n\n  const limitedStarGiftIds = allStarGifts.map((gift) => (gift.isLimited ? gift.id : undefined))\n    .filter(Boolean);\n\n  const stockedStarGiftIds = allStarGifts.map((gift) => (\n    gift.availabilityRemains || !gift.availabilityTotal ? gift.id : undefined\n  )).filter(Boolean);\n\n  const resaleStarGiftIds = allStarGifts.map((gift) => (gift.availabilityResale ? gift.id : undefined))\n    .filter(Boolean);\n\n  idsByCategoryName.all = allStarGiftIds;\n  idsByCategoryName.limited = limitedStarGiftIds;\n  idsByCategoryName.stock = stockedStarGiftIds;\n  idsByCategoryName.resale = resaleStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!idsByCategoryName[starsCategory]) {\n      idsByCategoryName[starsCategory] = [];\n    }\n    idsByCategoryName[starsCategory].push(gift.id);\n  });\n\n  global = {\n    ...global,\n    starGifts: {\n      byId,\n      idsByCategory: idsByCategoryName,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('updateResaleGiftsFilter', (global, actions, payload): ActionReturnType => {\n  const {\n    filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      filter,\n    },\n  }, tabId);\n  if (tabState.resaleGifts.giftId) {\n    actions.loadResaleGifts({ giftId: tabState.resaleGifts.giftId, shouldRefresh: true, tabId });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadResaleGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  let tabState = selectTabState(global, tabId);\n  if (tabState.resaleGifts.isLoading || (tabState.resaleGifts.isAllLoaded && !shouldRefresh)) return;\n\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      isLoading: true,\n      ...(shouldRefresh && {\n        count: 0,\n        nextOffset: undefined,\n        isAllLoaded: false,\n      }),\n    },\n  }, tabId);\n  setGlobal(global);\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const nextOffset = tabState.resaleGifts.nextOffset;\n  const attributesHash = tabState.resaleGifts.attributesHash;\n  const filter = tabState.resaleGifts.filter;\n\n  const result = await callApi('fetchResaleGifts', {\n    giftId,\n    offset: nextOffset,\n    limit: RESALE_GIFTS_LIMIT,\n    attributesHash,\n    filter,\n  });\n\n  if (!result) {\n    return;\n  };\n\n  const {\n    chats,\n    users,\n  } = result;\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n\n  const currentGifts = tabState.resaleGifts.gifts;\n  const newGifts = !shouldRefresh ? currentGifts.concat(result.gifts) : result.gifts;\n  const currentUpdateIteration = tabState.resaleGifts.updateIteration;\n  const shouldUpdateIteration = tabState.resaleGifts.giftId !== giftId || shouldRefresh;\n  const updateIteration = shouldUpdateIteration ? currentUpdateIteration + 1 : currentUpdateIteration;\n  global = updateTabState(global, {\n    resaleGifts: {\n      ...tabState.resaleGifts,\n      giftId,\n      count: result.count || tabState.resaleGifts.count,\n      gifts: newGifts,\n      attributes: result.attributes || tabState.resaleGifts.attributes,\n      counters: result.counters || tabState.resaleGifts.counters,\n      attributesHash: result.attributesHash,\n      nextOffset: result.nextOffset,\n      isLoading: false,\n      isAllLoaded: !result.nextOffset,\n      updateIteration,\n    },\n  }, tabId);\n\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = updateChats(global, buildCollectionByKey(chats, 'id'));\n\n  setGlobal(global);\n});\n\naddActionHandler('resetResaleGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    resaleGifts: {\n      updateIteration: tabState.resaleGifts.updateIteration + 1,\n      filter: DEFAULT_RESALE_GIFTS_FILTER_OPTIONS,\n      count: 0,\n      gifts: [],\n    },\n  }, tabId);\n});\n\naddActionHandler('loadPeerSavedGifts', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, shouldRefresh, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  global = getGlobal();\n\n  const currentGifts = selectPeerSavedGifts(global, peerId, tabId);\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  const fetchingFilter = selectGiftProfileFilter(global, peerId, tabId);\n  const fetchingCollectionId = selectActiveGiftsCollectionId(global, peerId, tabId);\n\n  const result = await callApi('fetchSavedStarGifts', {\n    peer,\n    offset: !shouldRefresh ? localNextOffset : '',\n    filter: fetchingFilter,\n    collectionId: fetchingCollectionId === 'all' ? undefined : fetchingCollectionId,\n  });\n\n  global = getGlobal();\n  const currentFilter = selectGiftProfileFilter(global, peerId, tabId);\n  const currentCollectionId = selectActiveGiftsCollectionId(global, peerId, tabId);\n\n  if (!result || currentCollectionId !== fetchingCollectionId || currentFilter !== fetchingFilter) {\n    return;\n  }\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = replacePeerSavedGifts(global, peerId, newGifts, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reloadPeerSavedGifts', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n  } = payload;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  global = updateStarsSubscriptionLoading(global, true);\n  setGlobal(global);\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result || result.balance.currency !== STARS_CURRENCY_CODE) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisibility', async (global, actions, payload): Promise<void> => {\n  const { gift, shouldUnsave, tabId = getCurrentTabId() } = payload;\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const activeCollectionId = selectActiveGiftsCollectionId(global, peerId, tabId);\n  const oldGifts = selectTabState(global, tabId).savedGifts.collectionsByPeerId[peerId]?.[activeCollectionId];\n  if (oldGifts?.gifts?.length) {\n    const newGifts = oldGifts.gifts.map((g) => {\n      if (g.inputGift && areInputSavedGiftsEqual(g.inputGift, gift)) {\n        return {\n          ...g,\n          isUnsaved: shouldUnsave,\n        } satisfies ApiSavedStarGift;\n      }\n      return g;\n    });\n    global = replacePeerSavedGifts(global, peerId, newGifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('saveStarGift', {\n    inputGift: requestInputGift,\n    shouldUnsave,\n  });\n  global = getGlobal();\n\n  if (!result) {\n    global = replacePeerSavedGifts(global, peerId, oldGifts.gifts, oldGifts.nextOffset, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  // Reload gift list to avoid issues with pagination\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabId)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const requestInputGift = getRequestInputSavedStarGift(global, gift);\n  if (!requestInputGift) return;\n\n  const result = await callApi('convertStarGift', {\n    inputSavedGift: requestInputGift,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const peerId = gift.type === 'user' ? global.currentUserId! : gift.chatId;\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n  actions.openStarsBalanceModal({ tabId });\n});\n\naddActionHandler('openGiftUpgradeModal', async (global, actions, payload): Promise<void> => {\n  const {\n    giftId, gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const samples = await callApi('fetchStarGiftUpgradePreview', {\n    giftId,\n  });\n\n  if (!samples) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giftUpgradeModal: {\n      recipientId: peerId,\n      gift,\n      sampleAttributes: samples,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleSavedGiftPinned', async (global, actions, payload): Promise<void> => {\n  const { gift, peerId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const savedGifts = selectPeerSavedGifts(global, peerId, tabId);\n  if (!savedGifts) return;\n  const pinLimit = global.appConfig.savedGiftPinLimit;\n  const currentPinnedGifts = savedGifts.gifts.filter((g) => g.isPinned);\n  const newPinnedGifts = gift.isPinned\n    ? currentPinnedGifts.filter((g) => (g.gift as ApiStarGiftUnique).slug !== (gift.gift as ApiStarGiftUnique).slug)\n    : [...currentPinnedGifts, gift];\n\n  const trimmedPinnedGifts = pinLimit ? newPinnedGifts.slice(-pinLimit) : newPinnedGifts;\n\n  const inputSavedGifts = trimmedPinnedGifts.map((g) => getRequestInputSavedStarGift(global, g.inputGift!))\n    .filter(Boolean);\n\n  const result = await callApi('toggleSavedGiftPinned', {\n    inputSavedGifts,\n    peer,\n  });\n\n  if (!result) return;\n\n  Object.values(global.byTabId).forEach((tabState) => {\n    if (selectPeerSavedGifts(global, peerId, tabState.id)) {\n      actions.loadPeerSavedGifts({ peerId, shouldRefresh: true, tabId: tabState.id });\n    }\n  });\n});\n\naddActionHandler('updateStarGiftPrice', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, price,\n  } = payload;\n\n  const requestSavedGift = getRequestInputSavedStarGift(global, gift);\n\n  if (!requestSavedGift) {\n    return;\n  }\n\n  const result = await callApi('updateStarGiftPrice', {\n    inputSavedGift: requestSavedGift,\n    price,\n  });\n\n  if (!result) return;\n\n  actions.reloadPeerSavedGifts({ peerId: global.currentUserId! });\n});\n\naddActionHandler('loadStarGiftCollections', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    hash,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchStarGiftCollections', {\n    peer,\n    hash,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updatePeerStarGiftCollections(global, peerId, result.collections);\n  setGlobal(global);\n});\n","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions: ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n    * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, shouldIgnoreDefaultPrivacy = false, tabId = getCurrentTabId(),\n  } = payload;\n  const defaultPrivacy = global.settings.paidReactionPrivacy;\n  const isPrivate = !shouldIgnoreDefaultPrivacy ? defaultPrivacy?.type === 'anonymous' : payload.isPrivate;\n  const peerId = !shouldIgnoreDefaultPrivacy\n    ? (defaultPrivacy?.type === 'peer' ? defaultPrivacy.peerId : undefined) : payload.peerId;\n\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate, peerId);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n      peerId: paidReaction?.localPeerId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat, threadId: threadId === MAIN_THREAD_ID ? undefined : threadId });\n\n  if (threadId === MAIN_THREAD_ID) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactionsCount: undefined,\n      unreadReactions: undefined,\n    });\n  }\n\n  // TODO[Forums]: Support unread reactions in threads\n  return undefined;\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n  updateVerifyMonetizationModal,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeer,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n\n  if (stats.type === 'channel') {\n    const messageInteractions = stats.recentPosts.filter((post) => post.type === 'message');\n    const storyInteractions = stats.recentPosts.filter((post) => post.type === 'story');\n\n    if (messageInteractions.length > 0) {\n      actions.loadMessagesById({\n        chatId,\n        messageIds: messageInteractions.map((interaction) => interaction.msgId),\n      });\n    }\n\n    if (storyInteractions.length > 0) {\n      actions.loadPeerStoriesByIds({\n        peerId: chatId,\n        storyIds: storyInteractions.map((interaction) => interaction.storyId),\n      });\n    }\n  }\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  const chatFullInfo = selectChatFullInfo(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const dcId = chatFullInfo?.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { peer, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat((forwards || [])),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('processMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, currentPassword, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchMonetizationRevenueWithdrawalUrl', { peer, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateVerifyMonetizationModal(global, {\n    isLoading: false,\n    errorKey: 'error' in result ? result.messageKey : undefined,\n  }, tabId);\n  setGlobal(global);\n\n  if ('url' in result) {\n    actions.openUrl({\n      url: result.url,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n    actions.closeMonetizationVerificationModal({ tabId });\n  }\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectIsCurrentUserFrozen,\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\nimport { selectActiveStoriesCollectionId } from '../../selectors/stories';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      byPeerId: {\n        ...global.stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const selectedAlbumId = selectActiveStoriesCollectionId(global, tabId);\n  if (selectedAlbumId !== 'all') {\n    let albumData = peerStories?.idsByAlbumId?.[selectedAlbumId];\n    if (albumData?.isFullyLoaded) {\n      return;\n    }\n\n    const result = await callApi('fetchAlbumStories', {\n      peer,\n      albumId: selectedAlbumId,\n      offset: offsetId || 0,\n    });\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds, false, selectedAlbumId);\n    peerStories = selectPeerStories(global, peerId);\n\n    albumData = peerStories?.idsByAlbumId?.[selectedAlbumId];\n    if (Object.values(result.stories).length === 0\n      || (albumData?.ids?.length && albumData.ids.length >= result.count)) {\n      global = updatePeerStoriesFullyLoaded(global, peerId, true, false, selectedAlbumId);\n    }\n    setGlobal(global);\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.profileIds?.length && peerStories?.profileIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  if (selectIsCurrentUserFrozen(global)) return;\n\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  let peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n\n  peerStories = selectPeerStories(global, peerId);\n  if (Object.values(result.stories).length === 0\n    || (peerStories?.archiveIds?.length && peerStories?.archiveIds.length >= result.count)) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n    botsPrivacy: 'none',\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n\naddActionHandler('loadStoryAlbums', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const albums = await callApi('fetchAlbums', { peer });\n  if (!albums) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stories: {\n      ...global.stories,\n      albumsByPeerId: {\n        ...global.stories.albumsByPeerId,\n        [peerId]: albums,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('selectStoryAlbum', (global, actions, payload): ActionReturnType => {\n  const { peerId, albumId, tabId = getCurrentTabId() } = payload;\n\n  if (albumId && peerId) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, false);\n  }\n\n  global = updateTabState(global, {\n    selectedStoryAlbumId: albumId || undefined,\n  }, tabId);\n\n  setGlobal(global);\n\n  actions.loadPeerProfileStories({ peerId, tabId });\n});\n\naddActionHandler('loadAlbumStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, albumId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchAlbumStories', {\n    peer,\n    albumId,\n    offset: offsetId || 0,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('resetSelectedStoryAlbum', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    selectedStoryAlbumId: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  window.open(hashUrl, '_blank');\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiChatType } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getWebAppKey } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { updateSharedSettings } from '../../reducers';\nimport {\n  addWebAppToOpenList,\n  clearOpenedWebApps,\n  hasOpenedMoreThanOneWebApps,\n  hasOpenedWebApps,\n  removeActiveWebAppFromOpenList,\n  removeWebAppFromOpenList,\n  replaceIsWebAppModalOpen,\n  replaceWebAppModalState,\n  updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectActiveWebApp, selectCurrentMessageList, selectTabState, selectWebApp,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!webApp) return;\n\n  global = getGlobal();\n  global = addWebAppToOpenList(global, webApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    key, update, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, key, update, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('openMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      activeWebAppKey: undefined,\n      isMoreAppsTabActive: true,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeMoreAppsTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  const openedWebApps = tabState.webApps.openedWebApps;\n\n  const openedWebAppsKeys = Object.keys(openedWebApps);\n  const openedWebAppsCount = openedWebAppsKeys.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...tabState.webApps,\n      isMoreAppsTabActive: false,\n      activeWebAppKey: openedWebAppsCount ? openedWebAppsKeys[openedWebAppsCount - 1] : undefined,\n      isModalOpen: openedWebAppsCount > 0,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { key, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, key, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { shouldSkipConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  const shouldShowConfirmation = !shouldSkipConfirmation\n    && !selectSharedSettings(global).shouldSkipWebAppCloseConfirmation && hasOpenedMoreThanOneWebApps(global, tabId);\n\n  if (shouldShowConfirmation) {\n    actions.openWebAppsCloseConfirmationModal({ tabId });\n    return global;\n  }\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { state, tabId = getCurrentTabId() } = payload;\n\n  return replaceWebAppModalState(global, state, tabId);\n});\n\naddActionHandler('updateMiniAppCachedPosition', (global, actions, payload): ActionReturnType => {\n  const { position } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedPosition: position,\n  });\n  return global;\n});\n\naddActionHandler('updateMiniAppCachedSize', (global, actions, payload): ActionReturnType => {\n  const { size } = payload;\n\n  global = updateSharedSettings(global, {\n    miniAppsCachedSize: size,\n  });\n\n  return global;\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const activeWebApp = selectActiveWebApp(global, tabId);\n  if (!activeWebApp?.url) return undefined;\n\n  const key = getWebAppKey(activeWebApp);\n\n  return updateWebApp(global, key, { slug: payload.slug }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-expect-error -- No idea how to type this properly\n    actions[action]({\n      ...(callbackPayload),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendWebAppEvent', (global, actions, payload): ActionReturnType => {\n  const { event, webAppKey, tabId = getCurrentTabId() } = payload;\n  const webApp = selectWebApp(global, webAppKey, tabId);\n  if (!webApp) return global;\n\n  const newPlannedEvents = webApp.plannedEvents ? [...webApp.plannedEvents, event] : [event];\n\n  actions.updateWebApp({\n    key: webAppKey,\n    update: {\n      plannedEvents: newPlannedEvents,\n    },\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    emojiStatusAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeEmojiStatusAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    emojiStatusAccessModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, webAppKey, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!bot || !webAppKey) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    locationAccessModal: {\n      bot,\n      webAppKey,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeLocationAccessModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    locationAccessModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType, TabState } from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { updateTabState } from '../reducers/tabs';\nimport { addActionHandler, type TabStateActionNames } from '..';\n\nexport function addTabStateResetterAction<ActionName extends TabStateActionNames>(\n  name: ActionName, key: keyof TabState,\n) {\n  // @ts-ignore\n  addActionHandler(name, (global, actions, payload): ActionReturnType => {\n    const { tabId = getCurrentTabId() } = payload || {};\n\n    return updateTabState(global, {\n      [key]: undefined,\n    }, tabId);\n  });\n}\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { type ActiveDownloads, FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getTranslationFn } from '../../../util/localization';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageStatefulContent,\n  isChatChannel,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectCanForwardMessage,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { selectMessageDownloadableMedia } from '../../selectors/media';\nimport { getPeerStarsForMessage } from '../api/messages';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted, timestamp,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      timestamp,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, quoteOffset,\n    scrollTargetPosition, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: { key: 'ErrorFocusInaccessibleMessage' }, tabId });\n    return undefined;\n  }\n\n  const onMessageReady = timestamp\n    ? () => actions.openMediaFromTimestamp({\n      chatId, threadId, messageId, timestamp, tabId,\n    }) : undefined;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    quoteOffset,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    onMessageReady?.();\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n    onLoaded: onMessageReady,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, quoteOffset, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n      quoteOffset,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  const forwardableMessageIds = messageIds.filter((id) => {\n    const message = selectChatMessage(global, fromChatId, id);\n    return message && selectCanForwardMessage(global, message);\n  });\n\n  if (!forwardableMessageIds.length) {\n    return;\n  }\n\n  actions.openForwardMenu({ fromChatId, messageIds: forwardableMessageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = selectMessageDownloadableMedia(global, message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      message: {\n        key: IS_TOUCH_ENV ? 'ContextMenuHintTouch' : 'ContextMenuHintMouse',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openTodoListModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, forNewTask, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    todoListModal: {\n      chatId,\n      messageId,\n      forNewTask,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeTodoListModal', 'todoListModal');\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSuggestMessageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    suggestMessageModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSuggestMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    suggestMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSuggestedPostApprovalModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    suggestedPostApprovalModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSuggestedPostApprovalModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    suggestedPostApprovalModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = getTranslationFn();\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getPeerTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, isSchedule,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      chatId,\n      messageIds,\n      isSchedule,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const {\n    randomId, additionalInfo, canReport, sponsorInfo, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: {\n      randomId,\n      canReport,\n      additionalInfo,\n      sponsorInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAboutAdsModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    aboutAdsModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closePreparedInlineMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    preparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeSharePreparedMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    sharePreparedMessageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateSharePreparedMessageModalSendArgs', async (global, actions, payload): Promise<void> => {\n  const { args, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.sharePreparedMessageModal) {\n    return;\n  }\n\n  if (!args) {\n    global = updateTabState(global, {\n      sharePreparedMessageModal: {\n        ...tabState.sharePreparedMessageModal,\n        pendingSendArgs: undefined,\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const starsForSendMessage = await getPeerStarsForMessage(global, args.peerId);\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    sharePreparedMessageModal: {\n      ...tabState.sharePreparedMessageModal,\n      pendingSendArgs: {\n        peerId: args.peerId,\n        threadId: args.threadId,\n        starsForSendMessage,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n","import type { ApiMessage } from '../../api/types';\n\nimport { type LangFn } from '../../util/localization';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = (renderMessageText({ message, shouldRenderAsHtml: true }) as string[])?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true) as string;\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query\n    && currentContent !== GlobalSearchContent.BotApps && currentContent !== GlobalSearchContent.PublicPosts\n    ? { chats: !chatId, messages: true } : undefined;\n\n  actions.checkSearchPostsFlood({ query, tabId });\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../..';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeFrozenAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isFrozenAccountModalOpen: false,\n  }, tabId);\n});\n\naddActionHandler('openDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { days, tabId = getCurrentTabId() } = payload || {};\n  if (!days) return;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    deleteAccountModal: {\n      selfDestructAccountDays: days,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteAccountModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteAccountModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openAgeVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isAgeVerificationModalOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeAgeVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isAgeVerificationModalOpen: false,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserFrozen } from '../../selectors';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload;\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n\naddActionHandler('closeSuggestedStatusModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    suggestedStatusModal: undefined,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeChatRefundModal', 'chatRefundModal');\n\naddActionHandler('openProfileRatingModal', (global, actions, payload): ActionReturnType => {\n  const { userId, level, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    profileRatingModal: {\n      userId,\n      level,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeProfileRatingModal', 'profileRatingModal');\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { IS_TAURI } from './browser/globalEnvironment';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport async function setPageTitleInstant(nextTitle: string) {\n  if (IS_TAURI) {\n    await window.tauri?.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n  PAGE_TITLE_TAURI,\n} from '../../../config';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectPeerPaidMessagesStars,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\nimport { selectSharedSettings } from '../../selectors/sharedState';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentMessage: undefined,\n      currentStoryId: undefined,\n      currentStory: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n      currentMessage: undefined,\n      currentStory: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageListType, tabId = getCurrentTabId() } = payload;\n\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n\n  if (paidMessagesStars && messageListType === 'scheduled') {\n    actions.showNotification({\n      message: {\n        key: 'DescriptionScheduledPaidMessagesNotAllowed',\n      },\n      tabId,\n    });\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n  const isChatWithBot = chatId ? selectIsChatWithBot(global, chat) : undefined;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot, isSavedMessages);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  return {\n    ...global,\n    attachmentSettings: {\n      ...global.attachmentSettings,\n      ...payload,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setPaidMessageAutoApprove', (global): ActionReturnType => {\n  global = {\n    ...global,\n    settings: {\n      ...global.settings,\n      byKey: {\n        ...global.settings.byKey,\n        shouldPaidMessageAutoApprove: true,\n      },\n    },\n  };\n\n  return global;\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = selectSharedSettings(global);\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  const defaultTitle = IS_TAURI ? PAGE_TITLE_TAURI : PAGE_TITLE;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${defaultTitle} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  // Show blinking title in browser tab\n  if (!IS_TAURI && global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(`${prefix}${defaultTitle}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig;\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline({ isOnline: newBlurredTabsCount !== getAllMultitabTokens().length });\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ApiSavedGifts } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { DEFAULT_GIFT_PROFILE_FILTER_OPTIONS } from '../../../config';\nimport { selectActiveGiftsCollectionId } from '../../../global/selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { filter, peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const prevFilter = tabState.savedGifts.filter;\n  let updatedFilter = {\n    ...prevFilter,\n    ...filter,\n  };\n\n  if (!updatedFilter.shouldIncludeUnlimited\n    && !updatedFilter.shouldIncludeLimited\n    && !updatedFilter.shouldIncludeUnique\n    && !updatedFilter.shouldIncludeUpgradable) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeUnlimited: true,\n      shouldIncludeLimited: true,\n      shouldIncludeUnique: true,\n      shouldIncludeUpgradable: true,\n      ...filter,\n    };\n  }\n\n  if (!updatedFilter.shouldIncludeDisplayed && !updatedFilter.shouldIncludeHidden) {\n    updatedFilter = {\n      ...prevFilter,\n      shouldIncludeDisplayed: true,\n      shouldIncludeHidden: true,\n      ...filter,\n    };\n  }\n\n  const activeCollectionId = selectActiveGiftsCollectionId(global, peerId, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      collectionsByPeerId: {\n        [peerId]: {\n          [activeCollectionId]: tabState.savedGifts.collectionsByPeerId[peerId]?.[activeCollectionId],\n        } as Record<number | 'all', ApiSavedGifts>,\n      },\n      filter: updatedFilter,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetGiftProfileFilter', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const activeCollectionId = selectActiveGiftsCollectionId(global, peerId, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      collectionsByPeerId: {\n        [peerId]: {\n          [activeCollectionId]: tabState.savedGifts.collectionsByPeerId[peerId]?.[activeCollectionId],\n        } as Record<number | 'all', ApiSavedGifts>,\n      },\n      filter: {\n        ...DEFAULT_GIFT_PROFILE_FILTER_OPTIONS,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('openPaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closePaymentMessageConfirmDialogOpen', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isPaymentMessageConfirmDialogOpen: false,\n  }, tabId);\n});\n\naddActionHandler('openPriceConfirmModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originalAmount,\n    newAmount,\n    currency,\n    directInfo,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    priceConfirmModal: {\n      originalAmount,\n      newAmount,\n      currency,\n      directInfo,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePriceConfirmModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    priceConfirmModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin, MediaViewerOrigin } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { getMessageReplyInfo } from '../../helpers/replies';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectReplyMessage, selectTabState } from '../../selectors';\nimport { selectTimestampableMedia } from '../../selectors/media';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, timestamp, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n      timestamp,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('openMediaFromTimestamp', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, threadId, timestamp, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const replyInfo = getMessageReplyInfo(message);\n  const replyMessage = selectReplyMessage(global, message);\n\n  const messageMedia = selectTimestampableMedia(global, message);\n  const maxMessageDuration = messageMedia?.duration;\n  if (maxMessageDuration) {\n    if (maxMessageDuration <= timestamp) return;\n\n    if (messageMedia.mediaType === 'video') {\n      actions.openMediaViewer({\n        chatId,\n        messageId,\n        threadId,\n        origin: MediaViewerOrigin.Inline,\n        timestamp,\n        tabId,\n      });\n      return;\n    }\n\n    actions.openAudioPlayer({\n      chatId,\n      messageId,\n      threadId,\n      origin: AudioOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  const replyMessageMedia = replyMessage ? selectTimestampableMedia(global, replyMessage) : undefined;\n  const maxReplyMessageDuration = replyMessageMedia?.duration;\n  if (!maxReplyMessageDuration || maxReplyMessageDuration <= timestamp) return;\n\n  if (replyMessageMedia.mediaType === 'video') {\n    actions.openMediaViewer({\n      chatId: replyMessage!.chatId,\n      messageId: replyMessage!.id,\n      threadId: replyInfo?.replyToTopId,\n      origin: MediaViewerOrigin.Inline,\n      timestamp,\n      tabId,\n    });\n    return;\n  }\n\n  actions.openAudioPlayer({\n    chatId: replyMessage!.chatId,\n    messageId: replyMessage!.id,\n    threadId: replyInfo?.replyToTopId,\n    origin: AudioOrigin.Inline,\n    timestamp,\n    tabId,\n  });\n});\n\naddActionHandler('updateLastPlaybackTimestamp', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, timestamp } = payload;\n\n  const currentChatPlaybacks = global.messages.playbackByChatId[chatId]?.byId || {};\n\n  if (!timestamp) {\n    return {\n      ...global,\n      messages: {\n        ...global.messages,\n        playbackByChatId: {\n          ...global.messages.playbackByChatId,\n          [chatId]: {\n            byId: omit(currentChatPlaybacks, [messageId]),\n          },\n        },\n      },\n    };\n  }\n\n  return {\n    ...global,\n    messages: {\n      ...global.messages,\n      playbackByChatId: {\n        ...global.messages.playbackByChatId,\n        [chatId]: {\n          byId: {\n            ...currentChatPlaybacks,\n            [messageId]: timestamp,\n          },\n        },\n      },\n    },\n  };\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SCREEN_LOCKED_CACHE_KEY } from '../../../config';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  localStorage.removeItem(IS_SCREEN_LOCKED_CACHE_KEY);\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import { getPromiseActions } from '../../../global';\n\nimport type { ApiInputSavedStarGift, ApiSavedStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { selectChat } from '../../../global/selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addTabStateResetterAction } from '../../helpers/meta';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChatMessage, selectIsCurrentUserFrozen, selectStarsPayment, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (selectIsCurrentUserFrozen(global)) {\n    actions.openFrozenAccountModal({ tabId });\n    return global;\n  }\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftRecipientPicker', 'isGiftRecipientPickerOpen');\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsGiftingPickerModal', 'starsGiftingPickerModal');\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    currency = STARS_CURRENCY_CODE,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance.amount) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n      currency,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsBalanceModal', 'starsBalanceModal');\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddTabStateResetterAction('closeStarsTransactionModal', 'starsTransactionModal');\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeStarsSubscriptionModal', 'starsSubscriptionModal');\n\naddTabStateResetterAction('closeGiftModal', 'giftModal');\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await getPromiseActions().loadMessage({ chatId, messageId });\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift' && action.type !== 'starGiftUnique') return;\n\n  const starGift = action.type === 'starGift' ? action : undefined;\n  const uniqueGift = action.type === 'starGiftUnique' ? action : undefined;\n\n  const giftReceiverId = action.peerId || (message.isOutgoing ? message.chatId : global.currentUserId!);\n\n  const inputGift: ApiInputSavedStarGift = action.savedId\n    ? { type: 'chat', chatId, savedId: action.savedId }\n    : { type: 'user', messageId };\n\n  const fromId = action.fromId || (message.isOutgoing ? global.currentUserId! : message.chatId);\n\n  const gift: ApiSavedStarGift = {\n    date: message.date,\n    gift: action.gift,\n    message: starGift?.message,\n    starsToConvert: starGift?.starsToConvert,\n    isNameHidden: starGift?.isNameHidden,\n    isUnsaved: !action.isSaved,\n    fromId,\n    messageId: message.id,\n    isConverted: starGift?.isConverted,\n    upgradeMsgId: starGift?.upgradeMsgId,\n    canUpgrade: starGift?.canUpgrade,\n    alreadyPaidUpgradeStars: starGift?.alreadyPaidUpgradeStars,\n    inputGift,\n    canExportAt: uniqueGift?.canExportAt,\n    savedId: action.savedId,\n    transferStars: uniqueGift?.transferStars,\n  };\n\n  actions.openGiftInfoModal({ peerId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peerId = 'peerId' in payload ? payload.peerId : undefined;\n  const recipientId = 'recipientId' in payload ? payload.recipientId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      peerId,\n      gift,\n      recipientId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftResalePriceComposerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, peerId, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    giftResalePriceComposerModal: {\n      peerId,\n      gift,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftInMarket', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const giftModal = selectTabState(global, tabId).giftModal;\n\n  actions.closeGiftInfoValueModal({ tabId });\n  actions.closeGiftInfoModal({ tabId });\n\n  if (giftModal) {\n    return updateTabState(global, {\n      giftModal: {\n        ...giftModal,\n        selectedResaleGift: gift,\n      },\n    }, tabId);\n  }\n\n  actions.openGiftModal({\n    forUserId: global.currentUserId!,\n    selectedResaleGift: gift,\n    tabId,\n  });\n\n  return global;\n});\n\naddActionHandler('closeResaleGiftsMarket', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  actions.resetResaleGifts({ tabId });\n\n  const giftModal = selectTabState(global, tabId).giftModal;\n\n  if (giftModal) {\n    return updateTabState(global, {\n      giftModal: {\n        ...giftModal,\n        selectedResaleGift: undefined,\n      },\n    }, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftInfoValueModal', async (global, actions, payload): Promise<void> => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('fetchUniqueStarGiftValueInfo', { slug: gift.slug });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftInfoValueModal: {\n      valueInfo: result,\n      gift,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddTabStateResetterAction('closeGiftInfoModal', 'giftInfoModal');\n\naddTabStateResetterAction('closeGiftInfoValueModal', 'giftInfoValueModal');\n\naddTabStateResetterAction('closeGiftResalePriceComposerModal', 'giftResalePriceComposerModal');\n\naddTabStateResetterAction('closeGiftUpgradeModal', 'giftUpgradeModal');\n\naddActionHandler('openGiftWithdrawModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftWithdrawModal', 'giftWithdrawModal');\n\naddActionHandler('openGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: {\n      emojiStatus,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftStatusInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftStatusInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearGiftWithdrawError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const giftWithdrawModal = tabState?.giftWithdrawModal;\n  if (!giftWithdrawModal) return undefined;\n\n  return updateTabState(global, {\n    giftWithdrawModal: {\n      ...giftWithdrawModal,\n      errorKey: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('openGiftTransferModal', (global, actions, payload): ActionReturnType => {\n  const { gift, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    giftTransferModal: {\n      gift,\n    },\n  }, tabId);\n});\n\naddTabStateResetterAction('closeGiftTransferModal', 'giftTransferModal');\n\naddActionHandler('updateSelectedGiftCollection', (global, actions, payload): ActionReturnType => {\n  const { peerId, collectionId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      activeCollectionByPeerId: {\n        ...tabState.savedGifts.activeCollectionByPeerId,\n        [peerId]: collectionId,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n\naddActionHandler('resetSelectedGiftCollection', (global, actions, payload): ActionReturnType => {\n  const { peerId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  global = updateTabState(global, {\n    savedGifts: {\n      ...tabState.savedGifts,\n      activeCollectionByPeerId: {\n        ...tabState.savedGifts.activeCollectionByPeerId,\n        [peerId]: undefined,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.loadPeerSavedGifts({\n    peerId, shouldRefresh: true, tabId: tabState.id,\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\nimport { getPeerStarsForMessage } from '../api/messages';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerId: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n  const messagePriceInStars = await getPeerStarsForMessage(global, storyPeerId!);\n  if (messagePriceInStars === undefined) return;\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../..';\nimport { updateVerifyMonetizationModal } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('openMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), chatId } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationVerificationModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationVerificationModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('clearMonetizationVerificationError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateVerifyMonetizationModal(global, { errorKey: undefined }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiChat, ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatListIds,\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\nconst INVALIDATE_FULL_CHAT_FIELDS = new Set<keyof ApiChat>([\n  'boostLevel', 'isForum', 'isLinkedInDiscussion', 'fakeType', 'restrictionReasons', 'isJoinToSend', 'isJoinRequest',\n  'type',\n]);\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)\n        && !updatedChat?.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      if (localChat) {\n        const chatUpdate = update.chat;\n        const changedFields = (Object.keys(chatUpdate) as (keyof ApiChat)[])\n          .filter((key) => localChat[key] !== chatUpdate[key]);\n        if (changedFields.some((key) => INVALIDATE_FULL_CHAT_FIELDS.has(key))) {\n          actions.invalidateFullInfo({ peerId: update.id });\n        }\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = addChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      const isOur = message.senderId ? message.senderId === global.currentUserId : message.isOutgoing;\n      if (isOur && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const isLocal = isLocalMessageId(message.id!);\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      if (!isLocal || chat.id === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = updateChat(global, update.chatId, {\n          unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        });\n\n        if (hasMention) {\n          global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n        }\n\n        const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n        if (topic) {\n          global = updateTopic(global, update.chatId, topic.id, {\n            unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n          && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n      if (!ids) {\n        actions.loadPinnedDialogs({ listType });\n        return global;\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updateChat,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  let global = getGlobal();\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      global = updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n      global = updateChat(global, update.userId, { emojiStatus: update.emojiStatus });\n      return global;\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n\n    case 'updateBotCommands': {\n      const { botId, commands } = update;\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          commands,\n        },\n      });\n    }\n\n    case 'updatePeerSettings': {\n      const { id, settings } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, id);\n      if (!targetUserFullInfo?.botInfo) {\n        actions.loadFullUser({ userId: id });\n        return undefined;\n      }\n\n      global = updateUserFullInfo(global, id, {\n        settings,\n      });\n      return global;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { applyLangPackDifference, getTranslationFn, requestLangPackDifference } from '../../../util/localization';\nimport { getPeerTitle } from '../../helpers/peers';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  replaceWebPage,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateFullWebPage,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls, webPages,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      if (webPages) {\n        webPages.forEach((webPage) => {\n          if (webPage.webpageType === 'full') {\n            global = updateFullWebPage(global, webPage.id, webPage);\n          } else {\n            global = replaceWebPage(global, webPage.id, webPage);\n          }\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder?.some((id) => id === update.id)) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        Object.entries(tabState.webApps.openedWebApps).forEach(([webAppKey, webApp]) => {\n          if (webApp.queryId === update.queryId) {\n            actions.resetDraftReplyInfo({ tabId: tabState.id });\n            actions.closeWebApp({ key: webAppKey, tabId: tabState.id });\n          }\n        });\n      });\n      break;\n\n    case 'updateWebPage': {\n      const { webPage } = update;\n      if (webPage.webpageType === 'full') {\n        global = updateFullWebPage(global, webPage.id, webPage);\n      } else {\n        global = replaceWebPage(global, webPage.id, webPage);\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.private,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateLangPackTooLong': {\n      requestLangPackDifference(update.langCode);\n      break;\n    }\n\n    case 'updateLangPack': {\n      applyLangPackDifference(update.version, update.strings, update.keysToRemove);\n      break;\n    }\n\n    case 'newMessage': {\n      const action = update.message.content?.action;\n      if (!update.message.isOutgoing && update.message.chatId !== SERVICE_NOTIFICATIONS_USER_ID) return undefined;\n      if (action?.type !== 'starGiftUnique') return undefined;\n      const actionStarGift = action.gift;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        if (tabState.isWaitingForStarGiftUpgrade) {\n          actions.openUniqueGiftBySlug({\n            slug: actionStarGift.slug,\n            tabId,\n          });\n\n          actions.showNotification({\n            title: { key: 'GiftUpgradedTitle' },\n            message: { key: 'GiftUpgradedDescription' },\n            tabId,\n          });\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftUpgrade: undefined,\n          }, tabId);\n        }\n\n        if (tabState.isWaitingForStarGiftTransfer) {\n          const chatId = update.message.chatId;\n          const receiver = chatId ? selectPeer(global, chatId) : undefined;\n          if (receiver) {\n            actions.focusMessage({\n              chatId: receiver.id,\n              messageId: update.message.id!,\n              tabId,\n            });\n\n            actions.showNotification({\n              message: {\n                key: 'GiftTransferSuccessMessage',\n                variables: {\n                  gift: {\n                    key: 'GiftUnique',\n                    variables: {\n                      title: actionStarGift.title,\n                      number: actionStarGift.number,\n                    },\n                  },\n                  peer: getPeerTitle(getTranslationFn(), receiver),\n                },\n              },\n              tabId,\n            });\n          }\n\n          actions.requestConfetti({ withStars: true, tabId });\n\n          global = updateTabState(global, {\n            isWaitingForStarGiftTransfer: undefined,\n          }, tabId);\n        }\n      });\n\n      setGlobal(global);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException,\n  updateNotifyDefaults,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateDefaultNotifySettings': {\n      return updateNotifyDefaults(global, update.peerType, update.settings);\n    }\n\n    case 'updateChatNotifySettings': {\n      const {\n        chatId, settings,\n      } = update;\n\n      global = addNotifyException(global, chatId, settings);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifySettings': {\n      const {\n        chatId, topicId, settings,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { notifySettings: settings });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          errorKey: update.messageKey,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { ARE_CALLS_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          const user = selectPhoneCallUser(global);\n          if (!user) return;\n          notifyAboutCall({\n            call,\n            user,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n      const inputInvoice = paymentState.inputInvoice;\n      if (inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else if (inputInvoice?.type === 'giftcode') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice?.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'GiftSent',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo, form } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (form?.invoice.subscriptionPeriod) {\n        const amount = form.invoice.totalAmount;\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            form.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'premiumGiftStars') {\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userId === giftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'stargift') {\n        if (!inputInvoice.peerId) {\n          return;\n        }\n\n        const starGiftModalState = selectTabState(global, tabId).giftModal;\n\n        if (starGiftModalState && inputInvoice.peerId === starGiftModalState.forPeerId) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftCompleted',\n            },\n            tabId,\n          });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'stargiftResale') {\n        const starGiftModalState = selectTabState(global, tabId).giftInfoModal;\n\n        if (starGiftModalState) {\n          actions.showNotification({\n            message: {\n              key: 'StarsGiftBought',\n            },\n            tabId,\n          });\n          if (starGiftModalState.peerId) {\n            actions.reloadPeerSavedGifts({ peerId: starGiftModalState.peerId });\n          }\n          actions.reloadPeerSavedGifts({ peerId: inputInvoice.peerId });\n          actions.requestConfetti({ withStars: true, tabId });\n          actions.closeGiftInfoModal({ tabId });\n        }\n      }\n\n      if (inputInvoice?.type === 'stargiftUpgrade' && global.currentUserId) {\n        actions.reloadPeerSavedGifts({ peerId: global.currentUserId });\n      }\n\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(lang, unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n  isAccountFrozen?: boolean;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n  isAccountFrozen,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const { openFrozenAccountModal } = getActions();\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen, isAccountFrozen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <Icon name=\"new-chat-filled\" />\n        <Icon name=\"close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '@teact';\nimport { memo, useEffect, useMemo, useRef } from '@teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { AnimationLevel } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectIsCurrentUserFrozen, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport {\n  useFolderManagerForUnreadChatsByFolder,\n  useFolderManagerForUnreadCounters,\n} from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  foldersDispatch: FolderEditDispatch;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n  isAccountFrozen?: boolean;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n  isAccountFrozen,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n    markChatMessagesRead,\n    openSettingsScreen,\n  } = getActions();\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const scrollToTop = useLastCallback(() => {\n    const activeList = ref.current?.querySelector<HTMLElement>('.chat-list.Transition_slide-active');\n    activeList?.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n  });\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: { text: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats') },\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderUnreadChatsCountersById = useFolderManagerForUnreadChatsByFolder();\n  const handleReadAllChats = useLastCallback((folderId: number) => {\n    const unreadChatIds = folderUnreadChatsCountersById[folderId];\n    if (!unreadChatIds?.length) return;\n\n    unreadChatIds.forEach((chatId) => {\n      markChatMessagesRead({ id: chatId });\n    });\n  });\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('FilterShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id === ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEditFolders'),\n          icon: 'edit',\n          handler: () => {\n            openSettingsScreen({ screen: SettingsScreens.Folders });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n      } else {\n        contextActions.push({\n          title: lang('EditFolder'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        if (folderUnreadChatsCountersById[id]?.length) {\n          contextActions.push({\n            title: lang('ChatListMarkAllAsRead'),\n            icon: 'readchats',\n            handler: () => handleReadAllChats(folder.id),\n          });\n        }\n\n        contextActions.push({\n          title: lang('FilterMenuDelete'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title: renderTextWithEntities({\n          text: title.text,\n          entities: title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }),\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites, folderUnreadChatsCountersById, openSettingsScreen,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n    if (activeChatFolder === index) {\n      scrollToTop();\n    }\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        isMainList\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n        isAccountFrozen={isAccountFrozen}\n        withTags\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={resolveTransitionName('slideOptimized', animationLevel, shouldSkipHistoryAnimations, lang.isRtl)}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { animationLevel } = selectSharedSettings(global);\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n      isAccountFrozen,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { OldLangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: OldLangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport { getCurrentMaxAccountCount, getCurrentProdAccountCount } from '../../../global/helpers';\nimport { getAccountSlotUrl } from '../../../util/multiaccount';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMultiaccountInfo from '../../../hooks/useMultiaccountInfo';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\ntype OwnProps = {\n  currentUser: ApiUser;\n  totalLimit: number;\n  onSelectCurrent?: VoidFunction;\n};\n\nconst NOTIFICATION_DURATION = 7000;\n\nconst AccountMenuItems = ({\n  currentUser,\n  totalLimit,\n  onSelectCurrent,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const accounts = useMultiaccountInfo(currentUser);\n\n  const currentCount = getCurrentProdAccountCount();\n  const maxCount = getCurrentMaxAccountCount();\n\n  const currentAccountInfo = useMemo(() => {\n    return Object.values(accounts).find((account) => account.userId === currentUser.id);\n  }, [accounts, currentUser.id]);\n\n  const shouldShowLimit = currentCount >= maxCount;\n\n  const handleLimitClick = useLastCallback(() => {\n    showNotification({\n      title: lang('PremiumLimitAccountsTitle'),\n      message: currentUser.isPremium ? lang('PremiumLimitAccounts') : lang('PremiumLimitAccountsNoPremium'),\n      duration: NOTIFICATION_DURATION,\n    });\n  });\n\n  const newAccountUrl = useMemo(() => {\n    if (!Object.values(accounts).length) {\n      return undefined;\n    }\n\n    if (currentCount === totalLimit) {\n      return undefined;\n    }\n\n    let freeIndex = 1;\n    while (accounts[freeIndex]) {\n      freeIndex += 1;\n    }\n\n    return getAccountSlotUrl(freeIndex, true);\n  }, [accounts, currentCount, totalLimit]);\n\n  return (\n    <>\n      {Object.entries(accounts || {})\n        .sort(([, account]) => (account.userId === currentUser.id ? -1 : 1))\n        .map(([slot, account], index, arr) => {\n          const isSameServer = account.isTest === currentAccountInfo?.isTest;\n          const mockUser: CustomPeer = {\n            title: [account.firstName, account.lastName].filter(Boolean).join(' '),\n            isCustomPeer: true,\n            peerColorId: account.color,\n            emojiStatusId: isSameServer ? account.emojiStatusId : undefined,\n            isPremium: account.isPremium,\n          };\n\n          const hasSeparator = account.userId === currentUser.id && (newAccountUrl || arr.length > 1);\n\n          return (\n            <>\n              <MenuItem\n                className=\"account-menu-item\"\n                customIcon={(\n                  <Avatar\n                    size=\"mini\"\n                    className=\"account-avatar\"\n                    peer={mockUser}\n                    previewUrl={account.avatarUri}\n                  />\n                )}\n                onClick={account.userId === currentUser.id ? onSelectCurrent : undefined}\n                href={account.userId !== currentUser.id ? getAccountSlotUrl(Number(slot)) : undefined}\n              >\n                {account.isTest && <span className=\"account-menu-item-test\">T</span>}\n                <FullNameTitle peer={mockUser} withEmojiStatus emojiStatusSize={REM} />\n              </MenuItem>\n              {hasSeparator && <MenuSeparator />}\n            </>\n          );\n        })}\n      {newAccountUrl && (\n        <MenuItem\n          icon=\"add\"\n          rel=\"noopener\" // Allow referrer to be passed\n          href={!shouldShowLimit ? newAccountUrl : undefined}\n          onClick={shouldShowLimit ? handleLimitClick : undefined}\n        >\n          {lang('MenuAddAccount')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(AccountMenuItems);\n","import type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MED,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme, selectUser } from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_MULTIACCOUNT_SUPPORTED } from '../../../util/browser/globalEnvironment';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\nimport AccountMenuItems from './AccountMenuItems';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  currentUser?: ApiUser;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  accountsTotalLimit: number;\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  currentUser,\n  accountsTotalLimit,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSharedSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_TAURI && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectMyProfile = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MED);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel, wasAnimationLevelSetManually: true });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener,noreferrer');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: lang('TelegramFeaturesUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  return (\n    <>\n      {IS_MULTIACCOUNT_SUPPORTED && currentUser && (\n        <>\n          <AccountMenuItems\n            currentUser={currentUser}\n            totalLimit={accountsTotalLimit}\n            onSelectCurrent={onSelectSettings}\n          />\n          <MenuSeparator />\n        </>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={handleSelectMyProfile}\n      >\n        {lang('MenuMyProfile')}\n      </MenuItem>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('MenuSavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('MenuArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"group\"\n        onClick={onSelectContacts}\n      >\n        {lang('MenuContacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('MenuSettings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('MenuNightMode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'AriaMenuDisableNightMode' : 'AriaMenuEnableNightMode')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('MenuAnimationsSwitch')}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('MenuTelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = selectSharedSettings(global);\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      currentUser: selectUser(global, currentUserId!),\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n      accountsTotalLimit: selectPremiumLimit(global, 'moreAccounts'),\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusCollectible, ApiEmojiStatusType, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectIsCurrentUserFrozen, selectUser } from '../../../global/selectors';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatusType;\n  collectibleStatuses?: ApiEmojiStatusType[];\n  isAccountFrozen?: boolean;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus, collectibleStatuses, isAccountFrozen }) => {\n  const { setEmojiStatus, loadCurrentUser, openFrozenAccountModal } = getActions();\n\n  const buttonRef = useRef<HTMLButtonElement>();\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? (emojiStatus.until - getServerTime()) * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && emojiStatus.documentId !== prevEmojiStatus?.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    const collectibleStatus = collectibleStatuses?.find(\n      (status) => 'collectibleId' in status && status.documentId === sticker.id,\n    ) as ApiEmojiStatusCollectible | undefined;\n    markShouldShowEffect();\n    setEmojiStatus({\n      emojiStatus: collectibleStatus || { type: 'regular', documentId: sticker.id },\n    });\n  }, [markShouldShowEffect, setEmojiStatus, collectibleStatuses]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      return;\n    }\n    openStatusPicker();\n  }, [openStatusPicker, isAccountFrozen]);\n\n  return (\n    <div className=\"StatusButton extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n            withSparkles={emojiStatus?.type === 'collectible'}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): Complete<StateProps> => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n  const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n    collectibleStatuses,\n    isAccountFrozen,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { IS_APP, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ThemeKey;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized?: boolean;\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSharedSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    openSettingsScreen,\n    searchMessagesGlobal,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const areContactsVisible = content === LeftColumnContent.Contacts;\n  const hasMenu = content === LeftColumnContent.ChatList;\n\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSharedSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const handleSearchEnter = useLastCallback(() => {\n    if (searchQuery && content === LeftColumnContent.GlobalSearch) {\n      searchMessagesGlobal({\n        type: 'publicPosts',\n        shouldResetResultsByType: true,\n      });\n    }\n  });\n\n  const isSearchRelevant = Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts;\n\n  const isSearchFocused = isMobile ? !isMessageListOpen && isSearchRelevant : isSearchRelevant;\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const withStoryToggler = !isSearchFocused && !selectedSearchDate && !globalSearchChatId && !areContactsVisible;\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PeerChip\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item\"\n            onClick={setGlobalSearchDate}\n            isCloseNonDestructive\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PeerChip\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  const version = useMemo(() => {\n    let fullVersion = '';\n    if (IS_TAURI && window.tauri.version) {\n      fullVersion = `Tauri ${window.tauri.version} | `;\n    }\n\n    fullVersion += `${APP_NAME} ${versionString}`;\n\n    return fullVersion;\n  }, [versionString]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div\n        id=\"LeftMainHeader\"\n        className=\"left-header\"\n        data-tauri-drag-region={IS_TAURI && IS_MAC_OS ? true : undefined}\n      >\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={version}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_TAURI && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          resultsItemSelector=\".LeftSearch .ListItem-button\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n          onEnter={handleSearchEnter}\n        >\n          {searchContent}\n          <StoryToggler\n            canShow={withStoryToggler}\n          />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <Icon name=\"lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = selectSharedSettings(global);\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats\n        || fetchingStatus.messages || fetchingStatus.publicPosts) : false,\n      globalSearchChatId: chatId,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { Update } from '@tauri-apps/plugin-updater';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport { LeftColumnContent } from '../../../types';\n\nimport { DEBUG } from '../../../config';\nimport { IS_TAURI } from '../../../util/browser/globalEnvironment';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onTopicSearch: NoneToVoidFunction;\n  isAccountFrozen?: boolean;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\nconst TAURI_CHECK_UPDATE_INTERVAL = 10 * 60 * 1000;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onReset,\n  onTopicSearch,\n  isAccountFrozen,\n}) => {\n  const { closeForumPanel, openLeftColumnContent } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [tauriUpdate, setTauriUpdate] = useState<Update>();\n  const [isTauriUpdateDownloading, setIsTauriUpdateDownloading] = useState(false);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || Boolean(tauriUpdate));\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Contacts });\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(async () => {\n    if (tauriUpdate) {\n      try {\n        setIsTauriUpdateDownloading(true);\n        await tauriUpdate.downloadAndInstall();\n        setIsTauriUpdateDownloading(false);\n\n        await window.tauri?.relaunch();\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('Failed to download and install Tauri update', e);\n      } finally {\n        setIsTauriUpdateDownloading(false);\n      }\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const checkTauriUpdate = useLastCallback(() => {\n    window.tauri?.checkUpdate()\n      .then((update) => setTauriUpdate(update ?? undefined))\n      .catch((e) => {\n        // eslint-disable-next-line no-console\n        console.error('Tauri update check failed:', e);\n      });\n  });\n\n  useEffect(() => {\n    checkTauriUpdate();\n  }, []);\n\n  useInterval(\n    checkTauriUpdate,\n    (IS_TAURI && !DEBUG) ? TAURI_CHECK_UPDATE_INTERVAL : undefined,\n  );\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          badge\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n          isLoading={isTauriUpdateDownloading}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n        isAccountFrozen={isAccountFrozen}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type {\n  ElementRef } from '@teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { type AnimationLevel, LeftColumnContent, SettingsScreens } from '../../types';\n\nimport {\n  selectCurrentChat, selectIsCurrentUserFrozen, selectIsForumPanelOpen, selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState.ts';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../util/browser/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\nimport { captureControlledSwipe } from '../../util/swipeController';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: ElementRef<HTMLDivElement>;\n}\n\ntype StateProps = {\n  contentKey: LeftColumnContent;\n  settingsScreen: SettingsScreens;\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nenum ContentType {\n  Main,\n\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n\n  NewGroup,\n\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  contentKey,\n  settingsScreen,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    openLeftColumnContent,\n    openSettingsScreen,\n  } = getActions();\n\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (contentKey) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      openLeftColumnContent({ contentKey: undefined });\n      openSettingsScreen({ screen: undefined });\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewGroupStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewChannelStep2) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.NewChannelStep1 });\n      return;\n    }\n\n    if (contentKey === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (contentKey === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          openSettingsScreen({ screen: SettingsScreens.General });\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyGifts:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          openSettingsScreen({ screen: SettingsScreens.Privacy });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          openSettingsScreen({\n            screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeEnabled });\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent });\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber });\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen });\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto });\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBio });\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday });\n          return;\n        case SettingsScreens.PrivacyGiftsAllowedContacts:\n        case SettingsScreens.PrivacyGiftsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGifts });\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall });\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneP2P });\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding });\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages });\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats });\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaDisabled });\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaEnabled });\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent });\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword });\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          openSettingsScreen({ screen: SettingsScreens.Folders });\n          return;\n\n        case SettingsScreens.FoldersShare:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          openSettingsScreen({ screen: SettingsScreens.FoldersEditFolderFromChatList });\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          openLeftColumnContent({ contentKey: LeftColumnContent.ChatList });\n          openSettingsScreen({ screen: SettingsScreens.Main });\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          openSettingsScreen({ screen: SettingsScreens.Stickers });\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          openSettingsScreen({ screen: SettingsScreens.Language });\n          return;\n\n        case SettingsScreens.PrivacyNoPaidMessages:\n          openSettingsScreen({ screen: SettingsScreens.PrivacyMessages });\n          return;\n\n        default:\n          break;\n      }\n    }\n\n    if (contentKey === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (contentKey === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = contentKey === LeftColumnContent.Archived;\n      const isChatList = contentKey === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, contentKey, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (contentKey === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.GlobalSearch });\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Archived });\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction]);\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        openLeftColumnContent({ contentKey: LeftColumnContent.Settings });\n        openSettingsScreen({ screen: prevSettingsScreenRef.current! });\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            animationLevel={animationLevel}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={contentKey}\n            animationLevel={animationLevel}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={contentKey}\n            animationLevel={animationLevel}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={contentKey}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onSearchQuery={handleSearchQuery}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n            isAccountFrozen={isAccountFrozen}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={resolveTransitionName('layers', animationLevel, shouldSkipHistoryAnimations)}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      leftColumn,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const { animationLevel } = selectSharedSettings(global);\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n      isAccountFrozen,\n      contentKey: leftColumn.contentKey,\n      settingsScreen: leftColumn.settingsScreen,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newPinnedIndex),\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(pinnedIndexAboveFocused),\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: clampIndex(newIndex),\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n\nfunction clampIndex(id: number) {\n  return Math.max(0, id);\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const ref = useRef<HTMLDivElement>();\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={oldLang(ariaLabelLang)}\n      >\n        <Icon name={icon} className={styles.icon} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(lang, unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{oldLang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  threadId?: ThreadId;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  threadId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  const elementRef = useRef<HTMLDivElement>();\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  const handleReadAllReactions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllReactions({ chatId, threadId });\n  });\n\n  const handleReadAllMentions = useLastCallback(() => {\n    if (!chatId) return;\n    readAllMentions({ chatId, threadId });\n  });\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll({\n        container: messagesContainer,\n        element: lastMessageElement,\n        position: 'end',\n        margin: FOCUS_MARGIN,\n      });\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={handleReadAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={handleReadAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {} as Complete<StateProps>;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      threadId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './FrozenAccountPlaceholder.module.scss';\n\nfunction FrozenAccountPlaceholder() {\n  const lang = useLang();\n\n  const { openFrozenAccountModal } = getActions();\n\n  const handleClick = useLastCallback(() => {\n    openFrozenAccountModal();\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>{lang('ComposerTitleFrozenAccount')}</div>\n      <div className={styles.subtitle}>{lang('ComposerSubtitleFrozenAccount')}</div>\n    </div>\n  );\n}\n\nexport default memo(FrozenAccountPlaceholder);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GuZke_HG\",\"title\":\"oLWeN4mA\",\"subtitle\":\"ZxTe54MY\"};","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean, withUsers?: boolean,\n) {\n  const initDateGroup: MessageDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [[]],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [initDateGroup];\n\n  messages.forEach((message, index) => {\n    const currentDateGroup = dateGroups[dateGroups.length - 1];\n    const currentSenderGroup = currentDateGroup.senderGroups[currentDateGroup.senderGroups.length - 1];\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastMessageInSenderGroup = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage && !currentAlbum) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        const newDateGroup: MessageDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [[]],\n        };\n        dateGroups.push(newDateGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || (!withUsers && message.paidMessageStars)\n        || (nextMessage.suggestedPostInfo)\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && message.content.action?.type !== 'phoneCall')\n        || (isActionMessage(nextMessage) && nextMessage.content.action?.type !== 'phoneCall')\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastMessageInSenderGroup\n              && 'mainMessage' in lastMessageInSenderGroup\n              && lastMessageInSenderGroup.mainMessage?.id === topMessageId))\n            && nextMessage.id !== topMessageId)\n          || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentDateGroup.senderGroups.push([]);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {} as Complete<StateProps>;\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFPZHCMt\",\"chatInfo\":\"ubFGDy3d\",\"chatBackground\":\"niS9Gfcl\",\"botBackground\":\"kXKBpNnb\",\"bot-info-description\":\"kpMdEhns\",\"botInfoDescription\":\"kpMdEhns\",\"bot-info-title\":\"H__cBlx8\",\"botInfoTitle\":\"H__cBlx8\",\"media\":\"mtKNWJmZ\",\"chatInfoTitle\":\"RyB2zw9K\",\"chatInfoSubtitle\":\"n9OcHdnh\",\"chatDescription\":\"TYJGFKqJ\",\"country\":\"WuX68A65\",\"chatNotVerified\":\"sCB3zhO3\",\"verifiedTitle\":\"dlaTjW_s\",\"link\":\"yIJ4jRxH\",\"linkInfo\":\"_MPDNfhr\",\"icon\":\"KYcoeDmo\",\"textColor\":\"BH_g_jqY\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiChat, ApiCountryCode, ApiUserCommonChats, ApiUserFullInfo,\n} from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getChatTitle,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport {\n  selectBot, selectChat, selectPeer, selectUserCommonChats, selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport { formatPastDatetime, formatRegistrationMonth } from '../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../util/emoji/emoji';\nimport { getCountryCodeByIso } from '../../util/phoneNumber';\nimport stopEvent from '../../util/stopEvent';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport Link from '../ui/Link';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListAccountInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  hasMessages?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botInfo?: ApiBotInfo;\n  isLoadingFullUser?: boolean;\n  phoneCodeList?: ApiCountryCode[];\n  commonChats?: ApiUserCommonChats;\n  userFullInfo?: ApiUserFullInfo;\n};\n\nconst MessageListAccountInfo: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  botInfo,\n  isLoadingFullUser,\n  phoneCodeList,\n  commonChats,\n  userFullInfo,\n  hasMessages,\n}) => {\n  const { loadCommonChats, openChatWithInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    phoneCountry,\n    registrationMonth,\n    nameChangeDate,\n    photoChangeDate,\n  } = userFullInfo?.settings || {};\n\n  useEffect(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n\n  const country = useMemo(() => {\n    if (!phoneCodeList || !phoneCountry) return undefined;\n    return getCountryCodeByIso(phoneCodeList, phoneCountry);\n  }, [phoneCodeList, phoneCountry]);\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n  const isChatInfoEmpty = !country || !registrationMonth;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const handleClick = useLastCallback((e: React.SyntheticEvent<any>) => {\n    stopEvent(e);\n    openChatWithInfo({\n      id: chatId, shouldReplaceHistory: true, profileTab: 'commonChats', forceScrollProfileTab: true,\n    });\n  });\n\n  const securityNameInfo = nameChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-name-message\">\n      <span>\n        {lang('UserUpdatedName', {\n          user: chat.title,\n          time: formatPastDatetime(lang, nameChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const securityPhotoInfo = photoChangeDate && chat ? (\n    <div className=\"local-action-message\" key=\"security-photo-message\">\n      <span>\n        {lang('UserUpdatedPhoto', {\n          user: chat.title,\n          time: formatPastDatetime(lang, photoChangeDate),\n        }, { withNodes: true, withMarkdown: true })}\n      </span>\n    </div>\n  ) : undefined;\n\n  const tableData = useMemo((): TableEntry[] => {\n    const entries: TableEntry[] = [];\n    if (country) {\n      entries.push([\n        oldLang('PrivacyPhone'),\n        <span className={styles.chatDescription}>\n          <span className={styles.country}>\n            {renderText(isoToEmoji(country?.iso2))}\n          </span>\n          {country?.defaultName}\n        </span>,\n      ]);\n    }\n    if (registrationMonth) {\n      entries.push([\n        lang('ContactInfoRegistration'),\n        formatRegistrationMonth(lang.code, registrationMonth),\n      ]);\n    }\n    if (userFullInfo?.commonChatsCount) {\n      const global = getGlobal();\n      const peers = commonChats?.ids.slice(0, 3).map((id) => selectPeer(global, id)!).filter(Boolean);\n      entries.push([\n        lang('ChatNonContactUserGroups'),\n        <Link className={styles.link} onClick={handleClick}>\n          <span className={styles.linkInfo}>\n            {lang('ChatGroups', {\n              count: userFullInfo.commonChatsCount,\n            }, {\n              pluralValue: userFullInfo.commonChatsCount,\n            })}\n          </span>\n          {Boolean(peers?.length) && <AvatarList size=\"micro\" peers={peers} />}\n          <Icon name=\"next\" className={styles.icon} />\n        </Link>,\n      ]);\n    }\n    return entries;\n  }, [lang, oldLang, country, registrationMonth, commonChats, userFullInfo]);\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingFullUser && isChatInfoEmpty && <span>{oldLang('Loading')}</span>}\n      {(isBotInfoEmpty && isChatInfoEmpty) && !isLoadingFullUser && !hasMessages && (\n        <span>{oldLang('NoMessages')}</span>\n      )}\n      {botInfo && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.botBackground)}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {oldLang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{oldLang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n      {!isChatInfoEmpty && chat && (\n        <div\n          className={buildClassName(styles.chatInfo, styles.chatBackground)}\n        >\n          <h3 className={styles.chatInfoTitle}>{renderText(getChatTitle(lang, chat))}</h3>\n          <p className={buildClassName(styles.chatInfoSubtitle, styles.textColor)}>\n            {lang('ChatNonContactUserSubtitle')}\n          </p>\n          <MiniTable keyClassName={styles.textColor} data={tableData} />\n          {!chat?.isVerified && (\n            <div className={buildClassName(styles.chatNotVerified, styles.textColor)}>\n              <Icon name=\"info-filled\" />\n              <p className={styles.verifiedTitle}>{lang('ContactInfoNotVerified')}</p>\n            </div>\n          )}\n        </div>\n      )}\n      {securityNameInfo}\n      {securityPhotoInfo}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const {\n      countryList: { phoneCodes: phoneCodeList },\n    } = global;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const commonChats = selectUserCommonChats(global, chatId);\n    const chatBot = selectBot(global, chatId);\n\n    let isLoadingFullUser = false;\n    let botInfo;\n    if (chatBot) {\n      if (userFullInfo) {\n        botInfo = userFullInfo.botInfo;\n      } else {\n        isLoadingFullUser = true;\n      }\n    }\n\n    return {\n      chat,\n      userFullInfo,\n      botInfo,\n      isLoadingFullUser,\n      phoneCodeList,\n      commonChats,\n    };\n  },\n)(MessageListAccountInfo));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ chatId, messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Tk8btfOT\",\"avatarContainer\":\"UPrRM3Ks\",\"senderAvatar\":\"jdvqXfYh\",\"contextMenu\":\"FHxnbOg6\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n} from '../../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MESSAGE_APPEARANCE_DELAY,\n} from '../../../config';\nimport {\n  getMainUsername,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isSystemBot,\n} from '../../../global/helpers';\nimport { isApiPeerUser } from '../../../global/helpers/peers';\nimport {\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectSender,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport styles from './SenderGroupContainer.module.scss';\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    withAvatar?: boolean;\n    children: React.ReactNode;\n    id: string;\n    appearanceOrder: number;\n    canPost?: boolean;\n  };\n\n  type StateProps = {\n    sender?: ApiPeer;\n    canShowSender: boolean;\n    originSender?: ApiPeer;\n    isChatWithSelf?: boolean;\n    isRepliesChat?: boolean;\n    isAnonymousForwards?: boolean;\n  };\n\nconst SenderGroupContainer: FC<OwnProps & StateProps> = ({\n  message,\n  withAvatar,\n  children,\n  id,\n  appearanceOrder,\n  sender,\n  canShowSender,\n  originSender,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  canPost,\n}) => {\n  const { openChat, updateInsertingPeerIdMention } = getActions();\n\n  const { forwardInfo } = message;\n\n  const messageSender = canShowSender ? sender : undefined;\n  const lang = useLang();\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * MESSAGE_APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const isAvatarPeerUser = avatarPeer && isApiPeerUser(avatarPeer);\n\n  const handleOpenChat = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleMention = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (messageInput) {\n      updateInsertingPeerIdMention({ peerId: avatarPeer.id });\n    }\n  });\n\n  const handleAvatarClick = useLastCallback(() => {\n    handleOpenChat();\n  });\n\n  const {\n    ref: avatarRef,\n    shouldRender,\n  } = useShowTransition({\n    isOpen: withAvatar && isShown,\n    noMountTransition: isShown,\n    withShouldRender: true,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(avatarRef);\n\n  const getTriggerElement = useLastCallback(() => avatarRef.current);\n  const getRootElement = useLastCallback(() => document.querySelector('.Transition_slide-active > .MessageList'));\n  const getMenuElement = useLastCallback(\n    () => avatarRef?.current?.querySelector(`.${styles.contextMenu} .bubble`),\n  );\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const canMention = canPost && avatarPeer && (isAvatarPeerUser || Boolean(getMainUsername(avatarPeer)));\n  const shouldRenderContextMenu = Boolean(contextMenuAnchor) && (isAvatarPeerUser || canMention);\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getLayout={getLayout}\n        getMenuElement={getMenuElement}\n        className={styles.contextMenu}\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        withPortal\n        autoClose\n      >\n        <>\n          {isAvatarPeerUser && (\n            <MenuItem\n              icon=\"comments\"\n              onClick={handleOpenChat}\n            >\n              {lang('SendMessage')}\n            </MenuItem>\n          )}\n          {canMention && (\n            <MenuItem\n              icon=\"mention\"\n              onClick={handleMention}\n            >\n              {lang('ContextMenuItemMention')}\n            </MenuItem>\n          )}\n        </>\n      </Menu>\n    );\n  }\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size=\"small\"\n        className={styles.senderAvatar}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n        onContextMenu={handleContextMenu}\n      />\n    );\n  }\n\n  const className = buildClassName(\n    'sender-group-container',\n    styles.root,\n  );\n\n  return (\n    <div id={id} className={className}>\n      {shouldRender && (\n        <div ref={avatarRef} className={styles.avatarContainer}>\n          {renderAvatar()}\n          {shouldRenderContextMenu && renderContextMenu()}\n        </div>\n      )}\n      {children}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): Complete<StateProps> => {\n    const {\n      message, withAvatar,\n    } = ownProps;\n    const { chatId } = message;\n\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n\n    return {\n      sender,\n      canShowSender,\n      originSender,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n    };\n  },\n)(SenderGroupContainer));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredContextMenuContainer', !isOpen,\n  );\n\n  return SponsoredContextMenuContainer ? <SponsoredContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredContextMenuContainerAsync;\n","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport { selectMessageDownloadableMedia } from '../../../global/selectors/media';\nimport { IS_ANDROID } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredContextMenuContainer from './SponsoredContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: ElementRef<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ThemeKey;\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsored,\n    openUrl,\n    hideSponsored,\n    clickSponsored,\n    openMediaViewer,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const contentRef = useRef<HTMLDivElement>();\n  const ref = useRef<HTMLDivElement>();\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting && message?.randomId) {\n        viewSponsored({ randomId: message.randomId });\n      }\n    }) : undefined;\n  }, [message?.randomId, shouldObserve, observeIntersection, viewSponsored]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsored();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsored({ randomId: message.randomId, isMedia: photo || isGif ? true : undefined });\n    openUrl({ url: message.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    if (!message) return;\n    clickSponsored({ randomId: message.randomId, isMedia: true });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const handleOpenAboutAdsModal = useLastCallback(() => {\n    if (!message) return;\n    openAboutAdsModal({\n      randomId: message.randomId,\n      canReport: message.canReport,\n      additionalInfo: message.additionalInfo,\n      sponsorInfo: message.sponsorInfo,\n    });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <BadgeButton onClick={handleOpenAboutAdsModal} className=\"ad-about\">\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={message.randomId}\n          canReport={message.canReport}\n          sponsorInfo={message.sponsorInfo}\n          additionalInfo={message.additionalInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? selectMessageDownloadableMedia(global, message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { ElementRef, FC } from '../../lib/teact/teact';\nimport { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum, MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  getSuggestedChangesActionText,\n  getSuggestedChangesInfo,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectChatMessage, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate, formatScheduledDateTime } from '../../util/dates/dateFormat';\nimport { convertTonFromNanos } from '../../util/formatCurrency';\nimport { compact } from '../../util/iteratees';\nimport { formatStarsAsText, formatTonAsText } from '../../util/localization/format';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport { renderPeerLink } from './message/helpers/messageActions';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport MiniTable, { type TableEntry } from '../common/MiniTable';\nimport ActionMessage from './message/ActionMessage';\nimport Message from './message/Message';\nimport SenderGroupContainer from './message/SenderGroupContainer';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListAccountInfo from './MessageListAccountInfo';\n\nimport actionMessageStyles from './message/ActionMessage.module.scss';\n\ninterface OwnProps {\n  canShowAds?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isChatMonoforum?: boolean;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: ElementRef<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderAccountInfo?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  canPost?: boolean;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  canShowAds,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  isChatMonoforum,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderAccountInfo,\n  nameChangeDate,\n  photoChangeDate,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n  canPost,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{oldLang('UnreadMessages')}</span>\n    </div>\n  );\n  const renderPaidMessageAction = (message: ApiMessage, album?: IAlbum) => {\n    if (message.paidMessageStars) {\n      const messagesLength = album?.messages?.length || 1;\n      const amount = message.paidMessageStars * messagesLength;\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`paid-messages-action-${message.id}`}\n        >\n          <span>\n            {\n              message.isOutgoing\n                ? lang('ActionPaidOneMessageOutgoing', {\n                  amount: formatStarsAsText(lang, amount),\n                })\n                : (() => {\n                  const sender = selectSender(getGlobal(), message);\n                  const userTitle = sender ? getPeerTitle(lang, sender) : '';\n                  return lang('ActionPaidOneMessageIncoming', {\n                    user: userTitle,\n                    amount: formatStarsAsText(lang, amount),\n                  });\n                })()\n            }\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n\n  const renderSuggestedPostInfoAction = (message: ApiMessage) => {\n    if (message.suggestedPostInfo) {\n      const { price, scheduleDate } = message.suggestedPostInfo;\n      const sender = selectSender(getGlobal(), message);\n      const userTitle = sender ? getPeerTitle(lang, sender) : '';\n      const userLink = renderPeerLink(sender?.id, userTitle || lang('ActionFallbackUser'));\n\n      const originalMessage = message.replyInfo?.type === 'message' && message.replyInfo.replyToMsgId\n        ? selectChatMessage(getGlobal(), message.chatId, message.replyInfo.replyToMsgId)\n        : undefined;\n      const changesInfo = getSuggestedChangesInfo(message, originalMessage);\n\n      const titleText = changesInfo\n        ? getSuggestedChangesActionText(lang, message, originalMessage, message.isOutgoing, userLink)\n        : message.isOutgoing\n          ? lang('ActionSuggestedPostOutgoing', undefined, { withNodes: true, withMarkdown: true })\n          : lang('ActionSuggestedPostIncoming', { user: userLink }, { withNodes: true, withMarkdown: true });\n\n      const tableData: TableEntry[] = compact([\n        [lang('TitlePrice'), price ? (price.currency === 'TON'\n          ? formatTonAsText(lang, convertTonFromNanos(price.amount))\n          : formatStarsAsText(lang, price.amount)) : lang('SuggestMessageNoPrice')],\n        [lang('TitleTime'),\n          scheduleDate\n            ? formatScheduledDateTime(scheduleDate, lang, oldLang)\n            : lang('SuggestMessageAnytime'),\n        ],\n      ]);\n\n      return (\n        <div\n          className={buildClassName('local-action-message')}\n          key={`suggested-post-action-${message.id}`}\n        >\n          <span className={actionMessageStyles.suggestedPostContainer}>\n            <div\n              className={actionMessageStyles.suggestedPostTitle}\n            >\n              {titleText}\n            </div>\n            {Boolean(tableData.length) && (\n              <MiniTable\n                className={actionMessageStyles.suggestedPostInfo}\n                data={tableData}\n              />\n            )}\n          </span>\n        </div>\n      );\n    }\n    return undefined;\n  };\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  function calculateSenderGroups(\n    dateGroup: MessageDateGroup, dateGroupIndex: number, dateGroupsArray: MessageDateGroup[],\n  ) {\n    return dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && senderGroup[0].content.action?.type !== 'phoneCall'\n      ) {\n        const message = senderGroup[0];\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            getIsMessageListReady={getIsReady}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      const senderGroupElements = senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat || Boolean(isChatMonoforum);\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          message.paidMessageStars && !withUsers && renderPaidMessageAction(message, album),\n          message.suggestedPostInfo && renderSuggestedPostInfoAction(message),\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            // eslint-disable-next-line react-x/no-duplicate-key\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>\n                {oldLang(isEmptyThread\n                  ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n\n      if (!withUsers) return senderGroupElements;\n\n      const lastMessageOrAlbum = senderGroup[senderGroup.length - 1];\n      const lastMessage = isAlbum(lastMessageOrAlbum) ? lastMessageOrAlbum.mainMessage : lastMessageOrAlbum;\n      const lastMessageId = getMessageOriginalId(lastMessage);\n      const lastAppearanceOrder = messageCountToAnimate - appearanceIndex;\n\n      const isTopicTopMessage = lastMessage.id === threadId;\n      const isOwn = isOwnMessage(lastMessage);\n\n      const firstMessageOrAlbum = senderGroup[0];\n      const firstMessage = isAlbum(firstMessageOrAlbum) ? firstMessageOrAlbum.mainMessage : firstMessageOrAlbum;\n      const firstMessageId = getMessageOriginalId(firstMessage);\n\n      const key = `${firstMessageId}-${lastMessageId}`;\n      const id = (firstMessageId === lastMessageId) ? `message-group-${firstMessageId}`\n        : `message-group-${firstMessageId}-${lastMessageId}`;\n\n      const withAvatar = withUsers && !isOwn && (!isTopicTopMessage || !isComments);\n      return (\n        <SenderGroupContainer\n          key={key}\n          id={id}\n          message={lastMessage}\n          withAvatar={withAvatar}\n          appearanceOrder={lastAppearanceOrder}\n          canPost={canPost}\n        >\n          {senderGroupElements}\n        </SenderGroupContainer>\n      );\n    });\n  }\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = calculateSenderGroups(dateGroup, dateGroupIndex, dateGroupsArray);\n\n    return (\n      <div\n        className={buildClassName('message-date-group', !(nameChangeDate || photoChangeDate)\n        && dateGroupIndex === 0 && 'first-message-date-group')}\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              oldLang('MessageScheduledOn', formatHumanDate(oldLang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(oldLang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderAccountInfo\n        && <MessageListAccountInfo key={`account_info_${chatId}`} chatId={chatId} hasMessages />}\n      {dateGroups.flat()}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n      {canShowAds && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/browser/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: ElementRef<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  const backwardsTriggerRef = useRef<HTMLDivElement>();\n  const forwardsTriggerRef = useRef<HTMLDivElement>();\n  const fabTriggerRef = useRef<HTMLDivElement>();\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    const fabTrigger = fabTriggerRef.current;\n    if (!container || !fabTrigger) return;\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const fabOffsetTop = fabTrigger.offsetTop;\n    const scrollBottom = Math.round(fabOffsetTop - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { OldLangFn } from '../../hooks/useOldLang';\nimport type { MessageListType } from '../../types';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: OldLangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: OldLangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <Icon name=\"cloud-download\" className=\"no-messages-icon\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: OldLangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"J2RfusJI\",\"button\":\"Nz8BOo0i\",\"disabled\":\"zHsizIwX\",\"inner\":\"C90W_KKX\",\"icons-container\":\"Qi7tZATP\",\"iconsContainer\":\"Qi7tZATP\",\"animated-unlock\":\"lfcZJyxp\",\"animatedUnlock\":\"lfcZJyxp\",\"comments-icon\":\"zd5EAc5e\",\"commentsIcon\":\"zd5EAc5e\",\"description\":\"E_YZ3IQs\",\"starIconContainer\":\"IL_EHscS\",\"starIcon\":\"C_e1ij6A\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPeer } from '../../api/types';\n\nimport { getPeerTitle, isApiPeerUser } from '../../global/helpers/peers';\nimport { selectPeer, selectTheme, selectThemeValues } from '../../global/selectors';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Sparkles from '../common/Sparkles';\nimport Button from '../ui/Button';\n\nimport styles from './RequirementToContactMessage.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  peer?: ApiPeer;\n};\n\nfunction RequirementToContactMessage({\n  patternColor, peer, paidMessagesStars,\n}: OwnProps & StateProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { openPremiumModal, openStarsBalanceModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  const handleGetMoreStars = useLastCallback(() => {\n    openStarsBalanceModal({});\n  });\n\n  if (!peer) return undefined;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {\n            paidMessagesStars\n              ? lang(isApiPeerUser(peer) ? 'MessagesPlaceholderPaidUser' : 'MessagesPlaceholderPaidChannel', {\n                peer: getPeerTitle(lang, peer),\n                amount: formatStarsAsIcon(lang,\n                  paidMessagesStars,\n                  {\n                    asFont: true,\n                    className: styles.starIcon,\n                    containerClassName: styles.starIconContainer,\n                  }),\n              }, {\n                withNodes: true,\n                withMarkdown: true,\n              })\n              : renderText(oldLang('MessageLockedPremium', getPeerTitle(lang, peer)), ['simple_markdown'])\n          }\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"default\"\n          pill\n          onClick={paidMessagesStars ? handleGetMoreStars : handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {\n            paidMessagesStars\n              ? (\n                <>\n                  {lang('ButtonBuyStars')}\n                  <Sparkles preset=\"button\" />\n                </>\n              )\n              : oldLang('MessagePremiumUnlock')\n          }\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { peerId: userId }): Complete<StateProps> => {\n    const theme = selectTheme(global);\n    const { patternColor } = selectThemeValues(global, theme) || {};\n    const peer = selectPeer(global, userId);\n\n    return {\n      patternColor,\n      peer,\n    };\n  })(RequirementToContactMessage),\n);\n","import type { FC } from '@teact';\nimport { beginHeavyAnimation, memo, useEffect, useMemo, useRef } from '@teact';\nimport { addExtraClass, removeExtraClass } from '@teact/teact-dom.ts';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFullInfo, ApiMessage, ApiRestrictionReason, ApiTopic } from '../../api/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type MessageListType, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isChatMonoforum,\n  isSystemBot,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectMonoforumChannel,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectIsChatRestricted } from '../../global/selectors/chats';\nimport { selectActiveRestrictionReasons } from '../../global/selectors/messages';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport getOffsetToContainer from '../../util/visibility/getOffsetToContainer';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport Transition from '../ui/Transition.tsx';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListAccountInfo from './MessageListAccountInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport RequirementToContactMessage from './RequirementToContactMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  isContactRequirePremium?: boolean;\n  paidMessagesStars?: number;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatMonoforum?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isNonContact?: boolean;\n  nameChangeDate?: number;\n  photoChangeDate?: number;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReasons?: ApiRestrictionReason[];\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  isAccountFrozen?: boolean;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n  isChatProtected?: boolean;\n  hasCustomGreeting?: boolean;\n  isAppConfigLoaded?: boolean;\n  monoforumChannelId?: string;\n  canTranslate?: boolean;\n  translationLanguage?: string;\n  shouldAutoTranslate?: boolean;\n};\n\nenum Content {\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Loading,\n  Restricted,\n  StarsRequired,\n  PremiumRequired,\n  AccountInfo,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  ContactGreeting,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  NoMessages,\n  MessageList,\n}\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  isChatMonoforum,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  isNonContact,\n  nameChangeDate,\n  photoChangeDate,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReasons,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  paidMessagesStars,\n  areAdsEnabled,\n  channelJoinInfo,\n  isChatProtected,\n  isAccountFrozen,\n  hasCustomGreeting,\n  monoforumChannelId,\n  isAppConfigLoaded,\n  canTranslate,\n  translationLanguage,\n  shouldAutoTranslate,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks, requestChatTranslation,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    const canHaveAds = isChannelChat || isBot;\n    if (areAdsEnabled && canHaveAds && isSynced && isReady && isAppConfigLoaded) {\n      loadSponsoredMessages({ peerId: chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, isBot, areAdsEnabled, isAppConfigLoaded]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  // Enable auto translation for the chat if it's available\n  useEffect(() => {\n    if (!shouldAutoTranslate || !canTranslate) return;\n    requestChatTranslation({ chatId, toLanguageCode: translationLanguage });\n  }, [shouldAutoTranslate, canTranslate, translationLanguage, chatId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo || type !== 'thread') return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              mediaType: 'action',\n              type: 'channelJoined',\n              inviterId: channelJoinInfo?.inviterId,\n              isViaRequest: channelJoinInfo?.isViaRequest || undefined,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n        withUsers,\n      )\n      : undefined;\n  }, [withUsers,\n    messageIds, messagesById, type,\n    isServiceNotificationsChat, isForum,\n    threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled' || isAccountFrozen) return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n          animateScroll({\n            container,\n            element: shouldScrollToBottom ? lastItemElement : firstUnreadElement,\n            position: shouldScrollToBottom ? 'end' : 'start',\n            margin: BOTTOM_FOCUS_MARGIN,\n            forceDuration: noMessageSendingAnimation ? 0 : undefined,\n          });\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          getOffsetToContainer(unreadDivider, container).top - UNREAD_DIVIDER_TOP,\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n    isChatProtected && 'hide-on-print',\n  );\n\n  const hasMessages = Boolean((messageIds && messageGroups) || lastMessage);\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  const activeKey = isRestricted ? (\n    Content.Restricted\n  ) : paidMessagesStars && !hasMessages && !hasCustomGreeting ? (\n    Content.StarsRequired\n  ) : isContactRequirePremium && !hasMessages ? (\n    Content.PremiumRequired\n  ) : (isBot || isNonContact) && !hasMessages ? (\n    Content.AccountInfo\n  ) : shouldRenderGreeting ? (\n    Content.ContactGreeting\n  ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n    Content.NoMessages\n  ) : hasMessages ? (\n    Content.MessageList\n  ) : (\n    Content.Loading\n  );\n\n  function renderContent() {\n    return activeKey === Content.Restricted ? (\n      <div className=\"empty\">\n        <span>\n          {restrictionReasons?.[0]?.text || `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n        </span>\n      </div>\n    ) : activeKey === Content.StarsRequired ? (\n      <RequirementToContactMessage paidMessagesStars={paidMessagesStars} peerId={monoforumChannelId || chatId} />\n    ) : activeKey === Content.PremiumRequired ? (\n      <RequirementToContactMessage peerId={chatId} />\n    ) : activeKey === Content.AccountInfo ? (\n      <MessageListAccountInfo chatId={chatId} hasMessages={hasMessages} />\n    ) : activeKey === Content.ContactGreeting ? (\n      <ContactGreeting key={chatId} userId={chatId} />\n    ) : activeKey === Content.NoMessages ? (\n      <NoMessages\n        chatId={chatId}\n        topic={topic}\n        type={type}\n        isChatWithSelf={isChatWithSelf}\n        isGroupChatJustCreated={isGroupChatJustCreated}\n      />\n    ) : activeKey === Content.MessageList ? (\n      <MessageListContent\n        canShowAds={areAdsEnabled && isChannelChat}\n        chatId={chatId}\n        isComments={isComments}\n        isChannelChat={isChannelChat}\n        isChatMonoforum={isChatMonoforum}\n        isSavedDialog={isSavedDialog}\n        messageIds={messageIds || [lastMessage!.id]}\n        messageGroups={messageGroups || groupMessages([lastMessage!])}\n        getContainerHeight={getContainerHeight}\n        isViewportNewest={Boolean(isViewportNewest)}\n        isUnread={Boolean(firstUnreadId)}\n        isEmptyThread={isEmptyThread}\n        withUsers={withUsers}\n        noAvatars={noAvatars}\n        containerRef={containerRef}\n        anchorIdRef={anchorIdRef}\n        memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n        memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n        threadId={threadId}\n        type={type}\n        isReady={isReady}\n        hasLinkedChat={hasLinkedChat}\n        isSchedule={messageGroups ? type === 'scheduled' : false}\n        shouldRenderAccountInfo={isBot || isNonContact}\n        nameChangeDate={nameChangeDate}\n        photoChangeDate={photoChangeDate}\n        noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n        onScrollDownToggle={onScrollDownToggle}\n        onNotchToggle={onNotchToggle}\n        onIntersectPinnedMessage={onIntersectPinnedMessage}\n        canPost={canPost}\n      />\n    ) : (\n      <Loading color=\"white\" backgroundColor=\"dark\" />\n    );\n  }\n\n  return (\n    <Transition\n      ref={containerRef}\n      className={className}\n      name=\"fade\"\n      activeKey={activeKey}\n      shouldCleanup\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {renderContent()}\n    </Transition>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): Complete<StateProps> => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    if (!chat) {\n      return { currentUserId } as Complete<StateProps>;\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId } as Complete<StateProps>;\n    }\n\n    const isRestricted = selectIsChatRestricted(global, chatId);\n    const restrictionReasons = selectActiveRestrictionReasons(global, chat?.restrictionReasons);\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n    const isNonContact = Boolean(userFullInfo?.settings?.canAddContact);\n    const nameChangeDate = userFullInfo?.settings?.nameChangeDate;\n    const photoChangeDate = userFullInfo?.settings?.photoChangeDate;\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    const hasCustomGreeting = Boolean(userFullInfo?.businessIntro);\n    const isAppConfigLoaded = global.isAppConfigLoaded;\n\n    const monoforumChannelId = selectMonoforumChannel(global, chatId)?.id;\n    const canTranslate = selectCanTranslateChat(global, chatId) && !chatFullInfo?.isTranslationDisabled;\n    const shouldAutoTranslate = chat?.hasAutoTranslation;\n    const translationLanguage = selectTranslationLanguage(global);\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReasons,\n      isChannelChat: isChatChannel(chat),\n      isChatMonoforum: isChatMonoforum(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isNonContact,\n      nameChangeDate,\n      photoChangeDate,\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      isChatProtected: selectIsChatProtected(global, chatId),\n      lastMessage: withLastMessageWhenPreloading ? lastMessage : undefined,\n      isAccountFrozen,\n      hasCustomGreeting,\n      isAppConfigLoaded,\n      monoforumChannelId,\n      canTranslate,\n      translationLanguage,\n      shouldAutoTranslate,\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container);\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  const computedStyle = getComputedStyle(container);\n  const headerActionsHeight = parseInt(computedStyle.getPropertyValue('--middle-header-panes-height'), 10);\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= headerActionsHeight + STICKY_TOP;\n  });\n}\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: ElementRef<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n  MediaContent,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent,\n} from '../global/helpers';\nimport { getPeerTitle } from '../global/helpers/peers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message?: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = message ? getMessageContent(message) : {} satisfies MediaContent;\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getPeerTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../../lib/teact/teact';\nimport { useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n  MediaContent,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../../config';\nimport {\n  getMessageContent, isMessageLocal,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat, selectChatMessage, selectSender, selectTabState,\n} from '../../../global/selectors';\nimport { selectMessageMediaDuration } from '../../../global/selectors/media';\nimport { makeTrackId } from '../../../util/audioPlayer';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { clearMediaSession } from '../../../util/mediaSession';\nimport renderText from '../../common/helpers/renderText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useAudioPlayer from '../../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport RippleEffect from '../../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  className?: string;\n  noUi?: boolean;\n  isFullWidth?: boolean;\n  isHidden?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  mediaDuration?: number;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n  timestamp?: number;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  mediaDuration,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n  isFullWidth,\n  timestamp,\n  onPaneStateChange,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n  const renderingMessage = useCurrentOrPrev(message);\n\n  const { audio, voice, video } = renderingMessage ? getMessageContent(renderingMessage) : {} satisfies MediaContent;\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getPeerTitle(lang, sender) : undefined;\n\n  const mediaHash = useMessageMediaHash(renderingMessage, 'inline');\n  const mediaData = mediaHash && mediaLoader.getFromMemory(mediaHash);\n  const mediaMetadata = useMessageMediaMetadata(renderingMessage, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n    setCurrentTime,\n  } = useAudioPlayer(\n    message && makeTrackId(message),\n    mediaDuration || 0,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    message && isMessageLocal(message),\n    true,\n  );\n\n  const isOpen = Boolean(message);\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(transitionRef, !shouldRender);\n\n  useEffect(() => {\n    if (timestamp) {\n      setCurrentTime(timestamp);\n    }\n  }, [timestamp, setCurrentTime]);\n\n  useEffect(() => {\n    if (isPlaying && message?.isDeleting) {\n      playPause();\n    }\n  }, [isPlaying, message?.isDeleting, playPause]);\n\n  const handleClick = useLastCallback(() => {\n    const { chatId, id } = renderingMessage!;\n    focusMessage({ chatId, messageId: id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi || !shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={buildClassName('AudioPlayer', isFullWidth ? 'full-width-player' : 'mini-player', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      ref={ref}\n    >\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <Icon name=\"skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <Icon name=\"play\" />\n        <Icon name=\"pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <Icon name=\"skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <Icon name=\"close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <Icon name=\"placeholder\" /> : undefined}\n    >\n      {rate}\n      X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { isHidden }): Complete<StateProps> => {\n    const { audioPlayer } = selectTabState(global);\n    const { chatId, messageId } = audioPlayer;\n    const message = !isHidden && chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    const sender = message && selectSender(global, message);\n    const chat = message && selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive, timestamp,\n    } = selectTabState(global).audioPlayer;\n\n    const mediaDuration = message ? selectMessageMediaDuration(global, message) : undefined;\n\n    return {\n      message,\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n      timestamp,\n      mediaDuration,\n    };\n  },\n)(AudioPlayer);\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tE8PJzpv\",\"mini\":\"lrBhOgvf\",\"fullWidth\":\"gutn4asD\",\"pinnedMessage\":\"ayLUtX1S\",\"messageText\":\"ETMw73qH\",\"loading\":\"yvd9_9PF\",\"pinListIcon\":\"LFRysfVa\",\"pinListIconHidden\":\"E_C4DXKN\",\"no-hover\":\"WVjde2rq\",\"noHover\":\"WVjde2rq\",\"messageTextTransition\":\"mA1i07pG\",\"withMedia\":\"BWZytkCB\",\"title\":\"IWpRWVBg\",\"summary\":\"k19QLKaH\",\"inlineButton\":\"fpQMpARI\",\"pictogramTransition\":\"Gp431jU4\",\"pinnedThumb\":\"XjjZeOUy\",\"pinnedThumbImage\":\"ljzqevcj\"};","import type React from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  getIsSavedDialog,\n  getMessageIsSpoiler,\n  getMessageSingleInlineButton,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectForwardedSender,\n  selectPinnedIds,\n} from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { getPictogramDimensions, REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useMessageMediaHash from '../../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../../hooks/media/useThumbnail';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\nimport MessageSummary from '../../common/MessageSummary';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport RippleEffect from '../../ui/RippleEffect';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\nimport PinnedMessageNavigation from '../PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst MAX_LENGTH = 256;\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n\n  messageListType: MessageListType;\n  className?: string;\n  isFullWidth?: boolean;\n  shouldHide?: boolean;\n  getLoadingPinnedId: Signal<number | undefined>;\n  getCurrentPinnedIndex: Signal<number>;\n  onFocusPinnedMessage: (messageId: number) => void;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiPeer;\n  isSynced?: boolean;\n};\n\nconst HeaderPinnedMessage = ({\n  chatId,\n  threadId,\n  canUnpin,\n  getLoadingPinnedId,\n  pinnedMessageIds,\n  messagesById,\n  isFullWidth,\n  topMessageSender,\n  getCurrentPinnedIndex,\n  className,\n  chat,\n  isSynced,\n  shouldHide,\n  onPaneStateChange,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const {\n    clickBotInlineButton, focusMessage, openThread, pinMessage, loadPinnedMessages,\n  } = getActions();\n  const lang = useLang();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : 0);\n  const pinnedMessageNumber = Math.max(pinnedMessagesCount - currentPinnedIndex, 1);\n\n  const topMessageTitle = topMessageSender ? getPeerTitle(lang, topMessageSender) : undefined;\n\n  const video = pinnedMessage && getMessageVideo(pinnedMessage);\n  const gif = video?.isGif ? video : undefined;\n  const isVideoThumbnail = Boolean(gif && !gif.previewPhotoSizes?.length);\n\n  const mediaThumbnail = useThumbnail(pinnedMessage);\n  const mediaHash = useMessageMediaHash(pinnedMessage, isVideoThumbnail ? 'full' : 'pictogram');\n  const mediaBlobUrl = useMedia(mediaHash);\n  const isSpoiler = pinnedMessage && getMessageIsSpoiler(pinnedMessage);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n\n  useEffect(() => {\n    if (isSynced && (threadId === MAIN_THREAD_ID || chat?.isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, chat?.isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const isOpen = Boolean(pinnedMessage) && !shouldHide;\n  const {\n    ref: transitionRef,\n  } = useShowTransition({\n    isOpen,\n    noOpenTransition: true,\n    shouldForceOpen: isFullWidth, // Use pane animation instead\n  });\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    isDisabled: !isFullWidth,\n    ref: transitionRef,\n    onStateChange: onPaneStateChange,\n  });\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n    pinMessage({ chatId, messageId: pinnedMessage!.id, isUnpin: true });\n  });\n\n  const inlineButton = pinnedMessage && getMessageSingleInlineButton(pinnedMessage);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: pinnedMessage.chatId, messageId: pinnedMessage.id, button: inlineButton });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const handleMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const nextMessageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId: nextMessageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(nextMessageId);\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(handleMessageClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, isFullVideo?: boolean, asSpoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n    const shouldRenderVideo = isFullVideo && blobUrl;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !asSpoiler && !shouldRenderVideo && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {shouldRenderVideo && !asSpoiler && (\n          <video\n            src={blobUrl}\n            width={width}\n            height={height}\n            playsInline\n            disablePictureInPicture\n            className={styles.pinnedThumbImage}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(asSpoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  if (!shouldRender || !renderingPinnedMessage) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'HeaderPinnedMessageWrapper', styles.root, isFullWidth ? styles.fullWidth : styles.mini, className,\n      )}\n    >\n      {(pinnedMessagesCount > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? handleAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <Icon\n            name=\"pin-list\"\n            className={buildClassName(\n              styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {canUnpin && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text={lang('PinnedConfirmUnpin')}\n        confirmLabel={lang('DialogUnpin')}\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={pinnedMessagesCount}\n          index={currentPinnedIndex}\n        />\n        <Transition activeKey={renderingPinnedMessage.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isVideoThumbnail,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!topMessageTitle && (\n              <AnimatedCounter\n                text={pinnedMessagesCount === 1\n                  ? lang('PinnedMessageTitleSingle')\n                  : lang('PinnedMessageTitle', { index: pinnedMessageNumber }, { pluralValue: pinnedMessagesCount })}\n              />\n            )}\n\n            {topMessageTitle && renderText(topMessageTitle)}\n          </div>\n          <Transition\n            activeKey={renderingPinnedMessage.id}\n            name=\"slideVerticalFade\"\n            className={styles.messageTextTransition}\n          >\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={renderingPinnedMessage}\n                truncateLength={MAX_LENGTH}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType,\n  }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n\n    const isSynced = global.isSynced;\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const messagesById = selectChatMessages(global, chatId);\n\n    const state = {\n      chat,\n      isSynced,\n    };\n\n    if (messageListType !== 'thread' || !messagesById) {\n      return state as Complete<StateProps>;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      } as Complete<StateProps>;\n    }\n\n    return state as Complete<StateProps>;\n  },\n)(HeaderPinnedMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { type MessageListType, StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n} from '../../config';\nimport {\n  getIsSavedDialog,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCustomEmoji,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectPeer,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport { IS_MAC_OS } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport HeaderActions from './HeaderActions';\nimport AudioPlayer from './panes/AudioPlayer';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSavedDialog?: boolean;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  emojiStatusSlug?: string;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  emojiStatusSlug,\n  isSavedDialog,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    openChat,\n    openPreviousChat,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openStickerSet,\n    updateMiddleSearch,\n    openUniqueGiftBySlug,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isDesktop, isTablet } = useAppLayout();\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  const componentRef = useRef<HTMLDivElement>();\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    if (emojiStatusSlug) {\n      openUniqueGiftBySlug({ slug: emojiStatusSlug });\n      return;\n    }\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const isAudioPlayerActive = Boolean(audioMessage);\n  const isAudioPlayerRendering = isDesktop && isAudioPlayerActive;\n  const isPinnedMessagesFullWidth = isAudioPlayerActive || !isDesktop;\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n    const displayChatId = chat?.isMonoforum ? chat.linkedMonoforumId! : realChatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(displayChatId) ? (\n            <PrivateChatInfo\n              key={displayChatId}\n              userId={displayChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={displayChatId}\n              chatId={displayChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              withMonoforumStatus={chat?.isMonoforum}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef} data-tauri-drag-region={IS_TAURI && IS_MAC_OS ? true : undefined}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n      {!isPinnedMessagesFullWidth && (\n        <HeaderPinnedMessage\n          key={chatId}\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          onFocusPinnedMessage={onFocusPinnedMessage}\n          getLoadingPinnedId={getLoadingPinnedId}\n          getCurrentPinnedIndex={getCurrentPinnedIndex}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendering && (\n          <AudioPlayer />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendering}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): Complete<StateProps> => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const peer = selectPeer(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = peer?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && selectCustomEmoji(global, emojiStatus.documentId);\n    const emojiStatusSlug = emojiStatus?.type === 'collectible' ? emojiStatus.slug : undefined;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    return {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      emojiStatusSlug,\n      isSavedDialog,\n    };\n  },\n)(MiddleHeader));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"yMkfzjus\",\"content\":\"__w9Ejd3\",\"info\":\"wdU19Be7\",\"avatar\":\"AQFE1t4V\",\"title\":\"u2vIptvT\",\"text\":\"SVG6BaX3\",\"aboutAd\":\"SrgXYpPk\"};","import type React from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { MessageListType } from '../../../types';\n\nimport { selectBot, selectSponsoredMessage } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getApiPeerColorClass } from '../../common/helpers/peerColor';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Avatar from '../../common/Avatar';\nimport BadgeButton from '../../common/BadgeButton';\nimport SponsoredMessageContextMenuContainer from '../message/SponsoredContextMenuContainer';\n\nimport styles from './BotAdPane.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  messageListType: MessageListType;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  isBot?: boolean;\n  sponsoredMessage?: ApiSponsoredMessage;\n};\n\nconst BotAdPane = ({\n  chatId,\n  isBot,\n  messageListType,\n  sponsoredMessage,\n  onPaneStateChange,\n}: OwnProps & StateProps) => {\n  const {\n    viewSponsored,\n    openUrl,\n    clickSponsored,\n    openAboutAdsModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(isBot && sponsoredMessage && messageListType === 'thread');\n\n  const renderingSponsoredMessage = useCurrentOrPrev(sponsoredMessage);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    withResizeObserver: true,\n    onStateChange: onPaneStateChange,\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !shouldRender, true);\n\n  const handleClick = useLastCallback(() => {\n    if (!renderingSponsoredMessage) return;\n\n    clickSponsored({ randomId: renderingSponsoredMessage.randomId });\n    openUrl({ url: renderingSponsoredMessage.url, shouldSkipModal: true });\n  });\n\n  const handleAboutClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (!renderingSponsoredMessage) return;\n    const {\n      randomId, additionalInfo, canReport, sponsorInfo,\n    } = renderingSponsoredMessage;\n    e.stopPropagation();\n    openAboutAdsModal({\n      randomId,\n      additionalInfo,\n      canReport,\n      sponsorInfo,\n    });\n  });\n\n  useEffect(() => {\n    if (shouldRender && renderingSponsoredMessage) {\n      viewSponsored({ randomId: renderingSponsoredMessage.randomId });\n    }\n  }, [shouldRender, renderingSponsoredMessage, chatId]);\n\n  if (!shouldRender || !renderingSponsoredMessage) {\n    return undefined;\n  }\n\n  const {\n    randomId, canReport, additionalInfo, sponsorInfo,\n  } = renderingSponsoredMessage;\n\n  const {\n    peerColor,\n    content,\n    photo,\n    title,\n  } = renderingSponsoredMessage;\n\n  return (\n    <>\n      <div\n        ref={ref}\n        className={styles.root}\n        onClick={handleClick}\n        onMouseDown={handleBeforeContextMenu}\n        onContextMenu={handleContextMenu}\n      >\n        <div className={buildClassName(styles.content, peerColor && getApiPeerColorClass(peerColor))}>\n          <span className={styles.info}>\n            {lang('SponsoredMessageAd')}\n            <BadgeButton onClick={handleAboutClick} className={styles.aboutAd}>\n              {lang('SponsoredMessageAdWhatIsThis')}\n            </BadgeButton>\n          </span>\n          <div className={styles.title}>{title}</div>\n          {content.text && (\n            <div className={styles.text}>\n              {renderTextWithEntities({\n                text: content.text.text,\n                entities: content.text.entities,\n              })}\n            </div>\n          )}\n        </div>\n        {photo && (\n          <Avatar\n            size=\"large\"\n            photo={photo}\n            className={styles.avatar}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport={canReport}\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const bot = selectBot(global, chatId);\n    const sponsoredMessage = selectSponsoredMessage(global, chatId);\n    return {\n      isBot: Boolean(bot),\n      sponsoredMessage,\n    };\n  },\n)(BotAdPane));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotVerification } from '../../../api/types';\n\nimport {\n  selectPeerFullInfo,\n} from '../../../global/selectors';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './BotVerificationPane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  wasShown: boolean;\n  botVerification?: ApiBotVerification;\n};\nconst BOT_VERIFICATION_ICON_SIZE = 16;\nconst DISPLAY_DURATION_MS = 5000; // 5 sec\n\nconst BotVerificationPane: FC<OwnProps & StateProps> = ({\n  peerId,\n  wasShown,\n  botVerification,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(!wasShown && botVerification);\n\n  const {\n    markBotVerificationInfoShown,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const markAsShowed = useLastCallback(() => {\n    markBotVerificationInfoShown({ peerId });\n  });\n  useTimeout(markAsShowed, !wasShown ? DISPLAY_DURATION_MS : undefined);\n\n  if (!shouldRender || !botVerification) return undefined;\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <span className={styles.icon}>\n        <CustomEmoji\n          documentId={botVerification.iconId}\n          size={BOT_VERIFICATION_ICON_SIZE}\n        />\n      </span>\n      {botVerification.description}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): Complete<StateProps> => {\n    const peerFullInfo = selectPeerFullInfo(global, peerId);\n\n    const botVerification = peerFullInfo?.botVerification;\n    const wasShown = global.settings.botVerificationShownPeerIds.includes(peerId);\n\n    return {\n      botVerification,\n      wasShown,\n    };\n  },\n)(BotVerificationPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sAWttcxl\",\"icon\":\"tK9d2y8u\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../../global/helpers';\nimport { isApiPeerChat, isApiPeerUser } from '../../../global/helpers/peers';\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './ChatReportPane.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  isAutoArchived?: boolean;\n  canReportSpam?: boolean;\n  canAddContact?: boolean;\n  canBlockContact?: boolean;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  peer?: ApiPeer;\n};\n\nconst ChatReportPane: FC<OwnProps & StateProps> = ({\n  chatId,\n  className,\n  isAutoArchived,\n  canReportSpam,\n  canAddContact,\n  canBlockContact,\n  peer,\n  currentUserId,\n  onPaneStateChange,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hidePeerSettingsBar,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n\n  const renderingPeer = useCurrentOrPrev(peer);\n  const chat = renderingPeer && isApiPeerChat(renderingPeer) ? renderingPeer : undefined;\n  const user = renderingPeer && isApiPeerUser(renderingPeer) ? renderingPeer : undefined;\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const renderingCanAddContact = useCurrentOrPrev(canAddContact);\n  const renderingCanBlockContact = useCurrentOrPrev(canBlockContact);\n  const renderingCanReportSpam = useCurrentOrPrev(canReportSpam);\n  const renderingIsAutoArchived = useCurrentOrPrev(isAutoArchived);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (renderingIsAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (renderingCanReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPane = useLastCallback(() => {\n    hidePeerSettingsBar({ peerId: chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  const hasAnyButton = canAddContact || canBlockContact || canReportSpam;\n\n  const isRendering = Boolean(hasAnyButton && peer);\n\n  useEffect(() => {\n    if (!isRendering) {\n      closeBlockUserModal();\n    }\n  }, [isRendering]);\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen: isRendering,\n    onStateChange: onPaneStateChange,\n  });\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('ChatReportPane', className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      {renderingCanAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {renderingCanReportSpam && !renderingCanBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"ChatReportPane--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={handleCloseReportPane}\n        ariaLabel={lang('Close')}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            className=\"ChatReportPane--Checkbox dialog-checkbox\"\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => ({\n    currentUserId: global.currentUserId,\n    peer: selectPeer(global, chatId),\n  }),\n)(ChatReportPane));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xqcWnBH4\",\"message\":\"CJhqoyif\",\"messageStars\":\"sZR8zqEk\",\"messageStarIcon\":\"AKXOpk8S\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n} from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectChat,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\n// import useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useHeaderPane, { type PaneState } from '../hooks/useHeaderPane';\n\nimport Button from '../../ui/Button';\n\n// import CustomEmoji from '../../common/CustomEmoji';\nimport styles from './PaidMessageChargePane.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  onPaneStateChange?: (state: PaneState) => void;\n};\n\ntype StateProps = {\n  chargedPaidMessageStars?: number;\n  chat?: ApiChat;\n};\n\nconst PaidMessageChargePane: FC<OwnProps & StateProps> = ({\n  chargedPaidMessageStars,\n  chat,\n  peerId,\n  onPaneStateChange,\n}) => {\n  const isOpen = Boolean(chargedPaidMessageStars);\n  const lang = useLang();\n\n  const {\n    openChatRefundModal,\n  } = getActions();\n\n  const { ref, shouldRender } = useHeaderPane({\n    isOpen,\n    onStateChange: onPaneStateChange,\n  });\n\n  const handleRefund = useLastCallback(() => {\n    openChatRefundModal({ userId: peerId });\n  });\n\n  if (!shouldRender || !chargedPaidMessageStars) return undefined;\n\n  const peerName = chat ? getPeerTitle(lang, chat) : undefined;\n\n  const message = lang('PaneMessagePaidMessageCharge', {\n    peer: peerName,\n    amount: formatStarsAsIcon(lang,\n      chargedPaidMessageStars,\n      { asFont: true, className: styles.messageStarIcon, containerClassName: styles.messageStars }),\n  }, {\n    withMarkdown: true,\n    withNodes: true,\n  });\n\n  return (\n    <div ref={ref} className={styles.root}>\n      <div className={styles.message}>\n        {message}\n      </div>\n      <Button\n        isText\n        noForcedUpperCase\n        pill\n        fluid\n        size=\"tiny\"\n        className={styles.button}\n        onClick={handleRefund}\n      >\n        {lang('RemoveFeeTitle')}\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): Complete<StateProps> => {\n    const chat = selectChat(global, peerId);\n    const peerFullInfo = selectUserFullInfo(global, peerId);\n    const chargedPaidMessageStars = peerFullInfo?.settings?.chargedPaidMessageStars;\n\n    return {\n      chargedPaidMessageStars,\n      chat,\n    };\n  },\n)(PaidMessageChargePane));\n","import { memo, useRef, useSignal } from '@teact';\nimport { setExtraStyles } from '@teact/teact-dom';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiUserFullInfo } from '../../api/types';\nimport type { MessageListType, ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  selectCanAnimateRightColumn,\n  selectChat,\n  selectChatMessage,\n  selectCurrentMiddleSearch,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useEffectOnce from '../../hooks/useEffectOnce';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport { applyAnimationState, type PaneState } from './hooks/useHeaderPane';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport AudioPlayer from './panes/AudioPlayer';\nimport BotAdPane from './panes/BotAdPane';\nimport BotVerificationPane from './panes/BotVerificationPane';\nimport ChatReportPane from './panes/ChatReportPane';\nimport HeaderPinnedMessage from './panes/HeaderPinnedMessage';\nimport PaidMessageChargePane from './panes/PaidMessageChargePane';\n\nimport styles from './MiddleHeaderPanes.module.scss';\n\ntype OwnProps = {\n  className?: string;\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  userFullInfo?: ApiUserFullInfo;\n  isAudioPlayerRendered?: boolean;\n  isMiddleSearchOpen?: boolean;\n  withRightColumnAnimation?: boolean;\n};\n\nconst FALLBACK_PANE_STATE = { height: 0 };\n\nconst MiddleHeaderPanes = ({\n  className,\n  chatId,\n  threadId,\n  messageListType,\n  chat,\n  userFullInfo,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  isAudioPlayerRendered,\n  isMiddleSearchOpen,\n  withRightColumnAnimation,\n  onFocusPinnedMessage,\n}: OwnProps & StateProps) => {\n  const { settings } = userFullInfo || {};\n\n  const { isDesktop } = useAppLayout();\n  const [getAudioPlayerState, setAudioPlayerState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPinnedState, setPinnedState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getGroupCallState, setGroupCallState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getChatReportState, setChatReportState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotAdState, setBotAdState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getBotVerificationState, setBotVerificationState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n  const [getPaidMessageChargeState, setPaidMessageChargeState] = useSignal<PaneState>(FALLBACK_PANE_STATE);\n\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered || !isDesktop;\n\n  const isFirstRenderRef = useRef(true);\n  const {\n    shouldRender,\n    ref,\n  } = useShowTransition({\n    isOpen: !isMiddleSearchOpen,\n    withShouldRender: true,\n    noMountTransition: true,\n  });\n\n  useEffectOnce(() => {\n    isFirstRenderRef.current = false;\n  });\n\n  useSignalEffect(() => {\n    const audioPlayerState = getAudioPlayerState();\n    const botVerificationState = getBotVerificationState();\n    const pinnedState = getPinnedState();\n    const groupCallState = getGroupCallState();\n    const chatReportState = getChatReportState();\n    const botAdState = getBotAdState();\n    const paidMessageState = getPaidMessageChargeState();\n\n    // Keep in sync with the order of the panes in the DOM\n    const stateArray = [audioPlayerState, groupCallState,\n      chatReportState, botVerificationState, pinnedState, botAdState, paidMessageState];\n\n    const isFirstRender = isFirstRenderRef.current;\n    const totalHeight = stateArray.reduce((acc, state) => acc + state.height, 0);\n\n    const middleColumn = document.getElementById('MiddleColumn');\n    if (!middleColumn) return;\n\n    applyAnimationState(stateArray, isFirstRender);\n\n    setExtraStyles(middleColumn, {\n      '--middle-header-panes-height': `${totalHeight}px`,\n    });\n  }, [getAudioPlayerState, getGroupCallState, getPinnedState,\n    getChatReportState, getBotAdState, getBotVerificationState, getPaidMessageChargeState]);\n\n  if (!shouldRender) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={\n        buildClassName(\n          styles.root,\n          withRightColumnAnimation && styles.root_withRightColumnAnimation,\n          className,\n        )\n      }\n    >\n      <AudioPlayer\n        isFullWidth\n        onPaneStateChange={setAudioPlayerState}\n        isHidden={isDesktop}\n      />\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          chatId={chatId}\n          onPaneStateChange={setGroupCallState}\n        />\n      )}\n      <ChatReportPane\n        chatId={chatId}\n        canAddContact={settings?.canAddContact}\n        canBlockContact={settings?.canBlockContact}\n        canReportSpam={settings?.canReportSpam}\n        isAutoArchived={settings?.isAutoArchived}\n        onPaneStateChange={setChatReportState}\n      />\n      <BotVerificationPane\n        peerId={chatId}\n        onPaneStateChange={setBotVerificationState}\n      />\n      <PaidMessageChargePane\n        peerId={chatId}\n        onPaneStateChange={setPaidMessageChargeState}\n      />\n      <HeaderPinnedMessage\n        chatId={chatId}\n        threadId={threadId}\n        messageListType={messageListType}\n        onFocusPinnedMessage={onFocusPinnedMessage}\n        getLoadingPinnedId={getLoadingPinnedId}\n        getCurrentPinnedIndex={getCurrentPinnedIndex}\n        onPaneStateChange={setPinnedState}\n        isFullWidth\n        shouldHide={!isPinnedMessagesFullWidth}\n      />\n      <BotAdPane\n        chatId={chatId}\n        messageListType={messageListType}\n        onPaneStateChange={setBotAdState}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId,\n  }): Complete<StateProps> => {\n    const { audioPlayer } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    return {\n      chat,\n      userFullInfo,\n      isAudioPlayerRendered: Boolean(audioMessage),\n      isMiddleSearchOpen,\n      withRightColumnAnimation: selectCanAnimateRightColumn(global),\n    };\n  },\n)(MiddleHeaderPanes));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oCUr3DTX\",\"root_withRightColumnAnimation\":\"YPrc0luK\",\"rootWithRightColumnAnimation\":\"YPrc0luK\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): Complete<StateProps> => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import type React from '@teact';\nimport type { ElementRef } from '@teact';\nimport { memo, useEffect, useMemo, useState } from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic } from '../../api/types';\nimport type { ActiveEmojiInteraction, AnimationLevel, MessageListType, ThemeKey, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface, selectCanAnimateRightColumn,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectEditingId,\n  selectIsChatBotNotStarted,\n  selectIsCurrentUserFrozen,\n  selectIsInSelectMode,\n  selectIsMonoforumAdmin,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPeerPaidMessagesStars,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThemeValues,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState.ts';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport {\n  IS_ANDROID, IS_IOS, IS_MAC_OS, IS_SAFARI, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { isUserId } from '../../util/entities/ids';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport useFluidBackgroundFilter from './message/hooks/useFluidBackgroundFilter';\n\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport FrozenAccountPlaceholder from './FrozenAccountPlaceholder';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport MiddleHeaderPanes from './MiddleHeaderPanes';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: ElementRef<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  withInterfaceAnimations?: boolean;\n  withRightColumnAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n  freezeAppealChat?: ApiChat;\n  shouldBlockSendInMonoforum?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nfunction isVideo(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_VIDEO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  animationLevel,\n  withInterfaceAnimations,\n  withRightColumnAnimation,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  arePeerSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n  paidMessagesStars,\n  isAccountFrozen,\n  freezeAppealChat,\n  shouldBlockSendInMonoforum,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadPeerSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId: chatId! });\n    }\n  }, [chatId, isPrivate, arePeerSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    // In Safari, the e.dataTransfer.items list may be empty during dragenter/dragover events,\n    // preventing the ability to determine file types in advance. More details: https://bugs.webkit.org/show_bug.cgi?id=223517\n    const shouldDrawQuick = IS_SAFARI || (items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      .every((item) => isImage(item) || isVideo(item)));\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel\n          ? oldLang('RequestToJoinChannelSentDescription') : oldLang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    withRightColumnAnimation && styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    oldLang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(\n    oldLang, chat, threadId, topics, Boolean(draftReplyInfo),\n  );\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    || forumComposerPlaceholder\n    || (shouldBlockSendInMonoforum ? lang('MonoforumComposerPlaceholder') : undefined)\n    || (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined)\n    || (isAccountFrozen && freezeAppealChat?.id !== chatId ? <FrozenAccountPlaceholder /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  // Prepare filter beforehand to avoid flickering\n  useFluidBackgroundFilter(patternColor);\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  ) || (isAccountFrozen && freezeAppealChat?.id !== chatId);\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        data-tauri-drag-region={IS_TAURI && IS_MAC_OS && !(renderingChatId && renderingThreadId) ? true : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeaderPanes\n              key={renderingChatId}\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={resolveTransitionName(\n                'slide',\n                animationLevel,\n                shouldSkipHistoryAnimations || !withInterfaceAnimations,\n              )}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                paidMessagesStars={paidMessagesStars}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <Icon name=\"unpin\" />\n                      <span>{oldLang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{oldLang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {oldLang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {oldLang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {oldLang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {oldLang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {oldLang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): Complete<StateProps> => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = selectThemeValues(global, theme) || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      animationLevel: selectSharedSettings(global).animationLevel,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      withRightColumnAnimation: selectCanAnimateRightColumn(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state as Complete<StateProps>;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const userFullInfo = chatId ? selectUserFullInfo(global, chatId) : undefined;\n\n    const editingId = selectEditingId(global, chatId, threadId);\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests\n      && !chat.isMonoforum,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const isMonoforumAdmin = selectIsMonoforumAdmin(global, chatId);\n    const shouldBlockSendInMonoforum = Boolean(chat?.isMonoforum && !draftReplyInfo && isMonoforumAdmin && !editingId);\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n        || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const userFull = selectUserFullInfo(global, chatId);\n\n    const isContactRequirePremium = userFull?.isContactRequirePremium;\n    const paidMessagesStars = selectPeerPaidMessagesStars(global, chatId);\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n    const botFreezeAppealId = global.botFreezeAppealId;\n    const freezeAppealChat = botFreezeAppealId\n      ? selectChat(global, botFreezeAppealId) : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !shouldBlockSendInMonoforum\n        && !isSavedDialog\n        && (!isAccountFrozen || freezeAppealChat?.id === chatId),\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n      paidMessagesStars,\n      isAccountFrozen,\n      freezeAppealChat,\n      shouldBlockSendInMonoforum,\n    } as Complete<StateProps>;\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: ElementRef<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import type React from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport VerificationMonetizationModal from '../common/VerificationMonetizationModal.async';\nimport WebAppsCloseConfirmationModal from '../main/WebAppsCloseConfirmationModal.async';\nimport AboutAdsModal from './aboutAds/AboutAdsModal.async';\nimport AgeVerificationModal from './ageVerification/AgeVerificationModal.async';\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport DeleteAccountModal from './deleteAccount/DeleteAccountModal.async';\nimport EmojiStatusAccessModal from './emojiStatusAccess/EmojiStatusAccessModal.async';\nimport FrozenAccountModal from './frozenAccount/FrozenAccountModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftResalePriceComposerModal from './gift/resale/GiftResalePriceComposerModal.async';\nimport GiftStatusInfoModal from './gift/status/GiftStatusInfoModal.async';\nimport GiftTransferModal from './gift/transfer/GiftTransferModal.async';\nimport GiftUpgradeModal from './gift/upgrade/GiftUpgradeModal.async';\nimport GiftInfoValueModal from './gift/value/GiftInfoValueModal.async';\nimport GiftWithdrawModal from './gift/withdraw/GiftWithdrawModal.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport LocationAccessModal from './locationAccess/LocationAccessModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport PreparedMessageModal from './preparedMessage/PreparedMessageModal.async';\nimport PriceConfirmModal from './priceConfirm/PriceConfirmModal.async';\nimport ProfileRatingModal from './profileRating/ProfileRatingModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport SharePreparedMessageModal from './sharePreparedMessage/SharePreparedMessageModal.async';\nimport ChatRefundModal from './stars/chatRefund/ChatRefundModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport SuggestedPostApprovalModal from './suggestedPostApproval/SuggestedPostApprovalModal.async';\nimport SuggestedStatusModal from './suggestedStatus/SuggestedStatusModal.async';\nimport SuggestMessageModal from './suggestMessage/SuggestMessageModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n  'giftCodeModal' |\n  'boostModal' |\n  'chatlistModal' |\n  'urlAuth' |\n  'mapModal' |\n  'oneTimeMediaModal' |\n  'inviteViaLinkModal' |\n  'requestedAttachBotInstall' |\n  'collectibleInfoModal' |\n  'reportAdModal' |\n  'reportModal' |\n  'starsBalanceModal' |\n  'starsPayment' |\n  'starsTransactionModal' |\n  'paidReactionModal' |\n  'suggestMessageModal' |\n  'suggestedPostApprovalModal' |\n  'webApps' |\n  'chatInviteModal' |\n  'starsSubscriptionModal' |\n  'starsGiftModal' |\n  'giftModal' |\n  'isGiftRecipientPickerOpen' |\n  'isWebAppsCloseConfirmationModalOpen' |\n  'giftInfoModal' |\n  'giftInfoValueModal' |\n  'giftResalePriceComposerModal' |\n  'suggestedStatusModal' |\n  'emojiStatusAccessModal' |\n  'locationAccessModal' |\n  'aboutAdsModal' |\n  'giftUpgradeModal' |\n  'monetizationVerificationModal' |\n  'giftWithdrawModal' |\n  'preparedMessageModal' |\n  'sharePreparedMessageModal' |\n  'giftStatusInfoModal' |\n  'giftTransferModal' |\n  'chatRefundModal' |\n  'priceConfirmModal' |\n  'isFrozenAccountModalOpen' |\n  'deleteAccountModal' |\n  'isAgeVerificationModalOpen' |\n  'profileRatingModal'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  suggestMessageModal: SuggestMessageModal,\n  suggestedPostApprovalModal: SuggestedPostApprovalModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  isWebAppsCloseConfirmationModalOpen: WebAppsCloseConfirmationModal,\n  giftInfoModal: GiftInfoModal,\n  giftInfoValueModal: GiftInfoValueModal,\n  giftResalePriceComposerModal: GiftResalePriceComposerModal,\n  suggestedStatusModal: SuggestedStatusModal,\n  emojiStatusAccessModal: EmojiStatusAccessModal,\n  locationAccessModal: LocationAccessModal,\n  aboutAdsModal: AboutAdsModal,\n  giftUpgradeModal: GiftUpgradeModal,\n  monetizationVerificationModal: VerificationMonetizationModal,\n  giftWithdrawModal: GiftWithdrawModal,\n  giftStatusInfoModal: GiftStatusInfoModal,\n  preparedMessageModal: PreparedMessageModal,\n  sharePreparedMessageModal: SharePreparedMessageModal,\n  giftTransferModal: GiftTransferModal,\n  chatRefundModal: ChatRefundModal,\n  priceConfirmModal: PriceConfirmModal,\n  isFrozenAccountModalOpen: FrozenAccountModal,\n  deleteAccountModal: DeleteAccountModal,\n  isAgeVerificationModalOpen: AgeVerificationModal,\n  profileRatingModal: ProfileRatingModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => (\n    pick(selectTabState(global), MODAL_KEYS) as Complete<StateProps>\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SuggestMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestMessageModal = useModuleLoader(Bundles.Extra, 'SuggestMessageModal', !modal);\n\n  return SuggestMessageModal ? <SuggestMessageModal {...props} /> : <Loading />;\n};\n\nexport default SuggestMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedPostApprovalModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SuggestedPostApprovalModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedPostApprovalModal = useModuleLoader(Bundles.Extra, 'SuggestedPostApprovalModal', !modal);\n\n  return SuggestedPostApprovalModal ? <SuggestedPostApprovalModal {...props} /> : <Loading />;\n};\n\nexport default SuggestedPostApprovalModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppsCloseConfirmationModalAsync: FC = (props) => {\n  const { modal } = props;\n  const WebAppsCloseConfirmationModal = useModuleLoader(Bundles.Extra, 'WebAppsCloseConfirmationModal', !modal);\n\n  return WebAppsCloseConfirmationModal ? <WebAppsCloseConfirmationModal isOpen={modal} /> : undefined;\n};\n\nexport default WebAppsCloseConfirmationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoValueModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoValueModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoValueModal = useModuleLoader(Bundles.Stars, 'GiftInfoValueModal', !modal);\n\n  return GiftInfoValueModal ? <GiftInfoValueModal {...props} /> : undefined;\n};\n\nexport default GiftInfoValueModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftResalePriceComposerModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftResalePriceComposerModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftResalePriceComposerModal = useModuleLoader(Bundles.Stars, 'GiftResalePriceComposerModal', !modal);\n\n  return GiftResalePriceComposerModal ? <GiftResalePriceComposerModal {...props} /> : undefined;\n};\n\nexport default GiftResalePriceComposerModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SuggestedStatusModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SuggestedStatusModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SuggestedStatusModal = useModuleLoader(Bundles.Extra, 'SuggestedStatusModal', !modal);\n\n  return SuggestedStatusModal ? <SuggestedStatusModal {...props} /> : undefined;\n};\n\nexport default SuggestedStatusModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiStatusAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst EmojiStatusAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const EmojiStatusAccessModal = useModuleLoader(Bundles.Extra, 'EmojiStatusAccessModal', !modal);\n\n  return EmojiStatusAccessModal ? <EmojiStatusAccessModal {...props} /> : undefined;\n};\n\nexport default EmojiStatusAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LocationAccessModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst LocationAccessModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const LocationAccessModal = useModuleLoader(Bundles.Extra, 'LocationAccessModal', !modal);\n\n  return LocationAccessModal ? <LocationAccessModal {...props} /> : undefined;\n};\n\nexport default LocationAccessModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !modal);\n\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftUpgradeModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftUpgradeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftUpgradeModal = useModuleLoader(Bundles.Stars, 'GiftUpgradeModal', !modal);\n\n  return GiftUpgradeModal ? <GiftUpgradeModal {...props} /> : undefined;\n};\n\nexport default GiftUpgradeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !modal);\n\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftWithdrawModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftWithdrawModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftWithdrawModal = useModuleLoader(Bundles.Stars, 'GiftWithdrawModal', !modal);\n\n  return GiftWithdrawModal ? <GiftWithdrawModal {...props} /> : undefined;\n};\n\nexport default GiftWithdrawModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftStatusInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftStatusInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftStatusInfoModal = useModuleLoader(Bundles.Stars, 'GiftStatusInfoModal', !modal);\n\n  return GiftStatusInfoModal ? <GiftStatusInfoModal {...props} /> : undefined;\n};\n\nexport default GiftStatusInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PreparedMessageModal = useModuleLoader(Bundles.Extra, 'PreparedMessageModal', !modal);\n\n  return PreparedMessageModal ? <PreparedMessageModal {...props} /> : undefined;\n};\n\nexport default PreparedMessageModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SharePreparedMessageModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SharePreparedMessageModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const SharePreparedMessageModal = useModuleLoader(Bundles.Extra, 'SharePreparedMessageModal', !modal);\n\n  return SharePreparedMessageModal ? <SharePreparedMessageModal {...props} /> : undefined;\n};\n\nexport default SharePreparedMessageModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftTransferModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftTransferModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftTransferModal = useModuleLoader(Bundles.Stars, 'GiftTransferModal', !modal);\n\n  return GiftTransferModal ? <GiftTransferModal {...props} /> : undefined;\n};\n\nexport default GiftTransferModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatRefundModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ChatRefundModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatRefundModal = useModuleLoader(Bundles.Stars, 'ChatRefundModal', !modal);\n\n  return ChatRefundModal ? <ChatRefundModal {...props} /> : undefined;\n};\n\nexport default ChatRefundModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { TabState } from '../../../global/types';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nexport type OwnProps = {\n  modal: TabState['priceConfirmModal'];\n};\n\nconst PriceConfirmModalAsync: FC<OwnProps> = ({ modal }) => {\n  const PriceConfirmModal = useModuleLoader(Bundles.Stars, 'PriceConfirmModal', !modal);\n\n  return PriceConfirmModal ? <PriceConfirmModal modal={modal} /> : undefined;\n};\n\nexport default PriceConfirmModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './FrozenAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst FrozenAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const FrozenAccountModal = useModuleLoader(Bundles.Extra, 'FrozenAccountModal', modal);\n\n  return FrozenAccountModal ? <FrozenAccountModal {...props} /> : undefined;\n};\n\nexport default FrozenAccountModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteAccountModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DeleteAccountModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const DeleteAccountModal = useModuleLoader(Bundles.Extra, 'DeleteAccountModal', !modal);\n\n  return DeleteAccountModal ? <DeleteAccountModal {...props} /> : undefined;\n};\n\nexport default DeleteAccountModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AgeVerificationModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AgeVerificationModalAsync: FC<OwnProps> = memo((props) => {\n  const { modal } = props;\n\n  const AgeVerificationModal = useModuleLoader(Bundles.Extra, 'AgeVerificationModal', !modal);\n\n  return AgeVerificationModal ? <AgeVerificationModal {...props} /> : undefined;\n});\n\nexport default AgeVerificationModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ProfileRatingModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ProfileRatingModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ProfileRatingModal = useModuleLoader(Bundles.Extra, 'ProfileRatingModal', !modal);\n\n  return ProfileRatingModal ? <ProfileRatingModal {...props} /> : undefined;\n};\n\nexport default ProfileRatingModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredIds = filterPeersByQuery({\n      ids: unique([\n        ...(localContactIds || []),\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]),\n      query: searchQuery,\n      type: 'user',\n    });\n\n    return sortChatIds(\n      filteredIds.filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <Icon name=\"arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): Complete<StateProps> => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: ElementRef<HTMLDivElement>,\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll({\n          container,\n          element: tabsEl,\n          position: 'start',\n          forceDuration: TRANSITION_DURATION,\n        });\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [\n    tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs,\n  ]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n\n    animateScroll({\n      container,\n      element: container.firstElementChild as HTMLElement,\n      position: 'start',\n      maxDistance: container.offsetHeight * 2,\n    });\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (Math.ceil(container.scrollTop) >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'gifts':\n      return ProfileState.GiftList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n  similarBots,\n}: {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n  similarBots?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'similarBots':\n      viewportIds = similarBots;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HN4dYXIk\",\"star\":\"LLQBJODm\",\"priceBadge\":\"haa6STaT\",\"topIcon\":\"_TMVTkD4\",\"hiddenGift\":\"xY4yqqYA\",\"radialPattern\":\"_I9aOdGr\",\"stickerWrapper\":\"NYuBBB9j\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatusType, ApiPeer, ApiSavedStarGift } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, TON_CURRENCY_CODE } from '../../../config';\nimport { getHasAdminRight } from '../../../global/helpers';\nimport { selectChat, selectPeer, selectUser } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsIcon, formatTonAsIcon } from '../../../util/localization/format';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { getGiftAttributes, getStickerFromGift, getTotalGiftAvailability } from '../helpers/gifts';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag.ts';\nimport { type ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport StickerView from '../../common/StickerView';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport RadialPatternBackground from '../profile/RadialPatternBackground';\nimport GiftMenuItems from './GiftMenuItems';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './SavedGift.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  gift: ApiSavedStarGift;\n  style?: string;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  fromPeer?: ApiPeer;\n  currentUserId?: string;\n  hasAdminRights?: boolean;\n  currentUserEmojiStatus?: ApiEmojiStatusType;\n  collectibleEmojiStatuses?: ApiEmojiStatusType[];\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst SavedGift = ({\n  peerId,\n  gift,\n  style,\n  fromPeer,\n  currentUserId,\n  hasAdminRights,\n  collectibleEmojiStatuses,\n  currentUserEmojiStatus,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const stickerRef = useRef<HTMLDivElement>();\n\n  const lang = useLang();\n\n  const [isHover, markHover, unmarkHover] = useFlag();\n\n  const canManage = peerId === currentUserId || hasAdminRights;\n  const totalIssued = getTotalGiftAvailability(gift.gift);\n  const starGift = gift.gift;\n  const starGiftUnique = starGift.type === 'starGiftUnique' ? starGift : undefined;\n\n  const resellPrice = useMemo(() => {\n    if (!starGiftUnique?.resellPrice) return undefined;\n\n    if (starGiftUnique.resaleTonOnly) {\n      return starGiftUnique.resellPrice.find((amount) => amount.currency === TON_CURRENCY_CODE);\n    }\n\n    return starGiftUnique.resellPrice.find((amount) => amount.currency === STARS_CURRENCY_CODE);\n  }, [starGiftUnique]);\n\n  const ribbonText = (() => {\n    if (starGiftUnique?.resellPrice) {\n      return lang('GiftRibbonSale');\n    }\n    if (gift.isPinned && starGiftUnique) {\n      return lang('GiftSavedNumber', { number: starGiftUnique.number });\n    }\n    if (totalIssued) {\n      return lang('ActionStarGiftLimitedRibbon', { total: formatIntegerCompact(lang, totalIssued) });\n    }\n    return undefined;\n  })();\n\n  const ribbonColor = starGiftUnique?.resellPrice ? 'green' : 'blue';\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll'));\n  const getMenuElement = useLastCallback(() => (\n    document.querySelector('#portals')?.querySelector('.saved-gift-context-menu .bubble')\n  ));\n  const getLayout = useLastCallback(() => ({ withPortal: true }));\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      peerId,\n      gift,\n    });\n  });\n\n  const avatarPeer = (gift.isNameHidden && !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  const sticker = getStickerFromGift(gift.gift);\n\n  const giftAttributes = useMemo(() => getGiftAttributes(gift.gift), [gift.gift]);\n  const { backdrop, pattern } = giftAttributes || {};\n\n  const radialPatternBackdrop = useMemo(() => {\n    if (!backdrop || !pattern) {\n      return undefined;\n    }\n\n    const backdropColors = [backdrop.centerColor, backdrop.edgeColor];\n    const patternColor = backdrop.patternColor;\n\n    return (\n      <RadialPatternBackground\n        className={styles.radialPattern}\n        backgroundColors={backdropColors}\n        patternColor={patternColor}\n        patternIcon={pattern.sticker}\n      />\n    );\n  }, [backdrop, pattern]);\n\n  if (!sticker) return undefined;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName('interactive-gift scroll-item', styles.root)}\n      style={style}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onMouseDown={handleBeforeContextMenu}\n      onMouseEnter={!IS_TOUCH_ENV ? markHover : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? unmarkHover : undefined}\n    >\n      {radialPatternBackdrop}\n      {!radialPatternBackdrop && <Avatar className={styles.topIcon} peer={avatarPeer} size=\"micro\" />}\n      {gift.isPinned && <Icon name=\"pinned-message\" className={styles.topIcon} />}\n      <div\n        ref={stickerRef}\n        className={styles.stickerWrapper}\n        style={`width: ${GIFT_STICKER_SIZE}px; height: ${GIFT_STICKER_SIZE}px`}\n      >\n        {sticker && (\n          <StickerView\n            containerRef={stickerRef}\n            sticker={sticker}\n            size={GIFT_STICKER_SIZE}\n            shouldLoop={isHover}\n            shouldPreloadPreview\n            observeIntersectionForPlaying={observeIntersection}\n            observeIntersectionForLoading={observeIntersection}\n          />\n        )}\n\n      </div>\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-crossed-outline\" />\n        </div>\n      )}\n      {resellPrice && (\n        <Button\n          className={styles.priceBadge}\n          nonInteractive\n          size=\"tiny\"\n          withSparkleEffect={true}\n          pill\n          fluid\n        >\n          {resellPrice.currency === 'TON'\n            ? formatTonAsIcon(lang, resellPrice.amount, { shouldConvertFromNanos: true, className: styles.star })\n            : formatStarsAsIcon(lang, resellPrice.amount, { asFont: true, className: styles.star })}\n        </Button>\n      )}\n      {ribbonText && (\n        <GiftRibbon\n          color={ribbonColor}\n          text={ribbonText}\n        />\n      )}\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          className=\"saved-gift-context-menu\"\n          autoClose\n          withPortal\n          getMenuElement={getMenuElement}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getLayout={getLayout}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          <GiftMenuItems\n            peerId={peerId}\n            gift={gift}\n            canManage={canManage}\n            collectibleEmojiStatuses={collectibleEmojiStatuses}\n            currentUserEmojiStatus={currentUserEmojiStatus}\n          />\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId, gift }): Complete<StateProps> => {\n    const fromPeer = gift.fromId ? selectPeer(global, gift.fromId) : undefined;\n    const chat = selectChat(global, peerId);\n    const hasAdminRights = chat && getHasAdminRight(chat, 'postMessages');\n\n    const currentUserId = global.currentUserId;\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n    const currentUserEmojiStatus = currentUser?.emojiStatus;\n    const collectibleEmojiStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      fromPeer,\n      hasAdminRights,\n      currentUserId,\n      currentUserEmojiStatus,\n      collectibleEmojiStatuses,\n    };\n  },\n)(SavedGift));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport useMessageMediaHash from '../../hooks/media/useMessageMediaHash';\nimport useThumbnail from '../../hooks/media/useThumbnail';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = useThumbnail(media);\n\n  const mediaHash = useMessageMediaHash(media, 'preview');\n  const mediaBlobUrl = useMedia(mediaHash, !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): Complete<StateProps> => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig;\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"_KBrROQt\",\"icon\":\"Y3vEed9M\"};","import { memo } from '../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport AnimatedIconFromSticker from './AnimatedIconFromSticker';\n\nimport styles from './AnimatedTabItem.module.scss';\n\ntype OwnProps = {\n  id: string;\n  title: string;\n  sticker?: ApiSticker;\n  onClick?: (id: string) => void;\n};\n\nconst AnimatedTabItem = ({\n  id,\n  title,\n  sticker,\n  onClick,\n}: OwnProps) => {\n  const handleClick = useLastCallback(() => {\n    onClick?.(id);\n  });\n\n  return (\n    <div\n      className={styles.item}\n      onClick={handleClick}\n    >\n      {sticker && (\n        <AnimatedIconFromSticker\n          className={styles.icon}\n          sticker={sticker}\n          size={20}\n          forcePreview\n        />\n      )}\n      {title}\n    </div>\n  );\n};\n\nexport default memo(AnimatedTabItem);\n","import { memo, useEffect, useRef, useState } from '../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../api/types';\nimport type { AnimationLevel } from '../../types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useResizeObserver from '../../hooks/useResizeObserver';\n\nimport AnimatedTabItem from './AnimatedTabItem';\n\nimport styles from './AnimatedTabList.module.scss';\n\nexport type TabItem = {\n  id: string;\n  title: string;\n  sticker?: ApiSticker;\n};\n\ntype OwnProps = {\n  items: TabItem[];\n  selectedItemId?: string;\n  className?: string;\n  animationLevel: AnimationLevel;\n  onItemSelect?: (itemId: string) => void;\n};\n\nconst AnimatedTabList = ({\n  items,\n  selectedItemId,\n  animationLevel,\n  onItemSelect,\n  className,\n}: OwnProps) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const clipPathContainerRef = useRef<HTMLDivElement>();\n  const selectedIndex = items.findIndex((item) => item.id === selectedItemId) || 0;\n  const [clipPath, setClipPath] = useState<string>('');\n  const shouldAnimate = animationLevel > 0;\n\n  useHorizontalScroll(containerRef, !items.length, true);\n\n  const updateClipPath = useLastCallback(() => {\n    const clipPathContainer = clipPathContainerRef.current;\n    const activeTab = selectedIndex >= 0 && clipPathContainer?.childNodes[selectedIndex] as HTMLElement | null;\n\n    if (clipPathContainer && activeTab && clipPathContainer.offsetWidth > 0) {\n      const { offsetLeft, offsetWidth } = activeTab;\n      const containerWidth = clipPathContainer.offsetWidth;\n      const left = (offsetLeft / containerWidth * 100).toFixed(1);\n      const right = ((containerWidth - (offsetLeft + offsetWidth)) / containerWidth * 100).toFixed(1);\n\n      const newClipPath = `inset(0 ${right}% 0 ${left}% round 1rem)`;\n      setClipPath(newClipPath);\n    }\n  });\n\n  useEffect(() => {\n    updateClipPath();\n  }, [selectedIndex, items]);\n\n  useResizeObserver(clipPathContainerRef, updateClipPath);\n\n  if (!items.length) return undefined;\n\n  return (\n    <div\n      ref={containerRef}\n      className={\n        buildClassName(\n          styles.container,\n          'no-scrollbar',\n          className,\n          clipPath && styles.isVisible,\n        )\n      }\n    >\n      {items.map((item) => (\n        <AnimatedTabItem\n          key={item.id}\n          id={item.id}\n          title={item.title}\n          sticker={item.sticker}\n          onClick={onItemSelect}\n        />\n      ))}\n\n      <div\n        ref={clipPathContainerRef}\n        className={buildClassName(\n          styles.clipPathContainer,\n          'clip-path-container',\n          !shouldAnimate && styles.noAnimation,\n        )}\n        style={clipPath ? `clip-path: ${clipPath}` : undefined}\n        aria-hidden\n      >\n        {items.map((item, i) => (\n          <AnimatedTabItem\n            key={item.id}\n            id={item.id}\n            title={item.title}\n            sticker={item.sticker}\n            onClick={onItemSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(AnimatedTabList);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"UQ6pUmuC\",\"clipPathContainer\":\"c397ZVz4\",\"isVisible\":\"_Nw3GzkO\",\"noAnimation\":\"zNFdzcTe\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarGiftCollection } from '../../../api/types';\nimport type { ProfileCollectionKey } from '../../../global/selectors/payments';\nimport type { AnimationLevel } from '../../../types';\nimport type { TabItem } from '../../common/AnimatedTabList';\n\nimport { selectActiveGiftsCollectionId } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedTabList from '../../common/AnimatedTabList';\n\nimport styles from './StarGiftCollectionList.module.scss';\ntype OwnProps = {\n  peerId: string;\n  className?: string;\n};\n\ntype StateProps = {\n  collections?: ApiStarGiftCollection[];\n  activeCollectionId: ProfileCollectionKey;\n  animationLevel: AnimationLevel;\n};\n\nconst StarGiftCollectionList = ({\n  peerId,\n  className,\n  collections,\n  activeCollectionId,\n  animationLevel,\n}: StateProps & OwnProps) => {\n  const { updateSelectedGiftCollection, resetSelectedGiftCollection } = getActions();\n  const lang = useLang();\n\n  const handleItemSelect = useLastCallback((itemId: string) => {\n    if (itemId === 'all') {\n      resetSelectedGiftCollection({ peerId });\n    } else {\n      const collectionId = Number(itemId);\n      updateSelectedGiftCollection({ peerId, collectionId });\n    }\n  });\n\n  if (!collections || collections.length === 0) {\n    return undefined;\n  }\n\n  const items: TabItem[] = useMemo(() => [\n    {\n      id: 'all',\n      title: lang('AllGiftsCategory'),\n    },\n    ...collections.map((collection) => ({\n      id: String(collection.collectionId),\n      title: collection.title,\n      sticker: collection.icon,\n    })),\n  ], [collections, lang]);\n\n  const selectedItemId = activeCollectionId ? String(activeCollectionId) : 'all';\n\n  return (\n    <AnimatedTabList\n      items={items}\n      selectedItemId={selectedItemId}\n      animationLevel={animationLevel}\n      onItemSelect={handleItemSelect}\n      className={buildClassName(styles.tabList, className)}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): Complete<StateProps> => {\n    const { starGiftCollections } = global;\n    const collections = starGiftCollections?.byPeerId?.[peerId];\n    const activeCollectionId = selectActiveGiftsCollectionId(global, peerId);\n\n    return {\n      collections,\n      activeCollectionId,\n      animationLevel: selectSharedSettings(global).animationLevel,\n    };\n  },\n)(StarGiftCollectionList));\n","// extracted by mini-css-extract-plugin\nexport default {\"tabList\":\"pvf61Tbm\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStoryAlbum } from '../../../api/types';\nimport type { ProfileCollectionKey } from '../../../global/selectors/payments';\nimport type { AnimationLevel } from '../../../types';\nimport type { TabItem } from '../../common/AnimatedTabList';\n\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { selectActiveStoriesCollectionId } from '../../../global/selectors/stories';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedTabList from '../../common/AnimatedTabList';\n\nimport styles from './StoryAlbumList.module.scss';\n\ntype OwnProps = {\n  peerId: string;\n  className?: string;\n};\n\ntype StateProps = {\n  albums?: ApiStoryAlbum[];\n  selectedAlbumId: ProfileCollectionKey;\n  animationLevel: AnimationLevel;\n};\n\nconst StoryAlbumList = ({\n  peerId,\n  className,\n  albums,\n  selectedAlbumId,\n  animationLevel,\n}: StateProps & OwnProps) => {\n  const { selectStoryAlbum, resetSelectedStoryAlbum } = getActions();\n  const lang = useLang();\n\n  const handleItemSelect = useLastCallback((itemId: string) => {\n    if (itemId === 'all') {\n      resetSelectedStoryAlbum();\n    } else {\n      const albumId = Number(itemId);\n      selectStoryAlbum({ peerId, albumId });\n    }\n  });\n\n  if (!albums?.length) {\n    return undefined;\n  }\n\n  const items: TabItem[] = useMemo(() => [\n    {\n      id: 'all',\n      title: lang('AllStoriesCategory'),\n    },\n    ...albums.map((album) => ({\n      id: String(album.albumId),\n      title: album.title,\n    })),\n  ], [albums, lang]);\n\n  const selectedItemId = selectedAlbumId ? String(selectedAlbumId) : 'all';\n\n  return (\n    <AnimatedTabList\n      items={items}\n      selectedItemId={selectedItemId}\n      animationLevel={animationLevel}\n      onItemSelect={handleItemSelect}\n      className={buildClassName(styles.tabList, className)}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { peerId }): Complete<StateProps> => {\n    const { stories } = global;\n    const albums = stories?.albumsByPeerId?.[peerId];\n    const selectedAlbumId = selectActiveStoriesCollectionId(global);\n\n    return {\n      albums,\n      selectedAlbumId,\n      animationLevel: selectSharedSettings(global).animationLevel,\n    };\n  },\n)(StoryAlbumList));\n","// extracted by mini-css-extract-plugin\nexport default {\"tabList\":\"GgK8T6WN\"};","import type { FC } from '@teact';\nimport { memo, useCallback, useEffect, useMemo, useRef, useState } from '@teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiSavedStarGift,\n  ApiStarGiftCollection,\n  ApiStoryAlbum,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { ProfileCollectionKey } from '../../global/selectors/payments';\nimport type { TabState } from '../../global/types';\nimport type { AnimationLevel, ProfileState, ProfileTabType, SharedMediaType, ThemeKey, ThreadId } from '../../types';\nimport type { RegularLangKey } from '../../types/language';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport { MEMBERS_SLICE, PROFILE_SENSITIVE_AREA, SHARED_MEDIA_SLICE, SLIDE_TRANSITION_DURATION } from '../../config';\nimport { selectActiveGiftsCollectionId } from '../../global/selectors/payments';\n\nconst CONTENT_PANEL_SHOW_DELAY = 300;\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport { getSavedGiftKey } from '../../global/helpers/stars';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsChatRestricted,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectMonoforumChannel,\n  selectPeerStories,\n  selectSimilarBotsIds,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport { selectMessageDownloadableMedia } from '../../global/selectors/media';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { selectActiveStoriesCollectionId } from '../../global/selectors/stories';\nimport { areDeepEqual } from '../../util/areDeepEqual';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { isUserId } from '../../util/entities/ids';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport { useViewTransition } from '../../hooks/animations/useViewTransition';\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport SavedGift from '../common/gift/SavedGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Icon from '../common/icons/Icon';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Link from '../ui/Link';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport StarGiftCollectionList from './gifts/StarGiftCollectionList';\nimport StoryAlbumList from './stories/StoryAlbumList';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  isActive: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  monoforumChannel?: ApiChat;\n  theme: ThemeKey;\n  isChannel?: boolean;\n  isBot?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiSavedStarGift[];\n  storyAlbums?: ApiStoryAlbum[];\n  giftCollections?: ApiStarGiftCollection[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  selectedStoryAlbumId: ProfileCollectionKey;\n  activeCollectionId: ProfileCollectionKey;\n  giftsFilter?: any;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  animationLevel: AnimationLevel;\n  shouldWarnAboutFiles?: boolean;\n  similarChannels?: string[];\n  similarBots?: string[];\n  botPreviewMedia?: ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarPeers: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  key: RegularLangKey;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', key: 'ProfileTabMedia' },\n  { type: 'documents', key: 'ProfileTabFiles' },\n  { type: 'links', key: 'ProfileTabLinks' },\n  { type: 'audio', key: 'ProfileTabMusic' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  threadId,\n  profileState,\n  theme,\n  monoforumChannel,\n  isChannel,\n  isBot,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  selectedStoryAlbumId,\n  activeCollectionId,\n  giftsFilter,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  storyAlbums,\n  giftCollections,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  animationLevel,\n  shouldWarnAboutFiles,\n  similarChannels,\n  similarBots,\n  isCurrentUserPremium,\n  limitSimilarPeers,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadBotRecommendations,\n    loadPreviewMedias,\n    loadPeerSavedGifts,\n    resetGiftProfileFilter,\n    loadStarGiftCollections,\n    loadStoryAlbums,\n    resetSelectedStoryAlbum,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n  const [isViewTransitionEnabled, enableViewTransition, disableViewTransition] = useFlag();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const [restoreContentHeightKey, setRestoreContentHeightKey] = useState(0);\n\n  const tabs = useMemo(() => {\n    const arr: TabProps[] = [];\n    if (isSavedMessages && !isSavedDialog) {\n      arr.push({ type: 'dialogs', key: 'ProfileTabSavedDialogs' });\n    }\n\n    if (hasStoriesTab) {\n      arr.push({ type: 'stories', key: 'ProfileTabStories' });\n    }\n\n    if (hasStoriesTab && isSavedMessages) {\n      arr.push({ type: 'storiesArchive', key: 'ProfileTabStoriesArchive' });\n    }\n\n    if (hasGiftsTab) {\n      arr.push({ type: 'gifts', key: 'ProfileTabGifts' });\n    }\n\n    if (hasMembersTab) {\n      arr.push({ type: 'members', key: isChannel ? 'ProfileTabSubscribers' : 'ProfileTabMembers' });\n    }\n\n    if (hasPreviewMediaTab) {\n      arr.push({ type: 'previewMedia', key: 'ProfileTabBotPreview' });\n    }\n\n    arr.push(...TABS);\n\n    // Voice messages filter currently does not work in forum topics. Return it when it's fixed on the server side.\n    if (!isTopicInfo) {\n      arr.push({ type: 'voice', key: 'ProfileTabVoice' });\n    }\n\n    if (hasCommonChatsTab) {\n      arr.push({ type: 'commonChats', key: 'ProfileTabSharedGroups' });\n    }\n\n    if (isChannel && similarChannels?.length) {\n      arr.push({ type: 'similarChannels', key: 'ProfileTabSimilarChannels' });\n    }\n\n    if (isBot && similarBots?.length) {\n      arr.push({ type: 'similarBots', key: 'ProfileTabSimilarBots' });\n    }\n\n    return arr.map((tab) => ({\n      type: tab.type,\n      title: lang(tab.key),\n    }));\n  }, [\n    isSavedMessages, isSavedDialog, hasStoriesTab, hasGiftsTab, hasMembersTab, hasPreviewMediaTab, isTopicInfo,\n    hasCommonChatsTab, isChannel, isBot, similarChannels?.length, similarBots?.length, lang,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  useEffect(() => {\n    if (isBot && !similarBots && isSynced) {\n      loadBotRecommendations({ userId: chatId });\n    }\n  }, [chatId, isBot, similarBots, isSynced]);\n\n  useEffect(() => {\n    resetSelectedStoryAlbum();\n  }, [chatId]);\n\n  useSyncEffect(() => {\n    enableViewTransition();\n  }, [giftsFilter]);\n\n  useSyncEffect(() => {\n    disableViewTransition();\n  }, [gifts]);\n\n  useEffect(() => {\n    if (hasGiftsTab && isSynced) {\n      loadStarGiftCollections({ peerId: chatId });\n      loadStoryAlbums({ peerId: chatId });\n    }\n  }, [chatId, hasGiftsTab, isSynced]);\n\n  const [renderingGifts, setRenderingGifts] = useState(gifts);\n  const { startViewTransition, shouldApplyVtn } = useViewTransition();\n\n  const giftIds = useMemo(() => renderingGifts?.map((gift) => getSavedGiftKey(gift)), [renderingGifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadGifts = useCallback(() => {\n    loadPeerSavedGifts({ peerId: chatId });\n  }, [chatId]);\n\n  const handleLoadMoreMembers = useCallback(() => {\n    loadMoreMembers({ chatId });\n  }, [chatId, loadMoreMembers]);\n\n  useEffectWithPrevDeps(([prevGifts]) => {\n    if (areDeepEqual(gifts, prevGifts)) {\n      return;\n    }\n\n    if (!gifts || !prevGifts || !isViewTransitionEnabled) {\n      setRenderingGifts(gifts);\n      return;\n    }\n\n    const prevGiftIds = prevGifts.map((gift) => getSavedGiftKey(gift));\n    const newGiftIds = gifts.map((gift) => getSavedGiftKey(gift));\n    const hasOrderChanged = prevGiftIds.some((id, index) => id !== newGiftIds[index]);\n\n    if (hasOrderChanged && animationLevel > 0) {\n      startViewTransition(() => {\n        setRenderingGifts(gifts);\n      });\n    } else {\n      setRenderingGifts(gifts);\n    }\n  }, [gifts, startViewTransition, animationLevel, isViewTransitionEnabled]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers: handleLoadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n    similarBots,\n  });\n\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const [isGiftCollectionsShowed, markGiftCollectionsShowed, unmarkGiftCollectionsShowed] = useFlag(false);\n  const [isStoryAlbumsShowed, markStoryAlbumsShowed, unmarkStoryAlbums] = useFlag(false);\n\n  const hasGiftsCollections = giftCollections && giftCollections.length > 0;\n  const hasStoryAlbums = storyAlbums && storyAlbums.length > 0;\n  const isGiftsResult = resultType === 'gifts';\n  const isStoriesResult = resultType === 'stories';\n  const shouldShowContentPanel = (isGiftsResult && hasGiftsCollections) || (isStoriesResult && hasStoryAlbums);\n\n  useEffect(() => {\n    if (hasGiftsCollections) {\n      setTimeout(() => {\n        markGiftCollectionsShowed();\n      }, CONTENT_PANEL_SHOW_DELAY);\n    } else {\n      unmarkGiftCollectionsShowed();\n    }\n\n    if (hasStoryAlbums) {\n      setTimeout(() => {\n        markStoryAlbumsShowed();\n      }, CONTENT_PANEL_SHOW_DELAY);\n    } else {\n      unmarkStoryAlbums();\n    }\n  }, [hasGiftsCollections, hasStoryAlbums, markGiftCollectionsShowed, markStoryAlbumsShowed]);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n        || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  const handleResetGiftsFilter = useLastCallback(() => {\n    resetGiftProfileFilter({ peerId: chatId });\n  });\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: (e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      },\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if ((!viewportIds && !botPreviewMedia) || (!gifts?.length && resultType === 'gifts')) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType,\n    renderingActiveTab, activeCollectionId, selectedStoryAlbumId], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: oldLang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderNothingFoundGiftsWithFilter() {\n    return (\n      <div className=\"nothing-found-gifts\">\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.SearchingDuck}\n          nonInteractive\n          noLoop\n        />\n        <div className=\"description\">\n          {lang('GiftSearchEmpty')}\n        </div>\n        <Link\n          className=\"date\"\n          onClick={handleResetGiftsFilter}\n        >\n          {lang('GiftSearchReset')}\n        </Link>\n      </div>\n    );\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    const noContent = (!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById;\n    const noSpinner = isFirstTab && !canRenderContent;\n\n    return (\n      <div>\n        {renderCategories()}\n        {renderSpinnerOrContent(noContent, noSpinner)}\n      </div>\n    );\n  }\n\n  function renderCategories() {\n    if (resultType === 'gifts') {\n      return (\n        <div\n          className={buildClassName(\n            'contentCategoriesPanel',\n            !shouldShowContentPanel && 'hiddenPanel',\n            isGiftCollectionsShowed && 'noTransition',\n          )}\n        >\n          <StarGiftCollectionList peerId={chatId} />\n        </div>\n      );\n    }\n\n    if (resultType === 'stories') {\n      return (\n        <div\n          className={buildClassName(\n            'contentCategoriesPanel',\n            !shouldShowContentPanel && 'hiddenPanel',\n            isStoryAlbumsShowed && 'noTransition',\n          )}\n        >\n          <StoryAlbumList peerId={chatId} />\n        </div>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSpinnerOrContentBase(noContent: boolean, noSpinner: boolean) {\n    if (noContent) {\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div\n          className=\"content empty-list\"\n        >\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text={lang('ChatMemberListNoAccess')} />}\n        </div>\n      );\n    }\n\n    const isViewportIdsEmpty = viewportIds && !viewportIds?.length;\n\n    if (isViewportIdsEmpty && resultType === 'gifts') {\n      return renderNothingFoundGiftsWithFilter();\n    }\n\n    if (isViewportIdsEmpty) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? lang('ChatMemberListNoAccess') : lang('NoMembersFound');\n          break;\n        case 'commonChats':\n          text = oldLang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = oldLang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = oldLang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = oldLang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = oldLang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = oldLang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = oldLang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = oldLang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    if (!messagesById) {\n      // A TypeScript assertion, should never be really reached\n      return;\n    }\n\n    const noTransition = resultType === 'gifts' ? isGiftCollectionsShowed\n      : resultType === 'stories' ? isStoryAlbumsShowed : false;\n    return (\n      <div\n        className={buildClassName(\n          `content ${resultType}-list`,\n          shouldShowContentPanel && 'showContentPanel',\n          noTransition && 'noTransition',\n        )}\n        dir={oldLang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[]).map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutFiles={shouldWarnAboutFiles}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[]).map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[]).map((id) => {\n            const global = getGlobal();\n            const message = messagesById[id];\n            if (!message) return undefined;\n\n            const media = selectMessageDownloadableMedia(global, message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={message}\n                senderTitle={getSenderName(oldLang, message, chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={message.date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !message.isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[]).map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-channels\" onClick={() => openPremiumModal()}>\n                  {oldLang('UnlockSimilar')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(oldLang('MoreSimilarText', limitSimilarPeers), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'similarBots' ? (\n          <div key={resultType}>\n            {(viewportIds as string[]).map((userId, i) => (\n              <ListItem\n                key={userId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarBots!.length - 1 && 'blured',\n                )}\n\n                onClick={() => openChat({ id: userId })}\n              >\n                {isUserId(userId) ? (\n                  <PrivateChatInfo\n                    userId={userId}\n                    avatarSize=\"medium\"\n                  />\n                ) : (\n                  <GroupChatInfo\n                    chatId={userId}\n                    avatarSize=\"medium\"\n                  />\n                )}\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {}\n                <Button className=\"show-more-bots\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockMoreSimilarBots')}\n                  <Icon name=\"unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarBotsDescription', { count: limitSimilarPeers }, {\n                    withNodes: true,\n                    withMarkdown: true,\n                    pluralValue: limitSimilarPeers,\n                  }))}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (renderingGifts?.map((gift) => {\n            return (\n              <SavedGift\n                peerId={chatId}\n                key={getSavedGiftKey(gift)}\n                style={shouldApplyVtn ? `view-transition-name: vt${getSavedGiftKey(gift)}` : undefined}\n                gift={gift}\n                observeIntersection={observeIntersectionForMedia}\n              />\n            );\n          }))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const shouldUseTransitionForContent = resultType === 'stories' || resultType === 'gifts';\n  const contentTransitionKey = (() => {\n    if (resultType === 'stories') {\n      return selectedStoryAlbumId === 'all' ? 0 : selectedStoryAlbumId;\n    }\n    if (resultType === 'gifts') {\n      return activeCollectionId === 'all' ? 0 : activeCollectionId;\n    }\n    return 0;\n  })();\n\n  const handleOnStop = useLastCallback(() => {\n    setRestoreContentHeightKey(restoreContentHeightKey + 1);\n  });\n\n  function renderSpinnerOrContent(noContent: boolean, noSpinner: boolean) {\n    const baseContent = renderSpinnerOrContentBase(noContent, noSpinner);\n\n    const isSpinner = noContent && !noSpinner;\n\n    if (shouldUseTransitionForContent) {\n      return (\n        <Transition\n          className={`${resultType}-list`}\n          activeKey={contentTransitionKey}\n          name={resolveTransitionName('slideOptimized', animationLevel, undefined, oldLang.isRtl)}\n          shouldCleanup\n          shouldRestoreHeight\n          restoreHeightKey={restoreContentHeightKey}\n          contentSelector=\".Transition > .Transition_slide-active > .content\"\n        >\n          <Transition\n            activeKey={isSpinner ? 0 : 1}\n            name=\"fade\"\n            shouldCleanup\n            shouldRestoreHeight\n            restoreHeightKey={restoreContentHeightKey}\n            contentSelector=\".content\"\n            onStop={handleOnStop}\n          >\n            {baseContent}\n          </Transition>\n        </Transition>\n      );\n    }\n\n    return (\n      <Transition\n        activeKey={isSpinner ? 0 : 1}\n        name=\"fade\"\n        shouldCleanup\n        shouldRestoreHeight\n      >\n        {baseContent}\n      </Transition>\n    );\n  }\n\n  const activeListSelector = `.shared-media-transition > .Transition_slide-active`;\n  const itemSelector = !shouldUseTransitionForContent\n    ? `${activeListSelector} .${resultType}-list > .scroll-item`\n    /* eslint-disable @stylistic/max-len */\n    : `${activeListSelector} > .Transition > .Transition_slide-active > .Transition > .Transition_slide-active > .gifts-list > .scroll-item`;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={itemSelector}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(\n          monoforumChannel?.id || profileId,\n          isRightColumnShown && canRenderContent,\n          isSavedDialog,\n          Boolean(monoforumChannel),\n        )\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={resolveTransitionName('slideOptimized', animationLevel, undefined, oldLang.isRtl)}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n            restoreHeightKey={shouldUseTransitionForContent ? restoreContentHeightKey : undefined}\n            contentSelector={shouldUseTransitionForContent\n              ? '.Transition > .Transition_slide-active > .Transition > .Transition_slide-active > .content'\n              : undefined}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          className={buildClassName(!isActive && 'hidden')}\n          isShown={canRenderContent}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={oldLang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean, isForMonoforum?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} isForMonoforum={isForMonoforum} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): Complete<StateProps> => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { animationLevel, shouldWarnAboutFiles } = selectSharedSettings(global);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const isBot = user && isUserBot(user);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog\n      && (isGroup || (isChannel && isChatAdmin(chat))) && !chat?.isMonoforum;\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const { similarBotsIds } = selectSimilarBotsIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const tabState = selectTabState(global);\n    const { nextProfileTab, forceScrollProfileTab, savedGifts } = tabState;\n    const selectedStoryAlbumId = selectActiveStoriesCollectionId(global);\n    const storyIds = selectedStoryAlbumId !== 'all'\n      ? peerStories?.idsByAlbumId?.[selectedStoryAlbumId]?.ids\n      : peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(peerFullInfo?.starGiftCount) && !isSavedDialog;\n    const activeCollectionId = selectActiveGiftsCollectionId(global, chatId);\n    const peerGifts = savedGifts.collectionsByPeerId[chatId]?.[activeCollectionId];\n\n    const storyAlbums = global.stories.albumsByPeerId?.[chatId];\n    const giftCollections = global.starGiftCollections?.byPeerId?.[chatId];\n\n    const monoforumChannel = selectMonoforumChannel(global, chatId);\n    const isRestricted = chat && selectIsChatRestricted(global, chat.id);\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      isBot,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: peerGifts?.gifts,\n      storyAlbums,\n      giftCollections,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      selectedStoryAlbumId,\n      activeCollectionId,\n      giftsFilter: savedGifts.filter,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab,\n      forceScrollProfileTab,\n      animationLevel,\n      shouldWarnAboutFiles,\n      similarChannels: similarChannelIds,\n      similarBots: similarBotsIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarPeers: selectPremiumLimit(global, 'recommendedChannels'),\n      members: hasMembersTab ? members : undefined,\n      adminMembersById: hasMembersTab ? adminMembersById : undefined,\n      commonChatIds: commonChats?.ids,\n      monoforumChannel,\n    };\n  },\n)(Profile));\n","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: ElementRef<HTMLDivElement>,\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.clientHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport type { GiftProfileFilterOptions, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectCanUseGiftProfileAdminFilter,\n  selectCanUseGiftProfileFilter,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport { IS_MAC_OS } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  giftProfileFilter: GiftProfileFilterOptions;\n  canUseGiftFilter?: boolean;\n  canUseGiftAdminFilter?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  GiftList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n  NewDiscussionGroup,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  canEditBot,\n  giftProfileFilter,\n  canUseGiftFilter,\n  canUseGiftAdminFilter,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n    updateGiftProfileFilter,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const {\n    sortType: giftsSortType,\n    shouldIncludeUnlimited: shouldIncludeUnlimitedGifts,\n    shouldIncludeLimited: shouldIncludeLimitedGifts,\n    shouldIncludeUpgradable: shouldIncludeUpgradableGifts,\n    shouldIncludeUnique: shouldIncludeUniqueGifts,\n    shouldIncludeDisplayed: shouldIncludeDisplayedGifts,\n    shouldIncludeHidden: shouldIncludeHiddenGifts,\n  } = giftProfileFilter;\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.GiftList ? (\n      HeaderContent.GiftList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : managementScreen === ManagementScreens.NewDiscussionGroup ? (\n      HeaderContent.NewDiscussionGroup\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return oldLang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return oldLang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return oldLang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return oldLang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return oldLang('GroupInfo.Title');\n  }\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel={lang('AccDescrOpenMenu2')}\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, lang]);\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{oldLang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{oldLang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{oldLang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{oldLang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{oldLang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{oldLang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{oldLang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{oldLang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{oldLang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{oldLang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{oldLang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{oldLang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{oldLang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? oldLang('EditLink') : oldLang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{oldLang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={oldLang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <Icon name=\"delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={oldLang('DeleteLink')}\n                    text={oldLang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={oldLang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{oldLang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={oldLang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={oldLang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{oldLang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{oldLang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{oldLang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{oldLang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{oldLang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{oldLang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{oldLang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{oldLang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{oldLang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{oldLang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{oldLang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{oldLang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{oldLang('EditTopic')}</h3>;\n      case HeaderContent.GiftList:\n        return (\n          <>\n            <h3 className=\"title\">{lang('ProfileTabGifts')}</h3>\n            {canUseGiftFilter && chatId && (\n              <section className=\"tools\">\n                <DropdownMenu\n                  trigger={PrimaryLinkMenuButton}\n                  positionX=\"right\"\n                  autoClose={false}\n                >\n                  <MenuItem\n                    icon={giftsSortType === 'byDate' ? 'cash-circle' : 'calendar-filter'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { sortType: giftsSortType === 'byDate' ? 'byValue' : 'byDate' } },\n                    )}\n                  >\n                    {lang(giftsSortType === 'byDate' ? 'GiftSortByValue' : 'GiftSortByDate')}\n                  </MenuItem>\n\n                  <MenuSeparator />\n\n                  <MenuItem\n                    icon={shouldIncludeUnlimitedGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnlimited: !shouldIncludeUnlimitedGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnlimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeLimitedGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: {\n                        shouldIncludeLimited: !shouldIncludeLimitedGifts,\n                      } },\n                    )}\n                  >\n                    {lang('GiftFilterLimited')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUpgradableGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: {\n                        shouldIncludeUpgradable: !shouldIncludeUpgradableGifts,\n                      } },\n                    )}\n                  >\n                    {lang('GiftFilterUpgradable')}\n                  </MenuItem>\n\n                  <MenuItem\n                    icon={shouldIncludeUniqueGifts ? 'check' : 'placeholder'}\n\n                    onClick={() => updateGiftProfileFilter(\n                      { peerId: chatId, filter: { shouldIncludeUnique: !shouldIncludeUniqueGifts } },\n                    )}\n                  >\n                    {lang('GiftFilterUnique')}\n                  </MenuItem>\n\n                  {canUseGiftAdminFilter && (\n                    <>\n                      <MenuSeparator />\n                      <MenuItem\n                        icon={shouldIncludeDisplayedGifts ? 'check' : 'placeholder'}\n\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeDisplayed: !shouldIncludeDisplayedGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterDisplayed')}\n                      </MenuItem>\n\n                      <MenuItem\n                        icon={shouldIncludeHiddenGifts ? 'check' : 'placeholder'}\n\n                        onClick={() => updateGiftProfileFilter(\n                          { peerId: chatId, filter: { shouldIncludeHidden: !shouldIncludeHiddenGifts } },\n                        )}\n                      >\n                        {lang('GiftFilterHidden')}\n                      </MenuItem>\n                    </>\n                  )}\n                </DropdownMenu>\n              </section>\n            )}\n          </>\n        );\n      case HeaderContent.NewDiscussionGroup:\n        return <h3 className=\"title\">{oldLang('NewGroup')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <Icon name=\"add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={oldLang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <Icon name=\"stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.GiftList\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\" data-tauri-drag-region={IS_TAURI && IS_MAC_OS ? true : undefined}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? oldLang('Common.Back') : oldLang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    const giftProfileFilter = tabState.savedGifts.filter;\n    const canUseGiftFilter = chatId ? selectCanUseGiftProfileFilter(global, chatId) : false;\n    const canUseGiftAdminFilter = chatId ? selectCanUseGiftProfileAdminFilter(global, chatId) : false;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n      giftProfileFilter,\n      canUseGiftFilter,\n      canUseGiftAdminFilter,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\",\"primaryLink\":\"GXmXwIbx\",\"copy\":\"rB0gc1GX\",\"boostInfo\":\"BhoA3MT6\"};","import { memo, useMemo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { AnimationLevel, CustomPeer } from '../../../types';\n\nimport { GIVEAWAY_BOOST_PER_PREMIUM } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectIsGiveawayGiftsPurchaseAvailable, selectTabState } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState.ts';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { resolveTransitionName } from '../../../util/resolveTransitionName.ts';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n  animationLevel: AnimationLevel;\n};\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n  animationLevel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>\n            {lang(boost.isFromGiveaway\n              ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className={buildClassName(styles.boostInfo, 'chat-item-clickable')}\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months] || GIVEAWAY_IMG_LIST[3]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>\n                          {\n                            isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                              : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                          }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={resolveTransitionName('slideOptimized', animationLevel, undefined, lang.isRtl)}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>\n                    {lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">\n                {lang(\n                  isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n                )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig.giveawayBoostsPerPremium;\n    const { animationLevel } = selectSharedSettings(global);\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n      animationLevel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { isGraph } from './helpers/isGraph';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, openMonetizationVerificationModal, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<Set<string>>(new Set());\n  const errorCharts = useRef<Set<string>>(new Set());\n\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ peerId: chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current.clear();\n      errorCharts.current.clear();\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        if (!isGraph(graph)) {\n          return;\n        }\n        const isAsync = graph.graphType === 'async';\n        const isError = graph.graphType === 'error';\n\n        if (isAsync || loadedCharts.current.has(name)) {\n          return;\n        }\n\n        if (isError) {\n          loadedCharts.current.add(name);\n          errorCharts.current.add(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index] as HTMLElement, {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph,\n        });\n\n        loadedCharts.current.add(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n      && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? (\n              <span className={styles.decimalPart}>\n                .\n                {decimalTonPart}\n              </span>\n            ) : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ $\n          {integerUsdPart}\n          {decimalUsdPart ? (\n            <span className={styles.decimalUsdPart}>\n              .\n              {decimalUsdPart}\n            </span>\n          ) : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openMonetizationVerificationModal({\n        chatId,\n      });\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.size && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n    } = global;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '@teact';\nimport { memo, useEffect, useRef, useState } from '@teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { AnimationLevel, ProfileTabType, ThreadId } from '../../types';\nimport { ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent } from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState.ts';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { resolveTransitionName } from '../../util/resolveTransitionName.ts';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useScrollNotch from '../../hooks/useScrollNotch.ts';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isChatSelected: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  useScrollNotch({\n    containerRef,\n    selector: ':scope .custom-scroll, :scope .panel-content',\n  }, [contentKey, managementScreen, chatId, threadId]);\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.NewDiscussionGroup:\n            setManagementScreen(ManagementScreens.Discussion);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            isActive={isOpen && isActive}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          ref={containerRef}\n          name={resolveTransitionName('layers', animationLevel, shouldSkipTransition || shouldSkipHistoryAnimations)}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): Complete<StateProps> => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { animationLevel } = selectSharedSettings(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      animationLevel,\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/browser/windowEnvironment';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (!chatId || !messageId) return;\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): Complete<StateProps> => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ConfettiStyle } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line @stylistic/max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  const canvasRef = useRef<HTMLCanvasElement>();\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => pick(selectTabState(global), ['confetti']) as Complete<StateProps>,\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { SVG_NAMESPACE } from '../../../config';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.jpg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    addSvgDefinition(\n      <filter x=\"0\" y=\"0\" width=\"1\" height=\"1\" color-interpolation-filters=\"sRGB\" xmlns={SVG_NAMESPACE}>\n        <feImage href={waveRipple} result=\"waveImage\" />\n        <feDisplacementMap\n          in=\"SourceGraphic\"\n          in2=\"waveImage\"\n          scale={FILTER_SCALE}\n          xChannelSelector=\"R\"\n          yChannelSelector=\"B\"\n        />\n      </filter>,\n      FILTER_ID,\n    );\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): Complete<StateProps> => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiLimitTypeWithModal, ApiUser } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\nimport { IS_ANDROID, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useTauriEvent from '../../hooks/tauri/useTauriEvent';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport AudioPlayer from '../middle/panes/AudioPlayer';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport SnapEffectContainer from './visualEffects/SnapEffectContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n  isAccountFrozen?: boolean;\n  isAppConfigLoaded?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n  isAccountFrozen,\n  isAppConfigLoaded,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadTonGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    loadUserCollectibleStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n    loadPasswordInfo,\n    loadBotFreezeAppeal,\n    loadAllChats,\n    loadAllStories,\n    loadAllHiddenStories,\n    loadContentSettings,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  const lang = useLang();\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const containerRef = useRef<HTMLDivElement>();\n  const leftColumnRef = useRef<HTMLDivElement>();\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline({ isOnline: true });\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadContactList();\n      checkAppVersion();\n      loadAuthorizations();\n      loadPasswordInfo();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      loadAllChats({ listType: 'saved' });\n      loadAllStories();\n      loadAllHiddenStories();\n      loadContentSettings();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadAttachBots();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadTopReactions();\n      loadStarStatus();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadFeaturedEmojiStickers();\n      loadSavedReactionTags();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n      loadDefaultTopicIcons();\n      loadAnimatedEmojis();\n      loadAvailableReactions();\n      loadUserCollectibleStatuses();\n      loadGenericEmojiEffects();\n      loadPremiumGifts();\n      loadTonGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadQuickReplies();\n      loadTimezones();\n    }\n  }, [isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium && isAppConfigLoaded && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab, isAppConfigLoaded, isAccountFrozen]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (lang.code !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: lang.code });\n      }\n\n      loadCountryList({ langCode: lang.code });\n    }\n  }, [lang, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced && isAppConfigLoaded && !isAccountFrozen) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced, isAppConfigLoaded, isAccountFrozen]);\n\n  useEffect(() => {\n    loadBotFreezeAppeal();\n  }, [isAppConfigLoaded]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useTauriEvent<string>('deeplink', (event) => {\n    try {\n      const url = event.payload || '';\n      const decodedUrl = decodeURIComponent(url);\n      processDeepLink(decodedUrl);\n    } catch (e) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('Failed to process deep link', e);\n      }\n    }\n  });\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, IS_TAURI);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      <AudioPlayer noUi />\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <SnapEffectContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): Complete<StateProps> => {\n    const {\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { wasTimeFormatSetManually } = selectSharedSettings(global);\n\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n      || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n      isAccountFrozen,\n      isAppConfigLoaded: global.isAppConfigLoaded,\n    };\n  },\n)(Main));\n","import type { Event } from '@tauri-apps/api/event';\nimport { useEffect } from '../../lib/teact/teact';\n\nimport { IS_TAURI } from '../../util/browser/globalEnvironment';\n\nexport default function useTauriEvent<T>(name: string, callback: (event: Event<T>) => void) {\n  return useEffect(() => {\n    if (!IS_TAURI) {\n      return undefined;\n    }\n\n    let removeListener: VoidFunction | undefined;\n\n    const setUpListener = async () => {\n      const { listen } = await import('@tauri-apps/api/event');\n      removeListener = await listen<T>(name, (event) => {\n        callback(event);\n      });\n    };\n\n    setUpListener().catch((error) => {\n      // eslint-disable-next-line no-console\n      console.error(`Could not set up window event listener. ${error}`);\n    });\n\n    return () => {\n      removeListener?.();\n    };\n  }, [name, callback]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>\n          {' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          onClearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): Complete<StateProps> => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","_ref","isOwn","peerId","currentUserId","forEach","reaction","type","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","SNAP_ANIMATION_DELAY","lastVideoProcessingNotificationTime","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","localIsPrivate","isPrivate","localPeerId","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","arguments","undefined","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","_ref8","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","_ref9","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","updateTopic","selectThreadIdFromMessage","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","isAnimatingAsSnap","selectCanAnimateSnapEffect","setTimeout","getGlobal","stillDeletedIds","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","poll","webPage","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","replaceWebPage","reportDeliveryUntilDate","getServerTime","reportMessageDelivery","isNotJoined","selectIsChatListed","loadTopChats","lastMessage","addMessages","_ref2","currentChatId","getMessageText","text","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","updatePeerFullInfo","hasScheduledMessages","isFromNew","apiUpdate","keys","selectChatScheduledMessages","map","clearMessageTranslation","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","newScheduledMessageId","_ref3","showNotification","key","title","messageListType","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","_ref4","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref5","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","newIds","hadVideoProcessing","some","isVideoProcessingPending","processedVideoId","_ref6","actionText","payload","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","senderId","deleteParticipantHistory","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","_ref7","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","executeForwardMessages","sendParams","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","messagePriceInStars","isSilent","scheduledAt","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","Boolean","sendAs","selectDraft","localMessages","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","forwardableRealMessages","selectCanForwardMessage","messageSlices","config","maxForwardedCount","splitMessagesForForwarding","slice","forwardParams","forwardedLocalMessagesSlice","entities","params","sendMessageOrReduceLocal","isShareMessageModalShown","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","result","limit","count","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","getPeerStarsForMessage","peer","selectPeer","isApiPeerChat","selectIsMonoforumAdmin","paidMessagesStars","fullInfo","selectUserFullInfo","localMessage","sendMessage","currentMessageKey","IS_IOS","rafPromise","progressCallback","attachment","progress","set","updateUploadByMessageKey","delete","fetchUnreadMentions","addUnreadMentions","shouldForceRender","onError","isRestricted","selectIsChatRestricted","viewportIds","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","contentToBeScheduled","isForwarding","draftReplyInfo","draftSuggestedPostInfo","suggestedPostInfo","messageReplyInfo","suggestedPostPrice","price","suggestedPostCurrency","currency","STARS_CURRENCY_CODE","suggestedPostAmount","amount","stars","balance","openStarsBalanceModal","topup","balanceNeeded","TON_CURRENCY_CODE","ton","suggestedMessage","suggestedMedia","noWebPage","selectNoWebPage","isInvertedMedia","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","groupIndex","group","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","localForwards","starsForOneMessage","getActions","sendMessages","messageIdsForUndo","forwardedIds","forwardedMessage","firstMessage","firstSendParam","storySendMessage","gif","variables","pluralValue","titleKey","formatStarsAsText","getTranslationFn","icon","shouldUseCustomIcon","sendMessagesWithNotification","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","oldTranslate","join","selectEditingMessage","setEditingId","todo","cancelApiProgress","currentDraft","isMonoforum","effectId","shouldKeepReply","shouldKeepSuggestedPost","currentReplyInfo","updatedReplyInfo","updatedSuggestedPostInfo","clearDraft","monoforumPeerId","scheduleDate","messageSuggestedPost","futureMin","appConfig","starsSuggestedPostFutureMin","validScheduleDate","updateDraftSuggestedPostInfo","insertingPeerIdMention","isUnpin","isOneSide","shouldDeleteForAll","payloadMessageList","messageIdsToDelete","isChatChannel","isChatSuperGroup","editingId","selectEditingId","notifications","dismissAction","isArray","dismissNotification","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","subtitle","subject","isOptional","connectionState","isUserBot","participantId","selectIsCurrentUserFrozen","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","selectCurrentChat","then","fetchUnreadReactions","webPagePreview","webPagePreviewId","completedIds","incompletedIds","currentTodo","currentCompletions","completions","currentCompletionIds","c","itemId","newCompletions","completedBy","completedAt","finalCompletions","newContent","items","selectPollFromMessage","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","selectCustomEmoji","customEmoji","customEmojis","loadStarStatus","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","isForPaidReactions","sendPaidReactionsAsPeerIds","isApiPeerUser","selectIsChatBotNotStarted","updateSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","updateGlobalSearch","sponsoredPeer","reportAdModal","enabled","updateUserFullInfo","areAdsEnabled","neededAmount","reject","rejectComment","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","linkContext","urlWithProtocol","ensureProtocol","parsedUrl","URL","isMixedScript","isMixedScriptUrl","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","isWhitelisted","whitelistedDomains","RE_TELEGRAM_LINK","toggleSafeLinkModal","toString","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","quoteOffset","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","shouldIncrement","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","MESSAGES_TO_REPORT_DELIVERY","reportDeliveryTimeout","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","currentIds","cId","clear","botId","webAppKey","bot","preparedMessageModal","sendWebAppEvent","event","eventType","eventData","supportedFilters","peerTypes","sharePreparedMessageModal","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","tonGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","collectibleEmojiStatuses","statuses","documentIds","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","shouldIgnoreCache","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","globalSearch","searchResult","sponsoredResult","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","context","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","publicPosts","previousSearchFlood","searchFlood","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","queryIsFree","remains","lang","starsAmount","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","shouldReuseParams","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","firstMessageId","topMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","isCommentsInfo","_ref0","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","_ref1","threads","updateThread","_ref10","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","accountDaysTtl","closeDeleteAccountModal","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","shouldRefundCharged","chatRefundModal","starsToRefund","shouldSharePhoneNumber","isContact","phoneNumber","phone","loadPeerSettings","loadPeerStories","closeNewContactDialog","isPreload","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","referrerWebAppKey","customEmojiIconId","isCloseFriend","customEmojiId","duration","suggestedStatusModal","loadFullUser","currentPeerIds","botVerificationShownPeerIds","newPeerIds","BOT_VERIFICATION_PEERS_LIMIT","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webAppUpdate","_len3","_key3","currentTabState","openedWebApps","webApps","originalWebApp","updatedValue","updatedWebAppKey","getWebAppKey","addWebAppToOpenList","webApp","makeActive","openModalIfNotOpen","_len5","_key5","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","activeWebAppKey","isMoreAppsTabActive","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","_len7","_key7","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","k","isRemovedAppActive","openedWebAppsKeys","openedWebAppsCount","hasOpenedWebApps","_len9","_key9","replaceIsWebAppModalOpen","value","_len10","_ref11","_key10","runDebouncedForSearch","botFatherId","checkIfOpenOrActivate","requestUrl","webAppName","webAppForCheck","isWepAppOpened","_len4","_key4","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","buttonType","initDraftFromSuggestedMessage","copyTextToClipboard","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","currentInlineBotSettings","newResults","isGallery","searchInlineBot","botSender","openChatWithDraft","getMainUsername","queryId","allowPaidStars","resultId","sendInlineBotApiResult","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","appName","isFromBotMenu","isFullScreen","getIsWebAppsFullscreenSupported","changeWebAppModalState","state","mode","shouldMarkBotTrusted","openFrozenAccountModal","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","isWebAppsCloseConfirmationModalOpen","shouldSkipInFuture","updateSharedSettings","shouldSkipWebAppCloseConfirmation","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","name","about","langCode","selectSharedSettings","bio","isBotAccessEmojiGranted","isBotCanManageEmojiStatus","isAccessGranted","updateBotAppPermissions","geolocation","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","botUrl","freezeAppealUrl","botAppealUsername","getUsernameFromDeepLink","botFreezeAppealId","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","errorKey","isSuccess","password","email","recoveryEmail","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","payInputStarInvoice","inputInvoice","isTon","requestInputInvoice","getRequestInputInvoice","isPaymentFormLoading","form","handlePaymentFormError","formPrice","totalAmount","sendStarPaymentForm","directInfo","formId","openPriceConfirmModal","originalAmount","newAmount","hasErrorKey","requestInfo","saveInfo","selectPaymentInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","shouldUpgrade","giftId","slug","months","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","descriptionKey","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","forUserId","selectedResaleGift","giftModal","forPeerId","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","openBoostStatistics","shouldKeepOriginalDetails","upgradeStars","requestSavedGift","getRequestInputSavedStarGift","isWaitingForStarGiftUpgrade","closeGiftUpgradeModal","closeGiftInfoModal","inputSavedGift","reloadPeerSavedGifts","recipientId","transferStars","isWaitingForStarGiftTransfer","closeGiftTransferModal","toPeer","openGiftInfoModal","giftWithdrawModal","inputGift","closeGiftWithdrawModal","currentStarsStatus","needsTopupOptions","topupOptions","starsStatus","tonStatus","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","updateStarsBalance","isInbound","isOutbound","idsByCategoryName","stock","limited","resale","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","stockedStarGiftIds","availabilityRemains","availabilityTotal","resaleStarGiftIds","availabilityResale","starsCategory","starGifts","idsByCategory","resaleGifts","loadResaleGifts","shouldRefresh","isAllLoaded","attributesHash","RESALE_GIFTS_LIMIT","currentGifts","newGifts","currentUpdateIteration","updateIteration","attributes","counters","DEFAULT_RESALE_GIFTS_FILTER_OPTIONS","selectPeerSavedGifts","localNextOffset","fetchingFilter","selectGiftProfileFilter","fetchingCollectionId","selectActiveGiftsCollectionId","collectionId","currentFilter","currentCollectionId","replacePeerSavedGifts","loadPeerSavedGifts","updateStarsSubscriptionLoading","isCancelled","subscriptionId","requestInputGift","activeCollectionId","oldGifts","savedGifts","collectionsByPeerId","g","areInputSavedGiftsEqual","isUnsaved","samples","giftUpgradeModal","sampleAttributes","pinLimit","savedGiftPinLimit","currentPinnedGifts","newPinnedGifts","inputSavedGifts","updatePeerStarGiftCollections","collections","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","shouldIgnoreDefaultPrivacy","defaultPrivacy","paidReactionPrivacy","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","byKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","messageInteractions","recentPosts","post","storyInteractions","loadMessagesById","msgId","loadPeerStoriesByIds","storyIds","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateVerifyMonetizationModal","closeMonetizationVerificationModal","stories","hasNext","stateHash","isFirstRequest","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","lastReadStoryId","selectedAlbumId","selectActiveStoriesCollectionId","albumData","idsByAlbumId","albumId","updatePeerStoriesFullyLoaded","profileIds","isArchiveFullyLoaded","archiveIds","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","botsPrivacy","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","albums","albumsByPeerId","selectedStoryAlbumId","loadPeerProfileStories","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","_len6","_key6","removeActiveWebAppFromOpenList","shouldSkipConfirmation","shouldShowConfirmation","_len0","_key0","hasOpenedMoreThanOneWebApps","openWebAppsCloseConfirmationModal","_len8","_key8","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","selectActiveWebApp","newActiveWebApp","newActiveWebAppKey","clearOpenedWebApps","_len1","_key1","replaceWebAppModalState","miniAppsCachedPosition","size","miniAppsCachedSize","activeWebApp","trustedBotIds","newTrustedBotIds","callbackPayload","selectWebApp","newPlannedEvents","plannedEvents","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","emojiStatusAccessModal","locationAccessModal","addTabStateResetterAction","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getPeerTitle","forwardInfo","hiddenUserName","statefulContent","getMessageStatefulContent","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","isMuted","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","onMessageReady","openMediaFromTimestamp","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","forwardableMessageIds","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","selectMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","forNewTask","todoListModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","suggestMessageModal","suggestedPostApprovalModal","isSchedule","deleteMessageModal","additionalInfo","canReport","sponsorInfo","aboutAdsModal","args","pendingSendArgs","starsForSendMessage","currentContent","fetchingStatus","GlobalSearchContent","BotApps","PublicPosts","checkSearchPostsFlood","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","isFrozenAccountModalOpen","deleteAccountModal","selfDestructAccountDays","isAgeVerificationModalOpen","newContact","isByPhoneNumber","profileRatingModal","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","IS_TAURI","tauri","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","existingNotificationIndex","n","selectPeerPaidMessagesStars","isSavedMessages","isChatWithBot","selectIsChatWithBot","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","attachmentSettings","shouldPlayEffectInComposer","shouldPaidMessageAutoApprove","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","defaultTitle","PAGE_TITLE_TAURI","PAGE_TITLE","INACTIVE_MARKER","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","isOnline","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","prevFilter","updatedFilter","shouldIncludeUnlimited","shouldIncludeLimited","shouldIncludeUnique","shouldIncludeUpgradable","shouldIncludeDisplayed","shouldIncludeHidden","DEFAULT_GIFT_PROFILE_FILTER_OPTIONS","isPaymentMessageConfirmDialogOpen","priceConfirmModal","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","selectReplyMessage","messageMedia","selectTimestampableMedia","maxMessageDuration","openMediaViewer","MediaViewerOrigin","Inline","openAudioPlayer","AudioOrigin","replyMessageMedia","maxReplyMessageDuration","currentChatPlaybacks","playbackByChatId","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","openSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","localStorage","removeItem","IS_SCREEN_LOCKED_CACHE_KEY","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","clearStarPayment","getStarsTransactionFromGift","subscription","starsSubscriptionModal","getPromiseActions","starGift","uniqueGift","giftReceiverId","savedId","fromId","starsToConvert","isNameHidden","isSaved","isConverted","upgradeMsgId","canUpgrade","alreadyPaidUpgradeStars","canExportAt","giftInfoModal","giftResalePriceComposerModal","closeGiftInfoValueModal","openGiftModal","resetResaleGifts","giftInfoValueModal","valueInfo","giftStatusInfoModal","giftTransferModal","activeCollectionByPeerId","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerId","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","monetizationVerificationModal","INVALIDATE_FULL_CHAT_FIELDS","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","closeMessageNotifications","chatUpdate","invalidateFullInfo","selectChatListType","addChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","loadPinnedDialogs","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","targetUserFullInfo","botInfo","menuButton","commands","threadInfos","polls","webPages","addUsers","addChats","webpageType","updateFullWebPage","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","closeWebApp","processPremiumFloodWait","private","requestLangPackDifference","applyLangPackDifference","strings","keysToRemove","actionStarGift","openUniqueGiftBySlug","receiver","updateNotifyDefaults","peerType","addNotifyException","notifySettings","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","selectPhoneCallUser","notifyAboutCall","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","giftModalState","formatCurrencyAsString","subscriptionPricing","subscriptionPeriod","starsModalState","isCompleted","starGiftModalState","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","_jsx","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useLang","useEffect","updateAppBadge","children","formatIntegerCompact","ArchivedChats","Loading","onNewPrivateChat","onNewChannel","onNewGroup","isAccountFrozen","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","_jsxs","_Fragment","MenuItem","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Icon","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","animationLevel","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","markChatMessagesRead","transitionRef","useRef","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","scrollToTop","useLastCallback","activeList","scrollTo","top","behavior","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderUnreadChatsCountersById","useFolderManagerForUnreadChatsByFolder","handleReadAllChats","unreadChatIds","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","Folders","destructive","renderTextWithEntities","noCustomEmojiPlayback","noTitleAnimations","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","placeholderRef","shouldRenderPlaceholder","noMountTransition","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","Transition","resolveTransitionName","activeKey","renderCount","activeFolder","isFolder","ChatList","folderType","isMainList","canDisplayArchive","withTags","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","Spinner","totalLimit","onSelectCurrent","accounts","useMultiaccountInfo","currentCount","getCurrentProdAccountCount","maxCount","getCurrentMaxAccountCount","currentAccountInfo","account","shouldShowLimit","handleLimitClick","newAccountUrl","freeIndex","getAccountSlotUrl","isSameServer","isTest","mockUser","isCustomPeer","peerColorId","emojiStatusId","hasSeparator","customIcon","Avatar","previewUrl","avatarUri","FullNameTitle","withEmojiStatus","emojiStatusSize","MenuSeparator","rel","attachBots","selectTheme","canInstall","accountsTotalLimit","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSharedSettingOption","updatePerformanceSettings","openChatByUsername","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","location","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectMyProfile","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MED","wasAnimationLevelSetManually","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","IS_MULTIACCOUNT_SUPPORTED","AccountMenuItems","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","collectibleStatuses","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","collectibleStatus","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","withSparkles","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","oldLang","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","areContactsVisible","LeftColumnContent","Contacts","hasMenu","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","handleSearchEnter","GlobalSearch","isSearchRelevant","isSearchFocused","searchInputPlaceholder","versionString","APP_REVISION","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","withStoryToggler","searchContent","PeerChip","canClose","isCloseNonDestructive","clickArg","fullVersion","APP_NAME","IS_MAC_OS","DropdownMenu","trigger","footer","forceOpen","transformOriginX","onTransitionEnd","LeftSideMenuItems","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","onEnter","StoryToggler","canShow","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","TRANSITION_RENDER_COUNT","closeTimeout","onTopicSearch","openLeftColumnContent","isNewChatButtonShown","setIsNewChatButtonShown","tauriUpdate","setTauriUpdate","isTauriUpdateDownloading","setIsTauriUpdateDownloading","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","contentKey","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","downloadAndInstall","relaunch","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","checkTauriUpdate","checkUpdate","useInterval","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","fluid","badge","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","NewChat","ContentType","RENDER_COUNT","leftColumn","nextFoldersAction","isChatOpen","selectIsForumPanelOpen","isFirstChatFolderActive","isArchivedStoryRibbonShown","settingsScreen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","blur","EditProfile","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsAllowedContacts","PrivacyGiftsDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","PrivacyNoPaidMessages","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","prevSettingsScreenRef","useStateRef","usePrevious","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","withSwipeControl","currentScreen","isChannel","LeftMain","MediaViewer","ReactionPicker","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","viewportPinnedIds","lastFocusedId","clampIndex","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ariaLabelLang","onReadAll","isContextMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","onContextMenu","hasActiveMiddleSearch","shouldShowCount","mentionsCount","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleReadAllReactions","handleReadAllMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","container","element","margin","ScrollDownButton","styles","handleClick","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","withUsers","currentAlbum","dateGroups","originalDate","datetime","getDayStartAt","senderGroups","currentDateGroup","currentSenderGroup","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","mainMessage","isPaidMedia","nextMessage","lastMessageInSenderGroup","nextMessageDayStartsAt","newDateGroup","paidMessageStars","postAuthorTitle","inlineButtons","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","countryList","phoneCodes","phoneCodeList","isLoadingFullUser","hasMessages","loadCommonChats","phoneCountry","registrationMonth","nameChangeDate","photoChangeDate","getCountryCodeByIso","botInfoPhotoUrl","useMedia","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isChatInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","height","stopEvent","securityNameInfo","time","formatPastDatetime","withNodes","withMarkdown","securityPhotoInfo","tableData","renderText","isoToEmoji","iso2","defaultName","formatRegistrationMonth","commonChatsCount","Link","AvatarList","style","buildStyle","src","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","Skeleton","forceAspectRatio","MiniTable","keyClassName","isVerified","INTERSECTION_THROTTLE_FOR_MEDIA","IS_ANDROID","ownProps","withAvatar","isSystemBotChat","isSystemBot","isAnonymousForwards","isAnonymousForwardsChat","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","selectForwardedSender","isRepliesChat","appearanceOrder","updateInsertingPeerIdMention","messageSender","noAppearanceAnimation","markShown","MESSAGE_APPEARANCE_DELAY","avatarPeer","isAvatarPeerUser","handleOpenChat","handleMention","EDITABLE_INPUT_CSS_SELECTOR","handleAvatarClick","avatarRef","contextMenuAnchor","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","canMention","shouldRenderContextMenu","hiddenName","renderAvatar","anchor","SponsoredContextMenuContainer","selectSponsoredMessage","activeDownloads","selectActiveDownloads","downloadableMedia","isDownloading","getIsDownloading","canAutoLoadMedia","selectCanAutoLoadMedia","canAutoPlayMedia","selectCanAutoPlayMedia","observeIntersectionForLoading","observeIntersectionForPlaying","viewSponsored","hideSponsored","clickSponsored","openAboutAdsModal","contentRef","shouldObserve","observe","observeIntersection","useIntersectionObserver","rootRef","debounceMs","threshold","handleBeforeContextMenu","target","isIntersecting","handleHideSponsoredMessage","isGif","hasMedia","handleOpenMedia","SponsoredMessage","handleOpenAboutAdsModal","sizeCalculations","calculatedWidth","contentWidth","calculateMediaDimensions","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","noMediaCorners","onMouseDown","preventMessageInputBlur","PeerColorWrapper","peerColor","Photo","canAutoLoad","noAvatars","forcedWidth","Video","canAutoPlay","renderMediaContent","isRecommended","BadgeButton","isRectangular","renderContent","MessageAppendix","triggerRef","canShowAds","messageGroups","getContainerHeight","isViewportNewest","isComments","isEmptyThread","isChannelChat","isChatMonoforum","anchorIdRef","memoUnreadDividerBeforeIdRef","memoFirstUnreadIdRef","isReady","hasLinkedChat","shouldRenderAccountInfo","onScrollDownToggle","onNotchToggle","onIntersectPinnedMessage","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","getIsReady","useDerivedSignal","areDatesClickable","observeIntersectionForReading","markMentionsRead","animateUnreadReaction","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","viewportPinnedIdsToRemove","scheduledToUpdateViews","entry","dataset","shouldUpdateViews","albumMainId","hasUnreadReaction","useBackgroundMode","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","fabTrigger","offsetHeight","scrollHeight","scrollTop","fabOffsetTop","offsetTop","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","useOnIntersect","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","requestMeasure","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","renderPaidMessageAction","album","messagesLength","userTitle","renderSuggestedPostInfoAction","userLink","renderPeerLink","originalMessage","titleText","getSuggestedChangesInfo","getSuggestedChangesActionText","formatTonAsText","convertTonFromNanos","formatScheduledDateTime","actionMessageStyles","suggestedPostContainer","suggestedPostTitle","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","usePreviousDeprecated","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","isLastInList","ActionMessage","observeIntersectionForBottom","isJustAdded","getIsMessageListReady","currentDocumentGroupId","senderGroupElements","messageIndex","isOwnMessage","isMessageAlbum","getMessageHtmlId","documentGroupId","nextDocumentGroupId","isTopicTopMessage","isFirstInGroup","isLastInGroup","isFirstInDocumentGroup","isLastInDocumentGroup","originalId","getMessageOriginalId","noComments","Message","withSenderName","noReplies","lastMessageOrAlbum","lastAppearanceOrder","firstMessageOrAlbum","SenderGroupContainer","calculateSenderGroups","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListAccountInfo","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","TopicIcon","renderTopic","patternColor","selectThemeValues","handleOpenPremiumModal","handleGetMoreStars","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","Unlock","formatStarsAsIcon","asFont","containerClassName","pill","Sparkles","preset","Content","runDebouncedForScroll","selectCurrentMessageIds","restrictionReasons","selectActiveRestrictionReasons","focusingId","withLastMessageWhenPreloading","chatBot","isNonContact","canAddContact","hasCustomGreeting","isAppConfigLoaded","monoforumChannelId","selectMonoforumChannel","canTranslate","selectCanTranslateChat","isTranslationDisabled","shouldAutoTranslate","hasAutoTranslation","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","selectIsInSelectMode","linkedChatId","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","isChatProtected","selectIsChatProtected","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadFactChecks","requestChatTranslation","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","inviterId","isViaRequest","orderRule","orderBy","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","classList","contains","requestMutation","stuckDateEl","allElements","containerTop","computedStyle","getComputedStyle","headerActionsHeight","parseInt","getPropertyValue","findStuckDate","currentStuck","remove","useStickyDates","handleScroll","focusedMessage","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","handleResize","contentRect","useResizeObserver","currentNormalHeight","normalHeight","containerHeight","prevContainerHeight","useContainerHeight","firstElementChild","clientHeight","rememberScrollPositionRef","preservedItemElements","getBoundingClientRect","forceMeasure","useLayoutEffectWithPrevDeps","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","forceDuration","isResized","newScrollTop","newAnchorTop","getOffsetToContainer","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","beginHeavyAnimation","shouldRenderGreeting","isEmptyTopic","Restricted","PremiumRequired","ContactGreeting","NoMessages","MessageList","AccountInfo","StarsRequired","onScroll","RequirementToContactMessage","MessageListContent","backgroundColor","MessageSelectToolbar","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","renderAudio","audio","performer","fileName","renderVoice","senderName","mediaDuration","selectMessageMediaDuration","noUi","isFullWidth","onPaneStateChange","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","renderingMessage","useCurrentOrPrev","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","mediaHash","useMessageMediaHash","mediaData","mediaMetadata","useMessageMediaMetadata","artist","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","setCurrentTime","useAudioPlayer","makeTrackId","shouldForceOpen","useHeaderPane","onStateChange","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","volumeIcon","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","renderPlaybackRateMenuItem","drawRect","radius","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","useLayoutEffect","firstChild","currentElement","transform","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","getLoadingPinnedId","getCurrentPinnedIndex","shouldHide","onFocusPinnedMessage","clickBotInlineButton","pinMessage","loadPinnedMessages","currentPinnedIndex","pinnedMessage","pinnedMessagesCount","pinnedMessageNumber","topMessageTitle","getMessageVideo","isVideoThumbnail","previewPhotoSizes","mediaThumbnail","useThumbnail","mediaBlobUrl","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","renderingPinnedMessage","useEnsureMessage","noOpenTransition","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","handleAllPinnedClick","handleMessageClick","nextMessageId","cycleRestrict","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","PinnedMessageNavigation","thumbDataUri","isFullVideo","asSpoiler","getPictogramDimensions","srcUrl","shouldRenderVideo","draggable","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","MessageSummary","truncateLength","noEmoji","emojiSize","shouldStopPropagation","renderKeyboardButtonText","audioMessage","emojiStatusSticker","emojiStatusSlug","isRightColumnShown","currentTransitionKey","openThreadWithInfo","openPreviousChat","toggleLeftColumn","openStickerSet","isBackButtonActive","isDesktop","isTablet","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","handleOpenSearch","closest","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","prevTransitionKey","isAudioPlayerActive","isAudioPlayerRendering","isPinnedMessagesFullWidth","renderBackButton","asClose","withUnreadCounter","UnreadCounter","savedMessagesStatus","displayChatId","linkedMonoforumId","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","noRtl","onEmojiStatusClick","GroupChatInfo","withMonoforumStatus","renderChatInfo","HeaderPinnedMessage","AudioPlayer","HeaderActions","canExpandActions","sponsoredMessage","renderingSponsoredMessage","withResizeObserver","handleAboutClick","getApiPeerColorClass","SponsoredMessageContextMenuContainer","selectPeerFullInfo","botVerification","wasShown","markBotVerificationInfoShown","markAsShowed","iconId","isAutoArchived","canReportSpam","canBlockContact","openAddContactDialog","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hidePeerSettingsBar","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","renderingPeer","isBasicGroup","isChatBasicGroup","renderingCanAddContact","renderingCanBlockContact","renderingCanReportSpam","renderingIsAutoArchived","handleAddContact","handleConfirmBlock","handleCloseReportPane","handleChatReportSpam","isRendering","isText","confirmIsDestructive","Checkbox","onCheck","chargedPaidMessageStars","openChatRefundModal","handleRefund","messageStarIcon","messageStars","root","noForcedUpperCase","FALLBACK_PANE_STATE","isMiddleSearchOpen","isAudioPlayerRendered","withRightColumnAnimation","selectCanAnimateRightColumn","getAudioPlayerState","setAudioPlayerState","getPinnedState","setPinnedState","getGroupCallState","setGroupCallState","getChatReportState","setChatReportState","getBotAdState","setBotAdState","getBotVerificationState","setBotVerificationState","getPaidMessageChargeState","setPaidMessageChargeState","isFirstRenderRef","useEffectOnce","audioPlayerState","botVerificationState","pinnedState","stateArray","isFirstRender","totalHeight","middleColumn","applyAnimationState","setExtraStyles","GroupCallTopPane","ChatReportPane","BotVerificationPane","PaidMessageChargePane","BotAdPane","userName","isPrimary","ReactorListModal","MiddleSearch","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isMainThread","canSubscribe","shouldJoinToSend","isJoinToSend","shouldSendJoinRequest","isJoinRequest","selectIsUserBlocked","canRestartBot","canStartBot","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","isClosed","isMonoforumAdmin","shouldBlockSendInMonoforum","canShowOpenChatButton","isUserRightBanned","getHasAdminRight","userFull","freezeAppealChat","arePeerSettingsLoaded","currentUserBannedRights","defaultBannedRights","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","dropAreaState","setDropAreaState","DropAreaState","None","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","forceUpdate","useForceUpdate","willSwitchMessageList","propertyName","currentTarget","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","handleMouseMove","newWidth","clientX","stopDrag","cleanup","offsetWidth","useResize","handleDragEnter","dataTransfer","shouldDrawQuick","IS_SAFARI","item","every","kind","isImage","QuickFile","Document","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","FrozenAccountPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","MOBILE_SCREEN_MAX_WIDTH","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","useFluidBackgroundFilter","isMessagingDisabled","withMessageListBottomShift","onDoubleClick","onDragEnter","MiddleHeaderPanes","MiddleHeader","isBlockingAnimation","onStop","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","IS_TRANSLATION_SUPPORTED","FloatingActionButtons","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","starsTransactionModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","SuggestMessageModal","SuggestedPostApprovalModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","WebAppsCloseConfirmationModal","GiftInfoModal","GiftInfoValueModal","GiftResalePriceComposerModal","SuggestedStatusModal","EmojiStatusAccessModal","LocationAccessModal","AboutAdsModal","GiftUpgradeModal","VerificationMonetizationModal","GiftWithdrawModal","GiftStatusInfoModal","PreparedMessageModal","SharePreparedMessageModal","GiftTransferModal","ChatRefundModal","PriceConfirmModal","FrozenAccountModal","DeleteAccountModal","AgeVerificationModal","ProfileRatingModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","usersById","filterPeersByQuery","sortChatIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","GiftList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","fromPeer","hasAdminRights","currentUserEmojiStatus","stickerRef","isHover","markHover","unmarkHover","canManage","totalIssued","getTotalGiftAvailability","starGiftUnique","resellPrice","resaleTonOnly","ribbonText","total","ribbonColor","CUSTOM_PEER_HIDDEN","getStickerFromGift","giftAttributes","getGiftAttributes","backdrop","pattern","radialPatternBackdrop","backdropColors","centerColor","edgeColor","RadialPatternBackground","backgroundColors","patternIcon","shouldPreloadPreview","nonInteractive","withSparkleEffect","formatTonAsIcon","shouldConvertFromNanos","GiftRibbon","GiftMenuItems","idPrefix","isProtected","useIsIntersecting","useMediaTransitionDeprecated","decoding","formatMediaDuration","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","isDense","imageHash","getStoryMediaHash","thumbUrl","dataUri","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","AnimatedIconFromSticker","forcePreview","selectedItemId","onItemSelect","clipPathContainerRef","selectedIndex","setClipPath","shouldAnimate","useHorizontalScroll","updateClipPath","clipPathContainer","childNodes","offsetLeft","containerWidth","left","toFixed","right","AnimatedTabItem","starGiftCollections","updateSelectedGiftCollection","resetSelectedGiftCollection","handleItemSelect","collection","AnimatedTabList","selectStoryAlbum","resetSelectedStoryAlbum","TABS","renderProfileInfo","profileId","isForMonoforum","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","shouldWarnAboutFiles","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","similarBotsIds","selectSimilarBotsIds","hasCommonChatsTab","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","pinnedStoryIds","storyByIds","archiveStoryIds","hasGiftsTab","starGiftCount","peerGifts","storyAlbums","giftCollections","monoforumChannel","giftsFilter","similarChannels","similarBots","limitSimilarPeers","commonChatIds","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","searchSharedMediaMessages","setNewChatMembersDialogState","loadStoriesArchive","loadChannelRecommendations","loadBotRecommendations","loadPreviewMedias","resetGiftProfileFilter","loadStarGiftCollections","loadStoryAlbums","deletingUserId","setDeletingUserId","isViewTransitionEnabled","enableViewTransition","disableViewTransition","restoreContentHeightKey","setRestoreContentHeightKey","tab","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","renderingGifts","setRenderingGifts","startViewTransition","shouldApplyVtn","useViewTransition","giftIds","getSavedGiftKey","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","handleLoadMoreMembers","prevGifts","prevGiftIds","newGiftIds","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","isGiftCollectionsShowed","markGiftCollectionsShowed","unmarkGiftCollectionsShowed","isStoryAlbumsShowed","markStoryAlbumsShowed","unmarkStoryAlbums","hasGiftsCollections","hasStoryAlbums","shouldShowContentPanel","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","Profile","tabListEl","maxDistance","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","newHeight","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","PreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","prevHasMemberTabs","newActiveTab","handleResetGiftsFilter","renderingDelay","SLIDE_TRANSITION_DURATION","canRenderContent","shouldUseTransitionForContent","contentTransitionKey","handleOnStop","renderSpinnerOrContent","noContent","noSpinner","baseContent","forceRenderHiddenMembers","NothingFound","isViewportIdsEmpty","SearchingDuck","noLoop","noTransition","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","Audio","onPlay","getSenderName","ListItem","memberId","adminMember","forceShowSelf","avatarSize","SavedGift","renderSpinnerOrContentBase","isSpinner","shouldRestoreHeight","restoreHeightKey","contentSelector","activeListSelector","itemSelector","InfiniteScroll","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","StarGiftCollectionList","StoryAlbumList","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","isInsideTopic","canEditTopic","getCanManageTopic","canEditBot","getCanAddContact","selectCanManage","isEditingInvite","canViewStatistics","giftProfileFilter","canUseGiftFilter","selectCanUseGiftProfileFilter","canUseGiftAdminFilter","selectCanUseGiftProfileAdminFilter","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","onScreenSelect","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","updateGiftProfileFilter","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","sortType","giftsSortType","shouldIncludeUnlimitedGifts","shouldIncludeLimitedGifts","shouldIncludeUpgradableGifts","shouldIncludeUniqueGifts","shouldIncludeDisplayedGifts","shouldIncludeHiddenGifts","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","Reactions","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","NewDiscussionGroup","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","PrimaryLinkMenuButton","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","avatarIcon","CUSTOM_PEER_TO_BE_DISTRIBUTED","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","isLoaded","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","quantity","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","boostInfo","formatDateAtTime","expires","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","openMonetizationVerificationModal","loadedCharts","errorCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","hidden","graph","isGraph","isAsync","graphType","create","topText","linkText","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","isOnlyConfirm","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","useScrollNotch","selector","close","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","prevChatId","prevThreadId","RightHeader","AddChatMembers","onChatMemberSelect","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","Dialogs","processedHashes","downloadedHashes","cancelMediaHashDownloads","handleMediaDownloaded","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","handleLoad","focus","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","CONFETTI_COLORS","STAR_PATH","Path2D","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","w","h","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","diff","newPos","newVelocity","newFlicker","abs","sin","newRotation","PI","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","scale","rotate","fill","restore","beginPath","ellipse","hideTimeout","prevConfettiTime","containerStyle","leftSide","randomX","FILTER_ID","waveInfo","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","addSvgDefinition","xmlns","SVG_NAMESPACE","waveRipple","in","in2","xChannelSelector","yChannelSelector","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","game","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadTonGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadUserCollectibleStatuses","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBotFreezeAppeal","loadAllStories","loadAllHiddenStories","loadContentSettings","loadBundle","callback","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","decodedUrl","removeListener","listen","setUpListener","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleFocus","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","setAttribute","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","ModalContainer","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","WaveContainer","SnapEffectContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","onClearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit"],"sourceRoot":""}