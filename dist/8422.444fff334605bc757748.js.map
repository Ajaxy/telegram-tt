{"version":3,"file":"8422.444fff334605bc757748.js","mappings":"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","sources":["webpack://telegram-t/./src/global/actions/api/chats.ts","webpack://telegram-t/./src/global/actions/ui/calls.ts","webpack://telegram-t/./src/global/reducers/calls.ts"],"sourcesContent":["import type {\n  ApiChat, ApiChatFolder, ApiChatlistExportedInvite,\n  ApiChatMember, ApiError, ApiUser,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport {\n  ChatCreationProgress,\n  ManagementProgress,\n  NewChatMembersProgress,\n  SettingsScreens,\n} from '../../../types';\n\nimport {\n  ALL_FOLDER_ID,\n  ARCHIVED_FOLDER_ID,\n  CHAT_LIST_LOAD_SLICE,\n  DEBUG,\n  RE_TG_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  TME_WEB_DOMAINS,\n  TMP_CHAT_ID,\n  TOP_CHAT_MESSAGES_PRELOAD_LIMIT,\n  TOPICS_SLICE,\n  TOPICS_SLICE_SECOND_LOAD,\n} from '../../../config';\nimport { formatShareText, parseChooseParameter, processDeepLink } from '../../../util/deeplink';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport { debounce, pause, throttle } from '../../../util/schedulers';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  isChatArchived,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSummaryOnly,\n  isChatSuperGroup,\n  isUserBot,\n  toChannelId,\n} from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMembers,\n  addChats,\n  addMessages,\n  addUsers,\n  addUserStatuses,\n  deleteTopic,\n  leaveChat,\n  replaceChatFullInfo,\n  replaceChatListIds,\n  replaceChats,\n  replaceThreadParam,\n  replaceUsers,\n  replaceUserStatuses,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListSecondaryInfo,\n  updateChats,\n  updateListedTopicIds,\n  updateManagementProgress,\n  updatePeerFullInfo,\n  updateThreadInfo,\n  updateTopic,\n  updateTopics,\n  updateUser,\n} from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatByUsername,\n  selectChatFolder, selectChatFullInfo, selectChatListType, selectCurrentChat, selectCurrentMessageList, selectDraft,\n  selectIsChatPinned,\n  selectLastServiceNotification,\n  selectStickerSet,\n  selectSupportChat, selectTabState, selectThread, selectThreadInfo, selectThreadOriginChat, selectThreadTopMessageId,\n  selectUser, selectUserByPhoneNumber, selectVisibleUsers,\n} from '../../selectors';\nimport { selectGroupCall } from '../../selectors/calls';\nimport { selectCurrentLimit } from '../../selectors/limits';\n\nconst TOP_CHAT_MESSAGES_PRELOAD_INTERVAL = 100;\nconst INFINITE_LOOP_MARKER = 100;\n\nconst SERVICE_NOTIFICATIONS_USER_MOCK: ApiUser = {\n  id: SERVICE_NOTIFICATIONS_USER_ID,\n  accessHash: '0',\n  type: 'userTypeRegular',\n  isMin: true,\n  phoneNumber: '',\n};\nconst CHATLIST_LIMIT_ERROR_LIST = new Set([\n  'FILTERS_TOO_MUCH',\n  'CHATLISTS_TOO_MUCH',\n  'INVITES_TOO_MUCH',\n]);\n\nconst runThrottledForLoadTopChats = throttle((cb) => cb(), 3000, true);\nconst runDebouncedForLoadFullChat = debounce((cb) => cb(), 500, false, true);\n\naddActionHandler('preloadTopChatMessages', async (global, actions): Promise<void> => {\n  const preloadedChatIds = new Set<string>();\n\n  for (let i = 0; i < TOP_CHAT_MESSAGES_PRELOAD_LIMIT; i++) {\n    await pause(TOP_CHAT_MESSAGES_PRELOAD_INTERVAL);\n\n    global = getGlobal();\n    const currentChatIds = Object.values(global.byTabId)\n      // eslint-disable-next-line @typescript-eslint/no-loop-func\n      .map(({ id: tabId }) => selectCurrentMessageList(global, tabId)?.chatId)\n      .filter(Boolean);\n\n    const folderAllOrderedIds = getOrderedIds(ALL_FOLDER_ID);\n    const nextChatId = folderAllOrderedIds?.find((id) => !currentChatIds.includes(id) && !preloadedChatIds.has(id));\n    if (!nextChatId) {\n      return;\n    }\n\n    preloadedChatIds.add(nextChatId);\n\n    actions.loadViewportMessages({ chatId: nextChatId, threadId: MAIN_THREAD_ID, tabId: getCurrentTabId() });\n  }\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id, threadId = MAIN_THREAD_ID, noRequestThreadInfoUpdate, tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const currentChatId = currentMessageList?.chatId;\n  const currentThreadId = currentMessageList?.threadId;\n\n  if (currentChatId && (currentChatId !== id || currentThreadId !== threadId)) {\n    const [isChatOpened, isThreadOpened] = Object.values(global.byTabId)\n      .reduce(([accHasChatOpened, accHasThreadOpened], { id: otherTabId }) => {\n        if (otherTabId === tabId || (accHasChatOpened && accHasThreadOpened)) {\n          return [accHasChatOpened, accHasThreadOpened];\n        }\n\n        const otherMessageList = selectCurrentMessageList(global, otherTabId);\n        const isSameChat = otherMessageList?.chatId === currentChatId;\n        const isSameThread = isSameChat && otherMessageList?.threadId === currentThreadId;\n\n        return [accHasChatOpened || isSameChat, accHasThreadOpened || isSameThread];\n      }, [currentChatId === id, false]);\n\n    const shouldAbortChatRequests = !isChatOpened || !isThreadOpened;\n\n    if (shouldAbortChatRequests) {\n      callApi('abortChatRequests', { chatId: currentChatId, threadId: isChatOpened ? currentThreadId : undefined });\n    }\n  }\n\n  if (!id) {\n    return;\n  }\n\n  const { currentUserId } = global;\n  const chat = selectChat(global, id);\n\n  if (chat?.hasUnreadMark) {\n    actions.toggleChatUnread({ id });\n  }\n\n  if (!chat) {\n    if (id === currentUserId) {\n      void callApi('fetchChat', { type: 'self' });\n    } else {\n      const user = selectUser(global, id);\n      if (user) {\n        void callApi('fetchChat', { type: 'user', user });\n      }\n    }\n  } else if (isChatSummaryOnly(chat) && !chat.isMin) {\n    actions.requestChatUpdate({ chatId: id });\n  }\n  actions.closeStoryViewer({ tabId });\n\n  if (threadId !== MAIN_THREAD_ID && !noRequestThreadInfoUpdate) {\n    actions.requestThreadInfoUpdate({ chatId: id, threadId });\n  }\n});\n\naddActionHandler('openComments', async (global, actions, payload): Promise<void> => {\n  const {\n    id, threadId, originChannelId, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const topMessageId = selectThreadTopMessageId(global, id, threadId);\n    if (!topMessageId) {\n      const chat = selectThreadOriginChat(global, id, threadId);\n      if (!chat) {\n        return;\n      }\n\n      actions.openChat({\n        id, threadId, tabId, noRequestThreadInfoUpdate: true,\n      });\n\n      const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n      if (!result) {\n        actions.openPreviousChat({ tabId });\n        return;\n      }\n      global = getGlobal();\n      global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n      setGlobal(global);\n\n      actions.openChat({\n        id,\n        threadId: result.topMessageId,\n        tabId,\n        shouldReplaceLast: true,\n        noRequestThreadInfoUpdate: true,\n      });\n    } else {\n      actions.openChat({\n        id,\n        threadId: topMessageId,\n        tabId,\n        noRequestThreadInfoUpdate: true,\n      });\n    }\n  }\n});\n\naddActionHandler('openLinkedChat', async (global, actions, payload): Promise<void> => {\n  const { id, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const chatFullInfo = await callApi('fetchFullChat', chat);\n\n  if (chatFullInfo?.fullInfo?.linkedChatId) {\n    actions.openChat({ id: chatFullInfo.fullInfo.linkedChatId, tabId });\n  }\n});\n\naddActionHandler('focusMessageInComments', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, messageId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  actions.focusMessage({\n    chatId, threadId, messageId, tabId,\n  });\n});\n\naddActionHandler('openSupportChat', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectSupportChat(global);\n  if (chat) {\n    actions.openChat({ id: chat.id, shouldReplaceHistory: true, tabId });\n    return;\n  }\n\n  actions.openChat({ id: TMP_CHAT_ID, shouldReplaceHistory: true, tabId });\n\n  const result = await callApi('fetchChat', { type: 'support' });\n  if (result) {\n    actions.openChat({ id: result.chatId, shouldReplaceHistory: true, tabId });\n  }\n});\n\naddActionHandler('loadAllChats', async (global, actions, payload): Promise<void> => {\n  const listType = payload.listType as 'active' | 'archived';\n  const { onReplace } = payload;\n  let { shouldReplace } = payload;\n  let i = 0;\n\n  const getOrderDate = (chat: ApiChat) => {\n    return chat.lastMessage?.date || chat.joinDate;\n  };\n\n  while (shouldReplace || !global.chats.isFullyLoaded[listType]) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllChats`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n\n    if (global.connectionState !== 'connectionStateReady' || global.authState !== 'authorizationStateReady') {\n      return;\n    }\n\n    const listIds = !shouldReplace && global.chats.listIds[listType];\n    const oldestChat = listIds\n      ? listIds\n        /* eslint-disable @typescript-eslint/no-loop-func */\n        .map((id) => global.chats.byId[id])\n        .filter((chat) => (\n          Boolean(chat && getOrderDate(chat))\n          && chat.id !== SERVICE_NOTIFICATIONS_USER_ID\n          && !selectIsChatPinned(global, chat.id)\n        ))\n        /* eslint-enable @typescript-eslint/no-loop-func */\n        .sort((chat1, chat2) => getOrderDate(chat1)! - getOrderDate(chat2)!)[0]\n      : undefined;\n\n    await loadChats(\n      listType,\n      oldestChat?.id,\n      oldestChat ? getOrderDate(oldestChat) : undefined,\n      shouldReplace,\n      true,\n    );\n\n    if (shouldReplace) {\n      onReplace?.();\n      shouldReplace = false;\n    }\n\n    global = getGlobal();\n  }\n});\n\naddActionHandler('loadFullChat', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, force, tabId = getCurrentTabId(), withPhotos,\n  } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const loadChat = async () => {\n    await loadFullChat(global, actions, chat, tabId);\n    if (withPhotos) {\n      actions.loadProfilePhotos({ profileId: chatId });\n    }\n  };\n\n  if (force) {\n    void loadChat();\n  } else {\n    runDebouncedForLoadFullChat(loadChat);\n  }\n});\n\naddActionHandler('loadTopChats', (): ActionReturnType => {\n  runThrottledForLoadTopChats(() => {\n    loadChats('active');\n    loadChats('archived');\n  });\n});\n\naddActionHandler('requestChatUpdate', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('requestChatUpdate', {\n    chat,\n    ...(chatId === SERVICE_NOTIFICATIONS_USER_ID && {\n      lastLocalMessage: selectLastServiceNotification(global)?.message,\n    }),\n  });\n});\n\naddActionHandler('updateChatMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateChat(global, chatId, { isMuted });\n  setGlobal(global);\n  void callApi('updateChatMutedState', { chat, isMuted, muteUntil });\n});\n\naddActionHandler('updateTopicMutedState', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, muteUntil = 0 } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const isMuted = payload.isMuted ?? muteUntil > 0;\n\n  global = updateTopic(global, chatId, topicId, { isMuted });\n  setGlobal(global);\n  void callApi('updateTopicMutedState', {\n    chat, topicId, isMuted, muteUntil,\n  });\n});\n\naddActionHandler('createChannel', async (global, actions, payload): Promise<void> => {\n  const {\n    title, about, photo, memberIds, tabId = getCurrentTabId(),\n  } = payload;\n\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let createdChannel: ApiChat | undefined;\n\n  try {\n    createdChannel = await callApi('createChannel', { title, about, users });\n  } catch (error) {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      chatCreation: {\n        progress: ChatCreationProgress.Error,\n      },\n    }, tabId);\n\n    setGlobal(global);\n\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!createdChannel) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = createdChannel;\n\n  global = getGlobal();\n  global = updateChat(global, channelId, createdChannel);\n  global = updateTabState(global, {\n    chatCreation: {\n      ...selectTabState(global, tabId).chatCreation,\n      progress: createdChannel ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n    },\n  }, tabId);\n  setGlobal(global);\n  actions.openChat({ id: channelId, shouldReplaceHistory: true, tabId });\n\n  if (channelId && accessHash && photo) {\n    await callApi('editChatPhoto', { chatId: channelId, accessHash, photo });\n  }\n});\n\naddActionHandler('joinChannel', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const { id: channelId, accessHash } = chat;\n\n  if (!(channelId && accessHash)) {\n    return;\n  }\n\n  try {\n    await callApi('joinChannel', { channelId, accessHash });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('deleteChatUser', (global, actions, payload): ActionReturnType => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!chat || !user) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChatUser', { chat, user });\n});\n\naddActionHandler('deleteChat', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  void callApi('deleteChat', { chatId: chat.id });\n});\n\naddActionHandler('leaveChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('leaveChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('deleteChannel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = leaveChat(global, chatId);\n  setGlobal(global);\n\n  if (selectCurrentMessageList(global, tabId)?.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  const { id: channelId, accessHash } = chat;\n  if (channelId && accessHash) {\n    void callApi('deleteChannel', { channelId, accessHash });\n  }\n});\n\naddActionHandler('createGroupChat', async (global, actions, payload): Promise<void> => {\n  const {\n    title, memberIds, photo, tabId = getCurrentTabId(),\n  } = payload;\n  const users = (memberIds as string[])\n    .map((id) => selectUser(global, id))\n    .filter(Boolean);\n\n  global = updateTabState(global, {\n    chatCreation: {\n      progress: ChatCreationProgress.InProgress,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const createdChat = await callApi('createGroupChat', {\n      title,\n      users,\n    });\n\n    if (!createdChat) {\n      return;\n    }\n\n    const { id: chatId } = createdChat;\n\n    global = getGlobal();\n    global = updateChat(global, chatId, createdChat);\n    global = updateTabState(global, {\n      chatCreation: {\n        ...selectTabState(global, tabId).chatCreation,\n        progress: createdChat ? ChatCreationProgress.Complete : ChatCreationProgress.Error,\n      },\n    }, tabId);\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      shouldReplaceHistory: true,\n      tabId,\n    });\n\n    if (chatId && photo) {\n      await callApi('editChatPhoto', {\n        chatId,\n        photo,\n      });\n    }\n  } catch (e: any) {\n    if (e.message === 'USERS_TOO_FEW') {\n      global = getGlobal();\n      global = updateTabState(global, {\n        chatCreation: {\n          ...selectTabState(global, tabId).chatCreation,\n          progress: ChatCreationProgress.Error,\n          error: 'CreateGroupError',\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('toggleChatPinned', (global, actions, payload): ActionReturnType => {\n  const { id, folderId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, id);\n  if (!chat) {\n    return;\n  }\n\n  const limit = selectCurrentLimit(global, 'dialogFolderPinned');\n\n  if (folderId) {\n    const folder = selectChatFolder(global, folderId);\n    if (folder) {\n      const shouldBePinned = !selectIsChatPinned(global, id, folderId);\n\n      const { pinnedChatIds, includedChatIds } = folder;\n      const newPinnedIds = shouldBePinned\n        ? [id, ...(pinnedChatIds || [])]\n        : (pinnedChatIds || []).filter((pinnedId) => pinnedId !== id);\n\n      // With both Pin and Unpin we need to re-add a user to the included group\n      const newIncludedChatIds = [id, ...includedChatIds];\n\n      void callApi('editChatFolder', {\n        id: folderId,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: newPinnedIds,\n          includedChatIds: newIncludedChatIds,\n        },\n      });\n    }\n  } else {\n    const listType = selectChatListType(global, id);\n    const isPinned = selectIsChatPinned(global, id, listType === 'archived' ? ARCHIVED_FOLDER_ID : undefined);\n\n    const ids = global.chats.orderedPinnedIds[listType === 'archived' ? 'archived' : 'active'];\n    if ((ids?.length || 0) >= limit && !isPinned) {\n      actions.openLimitReachedModal({\n        limit: 'dialogFolderPinned',\n        tabId,\n      });\n      return;\n    }\n    void callApi('toggleChatPinned', { chat, shouldBePinned: !isPinned });\n  }\n});\n\naddActionHandler('toggleChatArchived', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const chat = selectChat(global, id);\n  if (chat) {\n    void callApi('toggleChatArchived', {\n      chat,\n      folderId: isChatArchived(chat) ? 0 : ARCHIVED_FOLDER_ID,\n    });\n  }\n});\n\naddActionHandler('loadChatFolders', async (global): Promise<void> => {\n  const chatFolders = await callApi('fetchChatFolders');\n\n  if (chatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        ...chatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadRecommendedChatFolders', async (global): Promise<void> => {\n  const recommendedChatFolders = await callApi('fetchRecommendedChatFolders');\n\n  if (recommendedChatFolders) {\n    global = getGlobal();\n\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommendedChatFolders,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editChatFolders', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, idsToRemove, idsToAdd, tabId = getCurrentTabId(),\n  } = payload;\n  const limit = selectCurrentLimit(global, 'dialogFiltersChats');\n\n  const isLimitReached = idsToAdd\n    .some((id) => selectChatFolder(global, id)!.includedChatIds.length >= limit);\n  if (isLimitReached) {\n    actions.openLimitReachedModal({ limit: 'dialogFiltersChats', tabId });\n    return;\n  }\n\n  idsToRemove.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          pinnedChatIds: folder.pinnedChatIds?.filter((pinnedId) => pinnedId !== chatId),\n          includedChatIds: folder.includedChatIds.filter((includedId) => includedId !== chatId),\n        },\n      });\n    }\n  });\n\n  idsToAdd.forEach(async (id) => {\n    const folder = selectChatFolder(global, id);\n    if (folder) {\n      await callApi('editChatFolder', {\n        id,\n        folderUpdate: {\n          ...folder,\n          includedChatIds: folder.includedChatIds.concat(chatId),\n        },\n      });\n    }\n  });\n});\n\naddActionHandler('editChatFolder', (global, actions, payload): ActionReturnType => {\n  const { id, folderUpdate } = payload!;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    void callApi('editChatFolder', {\n      id,\n      folderUpdate: {\n        id,\n        emoticon: folder.emoticon,\n        pinnedChatIds: folder.pinnedChatIds,\n        ...folderUpdate,\n      },\n    });\n  }\n});\n\naddActionHandler('addChatFolder', async (global, actions, payload): Promise<void> => {\n  const { folder, tabId = getCurrentTabId() } = payload!;\n  const { orderedIds, byId } = global.chatFolders;\n\n  const limit = selectCurrentLimit(global, 'dialogFilters');\n  if (Object.keys(byId).length >= limit) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return;\n  }\n\n  const maxId = Math.max(...(orderedIds || []), ARCHIVED_FOLDER_ID);\n\n  // Clear fields from recommended folders\n  const { id: recommendedId, description, ...newFolder } = folder;\n\n  const newId = maxId + 1;\n  const folderUpdate = {\n    id: newId,\n    ...newFolder,\n  };\n  await callApi('editChatFolder', {\n    id: newId,\n    folderUpdate,\n  });\n\n  // Update called from the above `callApi` is throttled, but we need to apply changes immediately\n  actions.apiUpdate({\n    '@type': 'updateChatFolder',\n    id: newId,\n    folder: folderUpdate,\n  });\n\n  actions.requestNextSettingsScreen({\n    foldersAction: {\n      type: 'setFolderId',\n      payload: maxId + 1,\n    },\n    tabId,\n  });\n\n  if (!description) {\n    return;\n  }\n\n  global = getGlobal();\n  const { recommended } = global.chatFolders;\n\n  if (recommended) {\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        recommended: recommended.filter(({ id }) => id !== recommendedId),\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sortChatFolders', async (global, actions, payload): Promise<void> => {\n  const { folderIds } = payload!;\n\n  const result = await callApi('sortChatFolders', folderIds);\n  if (result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        orderedIds: folderIds,\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatFolder', async (global, actions, payload): Promise<void> => {\n  const { id } = payload;\n  const folder = selectChatFolder(global, id);\n\n  if (folder) {\n    await callApi('deleteChatFolder', id);\n  }\n});\n\naddActionHandler('toggleChatUnread', (global, actions, payload): ActionReturnType => {\n  const { id } = payload;\n  const chat = selectChat(global, id);\n  if (chat) {\n    if (chat.unreadCount) {\n      void callApi('markMessageListRead', { chat, threadId: MAIN_THREAD_ID });\n    } else {\n      void callApi('toggleDialogUnread', {\n        chat,\n        hasUnreadMark: !chat.hasUnreadMark,\n      });\n    }\n  }\n});\n\naddActionHandler('markTopicRead', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const lastTopicMessageId = chat.topics?.[topicId]?.lastMessageId;\n  if (!lastTopicMessageId) return;\n\n  void callApi('markMessageListRead', {\n    chat,\n    threadId: topicId,\n    maxId: lastTopicMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, {\n    unreadCount: 0,\n  });\n  global = updateThreadInfo(global, chatId, topicId, {\n    lastReadInboxMessageId: lastTopicMessageId,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('openChatByInvite', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n\n  const result = await callApi('openChatByInvite', hash);\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.chatId, tabId });\n});\n\naddActionHandler('openChatByPhoneNumber', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber, startAttach, attach, tabId = getCurrentTabId(),\n  } = payload!;\n\n  // Open temporary empty chat to make the click response feel faster\n  actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chat = await fetchChatByPhoneNumber(global, phoneNumber);\n  if (!chat) {\n    actions.openPreviousChat({ tabId });\n    actions.showNotification({\n      message: langProvider.translate('lng_username_by_phone_not_found').replace('{phone}', phoneNumber),\n      tabId,\n    });\n    return;\n  }\n\n  actions.openChat({ id: chat.id, tabId });\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n});\n\naddActionHandler('openTelegramLink', (global, actions, payload): ActionReturnType => {\n  const {\n    url,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    openChatByPhoneNumber,\n    openChatByInvite,\n    openStickerSet,\n    openChatWithDraft,\n    joinVoiceChatByLink,\n    showNotification,\n    focusMessage,\n    openInvoice,\n    processAttachBotParameters,\n    checkChatlistInvite,\n    openChatByUsername: openChatByUsernameAction,\n    openStoryViewerByUsername,\n    processBoostParameters,\n  } = actions;\n\n  if (url.match(RE_TG_LINK)) {\n    processDeepLink(url);\n    return;\n  }\n\n  const uri = new URL(url.toLowerCase().startsWith('http') ? url : `https://${url}`);\n  if (TME_WEB_DOMAINS.has(uri.hostname) && uri.pathname === '/') {\n    window.open(uri.toString(), '_blank', 'noopener');\n    return;\n  }\n\n  const hostname = TME_WEB_DOMAINS.has(uri.hostname) ? 't.me' : uri.hostname;\n  const hostParts = hostname.split('.');\n  if (hostParts.length > 3) return;\n  const pathname = hostParts.length === 3 ? `${hostParts[0]}/${uri.pathname}` : uri.pathname;\n  const [part1, part2, part3] = pathname.split('/').filter(Boolean).map((part) => decodeURI(part));\n  const params = Object.fromEntries(uri.searchParams);\n\n  let hash: string | undefined;\n  if (part1 === 'joinchat') {\n    hash = part2;\n  }\n\n  const hasStartAttach = params.hasOwnProperty('startattach');\n  const hasStartApp = params.hasOwnProperty('startapp');\n  const choose = parseChooseParameter(params.choose);\n  const storyId = part2 === 's' && (Number(part3) || undefined);\n  const hasBoost = params.hasOwnProperty('boost');\n\n  if (part1.match(/^\\+([0-9]+)(\\?|$)/)) {\n    openChatByPhoneNumber({\n      phoneNumber: part1.substr(1, part1.length - 1),\n      startAttach: params.startattach,\n      attach: params.attach,\n      tabId,\n    });\n    return;\n  }\n\n  if (storyId) {\n    openStoryViewerByUsername({\n      username: part1,\n      storyId,\n      tabId,\n    });\n\n    return;\n  }\n\n  if (part1.startsWith(' ') || part1.startsWith('+')) {\n    hash = part1.substr(1, part1.length - 1);\n  }\n\n  if (hash) {\n    openChatByInvite({ hash, tabId });\n    return;\n  }\n\n  if (part1 === 'addstickers' || part1 === 'addemoji') {\n    openStickerSet({\n      stickerSetInfo: {\n        shortName: part2,\n      },\n      tabId,\n    });\n    return;\n  }\n\n  if (part1 === 'share') {\n    const text = formatShareText(params.url, params.text);\n    openChatWithDraft({ text, tabId });\n    return;\n  }\n\n  if (part1 === 'addlist') {\n    const slug = part2;\n    checkChatlistInvite({ slug, tabId });\n    return;\n  }\n\n  const chatOrChannelPostId = part2 || undefined;\n  const messageId = part3 ? Number(part3) : undefined;\n  const commentId = params.comment ? Number(params.comment) : undefined;\n\n  if (params.hasOwnProperty('voicechat') || params.hasOwnProperty('livestream')) {\n    joinVoiceChatByLink({\n      username: part1,\n      inviteHash: params.voicechat || params.livestream,\n      tabId,\n    });\n  } else if (part1 === 'boost') {\n    const username = part2;\n    const id = params.c;\n\n    const isPrivate = !username && Boolean(id);\n\n    processBoostParameters({\n      usernameOrId: username || id,\n      isPrivate,\n      tabId,\n    });\n  } else if (hasBoost) {\n    const isPrivate = part1 === 'c' && Boolean(chatOrChannelPostId);\n    processBoostParameters({\n      usernameOrId: chatOrChannelPostId || part1,\n      isPrivate,\n      tabId,\n    });\n  } else if (part1 === 'c' && chatOrChannelPostId && messageId) {\n    const chatId = toChannelId(chatOrChannelPostId);\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n\n    if (messageId) {\n      focusMessage({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n    }\n  } else if (part1.startsWith('$')) {\n    openInvoice({\n      slug: part1.substring(1),\n      tabId,\n    });\n  } else if (part1 === 'invoice') {\n    openInvoice({\n      slug: part2,\n      tabId,\n    });\n  } else if ((hasStartAttach && choose) || (!part2 && hasStartApp)) {\n    processAttachBotParameters({\n      username: part1,\n      filter: choose,\n      startParam: params.startattach || params.startapp,\n      tabId,\n    });\n  } else {\n    openChatByUsernameAction({\n      username: part1,\n      messageId: messageId || Number(chatOrChannelPostId),\n      threadId: messageId ? Number(chatOrChannelPostId) : undefined,\n      commentId,\n      startParam: params.start,\n      startAttach: params.startattach,\n      attach: params.attach,\n      startApp: params.startapp,\n      originalParts: [part1, part2, part3],\n      tabId,\n    });\n  }\n});\n\naddActionHandler('processBoostParameters', async (global, actions, payload): Promise<void> => {\n  const { usernameOrId, isPrivate, tabId = getCurrentTabId() } = payload;\n\n  let chat: ApiChat | undefined;\n\n  if (isPrivate) {\n    const chatId = toChannelId(usernameOrId);\n    chat = selectChat(global, chatId);\n    if (!chat) {\n      actions.showNotification({ message: 'Chat does not exist', tabId });\n      return;\n    }\n  } else {\n    chat = await fetchChatByUsername(global, usernameOrId);\n    if (!chat) {\n      actions.showNotification({ message: 'User does not exist', tabId });\n      return;\n    }\n  }\n\n  if (!isChatChannel(chat)) {\n    actions.openChat({ id: chat.id, tabId });\n    return;\n  }\n\n  actions.openBoostModal({\n    chatId: chat.id,\n    tabId,\n  });\n});\n\naddActionHandler('acceptInviteConfirmation', async (global, actions, payload): Promise<void> => {\n  const { hash, tabId = getCurrentTabId() } = payload!;\n  const result = await callApi('importChatInvite', { hash });\n  if (!result) {\n    return;\n  }\n\n  actions.openChat({ id: result.id, tabId });\n});\n\naddActionHandler('openChatByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, messageId, commentId, startParam, startAttach, attach, threadId, originalParts, startApp,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  const webAppName = originalParts?.[1];\n  const isWebApp = webAppName && !Number(webAppName) && !originalParts?.[2];\n\n  if (!commentId) {\n    if (startAttach === undefined && messageId && !startParam\n      && chat?.usernames?.some((c) => c.username === username)) {\n      actions.focusMessage({\n        chatId: chat.id, threadId, messageId, tabId,\n      });\n      return;\n    }\n    if (!isWebApp) {\n      await openChatByUsername(\n        global, actions, username, threadId, messageId, startParam, startAttach, attach, tabId,\n      );\n      return;\n    }\n  }\n\n  const { chatId, type } = selectCurrentMessageList(global, tabId) || {};\n  const usernameChat = selectChatByUsername(global, username);\n  if (chatId && commentId && messageId && usernameChat && type === 'thread') {\n    const threadInfo = selectThreadInfo(global, chatId, messageId);\n\n    if (threadInfo && threadInfo.chatId === chatId) {\n      actions.focusMessage({\n        chatId: threadInfo.chatId,\n        threadId: threadInfo.threadId,\n        messageId: commentId,\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!isWebApp) actions.openChat({ id: TMP_CHAT_ID, tabId });\n\n  const chatByUsername = await fetchChatByUsername(global, username);\n\n  if (!chatByUsername) return;\n\n  global = getGlobal();\n\n  if (isWebApp && chatByUsername) {\n    const theme = extractCurrentThemeParams();\n\n    actions.requestAppWebView({\n      appName: webAppName,\n      botId: chatByUsername.id,\n      tabId,\n      startApp,\n      theme,\n    });\n    return;\n  }\n\n  if (!messageId) return;\n\n  const threadInfo = selectThreadInfo(global, chatByUsername.id, messageId);\n  let discussionChatId: string | undefined;\n\n  if (!threadInfo) {\n    const result = await callApi('requestThreadInfoUpdate', { chat: chatByUsername, threadId: messageId });\n    if (!result) return;\n\n    global = getGlobal();\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    setGlobal(global);\n\n    discussionChatId = result.discussionChatId;\n  } else {\n    discussionChatId = threadInfo.chatId;\n  }\n\n  if (!discussionChatId) return;\n\n  actions.focusMessage({\n    chatId: discussionChatId,\n    threadId: messageId,\n    messageId: Number(commentId),\n    tabId,\n  });\n});\n\naddActionHandler('togglePreHistoryHidden', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isEnabled,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: isEnabled });\n  setGlobal(global);\n\n  void callApi('togglePreHistoryHidden', { chat, isEnabled });\n});\n\naddActionHandler('updateChatDefaultBannedRights', (global, actions, payload): ActionReturnType => {\n  const { chatId, bannedRights } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('updateChatDefaultBannedRights', { chat, bannedRights });\n});\n\naddActionHandler('updateChatMemberBannedRights', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, bannedRights,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatMemberBannedRights', { chat, user, bannedRights });\n\n  global = getGlobal();\n\n  const updatedFullInfo = selectChatFullInfo(global, chat.id);\n  if (!updatedFullInfo) {\n    return;\n  }\n\n  const { members, kickedMembers } = updatedFullInfo;\n\n  const isBanned = Boolean(bannedRights.viewMessages);\n  const isUnblocked = !Object.keys(bannedRights).length;\n\n  global = updateChatFullInfo(global, chat.id, {\n    ...(members && isBanned && {\n      members: members.filter((m) => m.userId !== userId),\n    }),\n    ...(members && !isBanned && {\n      members: members.map((m) => (\n        m.userId === userId\n          ? { ...m, bannedRights }\n          : m\n      )),\n    }),\n    ...(isUnblocked && kickedMembers && {\n      kickedMembers: kickedMembers.filter((m) => m.userId !== userId),\n    }),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('updateChatAdmin', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, adminRights, customTitle,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  await callApi('updateChatAdmin', {\n    chat, user, adminRights, customTitle,\n  });\n\n  const chatAfterUpdate = await callApi('fetchFullChat', chat);\n  if (!chatAfterUpdate?.fullInfo) {\n    return;\n  }\n\n  const { adminMembersById } = chatAfterUpdate.fullInfo;\n  const isDismissed = !Object.keys(adminRights).length;\n  let newAdminMembersById: Record<string, ApiChatMember> | undefined;\n  if (adminMembersById) {\n    if (isDismissed) {\n      const { [userId]: remove, ...rest } = adminMembersById;\n      newAdminMembersById = rest;\n    } else {\n      newAdminMembersById = {\n        ...adminMembersById,\n        [userId]: {\n          ...adminMembersById[userId],\n          adminRights,\n          customTitle,\n        },\n      };\n    }\n  }\n\n  if (newAdminMembersById) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { adminMembersById: newAdminMembersById });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('updateChat', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, about, photo, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  await Promise.all([\n    chat.title !== title\n      ? callApi('updateChatTitle', chat, title)\n      : undefined,\n    fullInfo?.about !== about\n      ? callApi('updateChatAbout', chat, about)\n      : undefined,\n    photo\n      ? callApi('editChatPhoto', { chatId, accessHash: chat.accessHash, photo })\n      : undefined,\n  ]);\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (photo) {\n    actions.loadFullChat({ chatId, tabId, withPhotos: true });\n  }\n});\n\naddActionHandler('updateChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  global = updateChat(global, chatId, { avatarHash: undefined });\n  global = updateChatFullInfo(global, chatId, { profilePhoto: undefined });\n  setGlobal(global);\n  // This method creates a new entry in photos array\n  await callApi('editChatPhoto', {\n    chatId,\n    accessHash: chat.accessHash,\n    photo,\n  });\n  // Explicitly delete the old photo reference\n  await callApi('deleteProfilePhotos', [photo]);\n  actions.loadFullChat({ chatId, tabId, withPhotos: true });\n});\n\naddActionHandler('deleteChatPhoto', async (global, actions, payload): Promise<void> => {\n  const { photo, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const photosToDelete = [photo];\n  if (chat.avatarHash === photo.id) {\n    // Select next photo to set as avatar\n    const nextPhoto = chat.photos?.[1];\n    if (nextPhoto) {\n      photosToDelete.push(nextPhoto);\n    }\n    global = updateChat(global, chatId, { avatarHash: undefined });\n    global = updateChatFullInfo(global, chatId, { profilePhoto: undefined });\n    setGlobal(global);\n    // Set next photo as avatar\n    await callApi('editChatPhoto', {\n      chatId,\n      accessHash: chat.accessHash,\n      photo: nextPhoto,\n    });\n  }\n\n  const { photos = [] } = chat;\n\n  const newPhotos = photos.filter((p) => photosToDelete.some((toDelete) => toDelete.id !== p.id));\n  global = getGlobal();\n  global = updateChat(global, chatId, { photos: newPhotos });\n\n  setGlobal(global);\n\n  // Delete references to the old photos\n  const result = await callApi('deleteProfilePhotos', photosToDelete);\n  if (!result) return;\n  actions.loadFullChat({ chatId, tabId, withPhotos: true });\n});\n\naddActionHandler('toggleSignatures', (global, actions, payload): ActionReturnType => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleSignatures', { chat, isEnabled });\n});\n\naddActionHandler('loadGroupsForDiscussion', async (global): Promise<void> => {\n  const groups = await callApi('fetchGroupsForDiscussion');\n  if (!groups) {\n    return;\n  }\n\n  const addedById = groups.reduce((result, group) => {\n    if (group && !group.isForum) {\n      result[group.id] = group;\n    }\n\n    return result;\n  }, {} as Record<string, ApiChat>);\n\n  global = getGlobal();\n  global = addChats(global, addedById);\n  global = {\n    ...global,\n    chats: {\n      ...global.chats,\n      forDiscussionIds: Object.keys(addedById),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('linkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, chatId, tabId = getCurrentTabId() } = payload || {};\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n\n  if (!chat) return;\n\n  let fullInfo = selectChatFullInfo(global, chat.id);\n  if (!fullInfo) {\n    const fullChat = await callApi('fetchFullChat', chat);\n    if (!fullChat) {\n      return;\n    }\n\n    fullInfo = fullChat.fullInfo;\n  }\n\n  if (fullInfo!.isPreHistoryHidden) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chat.id, { isPreHistoryHidden: false });\n    setGlobal(global);\n\n    await callApi('togglePreHistoryHidden', { chat, isEnabled: false });\n  }\n\n  void callApi('setDiscussionGroup', { channel, chat });\n});\n\naddActionHandler('unlinkDiscussionGroup', async (global, actions, payload): Promise<void> => {\n  const { channelId, tabId = getCurrentTabId() } = payload;\n\n  const channel = selectChat(global, channelId);\n  if (!channel) {\n    return;\n  }\n\n  const fullInfo = selectChatFullInfo(global, channelId);\n  let chat: ApiChat | undefined;\n  if (fullInfo?.linkedChatId) {\n    chat = selectChat(global, fullInfo.linkedChatId);\n  }\n\n  await callApi('setDiscussionGroup', { channel });\n  if (chat) {\n    global = getGlobal();\n    loadFullChat(global, actions, chat, tabId);\n  }\n});\n\naddActionHandler('setActiveChatFolder', (global, actions, payload): ActionReturnType => {\n  const { activeChatFolder, tabId = getCurrentTabId() } = payload;\n  const maxFolders = selectCurrentLimit(global, 'dialogFilters');\n\n  const isBlocked = activeChatFolder + 1 > maxFolders;\n\n  if (isBlocked) {\n    actions.openLimitReachedModal({\n      limit: 'dialogFilters',\n      tabId,\n    });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    activeChatFolder,\n  }, tabId);\n});\n\naddActionHandler('resetOpenChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    requestedDraft: undefined,\n  }, tabId);\n});\n\naddActionHandler('loadMoreMembers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  if (!chat || isChatBasicGroup(chat)) {\n    return;\n  }\n\n  const offset = selectChatFullInfo(global, chat.id)?.members?.length;\n  if (offset !== undefined && chat.membersCount !== undefined && offset >= chat.membersCount) return;\n\n  const result = await callApi('fetchMembers', chat.id, chat.accessHash!, 'recent', offset);\n  if (!result) {\n    return;\n  }\n\n  const { members, users, userStatusesById } = result;\n  if (!members || !members.length) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMembers(global, chat, members);\n  setGlobal(global);\n});\n\naddActionHandler('addChatMembers', async (global, actions, payload): Promise<void> => {\n  const { chatId, memberIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const users = (memberIds as string[]).map((userId) => selectUser(global, userId)).filter(Boolean);\n\n  if (!chat || !users.length) {\n    return;\n  }\n\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Loading, tabId });\n  await callApi('addChatMembers', chat, users);\n  actions.setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed, tabId });\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('deleteChatMember', async (global, actions, payload): Promise<void> => {\n  const { chatId, userId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n\n  if (!chat || !user) {\n    return;\n  }\n\n  await callApi('deleteChatMember', chat, user);\n  global = getGlobal();\n  loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('toggleIsProtected', (global, actions, payload): ActionReturnType => {\n  const { chatId, isProtected } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('toggleIsProtected', { chat, isProtected });\n});\n\naddActionHandler('setChatEnabledReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, enabledReactions, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  await callApi('setChatEnabledReactions', {\n    chat,\n    enabledReactions,\n  });\n\n  global = getGlobal();\n  void loadFullChat(global, actions, chat, tabId);\n});\n\naddActionHandler('fetchChat', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    return;\n  }\n\n  if (chatId === global.currentUserId) {\n    void callApi('fetchChat', { type: 'self' });\n  } else {\n    const user = selectUser(global, chatId);\n    if (user) {\n      void callApi('fetchChat', { type: 'user', user });\n    }\n  }\n});\n\naddActionHandler('loadChatSettings', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchChatSettings', chat);\n  if (!result) return;\n  const { settings, users } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateChat(global, chat.id, { settings });\n  setGlobal(global);\n});\n\naddActionHandler('toggleJoinToSend', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinToSend', chat, isEnabled);\n});\n\naddActionHandler('toggleJoinRequest', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  if (!isChatSuperGroup(chat) && !isChatChannel(chat)) return;\n\n  await callApi('toggleJoinRequest', chat, isEnabled);\n});\n\naddActionHandler('openForumPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  actions.toggleStoryRibbon({ isShown: false, tabId });\n  actions.toggleStoryRibbon({ isShown: false, isArchived: true, tabId });\n  return updateTabState(global, {\n    forumPanelChatId: chatId,\n  }, tabId);\n});\n\naddActionHandler('closeForumPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forumPanelChatId: undefined,\n  }, tabId);\n});\n\naddActionHandler('processAttachBotParameters', async (global, actions, payload): Promise<void> => {\n  const {\n    username, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n  if (!bot) return;\n\n  const isForChat = Boolean(filter);\n\n  if (!isForChat) {\n    actions.callAttachBot({\n      isFromSideMenu: true,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  const { attachMenu: { bots } } = global;\n  if (!bots[bot.id]) {\n    global = updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'requestAttachBotInChat',\n          payload: {\n            bot,\n            filter,\n            startParam,\n          },\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  actions.requestAttachBotInChat({\n    bot,\n    filter,\n    startParam,\n    tabId,\n  });\n});\n\naddActionHandler('loadTopics', async (global, actions, payload): Promise<void> => {\n  const { chatId, force } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (!force && chat.listedTopicIds && chat.listedTopicIds.length === chat.topicsCount) {\n    return;\n  }\n\n  const offsetTopic = !force && chat.listedTopicIds ? chat.listedTopicIds.reduce((acc, el) => {\n    const topic = chat.topics?.[el];\n    const accTopic = chat.topics?.[acc];\n    if (!topic) return acc;\n    if (!accTopic || topic.lastMessageId < accTopic.lastMessageId) {\n      return el;\n    }\n    return acc;\n  }) : undefined;\n\n  const { id: offsetTopicId, date: offsetDate, lastMessageId: offsetId } = (offsetTopic\n    && chat.topics?.[offsetTopic]) || {};\n  const result = await callApi('fetchTopics', {\n    chat, offsetTopicId, offsetId, offsetDate, limit: offsetTopicId ? TOPICS_SLICE : TOPICS_SLICE_SECOND_LOAD,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopics(global, chatId, result.count, result.topics);\n  global = updateListedTopicIds(global, chatId, result.topics.map((topic) => topic.id));\n  Object.entries(result.draftsById || {}).forEach(([threadId, draft]) => {\n    global = replaceThreadParam(global, chatId, Number(threadId), 'draft', draft?.formattedText);\n    global = replaceThreadParam(global, chatId, Number(threadId), 'replyingToId', draft?.replyingToId);\n  });\n  Object.entries(result.readInboxMessageIdByTopicId || {}).forEach(([topicId, messageId]) => {\n    global = updateThreadInfo(global, chatId, Number(topicId), { lastReadInboxMessageId: messageId });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadTopicById', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchTopicById', { chat, topicId });\n\n  if (!result) {\n    if ('tabId' in payload && payload.shouldCloseChatOnError) {\n      const { tabId = getCurrentTabId() } = payload;\n      actions.openChat({ id: undefined, tabId });\n    }\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = addMessages(global, result.messages);\n  global = updateTopic(global, chatId, topicId, result.topic);\n\n  setGlobal(global);\n});\n\naddActionHandler('toggleForum', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled, tabId = getCurrentTabId() } = payload;\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) {\n    return;\n  }\n\n  let result: true | undefined;\n  try {\n    result = await callApi('toggleForum', { chat, isEnabled });\n  } catch (error) {\n    if ((error as ApiError).message.startsWith('A wait of')) {\n      actions.showNotification({ message: langProvider.translate('FloodWait'), tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (result) {\n    global = getGlobal();\n    global = updateChat(global, chat.id, { isForum: isEnabled });\n    setGlobal(global);\n\n    if (!isEnabled) {\n      actions.closeForumPanel({ tabId });\n    } else {\n      actions.openForumPanel({ chatId: chat.id, tabId });\n    }\n  }\n});\n\naddActionHandler('toggleParticipantsHidden', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const prevIsEnabled = selectChatFullInfo(global, chat.id)?.areParticipantsHidden;\n  global = updateChatFullInfo(global, chatId, { areParticipantsHidden: isEnabled });\n  setGlobal(global);\n\n  const result = await callApi('toggleParticipantsHidden', { chat, isEnabled });\n\n  if (!result && prevIsEnabled !== undefined) {\n    global = getGlobal();\n    global = updateChatFullInfo(global, chatId, { areParticipantsHidden: prevIsEnabled });\n    setGlobal(global);\n  }\n});\n\naddActionHandler('createTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, title, iconColor, iconEmojiId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  if (selectTabState(global, tabId).createTopicPanel) {\n    global = updateTabState(global, {\n      createTopicPanel: {\n        chatId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const topicId = await callApi('createTopic', {\n    chat, title, iconColor, iconEmojiId,\n  });\n  if (topicId) {\n    actions.openChat({\n      id: chatId, threadId: topicId, shouldReplaceHistory: true, tabId,\n    });\n  }\n  actions.closeCreateTopicPanel({ tabId });\n});\n\naddActionHandler('deleteTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('deleteTopic', { chat, topicId });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = deleteTopic(global, chatId, topicId);\n  setGlobal(global);\n});\n\naddActionHandler('editTopic', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, topicId, tabId = getCurrentTabId(), ...rest\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const topic = chat?.topics?.[topicId];\n  if (!chat || !topic) return;\n\n  if (selectTabState(global, tabId).editTopicPanel) {\n    global = updateTabState(global, {\n      editTopicPanel: {\n        chatId,\n        topicId,\n        isLoading: true,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('editTopic', { chat, topicId, ...rest });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateTopic(global, chatId, topicId, rest);\n  setGlobal(global);\n\n  actions.closeEditTopicPanel({ tabId });\n});\n\naddActionHandler('toggleTopicPinned', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, topicId, isPinned, tabId = getCurrentTabId(),\n  } = payload;\n\n  const { topicsPinnedLimit } = global.appConfig || {};\n  const chat = selectChat(global, chatId);\n  if (!chat || !chat.topics || !topicsPinnedLimit) return;\n\n  if (isPinned && Object.values(chat.topics).filter((topic) => topic.isPinned).length >= topicsPinnedLimit) {\n    actions.showNotification({\n      message: langProvider.translate('LimitReachedPinnedTopics', topicsPinnedLimit, 'i'),\n      tabId,\n    });\n    return;\n  }\n\n  void callApi('togglePinnedTopic', { chat, topicId, isPinned });\n});\n\naddActionHandler('checkChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkChatlistInvite', { slug });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('lng_group_invite_bad_link'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateTabState(global, {\n    chatlistModal: {\n      invite: result.invite,\n    },\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('joinChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { invite, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const peers = peerIds.map((peerId) => selectChat(global, peerId)).filter(Boolean);\n  const notJoinedCount = peers.filter((peer) => peer.isNotJoined).length;\n\n  const folder = 'folderId' in invite ? selectChatFolder(global, invite.folderId) : undefined;\n  const folderTitle = 'title' in invite ? invite.title : folder?.title;\n\n  try {\n    const result = await callApi('joinChatlistInvite', { slug: invite.slug, peers });\n    if (!result) return;\n\n    actions.showNotification({\n      title: langProvider.translate(folder ? 'FolderLinkUpdatedTitle' : 'FolderLinkAddedTitle', folderTitle),\n      message: langProvider.translate('FolderLinkAddedSubtitle', notJoinedCount, 'i'),\n      tabId,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'CHATLISTS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'chatlistJoined', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n});\n\naddActionHandler('leaveChatlist', async (global, actions, payload): Promise<void> => {\n  const { folderId, peerIds, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n\n  const peers = peerIds?.map((peerId) => selectChat(global, peerId)).filter(Boolean) || [];\n\n  const result = await callApi('leaveChatlist', { folderId, peers });\n\n  if (!result) return;\n\n  actions.showNotification({\n    title: langProvider.translate('FolderLinkDeletedTitle', folder.title),\n    message: langProvider.translate('FolderLinkDeletedSubtitle', peers.length, 'i'),\n    tabId,\n  });\n});\n\naddActionHandler('loadChatlistInvites', async (global, actions, payload): Promise<void> => {\n  const { folderId } = payload;\n\n  const result = await callApi('fetchChatlistInvites', { folderId });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: result.invites,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('createChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  let result: { filter: ApiChatFolder; invite: ApiChatlistExportedInvite | undefined } | undefined;\n\n  try {\n    result = await callApi('createChalistInvite', {\n      folderId,\n      peers: folder.includedChatIds.concat(folder.pinnedChatIds || [])\n        .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean),\n    });\n  } catch (error) {\n    if (CHATLIST_LIMIT_ERROR_LIST.has((error as ApiError).message)) {\n      actions.openLimitReachedModal({ limit: 'chatlistInvites', tabId });\n      actions.requestNextSettingsScreen({ screen: SettingsScreens.Folders, tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n  }\n\n  if (!result || !result.invite) return;\n\n  const { shareFolderScreen } = selectTabState(global, tabId);\n\n  if (!shareFolderScreen) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      byId: {\n        ...global.chatFolders.byId,\n        [folderId]: {\n          ...global.chatFolders.byId[folderId],\n          ...result.filter,\n        },\n      },\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: [\n          ...(global.chatFolders.invites[folderId] || []),\n          result.invite,\n        ],\n      },\n    },\n  };\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...shareFolderScreen,\n      url: result.invite.url,\n      isLoading: false,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    folderId, peerIds, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const slug = url.split('/').pop();\n  if (!slug) return;\n\n  const peers = peerIds\n    .map((chatId) => selectChat(global, chatId) || selectUser(global, chatId)).filter(Boolean);\n\n  global = updateTabState(global, {\n    shareFolderScreen: {\n      ...selectTabState(global, tabId).shareFolderScreen!,\n      isLoading: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  try {\n    const result = await callApi('editChatlistInvite', { folderId, slug, peers });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global = {\n      ...global,\n      chatFolders: {\n        ...global.chatFolders,\n        invites: {\n          ...global.chatFolders.invites,\n          [folderId]: global.chatFolders.invites[folderId]?.map((invite) => {\n            if (invite.url === url) {\n              return result;\n            }\n            return invite;\n          }),\n        },\n      },\n    };\n    setGlobal(global);\n  } catch (error) {\n    actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n  } finally {\n    global = getGlobal();\n\n    global = updateTabState(global, {\n      shareFolderScreen: {\n        ...selectTabState(global, tabId).shareFolderScreen!,\n        isLoading: false,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('deleteChatlistInvite', async (global, actions, payload): Promise<void> => {\n  const { folderId, url } = payload;\n\n  const slug = url.split('/').pop();\n\n  if (!slug) return;\n\n  const result = await callApi('deleteChatlistInvite', { folderId, slug });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    chatFolders: {\n      ...global.chatFolders,\n      invites: {\n        ...global.chatFolders.invites,\n        [folderId]: global.chatFolders.invites[folderId]?.filter((invite) => invite.url !== url),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openDeleteChatFolderModal', async (global, actions, payload): Promise<void> => {\n  const { folderId, isConfirmedForChatlist, tabId = getCurrentTabId() } = payload;\n  const folder = selectChatFolder(global, folderId);\n  if (!folder) return;\n\n  if (folder.isChatList && (!folder.hasMyInvites || isConfirmedForChatlist)) {\n    const suggestions = await callApi('fetchLeaveChatlistSuggestions', { folderId });\n    global = getGlobal();\n    global = updateTabState(global, {\n      chatlistModal: {\n        removal: {\n          folderId,\n          suggestedPeerIds: suggestions,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('updateChatDetectedLanguage', (global, actions, payload): ActionReturnType => {\n  const { chatId, detectedLanguage } = payload;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    detectedLanguage,\n  });\n\n  return global;\n});\n\naddActionHandler('togglePeerTranslations', async (global, actions, payload): Promise<void> => {\n  const { chatId, isEnabled } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('togglePeerTranslations', { chat, isEnabled });\n\n  if (result === undefined) return;\n\n  global = getGlobal();\n  global = updatePeerFullInfo(global, chatId, {\n    isTranslationDisabled: isEnabled ? undefined : true,\n  });\n  setGlobal(global);\n});\n\nasync function loadChats(\n  listType: 'active' | 'archived',\n  offsetId?: string,\n  offsetDate?: number,\n  shouldReplace = false,\n  isFullDraftSync?: boolean,\n) {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal();\n  let lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n  const result = await callApi('fetchChats', {\n    limit: CHAT_LIST_LOAD_SLICE,\n    offsetDate,\n    archived: listType === 'archived',\n    withPinned: shouldReplace,\n    lastLocalServiceMessage,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const { chatIds } = result;\n\n  if (chatIds.length > 0 && chatIds[0] === offsetId) {\n    chatIds.shift();\n  }\n\n  global = getGlobal();\n\n  lastLocalServiceMessage = selectLastServiceNotification(global)?.message;\n\n  if (shouldReplace && listType === 'active') {\n    // Always include service notifications chat\n    if (!chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      const result2 = await callApi('fetchChat', {\n        type: 'user',\n        user: SERVICE_NOTIFICATIONS_USER_MOCK,\n      });\n\n      global = getGlobal();\n\n      const notificationsChat = result2 && selectChat(global, result2.chatId);\n      if (notificationsChat) {\n        chatIds.unshift(notificationsChat.id);\n        result.chats.unshift(notificationsChat);\n        if (lastLocalServiceMessage) {\n          notificationsChat.lastMessage = lastLocalServiceMessage;\n        }\n      }\n    }\n\n    const tabStates = Object.values(global.byTabId);\n    const visibleChats = tabStates.flatMap(({ id: tabId }) => {\n      const currentChat = selectCurrentChat(global, tabId);\n      return currentChat ? [currentChat] : [];\n    });\n\n    const visibleUsers = tabStates.flatMap(({ id: tabId }) => {\n      return selectVisibleUsers(global, tabId) || [];\n    });\n\n    if (global.currentUserId && global.users.byId[global.currentUserId]) {\n      visibleUsers.push(global.users.byId[global.currentUserId]);\n    }\n\n    global = replaceUsers(global, buildCollectionByKey(visibleUsers.concat(result.users), 'id'));\n    global = replaceUserStatuses(global, result.userStatusesById);\n    global = replaceChats(global, buildCollectionByKey(visibleChats.concat(result.chats), 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else if (shouldReplace && listType === 'archived') {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n    global = replaceChatListIds(global, listType, chatIds);\n  } else {\n    const newChats = buildCollectionByKey(result.chats, 'id');\n    if (chatIds.includes(SERVICE_NOTIFICATIONS_USER_ID)) {\n      const notificationsChat = newChats[SERVICE_NOTIFICATIONS_USER_ID];\n      if (notificationsChat && lastLocalServiceMessage) {\n        newChats[SERVICE_NOTIFICATIONS_USER_ID] = {\n          ...notificationsChat,\n          lastMessage: lastLocalServiceMessage,\n        };\n      }\n    }\n\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n    global = addUserStatuses(global, result.userStatusesById);\n    global = updateChats(global, newChats);\n    global = updateChatListIds(global, listType, chatIds);\n  }\n\n  global = updateChatListSecondaryInfo(global, listType, result);\n\n  const idsToUpdateDraft = isFullDraftSync ? result.chatIds : Object.keys(result.draftsById);\n  idsToUpdateDraft.forEach((chatId) => {\n    const draft = result.draftsById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!draft && !thread) return;\n\n    if (!selectDraft(global, chatId, MAIN_THREAD_ID)?.isLocal) {\n      global = replaceThreadParam(\n        global, chatId, MAIN_THREAD_ID, 'draft', draft,\n      );\n    }\n  });\n\n  const idsToUpdateReplyingToId = isFullDraftSync ? result.chatIds : Object.keys(result.replyingToById);\n  idsToUpdateReplyingToId.forEach((chatId) => {\n    const replyingToById = result.replyingToById[chatId];\n    const thread = selectThread(global, chatId, MAIN_THREAD_ID);\n\n    if (!replyingToById && !thread) return;\n\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'replyingToId', replyingToById,\n    );\n  });\n\n  if (chatIds.length === 0 && !global.chats.isFullyLoaded[listType]) {\n    global = {\n      ...global,\n      chats: {\n        ...global.chats,\n        isFullyLoaded: {\n          ...global.chats.isFullyLoaded,\n          [listType]: true,\n        },\n      },\n    };\n  }\n\n  setGlobal(global);\n}\n\nexport async function loadFullChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('fetchFullChat', chat);\n  if (!result) {\n    return undefined;\n  }\n\n  const {\n    users, userStatusesById, fullInfo, groupCall, membersCount,\n  } = result;\n\n  global = getGlobal();\n  if (users) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (groupCall) {\n    const existingGroupCall = selectGroupCall(global, groupCall.id!);\n    global = updateGroupCall(\n      global,\n      groupCall.id!,\n      omit(groupCall, ['connectionState', 'isLoaded']),\n      undefined,\n      existingGroupCall ? undefined : groupCall.participantsCount,\n    );\n  }\n\n  if (membersCount !== undefined) {\n    global = updateChat(global, chat.id, { membersCount });\n  }\n  global = replaceChatFullInfo(global, chat.id, fullInfo);\n  setGlobal(global);\n\n  const stickerSet = fullInfo.stickerSet;\n  const localSet = stickerSet && selectStickerSet(global, stickerSet);\n  if (stickerSet && !localSet) {\n    actions.loadStickers({\n      stickerSetInfo: {\n        id: stickerSet.id,\n        accessHash: stickerSet.accessHash,\n      },\n      tabId,\n    });\n  }\n\n  return result;\n}\n\nexport async function migrateChat<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, chat: ApiChat,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiChat | undefined> {\n  try {\n    const supergroup = await callApi('migrateChat', chat);\n\n    return supergroup;\n  } catch (error) {\n    if ((error as ApiError).message === 'CHANNELS_TOO_MUCH') {\n      actions.openLimitReachedModal({ limit: 'channels', tabId });\n    } else {\n      actions.showDialog({ data: { ...(error as ApiError), hasErrorKey: true }, tabId });\n    }\n\n    return undefined;\n  }\n}\n\nexport async function fetchChatByUsername<T extends GlobalState>(\n  global: T,\n  username: string,\n) {\n  global = getGlobal();\n  const localChat = selectChatByUsername(global, username);\n  if (localChat && !localChat.isMin) {\n    return localChat;\n  }\n\n  const { chat, user } = await callApi('getChatByUsername', username) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n\n  setGlobal(global);\n\n  return chat;\n}\n\nexport async function fetchChatByPhoneNumber<T extends GlobalState>(global: T, phoneNumber: string) {\n  global = getGlobal();\n  const localUser = selectUserByPhoneNumber(global, phoneNumber);\n  if (localUser && !localUser.isMin) {\n    return selectChat(global, localUser.id);\n  }\n\n  const { chat, user } = await callApi('getChatByPhoneNumber', phoneNumber) || {};\n  if (!chat) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chat.id, chat);\n\n  if (user) {\n    global = updateUser(global, user.id, user);\n  }\n  setGlobal(global);\n\n  return chat;\n}\n\nasync function getAttachBotOrNotify<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, username: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) return undefined;\n\n  global = getGlobal();\n  const user = selectUser(global, chat.id);\n  if (!user) return undefined;\n\n  const isBot = isUserBot(user);\n  if (!isBot) return undefined;\n  const result = await callApi('loadAttachBot', {\n    bot: user,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('WebApp.AddToAttachmentUnavailableError'),\n      tabId,\n    });\n\n    return undefined;\n  }\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.bot;\n}\n\nasync function openChatByUsername<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  username: string,\n  threadId?: number,\n  channelPostId?: number,\n  startParam?: string,\n  startAttach?: string,\n  attach?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const currentChat = selectCurrentChat(global, tabId);\n\n  // Attach in the current chat\n  if (startAttach !== undefined && !attach) {\n    const bot = await getAttachBotOrNotify(global, actions, username, tabId);\n\n    if (!currentChat || !bot) return;\n\n    actions.callAttachBot({\n      bot,\n      chatId: currentChat.id,\n      startParam: startAttach,\n      tabId,\n    });\n\n    return;\n  }\n\n  const isCurrentChat = currentChat?.usernames?.some((c) => c.username === username);\n\n  if (!isCurrentChat) {\n    // Open temporary empty chat to make the click response feel faster\n    actions.openChat({ id: TMP_CHAT_ID, tabId });\n  }\n\n  const chat = await fetchChatByUsername(global, username);\n  if (!chat) {\n    if (!isCurrentChat) {\n      actions.openPreviousChat({ tabId });\n      actions.showNotification({ message: 'User does not exist', tabId });\n    }\n\n    return;\n  }\n\n  if (channelPostId) {\n    actions.focusMessage({\n      chatId: chat.id, threadId, messageId: channelPostId, tabId,\n    });\n  } else if (!isCurrentChat) {\n    actions.openChat({ id: chat.id, threadId, tabId });\n  }\n\n  if (startParam) {\n    actions.startBot({ botId: chat.id, param: startParam });\n  }\n\n  if (attach) {\n    global = getGlobal();\n    openAttachMenuFromLink(global, actions, chat.id, attach, startAttach, tabId);\n  }\n}\n\nasync function openAttachMenuFromLink<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  attach: string,\n  startAttach?: string | boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  global = getGlobal();\n  const bot = await getAttachBotOrNotify(global, actions, attach, tabId);\n  if (!bot) return;\n\n  actions.callAttachBot({\n    bot,\n    chatId,\n    ...(typeof startAttach === 'string' && { startParam: startAttach }),\n    tabId,\n  });\n}\n\nexport async function ensureIsSuperGroup<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chat = selectChat(global, chatId);\n  if (!chat || !isChatBasicGroup(chat)) {\n    return chat;\n  }\n\n  const newChat = await migrateChat(global, actions, chat, tabId);\n  if (!newChat) {\n    return undefined;\n  }\n\n  actions.loadFullChat({ chatId: newChat.id, tabId });\n  actions.openChat({ id: newChat.id, tabId });\n\n  return newChat;\n}\n","import type { ApiGroupCall } from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, CallSound, GlobalState, TabArgs,\n} from '../../types';\n\nimport { requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/langProvider';\nimport safePlay from '../../../util/safePlay';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { callApi } from '../../../api/gramjs';\nimport { getMainUsername } from '../../helpers';\nimport {\n  addActionHandler, getGlobal,\n  setGlobal,\n} from '../../index';\nimport { addChats, addUsers } from '../../reducers';\nimport { updateGroupCall } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectChatFullInfo, selectTabState, selectUser,\n} from '../../selectors';\nimport { selectActiveGroupCall, selectChatGroupCall, selectGroupCall } from '../../selectors/calls';\nimport { fetchChatByUsername, loadFullChat } from '../api/chats';\n\n// This is a tiny MP3 file that is silent - retrieved from https://bigsoundbank.com and then modified\n// eslint-disable-next-line max-len\nconst silentSound = 'data:audio/mpeg;base64,SUQzBAAAAAABEVRYWFgAAAAtAAADY29tbWVudABCaWdTb3VuZEJhbmsuY29tIC8gTGFTb25vdGhlcXVlLm9yZwBURU5DAAAAHQAAA1N3aXRjaCBQbHVzIMKpIE5DSCBTb2Z0d2FyZQBUSVQyAAAABgAAAzIyMzUAVFNTRQAAAA8AAANMYXZmNTcuODMuMTAwAAAAAAAAAAAAAAD/80DEAAAAA0gAAAAATEFNRTMuMTAwVVVVVVVVVVVVVUxBTUUzLjEwMFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQsRbAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/zQMSkAAADSAAAAABVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';\n\nlet audioElement: HTMLAudioElement | undefined;\nlet audioContext: AudioContext | undefined;\nlet sounds: Record<CallSound, HTMLAudioElement>;\n\n// Workaround: this function is called once on the first user interaction.\n// After that, it will be possible to play the notification on iOS without problems.\n// https://rosswintle.uk/2019/01/skirting-the-ios-safari-audio-auto-play-policy-for-ui-sound-effects/\nexport function initializeSoundsForSafari() {\n  initializeSounds();\n\n  return Promise.all(Object.values(sounds).map((sound) => {\n    const prevSrc = sound.src;\n    sound.src = silentSound;\n    sound.muted = true;\n    sound.volume = 0.0001;\n    return sound.play()\n      .then(() => {\n        sound.pause();\n        sound.volume = 1;\n        sound.currentTime = 0;\n        sound.muted = false;\n\n        requestNextMutation(() => {\n          sound.src = prevSrc;\n        });\n      });\n  }));\n}\n\nexport function initializeSounds() {\n  if (sounds) {\n    return;\n  }\n  const joinAudio = new Audio('./voicechat_join.mp3');\n  const connectingAudio = new Audio('./voicechat_connecting.mp3');\n  connectingAudio.loop = true;\n  const leaveAudio = new Audio('./voicechat_leave.mp3');\n  const allowTalkAudio = new Audio('./voicechat_onallowtalk.mp3');\n  const busyAudio = new Audio('./call_busy.mp3');\n  const connectAudio = new Audio('./call_connect.mp3');\n  const endAudio = new Audio('./call_end.mp3');\n  const incomingAudio = new Audio('./call_incoming.mp3');\n  incomingAudio.loop = true;\n  const ringingAudio = new Audio('./call_ringing.mp3');\n  ringingAudio.loop = true;\n\n  sounds = {\n    join: joinAudio,\n    allowTalk: allowTalkAudio,\n    leave: leaveAudio,\n    connecting: connectingAudio,\n    incoming: incomingAudio,\n    end: endAudio,\n    connect: connectAudio,\n    busy: busyAudio,\n    ringing: ringingAudio,\n  };\n}\n\nasync function fetchGroupCall<T extends GlobalState>(global: T, groupCall: Partial<ApiGroupCall>) {\n  const result = await callApi('getGroupCall', {\n    call: groupCall,\n  });\n\n  if (!result) return undefined;\n\n  global = getGlobal();\n\n  const existingGroupCall = selectGroupCall(global, groupCall.id!);\n\n  global = updateGroupCall(\n    global,\n    groupCall.id!,\n    omit(result.groupCall, ['connectionState']),\n    undefined,\n    existingGroupCall?.isLoaded ? undefined : result.groupCall.participantsCount,\n  );\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n\n  return result.groupCall;\n}\n\nasync function fetchGroupCallParticipants<T extends GlobalState>(\n  global: T,\n  groupCall: Partial<ApiGroupCall>, nextOffset?: string,\n) {\n  const result = await callApi('fetchGroupCallParticipants', {\n    call: groupCall as ApiGroupCall,\n    offset: nextOffset,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleGroupCallPanel', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isCallPanelVisible: 'force' in (payload || {}) ? force : !selectTabState(global, tabId).isCallPanelVisible,\n  }, tabId);\n});\n\naddActionHandler('subscribeToGroupCallUpdates', async (global, actions, payload): Promise<void> => {\n  const { subscribed, id } = payload!;\n  const groupCall = selectGroupCall(global, id);\n\n  if (!groupCall) return;\n\n  if (subscribed) {\n    await fetchGroupCall(global, groupCall);\n    global = getGlobal();\n    await fetchGroupCallParticipants(global, groupCall);\n  }\n\n  await callApi('toggleGroupCallStartSubscription', {\n    subscribed,\n    call: groupCall,\n  });\n});\n\naddActionHandler('createGroupCall', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('createGroupCall', {\n    peer: chat,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateGroupCall(global, result.id, {\n    ...result,\n    chatId,\n  });\n  setGlobal(global);\n\n  actions.requestMasterAndJoinGroupCall({ id: result.id, accessHash: result.accessHash, tabId });\n});\n\naddActionHandler('createGroupCallInviteLink', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const groupCall = selectActiveGroupCall(global);\n\n  if (!groupCall || !groupCall.chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, groupCall.chatId);\n  if (!chat) {\n    return;\n  }\n\n  const hasPublicUsername = Boolean(getMainUsername(chat));\n\n  let inviteLink = selectChatFullInfo(global, chat.id)?.inviteLink;\n  if (hasPublicUsername) {\n    inviteLink = await callApi('exportGroupCallInvite', {\n      call: groupCall,\n      canSelfUnmute: false,\n    });\n  }\n\n  if (!inviteLink) {\n    return;\n  }\n\n  copyTextToClipboard(inviteLink);\n  actions.showNotification({\n    message: 'Link copied to clipboard',\n    tabId,\n  });\n});\n\naddActionHandler('joinVoiceChatByLink', async (global, actions, payload): Promise<void> => {\n  const { username, inviteHash, tabId = getCurrentTabId() } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    actions.showNotification({ message: langProvider.translate('NoUsernameFound'), tabId });\n    return;\n  }\n\n  global = getGlobal();\n  const full = await loadFullChat(global, actions, chat, tabId);\n\n  if (full?.groupCall) {\n    actions.requestMasterAndJoinGroupCall({\n      id: full.groupCall.id,\n      accessHash: full.groupCall.accessHash,\n      inviteHash,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('requestMasterAndJoinGroupCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'joinGroupCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestMasterAndAcceptCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'acceptCall',\n    payload: undefined,\n    tabId: payload?.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('joinGroupCall', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, id, accessHash, inviteHash, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!ARE_CALLS_SUPPORTED) {\n    actions.showNotification({\n      message: \"Sorry, your browser doesn't support group calls\",\n      tabId,\n    });\n    return;\n  }\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  createAudioElement();\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, true, tabId);\n\n  const { groupCalls: { activeGroupCallId } } = global;\n  let groupCall = id ? selectGroupCall(global, id) : selectChatGroupCall(global, chatId!);\n\n  if (groupCall && groupCall.id === activeGroupCallId) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (activeGroupCallId) {\n    if ('leaveGroupCall' in actions) {\n      actions.leaveGroupCall({\n        rejoin: payload,\n        tabId,\n      });\n    }\n    return;\n  }\n\n  if (groupCall && activeGroupCallId === groupCall.id) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  if (!groupCall && (!id || !accessHash) && chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (!chat) return;\n\n    await loadFullChat(global, actions, chat, tabId);\n    global = getGlobal();\n    groupCall = selectChatGroupCall(global, chatId);\n  } else if (!groupCall && id && accessHash) {\n    groupCall = await fetchGroupCall(global, {\n      id,\n      accessHash,\n    });\n  }\n\n  if (!groupCall) return;\n\n  global = getGlobal();\n  global = updateGroupCall(\n    global,\n    groupCall.id,\n    {\n      ...groupCall,\n      inviteHash,\n    },\n    undefined,\n    groupCall.participantsCount + 1,\n  );\n  global = {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      activeGroupCallId: groupCall.id,\n    },\n  };\n\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\naddActionHandler('playGroupCallSound', (global, actions, payload): ActionReturnType => {\n  const { sound } = payload!;\n\n  if (!sounds[sound]) {\n    return;\n  }\n\n  const doPlay = () => {\n    if (sound !== 'connecting') {\n      sounds.connecting.pause();\n    }\n    if (sound !== 'incoming') {\n      sounds.incoming.pause();\n    }\n    if (sound !== 'ringing') {\n      sounds.ringing.pause();\n    }\n    safePlay(sounds[sound]);\n  };\n\n  doPlay();\n});\n\naddActionHandler('loadMoreGroupCallParticipants', (global): ActionReturnType => {\n  const groupCall = selectActiveGroupCall(global);\n  if (!groupCall) {\n    return;\n  }\n\n  void fetchGroupCallParticipants(global, groupCall, groupCall.nextOffset);\n});\n\naddActionHandler('requestMasterAndRequestCall', (global, actions, payload): ActionReturnType => {\n  actions.requestMasterAndCallAction({\n    action: 'requestCall',\n    payload,\n    tabId: payload.tabId || getCurrentTabId(),\n  });\n});\n\naddActionHandler('requestCall', (global, actions, payload): ActionReturnType => {\n  const { userId, isVideo, tabId = getCurrentTabId() } = payload;\n\n  if (global.phoneCall) {\n    actions.toggleGroupCallPanel({ tabId });\n    return;\n  }\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  initializeSounds();\n  global = getGlobal();\n  void checkNavigatorUserMediaPermissions(global, actions, isVideo, tabId);\n\n  global = getGlobal();\n  global = {\n    ...global,\n    phoneCall: {\n      id: '',\n      state: 'requesting',\n      participantId: userId,\n      isVideo,\n      adminId: global.currentUserId,\n    },\n  };\n  setGlobal(global);\n\n  actions.toggleGroupCallPanel({ force: false, tabId });\n});\n\nfunction createAudioContext() {\n  return (new (window.AudioContext || (window as any).webkitAudioContext)());\n}\n\nconst silence = (ctx: AudioContext) => {\n  const oscillator = ctx.createOscillator();\n  const dst = oscillator.connect(ctx.createMediaStreamDestination());\n  oscillator.start();\n  return new MediaStream([Object.assign((dst as any).stream.getAudioTracks()[0], { enabled: false })]);\n};\n\nfunction createAudioElement() {\n  const ctx = createAudioContext();\n  audioElement = new Audio();\n  audioContext = ctx;\n  audioElement.srcObject = silence(ctx);\n  safePlay(audioElement);\n}\n\nexport function getGroupCallAudioElement() {\n  return audioElement;\n}\n\nexport function getGroupCallAudioContext() {\n  return audioContext;\n}\n\nexport function removeGroupCallAudioElement() {\n  audioElement?.pause();\n  audioContext = undefined;\n  audioElement = undefined;\n}\n\n// This method is used instead of a navigator.permissions.query to determine permission to use a microphone,\n// because Firefox does not have support for 'microphone' and 'camera' permissions\n// https://github.com/mozilla/standards-positions/issues/19#issuecomment-370158947\nexport function checkNavigatorUserMediaPermissions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, isVideo?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (isVideo) {\n    navigator.mediaDevices.getUserMedia({ video: true })\n      .then((stream) => {\n        if (stream.getVideoTracks().length === 0) {\n          actions.showNotification({\n            message: langProvider.translate('Call.Camera.Error'),\n            tabId,\n          });\n        } else {\n          stream.getTracks().forEach((track) => track.stop());\n          checkMicrophonePermission(global, actions, tabId);\n        }\n      })\n      .catch(() => {\n        actions.showNotification({\n          message: langProvider.translate('Call.Camera.Error'),\n          tabId,\n        });\n      });\n  } else {\n    checkMicrophonePermission(global, actions, tabId);\n  }\n}\n\nfunction checkMicrophonePermission<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  navigator.mediaDevices.getUserMedia({ audio: true })\n    .then((stream) => {\n      if (stream.getAudioTracks().length === 0) {\n        actions.showNotification({\n          message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n          tabId,\n        });\n      } else {\n        stream.getTracks().forEach((track) => track.stop());\n      }\n    })\n    .catch(() => {\n      actions.showNotification({\n        message: langProvider.translate('RequestAcces.Error.HaveNotAccess.Call'),\n        tabId,\n      });\n    });\n}\n","import type { ApiGroupCall } from '../../api/types';\nimport type { GroupCallParticipant } from '../../lib/secret-sauce';\nimport type { GlobalState } from '../types';\n\nimport { omit } from '../../util/iteratees';\nimport { selectChat } from '../selectors';\nimport { selectGroupCall } from '../selectors/calls';\nimport { updateChatFullInfo } from './chats';\n\nexport function updateGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  addToParticipantCount?: number,\n  resetParticipantCount?: number,\n): T {\n  const unfiltered = Object.values({\n    ...global.groupCalls.byId[groupCallId]?.participants,\n    ...groupCallUpdate.participants,\n  });\n  const filtered = unfiltered.filter(({ isLeft }) => !isLeft);\n  const participants = filtered.reduce((acc: Record<string, GroupCallParticipant>, el) => {\n    acc[el.id] = el;\n    return acc;\n  }, {});\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...global.groupCalls.byId,\n        [groupCallId]: {\n          ...global.groupCalls.byId[groupCallId],\n          ...omit(groupCallUpdate, ['participantsCount']),\n          ...(addToParticipantCount && {\n            participantsCount: global.groupCalls.byId[groupCallId].participantsCount + addToParticipantCount,\n          }),\n          ...(resetParticipantCount !== undefined && {\n            participantsCount: resetParticipantCount,\n          }),\n          participants,\n        },\n      },\n    },\n  };\n}\n\nexport function removeGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (groupCall && groupCall.chatId) {\n    const chat = selectChat(global, groupCall.chatId);\n    if (chat) {\n      global = updateChatFullInfo(global, groupCall.chatId, {\n        groupCallId: undefined,\n      });\n    }\n  }\n\n  return {\n    ...global,\n    groupCalls: {\n      ...global.groupCalls,\n      byId: {\n        ...omit(global.groupCalls.byId, [groupCallId.toString()]),\n      },\n    },\n  };\n}\n\nexport function updateActiveGroupCall<T extends GlobalState>(\n  global: T,\n  groupCallUpdate: Partial<ApiGroupCall>,\n  resetParticipantCount?: number,\n): T {\n  if (!global.groupCalls.activeGroupCallId) {\n    return global;\n  }\n\n  return updateGroupCall(global,\n    global.groupCalls.activeGroupCallId,\n    groupCallUpdate,\n    undefined,\n    resetParticipantCount);\n}\n\nexport function updateGroupCallParticipant<T extends GlobalState>(\n  global: T,\n  groupCallId: string,\n  userId: string,\n  participantUpdate: Partial<GroupCallParticipant>,\n  noUpdateCount = false,\n): T {\n  const groupCall = selectGroupCall(global, groupCallId);\n  if (!groupCall) {\n    return global;\n  }\n\n  return updateGroupCall(global, groupCallId, {\n    participants: {\n      ...groupCall.participants,\n      [userId]: {\n        ...groupCall.participants[userId],\n        ...participantUpdate,\n      },\n    },\n  }, participantUpdate.isLeft\n    ? (noUpdateCount ? 0 : -1)\n    : (groupCall.participants[userId] || noUpdateCount ? 0 : 1));\n}\n"],"names":["SERVICE_NOTIFICATIONS_USER_MOCK","id","SERVICE_NOTIFICATIONS_USER_ID","accessHash","type","isMin","phoneNumber","CHATLIST_LIMIT_ERROR_LIST","Set","runThrottledForLoadTopChats","throttle","cb","runDebouncedForLoadFullChat","debounce","async","loadChats","listType","offsetId","offsetDate","shouldReplace","arguments","length","undefined","isFullDraftSync","global","getGlobal","lastLocalServiceMessage","selectLastServiceNotification","message","result","callApi","limit","CHAT_LIST_LOAD_SLICE","archived","withPinned","chatIds","shift","includes","result2","user","notificationsChat","selectChat","chatId","unshift","chats","lastMessage","tabStates","Object","values","byTabId","visibleChats","flatMap","_ref7","tabId","currentChat","selectCurrentChat","visibleUsers","_ref8","selectVisibleUsers","currentUserId","users","byId","push","replaceUsers","buildCollectionByKey","concat","replaceUserStatuses","userStatusesById","replaceChats","replaceChatListIds","addUsers","addUserStatuses","updateChats","newChats","updateChatListIds","updateChatListSecondaryInfo","keys","draftsById","forEach","draft","thread","selectThread","MAIN_THREAD_ID","selectDraft","isLocal","replaceThreadParam","replyingToById","isFullyLoaded","setGlobal","loadFullChat","actions","chat","_len","_ref9","Array","_key","getCurrentTabId","fullInfo","groupCall","membersCount","existingGroupCall","selectGroupCall","updateGroupCall","omit","participantsCount","updateChat","replaceChatFullInfo","stickerSet","localSet","selectStickerSet","loadStickers","stickerSetInfo","fetchChatByUsername","username","localChat","selectChatByUsername","updateUser","getAttachBotOrNotify","_len3","_ref11","_key3","selectUser","isUserBot","bot","showNotification","langProvider","openAttachMenuFromLink","attach","startAttach","_len5","_ref13","_key5","callAttachBot","startParam","ensureIsSuperGroup","_len6","_ref14","_key6","isChatBasicGroup","newChat","_len2","_ref10","_key2","error","openLimitReachedModal","showDialog","data","hasErrorKey","migrateChat","openChat","addActionHandler","preloadedChatIds","i","TOP_CHAT_MESSAGES_PRELOAD_LIMIT","pause","currentChatIds","map","_ref","selectCurrentMessageList","filter","Boolean","folderAllOrderedIds","getOrderedIds","ALL_FOLDER_ID","nextChatId","find","has","add","loadViewportMessages","threadId","payload","noRequestThreadInfoUpdate","currentMessageList","currentChatId","currentThreadId","isChatOpened","isThreadOpened","reduce","_ref2","_ref3","accHasChatOpened","accHasThreadOpened","otherTabId","otherMessageList","isSameChat","hasUnreadMark","toggleChatUnread","isChatSummaryOnly","requestChatUpdate","closeStoryViewer","requestThreadInfoUpdate","originChannelId","topMessageId","selectThreadTopMessageId","selectThreadOriginChat","openPreviousChat","shouldReplaceLast","chatFullInfo","linkedChatId","messageId","focusMessage","selectSupportChat","shouldReplaceHistory","TMP_CHAT_ID","onReplace","getOrderDate","date","joinDate","DEBUG","console","connectionState","authState","listIds","oldestChat","selectIsChatPinned","sort","chat1","chat2","force","withPhotos","loadChat","loadProfilePhotos","profileId","lastLocalMessage","muteUntil","isMuted","topicId","updateTopic","title","about","photo","memberIds","createdChannel","updateTabState","chatCreation","progress","ChatCreationProgress","InProgress","Error","channelId","selectTabState","Complete","userId","leaveChat","createdChat","e","folderId","selectCurrentLimit","folder","selectChatFolder","shouldBePinned","pinnedChatIds","includedChatIds","newPinnedIds","pinnedId","newIncludedChatIds","folderUpdate","selectChatListType","isPinned","ARCHIVED_FOLDER_ID","ids","orderedPinnedIds","isChatArchived","chatFolders","recommendedChatFolders","recommended","idsToRemove","idsToAdd","some","includedId","emoticon","orderedIds","maxId","Math","max","recommendedId","description","newFolder","newId","apiUpdate","requestNextSettingsScreen","foldersAction","_ref4","folderIds","unreadCount","lastTopicMessageId","topics","lastMessageId","updateThreadInfo","lastReadInboxMessageId","hash","localUser","selectUserByPhoneNumber","fetchChatByPhoneNumber","replace","url","openChatByPhoneNumber","openChatByInvite","openStickerSet","openChatWithDraft","joinVoiceChatByLink","openInvoice","processAttachBotParameters","checkChatlistInvite","openChatByUsername","openChatByUsernameAction","openStoryViewerByUsername","processBoostParameters","match","RE_TG_LINK","processDeepLink","uri","URL","toLowerCase","startsWith","TME_WEB_DOMAINS","hostname","pathname","window","open","toString","hostParts","split","part1","part2","part3","part","decodeURI","params","fromEntries","searchParams","hasStartAttach","hasOwnProperty","hasStartApp","choose","parseChooseParameter","storyId","Number","hasBoost","substr","startattach","shortName","text","formatShareText","slug","chatOrChannelPostId","commentId","comment","inviteHash","voicechat","livestream","c","usernameOrId","isPrivate","toChannelId","substring","startapp","start","startApp","originalParts","isChatChannel","openBoostModal","webAppName","isWebApp","usernames","channelPostId","_len4","_ref12","_key4","isCurrentChat","startBot","botId","param","usernameChat","threadInfo","selectThreadInfo","chatByUsername","theme","extractCurrentThemeParams","requestAppWebView","appName","discussionChatId","isEnabled","updateChatFullInfo","isPreHistoryHidden","bannedRights","updatedFullInfo","selectChatFullInfo","members","kickedMembers","isBanned","viewMessages","isUnblocked","m","adminRights","customTitle","chatAfterUpdate","adminMembersById","isDismissed","newAdminMembersById","remove","rest","updateManagementProgress","ManagementProgress","Promise","all","avatarHash","profilePhoto","photosToDelete","nextPhoto","photos","newPhotos","p","toDelete","groups","addedById","group","isForum","addChats","forDiscussionIds","channel","fullChat","activeChatFolder","requestedDraft","offset","addChatMembers","setNewChatMembersDialogState","newChatMembersProgress","NewChatMembersProgress","Loading","Closed","isProtected","enabledReactions","settings","isChatSuperGroup","toggleStoryRibbon","isShown","isArchived","forumPanelChatId","isFromSideMenu","attachMenu","bots","requestedAttachBotInstall","onConfirm","action","requestAttachBotInChat","listedTopicIds","topicsCount","offsetTopic","acc","el","topic","accTopic","offsetTopicId","TOPICS_SLICE","TOPICS_SLICE_SECOND_LOAD","addMessages","messages","updateTopics","count","updateListedTopicIds","entries","_ref5","formattedText","replyingToId","readInboxMessageIdByTopicId","_ref6","shouldCloseChatOnError","openForumPanel","closeForumPanel","prevIsEnabled","areParticipantsHidden","iconColor","iconEmojiId","createTopicPanel","isLoading","closeCreateTopicPanel","deleteTopic","editTopicPanel","closeEditTopicPanel","topicsPinnedLimit","appConfig","chatlistModal","invite","peerIds","peers","peerId","notJoinedCount","peer","isNotJoined","folderTitle","invites","shareFolderScreen","screen","SettingsScreens","Folders","pop","isConfirmedForChatlist","isChatList","hasMyInvites","suggestions","removal","suggestedPeerIds","deleteFolderDialogModal","detectedLanguage","updatePeerFullInfo","isTranslationDisabled","silentSound","audioElement","audioContext","sounds","initializeSoundsForSafari","initializeSounds","sound","prevSrc","src","muted","volume","play","then","currentTime","requestNextMutation","joinAudio","Audio","connectingAudio","loop","leaveAudio","allowTalkAudio","busyAudio","connectAudio","endAudio","incomingAudio","ringingAudio","join","allowTalk","leave","connecting","incoming","end","connect","busy","ringing","fetchGroupCall","call","isLoaded","fetchGroupCallParticipants","nextOffset","isCallPanelVisible","subscribed","requestMasterAndJoinGroupCall","selectActiveGroupCall","hasPublicUsername","getMainUsername","inviteLink","canSelfUnmute","copyTextToClipboard","full","requestMasterAndCallAction","ARE_CALLS_SUPPORTED","phoneCall","toggleGroupCallPanel","ctx","AudioContext","webkitAudioContext","srcObject","silence","safePlay","createAudioElement","checkNavigatorUserMediaPermissions","groupCalls","activeGroupCallId","selectChatGroupCall","leaveGroupCall","rejoin","isVideo","state","participantId","adminId","oscillator","createOscillator","dst","createMediaStreamDestination","MediaStream","assign","stream","getAudioTracks","enabled","getGroupCallAudioElement","getGroupCallAudioContext","removeGroupCallAudioElement","navigator","mediaDevices","getUserMedia","video","getVideoTracks","getTracks","track","stop","checkMicrophonePermission","catch","audio","groupCallId","groupCallUpdate","addToParticipantCount","resetParticipantCount","participants","isLeft","removeGroupCall","updateActiveGroupCall","updateGroupCallParticipant","participantUpdate","noUpdateCount"],"sourceRoot":""}