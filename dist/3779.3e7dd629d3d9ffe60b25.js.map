{"version":3,"file":"3779.3e7dd629d3d9ffe60b25.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useSignalRef.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/hooks/useCurrentTimeSignal.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useVideoWaitingSignal.ts","webpack://telegram-t/./src/lib/video-preview/VideoPreview.ts","webpack://telegram-t/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://telegram-t/./src/components/mediaViewer/SeekLine.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/story/StoryViewer.module.scss?5f32","webpack://telegram-t/./src/components/story/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/story/helpers/dimensions.ts","webpack://telegram-t/./src/components/story/hooks/useSlideSizes.ts","webpack://telegram-t/./src/components/story/hooks/useStoryProps.ts","webpack://telegram-t/./src/components/story/StealthModeModal.module.scss?40cf","webpack://telegram-t/./src/components/story/StealthModeModal.tsx","webpack://telegram-t/./src/components/story/StoryDeleteConfirmModal.tsx","webpack://telegram-t/./src/components/story/privacy/AllowDenyList.tsx","webpack://telegram-t/./src/components/story/privacy/CloseFriends.module.scss?5d02","webpack://telegram-t/./src/components/story/privacy/CloseFriends.tsx","webpack://telegram-t/./src/components/story/StorySettings.module.scss?b887","webpack://telegram-t/./src/components/story/StorySettings.tsx","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStoryForward.tsx","webpack://telegram-t/./src/components/story/StoryCaption.tsx","webpack://telegram-t/./src/components/story/StoryFooter.module.scss?19b1","webpack://telegram-t/./src/components/story/StoryFooter.tsx","webpack://telegram-t/./src/components/story/StoryProgress.tsx","webpack://telegram-t/./src/components/story/StoryProgress.module.scss?59b4","webpack://telegram-t/./src/components/story/Story.tsx","webpack://telegram-t/./src/hooks/useLongPress.ts","webpack://telegram-t/./src/components/story/StoryPreview.tsx","webpack://telegram-t/./src/components/story/StorySlides.tsx","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/components/story/StoryViewModal.module.scss?06b1","webpack://telegram-t/./src/components/story/StoryView.tsx","webpack://telegram-t/./src/components/story/StoryViewModal.tsx","webpack://telegram-t/./src/components/story/StoryViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.module.scss?0842","webpack://telegram-t/./src/components/modals/map/MapModal.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.module.scss?df39","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/usePopupLimit.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.module.scss?615e","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.module.scss?e925","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.module.scss?b798","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.module.scss?1c3e","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.tsx","webpack://telegram-t/./src/components/common/CountryPickerModal.module.scss?d5e6","webpack://telegram-t/./src/components/common/CountryPickerModal.tsx","webpack://telegram-t/./src/components/main/AppendEntityPicker.module.scss?b380","webpack://telegram-t/./src/components/main/AppendEntityPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.module.scss?6d7c","webpack://telegram-t/./src/components/main/premium/GiveawayModal.module.scss?ac86","webpack://telegram-t/./src/components/main/premium/GiveawayModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumGiftingModal.module.scss?a8f0","webpack://telegram-t/./src/components/main/premium/PremiumGiftingModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/common/StickerButton.tsx","webpack://telegram-t/./src/components/common/ReactionEmoji.module.scss?b399","webpack://telegram-t/./src/components/common/ReactionEmoji.tsx","webpack://telegram-t/./src/components/common/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://telegram-t/./src/components/common/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.module.scss?aeb4","webpack://telegram-t/./src/components/modals/boost/BoostModal.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.module.scss?1c77","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://telegram-t/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://telegram-t/./src/components/common/AboutAdsModal.module.scss?0072","webpack://telegram-t/./src/components/common/AboutAdsModal.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.module.scss?b26e","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/common/SeenByModal.module.scss?1d45","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.module.scss?a8aa","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.module.scss?68c3","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.module.scss?497f","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/left/settings/PremiumStatusItem.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.module.scss?16a3","webpack://telegram-t/./src/components/left/settings/PrivacyMessages.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPerformance.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyLastSeen.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/left/MuteChatModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getSelectionAsFormattedText.ts","webpack://telegram-t/./src/components/common/PinMessageModal.async.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/components/middle/message/ReadTimeMenuItem.module.scss?c38f","webpack://telegram-t/./src/components/middle/message/ReadTimeMenuItem.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/middle/message/helpers/isSelectionRangeInsideMessage.ts","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.module.scss?0536","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.module.scss?695a","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommand.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.module.scss?f347","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/TextFormatter.tsx","webpack://telegram-t/./src/util/getKeyFromEvent.ts","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPost.module.scss?fea0","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPostMeta.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentStory.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.module.scss?96a0","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.module.scss?bbd6","webpack://telegram-t/./src/components/right/statistics/StatisticsMessagePublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsStoryPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageBot.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.module.scss?717b","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.module.scss?de6c","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/util/launchMediaWorkers.ts"],"sourcesContent":["import type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport windowSize from '../../../util/windowSize';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useCallback, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { DEBUG } from '../config';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\nimport { IS_IOS, IS_PWA } from '../util/windowEnvironment';\n\ntype RefType = {\n  current: HTMLVideoElement | null;\n};\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: RefType,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiMessage, ApiPeer,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getChatAvatarHash,\n  getMessageActionPhoto,\n  getMessageDocument,\n  getMessageFileName,\n  getMessageFileSize,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoAvatarMediaHash,\n  getVideoDimensions,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n} from '../../../global/helpers';\nimport { AVATAR_FULL_DIMENSIONS, VIDEO_AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\n\ntype UseMediaProps = {\n  mediaId?: number;\n  message?: ApiMessage;\n  avatarOwner?: ApiPeer;\n  origin?: MediaViewerOrigin;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  message,\n  mediaId = 0,\n  avatarOwner,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const actionPhoto = message ? getMessageActionPhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n  const avatarMedia = avatarOwner?.photos?.[mediaId];\n  const isVideoAvatar = Boolean(avatarMedia?.isVideo || actionPhoto?.isVideo);\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto || actionPhoto));\n  const { isGif } = video || webPageVideo || {};\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaHash = useMemo(() => (isFull?: boolean) => {\n    if (avatarOwner) {\n      if (avatarMedia) {\n        if (avatarMedia.isVideo && isFull) {\n          return getVideoAvatarMediaHash(avatarMedia);\n        } else if (mediaId === 0) {\n          // Show preloaded avatar if this is the first media (when user clicks on profile info avatar)\n          return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n        } else {\n          return `photo${avatarMedia.id}?size=c`;\n        }\n      } else {\n        return getChatAvatarHash(avatarOwner, isFull ? 'big' : 'normal');\n      }\n    }\n    if (actionPhoto && isVideoAvatar && isFull) {\n      return `videoAvatar${actionPhoto.id}?size=u`;\n    }\n    return message && getMessageMediaHash(message, isFull ? 'full' : 'preview');\n  }, [avatarOwner, actionPhoto, isVideoAvatar, message, avatarMedia, mediaId]);\n\n  const pictogramBlobUrl = useMedia(\n    message\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocumentPhoto || isDocumentVideo)\n    && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'full'),\n    delay,\n  );\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    (!isVideoAvatar && !isVideo) ? (previewBlobUrl || pictogramBlobUrl || bestImageData) : undefined\n  );\n\n  const isLocal = Boolean(localBlobUrl);\n  const fileName = message\n    ? getMessageFileName(message)\n    : avatarOwner\n      ? `avatar${avatarOwner!.id}.${avatarOwner?.hasVideoAvatar ? 'mp4' : 'jpg'}`\n      : undefined;\n\n  const dimensions = useMemo(() => {\n    if (message) {\n      if (isDocumentPhoto || isDocumentVideo) {\n        return getMessageDocument(message)!.mediaSize!;\n      } else if (photo || webPagePhoto || actionPhoto) {\n        return getPhotoFullDimensions((photo || webPagePhoto || actionPhoto)!)!;\n      } else if (video || webPageVideo) {\n        return getVideoDimensions((video || webPageVideo)!)!;\n      }\n    } else {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n    return undefined;\n  }, [\n    isDocumentPhoto,\n    isDocumentVideo,\n    isVideoAvatar,\n    message,\n    photo,\n    video,\n    actionPhoto,\n    webPagePhoto,\n    webPageVideo,\n  ]);\n\n  return {\n    getMediaHash,\n    photo,\n    video,\n    webPagePhoto,\n    actionPhoto,\n    webPageVideo,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocumentPhoto,\n    isDocumentVideo,\n    fileName,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    avatarPhoto: avatarMedia,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    videoSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useBlur from './useBlur';\nimport useSyncEffect from './useSyncEffect';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useEffect(() => {\n    return () => {\n      setZoomChange(1);\n    };\n  }, []);\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectBot,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: NoneToVoidFunction;\n  onConfirm?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onConfirm,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [onConfirm, album, message.id, deleteMessages, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    onConfirm?.();\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [onConfirm, album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n            {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n    const isChatWithBot = Boolean(selectBot(global, message.chatId));\n\n    const willDeleteForCurrentUserOnly = (chat && isChatBasicGroup(chat) && !canDeleteForAll) || isChatWithBot;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\n\nimport { isUserId } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPhoto,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { MenuItemProps } from '../ui/MenuItem';\n\nimport { getMessageMediaFormat, getMessageMediaHash, isUserId } from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n  selectIsDownloading,\n  selectIsMessageProtected,\n} from '../../global/selectors';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport DeleteMessageModal from '../common/DeleteMessageModal';\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  avatarOwnerId?: string;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  message?: ApiMessage;\n  canUpdateMedia?: boolean;\n  isSingleMedia?: boolean;\n  avatarPhoto?: ApiPhoto;\n  avatarOwner?: ApiPeer;\n  fileName?: string;\n  canReport?: boolean;\n  selectMedia: (mediaId?: number) => void;\n  onReport: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  avatarPhoto,\n  avatarOwnerId,\n  fileName,\n  isChatProtected,\n  isDownloading,\n  isProtected,\n  canReport,\n  canDelete,\n  canUpdate,\n  messageListType,\n  selectMedia,\n  onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    message && getMessageMediaFormat(message, 'download'),\n  );\n\n  const handleDownloadClick = useLastCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  });\n\n  const handleZoomOut = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  });\n\n  const handleZoomIn = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  });\n\n  const handleUpdate = useLastCallback(() => {\n    if (!avatarPhoto || !avatarOwnerId) return;\n    if (isUserId(avatarOwnerId)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwnerId, photo: avatarPhoto });\n    }\n    selectMedia(0);\n  });\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModals() {\n    return message\n      ? (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          message={message}\n        />\n      )\n      : (avatarOwnerId && avatarPhoto) ? (\n        <DeleteProfilePhotoModal\n          isOpen={isDeleteModalOpen}\n          onClose={closeDeleteModal}\n          onConfirm={onBeforeDelete}\n          profileId={avatarOwnerId}\n          photo={avatarPhoto}\n        />\n      ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon icon-download\" />\n      </Button>\n    );\n  }\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (message?.isForwardingAllowed && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'close' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReport) {\n      menuItems.push({\n        icon: 'flag',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModal,\n        children: lang('Delete'),\n        destructive: true,\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children, destructive,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon}\n              href={href}\n              download={download}\n              onClick={onClick}\n              destructive={destructive}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModals()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {message?.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon icon-flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <i className=\"icon icon-copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModal}\n        >\n          <i className=\"icon icon-delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      {canDelete && renderDeleteModals()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    message, canUpdateMedia, avatarPhoto, avatarOwner,\n  }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarHash);\n    const canDeleteAvatar = canUpdateMedia && !!avatarPhoto;\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && !!avatarPhoto && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      isDownloading,\n      isProtected,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      avatarOwnerId: avatarOwner?.id,\n    };\n  },\n)(MediaViewerActions));\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import { createSignal } from '../../../util/signals';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { throttle } from '../../util/schedulers';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isForVideo, onClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll allow-selection ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">\n            {text}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useEffect } from '../lib/teact/teact';\n\nimport { createSignal } from '../util/signals';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useEffect(() => {\n    return () => {\n      setCurrentTime(0);\n    };\n  }, []);\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nexport const [getIsVideoWaiting, setIsVideoWaiting] = createSignal(false);\n\nexport default function useVideoWaitingSignal() {\n  useEffect(() => {\n    return () => {\n      setIsVideoWaiting(false);\n    };\n  }, []);\n  return [getIsVideoWaiting, setIsVideoWaiting] as const;\n}\n","import { ApiMediaFormat } from '../../api/types';\n\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\nimport { IS_ANDROID, IS_IOS } from '../../util/windowEnvironment';\nimport { callApi } from '../../api/gramjs';\nimport { requestMutation } from '../fasterdom/fasterdom';\n\nconst IS_MOBILE = IS_ANDROID || IS_IOS;\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst MAX_FRAMES = IS_MOBILE ? 40 : 80;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames: Map<number, ImageBitmap> = new Map();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          MAX_FRAMES,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => {\n    videoPreview?.destroy();\n    videoPreview = undefined;\n  };\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ingarEvU\",\"preview\":\"TqpEWfl3\",\"previewCanvas\":\"fKVz2lln\",\"previewTime\":\"bGiNvx5D\",\"previewTimeText\":\"mnkqvOMR\",\"track\":\"Od9ZSc1U\",\"buffered\":\"ANe2DKfp\",\"played\":\"igaGLblf\",\"seeking\":\"beUP6SqY\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport { createVideoPreviews, getPreviewDimensions, renderVideoPreview } from '../../lib/video-preview/VideoPreview';\nimport { animateNumber } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents } from '../../util/captureEvents';\nimport { formatMediaDuration } from '../../util/date/dateFormat';\nimport { clamp, round } from '../../util/math';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\n\nimport { useThrottledSignal } from '../../hooks/useAsyncResolvers';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSignal from '../../hooks/useSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  playbackRate: number;\n  isActive?: boolean;\n  isPlaying?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst LOCK_TIMEOUT = 250;\nlet cancelAnimation: Function | undefined;\n\nconst SeekLine: FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  playbackRate,\n  url,\n  isActive,\n  isPlaying,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const [getCurrentTimeSignal] = useCurrentTimeSignal();\n  const [getIsWaiting] = useVideoWaitingSignal();\n  const getCurrentTime = useThrottledSignal(getCurrentTimeSignal, LOCK_TIMEOUT);\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  // eslint-disable-next-line no-null/no-null\n  const previewCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const previewRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const progressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const previewTimeRef = useRef<HTMLDivElement>(null);\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useLastCallback((time: number) => {\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  });\n\n  useEffect(() => {\n    if (isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (cancelAnimation) cancelAnimation();\n    cancelAnimation = undefined;\n    if (!isLockedRef.current && !isSeeking) {\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime, playbackRate, duration]);\n\n  useEffect(() => {\n    if (!isPlaying || getIsWaiting()) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    }\n  }, [isPlaying, getSelectedTime, getIsWaiting]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n    // eslint-disable-next-line\n  }, [isPlaying, playbackRate, duration]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = e instanceof MouseEvent ? e.pageX : e.touches[0].pageX;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const stopAnimation = () => {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      stopAnimation();\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      stopAnimation();\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      stopAnimation();\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, LOCK_TIMEOUT);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n    playbackRate,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            // @ts-ignore\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/date/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSignal from '../../hooks/useSignal';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport SeekLine from './SeekLine';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    let timeout: number | undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useLastCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n  });\n\n  const handleSeekStart = useLastCallback(() => {\n    setIsSeeking(true);\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPlaying={isPlaying}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        playbackRate={playbackRate}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={buildClassName('icon', isPlaying ? 'icon-pause' : 'icon-play')} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <i className=\"icon icon-pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={buildClassName('icon ', isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen')} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nexport default memo(VideoPlayerControls);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { clamp } from '../../util/math';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/windowEnvironment';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useFullscreen from '../../hooks/window/useFullscreen';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n  isClickDisabled?: boolean;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useLastCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  });\n\n  const handleLeaveFullscreen = useLastCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  });\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n\n  const handleVideoMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const handleVideoLeave = useLastCallback((e) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (e.clientX < bounds.left || e.clientX > bounds.right || e.clientY < bounds.top || e.clientY > bounds.bottom) {\n      toggleControls(false);\n    }\n  });\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const isUnsupported = useUnsupportedMedia(videoRef, undefined, !url);\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered && !isUnsupported, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlaying && !shouldRenderSpinner && !isUnsupported, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen || isUnsupported) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted, isUnsupported]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  });\n\n  useVideoCleanup(videoRef, []);\n  const [, setCurrentTime] = useCurrentTimeSignal();\n  const [, setIsVideoWaiting] = useVideoWaitingSignal();\n\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setIsVideoWaiting(false);\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  });\n\n  const handleEnded = useLastCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  });\n\n  const handleFullscreenChange = useLastCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  });\n\n  const handleSeek = useLastCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  });\n\n  const handleVolumeChange = useLastCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handlePlaybackRateChange = useLastCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  });\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    // eslint-disable-next-line jsx-a11y/mouse-events-have-key-events\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseOut={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onWaiting={() => setIsVideoWaiting(true)}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n          src={url}\n        />\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !isUnsupported && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiDimensions, ApiMessage, ApiPeer,\n} from '../../api/types';\nimport { MediaViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  selectChat, selectChatMessage, selectIsMessageProtected, selectScheduledMessage, selectTabState, selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { ARE_WEBCODECS_SUPPORTED, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  mediaId?: number;\n  chatId?: string;\n  threadId?: ThreadId;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  onClose: () => void;\n  onFooterClick: () => void;\n  isMoving?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  mediaId?: number;\n  senderId?: string;\n  threadId?: ThreadId;\n  avatarOwner?: ApiPeer;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    mediaId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    origin,\n    withAnimation,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    isHidden,\n    onClose,\n    onFooterClick,\n    isMoving,\n  } = props;\n\n  const lang = useLang();\n\n  const {\n    isVideo,\n    isPhoto,\n    actionPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    videoSize,\n    loadProgress,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  if (avatarOwner || actionPhoto) {\n    if (!isVideoAvatar) {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={chatId} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={mediaId}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={videoSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n          />\n        </div>\n      );\n    }\n  }\n\n  if (!message) return undefined;\n  const textParts = message.content.action?.type === 'suggestProfilePhoto'\n    ? lang('Conversation.SuggestedPhotoTitle')\n    : renderMessageText({ message, forcePlayback: true, isForMediaViewer: true });\n\n  const hasFooter = Boolean(textParts);\n  const posterSize = message && calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={mediaId}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n    } = selectTabState(global).mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        origin,\n        volume,\n        isMuted,\n        isHidden,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useSignal from '../../hooks/useSignal';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  mediaId?: number;\n  getMediaId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMedia: (id?: number) => void;\n  chatId?: string;\n  threadId?: ThreadId;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  onClose: () => void;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  mediaId,\n  getMediaId,\n  selectMedia,\n  isVideo,\n  isGif,\n  isOpen,\n  withAnimation,\n  isHidden,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftSlideRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const rightSlideRef = useRef<HTMLDivElement>(null);\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const initialContentRectRef = useRef<DOMRect | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveMediaId, setActiveMediaId] = useSignal<number | undefined>(mediaId);\n  const activeMediaIdRef = useSignalRef(getActiveMediaId);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeMediaId = useDerivedState(getActiveMediaId);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectMediaDebounced = useDebouncedCallback(selectMedia, [selectMedia], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = Boolean(isGif && !IS_IOS);\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  });\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { scale, x, y } = transformRef.current;\n    // Only update active media if slide is in default position\n    if (x === 0 && y === 0 && scale === 1) {\n      setActiveMediaId(mediaId);\n    }\n  }, [mediaId, setActiveMediaId, transformRef]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeMediaIdRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMediaId(activeMediaIdRef.current, direction);\n      if (mId !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      const initialContentRect = initialContentRectRef.current;\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const mId = getMediaId(activeMediaIdRef.current, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (mId !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveMediaId(mId);\n        selectMediaDebounced(mId);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      withWheelDrag: true,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRectRef.current = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > SWIPE_DIRECTION_THRESHOLD || absOffsetX / absOffsetY > SWIPE_DIRECTION_TOLERANCE) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    onClose,\n    setTransform,\n    getMediaId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMediaDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    withAnimation,\n    setIsMouseDown,\n    setIsActive,\n    isHidden,\n    isFullscreen,\n    transformRef,\n    setActiveMediaId,\n    activeMediaIdRef,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  if (activeMediaId === undefined) return undefined;\n\n  const nextMediaId = getMediaId(activeMediaId, 1);\n  const prevMediaId = getMediaId(activeMediaId, -1);\n  const hasPrev = prevMediaId !== undefined;\n  const hasNext = nextMediaId !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            mediaId={prevMediaId}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          /* eslint-disable-next-line react/jsx-props-no-spreading */\n          {...rest}\n          mediaId={activeMediaId}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            mediaId={nextMediaId}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../api/types';\n\nimport { getSenderTitle } from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectPeer,\n  selectSender,\n} from '../../global/selectors';\nimport { formatMediaDateTime } from '../../util/date/dateFormat';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n  isFallbackAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  message?: ApiMessage;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isFallbackAvatar,\n  isAvatar,\n  message,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useLastCallback(() => {\n    closeMediaViewer();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  });\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      <Avatar key={sender.id} size=\"medium\" peer={sender} />\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang(isFallbackAvatar ? 'lng_mediaview_profile_public_photo' : 'lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: selectPeer(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPhoto, ApiUser,\n} from '../../api/types';\nimport { MediaViewerOrigin, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { getChatMediaMessageIds, isChatAdmin, isUserId } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMediaSearch, selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n  selectPerformanceSettingsValue,\n  selectScheduledMessage,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport usePrevious from '../../hooks/usePrevious';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  mediaId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiPeer;\n  avatarOwnerFallbackPhoto?: ApiPhoto;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n};\n\nconst ANIMATION_DURATION = 250;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  mediaId,\n  senderId,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatarOwner,\n  avatarOwnerFallbackPhoto,\n  message,\n  chatMessages,\n  collectionIds,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || mediaId);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  const {\n    webPagePhoto,\n    webPageVideo,\n    isVideo,\n    actionPhoto,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n    avatarPhoto,\n    fileName,\n  } = useMediaProps({\n    message, avatarOwner, mediaId, origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReport = !!avatarPhoto && !isChatWithSelf;\n  const isVisible = !isHidden && isOpen;\n\n  /* Navigation */\n  const singleMediaId = webPagePhoto || webPageVideo || actionPhoto ? mediaId : undefined;\n\n  const mediaIds = useMemo(() => {\n    if (singleMediaId) {\n      return [singleMediaId];\n    } else if (avatarOwner) {\n      return avatarOwner.photos?.map((p, i) => i) || [];\n    } else {\n      return getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n    }\n  }, [singleMediaId, avatarOwner, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaIndex = mediaId ? mediaIds.indexOf(mediaId) : -1;\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaIndex;\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      document.body.classList.toggle('is-media-viewer-open', isOpen);\n    }\n  }, [isMobile, isOpen]);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    mql.addEventListener('change', forceUpdate);\n\n    return () => {\n      mql.removeEventListener('change', forceUpdate);\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevIsHidden = usePrevious<boolean | undefined>(isHidden);\n  const prevOrigin = usePrevious(origin);\n  const prevMediaId = usePrevious(mediaId);\n  const prevAvatarOwner = usePrevious<ApiPeer | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText({ message, forcePlayback: true, isForMediaViewer: true }) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevMediaId !== mediaId;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (!prevMessage || shouldAnimateOpening) && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, shouldAnimateOpening, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const handleClose = useLastCallback(() => closeMediaViewer());\n\n  const mediaIdRef = useStateRef(mediaId);\n  const handleFooterClick = useLastCallback(() => {\n    handleClose();\n\n    const currentMediaId = mediaIdRef.current;\n\n    if (!chatId || !currentMediaId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId: currentMediaId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId: currentMediaId });\n    }\n  });\n\n  const handleForward = useLastCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [mediaId!],\n    });\n  });\n\n  const selectMedia = useLastCallback((id?: number) => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: id,\n      avatarOwnerId: avatarOwner?.id,\n      origin: origin!,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const mediaIdsRef = useStateRef(mediaIds);\n\n  const getMediaId = useLastCallback((fromId?: number, direction?: number): number | undefined => {\n    if (fromId === undefined) return undefined;\n    const mIds = mediaIdsRef.current;\n    const index = mIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < mIds.length - 1)) {\n      return mIds[index + direction];\n    }\n    return undefined;\n  });\n\n  const handleBeforeDelete = useLastCallback(() => {\n    if (mediaIds.length <= 1) {\n      handleClose();\n      return;\n    }\n    let index = mediaId ? mediaIds.indexOf(mediaId) : -1;\n    // Before deleting, select previous media or the first one\n    index = index > 0 ? index - 1 : 0;\n    selectMedia(mediaIds[index]);\n  });\n\n  const lang = useLang();\n\n  function renderSenderInfo() {\n    return avatarOwner ? (\n      <SenderInfo\n        key={mediaId}\n        chatId={avatarOwner.id}\n        isAvatar\n        isFallbackAvatar={isUserId(avatarOwner.id)\n          && (avatarOwner as ApiUser).photos?.[mediaId!]?.id === avatarOwnerFallbackPhoto?.id}\n      />\n    ) : (\n      <SenderInfo\n        key={mediaId}\n        chatId={chatId}\n        messageId={mediaId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined} ref={headerRef}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          message={message}\n          canUpdateMedia={canUpdateMedia}\n          avatarPhoto={avatarPhoto}\n          avatarOwner={avatarOwner}\n          fileName={fileName}\n          canReport={canReport}\n          selectMedia={selectMedia}\n          onBeforeDelete={handleBeforeDelete}\n          onReport={openReportModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          peerId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        mediaId={mediaId}\n        getMediaId={getMediaId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectMedia={selectMedia}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      origin,\n      isHidden,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId } = global;\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && mediaId)) {\n        return { withAnimation, shouldSkipHistoryAnimations };\n      }\n\n      const message = selectChatMessage(global, chatId, mediaId);\n      if (!message) {\n        return { withAnimation, shouldSkipHistoryAnimations };\n      }\n\n      return {\n        chatId,\n        mediaId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        withAnimation,\n        isHidden,\n        shouldSkipHistoryAnimations,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const user = selectUser(global, avatarOwnerId);\n      const chat = selectChat(global, avatarOwnerId);\n      let canUpdateMedia = false;\n      if (user) {\n        canUpdateMedia = avatarOwnerId === currentUserId;\n      } else if (chat) {\n        canUpdateMedia = isChatAdmin(chat);\n      }\n\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        mediaId,\n        senderId: avatarOwnerId,\n        avatarOwner: user || chat,\n        avatarOwnerFallbackPhoto: user ? selectUserFullInfo(global, avatarOwnerId)?.fallbackPhoto : undefined,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n      };\n    }\n\n    if (!(chatId && threadId && mediaId)) {\n      return { withAnimation, shouldSkipHistoryAnimations };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, mediaId);\n    } else {\n      message = selectChatMessage(global, chatId, mediaId);\n    }\n\n    if (!message) {\n      return { withAnimation, shouldSkipHistoryAnimations };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectChatScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline\n      || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingListByMessageId(global, chatId, threadId, message.id)\n        || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      mediaId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n    };\n  },\n)(MediaViewer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"bu_hGbaa\",\"fullSize\":\"W9A8SEMl\",\"backdrop\":\"OFh6u50Q\",\"captionBackdrop\":\"Jd1DYS6Y\",\"backdropNonInteractive\":\"xe67dhtF\",\"close\":\"Mye8Dwxa\",\"wrapper\":\"gLHHo5k8\",\"slideAnimation\":\"GJVwqV9e\",\"slideAnimationToActive\":\"_Yn4SWUB\",\"content\":\"hGCH03qc\",\"slideAnimationFromActive\":\"ZecqXqKy\",\"storyHeader\":\"e7HHuS1g\",\"composer\":\"FXineBYO\",\"caption\":\"RKedwa0I\",\"captionGradient\":\"sHNAfxzf\",\"media\":\"PVZ8TOWS\",\"mediaPreview\":\"lQfkulvp\",\"contentInner\":\"Wi0DXPH2\",\"name\":\"Ka1CGfzq\",\"slide\":\"urTtSsk9\",\"mobileSlide\":\"AjXOHOgE\",\"slidePreview\":\"Sef28wEh\",\"activeSlide\":\"uAlXNXJN\",\"slideInner\":\"g8ypsnnC\",\"mediaWrapper\":\"YiuvOPgT\",\"forward\":\"pGKsAszF\",\"storyIndicators\":\"jGDd2sza\",\"sender\":\"eMYhXF_X\",\"senderInfoTransition\":\"PXnfXZur\",\"senderInfo\":\"WpyVfrsc\",\"senderMeta\":\"jmKI_lhC\",\"senderName\":\"H1uod43o\",\"storyMetaRow\":\"zimpR8Hz\",\"storyMeta\":\"hGTnZuar\",\"closeButton\":\"WlLsjJ2Z\",\"actions\":\"GrsJNw3y\",\"active\":\"q756IpZB\",\"visibilityButton\":\"prxptFFf\",\"visibilityButtonSelf\":\"_MVsZpgB\",\"button\":\"TkphaPyQ\",\"buttonMenu\":\"K0_xAdzf\",\"captionInner\":\"D_5mWNmi\",\"captionContent\":\"ilyTRZtw\",\"captionText\":\"hmFA5qb1\",\"hasOverflow\":\"e1gyTmKe\",\"expanded\":\"HIMnUViv\",\"animate\":\"CvnxnCxN\",\"withShowMore\":\"Vq8pl_kQ\",\"captionShowMore\":\"bM5rlQtM\",\"navigate\":\"nZ30pf4g\",\"prev\":\"SXpRZiax\",\"next\":\"twOBFwUE\",\"modal\":\"nLPOogqS\",\"thumbnail\":\"MnNC7VHS\",\"ghost\":\"fME2l_yv\",\"ghost2\":\"TYicp2_K\",\"ghostImage\":\"HjoURJRK\",\"forwardHeader\":\"JJFtefb9\",\"clickable\":\"BsqMBS2I\",\"headerTitle\":\"G8OgmMDJ\",\"forwardInfo\":\"_M8CgT7s\",\"fromPeer\":\"nJr8QgYX\"};","import type { IDimensions } from '../../../global/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport fastBlur from '../../../lib/fastBlur';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getPeerStoryHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../util/windowEnvironment';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport storyRibbonStyles from '../StoryRibbon.module.scss';\nimport styles from '../StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 200;\nconst OFFSET_BOTTOM = 3.5 * REM;\nconst MOBILE_OFFSET = 0.5 * REM;\nconst MOBILE_WIDTH = 600;\n\nexport function animateOpening(\n  userId: string,\n  origin: StoryViewerOrigin,\n  thumb: string,\n  bestImageData: string | undefined,\n  dimensions: IDimensions,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, userId);\n  if (!fromImage) {\n    return;\n  }\n  const { width: windowWidth, height: windowHeight } = windowSize.get();\n  let { width: toWidth, height: toHeight } = dimensions;\n\n  const isMobile = windowWidth <= MOBILE_WIDTH;\n\n  if (isMobile) {\n    toWidth = windowWidth - 2 * MOBILE_OFFSET;\n    toHeight = windowHeight - OFFSET_BOTTOM - 2 * MOBILE_OFFSET;\n\n    const safeAreaBottom = getComputedStyle(document.documentElement).getPropertyValue('--safe-area-bottom');\n    if (safeAreaBottom) {\n      toHeight -= parseFloat(safeAreaBottom);\n    }\n  }\n\n  const toLeft = isMobile ? MOBILE_OFFSET : (windowWidth - toWidth) / 2;\n  const toTop = isMobile ? MOBILE_OFFSET : (windowHeight - (toHeight + OFFSET_BOTTOM)) / 2;\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || thumb, !bestImageData);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: '',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  userId: string,\n  origin: StoryViewerOrigin,\n  bestImageData: string,\n) {\n  const { mediaEl: toImage } = getNodes(origin, userId);\n\n  const fromImage = document.getElementById('StoryViewer')!.querySelector<HTMLImageElement>(\n    `.${styles.mobileSlide} .${styles.media}, .${styles.activeSlide} .${styles.media}`,\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: toTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  const toTranslateX = (toLeft + toWidth / 2) - (fromLeft + fromWidth / 2);\n  const toTranslateY = (toTop + toHeight / 2) - (fromTop + fromHeight / 2);\n  const toScaleX = toWidth / fromWidth;\n  const toScaleY = toHeight / fromHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData);\n    applyStyles(ghost, {\n      top: `${fromTop}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromHeight}px`,\n    });\n\n    const ghost2 = createGhost(toImage.src, undefined, true);\n    const ghost2Top = (fromTop + fromHeight / 2) - fromWidth / 2;\n    applyStyles(ghost2, {\n      top: `${ghost2Top}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromWidth}px`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.appendChild(ghost2);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX}, ${toScaleY})`,\n      });\n\n      applyStyles(ghost2, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX})`,\n        opacity: '1',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n\n          if (document.body.contains(ghost2)) {\n            document.body.removeChild(ghost2);\n          }\n\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nfunction createGhost(source: string, hasBlur = false, isGhost2 = false) {\n  const ghost = document.createElement('div');\n  ghost.classList.add(!isGhost2 ? styles.ghost : styles.ghost2);\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n  img.classList.add(styles.ghostImage);\n\n  if (hasBlur) {\n    const canvas = document.createElement('canvas');\n    canvas.classList.add(styles.thumbnail);\n    img.onload = () => {\n      const ctx = canvas.getContext('2d', { alpha: false })!;\n      const {\n        width,\n        height,\n      } = img;\n\n      requestMutation(() => {\n        canvas.width = width;\n        canvas.height = height;\n\n        if (IS_CANVAS_FILTER_SUPPORTED) {\n          ctx.filter = `blur(${RADIUS}px)`;\n        }\n\n        ctx.drawImage(img, -RADIUS * 2, -RADIUS * 2, width + RADIUS * 4, height + RADIUS * 4);\n\n        if (!IS_CANVAS_FILTER_SUPPORTED) {\n          fastBlur(ctx, 0, 0, width, height, RADIUS, ITERATIONS);\n        }\n      });\n    };\n    img.src = source;\n    ghost.appendChild(canvas);\n  } else {\n    img.src = source;\n    ghost.appendChild(img);\n  }\n\n  return ghost;\n}\n\nfunction getNodes(origin: StoryViewerOrigin, userId: string) {\n  let containerSelector;\n  const mediaSelector = `#${getPeerStoryHtmlId(userId)}`;\n\n  switch (origin) {\n    case StoryViewerOrigin.StoryRibbon:\n      containerSelector = `#LeftColumn .${storyRibbonStyles.root}`;\n      break;\n    case StoryViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo';\n      break;\n    case StoryViewerOrigin.ChatList:\n      containerSelector = '#LeftColumn .chat-list';\n      break;\n    case StoryViewerOrigin.SearchResult:\n      containerSelector = '#LeftColumn .LeftSearch';\n      break;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement>(`${mediaSelector} img`);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n","import type { IDimensions } from '../../../global/types';\n\nimport { roundToNearestEven } from '../../../util/math';\n\nexport const BASE_STORY_WIDTH = 720;\nexport const BASE_STORY_HEIGHT = 1280;\nconst BASE_SCREEN_WIDTH = 1200;\nconst BASE_SCREEN_HEIGHT = 800;\nconst BASE_ACTIVE_SLIDE_WIDTH = 405;\nconst BASE_ACTIVE_SLIDE_HEIGHT = 720;\nconst BASE_SLIDE_WIDTH = 135;\nconst BASE_SLIDE_HEIGHT = 240;\nconst BASE_GAP_WIDTH = 40;\n\nexport function calculateSlideSizes(windowWidth: number, windowHeight: number): {\n  activeSlide: IDimensions;\n  slide: IDimensions;\n  scale: number;\n  toActiveScale: number;\n  fromActiveScale: number;\n} {\n  const scale = calculateScale(BASE_SCREEN_WIDTH, BASE_SCREEN_HEIGHT, windowWidth, windowHeight);\n\n  const activeSlideWidth = roundToNearestEven(BASE_ACTIVE_SLIDE_WIDTH * scale);\n  const slideWidth = roundToNearestEven(BASE_SLIDE_WIDTH * scale);\n  // Avoid fractional values to prevent blurry text\n  return {\n    activeSlide: {\n      width: activeSlideWidth,\n      height: roundToNearestEven(BASE_ACTIVE_SLIDE_HEIGHT * scale),\n    },\n    slide: {\n      width: slideWidth,\n      height: roundToNearestEven(BASE_SLIDE_HEIGHT * scale),\n    },\n    scale,\n    toActiveScale: activeSlideWidth / slideWidth,\n    fromActiveScale: slideWidth / activeSlideWidth,\n  };\n}\n\nexport function calculateOffsetX({\n  scale,\n  slideAmount,\n  isActiveSlideSize,\n  isMoveThroughActiveSlide,\n  isBackward,\n}: {\n  scale: number;\n  slideAmount: number;\n  isActiveSlideSize: boolean;\n  isMoveThroughActiveSlide?: boolean;\n  isBackward: boolean;\n}) {\n  const mainOffset = BASE_GAP_WIDTH + (isActiveSlideSize ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH);\n  const additionalOffset = (Math.abs(slideAmount) - 1)\n    * ((isMoveThroughActiveSlide ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH) + BASE_GAP_WIDTH);\n  const totalOffset = roundToNearestEven((mainOffset + additionalOffset) * scale);\n\n  return isBackward ? -totalOffset : totalOffset;\n}\n\nfunction calculateScale(baseWidth: number, baseHeight: number, newWidth: number, newHeight: number) {\n  const widthScale = newWidth / baseWidth;\n  const heightScale = newHeight / baseHeight;\n\n  return Math.min(widthScale, heightScale);\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport { calculateSlideSizes } from '../helpers/dimensions';\n\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nexport default function useSlideSizes() {\n  const { width: windowWidth, height: windowHeight } = useWindowSize();\n  return useMemo(() => calculateSlideSizes(windowWidth, windowHeight), [windowWidth, windowHeight]);\n}\n","import type { ApiTypeStory } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStoryMediaHash, hasMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nexport default function useStoryProps(\n  story?: ApiTypeStory, isCurrentUserPremium = false, isDropdownMenuOpen = false,\n) {\n  const isLoadedStory = story && 'content' in story;\n  const isDeletedStory = story && 'isDeleted' in story;\n  const hasText = isLoadedStory ? hasMessageText(story) : false;\n  const hasForwardInfo = isLoadedStory && Boolean(story.forwardInfo);\n\n  let thumbnail: string | undefined;\n  if (isLoadedStory) {\n    if (story.content.photo?.thumbnail) {\n      thumbnail = story.content.photo.thumbnail.dataUri;\n    }\n    if (story.content.video?.thumbnail?.dataUri) {\n      thumbnail = story.content.video.thumbnail.dataUri;\n    }\n  }\n\n  const previewHash = isLoadedStory ? getStoryMediaHash(story) : undefined;\n  const previewBlobUrl = useMedia(previewHash);\n  const isVideo = Boolean(isLoadedStory && story.content.video);\n  const noSound = isLoadedStory && story.content.video?.noSound;\n  const fullMediaHash = isLoadedStory ? getStoryMediaHash(story, 'full') : undefined;\n  const fullMediaData = useMedia(fullMediaHash, !story, isVideo ? ApiMediaFormat.Progressive : ApiMediaFormat.BlobUrl);\n  const altMediaHash = isVideo && isLoadedStory ? getStoryMediaHash(story, 'full', true) : undefined;\n  const altMediaData = useMedia(altMediaHash, !story, ApiMediaFormat.Progressive);\n\n  const hasFullData = Boolean(fullMediaData || altMediaData);\n  const bestImageData = isVideo ? previewBlobUrl : fullMediaData || previewBlobUrl;\n  const hasThumb = !previewBlobUrl && !hasFullData;\n\n  const canDownload = isCurrentUserPremium && isLoadedStory && !story.noForwards;\n  const downloadHash = isLoadedStory ? getStoryMediaHash(story, 'download') : undefined;\n  const downloadMediaData = useMedia(downloadHash, !canDownload && !isDropdownMenuOpen);\n\n  return {\n    isLoadedStory,\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewHash,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaHash,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    bestImageData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GrE47IXS\",\"closeButton\":\"NlWSF1pA\",\"stealthIcon\":\"qKi5jsGM\",\"title\":\"BFctFGoT\",\"description\":\"fZIJH4IG\",\"listItem\":\"RGD70uBt\",\"icon\":\"HCYfPccW\",\"button\":\"AM_sxoXP\",\"subtitle\":\"L8oRQyKb\"};","import React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStealthMode } from '../../api/types';\n\nimport { selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport TextTimer from '../ui/TextTimer';\n\nimport styles from './StealthModeModal.module.scss';\n\ntype StateProps = {\n  isOpen?: boolean;\n  stealthMode?: ApiStealthMode;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StealthModeModal = ({ isOpen, stealthMode, isCurrentUserPremium } : StateProps) => {\n  const {\n    toggleStealthModal,\n    activateStealthMode,\n    showNotification,\n    openPremiumModal,\n  } = getActions();\n  const [isOnCooldown, setIsOnCooldown] = useState(false);\n\n  useEffect(() => {\n    if (!stealthMode) return;\n    const serverTime = getServerTime();\n    if (stealthMode.cooldownUntil && stealthMode.cooldownUntil > serverTime) {\n      setIsOnCooldown(true);\n    }\n  }, [stealthMode, isOpen]);\n\n  const lang = useLang();\n\n  const handleTimerEnds = useLastCallback(() => {\n    setIsOnCooldown(false);\n  });\n\n  const handleClose = useLastCallback(() => {\n    toggleStealthModal({ isOpen: false });\n  });\n\n  const handleActivate = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({ initialSection: 'stories' });\n      return;\n    }\n\n    activateStealthMode();\n    showNotification({\n      title: lang('StealthModeOn'),\n      message: lang('StealthModeOnHint'),\n    });\n    toggleStealthModal({ isOpen: false });\n  });\n\n  return (\n    <Modal\n      className=\"component-theme-dark\"\n      contentClassName={styles.root}\n      isOpen={isOpen}\n      isSlim\n      onClose={handleClose}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <div className={styles.stealthIcon}>\n        <i className=\"icon icon-eye-closed-outline\" />\n      </div>\n      <div className={styles.title}>{lang('StealthMode')}</div>\n      <div className={styles.description}>\n        {lang(isCurrentUserPremium ? 'StealthModeHint' : 'StealthModePremiumHint')}\n      </div>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<i className={buildClassName('icon icon-stealth-past', styles.icon)} />}\n      >\n        <span className=\"title\">{lang('HideRecentViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideRecentViewsDescription')}</span>\n      </ListItem>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<i className={buildClassName('icon icon-stealth-future', styles.icon)} aria-hidden />}\n      >\n        <span className=\"title\">{lang('HideNextViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideNextViewsDescription')}</span>\n      </ListItem>\n      <Button\n        className={styles.button}\n        size=\"smaller\"\n        disabled={isOnCooldown}\n        isShiny={!isCurrentUserPremium}\n        withPremiumGradient={!isCurrentUserPremium}\n        onClick={handleActivate}\n      >\n        {!isCurrentUserPremium ? lang('UnlockStealthMode')\n          : isOnCooldown\n            ? (<TextTimer langKey=\"AvailableIn\" endsAt={stealthMode!.cooldownUntil!} onEnd={handleTimerEnds} />)\n            : lang('EnableStealthMode')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const tabState = selectTabState(global);\n\n  return {\n    isOpen: tabState.storyViewer?.isStealthModalOpen,\n    stealthMode: global.stories.stealthMode,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StealthModeModal));\n","import React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ninterface OwnProps {\n  isOpen: boolean;\n  story?: ApiTypeStory;\n  onClose: NoneToVoidFunction;\n}\n\nfunction StoryDeleteConfirmModal({\n  isOpen, story, onClose,\n}: OwnProps) {\n  const { deleteStory, openNextStory } = getActions();\n\n  const lang = useLang();\n\n  const handleDeleteStoryClick = useCallback(() => {\n    if (!story) {\n      return;\n    }\n\n    openNextStory();\n    deleteStory({ peerId: story.peerId, storyId: story.id });\n    onClose();\n  }, [onClose, story]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('DeleteStoryTitle')}\n      text={lang('DeleteStorySubtitle')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteStoryClick}\n      confirmIsDestructive\n      className=\"component-theme-dark\"\n    />\n  );\n}\n\nexport default memo(StoryDeleteConfirmModal);\n","import React, { memo, useMemo, useState } from '../../../lib/teact/teact';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\n\ninterface OwnProps {\n  id: string;\n  contactListIds?: string[];\n  currentUserId: string;\n  selectedIds?: string[];\n  lockedIds?: string[];\n  usersById: Record<string, ApiUser>;\n  onSelect: (selectedIds: string[]) => void;\n}\n\nfunction AllowDenyList({\n  id,\n  contactListIds,\n  currentUserId,\n  usersById,\n  selectedIds,\n  lockedIds,\n  onSelect,\n}: OwnProps) {\n  const lang = useLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((userId) => userId !== currentUserId);\n    return unique(filterUsersByName([...selectedIds || [], ...contactIds], usersById, searchQuery));\n  }, [contactListIds, currentUserId, searchQuery, selectedIds, usersById]);\n\n  return (\n    <Picker\n      key={id}\n      itemIds={displayedIds}\n      selectedIds={selectedIds ?? MEMO_EMPTY_ARRAY}\n      lockedSelectedIds={lockedIds}\n      filterValue={searchQuery}\n      filterPlaceholder={lang('Search')}\n      searchInputId={`${id}-picker-search`}\n      isSearchable\n      forceShowSelf\n      onSelectedIdsChange={onSelect}\n      onFilterChange={setSearchQuery}\n    />\n  );\n}\n\nexport default memo(AllowDenyList);\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonHolder\":\"BDK_pgpt\",\"active\":\"N8ujSwlC\"};","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nimport styles from './CloseFriends.module.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  currentUserId: string;\n  usersById: Record<string, ApiUser>;\n  contactListIds?: string[];\n  onClose: NoneToVoidFunction;\n};\n\nfunction CloseFriends({\n  isActive, contactListIds, usersById, currentUserId, onClose,\n}: OwnProps) {\n  const { saveCloseFriends } = getActions();\n\n  const lang = useLang();\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>([]);\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((id) => id !== currentUserId);\n    return unique(filterUsersByName([...closeFriendIds, ...contactIds], usersById, searchQuery));\n  }, [closeFriendIds, contactListIds, currentUserId, searchQuery, usersById]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (!prevIsActive && isActive) {\n      setIsSubmitShown(false);\n      setNewSelectedContactIds(closeFriendIds);\n    }\n  }, [isActive, closeFriendIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useLastCallback(() => {\n    saveCloseFriends({ userIds: newSelectedContactIds });\n    onClose();\n  });\n\n  return (\n    <>\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        searchInputId=\"close-friends-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <div className={buildClassName(styles.buttonHolder, isSubmitShown && styles.active)}>\n        <FloatingActionButton\n          isShown={isSubmitShown}\n          onClick={handleSubmit}\n          ariaLabel={lang('Save')}\n        >\n          <i className=\"icon icon-check\" />\n        </FloatingActionButton>\n      </div>\n    </>\n  );\n}\n\nexport default memo(CloseFriends);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"hz7SomkK\",\"header\":\"NV6Rt2g9\",\"closeButton\":\"SN1GFS6L\",\"headerTitle\":\"gi0Y6Ns6\",\"content\":\"sTaVDkiD\",\"section\":\"eUiuPoEC\",\"title\":\"iPPiw9DI\",\"list\":\"OUP1Ss0W\",\"option\":\"JL33Sa3b\",\"checked\":\"qVPo_cVL\",\"input\":\"zsDaUk0i\",\"icon\":\"AfYCVlys\",\"action\":\"njMeBBwY\",\"optionContent\":\"TUAAnG2w\",\"footer\":\"r24Qz2bf\",\"info\":\"ljeRVBOm\",\"submit\":\"RwNLN_rH\"};","import React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiUser } from '../../api/types';\nimport type { ApiPrivacySettings, PrivacyVisibility } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport { getSenderTitle, getUserFullName } from '../../global/helpers';\nimport { selectPeerStory, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Switcher from '../ui/Switcher';\nimport Transition from '../ui/Transition';\nimport AllowDenyList from './privacy/AllowDenyList';\nimport CloseFriends from './privacy/CloseFriends';\n\nimport styles from './StorySettings.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  onClose?: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  story?: ApiStory;\n  visibility?: ApiPrivacySettings;\n  contactListIds?: string[];\n  usersById: Record<string, ApiUser>;\n  currentUserId: string;\n}\n\ntype PrivacyAction = 'blockUserIds' | 'closeFriends' | 'blockContactUserIds' | 'allowUserIds';\n\ninterface PrivacyOption {\n  name: string;\n  value: PrivacyVisibility;\n  color: [string, string];\n  icon: IconName;\n  actions?: PrivacyAction;\n}\n\nconst OPTIONS: PrivacyOption[] = [{\n  name: 'StoryPrivacyOptionEveryone',\n  value: 'everybody',\n  color: ['#50ABFF', '#007AFF'],\n  icon: 'channel-filled',\n  actions: 'blockUserIds',\n}, {\n  name: 'StoryPrivacyOptionContacts',\n  value: 'contacts',\n  color: ['#C36EFF', '#8B60FA'],\n  icon: 'user-filled',\n  actions: 'blockContactUserIds',\n}, {\n  name: 'StoryPrivacyOptionCloseFriends',\n  value: 'closeFriends',\n  color: ['#88D93A', '#30B73B'],\n  icon: 'favorite-filled',\n  actions: 'closeFriends',\n}, {\n  name: 'StoryPrivacyOptionSelectedContacts',\n  value: 'nobody',\n  color: ['#FFB743', '#F69A36'],\n  icon: 'group-filled',\n  actions: 'allowUserIds',\n}];\n\nenum Screens {\n  privacy,\n  allowList,\n  closeFriends,\n  denyList,\n}\n\nfunction StorySettings({\n  isOpen,\n  story,\n  visibility,\n  contactListIds,\n  usersById,\n  currentUserId,\n  onClose,\n}: OwnProps & StateProps) {\n  const { editStoryPrivacy, toggleStoryPinned } = getActions();\n\n  const lang = useLang();\n  const [isOpenModal, openModal, closeModal] = useFlag(false);\n  const [privacy, setPrivacy] = useState<ApiPrivacySettings | undefined>(visibility);\n  const [isPinned, setIsPinned] = useState(story?.isPinned);\n  const [activeKey, setActiveKey] = useState<Screens>(Screens.privacy);\n  const [editingBlockingCategory, setEditingBlockingCategory] = useState<PrivacyVisibility>('everybody');\n  const isBackButton = activeKey !== Screens.privacy;\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const lockedIds = useMemo(() => {\n    if (activeKey === Screens.allowList\n      && (!privacy?.allowUserIds?.length || privacy.allowUserIds[0] === currentUserId)\n    ) {\n      return [currentUserId];\n    }\n\n    return undefined;\n  }, [activeKey, currentUserId, privacy?.allowUserIds]);\n\n  const selectedBlockedIds = useMemo(() => {\n    if (editingBlockingCategory !== privacy?.visibility) return [];\n    return privacy?.blockUserIds || [];\n  }, [editingBlockingCategory, privacy?.blockUserIds, privacy?.visibility]);\n\n  const handleAllowUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      allowUserIds: newIds?.length ? newIds?.filter((id) => id !== currentUserId) : [currentUserId],\n    });\n  });\n\n  const handleDenyUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      blockUserIds: newIds,\n      visibility: editingBlockingCategory,\n    });\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      setActiveKey(Screens.privacy);\n      openModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setPrivacy(visibility);\n  }, [visibility]);\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (activeKey === Screens.privacy) {\n      closeModal();\n      return;\n    }\n\n    setActiveKey(Screens.privacy);\n  });\n\n  function handleVisibilityChange(newVisibility: PrivacyVisibility) {\n    setPrivacy({\n      ...privacy!,\n      visibility: newVisibility,\n    });\n  }\n\n  function handleActionClick(e: React.MouseEvent<HTMLDivElement>, action: PrivacyAction) {\n    stopEvent(e);\n\n    switch (action) {\n      case 'closeFriends':\n        setActiveKey(Screens.closeFriends);\n        break;\n      case 'allowUserIds':\n        setActiveKey(Screens.allowList);\n        break;\n      case 'blockUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('everybody');\n        break;\n      case 'blockContactUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('contacts');\n        break;\n    }\n  }\n\n  const handleIsPinnedToggle = useLastCallback(() => {\n    setIsPinned(!isPinned);\n  });\n\n  // console.warn(privacy?.visibility, story?.visibility, OPTIONS);\n\n  const handleSubmit = useLastCallback(() => {\n    editStoryPrivacy({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      privacy: privacy!,\n    });\n    if (story!.isPinned !== isPinned) {\n      toggleStoryPinned({ peerId: story!.peerId, storyId: story!.id, isPinned });\n    }\n    closeModal();\n  });\n\n  function renderActionName(action: PrivacyAction) {\n    if (action === 'closeFriends') {\n      if (closeFriendIds.length === 0) {\n        return lang('StoryPrivacyOptionCloseFriendsDetail');\n      }\n\n      if (closeFriendIds.length === 1) {\n        return getSenderTitle(lang, usersById[closeFriendIds[0]]);\n      }\n\n      return lang('StoryPrivacyOptionPeople', closeFriendIds.length, 'i');\n    }\n\n    if ((action === 'blockUserIds' && privacy?.visibility === 'everybody')\n      || (action === 'blockContactUserIds' && privacy?.visibility === 'contacts')) {\n      if (!privacy?.blockUserIds?.length) {\n        return lang('StoryPrivacyOptionContactsDetail');\n      }\n\n      if (privacy.blockUserIds.length === 1) {\n        return lang('StoryPrivacyOptionExcludePerson', getUserFullName(usersById[privacy.blockUserIds[0]]));\n      }\n\n      return lang('StoryPrivacyOptionExcludePeople', privacy.blockUserIds.length, 'i');\n    }\n\n    if (!privacy?.allowUserIds || privacy.allowUserIds.length === 0) {\n      return lang('StoryPrivacyOptionSelectedContactsDetail');\n    }\n\n    if (privacy.allowUserIds.length === 1) {\n      return getUserFullName(usersById[privacy.allowUserIds[0]]);\n    }\n\n    return lang('StoryPrivacyOptionPeople', privacy.allowUserIds.length, 'i');\n  }\n\n  // eslint-disable-next-line consistent-return\n  function renderHeaderContent() {\n    switch (activeKey) {\n      case Screens.privacy:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertEditTitle')}</h3>;\n      case Screens.allowList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertSelectContactsTitle')}</h3>;\n      case Screens.closeFriends:\n        return <h3 className={styles.headerTitle}>{lang('CloseFriends')}</h3>;\n      case Screens.denyList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertExcludedContactsTitle')}</h3>;\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function renderContent(isActive: boolean) {\n    switch (activeKey) {\n      case Screens.privacy:\n        return renderPrivacyList();\n      case Screens.closeFriends:\n        return (\n          <CloseFriends\n            key=\"close-friends\"\n            isActive={isActive}\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            onClose={handleCloseButtonClick}\n          />\n        );\n      case Screens.denyList:\n        return (\n          <AllowDenyList\n            key=\"deny-list\"\n            id=\"deny-list\"\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            selectedIds={selectedBlockedIds}\n            onSelect={handleDenyUserIdsChange}\n          />\n        );\n      case Screens.allowList:\n        return (\n          <AllowDenyList\n            key=\"allow-list\"\n            id=\"allow-list\"\n            contactListIds={contactListIds}\n            lockedIds={lockedIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            selectedIds={privacy?.allowUserIds}\n            onSelect={handleAllowUserIdsChange}\n          />\n        );\n    }\n  }\n\n  function renderPrivacyList() {\n    const storyLifeTime = story ? convertSecondsToHours(story.expireDate - story.date) : 0;\n\n    return (\n      <>\n        <div className={styles.section}>\n          <h3 className={styles.title}>{lang('StoryPrivacyAlertSubtitleProfile')}</h3>\n          <div className={styles.list}>\n            {OPTIONS.map((option) => (\n              <label\n                key={option.value}\n                className={buildClassName(styles.option, option.value === privacy?.visibility && styles.checked)}\n              >\n                <input\n                  type=\"radio\"\n                  name=\"story_privacy\"\n                  className={styles.input}\n                  value={option.value}\n                  checked={option.value === privacy?.visibility}\n                  onChange={() => handleVisibilityChange(option.value)}\n                  teactExperimentControlled\n                />\n                <span\n                  className={styles.icon}\n                  style={`--color-from: ${option.color[0]}; --color-to: ${option.color[1]}`}\n                >\n                  <i className={`icon icon-${option.icon}`} />\n                </span>\n                <div className={styles.optionContent}>\n                  <span className={buildClassName(styles.option_name)}>{lang(option.name)}</span>\n                  {option.actions && (\n                    <div\n                      tabIndex={0}\n                      role=\"button\"\n                      className={styles.action}\n                      aria-label={lang('Edit')}\n                      onClick={(e) => { handleActionClick(e, option.actions!); }}\n                    >\n                      <span className={styles.actionInner}>{renderActionName(option.actions)}</span>\n                      <i className=\"icon icon-next\" aria-hidden />\n                    </div>\n                  )}\n                </div>\n              </label>\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <ListItem ripple onClick={handleIsPinnedToggle}>\n            <span>{lang('StoryKeep')}</span>\n            <Switcher\n              id=\"group-notifications\"\n              label={lang('StoryKeep')}\n              checked={isPinned}\n              inactive\n            />\n          </ListItem>\n        </div>\n        <div className={styles.footer}>\n          <div className={styles.info}>{lang('StoryKeepInfo', storyLifeTime)}</div>\n          <div className={styles.submit}>\n            <Button onClick={handleSubmit}>{lang('StoryPrivacyButtonSave')}</Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpenModal}\n      className={buildClassName(styles.modal, 'component-theme-dark')}\n      onClose={closeModal}\n      noBackdrop\n      onCloseAnimationEnd={onClose}\n    >\n      <div className={styles.header}>\n        <Button\n          className={buildClassName(styles.closeButton, 'close-button')}\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleCloseButtonClick}\n          ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n        >\n          <div className={buildClassName('animated-close-icon', isBackButton && 'state-back')} />\n        </Button>\n        <Transition name=\"slideFade\" activeKey={activeKey}>\n          {renderHeaderContent()}\n        </Transition>\n      </div>\n      <Transition\n        activeKey={activeKey}\n        name=\"slideFade\"\n        slideClassName=\"ChatOrUserPicker_slide\"\n        className={styles.content}\n      >\n        {renderContent}\n      </Transition>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      storyId, peerId,\n    },\n  } = selectTabState(global);\n  const story = (peerId && storyId)\n    ? selectPeerStory(global, peerId, storyId)\n    : undefined;\n\n  return {\n    story: story && 'content' in story ? story as ApiStory : undefined,\n    visibility: story && 'visibility' in story ? story.visibility : undefined,\n    contactListIds: global.contactList?.userIds,\n    usersById: global.users.byId,\n    currentUserId: global.currentUserId!,\n  };\n})(StorySettings));\n\nfunction convertSecondsToHours(seconds: number): number {\n  const secondsInHour = 3600;\n  const minutesInHour = 60;\n\n  const hours = Math.floor(seconds / secondsInHour);\n  const remainingSeconds = seconds % secondsInHour;\n  const remainingMinutes = Math.floor(remainingSeconds / minutesInHour);\n\n  // If remaining minutes are greater than or equal to 30, round up the hours\n  return remainingMinutes >= 30 ? hours + 1 : hours;\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStoryForwardInfo,\n  ApiTypeStory,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport {\n  getSenderTitle,\n  isUserId,\n} from '../../../global/helpers';\nimport { selectPeer, selectPeerStory } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\nimport { renderTextWithEntities } from '../helpers/renderTextWithEntities';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../Icon';\nimport EmojiIconBackground from './EmojiIconBackground';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  forwardInfo: ApiStoryForwardInfo;\n  className?: string;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  story?: ApiTypeStory;\n};\n\nconst EmbeddedStoryForward: FC<OwnProps & StateProps> = ({\n  className,\n  forwardInfo,\n  sender,\n  story,\n}) => {\n  const { openStoryViewer, loadPeerStoriesByIds, openChat } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!story && forwardInfo.fromPeerId && forwardInfo.storyId) {\n      loadPeerStoriesByIds({\n        peerId: forwardInfo.fromPeerId,\n        storyIds: [forwardInfo.storyId],\n      });\n    }\n  }, [forwardInfo, story]);\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : forwardInfo.fromName;\n\n  const openOriginalStory = useLastCallback(() => {\n    const { fromPeerId, storyId } = forwardInfo;\n    if (!fromPeerId) return;\n\n    const isStoryReady = story && !('isDeleted' in story && story.isDeleted);\n\n    if (isStoryReady) {\n      openStoryViewer({\n        peerId: fromPeerId,\n        storyId,\n        isSingleStory: true,\n      });\n    } else {\n      openChat({ id: fromPeerId });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(openOriginalStory);\n\n  function renderTextContent() {\n    if (story && 'content' in story && story.content.text) {\n      return (\n        <p className=\"embedded-text-wrapper\">\n          {renderTextWithEntities(story.content.text)}\n        </p>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSender() {\n    if (!sender || !senderTitle) {\n      return undefined;\n    }\n\n    const icon: IconName | undefined = !isUserId(sender.id) ? 'channel-filled' : 'user-filled';\n\n    return (\n      <>\n        {icon && <Icon name={icon} className=\"embedded-chat-icon\" />}\n        {senderTitle && renderText(senderTitle)}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        getPeerColorClass(sender, true, true),\n      )}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {sender?.color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          emojiDocumentId={sender.color.backgroundEmojiId}\n          className=\"EmbeddedMessage--background-icons\"\n        />\n      )}\n      <div className=\"message-text\">\n        {renderTextContent()}\n        <div className=\"message-title\">\n          {renderSender()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { forwardInfo }): StateProps => {\n    const sender = forwardInfo.fromPeerId ? selectPeer(global, forwardInfo.fromPeerId) : undefined;\n    const story = forwardInfo.storyId && forwardInfo.fromPeerId\n      ? selectPeerStory(global, forwardInfo.fromPeerId, forwardInfo.storyId) : undefined;\n    return {\n      sender,\n      story,\n    };\n  },\n)(EmbeddedStoryForward));\n","import React, {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { requestForcedReflow, requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport EmbeddedStoryForward from '../common/embedded/EmbeddedStoryForward';\nimport MessageText from '../common/MessageText';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  story: ApiStory;\n  isExpanded: boolean;\n  className?: string;\n  onExpand: NoneToVoidFunction;\n  onFold?: NoneToVoidFunction;\n}\n\nconst EXPAND_ANIMATION_DURATION_MS = 400;\nconst LINES_TO_SHOW = 3;\n\nfunction StoryCaption({\n  story, isExpanded, className, onExpand, onFold,\n}: OwnProps) {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const showMoreButtonRef = useRef<HTMLDivElement>(null);\n  const renderingStory = useCurrentOrPrev(story, true);\n\n  const caption = renderingStory?.content.text;\n\n  const [hasOverflow, setHasOverflow] = useState(false);\n  const prevIsExpanded = usePrevDuringAnimation(isExpanded || undefined, EXPAND_ANIMATION_DURATION_MS);\n  const isInExpandedState = isExpanded || prevIsExpanded;\n\n  useEffect(() => {\n    requestMutation(() => {\n      if (!contentRef.current) {\n        return;\n      }\n\n      if (isExpanded) {\n        addExtraClass(contentRef.current, styles.animate);\n      } else {\n        removeExtraClass(contentRef.current, styles.animate);\n      }\n    });\n  }, [isExpanded]);\n\n  const canExpand = hasOverflow && !isInExpandedState;\n  const { shouldRender: shouldRenderShowMore, transitionClassNames } = useShowTransition(\n    canExpand, undefined, true, 'slow', true,\n  );\n\n  useLayoutEffect(() => {\n    requestMeasure(() => {\n      if (!showMoreButtonRef.current) {\n        return;\n      }\n\n      const button = showMoreButtonRef.current;\n\n      const { offsetWidth } = button;\n\n      requestMutation(() => {\n        button.style.setProperty('--expand-button-width', `${offsetWidth}px`);\n      });\n    });\n  }, []);\n\n  useLayoutEffect(() => {\n    requestForcedReflow(() => {\n      if (!contentRef.current || !textRef.current) {\n        return undefined;\n      }\n\n      const container = contentRef.current;\n      const textContainer = textRef.current;\n\n      const textOffsetTop = textContainer.offsetTop;\n      const lineHeight = parseInt(getComputedStyle(textContainer).lineHeight, 10);\n      const isOverflowing = textContainer.clientHeight > lineHeight * LINES_TO_SHOW;\n      const overflowShift = textOffsetTop + lineHeight * LINES_TO_SHOW;\n\n      return () => {\n        if (isOverflowing) {\n          addExtraClass(container, styles.hasOverflow);\n          setHasOverflow(true);\n        }\n\n        container.style.setProperty('--_overflow-shift', `${overflowShift}px`);\n      };\n    });\n  }, [caption]);\n\n  useEffect(() => {\n    if (!isExpanded) {\n      ref.current?.scrollTo({ top: 0 });\n    }\n  }, [isExpanded]);\n\n  const fullClassName = buildClassName(\n    styles.captionContent,\n    isInExpandedState && styles.expanded,\n    shouldRenderShowMore && styles.withShowMore,\n  );\n\n  return (\n    <div className={buildClassName(styles.caption, className)}>\n      <div\n        ref={contentRef}\n        className={fullClassName}\n        role={canExpand ? 'button' : undefined}\n        onClick={canExpand ? onExpand : onFold}\n      >\n        <div\n          ref={ref}\n          className={buildClassName(styles.captionInner, 'allow-selection', 'custom-scroll')}\n        >\n          {renderingStory?.forwardInfo && (\n            <EmbeddedStoryForward\n              forwardInfo={renderingStory.forwardInfo}\n              className={styles.forwardInfo}\n            />\n          )}\n          {renderingStory && (\n            <div ref={textRef} className={styles.captionText}>\n              <MessageText\n                messageOrStory={renderingStory}\n                withTranslucentThumbs\n                forcePlayback\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      {shouldRenderShowMore && (\n        <div\n          ref={showMoreButtonRef}\n          className={buildClassName(styles.captionShowMore, transitionClassNames)}\n          onClick={onExpand}\n        >\n          {lang('Story.CaptionShowMore')}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(StoryCaption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YVD19vOP\",\"viewInfo\":\"cknL5COh\",\"interactive\":\"pJAyeGkG\",\"avatars\":\"Vz_VtJ16\",\"spacer\":\"kKoeDk3Z\",\"reactionCount\":\"sf3u_6Vh\",\"reactionCountHeart\":\"Er2XKRqi\",\"footerItem\":\"vJRk_UUk\",\"views\":\"nIv3YAnZ\",\"viewIcon\":\"WyBiNM6e\",\"reactionButton\":\"lpDXVIuf\",\"reactionHeart\":\"twgMDT1y\"};","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { HEART_REACTION } from '../../config';\nimport { getStoryKey, isUserId } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/Icon';\nimport ReactionAnimatedEmoji from '../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../ui/Button';\n\nimport styles from './StoryFooter.module.scss';\n\ntype OwnProps = {\n  story: ApiStory;\n  className?: string;\n};\n\nconst StoryFooter = ({\n  story,\n  className,\n}: OwnProps) => {\n  const { openStoryViewModal, openForwardMenu, sendStoryReaction } = getActions();\n  const lang = useLang();\n\n  const {\n    views, isOut, peerId, id: storyId, sentReaction,\n  } = story;\n  const { viewsCount, forwardsCount, reactionsCount } = views || {};\n  const isChannel = !isUserId(peerId);\n\n  const isSentStoryReactionHeart = sentReaction && 'emoticon' in sentReaction\n    ? sentReaction.emoticon === HEART_REACTION.emoticon : false;\n\n  const canForward = Boolean(\n    (isOut || isChannel)\n    && story.isPublic\n    && !story.noForwards,\n  );\n\n  const containerId = getStoryKey(peerId, storyId);\n\n  const recentViewers = useMemo(() => {\n    const { users: { byId: usersById } } = getGlobal();\n\n    const recentViewerIds = views && 'recentViewerIds' in views ? views.recentViewerIds : undefined;\n    if (!recentViewerIds) return undefined;\n\n    return recentViewerIds.map((id) => usersById[id]).filter(Boolean);\n  }, [views]);\n\n  const handleOpenStoryViewModal = useLastCallback(() => {\n    openStoryViewModal({ storyId });\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleLikeStory = useLastCallback(() => {\n    const reaction = sentReaction ? undefined : HEART_REACTION;\n    sendStoryReaction({\n      peerId,\n      storyId,\n      containerId,\n      reaction,\n    });\n  });\n\n  if (!viewsCount) {\n    return (\n      <div className={buildClassName(styles.root, className)}>\n        {lang('NobodyViewed')}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        className,\n      )}\n    >\n      <div\n        className={buildClassName(styles.viewInfo, !isChannel && styles.interactive)}\n        onClick={!isChannel ? handleOpenStoryViewModal : undefined}\n      >\n        {Boolean(recentViewers?.length) && (\n          <AvatarList\n            size=\"small\"\n            peers={recentViewers}\n            className={styles.avatars}\n          />\n        )}\n\n        {isChannel ? (\n          <span className={styles.views}><Icon name=\"channelviews\" className={styles.viewIcon} />{viewsCount}</span>\n        ) : (\n          <span className={styles.views}>{lang('Views', viewsCount, 'i')}</span>\n        )}\n        {Boolean(reactionsCount) && !isChannel && (\n          <span className={styles.reactionCount}>\n            <Icon name=\"heart\" className={styles.reactionCountHeart} />\n            {reactionsCount}\n          </span>\n        )}\n      </div>\n      <div className={styles.spacer} />\n      {canForward && (\n        <Button\n          color=\"translucent\"\n          size=\"smaller\"\n          round\n          onClick={handleForwardClick}\n          ariaLabel={lang('Forward')}\n          className={styles.footerItem}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {isChannel && (\n        <>\n          {Boolean(forwardsCount) && (\n            <div className={styles.footerItem}>\n              <Button\n                round\n                color=\"translucent\"\n                size=\"smaller\"\n                nonInteractive\n                ariaLabel={lang('PublicShares')}\n              >\n                <Icon name=\"loop\" />\n              </Button>\n              <span>{forwardsCount}</span>\n            </div>\n          )}\n          <div className={styles.footerItem}>\n            <Button\n              round\n              className={styles.reactionButton}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleLikeStory}\n              ariaLabel={lang('AccDescrLike')}\n            >\n              {sentReaction && (\n                <ReactionAnimatedEmoji\n                  key={'documentId' in sentReaction ? sentReaction.documentId : sentReaction.emoticon}\n                  containerId={containerId}\n                  reaction={sentReaction}\n                  withEffectOnly={isSentStoryReactionHeart}\n                />\n              )}\n              {(!sentReaction || isSentStoryReactionHeart) && (\n                <Icon\n                  name={isSentStoryReactionHeart ? 'heart' : 'heart-outline'}\n                  className={buildClassName(isSentStoryReactionHeart && styles.reactionHeart)}\n                />\n              )}\n            </Button>\n            {Boolean(reactionsCount) && (<span>{reactionsCount}</span>)}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StoryFooter);\n","import React, {\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './StoryProgress.module.scss';\n\ninterface OwnProps {\n  isActive: boolean;\n  isViewed: boolean;\n  isVideo?: boolean;\n  duration?: number;\n  isPaused?: boolean;\n  onImageComplete: NoneToVoidFunction;\n}\n\nconst DEFAULT_STORY_DURATION_S = 6;\n\nfunction StoryProgress({\n  isActive, isViewed, isVideo, duration = DEFAULT_STORY_DURATION_S, isPaused, onImageComplete,\n}: OwnProps) {\n  const handleAnimationEnd = useLastCallback((event: React.AnimationEvent<HTMLElement>) => {\n    if (!isVideo && event.animationName === styles.progress) {\n      onImageComplete();\n    }\n  });\n\n  const classNames = buildClassName(\n    styles.root,\n    isViewed && styles.viewed,\n    isActive && styles.active,\n    isPaused && styles.paused,\n  );\n\n  return (\n    <span\n      className={classNames}\n      aria-hidden\n    >\n      {isActive && (\n        <i style={`--progress-duration: ${duration}s`} className={styles.inner} onAnimationEnd={handleAnimationEnd} />\n      )}\n    </span>\n  );\n}\n\nexport default memo(StoryProgress);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c1fbGgcx\",\"viewed\":\"xwOKghO2\",\"active\":\"ZuByYcIx\",\"inner\":\"qyBCpJct\",\"progress\":\"XY98E7VM\",\"paused\":\"n9V6B7hP\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMediaAreaChannelPost,\n  ApiPeer, ApiStealthMode, ApiStory, ApiTypeStory,\n} from '../../api/types';\nimport type { IDimensions } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { EDITABLE_STORY_INPUT_CSS_SELECTOR, EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { getSenderTitle, isChatChannel, isUserId } from '../../global/helpers';\nimport {\n  selectChat,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatMediaDuration, formatRelativeTime } from '../../util/date/dateFormat';\nimport download from '../../util/download';\nimport { round } from '../../util/math';\nimport { getServerTime } from '../../util/serverTime';\nimport { IS_SAFARI } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport { BASE_STORY_HEIGHT, BASE_STORY_WIDTH } from './helpers/dimensions';\nimport { PRIMARY_VIDEO_MIME, SECONDARY_VIDEO_MIME } from './helpers/videoFormats';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout, { getIsMobile } from '../../hooks/useAppLayout';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { useStreaming } from '../../hooks/useStreaming';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useStoryPreloader from './hooks/useStoryPreloader';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Avatar from '../common/Avatar';\nimport Composer from '../common/Composer';\nimport Icon from '../common/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\nimport Transition from '../ui/Transition';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\nimport StoryCaption from './StoryCaption';\nimport StoryFooter from './StoryFooter';\nimport StoryProgress from './StoryProgress';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peerId: string;\n  storyId: number;\n  dimensions: IDimensions;\n  // eslint-disable-next-line react/no-unused-prop-types\n  isReportModalOpen?: boolean;\n  // eslint-disable-next-line react/no-unused-prop-types\n  isDeleteModalOpen?: boolean;\n  isPrivateStories?: boolean;\n  isArchivedStories?: boolean;\n  isSingleStory?: boolean;\n  getIsAnimating: Signal<boolean>;\n  onDelete: (story: ApiTypeStory) => void;\n  onClose: NoneToVoidFunction;\n  onReport: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peer: ApiPeer;\n  forwardSender?: ApiPeer;\n  fromPeer?: ApiPeer;\n  story?: ApiTypeStory;\n  isMuted: boolean;\n  orderedIds?: number[];\n  shouldForcePause?: boolean;\n  storyChangelogUserId?: string;\n  viewersExpirePeriod: number;\n  isChatExist?: boolean;\n  areChatSettingsLoaded?: boolean;\n  isCurrentUserPremium?: boolean;\n  stealthMode: ApiStealthMode;\n  withHeaderAnimation?: boolean;\n}\n\nconst VIDEO_MIN_READY_STATE = IS_SAFARI ? 4 : 3;\nconst SPACEBAR_CODE = 32;\n\nconst STEALTH_MODE_NOTIFICATION_DURATION = 4000;\n\nfunction Story({\n  peerId,\n  storyId,\n  peer,\n  forwardSender,\n  fromPeer,\n  isMuted,\n  isArchivedStories,\n  isPrivateStories,\n  story,\n  orderedIds,\n  isSingleStory,\n  dimensions,\n  shouldForcePause,\n  storyChangelogUserId,\n  viewersExpirePeriod,\n  isChatExist,\n  areChatSettingsLoaded,\n  getIsAnimating,\n  isCurrentUserPremium,\n  stealthMode,\n  withHeaderAnimation,\n  onDelete,\n  onClose,\n  onReport,\n}: OwnProps & StateProps) {\n  const {\n    viewStory,\n    setStoryViewerMuted,\n    openPreviousStory,\n    openNextStory,\n    loadPeerSkippedStories,\n    openForwardMenu,\n    copyStoryLink,\n    toggleStoryPinned,\n    openChat,\n    showNotification,\n    openStoryPrivacyEditor,\n    loadChatSettings,\n    fetchChat,\n    loadStoryViews,\n    toggleStealthModal,\n  } = getActions();\n  const serverTime = getServerTime();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const [isComposerHasFocus, markComposerHasFocus, unmarkComposerHasFocus] = useFlag(false);\n  const [isStoryPlaybackRequested, playStory, pauseStory] = useFlag(false);\n  const [isStoryPlaying, markStoryPlaying, unmarkStoryPlaying] = useFlag(false);\n  const [isAppFocused, markAppFocused, unmarkAppFocused] = useFlag(true);\n  const [isCaptionExpanded, expandCaption, foldCaption] = useFlag(false);\n  const [isPausedBySpacebar, setIsPausedBySpacebar] = useState(false);\n  const [isPausedByLongPress, markIsPausedByLongPress, unmarkIsPausedByLongPress] = useFlag(false);\n  const [isDropdownMenuOpen, markDropdownMenuOpen, unmarkDropdownMenuOpen] = useFlag(false);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const {\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  } = useStoryProps(story, isCurrentUserPremium, isDropdownMenuOpen);\n\n  const isLoadedStory = story && 'content' in story;\n  const isChangelog = peerId === storyChangelogUserId;\n  const isUserStory = isUserId(peerId);\n  const isChatStory = !isUserStory;\n  const isChannelStory = isChatStory && isChatChannel(peer as ApiChat);\n  const isOut = isLoadedStory && story.isOut;\n\n  const canPinToProfile = useCurrentOrPrev(\n    isOut ? !story.isPinned : undefined,\n    true,\n  );\n  const canUnpinFromProfile = useCurrentOrPrev(\n    isOut ? story.isPinned : undefined,\n    true,\n  );\n  const areViewsExpired = Boolean(\n    isOut && (story!.date + viewersExpirePeriod) < getServerTime(),\n  );\n\n  const forwardSenderTitle = forwardSender ? getSenderTitle(lang, forwardSender)\n    : (isLoadedStory && story.forwardInfo?.fromName);\n\n  const canCopyLink = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !isChangelog\n    && peer?.usernames?.length,\n  );\n\n  const canShare = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !story.noForwards\n    && !isChangelog\n    && !isCaptionExpanded,\n  );\n\n  const canPlayStory = Boolean(\n    hasFullData && !shouldForcePause && isAppFocused && !isComposerHasFocus && !isCaptionExpanded\n    && !isPausedBySpacebar && !isPausedByLongPress,\n  );\n\n  const duration = isLoadedStory && story.content.video?.duration\n    ? story.content.video.duration\n    : undefined;\n\n  const shouldShowComposer = !(isOut && isUserStory) && !isChangelog && !isChannelStory;\n  const shouldShowFooter = isLoadedStory && !shouldShowComposer && (isOut || isChannelStory);\n  const headerAnimation = isMobile && withHeaderAnimation ? 'slideFade' : 'none';\n\n  const {\n    shouldRender: shouldRenderSkeleton,\n    transitionClassNames: skeletonTransitionClassNames,\n  } = useShowTransition(!hasFullData);\n\n  const {\n    transitionClassNames: mediaTransitionClassNames,\n  } = useShowTransition(Boolean(fullMediaData));\n\n  const thumbRef = useCanvasBlur(thumbnail, !hasThumb);\n  const previewTransitionClassNames = useMediaTransition(previewBlobUrl);\n\n  const {\n    shouldRender: shouldRenderComposer,\n    transitionClassNames: composerAppearanceAnimationClassNames,\n  } = useShowTransition(shouldShowComposer);\n\n  const {\n    shouldRender: shouldRenderCaptionBackdrop,\n    transitionClassNames: captionBackdropTransitionClassNames,\n  } = useShowTransition(hasText && isCaptionExpanded);\n\n  const { transitionClassNames: appearanceAnimationClassNames } = useShowTransition(true);\n  const {\n    shouldRender: shouldRenderCaption,\n    transitionClassNames: captionAppearanceAnimationClassNames,\n  } = useShowTransition(hasText || hasForwardInfo);\n\n  const isStreamingSupported = useStreaming(videoRef, fullMediaData, PRIMARY_VIDEO_MIME);\n\n  useStoryPreloader(peerId, storyId);\n\n  useEffect(() => {\n    if (storyId) {\n      viewStory({ peerId, storyId });\n    }\n  }, [storyId, peerId]);\n\n  useEffect(() => {\n    loadPeerSkippedStories({ peerId });\n  }, [peerId]);\n\n  // Fetching user privacy settings for use in Composer\n  useEffect(() => {\n    const canWrite = isUserId(peerId);\n    if (!isChatExist && canWrite) {\n      fetchChat({ chatId: peerId });\n    }\n  }, [isChatExist, peerId]);\n  useEffect(() => {\n    if (isChatExist && !areChatSettingsLoaded) {\n      loadChatSettings({ chatId: peerId });\n    }\n  }, [areChatSettingsLoaded, isChatExist, peerId]);\n\n  const handlePauseStory = useLastCallback(() => {\n    if (isVideo) {\n      videoRef.current?.pause();\n    }\n\n    unmarkStoryPlaying();\n    pauseStory();\n  });\n\n  const handlePlayStory = useLastCallback(() => {\n    if (!canPlayStory) return;\n\n    playStory();\n    if (!isVideo) markStoryPlaying();\n  });\n\n  const handleLongPressStart = useLastCallback(() => {\n    markIsPausedByLongPress();\n  });\n  const handleLongPressEnd = useLastCallback(() => {\n    unmarkIsPausedByLongPress();\n  });\n\n  const handleDropdownMenuOpen = useLastCallback(() => {\n    markDropdownMenuOpen();\n    handlePauseStory();\n  });\n\n  const handleDropdownMenuClose = useLastCallback(() => {\n    unmarkDropdownMenuOpen();\n    handlePlayStory();\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress(handleLongPressStart, handleLongPressEnd);\n\n  const isUnsupported = useUnsupportedMedia(\n    videoRef,\n    undefined,\n    !isVideo || !fullMediaData || isStreamingSupported,\n  );\n\n  const hasAllData = fullMediaData && (!altMediaHash || altMediaData);\n  // Play story after media has been downloaded\n  useEffect(() => {\n    if (hasAllData && !isUnsupported) handlePlayStory();\n  }, [hasAllData, isUnsupported]);\n\n  useBackgroundMode(unmarkAppFocused, markAppFocused);\n\n  useEffect(() => {\n    if (!hasAllData) return;\n    videoRef.current?.load();\n  }, [hasAllData]);\n\n  useEffect(() => {\n    if (!isLoadedStory || isDeletedStory || areViewsExpired) return;\n\n    if (!isOut && !isChannelStory) return;\n\n    // Refresh counters each time\n    loadStoryViews({ peerId, storyId });\n  }, [isDeletedStory, areViewsExpired, isLoadedStory, peerId, storyId, isOut, isChannelStory]);\n\n  useEffect(() => {\n    if (\n      shouldForcePause || !isAppFocused || isComposerHasFocus\n      || isCaptionExpanded || isPausedBySpacebar || isPausedByLongPress\n    ) {\n      handlePauseStory();\n    } else {\n      handlePlayStory();\n    }\n  }, [\n    handlePlayStory, isAppFocused, isCaptionExpanded, isComposerHasFocus,\n    shouldForcePause, isPausedBySpacebar, isPausedByLongPress,\n  ]);\n\n  useEffect(() => {\n    if (isComposerHasFocus || shouldForcePause || isCaptionExpanded) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (e.keyCode === SPACEBAR_CODE) {\n        e.preventDefault();\n        setIsPausedBySpacebar(!isPausedBySpacebar);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isCaptionExpanded, isComposerHasFocus, isPausedBySpacebar, shouldForcePause]);\n\n  // Reset the state of `isPausedBySpacebar` when closing the caption, losing focus by composer or disable forced pause\n  useEffectWithPrevDeps(([\n    prevIsComposerHasFocus,\n    prevIsCaptionExpanded,\n    prevShouldForcePause,\n    prevIsAppFocused,\n    prevIsPausedByLongPress,\n  ]) => {\n    if (\n      !isPausedBySpacebar || isCaptionExpanded || isComposerHasFocus\n      || shouldForcePause || !isAppFocused || isPausedByLongPress\n    ) {\n      return;\n    }\n\n    if (\n      prevIsCaptionExpanded !== isCaptionExpanded\n      || prevIsComposerHasFocus !== isComposerHasFocus\n      || prevShouldForcePause !== shouldForcePause\n      || prevIsAppFocused !== isAppFocused\n      || prevIsPausedByLongPress !== isPausedByLongPress\n    ) {\n      setIsPausedBySpacebar(false);\n    }\n  }, [isComposerHasFocus, isCaptionExpanded, shouldForcePause, isAppFocused, isPausedByLongPress, isPausedBySpacebar]);\n\n  const handleOpenChat = useLastCallback(() => {\n    onClose();\n    openChat({ id: peerId });\n  });\n\n  const handleForwardPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: forwardSender!.id });\n  });\n\n  const handleFromPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: fromPeer!.id });\n  });\n\n  const handleOpenPrevStory = useLastCallback(() => {\n    openPreviousStory();\n  });\n\n  const handleOpenNextStory = useLastCallback(() => {\n    openNextStory();\n  });\n\n  const handleVideoStoryTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= VIDEO_MIN_READY_STATE) {\n      markStoryPlaying();\n    } else {\n      unmarkStoryPlaying();\n    }\n    if (duration && round(video.currentTime, 2) >= round(duration, 2)) {\n      handleOpenNextStory();\n    }\n  });\n\n  useEffect(() => {\n    return !getIsAnimating() && !isComposerHasFocus ? captureKeyboardListeners({\n      onRight: handleOpenNextStory,\n      onLeft: handleOpenPrevStory,\n    }) : undefined;\n  }, [getIsAnimating, isComposerHasFocus]);\n\n  const handleCopyStoryLink = useLastCallback(() => {\n    copyStoryLink({ peerId, storyId });\n  });\n\n  const handlePinClick = useLastCallback(() => {\n    toggleStoryPinned({ peerId, storyId, isPinned: true });\n  });\n\n  const handleUnpinClick = useLastCallback(() => {\n    toggleStoryPinned({ peerId, storyId, isPinned: false });\n  });\n\n  const handleDeleteStoryClick = useLastCallback(() => {\n    onDelete(story!);\n  });\n\n  const handleReportStoryClick = useLastCallback(() => {\n    onReport();\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleInfoPrivacyEdit = useLastCallback(() => {\n    openStoryPrivacyEditor();\n  });\n\n  const handleInfoPrivacyClick = useLastCallback(() => {\n    const visibility = !isLoadedStory || story.isPublic\n      ? undefined\n      : story.isForContacts ? 'contacts' : (story.isForCloseFriends ? 'closeFriends' : 'nobody');\n\n    let message;\n    const myName = getSenderTitle(lang, peer);\n    switch (visibility) {\n      case 'nobody':\n        message = lang('StorySelectedContactsHint', myName);\n        break;\n      case 'contacts':\n        message = lang('StoryContactsHint', myName);\n        break;\n      case 'closeFriends':\n        message = lang('StoryCloseFriendsHint', myName);\n        break;\n      default:\n        return;\n    }\n    showNotification({ message });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    if (noSound) {\n      showNotification({\n        message: lang('Story.TooltipVideoHasNoSound'),\n      });\n      return;\n    }\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setStoryViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handleOpenStealthModal = useLastCallback(() => {\n    if (stealthMode.activeUntil && getServerTime() < stealthMode.activeUntil) {\n      const diff = stealthMode.activeUntil - getServerTime();\n      showNotification({\n        title: lang('StealthModeOn'),\n        message: lang('Story.ToastStealthModeActiveText', formatMediaDuration(diff)),\n        duration: STEALTH_MODE_NOTIFICATION_DURATION,\n      });\n      return;\n    }\n\n    toggleStealthModal({ isOpen: true });\n  });\n\n  const handleDownload = useLastCallback(() => {\n    if (!downloadMediaData) return;\n    download(downloadMediaData, `story-${peerId}-${storyId}.${isVideo ? 'mp4' : 'jpg'}`);\n  });\n\n  useEffect(() => {\n    if (!isDeletedStory) return;\n\n    showNotification({\n      message: lang('StoryNotFound'),\n    });\n  }, [lang, isDeletedStory]);\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => {\n      return (\n        <Button\n          round\n          ripple={!isMobile}\n          size=\"tiny\"\n          color=\"translucent-white\"\n          onClick={onTrigger}\n          className={buildClassName(styles.button, isOpen && 'active')}\n          ariaLabel={lang('AccDescrOpenMenu2')}\n        >\n          <i className={buildClassName('icon icon-more')} aria-hidden />\n        </Button>\n      );\n    };\n  }, [isMobile, lang]);\n\n  function renderStoriesTabs() {\n    return (\n      <div className={styles.storyIndicators}>\n        {(isSingleStory ? [storyId] : orderedIds ?? []).map((id) => (\n          <StoryProgress\n            key={`progress-${id}`}\n            isActive={id === story?.id}\n            isVideo={isVideo}\n            isViewed={Boolean(story?.id && ((isPrivateStories || isArchivedStories) ? id > story?.id : id < story?.id))}\n            isPaused={!isStoryPlaying}\n            duration={duration}\n            onImageComplete={handleOpenNextStory}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderStoryPrivacyButton() {\n    if (!isUserStory) return undefined;\n\n    let privacyIcon = 'channel-filled';\n    const gradient: Record<string, [string, string]> = {\n      'channel-filled': ['#50ABFF', '#007AFF'],\n      'user-filled': ['#C36EFF', '#8B60FA'],\n      'favorite-filled': ['#88D93A', '#30B73B'],\n      'group-filled': ['#FFB743', '#F69A36'],\n    };\n\n    if (isOut) {\n      const { visibility } = (story && 'visibility' in story && story.visibility) || {};\n\n      switch (visibility) {\n        case 'everybody':\n          privacyIcon = 'channel-filled';\n          break;\n        case 'contacts':\n          privacyIcon = 'user-filled';\n          break;\n        case 'closeFriends':\n          privacyIcon = 'favorite-filled';\n          break;\n        case 'nobody':\n          privacyIcon = 'group-filled';\n      }\n    } else {\n      if (!story || !('content' in story) || story.isPublic) {\n        return undefined;\n      }\n\n      privacyIcon = story.isForCloseFriends\n        ? 'favorite-filled'\n        : (story.isForContacts ? 'user-filled' : 'group-filled');\n    }\n\n    return (\n      <div\n        className={buildClassName(styles.visibilityButton, isOut && styles.visibilityButtonSelf)}\n        onClick={isOut ? handleInfoPrivacyEdit : handleInfoPrivacyClick}\n        style={`--color-from: ${gradient[privacyIcon][0]}; --color-to: ${gradient[privacyIcon][1]}`}\n      >\n        <i className={`icon icon-${privacyIcon}`} aria-hidden />\n        {isOut && <i className=\"icon icon-next\" aria-hidden />}\n      </div>\n    );\n  }\n\n  function renderSenderInfo() {\n    return (\n      <div className={styles.senderInfo}>\n        <Avatar\n          peer={peer}\n          size=\"tiny\"\n          onClick={handleOpenChat}\n        />\n        <div className={styles.senderMeta}>\n          <span onClick={handleOpenChat} className={styles.senderName}>\n            {renderText(getSenderTitle(lang, peer) || '')}\n          </span>\n          <div className={styles.storyMetaRow}>\n            {forwardSenderTitle && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.forwardHeader, forwardSender && styles.clickable,\n                )}\n                onClick={forwardSender ? handleForwardPeerClick : undefined}\n              >\n                <Icon name=\"loop\" />\n                <span className={styles.headerTitle}>\n                  {renderText(forwardSenderTitle)}\n                </span>\n              </span>\n            )}\n            {fromPeer && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.fromPeer,\n                )}\n                onClick={handleFromPeerClick}\n              >\n                <Avatar peer={fromPeer} size=\"micro\" />\n                <span className={styles.headerTitle}>\n                  {renderText(getSenderTitle(lang, fromPeer) || '')}\n                </span>\n              </span>\n            )}\n            {story && 'date' in story && (\n              <span className={styles.storyMeta}>{formatRelativeTime(lang, serverTime, story.date)}</span>\n            )}\n            {isLoadedStory && story.isEdited && (\n              <span className={styles.storyMeta}>{lang('Story.HeaderEdited')}</span>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSender() {\n    return (\n      <div className={styles.sender}>\n        <Transition activeKey={Number(peerId)} name={headerAnimation} className={styles.senderInfoTransition}>\n          {renderSenderInfo()}\n        </Transition>\n\n        <div className={styles.actions}>\n          {renderStoryPrivacyButton()}\n          {isVideo && (\n            <Button\n              className={styles.button}\n              round\n              ripple={!isMobile}\n              size=\"tiny\"\n              color=\"translucent-white\"\n              disabled={!hasFullData}\n              onClick={handleVolumeMuted}\n              ariaLabel={lang('Volume')}\n            >\n              <i\n                className={buildClassName(\n                  'icon',\n                  isMuted || noSound ? 'icon-speaker-muted-story' : 'icon-speaker-story',\n                )}\n                aria-hidden\n              />\n            </Button>\n          )}\n          <DropdownMenu\n            className={styles.buttonMenu}\n            trigger={MenuButton}\n            positionX=\"right\"\n            onOpen={handleDropdownMenuOpen}\n            onClose={handleDropdownMenuClose}\n          >\n            {canCopyLink && <MenuItem icon=\"copy\" onClick={handleCopyStoryLink}>{lang('CopyLink')}</MenuItem>}\n            {canPinToProfile && (\n              <MenuItem icon=\"save-story\" onClick={handlePinClick}>\n                {lang(isUserStory ? 'StorySave' : 'SaveToPosts')}\n              </MenuItem>\n            )}\n            {canUnpinFromProfile && (\n              <MenuItem icon=\"delete\" onClick={handleUnpinClick}>\n                {lang(isUserStory ? 'ArchiveStory' : 'RemoveFromPosts')}\n              </MenuItem>\n            )}\n            {canDownload && (\n              <MenuItem icon=\"download\" disabled={!downloadMediaData} onClick={handleDownload}>\n                {lang('lng_media_download')}\n              </MenuItem>\n            )}\n            {!isOut && isUserStory && (\n              <MenuItem icon=\"eye-closed-outline\" onClick={handleOpenStealthModal}>\n                {lang('StealthMode')}\n              </MenuItem>\n            )}\n            {!isOut && <MenuItem icon=\"flag\" onClick={handleReportStoryClick}>{lang('lng_report_story')}</MenuItem>}\n            {isOut && <MenuItem icon=\"delete\" destructive onClick={handleDeleteStoryClick}>{lang('Delete')}</MenuItem>}\n          </DropdownMenu>\n          <Button\n            className={buildClassName(styles.button, styles.closeButton)}\n            round\n            size=\"tiny\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className={buildClassName('icon icon-close')} aria-hidden />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={buildClassName(styles.slideInner, 'component-theme-dark')}\n      onMouseDown={handleLongPressMouseDown}\n      onMouseUp={handleLongPressMouseUp}\n      onMouseLeave={handleLongPressMouseLeave}\n      onTouchStart={handleLongPressTouchStart}\n      onTouchEnd={handleLongPressTouchEnd}\n    >\n      <div className={buildClassName(styles.storyHeader, appearanceAnimationClassNames)}>\n        {renderStoriesTabs()}\n        {renderSender()}\n      </div>\n\n      <div\n        className={styles.mediaWrapper}\n        style={`width: ${dimensions.width}px; height: ${dimensions.height}px`}\n      >\n        <canvas ref={thumbRef} className={styles.thumbnail} />\n        {previewBlobUrl && (\n          <img\n            key={`preview-${storyId}`}\n            src={previewBlobUrl}\n            draggable={false}\n            alt=\"\"\n            className={buildClassName(styles.media, styles.mediaPreview, previewTransitionClassNames)}\n          />\n        )}\n        {shouldRenderSkeleton && (\n          <Skeleton className={buildClassName(skeletonTransitionClassNames, styles.fullSize)} />\n        )}\n        {!isVideo && fullMediaData && (\n          <img\n            src={fullMediaData}\n            alt=\"\"\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            draggable={false}\n          />\n        )}\n        {isVideo && fullMediaData && (\n          <OptimizedVideo\n            ref={videoRef}\n            key={`video-${storyId}`}\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            canPlay={isStoryPlaybackRequested}\n            muted={isMuted}\n            width={BASE_STORY_WIDTH}\n            height={BASE_STORY_HEIGHT}\n            draggable={false}\n            playsInline\n            disablePictureInPicture\n            isPriority\n            onPause={unmarkStoryPlaying}\n            onWaiting={unmarkStoryPlaying}\n            disableRemotePlayback\n            onTimeUpdate={handleVideoStoryTimeUpdate}\n          >\n            <source src={fullMediaData} type={PRIMARY_VIDEO_MIME} width=\"720\" />\n            {altMediaData && <source src={altMediaData} type={SECONDARY_VIDEO_MIME} width=\"480\" />}\n          </OptimizedVideo>\n        )}\n\n        {!isPausedByLongPress && !isComposerHasFocus && (\n          <>\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.prev)}\n              onClick={handleOpenPrevStory}\n              aria-label={lang('Previous')}\n            />\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.next)}\n              onClick={handleOpenNextStory}\n              aria-label={lang('Next')}\n            />\n          </>\n        )}\n        {isLoadedStory && fullMediaData && (\n          <MediaAreaOverlay story={story} isActive />\n        )}\n        {!isMobile && (\n          <div className={styles.content}>\n            <div className={styles.contentInner}>\n              <Avatar\n                peer={peer}\n                withStory\n                storyViewerMode=\"disabled\"\n              />\n              <div className={styles.name}>{renderText(getSenderTitle(lang, peer) || '')}</div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldShowFooter && (\n        <StoryFooter story={story} className={appearanceAnimationClassNames} />\n      )}\n      {shouldRenderCaptionBackdrop && (\n        <div\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.captionBackdrop, captionBackdropTransitionClassNames)}\n          onClick={() => foldCaption()}\n          aria-label={lang('Close')}\n        />\n      )}\n      {hasText && <div className={buildClassName(styles.captionGradient, captionAppearanceAnimationClassNames)} />}\n      {shouldRenderCaption && (\n        <StoryCaption\n          key={`caption-${storyId}-${peerId}`}\n          story={story as ApiStory}\n          isExpanded={isCaptionExpanded}\n          onExpand={expandCaption}\n          onFold={foldCaption}\n          className={captionAppearanceAnimationClassNames}\n        />\n      )}\n      {shouldRenderComposer && (\n        <Composer\n          type=\"story\"\n          chatId={peerId}\n          threadId={MAIN_THREAD_ID}\n          storyId={storyId}\n          isReady={!isOut}\n          messageListType=\"thread\"\n          isMobile={getIsMobile()}\n          editableInputCssSelector={EDITABLE_STORY_INPUT_CSS_SELECTOR}\n          editableInputId={EDITABLE_STORY_INPUT_ID}\n          inputId=\"story-input-text\"\n          className={buildClassName(styles.composer, composerAppearanceAnimationClassNames)}\n          inputPlaceholder={lang(isChatStory ? 'ReplyToGroupStory' : 'ReplyPrivately')}\n          onForward={canShare ? handleForwardClick : undefined}\n          onFocus={markComposerHasFocus}\n          onBlur={unmarkComposerHasFocus}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, {\n  peerId,\n  storyId,\n  isReportModalOpen,\n  isDeleteModalOpen,\n}): StateProps => {\n  const { appConfig } = global;\n  const user = selectUser(global, peerId);\n  const chat = selectChat(global, peerId);\n  const tabState = selectTabState(global);\n  const {\n    storyViewer: {\n      isMuted,\n      viewModal,\n      isPrivacyModalOpen,\n      isStealthModalOpen,\n      storyList,\n    },\n    forwardMessages: { storyId: forwardedStoryId },\n    premiumModal,\n    safeLinkModalUrl,\n    mapModal,\n  } = tabState;\n  const { isOpen: isPremiumModalOpen } = premiumModal || {};\n  const story = selectPeerStory(global, peerId, storyId);\n  const isLoadedStory = story && 'content' in story;\n  const shouldForcePause = Boolean(\n    viewModal || forwardedStoryId || tabState.reactionPicker?.storyId || isReportModalOpen || isPrivacyModalOpen\n    || isPremiumModalOpen || isDeleteModalOpen || safeLinkModalUrl || isStealthModalOpen || mapModal,\n  );\n\n  const forwardInfo = isLoadedStory ? story.forwardInfo : undefined;\n  const mediaAreas = isLoadedStory ? story.mediaAreas : undefined;\n  const forwardSenderId = forwardInfo?.fromPeerId\n    || mediaAreas?.find((area): area is ApiMediaAreaChannelPost => area.type === 'channelPost')?.channelId;\n  const forwardSender = forwardSenderId ? selectPeer(global, forwardSenderId) : undefined;\n  const withHeaderAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  const fromPeer = isLoadedStory && story.fromId ? selectPeer(global, story.fromId) : undefined;\n\n  return {\n    peer: (user || chat)!,\n    forwardSender,\n    fromPeer,\n    story,\n    orderedIds: storyList?.storyIdsByPeerId[peerId],\n    isMuted,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    shouldForcePause,\n    storyChangelogUserId: appConfig!.storyChangelogUserId,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    isChatExist: Boolean(chat),\n    areChatSettingsLoaded: Boolean(chat?.settings),\n    stealthMode: global.stories.stealthMode,\n    withHeaderAnimation,\n  };\n})(Story));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst DEFAULT_THRESHOLD = 250;\n\nfunction useLongPress(\n  onStart: NoneToVoidFunction,\n  onEnd: NoneToVoidFunction,\n) {\n  const isLongPressActive = useRef(false);\n  const isPressed = useRef(false);\n  const timerId = useRef<number | undefined>(undefined);\n\n  const start = useCallback((e: React.MouseEvent | React.TouchEvent) => {\n    const canProcessEvent = ('button' in e && e.button === 0) || ('touches' in e && e.touches.length > 0);\n    if (isPressed.current || !canProcessEvent) {\n      return;\n    }\n\n    isPressed.current = true;\n    timerId.current = window.setTimeout(() => {\n      onStart();\n      isLongPressActive.current = true;\n    }, DEFAULT_THRESHOLD);\n  }, [onStart]);\n\n  const cancel = useCallback(() => {\n    if (isLongPressActive.current) {\n      onEnd();\n    }\n\n    isLongPressActive.current = false;\n    isPressed.current = false;\n    window.clearTimeout(timerId.current);\n  }, [onEnd]);\n\n  useEffect(() => {\n    return () => {\n      window.clearTimeout(timerId.current);\n    };\n  }, []);\n\n  return {\n    onMouseDown: start,\n    onMouseUp: cancel,\n    onMouseLeave: cancel,\n    onTouchStart: start,\n    onTouchEnd: cancel,\n  };\n}\n\nexport default useLongPress;\n","import React, { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPeer, ApiPeerStories, ApiTypeStory,\n} from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { getSenderTitle, getStoryMediaHash } from '../../global/helpers';\nimport { selectTabState } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport Avatar from '../common/Avatar';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peer?: ApiPeer;\n  peerStories?: ApiPeerStories;\n}\n\ninterface StateProps {\n  lastViewedId?: number;\n  origin?: StoryViewerOrigin;\n  storyIdsForViewer?: number[];\n}\n\nfunction StoryPreview({\n  peer, peerStories, lastViewedId, storyIdsForViewer, origin,\n}: OwnProps & StateProps) {\n  const { openStoryViewer, loadPeerSkippedStories } = getActions();\n  const lang = useLang();\n\n  const story = useMemo<ApiTypeStory | undefined>(() => {\n    if (!peerStories) {\n      return undefined;\n    }\n\n    const {\n      orderedIds, lastReadId, byId,\n    } = peerStories;\n    const hasUnreadStories = orderedIds[orderedIds.length - 1] !== lastReadId;\n    const previewIndexId = lastViewedId && storyIdsForViewer?.includes(lastViewedId)\n      ? lastViewedId ?? (hasUnreadStories ? (lastReadId ?? -1) : -1)\n      : -1;\n    const resultId = byId[previewIndexId]?.id || storyIdsForViewer?.[0] || orderedIds[0];\n\n    return byId[resultId];\n  }, [lastViewedId, peerStories, storyIdsForViewer]);\n\n  const isLoaded = story && 'content' in story;\n\n  useEffect(() => {\n    if (story && !isLoaded) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [story, isLoaded]);\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  if (!peer || !story || 'isDeleted' in story) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={styles.slideInner}\n      onClick={() => { openStoryViewer({ peerId: story.peerId, storyId: story.id, origin }); }}\n    >\n      {thumbUrl && (\n        <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n      )}\n      {isLoaded && <MediaAreaOverlay story={story} />}\n\n      <div className={styles.content}>\n        <div className={styles.contentInner}>\n          <Avatar\n            peer={peer}\n            withStory\n            storyViewerMode=\"disabled\"\n          />\n          <div className={styles.name}>{renderText(getSenderTitle(lang, peer) || '')}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { peer }): StateProps => {\n  const {\n    storyViewer: {\n      lastViewedByPeerIds,\n      origin,\n      storyList,\n    },\n  } = selectTabState(global);\n\n  return {\n    lastViewedId: peer?.id ? lastViewedByPeerIds?.[peer.id] : undefined,\n    origin,\n    storyIdsForViewer: peer?.id ? storyList?.storyIdsByPeerId[peer.id] : undefined,\n  };\n})(StoryPreview));\n","import React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiPeerStories, ApiTypeStory } from '../../api/types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getStoryKey } from '../../global/helpers';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeer,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport focusEditableElement from '../../util/focusEditableElement';\nimport { clamp } from '../../util/math';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { IS_IOS } from '../../util/windowEnvironment';\nimport { calculateOffsetX } from './helpers/dimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport useSignal from '../../hooks/useSignal';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useSlideSizes from './hooks/useSlideSizes';\n\nimport Story from './Story';\nimport StoryPreview from './StoryPreview';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  isReportModalOpen?: boolean;\n  isDeleteModalOpen?: boolean;\n  onDelete: (story: ApiTypeStory) => void;\n  onReport: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peerIds: string[];\n  currentPeerId?: string;\n  currentStoryId?: number;\n  byPeerId?: Record<string, ApiPeerStories>;\n  isSinglePeer?: boolean;\n  isSingleStory?: boolean;\n  isPrivate?: boolean;\n  isArchive?: boolean;\n}\n\nconst ACTIVE_SLIDE_VERTICAL_CORRECTION_REM = 1.75;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SCROLL_RELEASE_DELAY = 1500;\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nfunction StorySlides({\n  peerIds,\n  currentPeerId,\n  currentStoryId,\n  isOpen,\n  isSinglePeer,\n  isSingleStory,\n  isPrivate,\n  isArchive,\n  byPeerId,\n  isReportModalOpen,\n  isDeleteModalOpen,\n  onDelete,\n  onClose,\n  onReport,\n}: OwnProps & StateProps) {\n  const { stopActiveReaction } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [renderingPeerId, setRenderingPeerId] = useState(currentPeerId);\n  const [renderingStoryId, setRenderingStoryId] = useState(currentStoryId);\n  const prevPeerId = usePrevious(currentPeerId);\n  const renderingIsArchive = useCurrentOrPrev(isArchive, true);\n  const renderingIsPrivate = useCurrentOrPrev(isPrivate, true);\n  const renderingIsSinglePeer = useCurrentOrPrev(isSinglePeer, true);\n  const renderingIsSingleStory = useCurrentOrPrev(isSingleStory, true);\n  const slideSizes = useSlideSizes();\n  const { height: windowHeight, width: windowWidth } = useWindowSize();\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const { isMobile } = useAppLayout();\n\n  const rendersRef = useRef<Record<string, { current: HTMLDivElement | null }>>({});\n  const [getIsAnimating, setIsAnimating] = useSignal(false);\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  function setRef(ref: HTMLDivElement | null, peerId: string) {\n    if (!ref) {\n      return;\n    }\n    if (!rendersRef.current[peerId]) {\n      rendersRef.current[peerId] = { current: ref };\n    } else {\n      rendersRef.current[peerId].current = ref;\n    }\n  }\n\n  const renderingPeerIds = useMemo(() => {\n    if (renderingPeerId && (renderingIsSinglePeer || renderingIsSingleStory)) {\n      return [renderingPeerId];\n    }\n\n    const index = renderingPeerId ? peerIds.indexOf(renderingPeerId) : -1;\n    if (!renderingPeerId || index === -1) {\n      return [];\n    }\n\n    const start = Math.max(index - 4, 0);\n    const end = Math.min(index + 5, peerIds.length);\n\n    return peerIds.slice(start, end);\n  }, [renderingIsSingleStory, renderingIsSinglePeer, renderingPeerId, peerIds]);\n\n  const renderingPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !renderingPeerId) {\n      return -1;\n    }\n\n    return renderingPeerIds.indexOf(renderingPeerId);\n  }, [renderingPeerId, renderingPeerIds]);\n\n  const currentPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !currentPeerId) {\n      return -1;\n    }\n    return renderingPeerIds.indexOf(currentPeerId);\n  }, [currentPeerId, renderingPeerIds]);\n\n  useEffect(() => {\n    if (!isMobile) return;\n\n    // If animation disabled, set rendering peer id to current peer\n    setRenderingPeerId(currentPeerId);\n  }, [currentPeerId, isMobile]);\n\n  // Handling the flipping of stories from a current user\n  useEffect(() => {\n    if (renderingPeerId === currentPeerId && currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n  }, [currentPeerId, currentStoryId, renderingPeerId, renderingStoryId]);\n\n  useEffect(() => {\n    if (isMobile) return undefined;\n    if (prevPeerId && prevPeerId !== currentPeerId) {\n      setIsAnimating(true);\n    }\n\n    return () => {\n      setIsAnimating(false);\n    };\n  }, [prevPeerId, currentPeerId, setIsAnimating, isMobile]);\n\n  useEffect(() => {\n    return () => {\n      if (!currentStoryId || !currentPeerId) return;\n      stopActiveReaction({\n        containerId: getStoryKey(currentPeerId, currentStoryId),\n      });\n    };\n  }, [currentStoryId, currentPeerId]);\n\n  const slideAmount = currentPeerPosition - renderingPeerPosition;\n  const isBackward = renderingPeerPosition > currentPeerPosition;\n\n  const calculateTransformX = useLastCallback(() => {\n    return peerIds.reduce<Record<string, number>>((transformX, peerId, index) => {\n      if (peerId === renderingPeerId) {\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: isBackward,\n        });\n      } else {\n        let isMoveThroughActiveSlide = false;\n        if (!isBackward && index > 0 && peerIds[index - 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n        if (isBackward && index < peerIds.length - 1 && peerIds[index + 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: currentPeerId === peerId && !isBackward,\n          isMoveThroughActiveSlide,\n        });\n      }\n\n      return transformX;\n    }, {});\n  });\n\n  useEffect(() => {\n    if (!containerRef.current || !isOpen) {\n      return undefined;\n    }\n\n    let offsetY = 0;\n\n    const getCurrentStoryRef = () => {\n      return renderingPeerId ? rendersRef.current[renderingPeerId]?.current : undefined;\n    };\n\n    const onRelease = (event: MouseEvent | TouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      const current = getCurrentStoryRef();\n      if (!current) return;\n\n      if (offsetY < -SWIPE_Y_THRESHOLD) {\n        const composer = document.getElementById(EDITABLE_STORY_INPUT_ID);\n        if (composer) {\n          requestMutation(() => {\n            focusEditableElement(composer);\n          });\n        }\n        return;\n      }\n\n      if (offsetY > SWIPE_Y_THRESHOLD) {\n        onClose();\n        if (event.type === 'wheel') {\n          disableScrolling();\n          setTimeout(enableScrolling, SCROLL_RELEASE_DELAY);\n        }\n      } else {\n        requestMutation(() => {\n          current.style.setProperty('--slide-translate-y', '0px');\n        });\n      }\n    };\n\n    return captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      withWheelDrag: true,\n      excludedClosestSelector: '.Composer',\n      onDrag: (event, captureEvent, {\n        dragOffsetX, dragOffsetY,\n      }) => {\n        if (isReleasedRef.current) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (event.type === 'mousemove') return;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const current = getCurrentStoryRef();\n        if (!current) return;\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(absOffsetY) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          offsetY = clamp(dragOffsetY, -limit, limit);\n          if (offsetY > 0) {\n            requestMutation(() => {\n              current.style.setProperty('--slide-translate-y', `${offsetY * (isMobile ? 1 : -1)}px`);\n            });\n          }\n          if (event.type === 'wheel' && Math.abs(offsetY) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onRelease,\n    });\n  }, [isOpen, onClose, windowWidth, windowHeight, isMobile, renderingPeerId]);\n\n  useLayoutEffect(() => {\n    if (isMobile) return;\n    const transformX = calculateTransformX();\n\n    Object.entries(rendersRef.current).forEach(([peerId, { current }]) => {\n      if (!current) return;\n\n      if (!getIsAnimating()) {\n        current.classList.remove(styles.slideAnimation, styles.slideAnimationToActive, styles.slideAnimationFromActive);\n        current.style.setProperty('--slide-translate-x', '0px');\n        current.style.setProperty('--slide-translate-y', '0px');\n        current.style.setProperty('--slide-translate-scale', '1');\n        current.style.setProperty('--slide-content-scale', String(slideSizes.toActiveScale));\n\n        return;\n      }\n\n      const getScale = () => {\n        if (currentPeerId === peerId) {\n          return String(slideSizes.toActiveScale);\n        }\n        if (peerId === renderingPeerId) {\n          return String(slideSizes.fromActiveScale);\n        }\n        return '1';\n      };\n\n      let offsetY = 0;\n      if (peerId === renderingPeerId) {\n        offsetY = -ACTIVE_SLIDE_VERTICAL_CORRECTION_REM * slideSizes.fromActiveScale;\n        current.classList.add(styles.slideAnimationFromActive);\n      }\n      if (peerId === currentPeerId) {\n        offsetY = ACTIVE_SLIDE_VERTICAL_CORRECTION_REM;\n        current.classList.add(styles.slideAnimationToActive);\n      }\n\n      current.classList.add(styles.slideAnimation);\n      current.style.setProperty('--slide-translate-x', `${transformX[peerId] || 0}px`);\n      current.style.setProperty('--slide-translate-y', `${offsetY}rem`);\n      current.style.setProperty('--slide-translate-scale', getScale());\n    });\n  }, [currentPeerId, getIsAnimating, renderingPeerId, slideSizes, isMobile]);\n\n  const handleTransitionEnd = useLastCallback((event: React.TransitionEvent<HTMLDivElement>) => {\n    // It is `target` that is needed here, not `currentTarget`\n    const target = event.target as HTMLDivElement | null;\n\n    if (!target || !target.classList.contains(styles.activeSlide)) return;\n\n    if (renderingPeerId !== currentPeerId) {\n      setRenderingPeerId(currentPeerId);\n      setRenderingStoryId(currentStoryId);\n    } else if (currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n    setIsAnimating(false);\n  });\n\n  if (isMobile) {\n    return (\n      <div className={styles.wrapper} ref={containerRef}>\n        <div\n          className={styles.mobileSlide}\n          ref={(ref) => setRef(ref, renderingPeerId!)}\n        >\n          <Story\n            peerId={renderingPeerId!}\n            storyId={renderingStoryId!}\n            onDelete={onDelete}\n            dimensions={slideSizes.activeSlide}\n            isPrivateStories={renderingIsPrivate}\n            isArchivedStories={renderingIsArchive}\n            isReportModalOpen={isReportModalOpen}\n            isDeleteModalOpen={isDeleteModalOpen}\n            isSingleStory={isSingleStory}\n            getIsAnimating={getIsAnimating}\n            onClose={onClose}\n            onReport={onReport}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  function renderStoryPreview(peerId: string, index: number, position: number) {\n    const style = buildStyle(\n      `width: ${slideSizes.slide.width}px`,\n      `height: ${slideSizes.slide.height}px`,\n    );\n    const className = buildClassName(\n      styles.slide,\n      styles.slidePreview,\n      `slide-${position}`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={className}\n        style={style}\n      >\n        <StoryPreview\n          peer={selectPeer(getGlobal(), peerId)}\n          peerStories={byPeerId?.[peerId]}\n        />\n      </div>\n    );\n  }\n\n  function renderStory(peerId: string) {\n    const style = isMobile ? undefined : buildStyle(\n      `width: ${slideSizes.activeSlide.width}px`,\n      `--slide-media-height: ${slideSizes.activeSlide.height}px`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={buildClassName(styles.slide, styles.activeSlide)}\n        style={style}\n      >\n        <Story\n          peerId={peerId}\n          storyId={renderingStoryId!}\n          onDelete={onDelete}\n          dimensions={slideSizes.activeSlide}\n          isPrivateStories={renderingIsPrivate}\n          isArchivedStories={renderingIsArchive}\n          isReportModalOpen={isReportModalOpen}\n          isDeleteModalOpen={isDeleteModalOpen}\n          isSingleStory={isSingleStory}\n          getIsAnimating={getIsAnimating}\n          onClose={onClose}\n          onReport={onReport}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.wrapper}\n      ref={containerRef}\n      style={`--story-viewer-scale: ${slideSizes.scale}`}\n      onTransitionEnd={handleTransitionEnd}\n    >\n      <div className={styles.fullSize} onClick={onClose} />\n      {renderingPeerIds.length > 1 && (\n        <div className={styles.backdropNonInteractive} style={`height: ${slideSizes.slide.height}px`} />\n      )}\n      {renderingPeerIds.map((peerId, index) => {\n        if (peerId === renderingPeerId) {\n          return renderStory(renderingPeerId);\n        }\n\n        return renderStoryPreview(peerId, index, index - renderingPeerPosition);\n      })}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      peerId: currentPeerId, storyId: currentStoryId, isSinglePeer, isSingleStory, isPrivate, isArchive, storyList,\n    },\n  } = selectTabState(global);\n  const { byPeerId, orderedPeerIds: { active } } = global.stories;\n\n  return {\n    byPeerId,\n    peerIds: storyList?.peerIds ?? active,\n    currentPeerId,\n    currentStoryId,\n    isSinglePeer,\n    isSingleStory,\n    isPrivate,\n    isArchive,\n  };\n}, (global) => selectIsStoryViewerOpen(global))(StorySlides));\n","import { useState } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  });\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"views-list\":\"gpDY8bos\",\"viewsList\":\"gpDY8bos\",\"views-list-loading\":\"vuRAfQ5v\",\"viewsListLoading\":\"vuRAfQ5v\",\"info\":\"AOSUIChK\",\"centeredInfo\":\"oGLhkkS7\",\"view-reaction\":\"MLaabS6n\",\"viewReaction\":\"MLaabS6n\",\"header\":\"d3N2bktu\",\"content\":\"QmRA3HZK\",\"top-button\":\"Dkv8GAxf\",\"topButton\":\"Dkv8GAxf\",\"contact-filter\":\"YpB_9VxE\",\"contactFilter\":\"YpB_9VxE\",\"selected\":\"DoUlpdZJ\",\"sort\":\"axDpgq9G\",\"sort-button\":\"Bm5VA66f\",\"sortButton\":\"Bm5VA66f\",\"icon-sort\":\"YVQiH93R\",\"iconSort\":\"YVQiH93R\",\"icon-down\":\"NXP9aMD0\",\"iconDown\":\"NXP9aMD0\",\"search\":\"QQQqBLK6\",\"bottom-info\":\"_CSv6suH\",\"bottomInfo\":\"_CSv6suH\",\"scrolled\":\"RYQ0liYe\",\"footer\":\"dUK7rP37\",\"closeButton\":\"abPzLiCH\",\"opacity-fade-in\":\"cX8oY3zb\",\"opacityFadeIn\":\"cX8oY3zb\",\"fadeIn\":\"Sx_aeh1o\",\"blocked\":\"L82sciL8\",\"check\":\"UqGBKwjg\",\"menuBubble\":\"dRqemuTA\",\"with-colored-status\":\"GQ96fta9\",\"withColoredStatus\":\"GQ96fta9\"};","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiPeer, ApiTypeStoryView, ApiUser,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName, isUserId } from '../../global/helpers';\nimport { selectPeer } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/date/dateFormat';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\n\nimport styles from './StoryViewModal.module.scss';\n\ntype OwnProps = {\n  storyView: ApiTypeStoryView;\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\nconst BULLET = '\\u2022';\n\nconst StoryView = ({\n  storyView,\n  peer,\n  availableReactions,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    closeStoryViewer,\n    unblockUser,\n    blockUser,\n    deleteContact,\n    updateStoryView,\n    focusMessage,\n    openStoryViewer,\n    closeStoryViewModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useLastCallback(() => {\n    const { type } = storyView;\n\n    if (type === 'repost') {\n      closeStoryViewModal();\n      openStoryViewer({\n        peerId: storyView.peerId,\n        storyId: storyView.storyId,\n      });\n      return;\n    }\n\n    closeStoryViewer();\n\n    setTimeout(() => {\n      if (type === 'user') {\n        openChat({ id: storyView.peerId });\n      } else if (type === 'forward') {\n        focusMessage({ chatId: storyView.peerId, messageId: storyView.messageId });\n      }\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const contextActions = useMemo(() => {\n    if (!isUserId(storyView.peerId)) return undefined;\n    const { peerId, areStoriesBlocked, isUserBlocked } = storyView;\n    const user = peer as ApiUser;\n    const { isContact } = user || {};\n    const fullName = getUserFullName(user);\n\n    const actions: MenuItemContextAction[] = [];\n\n    if (!isUserBlocked) {\n      if (!areStoriesBlocked) {\n        actions.push({\n          handler: () => {\n            blockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: true });\n          },\n          title: lang('StoryHideFrom', fullName),\n          icon: 'hand-stop',\n        });\n      } else {\n        actions.push({\n          handler: () => {\n            unblockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: false });\n          },\n          title: lang('StoryShowBackTo', fullName),\n          icon: 'play-story',\n        });\n      }\n    }\n\n    if (isContact) {\n      actions.push({\n        handler: () => {\n          deleteContact({ userId: peerId });\n        },\n        title: lang('DeleteContact'),\n        icon: 'delete-user',\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        handler: () => {\n          if (isUserBlocked) {\n            unblockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: false });\n          } else {\n            blockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: true });\n          }\n        },\n        title: lang(isUserBlocked ? 'Unblock' : 'BlockUser'),\n        icon: isUserBlocked ? 'user' : 'delete-user',\n        destructive: !isUserBlocked,\n      });\n    }\n\n    return actions;\n  }, [lang, storyView, peer]);\n\n  const statusIcon: IconName = storyView.type === 'user' ? 'message-read'\n    : storyView.type === 'forward' ? 'forward' : 'loop';\n  const shouldColorStatus = storyView.type === 'forward' || storyView.type === 'repost';\n\n  const status = useMemo(() => {\n    const isModified = storyView.type === 'repost' && storyView.story.forwardInfo?.isModified;\n    const parts = [formatDateAtTime(lang, storyView.date * 1000)];\n    if (isModified) {\n      parts.push(lang('lng_edited'));\n    }\n\n    return parts.join(` ${BULLET} `);\n  }, [lang, storyView]);\n\n  return (\n    <ListItem\n      key={storyView.peerId}\n      className={buildClassName(\n        'chat-item-clickable small-icon',\n        styles.opacityFadeIn,\n        (storyView.isUserBlocked || storyView.areStoriesBlocked) && styles.blocked,\n      )}\n      onClick={handleClick}\n      rightElement={storyView.type === 'user' && storyView.reaction ? (\n        <ReactionStaticEmoji\n          reaction={storyView.reaction}\n          className={styles.viewReaction}\n          size={DEFAULT_REACTION_SIZE}\n          availableReactions={availableReactions}\n          withIconHeart\n        />\n      ) : undefined}\n      contextActions={contextActions}\n      withPortalForMenu\n      menuBubbleClassName={styles.menuBubble}\n    >\n      {isUserId(storyView.peerId) ? (\n        <PrivateChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          userId={storyView.peerId}\n          noStatusOrTyping\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n          forceShowSelf\n        />\n      ) : (\n        <GroupChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          chatId={storyView.peerId}\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { storyView }) => {\n  const peer = selectPeer(global, storyView.peerId);\n\n  return {\n    peer,\n    availableReactions: global.reactions.availableReactions,\n  };\n})(StoryView));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStoryView } from '../../api/types';\n\nimport {\n  STORY_MIN_REACTIONS_SORT,\n  STORY_VIEWS_MIN_CONTACTS_FILTER,\n  STORY_VIEWS_MIN_SEARCH,\n} from '../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport PlaceholderChatInfo from '../ui/placeholder/PlaceholderChatInfo';\nimport SearchInput from '../ui/SearchInput';\nimport StoryView from './StoryView';\n\nimport styles from './StoryViewModal.module.scss';\n\ninterface StateProps {\n  story?: ApiStory;\n  isLoading?: boolean;\n  views?: ApiTypeStoryView[];\n  nextOffset?: string;\n  viewersExpirePeriod: number;\n  isCurrentUserPremium?: boolean;\n}\n\nconst REFETCH_DEBOUNCE = 250;\n\nfunction StoryViewModal({\n  story,\n  viewersExpirePeriod,\n  views,\n  nextOffset,\n  isLoading,\n  isCurrentUserPremium,\n}: StateProps) {\n  const {\n    loadStoryViewList, closeStoryViewModal, clearStoryViews,\n  } = getActions();\n\n  const [areJustContacts, markJustContacts, unmarkJustContacts] = useFlag(false);\n  const [areReactionsFirst, markReactionsFirst, unmarkReactionsFirst] = useFlag(true);\n  const [query, setQuery] = useState('');\n\n  const lang = useLang();\n\n  const isOpen = Boolean(story);\n  const isExpired = Boolean(story?.date) && (story!.date + viewersExpirePeriod) < getServerTime();\n  const { viewsCount = 0, reactionsCount = 0 } = story?.views || {};\n\n  const shouldShowJustContacts = story?.isPublic && viewsCount > STORY_VIEWS_MIN_CONTACTS_FILTER;\n  const shouldShowSortByReactions = reactionsCount > STORY_MIN_REACTIONS_SORT;\n  const shouldShowSearch = viewsCount > STORY_VIEWS_MIN_SEARCH;\n  const hasHeader = shouldShowJustContacts || shouldShowSortByReactions || shouldShowSearch;\n\n  useEffect(() => {\n    if (!isOpen) {\n      setQuery('');\n      unmarkJustContacts();\n      markReactionsFirst();\n    }\n  }, [isOpen]);\n\n  const refetchViews = useDebouncedCallback(() => {\n    clearStoryViews({ isLoading: true });\n  }, [], REFETCH_DEBOUNCE, true);\n\n  useEffect(() => {\n    refetchViews();\n  }, [areJustContacts, areReactionsFirst, query, refetchViews]);\n\n  const sortedViews = useMemo(() => {\n    return views?.sort(prepareComparator(areReactionsFirst));\n  }, [areReactionsFirst, views]);\n\n  const placeholderCount = !sortedViews?.length ? Math.min(viewsCount, 8) : 1;\n\n  const notAllAvailable = Boolean(sortedViews?.length) && sortedViews!.length < viewsCount && isExpired;\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!story?.id || nextOffset === undefined) return;\n    loadStoryViewList({\n      peerId: story.peerId,\n      storyId: story.id,\n      offset: nextOffset,\n      areReactionsFirst: areReactionsFirst || undefined,\n      areJustContacts: areJustContacts || undefined,\n      query,\n    });\n  });\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const handleClose = useLastCallback(() => {\n    closeStoryViewModal();\n  });\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        fluid\n        size=\"tiny\"\n        color=\"translucent\"\n        className={buildClassName(!isMenuOpen && 'active', styles.sortButton, styles.topButton)}\n        faded={isMenuOpen}\n        onClick={onTrigger}\n        ariaLabel={lang('SortBy')}\n      >\n        <i className={buildClassName(\n          'icon',\n          areReactionsFirst ? 'icon-heart-outline' : 'icon-recent',\n          styles.iconSort,\n        )}\n        />\n        <i className={buildClassName('icon icon-down', styles.iconDown)} />\n      </Button>\n    );\n  }, [areReactionsFirst, lang]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className=\"component-theme-dark\"\n      contentClassName={styles.viewsList}\n      isSlim\n    >\n      {hasHeader && (\n        <div className={styles.header}>\n          {shouldShowJustContacts && (\n            <div className={styles.contactFilter}>\n              <Button\n                className={buildClassName(!areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={unmarkJustContacts}\n              >\n                {lang('AllViewers')}\n              </Button>\n              <Button\n                className={buildClassName(areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={markJustContacts}\n              >\n                {lang('Contacts')}\n              </Button>\n            </div>\n          )}\n          {shouldShowSortByReactions && (\n            <DropdownMenu\n              className={styles.sort}\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"heart-outline\" onClick={markReactionsFirst}>\n                {lang('SortByReactions')}\n                {areReactionsFirst && (\n                  <i className={buildClassName('icon icon-check', styles.check)} aria-hidden />\n                )}\n              </MenuItem>\n              <MenuItem icon=\"recent\" onClick={unmarkReactionsFirst}>\n                {lang('SortByTime')}\n                {!areReactionsFirst && (\n                  <i className={buildClassName('icon icon-check', styles.check)} aria-hidden />\n                )}\n              </MenuItem>\n            </DropdownMenu>\n          )}\n          {shouldShowSearch && (\n            <SearchInput className={styles.search} value={query} onChange={setQuery} />\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(styles.content, !isAtBeginning && styles.topScrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {isExpired && !isLoading && !query && Boolean(!sortedViews?.length) && (\n          <div className={buildClassName(styles.info, styles.centeredInfo)}>\n            {renderText(\n              lang(isCurrentUserPremium ? 'ServerErrorViewers' : 'ExpiredViewsStub'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n        )}\n        {!isLoading && Boolean(query.length) && !sortedViews?.length && (\n          <div className={styles.info}>\n            {lang('Story.ViewList.EmptyTextSearch')}\n          </div>\n        )}\n        <InfiniteScroll\n          items={sortedViews}\n          onLoadMore={handleLoadMore}\n        >\n          {sortedViews?.map((view) => {\n            const additionalKeyId = view.type === 'forward' ? view.messageId\n              : view.type === 'repost' ? view.storyId : 'user';\n            return (\n              <StoryView key={`${view.peerId}-${view.date}-${additionalKeyId}`} storyView={view} />\n            );\n          })}\n          {isLoading && Array.from({ length: placeholderCount }).map((_, i) => (\n            <ListItem\n              // eslint-disable-next-line react/no-array-index-key\n              key={`placeholder-${i}`}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              disabled\n            >\n              <PlaceholderChatInfo />\n            </ListItem>\n          ))}\n          {notAllAvailable && (\n            <div key=\"not-all-available\" className={buildClassName(styles.info, styles.bottomInfo)}>\n              {lang('Story.ViewList.NotFullyRecorded')}\n            </div>\n          )}\n        </InfiniteScroll>\n      </div>\n      <div className={buildClassName(styles.footer, 'dialog-buttons')}>\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.close)}\n          isText\n          onClick={handleClose}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nfunction prepareComparator(areReactionsFirst?: boolean) {\n  return (a: ApiTypeStoryView, b: ApiTypeStoryView) => {\n    if (areReactionsFirst) {\n      const reactionA = a.type === 'user' && a.reaction;\n      const reactionB = b.type === 'user' && b.reaction;\n      if (reactionA && !reactionB) {\n        return -1;\n      }\n      if (!reactionA && reactionB) {\n        return 1;\n      }\n    }\n\n    return b.date - a.date;\n  };\n}\n\nexport default memo(withGlobal((global) => {\n  const { appConfig } = global;\n  const { storyViewer: { viewModal } } = selectTabState(global);\n  const {\n    storyId, views, nextOffset, isLoading,\n  } = viewModal || {};\n  const story = storyId ? selectPeerStory(global, global.currentUserId!, storyId) : undefined;\n\n  return {\n    storyId,\n    views,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    story: story && 'content' in story ? story : undefined,\n    nextOffset,\n    isLoading,\n    availableReactions: global.reactions.availableReactions,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StoryViewModal));\n","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useFlag from '../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport useSlideSizes from './hooks/useSlideSizes';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport StealthModeModal from './StealthModeModal';\nimport StoryDeleteConfirmModal from './StoryDeleteConfirmModal';\nimport StorySettings from './StorySettings';\nimport StorySlides from './StorySlides';\nimport StoryViewModal from './StoryViewModal';\n\nimport styles from './StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 250;\n\ninterface StateProps {\n  isOpen: boolean;\n  peerId: string;\n  storyId?: number;\n  story?: ApiTypeStory;\n  origin?: StoryViewerOrigin;\n  shouldSkipHistoryAnimations?: boolean;\n  withAnimation?: boolean;\n  isPrivacyModalOpen?: boolean;\n}\n\nfunction StoryViewer({\n  isOpen,\n  peerId,\n  storyId,\n  story,\n  origin,\n  shouldSkipHistoryAnimations,\n  withAnimation,\n  isPrivacyModalOpen,\n}: StateProps) {\n  const { closeStoryViewer, closeStoryPrivacyEditor } = getActions();\n\n  const lang = useLang();\n  const [storyToDelete, setStoryToDelete] = useState<ApiTypeStory | undefined>(undefined);\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag(false);\n\n  const { bestImageData, thumbnail } = useStoryProps(story);\n  const slideSizes = useSlideSizes();\n  const isPrevOpen = usePrevious(isOpen);\n  const prevBestImageData = usePrevious(bestImageData);\n  const prevPeerId = usePrevious(peerId);\n  const prevOrigin = usePrevious(origin);\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setStoryToDelete(undefined);\n      closeReportModal();\n      closeDeleteModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      enableDirectTextInput();\n      stopPriorityPlayback();\n    };\n  }, [isOpen]);\n\n  const handleClose = useCallback(() => {\n    closeStoryViewer();\n  }, [closeStoryViewer]);\n\n  const handleOpenDeleteModal = useCallback((s: ApiTypeStory) => {\n    setStoryToDelete(s);\n    openDeleteModal();\n  }, []);\n\n  const handleCloseDeleteModal = useCallback(() => {\n    closeDeleteModal();\n    setStoryToDelete(undefined);\n  }, []);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isGhostAnimation && !isPrevOpen && isOpen && peerId && thumbnail && origin !== undefined) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(peerId, origin, thumbnail, bestImageData, slideSizes.activeSlide);\n    }\n    if (isGhostAnimation && isPrevOpen && !isOpen && prevPeerId && prevBestImageData && prevOrigin !== undefined) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevPeerId, prevOrigin, prevBestImageData);\n    }\n  }, [\n    isGhostAnimation,\n    bestImageData,\n    prevBestImageData,\n    isOpen,\n    isPrevOpen,\n    slideSizes.activeSlide,\n    thumbnail,\n    peerId,\n    prevPeerId,\n    origin,\n    prevOrigin,\n  ]);\n\n  return (\n    <ShowTransition\n      id=\"StoryViewer\"\n      className={styles.root}\n      isOpen={isOpen}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className={styles.backdrop} onClick={handleClose} />\n      <Button\n        className={styles.close}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <i className={buildClassName('icon icon-close')} aria-hidden />\n      </Button>\n\n      <StorySlides\n        isOpen={isOpen}\n        isReportModalOpen={isReportModalOpen}\n        isDeleteModalOpen={isDeleteModalOpen}\n        onReport={openReportModal}\n        onClose={handleClose}\n        onDelete={handleOpenDeleteModal}\n      />\n\n      <StoryDeleteConfirmModal\n        isOpen={isDeleteModalOpen}\n        story={storyToDelete}\n        onClose={handleCloseDeleteModal}\n      />\n      <StoryViewModal />\n      <StealthModeModal />\n      <StorySettings isOpen={isPrivacyModalOpen} onClose={closeStoryPrivacyEditor} />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        subject=\"story\"\n        peerId={peerId!}\n        storyId={storyId}\n      />\n    </ShowTransition>\n  );\n}\n\nexport default memo(withGlobal((global): StateProps => {\n  const {\n    shouldSkipHistoryAnimations, storyViewer: {\n      storyId, peerId, isPrivacyModalOpen, origin,\n    },\n  } = selectTabState(global);\n  const story = peerId && storyId ? selectPeerStory(global, peerId, storyId) : undefined;\n  const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  return {\n    isOpen: selectIsStoryViewerOpen(global),\n    shouldSkipHistoryAnimations,\n    peerId: peerId!,\n    storyId,\n    story,\n    origin,\n    withAnimation,\n    isPrivacyModalOpen,\n  };\n})(StoryViewer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { ThreadId } from '../../types';\n\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport { getCanPostInChat, isUserId } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport TopicIcon from './TopicIcon';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  className?: string;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  search,\n  searchPlaceholder,\n  className,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { loadTopics } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicContainerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const searchRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const topicSearchRef = useRef<HTMLInputElement>(null);\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  const resetSearch = useLastCallback(() => {\n    onSearchChange('');\n  });\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const [topicIds, topics] = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const chatFullInfoById = global.chats.fullInfoById;\n\n    const topicsResult = forumId ? chatsById[forumId].topics : undefined;\n    if (!topicsResult) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = topicsResult\n      ? Object.values(topicsResult).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chatsById[forumId!], topic.id, undefined, chatFullInfoById[forumId!])\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : topicsResult;\n\n    return [Object.keys(result).map(Number), result];\n  }, [forumId, topicSearch]);\n\n  const handleHeaderBackClick = useLastCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  });\n\n  const handleSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  });\n\n  const handleTopicSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatsById = getGlobal().chats.byId;\n\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById[chatId];\n      if (chat?.isForum) {\n        if (!chat.topics) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, '.ListItem-button', true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleClick = useLastCallback((e: React.MouseEvent, chatId: string) => {\n    const chatsById = getGlobal().chats.byId;\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!chat.topics) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  });\n\n  const handleTopicClick = useLastCallback((e: React.MouseEvent, topicId: number) => {\n    onSelectChatOrUser(forumId!, topicId);\n  });\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Back')} onClick={handleHeaderBackClick}>\n            <i className=\"icon icon-arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={!topicIds ? 0 : topicIds.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {topicIds\n            ? topicIds.map((topicId, i) => (\n              <ListItem\n                key={`${forumId}_${topicId}`}\n                className=\"chat-item-clickable force-rounded-corners small-icon topic-item\"\n                style={`top: ${i * CHAT_HEIGHT_PX}px;`}\n                onClick={handleTopicClick}\n                clickArg={topicId}\n              >\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n                <div dir=\"auto\" className=\"fullName\">{renderText(topics[topicId].title)}</div>\n              </ListItem>\n            ))\n            : <Loading />}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map((id, i) => (\n              <ListItem\n                key={id}\n                className=\"chat-item-clickable force-rounded-corners small-icon\"\n                style={`height: ${CHAT_HEIGHT_PX}px; top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n                onClick={handleClick}\n                clickArg={id}\n              >\n                {isUserId(id) ? (\n                  <PrivateChatInfo\n                    status={id === currentUserId ? lang('SavedMessagesInfo') : undefined}\n                    userId={id}\n                  />\n                ) : (\n                  <GroupChatInfo chatId={id} />\n                )}\n              </ListItem>\n            ))}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName('ChatOrUserPicker', className)}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\" slideClassName=\"ChatOrUserPicker_slide\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatType } from '../../api/types';\nimport type { ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  isDeletedUser,\n} from '../../global/helpers';\nimport { filterChatIdsByType } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from './helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport ChatOrUserPicker from './ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  className?: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  className,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n    const usersById = global.users.byId;\n    const chatsById = global.chats.byId;\n    const chatFullInfoById = global.chats.fullInfoById;\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user && isDeletedUser(user)) return false;\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID, undefined, chatFullInfoById[id]);\n    });\n\n    const sorted = sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, search, currentUserId),\n      ...(contactIds && filter.includes('users') ? filterUsersByName(contactIds, usersById, search) : []),\n    ]), undefined, priorityIds);\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, lang, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      className={className}\n      chatOrUserIds={renderingIds}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ThreadId } from '../../types';\n\nimport { getChatTitle, getUserFirstOrLastName, isUserId } from '../../global/helpers';\nimport { selectChat, selectTabState, selectUser } from '../../global/selectors';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n  isStory?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n  isStory,\n}) => {\n  const {\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    forwardStory,\n    showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const renderingIsStory = usePrevious(isStory, true);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    const isSelf = recipientId === currentUserId;\n    if (isStory) {\n      forwardStory({ toChatId: recipientId });\n      const global = getGlobal();\n      if (isUserId(recipientId)) {\n        showNotification({\n          message: isSelf\n            ? lang('Conversation.StoryForwardTooltip.SavedMessages.One')\n            : lang(\n              'StorySharedTo',\n              getUserFirstOrLastName(selectUser(global, recipientId)),\n            ),\n        });\n      } else {\n        const chat = selectChat(global, recipientId);\n        if (!chat) return;\n\n        showNotification({\n          message: lang('StorySharedTo', getChatTitle(lang, chat)),\n        });\n      }\n      return;\n    }\n\n    if (isSelf) {\n      const message = lang(\n        isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One',\n      );\n\n      forwardToSavedMessages();\n      showNotification({ message });\n    } else {\n      setForwardChatOrTopic({ chatId: recipientId, topicId: Number(threadId) });\n    }\n  }, [currentUserId, isManyMessages, isStory, lang]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      className={renderingIsStory ? 'component-theme-dark' : undefined}\n      searchPlaceholder={lang('ForwardTo')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { messageIds, storyId } = selectTabState(global).forwardMessages;\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (messageIds?.length || 0) > 1,\n    isStory: Boolean(storyId),\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ThreadId } from '../../types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { selectCurrentMessageList, selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  dialogs: (ApiError | ApiInviteInfo | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, currentMessageList }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} withVideo />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      if (isRequestNeeded) {\n        showNotification({\n          message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n        });\n      }\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            className=\"confirm-dialog-button\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleJoinClick}\n          >\n            {isRequestNeeded ? requestToJoinText : joinText}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      if (!currentMessageList) {\n        return;\n      }\n\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n        messageList: currentMessageList,\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message!, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({\n        message, className, localId, action, actionText, title, duration,\n      }) => (\n        <Notification\n          title={title ? renderText(title, ['simple_markdown', 'emoji', 'br', 'links']) : undefined}\n          action={action}\n          actionText={actionText}\n          className={className}\n          duration={duration}\n          message={renderText(message, ['simple_markdown', 'emoji', 'br', 'links'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VJDwJpsF\",\"buttons\":\"aYO2C2Hx\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { prepareMapUrl } from '../../../util/map';\nimport { IS_IOS, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './MapModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['mapModal'];\n};\n\nconst OpenMapModal = ({ modal }: OwnProps) => {\n  const { closeMapModal } = getActions();\n\n  const { point: geoPoint, zoom } = modal || {};\n\n  const lang = useLang();\n\n  const isOpen = Boolean(geoPoint);\n\n  const handleClose = useLastCallback(() => {\n    closeMapModal();\n  });\n\n  const [googleUrl, bingUrl, appleUrl, osmUrl] = useMemo(() => {\n    if (!geoPoint) {\n      return [];\n    }\n\n    const google = prepareMapUrl('google', geoPoint, zoom);\n    const bing = prepareMapUrl('bing', geoPoint, zoom);\n    const osm = prepareMapUrl('osm', geoPoint, zoom);\n    const apple = prepareMapUrl('apple', geoPoint, zoom);\n\n    return [google, bing, apple, osm];\n  }, [geoPoint, zoom]);\n\n  const openUrl = useLastCallback((url: string) => {\n    closeMapModal();\n    window.open(url, '_blank', 'noopener');\n  });\n\n  const handleGoogleClick = useLastCallback(() => {\n    openUrl(googleUrl!);\n  });\n\n  const handleBingClick = useLastCallback(() => {\n    openUrl(bingUrl!);\n  });\n\n  const handleAppleClick = useLastCallback(() => {\n    openUrl(appleUrl!);\n  });\n\n  const handleOsmClick = useLastCallback(() => {\n    openUrl(osmUrl!);\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.root}\n      title={lang('OpenMapWith')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      isSlim\n    >\n      <div className={styles.buttons}>\n        {(IS_IOS || IS_MAC_OS) && (\n          <Button fluid size=\"smaller\" onClick={handleAppleClick}>\n            Apple Maps\n          </Button>\n        )}\n        <Button fluid size=\"smaller\" onClick={handleGoogleClick}>\n          Google Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleBingClick}>\n          Bing Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleOsmClick}>\n          Open Street Maps\n        </Button>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(OpenMapModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"eha3Z6eU\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport renderText from '../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  modal?: TabState['urlAuth'];\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps & StateProps> = ({\n  modal, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(modal, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (modal?.url && isLoginChecked) {\n      const acceptAction = modal.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    modal, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(modal?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    return {\n      currentUser,\n    };\n  },\n)(UrlAuthModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateToString, formatTime, getDayStart } from '../../util/date/dateFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  const isDisabled = (isFutureMode && selectedDate.getTime() < minDate.getTime())\n    || (isPastMode && selectedDate.getTime() > maxDate.getTime());\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    if (isFutureMode && selectedDate < minDate) {\n      onSubmit(minDate);\n    } else if (isPastMode && selectedDate > maxDate) {\n      onSubmit(maxDate);\n    } else {\n      onSubmit(selectedDate);\n    }\n  }, [isFutureMode, isPastMode, minDate, maxDate, onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <div className=\"footer\">\n          <Button\n            onClick={handleSubmit}\n            disabled={isDisabled}\n          >\n            {submitLabel}\n          </Button>\n          {secondButtonLabel && (\n            <Button onClick={onSecondButtonClick} isText>\n              {secondButtonLabel}\n            </Button>\n          )}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            peer={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import { useCallback, useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { WebAppInboundEvent, WebAppOutboundEvent } from '../../../../types/webapp';\n\nimport { extractCurrentThemeParams } from '../../../../util/themeStyle';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst RELOAD_TIMEOUT = 500;\n\nconst useWebAppFrame = (\n  ref: React.RefObject<HTMLIFrameElement>,\n  isOpen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n    setWebAppPaymentSlug,\n    openInvoice,\n    closeWebApp,\n  } = getActions();\n\n  const isReloadSupported = useRef<boolean>(false);\n  const reloadTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const forceReloadFrame = useLastCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  });\n\n  const reloadFrame = useCallback((url: string) => {\n    if (isReloadSupported.current) {\n      sendEvent({\n        eventType: 'reload_iframe',\n      });\n      reloadTimeout.current = setTimeout(() => {\n        forceReloadFrame(url);\n      }, RELOAD_TIMEOUT);\n      return;\n    }\n\n    forceReloadFrame(url);\n  }, [sendEvent]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      const { eventType, eventData } = data;\n      // Handle some app requests here to simplify hook usage\n      if (eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (eventType === 'web_app_close') {\n        closeWebApp();\n      }\n\n      if (eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n        isReloadSupported.current = Boolean(eventData.reload_supported);\n      }\n\n      if (eventType === 'iframe_will_reload') {\n        clearTimeout(reloadTimeout.current);\n      }\n\n      if (eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      // Clipboard access temporarily disabled to address security concerns\n      if (eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n\n        showNotification({\n          message: 'Clipboard access is not supported in this client yet',\n        });\n      }\n\n      if (eventType === 'web_app_open_scan_qr_popup') {\n        showNotification({\n          message: 'Scanning QR code is not supported in this client yet',\n        });\n      }\n\n      if (eventType === 'web_app_open_invoice') {\n        setWebAppPaymentSlug({\n          slug: eventData.slug,\n        });\n        openInvoice({\n          type: 'slug',\n          slug: eventData.slug,\n        });\n      }\n\n      if (eventType === 'web_app_open_link') {\n        const linkUrl = eventData.url;\n        window.open(linkUrl, '_blank', 'noreferrer');\n      }\n\n      if (eventType === 'web_app_biometry_get_info') {\n        sendEvent({\n          eventType: 'biometry_info_received',\n          eventData: {\n            available: false,\n          },\n        });\n      }\n\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, sendEvent, onEvent, sendCustomStyle, sendTheme, sendViewport, onLoad, windowSize.isResizing]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, sendViewport, ref]);\n\n  return {\n    sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport type { PopupOptions, WebAppInboundEvent } from '../../../types/webapp';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { convertToApiChatType } from '../../../global/helpers';\nimport {\n  selectCurrentChat, selectTabState, selectTheme, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { getColorLuma } from '../../../util/colors';\nimport { hexToRgb } from '../../../util/switchTheme';\nimport { extractCurrentThemeParams, validateHexColor } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport renderText from '../../common/helpers/renderText';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport usePopupLimit from './hooks/usePopupLimit';\nimport useWebAppFrame from './hooks/useWebAppFrame';\n\nimport Icon from '../../common/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport Spinner from '../../ui/Spinner';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApp'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst POPUP_SEQUENTIAL_LIMIT = 3;\nconst LUMA_THRESHOLD = 128;\nconst POPUP_RESET_DELAY = 2000; // 2s\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n}) => {\n  const {\n    closeWebApp,\n    sendWebViewData,\n    prolongWebView,\n    toggleAttachBot,\n    openTelegramLink,\n    openChat,\n    setWebAppPaymentSlug,\n    switchBotInline,\n    sharePhoneWithBot,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [isBackButtonVisible, setIsBackButtonVisible] = useState(false);\n  const [isSettingsButtonVisible, setIsSettingsButtonVisible] = useState(false);\n\n  const [backgroundColor, setBackgroundColor] = useState<string>();\n  const [headerColor, setHeaderColor] = useState<string>();\n\n  const [shouldConfirmClosing, setShouldConfirmClosing] = useState(false);\n  const [isCloseModalOpen, openCloseModal, hideCloseModal] = useFlag(false);\n  const [isRemoveModalOpen, openRemoveModal, hideRemoveModal] = useFlag(false);\n\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n\n  const [popupParameters, setPopupParameters] = useState<PopupOptions | undefined>();\n  const [isRequestingPhone, setIsRequestingPhone] = useState(false);\n  const [isRequesingWriteAccess, setIsRequestingWriteAccess] = useState(false);\n  const {\n    unlockPopupsAt, handlePopupOpened, handlePopupClosed,\n  } = usePopupLimit(POPUP_SEQUENTIAL_LIMIT, POPUP_RESET_DELAY);\n\n  const { isMobile } = useAppLayout();\n\n  useEffect(() => {\n    const themeParams = extractCurrentThemeParams();\n    setBackgroundColor(themeParams.bg_color);\n    setHeaderColor(themeParams.bg_color);\n  }, []);\n\n  // eslint-disable-next-line no-null/no-null\n  const frameRef = useRef<HTMLIFrameElement>(null);\n\n  const lang = useLang();\n  const {\n    url, buttonText, queryId, replyInfo,\n  } = modal || {};\n  const isOpen = Boolean(url);\n  const isSimple = Boolean(buttonText);\n\n  const {\n    reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isSimple, handleEvent, markLoaded);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      botId: bot!.id,\n      queryId: queryId!,\n      peerId: chat!.id,\n      replyInfo,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  });\n\n  const handleSettingsButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  });\n\n  const handleRefreshClick = useLastCallback(() => {\n    reloadFrame(modal!.url);\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (shouldConfirmClosing) {\n      openCloseModal();\n    } else {\n      closeWebApp();\n    }\n  });\n\n  const handleAppPopupClose = useLastCallback((buttonId?: string) => {\n    setPopupParameters(undefined);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  });\n\n  const handleAppPopupModalClose = useLastCallback(() => {\n    handleAppPopupClose();\n  });\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (modal?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: modal.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, modal?.slug]);\n\n  const handleRemoveAttachBot = useLastCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: false,\n    });\n    closeWebApp();\n  });\n\n  const handleToggleClick = useLastCallback(() => {\n    if (attachBot) {\n      openRemoveModal();\n      return;\n    }\n\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: true,\n    });\n  });\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleClose();\n    }\n  });\n\n  const handleRejectPhone = useLastCallback(() => {\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleAcceptPhone = useLastCallback(() => {\n    sharePhoneWithBot({ botId: bot!.id });\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'sent',\n      },\n    });\n  });\n\n  const handleRejectWriteAccess = useLastCallback(() => {\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  const handleAcceptWriteAccess = useLastCallback(async () => {\n    const result = await callApi('allowBotSendMessages', { bot: bot! });\n    if (!result) {\n      handleRejectWriteAccess();\n      return;\n    }\n\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'allowed',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  async function handleRequestWriteAccess() {\n    const canWrite = await callApi('fetchBotCanSendMessage', {\n      bot: bot!,\n    });\n\n    if (canWrite) {\n      sendEvent({\n        eventType: 'write_access_requested',\n        eventData: {\n          status: 'allowed',\n        },\n      });\n    }\n\n    setIsRequestingWriteAccess(!canWrite);\n  }\n\n  async function handleInvokeCustomMethod(requestId: string, method: string, parameters: string) {\n    const result = await callApi('invokeWebViewCustomMethod', {\n      bot: bot!,\n      customMethod: method,\n      parameters,\n    });\n\n    sendEvent({\n      eventType: 'custom_method_invoked',\n      eventData: {\n        req_id: requestId,\n        ...result,\n      },\n    });\n  }\n\n  const openBotChat = useLastCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      const themeParams = extractCurrentThemeParams();\n\n      setShouldConfirmClosing(false);\n      hideCloseModal();\n      hideRemoveModal();\n      setPopupParameters(undefined);\n      setIsRequestingPhone(false);\n      setIsRequestingWriteAccess(false);\n      setMainButton(undefined);\n      setIsBackButtonVisible(false);\n      setIsSettingsButtonVisible(false);\n      setBackgroundColor(themeParams.bg_color);\n      setHeaderColor(themeParams.bg_color);\n      markUnloaded();\n    }\n  }, [isOpen]);\n\n  function handleEvent(event: WebAppInboundEvent) {\n    const { eventType, eventData } = event;\n    if (eventType === 'web_app_open_tg_link' && !isPaymentModalOpen) {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      setIsBackButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_setup_settings_button') {\n      setIsSettingsButtonVisible(eventData.is_visible);\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.bg_color;\n      setBackgroundColor(color);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      if (eventData.color_key) {\n        const themeParams = extractCurrentThemeParams();\n        const key = eventData.color_key;\n        const newColor = themeParams[key];\n        const color = validateHexColor(newColor) ? newColor : headerColor;\n        setHeaderColor(color);\n      }\n\n      if (eventData.color) {\n        const color = validateHexColor(eventData.color) ? eventData.color : headerColor;\n        setHeaderColor(color);\n      }\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const themeParams = extractCurrentThemeParams();\n      const color = validateHexColor(eventData.color) ? eventData.color : themeParams.button_color;\n      const textColor = validateHexColor(eventData.text_color) ? eventData.text_color : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      setShouldConfirmClosing(eventData.need_confirmation);\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (popupParameters || !eventData.message.trim().length || !eventData.buttons?.length\n      || eventData.buttons.length > 3 || isRequestingPhone || isRequesingWriteAccess\n      || unlockPopupsAt > Date.now()) {\n        handleAppPopupClose(undefined);\n        return;\n      }\n\n      setPopupParameters(eventData);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_request_phone') {\n      if (popupParameters || isRequesingWriteAccess || unlockPopupsAt > Date.now()) {\n        handleRejectPhone();\n        return;\n      }\n\n      setIsRequestingPhone(true);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_request_write_access') {\n      if (popupParameters || isRequestingPhone || unlockPopupsAt > Date.now()) {\n        handleRejectWriteAccess();\n        return;\n      }\n\n      handleRequestWriteAccess();\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_invoke_custom_method') {\n      const { method, params, req_id: requestId } = eventData;\n      handleInvokeCustomMethod(requestId, method, JSON.stringify(params));\n    }\n  }\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={buildClassName(styles.moreButton, isMenuOpen && 'active')}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  const headerTextVar = useMemo(() => {\n    if (!headerColor) return undefined;\n    const { r, g, b } = hexToRgb(headerColor);\n    const luma = getColorLuma([r, g, b]);\n    const adaptedLuma = theme === 'dark' ? 255 - luma : luma;\n    return adaptedLuma > LUMA_THRESHOLD ? 'color-text' : 'color-background';\n  }, [headerColor, theme]);\n\n  function renderHeader() {\n    return (\n      <div\n        className=\"modal-header\"\n        style={buildStyle(\n          headerColor && `background-color: ${headerColor}`,\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{attachBot?.shortName ?? bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {isSettingsButtonVisible && (\n            <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n              {lang('Settings')}\n            </MenuItem>\n          )}\n          {bot?.isAttachBot && (\n            <MenuItem\n              icon={attachBot ? 'stop' : 'install'}\n              onClick={handleToggleClick}\n              destructive={Boolean(attachBot)}\n            >\n              {lang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={handleClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor}`}\n    >\n      <Spinner className={buildClassName(styles.loadingSpinner, isLoaded && styles.hide)} />\n      {isOpen && (\n        <>\n          <iframe\n            className={buildClassName(styles.frame, shouldDecreaseWebFrameSize && styles.withButton)}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox={SANDBOX_ATTRIBUTES}\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n            ref={frameRef}\n          />\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && styles.visible,\n              shouldHideButton && styles.hidden,\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </>\n      )}\n      <ConfirmDialog\n        isOpen={isRequestingPhone}\n        onClose={handleRejectPhone}\n        title={lang('ShareYouPhoneNumberTitle')}\n        text={lang('AreYouSureShareMyContactInfoBot')}\n        confirmHandler={handleAcceptPhone}\n        confirmLabel={lang('ContactShare')}\n      />\n      <ConfirmDialog\n        isOpen={isRequesingWriteAccess}\n        onClose={handleRejectWriteAccess}\n        title={lang('lng_bot_allow_write_title')}\n        text={lang('lng_bot_allow_write')}\n        confirmHandler={handleAcceptWriteAccess}\n        confirmLabel={lang('lng_bot_allow_write_confirm')}\n      />\n      {popupParameters && (\n        <Modal\n          isOpen={Boolean(popupParameters)}\n          title={popupParameters.title || NBSP}\n          onClose={handleAppPopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !popupParameters.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {popupParameters.message}\n          <div className=\"dialog-buttons mt-2\">\n            {popupParameters.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleAppPopupClose(button.id)}\n              >\n                {button.text || lang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n\n      <ConfirmDialog\n        isOpen={isCloseModalOpen}\n        onClose={hideCloseModal}\n        title={lang('lng_bot_close_warning_title')}\n        text={lang('lng_bot_close_warning')}\n        confirmHandler={closeWebApp}\n        confirmIsDestructive\n        confirmLabel={lang('lng_bot_close_warning_sure')}\n      />\n      <ConfirmDialog\n        isOpen={isRemoveModalOpen}\n        onClose={hideRemoveModal}\n        title={lang('BotRemoveFromMenuTitle')}\n        textParts={renderText(lang('BotRemoveFromMenu', bot?.firstName), ['simple_markdown'])}\n        confirmHandler={handleRemoveAttachBot}\n        confirmIsDestructive\n      />\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { botId } = modal || {};\n    const attachBot = botId ? global.attachMenu.bots[botId] : undefined;\n    const bot = botId ? selectUser(global, botId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status } = selectTabState(global).payment;\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      isPaymentModalOpen,\n      paymentStatus: status,\n    };\n  },\n)(WebAppModal));\n","import { useRef, useState } from '../../../../lib/teact/teact';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function usePopupLimit(sequentialLimit: number, resetAfter: number) {\n  const [unlockPopupsAt, setUnlockPopupsAt] = useState(0);\n  const sequentialCalls = useRef(0);\n  const lastClosedDate = useRef(0);\n\n  const handlePopupOpened = useLastCallback(() => {\n    const now = Date.now();\n\n    if (now - lastClosedDate.current > resetAfter) {\n      sequentialCalls.current = 0;\n    }\n\n    sequentialCalls.current += 1;\n\n    if (sequentialCalls.current >= sequentialLimit) {\n      setUnlockPopupsAt(now + resetAfter);\n    }\n  });\n\n  const handlePopupClosed = useLastCallback(() => {\n    if (unlockPopupsAt < Date.now()) { // Prevent confused user from extending lock time\n      lastClosedDate.current = Date.now();\n    }\n  });\n\n  return {\n    unlockPopupsAt,\n    handlePopupOpened,\n    handlePopupClosed,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"XWfkIDLY\",\"more-button\":\"kKPD09tc\",\"moreButton\":\"kKPD09tc\",\"close-icon\":\"RuJ3d9N6\",\"closeIcon\":\"RuJ3d9N6\",\"state-back\":\"IWA50OWU\",\"stateBack\":\"IWA50OWU\",\"loading-spinner\":\"ZvO65ZK4\",\"loadingSpinner\":\"ZvO65ZK4\",\"hide\":\"_90e04Jo\",\"frame\":\"zA1w1IOq\",\"with-button\":\"XsPaFD9G\",\"withButton\":\"XsPaFD9G\",\"main-button\":\"Os96PEjQ\",\"mainButton\":\"Os96PEjQ\",\"visible\":\"C8aMayAw\",\"hidden\":\"GllU9an9\",\"main-button-spinner\":\"nYSFrf_X\",\"mainButtonSpinner\":\"nYSFrf_X\",\"web-app-popup\":\"cTVKrIjM\",\"webAppPopup\":\"cTVKrIjM\",\"without-title\":\"d0DG1SkF\",\"withoutTitle\":\"d0DG1SkF\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useLang();\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = type === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (type) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(bot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(bot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [bot, type, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', bot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { MINI_APP_TOS_URL } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['requestedAttachBotInstall'];\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  modal,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const bot = modal?.bot;\n\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n\n  const lang = useLang();\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed: Boolean(bot?.shouldRequestWriteAccess),\n    });\n  }, [confirmAttachBotInstall, bot]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsTosAccepted(false);\n    }\n  }, [bot]);\n\n  const tosLabel = useMemo(() => {\n    const base = lang('lng_mini_apps_disclaimer_button');\n    const split = base.split('{link}');\n    const linkText = lang('lng_mini_apps_disclaimer_link');\n    return [\n      split[0],\n      <a href={MINI_APP_TOS_URL} target=\"_blank\" rel=\"noopener noreferrer\">{linkText}</a>,\n      split[1],\n    ];\n  }, [lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={lang('lng_mini_apps_disclaimer_title')}\n      confirmHandler={handleConfirm}\n      isConfirmDisabled={!isTosAccepted}\n    >\n      {renderText(lang('lng_mini_apps_disclaimer_text', bot?.shortName), ['simple_markdown'])}\n      <Checkbox\n        className=\"dialog-checkbox\"\n        checked={isTosAccepted}\n        label={tosLabel}\n        onCheck={setIsTosAccepted}\n      />\n      {renderText(lang('WebBot.Account.Desclaimer.Desc', bot?.shortName), ['simple_markdown'])}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePrevious(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder!.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wn7D2H1e\",\"text\":\"IQ1U2TrZ\",\"header\":\"F6qqXRvD\",\"description\":\"ILLaH6qQ\",\"icon\":\"DzGwbpu5\",\"font-icon\":\"Pa9h5mh3\",\"fontIcon\":\"Pa9h5mh3\"};","import React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { hexToRgb, lerpRgb } from '../../../util/switchTheme';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps<T> = {\n  icon: string;\n  isFontIcon?: boolean;\n  title: string;\n  text: string;\n  index: number;\n  count: number;\n  section: T;\n  onClick?: (section: T) => void;\n};\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n].map(hexToRgb);\n\n// eslint-disable-next-line @typescript-eslint/comma-dangle\nconst PremiumFeatureItem = <T,>({\n  icon,\n  isFontIcon,\n  title,\n  text,\n  index,\n  count,\n  section,\n  onClick,\n}: OwnProps<T>) => {\n  const newIndex = (index / count) * COLORS.length;\n  const colorA = COLORS[Math.floor(newIndex)];\n  const colorB = COLORS[Math.ceil(newIndex)] ?? colorA;\n  const { r, g, b } = lerpRgb(colorA, colorB, 0.5);\n\n  const handleClick = useLastCallback(() => {\n    onClick?.(section);\n  });\n\n  return (\n    <ListItem buttonClassName={styles.root} onClick={handleClick} inactive={!onClick}>\n      {isFontIcon ? (\n        <i\n          className={buildClassName(styles.fontIcon, `icon icon-${icon}`)}\n          aria-hidden\n          style={`--item-color: rgb(${r},${g},${b})`}\n        />\n      ) : (\n        <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: rgb(${r},${g},${b})`} draggable={false} />\n      )}\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HmY1pYD9\",\"arrow\":\"cqNhvdib\",\"right\":\"hIgQCprt\",\"arrow-hidden\":\"wDzTWXzO\",\"arrowHidden\":\"wDzTWXzO\",\"dot\":\"Ac0pMX9w\",\"medium\":\"yDo_8Y7X\",\"small\":\"bhODNwmU\",\"invisible\":\"O9pyrgj0\",\"active\":\"NYDxCNdz\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\n\nimport Button from '../ui/Button';\n\nimport styles from './SliderDots.module.scss';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <i className=\"icon icon-previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst || isInvisible) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <i className=\"icon icon-next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"u84X0r2z\",\"floating-badge\":\"hPi4fICJ\",\"floatingBadge\":\"hPi4fICJ\",\"floating-badge-triangle\":\"jufjjcX9\",\"floatingBadgeTriangle\":\"jufjjcX9\",\"floating-badge-icon\":\"XkiOXdMP\",\"floatingBadgeIcon\":\"XkiOXdMP\",\"text\":\"YaiSoFKE\",\"floating-badge-value\":\"iC3LJrvy\",\"floatingBadgeValue\":\"iC3LJrvy\",\"left-text\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"leftText\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"right-text\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"rightText\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"right-value\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"rightValue\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"left-value\":\"RJosx238 YaiSoFKE\",\"leftValue\":\"RJosx238 YaiSoFKE\",\"line\":\"Hy5kWx0p\",\"left\":\"scGr4JS9\",\"right\":\"nPaUalQf\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { IconName } from '../../../../types/icons';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLang from '../../../../hooks/useLang';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\ntype OwnProps = {\n  floatingBadgeIcon?: IconName;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <i className={buildClassName(styles.floatingBadgeIcon, `icon-${floatingBadgeIcon}`, 'icon')} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle}>\n            <svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\">\n              <path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\" />\n            </svg>\n          </div>\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXp65Wgy\",\"title\":\"W1xG3pjS\",\"description\":\"b_CBXIkT\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"O1fqNCy0\",\"sticker\":\"ogaoEAcn\",\"effect-sticker\":\"Stdz4UIW ogaoEAcn\",\"effectSticker\":\"Stdz4UIW ogaoEAcn\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: (index: number) => void;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useLastCallback(() => {\n    onClick(realIndex);\n  });\n\n  const handleEnded = useLastCallback(() => {\n    inanimate();\n    onEnded(realIndex);\n  });\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\n\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useLastCallback((i: number) => {\n    setOffset(-i);\n  });\n\n  const handleEnded = useLastCallback((i: number) => {\n    const displayIndex = cycleRestrict(renderedStickers.length, i + offset);\n    if (displayIndex !== 0) return;\n\n    setTimeout(() => {\n      setOffset((current) => {\n        return cycleRestrict(renderedStickers.length, current + 1);\n      });\n    }, ENDED_DELAY);\n  });\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {Boolean(size) && renderedStickers?.map((sticker, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={sticker}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mFElmm7a\",\"header\":\"Jjbochk6\",\"circle\":\"ChteQ9C3\",\"title\":\"d2ayix6L\",\"features\":\"ensyCeMe\",\"mobile\":\"DFbZJafh\",\"scrolled\":\"iN1T0a2Y\"};","import React, { memo, useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\n\nimport { selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLang from '../../../../hooks/useLang';\nimport useScrolledState from '../../../../hooks/useScrolledState';\nimport useDevicePixelRatio from '../../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar from '../../../common/Avatar';\nimport { drawGradientCircle } from '../../../common/AvatarStoryCircle';\nimport PremiumFeatureItem from '../PremiumFeatureItem';\n\nimport styles from './PremiumFeaturePreviewStories.module.scss';\n\ntype StateProps = {\n  currentUser: ApiUser;\n};\n\nconst STORY_FEATURE_TITLES = {\n  stories_order: 'PremiumStoriesPriority',\n  stories_stealth: 'PremiumStoriesStealth',\n  stories_views: 'PremiumStoriesViews',\n  stories_timer: 'lng_premium_stories_subtitle_expiration',\n  stories_save: 'PremiumStoriesSaveToGallery',\n  stories_caption: 'lng_premium_stories_subtitle_caption',\n  stories_link: 'lng_premium_stories_subtitle_links',\n};\n\nconst STORY_FEATURE_DESCRIPTIONS = {\n  stories_order: 'PremiumStoriesPriorityDescription',\n  stories_stealth: 'PremiumStoriesStealthDescription',\n  stories_views: 'PremiumStoriesViewsDescription',\n  stories_timer: 'PremiumStoriesExpirationDescription',\n  stories_save: 'PremiumStoriesSaveToGalleryDescription',\n  stories_caption: 'PremiumStoriesCaptionDescription',\n  stories_link: 'PremiumStoriesFormattingDescription',\n};\n\nconst STORY_FEATURE_ICONS = {\n  stories_order: 'story-priority',\n  stories_stealth: 'eye-closed-outline',\n  stories_views: 'eye-outline',\n  stories_timer: 'timer',\n  stories_save: 'arrow-down-circle',\n  stories_caption: 'story-caption',\n  stories_link: 'link-badge',\n};\n\nconst STORY_FEATURE_ORDER = Object.keys(STORY_FEATURE_TITLES) as (keyof typeof STORY_FEATURE_TITLES)[];\n\nconst CIRCLE_SIZE = 5.25 * REM;\nconst CIRCLE_SEGMENTS = 8;\nconst CIRCLE_READ_SEGMENTS = 0;\n\nconst PremiumFeaturePreviewVideo = ({\n  currentUser,\n}: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const circleRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const dpr = useDevicePixelRatio();\n\n  useLayoutEffect(() => {\n    if (!circleRef.current) {\n      return;\n    }\n\n    drawGradientCircle({\n      canvas: circleRef.current,\n      size: CIRCLE_SIZE * dpr,\n      segmentsCount: CIRCLE_SEGMENTS,\n      color: 'purple',\n      readSegmentsCount: CIRCLE_READ_SEGMENTS,\n      readSegmentColor: 'transparent',\n      dpr,\n    });\n  }, [dpr]);\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const maxSize = CIRCLE_SIZE;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.header}>\n        <Avatar forPremiumPromo peer={currentUser} size=\"giant\" />\n        <canvas className={styles.circle} ref={circleRef} style={`max-width: ${maxSize}px; max-height: ${maxSize}px`} />\n      </div>\n      <div className={styles.title}>{lang('UpgradedStories')}</div>\n      <div\n        className={buildClassName(styles.features, !isAtBeginning && styles.scrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {STORY_FEATURE_ORDER.map((section, index) => {\n          return (\n            <PremiumFeatureItem\n              key={section}\n              title={lang(STORY_FEATURE_TITLES[section])}\n              text={lang(STORY_FEATURE_DESCRIPTIONS[section])}\n              icon={STORY_FEATURE_ICONS[section]}\n              isFontIcon\n              index={index}\n              count={STORY_FEATURE_ORDER.length}\n              section={section}\n            />\n          );\n        })}\n        <div className={styles.mobile}>{lang('lng_premium_stories_about_mobile')}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      currentUser: selectUser(global, global.currentUserId!)!,\n    };\n  },\n)(PremiumFeaturePreviewVideo));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ot0dA1yZ\",\"wrapper\":\"yxSAGAc1\",\"down\":\"Jcy6cDoc\",\"frame\":\"Vn81yTTJ\",\"video\":\"rrVJClLL\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransition(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} draggable={false} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oyUTEj8I\",\"button\":\"EPfM7AgT\",\"button-content\":\"GysZk2mF\",\"buttonContent\":\"GysZk2mF\",\"back-button\":\"njYoMrKM\",\"backButton\":\"njYoMrKM\",\"white-back-button\":\"SB4pczOo\",\"whiteBackButton\":\"SB4pczOo\",\"content\":\"sJubG84j\",\"frame\":\"a7IoUtQG\",\"slide\":\"gubS9KP1\",\"limits\":\"U7ePgVBR\",\"stories\":\"J1M6fEdo\",\"limits-content\":\"n_rowVPI\",\"limitsContent\":\"n_rowVPI\",\"header\":\"mz2Hmd83\",\"no-header-border\":\"AgmNOqi7\",\"noHeaderBorder\":\"AgmNOqi7\",\"preview\":\"dIVBSdWi\",\"title\":\"iZLwcL8v\",\"description\":\"A7YHY8qF\",\"footer\":\"yN2611rA\",\"no-footer-border\":\"rCHMABcD\",\"noFooterBorder\":\"rCHMABcD\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { toggleExtraClass } from '../../../lib/teact/teact-dom';\n\nimport type { ApiPremiumPromo, ApiPremiumSubscriptionOption } from '../../../api/types';\nimport type { ApiLimitTypeForPromo, ApiPremiumSection, GlobalState } from '../../../global/types';\n\nimport { PREMIUM_BOTTOM_VIDEOS, PREMIUM_FEATURE_SECTIONS, PREMIUM_LIMITS_ORDER } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport SliderDots from '../../common/SliderDots';\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\nimport PremiumFeaturePreviewStories from './previews/PremiumFeaturePreviewStories';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n  translations: 'PremiumPreviewTranslations',\n  stories: 'PremiumPreviewStories',\n  saved_tags: 'PremiumPreviewTags2',\n  last_seen: 'PremiumPreviewLastSeen',\n  message_privacy: 'PremiumPreviewMessagePrivacy',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n  translations: 'PremiumPreviewTranslationsDescription',\n  stories: 'PremiumPreviewStoriesDescription',\n  saved_tags: 'PremiumPreviewTagsDescription2',\n  last_seen: 'PremiumPreviewLastSeenDescription',\n  message_privacy: 'PremiumPreviewMessagePrivacyDescription',\n};\n\nconst LIMITS_TITLES: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n  recommendedChannels: 'SimilarChannelsLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n  recommendedChannels: 'SimilarChannelsLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  initialSection: ApiPremiumSection;\n  promo: ApiPremiumPromo;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumPromoOrder?: ApiPremiumSection[];\n  subscriptionOption?: ApiPremiumSubscriptionOption;\n  onBack: VoidFunction;\n  onClickSubscribe: (startParam?: string) => void;\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  isPremium,\n  limits,\n  premiumPromoOrder,\n  subscriptionOption,\n  onBack,\n  onClickSubscribe,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePrevious(initialSection);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  const subscriptionButtonText = useMemo(() => {\n    if (!subscriptionOption) return undefined;\n\n    const { amount, months, currency } = subscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n\n    return isPremium ? lang('OK') : lang('SubscribeToPremium', formatCurrency(perMonthPrice, currency, lang.code));\n  }, [isPremium, lang, subscriptionOption]);\n\n  const handleClick = useLastCallback(() => {\n    onClickSubscribe(initialSection);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const target = e.currentTarget;\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = target;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex}`);\n\n    requestMutation(() => {\n      target.style.setProperty('--scroll-progress', progress.toString());\n      target.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n\n      if (prevElement) toggleExtraClass(prevElement, 'reverse', false);\n      if (reverseElement) toggleExtraClass(reverseElement, 'reverse', true);\n    });\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = filteredSections.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, filteredSections, initialSection, prevInitialSection]);\n\n  const handleSelectSlide = useLastCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  });\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, currentSlideIndex !== 0 && styles.whiteBackButton)}\n        color={currentSlideIndex === 0 ? 'translucent' : 'translucent-white'}\n        onClick={onBack}\n        ariaLabel={lang('Back')}\n      >\n        <i className=\"icon icon-arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {filteredSections.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {lang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {PREMIUM_LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={lang(LIMITS_TITLES[limit])}\n                        description={lang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (PREMIUM_LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {lang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'stories') {\n            return (\n              <div className={buildClassName(styles.slide, styles.stories)}>\n                <PremiumFeaturePreviewStories />\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {lang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]!])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(lang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]!]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        {subscriptionButtonText && (\n          <Button\n            className={buildClassName(styles.button)}\n            isShiny={!isPremium}\n            withPremiumGradient={!isPremium}\n            onClick={isPremium ? onBack : handleClick}\n          >\n            {subscriptionButtonText}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiPremiumGiftCodeOption, ApiPremiumGiftOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\n\nimport useLang from '../../../hooks/useLang';\n\nimport styles from './PremiumSubscriptionOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumGiftOption | ApiPremiumGiftCodeOption;\n  isGiveaway?: boolean;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  className?: string;\n  onChange: (month: number) => void;\n};\n\nconst PremiumSubscriptionOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount,\n  onChange, className, isGiveaway,\n}) => {\n  const lang = useLang();\n\n  const {\n    months, amount, currency,\n  } = option;\n  const users = 'users' in option ? option.users : undefined;\n  const perMonth = Math.floor(amount / months);\n  const isUserCountPlural = users ? users > 1 : undefined;\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label\n      className={buildClassName(\n        isGiveaway ? styles.giveawayWrapper : styles.wrapper,\n        (checked && !isGiveaway) && styles.active,\n        className,\n      )}\n      dir={lang.isRtl ? 'rtl' : undefined}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"subscription_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>\n          {Boolean(discount) && (\n            <span\n              className={buildClassName(styles.giveawayDiscount, styles.discount)}\n              title={lang('GiftDiscount')}\n            > &minus;{discount}%\n            </span>\n          )}\n          {lang('Months', months)}\n        </div>\n        <div className={styles.perMonth}>\n          {(isGiveaway || isUserCountPlural) ? `${formatCurrency(amount, currency, lang.code)} x ${users!}`\n            : lang('PricePerMonth', formatCurrency(perMonth, currency, lang.code))}\n        </div>\n        <div className={styles.amount}>\n          {formatCurrency(amount, currency, lang.code)}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(PremiumSubscriptionOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"qZA6S2kc\",\"giveawayWrapper\":\"PkseWxFK\",\"active\":\"EJOQwnRj\",\"input\":\"WOEkhx6R\",\"content\":\"BHUCScsU\",\"month\":\"DfYCMUkL\",\"perMonth\":\"poxOXJ2o\",\"amount\":\"IGMrERf_\",\"discount\":\"uqDlP3Zt\",\"giveawayDiscount\":\"ublijP0j\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sfbpMFHM\",\"transition\":\"ELNkgPve\",\"button\":\"c1tMxuFH\",\"main\":\"ZpOIPrhp\",\"logo\":\"mlMezt6b\",\"status-emoji\":\"mQwvY9LA\",\"statusEmoji\":\"mQwvY9LA\",\"header-text\":\"y71v6ECL\",\"headerText\":\"y71v6ECL\",\"description\":\"cUcKXV3j\",\"list\":\"c3Ee2oSo\",\"no-button\":\"yWEHoJOL\",\"noButton\":\"yWEHoJOL\",\"header\":\"Bc_F0RKb\",\"hidden-header\":\"ltXo0Xi7\",\"hiddenHeader\":\"ltXo0Xi7\",\"close-button\":\"XyN3eWog\",\"closeButton\":\"XyN3eWog\",\"premium-header-text\":\"xysPdANX\",\"premiumHeaderText\":\"xysPdANX\",\"footer-text\":\"yKm9hKQP\",\"footerText\":\"yKm9hKQP\",\"primary-footer-text\":\"l1WlNpmu\",\"primaryFooterText\":\"l1WlNpmu\",\"footer\":\"nCnlO9UZ\",\"stickerSetText\":\"xw_GbDj7\",\"stickerSetLink\":\"FLzl2ng5\",\"stickerSetLinkIcon\":\"Y0jTcadE\",\"subscriptionOptions\":\"xZC_Oajr\",\"subscriptionOption\":\"gygsbDbE\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumPromo, ApiPremiumSubscriptionOption, ApiSticker, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ApiPremiumSection, GlobalState } from '../../../global/types';\n\nimport { PREMIUM_FEATURE_SECTIONS, TME_LINK_PREFIX } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectIsCurrentUserPremium, selectStickerSet,\n  selectTabState, selectUser,\n} from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './PremiumMainModal.module.scss';\n\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumLastSeen from '../../../assets/premium/PremiumLastSeen.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumMessagePrivacy from '../../../assets/premium/PremiumMessagePrivacy.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumTags from '../../../assets/premium/PremiumTags.svg';\nimport PremiumTranslate from '../../../assets/premium/PremiumTranslate.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\n\nconst LIMIT_ACCOUNTS = 4;\nconst STATUS_EMOJI_SIZE = 8 * REM;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<ApiPremiumSection, string> = {\n  stories: PremiumStatus,\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n  translations: PremiumTranslate,\n  saved_tags: PremiumTags,\n  last_seen: PremiumLastSeen,\n  message_privacy: PremiumMessagePrivacy,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  fromUser?: ApiUser;\n  fromUserStatusEmoji?: ApiSticker;\n  fromUserStatusSet?: ApiStickerSet;\n  toUser?: ApiUser;\n  initialSection?: ApiPremiumSection;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: ApiPremiumSection[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  fromUserStatusEmoji,\n  fromUserStatusSet,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink, loadStickers, openStickerSet,\n  } = getActions();\n\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<ApiPremiumSection | undefined>(initialSection);\n  const [selectedSubscriptionOption, setSubscriptionOption] = useState<ApiPremiumSubscriptionOption>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setCurrentSection(undefined);\n    }\n  }, [isOpen]);\n\n  const handleOpenSection = useLastCallback((section: ApiPremiumSection) => {\n    setCurrentSection(section);\n  });\n\n  const handleResetSection = useLastCallback(() => {\n    setCurrentSection(undefined);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClickWithStartParam = useLastCallback((startParam?: string) => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        type: 'slug',\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (selectedSubscriptionOption) {\n      handleClickWithStartParam(String(selectedSubscriptionOption.months));\n    } else {\n      handleClickWithStartParam();\n    }\n  });\n\n  const handleChangeSubscriptionOption = useLastCallback((months: number) => {\n    const foundOption = promo?.options.find((option) => option.months === months);\n    setSubscriptionOption(foundOption);\n  });\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  useEffect(() => {\n    if (!fromUserStatusEmoji || fromUserStatusSet) return;\n    loadStickers({\n      stickerSetInfo: fromUserStatusEmoji.stickerSetInfo,\n    });\n  }, [loadStickers, fromUserStatusEmoji, fromUserStatusSet]);\n\n  useEffect(() => {\n    const [defaultOption] = promo?.options ?? [];\n    setSubscriptionOption(defaultOption);\n  }, [promo]);\n\n  const handleOpenStatusSet = useLastCallback(() => {\n    if (!fromUserStatusSet) return;\n\n    openStickerSet({\n      stickerSetInfo: fromUserStatusSet,\n    });\n  });\n\n  const stickerSetTitle = useMemo(() => {\n    if (!fromUserStatusSet || !fromUser) return undefined;\n\n    const template = lang('lng_premium_emoji_status_title').replace('{user}', getUserFullName(fromUser)!);\n    const [first, second] = template.split('{link}');\n\n    const emoji = fromUserStatusSet.thumbCustomEmojiId ? (\n      <CustomEmoji className={styles.stickerSetLinkIcon} documentId={fromUserStatusSet.thumbCustomEmojiId} />\n    ) : undefined;\n    const link = (\n      <span className={styles.stickerSetLink} onClick={handleOpenStatusSet}>\n        {emoji}{renderText(fromUserStatusSet.title)}\n      </span>\n    );\n    return [renderText(first), link, renderText(second)];\n  }, [fromUser, fromUserStatusSet, lang]);\n\n  const fullMonthlyAmount = useMemo(() => {\n    const monthOption = promo?.options.find((option) => option.months === 1);\n    if (!monthOption) {\n      return undefined;\n    }\n    return Number(monthOption.amount);\n  }, [promo]);\n\n  const subscribeButtonText = useMemo(() => {\n    if (!selectedSubscriptionOption) {\n      return undefined;\n    }\n    const { amount, months, currency } = selectedSubscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n    return formatCurrency(\n      perMonthPrice,\n      currency,\n      lang.code,\n    );\n  }, [selectedSubscriptionOption, lang.code]);\n\n  if (!promo || (fromUserStatusEmoji && !fromUserStatusSet)) return undefined;\n\n  function getHeaderText() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n        : lang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]);\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n      : lang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium');\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : lang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    if (fromUserStatusSet) {\n      return lang('TelegramPremiumUserStatusDialogSubtitle');\n    }\n\n    return fromUser\n      ? lang('TelegramPremiumUserDialogSubtitle')\n      : lang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.subscriptionOptions}>\n        {promo?.options\n          .map((option) => (\n            <PremiumSubscriptionOption\n              className={styles.subscriptionOption}\n              key={option.amount}\n              option={option}\n              onChange={handleChangeSubscriptionOption}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={selectedSubscriptionOption?.months === option.months}\n            />\n          ))}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={closePremiumModal}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => closePremiumModal()}\n              ariaLabel={lang('Close')}\n            >\n              <i className=\"icon icon-close\" />\n            </Button>\n            {fromUserStatusEmoji ? (\n              <CustomEmoji\n                className={styles.statusEmoji}\n                onClick={handleOpenStatusSet}\n                documentId={fromUserStatusEmoji.id}\n                isBig\n                size={STATUS_EMOJI_SIZE}\n              />\n            ) : (\n              <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n            )}\n            <h2 className={buildClassName(styles.headerText, fromUserStatusSet && styles.stickerSetText)}>\n              {fromUserStatusSet ? stickerSetTitle : renderText(getHeaderText(), ['simple_markdown', 'emoji'])}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            {!isPremium && !isGift && renderSubscriptionOptions()}\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {lang('TelegramPremium')}\n              </h2>\n            </div>\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={lang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? lang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : lang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    count={filteredSections.length}\n                    section={section}\n                    onClick={handleOpenSection}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(lang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(lang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && selectedSubscriptionOption && (\n              <div className={styles.footer}>\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {lang('SubscribeToPremium', subscribeButtonText)}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleResetSection}\n            promo={promo}\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n            premiumPromoOrder={premiumPromoOrder}\n            subscriptionOption={selectedSubscriptionOption}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n\n  const fromUser = premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined;\n  const fromUserStatusEmoji = fromUser?.emojiStatus ? global.customEmojis.byId[fromUser.emojiStatus.documentId]\n    : undefined;\n  const fromUserStatusSet = fromUserStatusEmoji ? selectStickerSet(global, fromUserStatusEmoji.stickerSetInfo)\n    : undefined;\n\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser,\n    fromUserStatusEmoji,\n    fromUserStatusSet,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalDialog\":\"PMXzSiTT\",\"closeButton\":\"j3gx2vFZ\",\"avatars\":\"yIKcy5ir\",\"center\":\"EIXAUV27\",\"description\":\"TJy4zGvM\",\"premiumFeatures\":\"JqQfM_r9\",\"options\":\"eXU0NjiF\",\"boostIcon\":\"ZsR31o4m\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumGiftCodeOption,\n} from '../../../api/types';\n\nimport { BOOST_PER_SENT_GIFT } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/Icon';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport Modal from '../../ui/Modal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './GiftPremiumModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  isCompleted?: boolean;\n  gifts?: ApiPremiumGiftCodeOption[] | undefined;\n  forUserIds?: string[];\n  boostPerSentGift?: number;\n};\n\nconst GiftPremiumModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isCompleted,\n  gifts,\n  boostPerSentGift = BOOST_PER_SENT_GIFT,\n  forUserIds,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n\n  const {\n    openPremiumModal, closeGiftPremiumModal, openInvoice, requestConfetti,\n  } = getActions();\n\n  const lang = useLang();\n  const [selectedMonthOption, setSelectedMonthOption] = useState<number | undefined>();\n\n  const selectedUserQuantity = forUserIds && forUserIds.length * boostPerSentGift;\n\n  useEffect(() => {\n    if (forUserIds?.length) {\n      setSelectedMonthOption(gifts?.[0].months);\n    }\n  }, [gifts, forUserIds]);\n\n  const giftingUserList = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    return forUserIds?.map((userId) => usersById[userId]).filter(Boolean);\n  }, [forUserIds]);\n\n  const selectedGift = useMemo(() => {\n    return gifts?.find((gift) => gift.months === selectedMonthOption && gift.users === forUserIds?.length);\n  }, [gifts, selectedMonthOption, forUserIds?.length]);\n\n  const filteredGifts = useMemo(() => {\n    return gifts?.filter((gift) => gift.users\n      === forUserIds?.length);\n  }, [gifts, forUserIds?.length]);\n\n  const fullMonthlyGiftAmount = useMemo(() => {\n    if (!filteredGifts?.length) {\n      return undefined;\n    }\n\n    const basicGift = filteredGifts.reduce((acc, gift) => {\n      return gift.amount < acc.amount ? gift : acc;\n    });\n\n    return Math.floor(basicGift.amount / basicGift.months);\n  }, [filteredGifts]);\n\n  const handleSubmit = useLastCallback(() => {\n    if (!selectedGift) {\n      return;\n    }\n\n    openInvoice({\n      type: 'giftcode',\n      userIds: forUserIds!,\n      currency: selectedGift!.currency,\n      amount: selectedGift!.amount,\n      option: selectedGift!,\n    });\n  });\n\n  const handlePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (isCompleted) {\n      showConfetti();\n    }\n  }, [isCompleted, showConfetti]);\n\n  const userNameList = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    return forUserIds?.map((userId) => getUserFullName(usersById[userId])).join(', ');\n  }, [forUserIds]);\n\n  function renderGiftTitle() {\n    if (isCompleted) {\n      return renderText(lang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle',\n        [userNameList, selectedGift?.months]), ['simple_markdown']);\n    }\n\n    return lang('GiftTelegramPremiumTitle');\n  }\n\n  function renderGiftText() {\n    if (isCompleted) {\n      return renderText(lang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', userNameList),\n        ['simple_markdown']);\n    }\n    return renderText(lang('GiftPremiumUsersGiveAccessManyZero', userNameList), ['simple_markdown']);\n  }\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    // Translation hack for rendering component inside string\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={buildClassName(styles.premiumFeatures, styles.center)}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  function renderBoostsPluralText() {\n    const giftParts = renderText(lang('GiftPremiumWillReceiveBoostsPlural', selectedUserQuantity), ['simple_markdown']);\n    return giftParts.map((part) => {\n      if (typeof part === 'string') {\n        return part.split(/(⚡)/g).map((subpart) => {\n          if (subpart === '⚡') {\n            return <Icon name=\"boost\" className={styles.boostIcon} />;\n          }\n          return subpart;\n        });\n      }\n      return part;\n    });\n  }\n\n  function renderSubscriptionGiftOptions() {\n    return (\n      <div className={styles.subscriptionOptions}>\n        {filteredGifts?.map((gift) => {\n          return (\n            <PremiumSubscriptionOption\n              className={styles.subscriptionOption}\n              key={gift.months}\n              option={gift}\n              fullMonthlyAmount={fullMonthlyGiftAmount}\n              checked={gift.months === selectedMonthOption}\n              onChange={setSelectedMonthOption}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      dialogRef={dialogRef}\n      onClose={closeGiftPremiumModal}\n      isOpen={isOpen}\n      className={styles.modalDialog}\n    >\n      <div className=\"custom-scroll\">\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closeGiftPremiumModal()}\n          ariaLabel={lang('Close')}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className={styles.avatars}>\n          <AvatarList\n            size=\"large\"\n            peers={giftingUserList}\n          />\n        </div>\n        <h2 className={buildClassName(styles.headerText, styles.center)}>\n          {renderGiftTitle()}\n        </h2>\n        <p className={buildClassName(styles.description, styles.center)}>\n          {renderGiftText()}\n        </p>\n        {!isCompleted && (\n          <>\n            <p className={styles.description}>\n              {renderText(renderBoostsPluralText(), ['simple_markdown', 'emoji'])}\n            </p>\n\n            <div className={styles.options}>\n              {renderSubscriptionGiftOptions()}\n            </div>\n          </>\n        )}\n        {renderPremiumFeaturesLink()}\n      </div>\n\n      {!isCompleted && (\n        <Button withPremiumGradient className={styles.button} isShiny disabled={!selectedGift} onClick={handleSubmit}>\n          {lang(\n            'GiftSubscriptionFor', selectedGift\n            && formatCurrency(selectedGift!.amount, selectedGift.currency, lang.code),\n          )}\n        </Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    gifts, forUserIds, isCompleted,\n  } = selectTabState(global).giftPremiumModal || {};\n\n  return {\n    isCompleted,\n    gifts,\n    boostPerSentGift: global.appConfig?.boostsPerSentGift,\n    forUserIds,\n  };\n})(GiftPremiumModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wzzA3MFh\",\"pickerSelector\":\"xhujrq9i\",\"pickerTitle\":\"YuRK4e7S\",\"picker\":\"YF9nLkCK\",\"footer\":\"ATCZ2Q5G\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './Icon';\nimport Picker from './Picker';\n\nimport styles from './CountryPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (value: string[]) => void;\n  countryList: ApiCountry[];\n  selectionLimit?: number | undefined;\n};\n\nconst CountryPickerModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onSubmit,\n  countryList,\n  selectionLimit,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useLang();\n\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[]>([]);\n  const prevSelectedCountryIds = usePrevious(selectedCountryIds);\n  const noPickerScrollRestore = prevSelectedCountryIds === selectedCountryIds;\n\n  const displayedIds = useMemo(() => {\n    if (!countryList) {\n      return [];\n    }\n\n    return countryList\n      .filter((country) => !country.isHidden)\n      .map((country) => country.iso2);\n  }, [countryList]);\n\n  const handleSelectedIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (selectionLimit && newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningCountries', selectionLimit),\n      });\n      return;\n    }\n    setSelectedCountryIds(newSelectedIds);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    onSubmit(selectedCountryIds);\n    onClose();\n  });\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleSubmit}\n    >\n      <div className={styles.container}>\n        <div className={styles.pickerSelector}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4 className={styles.pickerTitle}>\n            {lang('BoostingSelectCountry')}\n          </h4>\n        </div>\n      </div>\n\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <Picker\n          className={styles.picker}\n          itemIds={displayedIds}\n          selectedIds={selectedCountryIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          noScrollRestore={noPickerScrollRestore}\n          isCountryList\n          countryList={countryList}\n        />\n      </div>\n\n      <div className={styles.footer}>\n        <Button\n          size=\"smaller\"\n          onClick={handleSubmit}\n        >\n          {lang('SelectCountries.OK')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(CountryPickerModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"fAO_fMJD\",\"main\":\"vtyWYWNc\",\"filter\":\"OM3FgjkD\",\"title\":\"d3EvpDij\",\"buttons\":\"w2D1Ddo7\",\"picker\":\"dWDj6lW6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUserStatus } from '../../api/types';\n\nimport {\n  filterChatsByName,\n  filterUsersByName, isChatChannel, isChatPublic, isChatSuperGroup, isUserBot, sortUserIds,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Icon from '../common/Icon';\nimport Picker from '../common/Picker';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Modal from '../ui/Modal';\n\nimport styles from './AppendEntityPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n  chatId?: string;\n  entityType: 'members' | 'channels' | undefined;\n  onSubmit: (value: string[]) => void;\n  selectionLimit: number;\n};\n\ninterface StateProps {\n  chatId?: string;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  channelList?: (ApiChat | undefined)[] | undefined;\n  isChannel?: boolean;\n  isSuperGroup?: boolean;\n  currentUserId?: string | undefined;\n}\n\nconst AppendEntityPickerModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  isOpen,\n  onClose,\n  members,\n  adminMembersById,\n  userStatusesById,\n  entityType,\n  isChannel,\n  isSuperGroup,\n  onSubmit,\n  currentUserId,\n  selectionLimit,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useLang();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n\n  const [selectedIds, setSelectedIds] = useState<string[]>([]);\n  const [pendingChannelId, setPendingChannelId] = useState<string | undefined>(undefined);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const channelsIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    const activeChatIds = getGlobal().chats.listIds.active;\n\n    return activeChatIds!.map((id) => chatsById[id])\n      .filter((chat) => chat && (isChatChannel(chat)\n        || isChatSuperGroup(chat)) && chat.id !== chatId)\n      .map((chat) => chat!.id);\n  }, [chatId]);\n\n  const adminIds = useMemo(() => {\n    return adminMembersById && Object.keys(adminMembersById);\n  }, [adminMembersById]);\n\n  const memberIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return adminIds ? userIds.filter((userId) => userId !== currentUserId) : userIds;\n  }, [adminIds, currentUserId, members, userStatusesById]);\n\n  const displayedMembersIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = memberIds ? filterUsersByName(memberIds, usersById, searchQuery) : [];\n\n    return sortChatIds(unique(filteredContactIds).filter((userId) => {\n      const user = usersById[userId];\n      if (!user) {\n        return true;\n      }\n\n      return !isUserBot(user);\n    }));\n  }, [memberIds, searchQuery]);\n\n  const displayedChannelIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    const foundChannelIds = channelsIds ? filterChatsByName(lang, channelsIds, chatsById, searchQuery) : [];\n\n    return sortChatIds(unique(foundChannelIds).filter((contactId) => {\n      const chat = chatsById[contactId];\n      if (!chat) {\n        return true;\n      }\n\n      return isChannel || isSuperGroup;\n    }),\n    false,\n    selectedIds);\n  }, [channelsIds, lang, searchQuery, selectedIds, isSuperGroup, isChannel]);\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    onSubmit([]);\n    onClose();\n  });\n\n  const handleSendIdList = useLastCallback(() => {\n    onSubmit(selectedIds);\n    onClose();\n  });\n\n  const confirmPrivateLinkChannelSelection = useLastCallback(() => {\n    if (pendingChannelId) {\n      setSelectedIds((prevIds) => unique([...prevIds, pendingChannelId]));\n    }\n    closeConfirmModal();\n  });\n\n  const handleSelectedMemberIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningUsers', selectionLimit),\n      });\n      return;\n    }\n    setSelectedIds(newSelectedIds);\n  });\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    const chatsById = getGlobal().chats.byId;\n    const newlyAddedIds = newSelectedIds.filter((id) => !selectedIds.includes(id));\n    const privateLinkChannelId = newlyAddedIds.find((id) => {\n      const chat = chatsById[id];\n      return chat && !isChatPublic(chat);\n    });\n\n    if (selectedIds?.length >= selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningChannelsPlural', selectionLimit),\n      });\n      return;\n    }\n\n    if (privateLinkChannelId) {\n      setPendingChannelId(privateLinkChannelId);\n      openConfirmModal();\n    } else {\n      setSelectedIds(newSelectedIds);\n    }\n  });\n\n  const handleClose = useLastCallback(() => {\n    onSubmit([]);\n    onClose();\n  });\n\n  function renderSearchField() {\n    return (\n      <div className={styles.filter} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleCloseButtonClick}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <h3 className={styles.title}>{lang(entityType === 'channels'\n          ? 'RequestPeer.ChooseChannelTitle' : 'BoostingAwardSpecificUsers')}\n        </h3>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onEnter={handleSendIdList}\n    >\n      <div className={styles.main}>\n        {renderSearchField()}\n        <div className={buildClassName(styles.main, 'custom-scroll')}>\n          <Picker\n            className={styles.picker}\n            itemIds={entityType === 'members' ? displayedMembersIds : displayedChannelIds}\n            selectedIds={selectedIds}\n            filterValue={searchQuery}\n            filterPlaceholder={lang('Search')}\n            searchInputId={`${entityType}-picker-search`}\n            onSelectedIdsChange={entityType === 'channels'\n              ? handleSelectedChannelIdsChange : handleSelectedMemberIdsChange}\n            onFilterChange={setSearchQuery}\n            isSearchable\n          />\n        </div>\n        <div className={styles.buttons}>\n          <Button size=\"smaller\" onClick={handleSendIdList}>\n            {lang('Save')}\n          </Button>\n        </div>\n      </div>\n      <ConfirmDialog\n        title={lang('BoostingGiveawayPrivateChannel')}\n        text={lang('BoostingGiveawayPrivateChannelWarning')}\n        confirmLabel={lang('Add')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmPrivateLinkChannelSelection}\n      />\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { chatId, entityType }): StateProps => {\n  const { statusesById: userStatusesById } = global.users;\n  let isChannel;\n  let isSuperGroup;\n  let members: ApiChatMember[] | undefined;\n  let adminMembersById: Record<string, ApiChatMember> | undefined;\n  let currentUserId: string | undefined;\n\n  if (entityType === 'members') {\n    currentUserId = global.currentUserId;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    if (chatFullInfo) {\n      members = chatFullInfo.members;\n      adminMembersById = chatFullInfo.adminMembersById;\n    }\n  } if (entityType === 'channels') {\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    if (chat) {\n      isChannel = isChatChannel(chat);\n      isSuperGroup = isChatSuperGroup(chat);\n    }\n  }\n\n  return {\n    chatId,\n    members,\n    adminMembersById,\n    userStatusesById,\n    isChannel,\n    isSuperGroup,\n    currentUserId,\n  };\n})(AppendEntityPickerModal));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/Icon';\n\nimport styles from './GiveawayTypeOption.module.scss';\n\ntype ApiGiveawayType = 'random_users' | 'specific_users';\n\ntype OwnProps = {\n  option: ApiGiveawayType;\n  name: string;\n  text: string;\n  img: string;\n  checked?: boolean;\n  isLink: boolean;\n  className?: string;\n  onChange: (value: ApiGiveawayType) => void;\n  onClickAction?: () => void;\n  userNames?: string;\n  selectedMemberIds?: string[];\n};\n\nconst GiveawayTypeOption: FC<OwnProps> = ({\n  option, checked,\n  name, text, img,\n  isLink, onChange, onClickAction, className,\n  userNames, selectedMemberIds,\n}) => {\n  const lang = useLang();\n\n  let displayText: string | undefined = lang(text);\n  if (isLink && selectedMemberIds?.length) {\n    displayText = selectedMemberIds.length > 2 ? `${selectedMemberIds.length}` : userNames;\n  }\n\n  const handleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(option);\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    onClickAction?.();\n  });\n\n  return (\n    <label\n      className={buildClassName(styles.wrapper, className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"giveaway_option\"\n        value={option}\n        checked={checked}\n        onChange={handleChange}\n        onClick={(e) => e.stopPropagation()}\n      />\n      <div className={styles.content}>\n        <img className={styles.optionImg} src={img} alt=\"\" draggable={false} />\n        <div className={styles.giveaway}>\n          <h3 className={styles.title}>\n            {lang(`${name}`)}\n          </h3>\n          {isLink ? (\n            <div className={styles.link}>\n              <span>{displayText}</span>\n              <Icon name=\"next\" />\n            </div>\n          ) : (\n            <span className={styles.contentText}>{displayText}</span>\n          )}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiveawayTypeOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"w3OGYFKn\",\"input\":\"xy4AclZa\",\"content\":\"TTgSI7Xh\",\"notChecked\":\"JDcXsByU\",\"giveaway\":\"sEt7TF59\",\"title\":\"u4NzVBBi\",\"link\":\"y7XfPOoG\",\"optionImg\":\"lGhZJbMF\",\"contentText\":\"kt2ZKZ6j\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"P0kLOw15\",\"button\":\"ILuhBsJG\",\"main\":\"SqiN63Ef\",\"logo\":\"Me2hCsMs\",\"header-text\":\"UVDnB0Wq\",\"headerText\":\"UVDnB0Wq\",\"description\":\"v5yGzV6v\",\"header\":\"U6XNIToQ\",\"hidden-header\":\"tDZc21ZC\",\"hiddenHeader\":\"tDZc21ZC\",\"close-button\":\"OX6_HqAd\",\"closeButton\":\"OX6_HqAd\",\"premium-header-text\":\"v6hiGpEn\",\"premiumHeaderText\":\"v6hiGpEn\",\"primary-footer-text\":\"YGbiSd3e\",\"primaryFooterText\":\"YGbiSd3e\",\"section\":\"rZRDMqUL\",\"types\":\"sQ5PkKEs\",\"footer\":\"hD_AEzjd\",\"options\":\"JjDLNrKG\",\"giveawayTitle\":\"p5Hn4Q6E\",\"subscription\":\"rniPcuiP\",\"subscriptionOption\":\"ggZrgZnv\",\"status\":\"q1y2qUTn\",\"info\":\"IsT38nlq\",\"titleInfo\":\"nmsfBLut\",\"month\":\"TsGuei3B\",\"quantity\":\"G9H3tm6D\",\"floatingBadge\":\"xKl2UeV8\",\"floatingBadgeColor\":\"HLx3wTBD\",\"floatingBadgeButtonColor\":\"JLH0MExt\",\"floatingBadgeIcon\":\"Ftr7zf2v\",\"floatingBadgeValue\":\"Ce0Ob2tg\",\"subscriptionFooter\":\"rDFQAfTt\",\"premiumFeatures\":\"eNQ_nrKr\",\"dateButton\":\"GeKqKRgP\",\"title\":\"LZ3vPzak\",\"checkboxSection\":\"Z9QJQ6IS\",\"prizesSection\":\"eQVP0Nx8\",\"prizesInput\":\"qMYNwiUZ\",\"subLabelClassName\":\"txXJxVFu\",\"prepaidImg\":\"ldn4mh2T\",\"addButton\":\"sOXvh85b\",\"addChannel\":\"aGbyR60s\",\"transition\":\"vEI2Wewt\"};","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiCountry, ApiPremiumGiftCodeOption, ApiPrepaidGiveaway, ApiUser,\n} from '../../../api/types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n  GIVEAWAY_MAX_ADDITIONAL_CHANNELS,\n  GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  GIVEAWAY_MAX_ADDITIONAL_USERS,\n} from '../../../config';\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/date/dateFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport CountryPickerModal from '../../common/CountryPickerModal';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSliderWithMarks from '../../ui/RangeSliderWithMarks';\nimport Switcher from '../../ui/Switcher';\nimport AppendEntityPickerModal from '../AppendEntityPickerModal';\nimport GiveawayTypeOption from './GiveawayTypeOption';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './GiveawayModal.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiveawayUsersRound from '../../../assets/premium/GiveawayUsersRound.svg';\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  userIds?: string[];\n};\n\ntype StateProps = {\n  chatId?: string;\n  gifts?: ApiPremiumGiftCodeOption[];\n  isOpen?: boolean;\n  fromUser?: ApiUser;\n  selectedMemberList?: string[] | undefined;\n  selectedChannelList?: string[] | undefined;\n  giveawayBoostPerPremiumLimit?: number;\n  userSelectionLimit?: number;\n  countryList: ApiCountry[];\n  prepaidGiveaway?: ApiPrepaidGiveaway;\n  countrySelectionLimit: number | undefined;\n  isChannel?: boolean;\n};\n\ntype GiveawayAction = 'createRandomlyUsers' | 'createSpecificUsers';\ntype ApiGiveawayType = 'random_users' | 'specific_users';\ntype SubscribersType = 'all' | 'new';\n\ninterface TypeOption {\n  name: string;\n  text: string;\n  value: ApiGiveawayType;\n  img: string;\n  actions?: GiveawayAction;\n  isLink: boolean;\n  onClickAction?: () => void;\n}\n\nconst DEFAULT_CUSTOM_EXPIRE_DATE = 86400 * 3 * 1000; // 3 days\nconst MAX_ADDITIONAL_CHANNELS = 9;\nconst DEFAULT_BOOST_COUNT = 5;\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst GiveawayModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  gifts,\n  isOpen,\n  isChannel,\n  selectedMemberList,\n  selectedChannelList,\n  giveawayBoostPerPremiumLimit = GIVEAWAY_BOOST_PER_PREMIUM,\n  countryList,\n  prepaidGiveaway,\n  countrySelectionLimit = GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  userSelectionLimit = GIVEAWAY_MAX_ADDITIONAL_USERS,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const dialogRef = useRef<HTMLDivElement>(null);\n  const {\n    closeGiveawayModal, openInvoice, openPremiumModal,\n    launchPrepaidGiveaway,\n  } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isCountryPickerModalOpen, openCountryPickerModal, closeCountryPickerModal] = useFlag();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [isEntityPickerModalOpen, openEntityPickerModal, closeEntityPickerModal] = useFlag();\n  const [entityType, setEntityType] = useState<'members' | 'channels' | undefined>(undefined);\n\n  const TYPE_OPTIONS: TypeOption[] = [{\n    name: 'BoostingCreateGiveaway',\n    text: 'BoostingWinnersRandomly',\n    value: 'random_users',\n    img: GiftBlueRound,\n    actions: 'createRandomlyUsers',\n    isLink: false,\n  }, {\n    name: 'BoostingAwardSpecificUsers',\n    text: 'BoostingSelectRecipients',\n    value: 'specific_users',\n    img: GiveawayUsersRound,\n    actions: 'createSpecificUsers',\n    isLink: true,\n    onClickAction: () => {\n      openEntityPickerModal();\n      setEntityType('members');\n    },\n  }];\n\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedUserCount, setSelectedUserCount] = useState<number>(DEFAULT_BOOST_COUNT);\n  const [selectedGiveawayOption, setGiveawayOption] = useState<ApiGiveawayType>(TYPE_OPTIONS[0].value);\n  const [selectedSubscriberOption, setSelectedSubscriberOption] = useState<SubscribersType>('all');\n  const [selectedMonthOption, setSelectedMonthOption] = useState<number | undefined>();\n  const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);\n  const [selectedChannelIds, setSelectedChannelIds] = useState<string[]>([]);\n  const [selectedCountriesIds, setSelectedCountriesIds] = useState<string[] | undefined>([]);\n  const [shouldShowWinners, setShouldShowWinners] = useState<boolean>(false);\n  const [shouldShowPrizes, setShouldShowPrizes] = useState<boolean>(false);\n  const [prizeDescription, setPrizeDescription] = useState<string | undefined>(undefined);\n  const [dataPrepaidGiveaway, setDataPrepaidGiveaway] = useState<ApiPrepaidGiveaway | undefined>(undefined);\n  const boostQuantity = selectedUserCount * giveawayBoostPerPremiumLimit;\n  const isRandomUsers = selectedGiveawayOption === 'random_users';\n\n  const SUBSCRIBER_OPTIONS = useMemo(() => [\n    {\n      value: 'all',\n      label: lang(isChannel ? 'BoostingAllSubscribers' : 'BoostingAllMembers'),\n      subLabel: selectedCountriesIds && selectedCountriesIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountriesIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n    {\n      value: 'new',\n      label: lang(isChannel ? 'BoostingNewSubscribers' : 'BoostingNewMembers'),\n      subLabel: selectedCountriesIds && selectedCountriesIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountriesIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n  ], [isChannel, lang, selectedCountriesIds]);\n\n  const monthQuantity = lang('Months', selectedMonthOption);\n\n  const selectedGift = useMemo(() => {\n    return gifts!.find((gift) => gift.months === selectedMonthOption && gift.users === selectedUserCount);\n  }, [gifts, selectedMonthOption, selectedUserCount]);\n\n  const filteredGifts = useMemo(() => {\n    return gifts?.filter((gift) => gift.users\n      === (selectedUserIds?.length ? selectedUserIds?.length : selectedUserCount));\n  }, [gifts, selectedUserIds, selectedUserCount]);\n\n  const fullMonthlyAmount = useMemo(() => {\n    if (!filteredGifts?.length) {\n      return undefined;\n    }\n\n    const basicGift = filteredGifts.reduce((acc, gift) => {\n      return gift.amount < acc.amount ? gift : acc;\n    });\n\n    return Math.floor(basicGift.amount / basicGift.months);\n  }, [filteredGifts]);\n\n  const userCountOptions = useMemo(() => {\n    const uniqueUserCounts = new Set(gifts?.map((gift) => gift.users));\n    return Array.from(uniqueUserCounts).sort((a, b) => a - b);\n  }, [gifts]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setSelectedMonthOption(prepaidGiveaway ? prepaidGiveaway.months : gifts?.[0].months);\n    }\n  }, [gifts, isOpen, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (prepaidGiveaway) {\n      setSelectedUserCount(prepaidGiveaway.quantity);\n      setDataPrepaidGiveaway(prepaidGiveaway);\n    }\n  }, [prepaidGiveaway]);\n\n  useEffect(() => {\n    if (selectedMemberList) {\n      setSelectedUserIds(selectedMemberList);\n    }\n  }, [selectedMemberList]);\n\n  useEffect(() => {\n    if (selectedChannelList) {\n      setSelectedChannelIds(selectedChannelList);\n    }\n  }, [selectedChannelList]);\n\n  const handlePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (selectedUserIds?.length) {\n      openInvoice({\n        type: 'giftcode',\n        boostChannelId: chatId!,\n        userIds: selectedUserIds,\n        currency: selectedGift!.currency,\n        amount: selectedGift!.amount,\n        option: selectedGift!,\n      });\n    } else {\n      openInvoice({\n        type: 'giveaway',\n        chatId: chatId!,\n        additionalChannelIds: selectedChannelIds,\n        isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n        countries: selectedCountriesIds,\n        areWinnersVisible: shouldShowWinners,\n        prizeDescription,\n        untilDate: customExpireDate / 1000,\n        currency: selectedGift!.currency,\n        amount: selectedGift!.amount,\n        option: selectedGift!,\n      });\n    }\n\n    closeGiveawayModal();\n  });\n\n  const confirmLaunchPrepaidGiveaway = useLastCallback(() => {\n    launchPrepaidGiveaway({\n      chatId: chatId!,\n      giveawayId: dataPrepaidGiveaway!.id,\n      paymentPurpose: {\n        additionalChannelIds: selectedChannelIds,\n        countries: selectedCountriesIds,\n        prizeDescription,\n        areWinnersVisible: shouldShowWinners,\n        untilDate: customExpireDate / 1000,\n        currency: selectedGift!.currency,\n        amount: selectedGift!.amount,\n      },\n    });\n\n    closeConfirmModal();\n    closeGiveawayModal();\n  });\n\n  const handleUserCountChange = useLastCallback((newValue) => {\n    setSelectedUserCount(newValue);\n  });\n\n  const handlePrizeDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setPrizeDescription(e.target.value);\n  });\n\n  const userNames = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    return selectedUserIds?.map((userId) => getUserFullName(usersById[userId])).join(', ');\n  }, [selectedUserIds]);\n\n  const handleAdd = useLastCallback(() => {\n    openEntityPickerModal();\n    setEntityType('channels');\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleChangeSubscriberOption = useLastCallback((value) => {\n    setSelectedSubscriberOption(value);\n  });\n\n  const handleChangeTypeOption = useLastCallback((value: ApiGiveawayType) => {\n    setGiveawayOption(value);\n    setSelectedUserIds([]);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleSetCountriesListChange = useLastCallback((value: string[]) => {\n    setSelectedCountriesIds(value);\n  });\n\n  const handleSetIdsListChange = useLastCallback((value: string[]) => {\n    return entityType === 'members'\n      ? (value?.length ? setSelectedUserIds(value) : setGiveawayOption('random_users'))\n      : setSelectedChannelIds(value);\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeGiveawayModal();\n  });\n\n  const handleShouldShowWinnersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowWinners(e.target.checked);\n  });\n\n  const handleShouldShowPrizesChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowPrizes(e.target.checked);\n  });\n\n  const onClickActionHandler = useLastCallback(() => {\n    openCountryPickerModal();\n  });\n\n  if (!gifts) return undefined;\n\n  function renderTypeOptions() {\n    return (\n      <div className={styles.options}>\n        {TYPE_OPTIONS.map((option) => {\n          return (\n            <GiveawayTypeOption\n              key={option.name}\n              name={option.name}\n              text={option.text}\n              option={option.value}\n              img={option.img}\n              onChange={handleChangeTypeOption}\n              checked={selectedGiveawayOption === option.value}\n              isLink={option.isLink}\n              userNames={userNames}\n              selectedMemberIds={selectedUserIds}\n              onClickAction={option.onClickAction}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscribersOptions() {\n    return (\n      <div className={styles.options}>\n        <RadioGroup\n          name=\"subscribers\"\n          options={SUBSCRIBER_OPTIONS}\n          selected={selectedSubscriberOption}\n          onChange={handleChangeSubscriberOption}\n          onClickAction={onClickActionHandler}\n          subLabelClassName={styles.subLabelClassName}\n          isLink\n        />\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.options}>\n        {filteredGifts?.map((gift) => (\n          <PremiumSubscriptionOption\n            isGiveaway\n            key={gift.months}\n            option={gift}\n            fullMonthlyAmount={fullMonthlyAmount!}\n            checked={gift.months === selectedMonthOption}\n            onChange={setSelectedMonthOption}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  function deleteParticipantsHandler(id: string) {\n    const filteredChannelIds = selectedChannelIds.filter((channelId) => channelId !== id);\n    setSelectedChannelIds(filteredChannelIds);\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={handleClose}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n    >\n      <div className={styles.main} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          onClick={handleClose}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n        <h2 className={styles.headerText}>\n          {renderText(lang('BoostingBoostsViaGifts'))}\n        </h2>\n        <div className={styles.description}>\n          {renderText(lang(isChannel ? 'BoostingGetMoreBoost' : 'BoostingGetMoreBoostsGroup'))}\n        </div>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.premiumHeaderText}>\n            {lang('BoostingBoostsViaGifts')}\n          </h2>\n        </div>\n        {dataPrepaidGiveaway ? (\n          <div className={styles.status}>\n            <div>\n              <img className={styles.prepaidImg} src={GIVEAWAY_IMG_LIST[dataPrepaidGiveaway.months]} alt=\"\" />\n            </div>\n            <div className={styles.info}>\n              <h3 className={styles.title}>\n                {lang('BoostingTelegramPremiumCountPlural', dataPrepaidGiveaway.quantity)}\n              </h3>\n              <p className={styles.month}>{lang('PrepaidGiveawayMonths', dataPrepaidGiveaway.months)}</p>\n            </div>\n            <div className={styles.quantity}>\n              <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {dataPrepaidGiveaway.quantity * (giveawayBoostPerPremiumLimit ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className={buildClassName(styles.section, styles.types)}>\n            {renderTypeOptions()}\n          </div>\n        )}\n\n        {isRandomUsers && (\n          <>\n            {!dataPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingQuantityPrizes')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedUserCount}\n                    marks={userCountOptions}\n                    onChange={handleUserCountChange}\n                  />\n                </div>\n\n                <div className={styles.subscription}>\n                  {renderText(lang('BoostingChooseHowMany'))}\n                </div>\n              </>\n            )}\n\n            <div className={styles.section}>\n              <h2 className={styles.giveawayTitle}>\n                {lang('BoostingChannelsIncludedGiveaway')}\n              </h2>\n\n              <ListItem\n                inactive\n                className=\"chat-item-clickable contact-list-item\"\n              >\n                <GroupChatInfo\n                  chatId={chatId!}\n                  status={lang(isChannel ? 'BoostingChannelWillReceiveBoost'\n                    : 'BoostingGroupWillReceiveBoost', boostQuantity, 'i')}\n                />\n              </ListItem>\n\n              {selectedChannelIds?.map((channelId) => {\n                return (\n                  <ListItem\n                    ripple\n                    key={channelId}\n                    className=\"chat-item-clickable contact-list-item\"\n                    /* eslint-disable-next-line react/jsx-no-bind */\n                    onClick={() => deleteParticipantsHandler(channelId)}\n                    rightElement={(<Icon name=\"close\" />)}\n                  >\n                    <GroupChatInfo\n                      chatId={channelId.toString()}\n                    />\n                  </ListItem>\n                );\n              })}\n\n              {selectedChannelIds.length < MAX_ADDITIONAL_CHANNELS && (\n                <ListItem\n                  icon=\"add\"\n                  ripple\n                  onClick={handleAdd}\n                  className={styles.addButton}\n                  iconClassName={styles.addChannel}\n                >\n                  {lang('BoostingAddChannelOrGroup')}\n                </ListItem>\n              )}\n            </div>\n\n            <div className={styles.section}>\n              <h2 className={styles.giveawayTitle}>\n                {lang('BoostingEligibleUsers')}\n              </h2>\n\n              {renderSubscribersOptions()}\n            </div>\n\n            <div className={styles.subscription}>\n              {renderText(lang(isChannel ? 'BoostGift.LimitSubscribersInfo' : 'lng_giveaway_users_about_group'))}\n            </div>\n\n            <div className={styles.section}>\n              <div className={styles.checkboxSection}>\n                <h2 className={styles.title}>\n                  {lang('BoostingGiveawayAdditionalPrizes')}\n                </h2>\n\n                <Switcher\n                  label={lang('BoostingGiveawayAdditionalPrizes')}\n                  checked={shouldShowPrizes}\n                  onChange={handleShouldShowPrizesChange}\n                />\n              </div>\n\n              {shouldShowPrizes && (\n                <div className={styles.prizesSection}>\n                  <h2 className={styles.title}>\n                    {dataPrepaidGiveaway ? dataPrepaidGiveaway.quantity : selectedUserCount}\n                  </h2>\n                  <InputText\n                    className={styles.prizesInput}\n                    value={prizeDescription}\n                    onChange={handlePrizeDescriptionChange}\n                    label={lang('BoostingGiveawayEnterYourPrize')}\n                  />\n                </div>\n              )}\n            </div>\n\n            {shouldShowPrizes ? (\n              <div className={styles.subscription}>\n                {prizeDescription?.length ? renderText(lang('BoostingGiveawayAdditionPrizeCountNameHint',\n                  dataPrepaidGiveaway\n                    ? [dataPrepaidGiveaway.quantity, prizeDescription, monthQuantity]\n                    : [selectedUserCount, prizeDescription, monthQuantity],\n                  undefined,\n                  selectedMonthOption), ['simple_markdown']) : renderText(lang('BoostingGiveawayAdditionPrizeCountHint',\n                  dataPrepaidGiveaway\n                    ? [dataPrepaidGiveaway.quantity, monthQuantity]\n                    : [selectedUserCount, monthQuantity],\n                  undefined,\n                  selectedMonthOption), ['simple_markdown'])}\n              </div>\n            ) : (\n              <div className={styles.subscription}>\n                {renderText(lang('BoostingGiveawayAdditionPrizeHint'))}\n              </div>\n            )}\n\n            <div className={styles.section}>\n              <div className={styles.checkboxSection}>\n                <h2 className={styles.title}>\n                  {lang('BoostingGiveawayShowWinners')}\n                </h2>\n\n                <Switcher\n                  label={lang('BoostingGiveawayAdditionalPrizes')}\n                  checked={shouldShowWinners}\n                  onChange={handleShouldShowWinnersChange}\n                />\n              </div>\n            </div>\n\n            <div className={styles.subscription}>\n              {renderText(lang('BoostingGiveawayShowWinnersHint'))}\n            </div>\n\n            <div className={buildClassName(styles.section, dataPrepaidGiveaway && styles.subscriptionFooter)}>\n              <h2 className={styles.giveawayTitle}>\n                {lang('BoostingDateWhenGiveawayEnds')}\n              </h2>\n\n              <Button\n                ariaLabel={lang('BoostGift.DateEnds')}\n                className={buildClassName(styles.dateButton, 'expire-limit')}\n                isText\n                onClick={openCalendar}\n              >\n                <h3 className={styles.title}>\n                  {lang('BoostGift.DateEnds')}\n                </h3>\n                {formatDateTimeToString(customExpireDate, lang.code)}\n              </Button>\n            </div>\n          </>\n        )}\n\n        {!dataPrepaidGiveaway && (\n          <>\n            <div className={styles.section}>\n              <h2 className={styles.giveawayTitle}>\n                {lang('BoostingDurationOfPremium')}\n              </h2>\n\n              {renderSubscriptionOptions()}\n            </div>\n\n            <div className={buildClassName(styles.subscription, styles.subscriptionFooter)}>\n              {renderPremiumFeaturesLink()}\n            </div>\n          </>\n        )}\n\n        {selectedGiveawayOption && (\n          <div className={styles.footer}>\n            <Button className={styles.button} onClick={dataPrepaidGiveaway ? openConfirmModal : handleClick}>\n              {lang('BoostingStartGiveaway')}\n              <div className={styles.quantity}>\n                <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n                  <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                  <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                    {dataPrepaidGiveaway ? dataPrepaidGiveaway.quantity : boostQuantity}\n                  </div>\n                </div>\n              </div>\n            </Button>\n          </div>\n        )}\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n      <CountryPickerModal\n        isOpen={isCountryPickerModalOpen}\n        onClose={closeCountryPickerModal}\n        countryList={countryList}\n        onSubmit={handleSetCountriesListChange}\n        selectionLimit={countrySelectionLimit}\n      />\n      <AppendEntityPickerModal\n        key={entityType}\n        isOpen={isEntityPickerModalOpen}\n        onClose={closeEntityPickerModal}\n        entityType={entityType}\n        chatId={chatId}\n        onSubmit={handleSetIdsListChange}\n        selectionLimit={entityType === 'members' ? userSelectionLimit : GIVEAWAY_MAX_ADDITIONAL_CHANNELS}\n      />\n      <ConfirmDialog\n        title={lang('BoostingStartGiveawayConfirmTitle')}\n        text={lang('BoostingStartGiveawayConfirmText')}\n        confirmLabel={lang('Start')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmLaunchPrepaidGiveaway}\n      />\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    giveawayModal,\n  } = selectTabState(global);\n  const chatId = giveawayModal?.chatId;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const isChannel = chat && isChatChannel(chat);\n\n  return {\n    chatId,\n    gifts: giveawayModal?.gifts,\n    selectedMemberList: giveawayModal?.selectedMemberIds,\n    selectedChannelList: giveawayModal?.selectedChannelIds,\n    giveawayBoostPerPremiumLimit: global.appConfig?.giveawayBoostsPerPremium,\n    userSelectionLimit: global.appConfig?.giveawayAddPeersMax,\n    countrySelectionLimit: global.appConfig?.giveawayCountriesMax,\n    countryList: global.countryList.general,\n    prepaidGiveaway: giveawayModal?.prepaidGiveaway,\n    isChannel,\n  };\n})(GiveawayModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"cKwZp5xA\",\"main\":\"bo8ICYep\",\"filter\":\"HK8ZNKHl\",\"title\":\"LUU19p8W\",\"buttons\":\"CdZFeuxb\",\"picker\":\"JBzw9a0l\",\"avatars\":\"UAhbe3L3\",\"center\":\"JZ7y_T5c\",\"description\":\"OySCJvvR\",\"premiumFeatures\":\"CrYMy2g6\",\"options\":\"IRkNlxtz\",\"button\":\"HIPk0a6e\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { GIVEAWAY_MAX_ADDITIONAL_CHANNELS } from '../../../config';\nimport {\n  filterUsersByName, isUserBot,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/Icon';\nimport Picker from '../../common/Picker';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './PremiumGiftingModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  userSelectionLimit?: number;\n  userIds?: string[];\n}\n\nconst PremiumGiftingModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  userSelectionLimit = GIVEAWAY_MAX_ADDITIONAL_CHANNELS,\n  userIds,\n}) => {\n  const { closePremiumGiftingModal, openGiftPremiumModal, showNotification } = getActions();\n\n  const lang = useLang();\n\n  const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedUserIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = userIds ? filterUsersByName(userIds, usersById, searchQuery) : [];\n\n    return sortChatIds(unique(filteredContactIds).filter((userId) => {\n      const user = usersById[userId];\n      if (!user) {\n        return true;\n      }\n\n      return !isUserBot(user) && userId !== currentUserId;\n    }));\n  }, [currentUserId, searchQuery, userIds]);\n\n  const handleSendIdList = useLastCallback(() => {\n    if (selectedUserIds?.length) {\n      openGiftPremiumModal({ forUserIds: selectedUserIds });\n\n      closePremiumGiftingModal();\n    }\n  });\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (newSelectedIds.length > userSelectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningUsers', userSelectionLimit),\n      });\n      return;\n    }\n    setSelectedUserIds(newSelectedIds);\n  });\n\n  function renderSearchField() {\n    return (\n      <div className={styles.filter} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => closePremiumGiftingModal()}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <h3 className={styles.title}>{lang('GiftTelegramPremiumTitle')}\n        </h3>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={closePremiumGiftingModal}\n      onEnter={handleSendIdList}\n    >\n      <div className={styles.main}>\n        {renderSearchField()}\n        <div className={buildClassName(styles.main, 'custom-scroll')}>\n          <Picker\n            className={styles.picker}\n            itemIds={displayedUserIds}\n            selectedIds={selectedUserIds}\n            filterValue={searchQuery}\n            filterPlaceholder={lang('Search')}\n            searchInputId=\"users-picker-search\"\n            onSelectedIdsChange={handleSelectedUserIdsChange}\n            onFilterChange={setSearchQuery}\n            isSearchable\n          />\n        </div>\n        <div className={styles.buttons}>\n          <Button withPremiumGradient size=\"smaller\" onClick={handleSendIdList} disabled={!selectedUserIds?.length}>\n            {lang('Continue')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { currentUserId } = global;\n\n  return {\n    currentUserId,\n    userIds: global.contactList?.userIds,\n    userSelectionLimit: global.appConfig?.giveawayAddPeersMax,\n  };\n})(PremiumGiftingModal));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiLimitTypeWithModal } from '../../../../global/types';\nimport type { LangFn } from '../../../../hooks/useLang';\nimport type { IconName } from '../../../../types/icons';\n\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\n\nimport Icon from '../../../common/Icon';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogs',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, IconName> = {\n  dialogFiltersChats: 'chat-badge',\n  uploadMaxFileparts: 'file-badge',\n  dialogFilters: 'folder-badge',\n  dialogFolderPinned: 'pin-badge',\n  channelsPublic: 'link-badge',\n  channels: 'chats-badge',\n  chatlistInvites: 'link-badge',\n  chatlistJoined: 'folder-badge',\n  savedDialogsPinned: 'pin-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: LangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: LangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>{valueFormatter?.(\n            lang, isPremium ? premiumValue : defaultValue,\n          ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n      && (\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleClick}\n          color=\"primary\"\n        >\n          {lang('IncreaseLimit')}\n          <Icon name=\"double-badge\" className={styles.x2} />\n        </Button>\n      )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QAs_iFxO\",\"limit-compare\":\"k0O6Rnjh\",\"limitCompare\":\"k0O6Rnjh\",\"limit-badge\":\"Q5d_7bB4\",\"limitBadge\":\"Q5d_7bB4\",\"limit-value\":\"ArEy3hhB\",\"limitValue\":\"ArEy3hhB\",\"limit-icon\":\"rbnU7JVX\",\"limitIcon\":\"rbnU7JVX\",\"dialog-buttons\":\"RVM_RSap\",\"dialogButtons\":\"RVM_RSap\",\"x2\":\"esB1OhAF\",\"button-icon\":\"ydpxmYS3\",\"buttonIcon\":\"ydpxmYS3\"};","import type { RefObject } from 'react';\nimport { useRef, useState } from '../../../lib/teact/teact';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: RefObject<HTMLDivElement>,\n  headerRef: RefObject<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useLastCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll(\n        containerRef.current!,\n        stickerSetEl,\n        'start',\n        FOCUS_MARGIN,\n        isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      );\n\n      return index;\n    });\n  });\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"m6XpTzQX\",\"video\":\"OZHqKbDL\",\"image\":\"enA6c8gc\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useColorFilter from '../../../hooks/stickers/useColorFilter';\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  forcePlayback,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    hasThumbnail, hasVideoThumb, hasAnimatedThumb, hasStaticThumb, thumbCustomEmojiId,\n  } = stickerSet;\n\n  const { customEmoji } = useCustomEmoji(thumbCustomEmojiId);\n  const hasCustomColor = customEmoji?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(containerRef, !hasCustomColor);\n  const colorFilter = useColorFilter(customColor);\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const hasOnlyStaticThumb = hasStaticThumb && !hasVideoThumb && !hasAnimatedThumb && !thumbCustomEmojiId;\n\n  const shouldFallbackToStatic = hasOnlyStaticThumb || (hasVideoThumb && !IS_WEBM_SUPPORTED && !hasAnimatedThumb);\n  const staticHash = shouldFallbackToStatic && getStickerPreviewHash(stickerSet.stickers![0].id);\n  const staticMediaData = useMedia(staticHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !shouldFallbackToStatic) || hasAnimatedThumb) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = thumbCustomEmojiId || mediaData || staticMediaData;\n  const transitionClassNames = useMediaTransition(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div ref={containerRef} className={buildClassName(styles.root, 'sticker-set-cover')}>\n      {isReady ? (\n        thumbCustomEmojiId ? (\n          <CustomEmoji\n            documentId={thumbCustomEmojiId}\n            size={size}\n            observeIntersectionForPlaying={observeIntersection}\n            noPlay={noPlay}\n          />\n        ) : hasAnimatedThumb ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n            forceAlways={forcePlayback}\n          />\n        ) : (hasVideoThumb && !shouldFallbackToStatic) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            style={colorFilter}\n            isPriority={forcePlayback}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || staticMediaData}\n            style={colorFilter}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n            draggable={false}\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import type { MouseEvent as ReactMouseEvent, ReactNode } from 'react';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiBotInlineMediaResult, ApiSticker } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTimeOffset } from '../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useDynamicColorListener from '../../hooks/stickers/useDynamicColorListener';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMenuPosition from '../../hooks/useMenuPosition';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport StickerView from './StickerView';\n\nimport './StickerButton.scss';\n\ntype OwnProps<T> = {\n  sticker: ApiSticker;\n  size: number;\n  noPlay?: boolean;\n  title?: string;\n  className?: string;\n  noContextMenu?: boolean;\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  canViewSet?: boolean;\n  isSelected?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldIgnorePremium?: boolean;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n  withTranslucentThumb?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  observeIntersectionForShowing?: ObserveFn;\n  noShowPremium?: boolean;\n  onClick?: (arg: OwnProps<T>['clickArg'], isSilent?: boolean, shouldSchedule?: boolean) => void;\n  clickArg: T;\n  onFaveClick?: (sticker: ApiSticker) => void;\n  onUnfaveClick?: (sticker: ApiSticker) => void;\n  onRemoveRecentClick?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\nconst contentForStatusMenuContext = [\n  { title: 'SetTimeoutFor.Hours', value: 1, arg: 3600 },\n  { title: 'SetTimeoutFor.Hours', value: 2, arg: 7200 },\n  { title: 'SetTimeoutFor.Hours', value: 8, arg: 28800 },\n  { title: 'SetTimeoutFor.Days', value: 1, arg: 86400 },\n  { title: 'SetTimeoutFor.Days', value: 2, arg: 172800 },\n];\n\nconst StickerButton = <T extends number | ApiSticker | ApiBotInlineMediaResult | undefined = undefined>({\n  sticker,\n  size,\n  noPlay,\n  title,\n  className,\n  noContextMenu,\n  isSavedMessages,\n  isStatusPicker,\n  canViewSet,\n  observeIntersection,\n  observeIntersectionForShowing,\n  isSelected,\n  isCurrentUserPremium,\n  shouldIgnorePremium,\n  noShowPremium,\n  sharedCanvasRef,\n  withTranslucentThumb,\n  forcePlayback,\n  onClick,\n  clickArg,\n  onFaveClick,\n  onUnfaveClick,\n  onRemoveRecentClick,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}: OwnProps<T>) => {\n  const { openStickerSet, openPremiumModal, setEmojiStatus } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const hasCustomColor = sticker.shouldUseTextColor;\n  const customColor = useDynamicColorListener(ref, !hasCustomColor);\n\n  const {\n    id, isCustomEmoji, hasEffect: isPremium, stickerSetInfo,\n  } = sticker;\n  const isLocked = !isCurrentUserPremium && isPremium && !shouldIgnorePremium;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const shouldLoad = isIntersecting;\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const isIntesectingForShowing = useIsIntersecting(ref, observeIntersectionForShowing);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const shouldRenderContextMenu = Boolean(!noContextMenu && contextMenuPosition);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => {\n    return isStatusPicker ? menuRef.current : ref.current!.querySelector('.sticker-context-menu .bubble');\n  });\n\n  const getLayout = () => ({ withPortal: isStatusPicker, shouldAvoidNegativePosition: true });\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n    getLayout,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenuOpen?.();\n    } else {\n      onContextMenuClose?.();\n    }\n  }, [isContextMenuOpen, onContextMenuClose, onContextMenuOpen]);\n\n  useEffect(() => {\n    if (!isIntersecting) handleContextMenuClose();\n  }, [handleContextMenuClose, isIntersecting]);\n\n  const handleClick = () => {\n    if (isContextMenuOpen) return;\n    if (isLocked) {\n      openPremiumModal({ initialSection: 'premium_stickers' });\n      return;\n    }\n    onClick?.(clickArg);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleRemoveClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextRemoveRecent = useLastCallback(() => {\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextUnfave = useLastCallback(() => {\n    onUnfaveClick!(sticker);\n  });\n\n  const handleContextFave = useLastCallback(() => {\n    onFaveClick!(sticker);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick?.(clickArg, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick?.(clickArg, undefined, true);\n  });\n\n  const handleOpenSet = useLastCallback(() => {\n    openStickerSet({ stickerSetInfo });\n  });\n\n  const handleEmojiStatusExpiresClick = useLastCallback((e: React.SyntheticEvent, duration = 0) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    handleContextMenuClose();\n    onContextMenuClick?.();\n    setEmojiStatus({\n      emojiStatus: sticker,\n      expires: Date.now() / 1000 + duration + getServerTimeOffset(),\n    });\n  });\n\n  const shouldShowCloseButton = !IS_TOUCH_ENV && onRemoveRecentClick;\n\n  const fullClassName = buildClassName(\n    'StickerButton',\n    onClick && 'interactive',\n    isSelected && 'selected',\n    isCustomEmoji && 'custom-emoji',\n    className,\n  );\n\n  const contextMenuItems = useMemo(() => {\n    if (!shouldRenderContextMenu || noContextMenu || (isCustomEmoji && !isStatusPicker)) return [];\n\n    const items: ReactNode[] = [];\n\n    if (isCustomEmoji) {\n      contentForStatusMenuContext.forEach((item) => {\n        items.push(\n          <MenuItem onClick={handleEmojiStatusExpiresClick} clickArg={item.arg}>\n            {lang(item.title, item.value, 'i')}\n          </MenuItem>,\n        );\n      });\n\n      return items;\n    }\n\n    if (onUnfaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextUnfave}>\n          {lang('Stickers.RemoveFromFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (onFaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextFave}>\n          {lang('Stickers.AddToFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (!isLocked && onClick) {\n      if (!isSavedMessages) {\n        items.push(<MenuItem onClick={handleSendQuiet} icon=\"muted\">{lang('SendWithoutSound')}</MenuItem>);\n      }\n      items.push(\n        <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>,\n      );\n    }\n\n    if (canViewSet) {\n      items.push(\n        <MenuItem onClick={handleOpenSet} icon=\"stickers\">\n          {lang('ViewPackPreview')}\n        </MenuItem>,\n      );\n    }\n    if (onRemoveRecentClick) {\n      items.push(\n        <MenuItem icon=\"delete\" onClick={handleContextRemoveRecent}>\n          {lang('DeleteFromRecent')}\n        </MenuItem>,\n      );\n    }\n    return items;\n  }, [\n    shouldRenderContextMenu, noContextMenu, isCustomEmoji, isStatusPicker, onUnfaveClick, onFaveClick, isLocked,\n    onClick, canViewSet, onRemoveRecentClick, handleEmojiStatusExpiresClick, lang, handleContextUnfave,\n    handleContextFave, isSavedMessages, handleSendScheduled, handleSendQuiet, handleOpenSet, handleContextRemoveRecent,\n  ]);\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      title={title || (sticker?.emoji)}\n      data-sticker-id={id}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isIntesectingForShowing && (\n        <StickerView\n          containerRef={ref}\n          sticker={sticker}\n          isSmall\n          size={size}\n          shouldLoop\n          shouldPreloadPreview\n          noLoad={!shouldLoad}\n          noPlay={!shouldPlay}\n          withSharedAnimation\n          sharedCanvasRef={sharedCanvasRef}\n          withTranslucentThumb={withTranslucentThumb}\n          customColor={customColor}\n          forceAlways={forcePlayback}\n        />\n      )}\n      {!noShowPremium && isLocked && (\n        <div\n          className=\"sticker-locked\"\n        >\n          <i className=\"icon icon-lock-badge\" />\n        </div>\n      )}\n      {!noShowPremium && isPremium && !isLocked && (\n        <div className=\"sticker-premium\">\n          <i className=\"icon icon-premium\" />\n        </div>\n      )}\n      {shouldShowCloseButton && (\n        <Button\n          className=\"sticker-remove-button\"\n          color=\"dark\"\n          round\n          noFastClick\n          onClick={handleRemoveClick}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      {Boolean(contextMenuItems.length) && (\n        <Menu\n          ref={menuRef}\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"sticker-context-menu\"\n          autoClose\n          withPortal={isStatusPicker}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {contextMenuItems}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Lu0K9UZP\",\"selected\":\"UF8XKO4C\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiReaction } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../config';\nimport { getDocumentMediaHash, isSameReaction } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport useCoordsInSharedCanvas from '../../hooks/useCoordsInSharedCanvas';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransition from '../../hooks/useMediaTransition';\n\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\nimport CustomEmoji from './CustomEmoji';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: React.RefObject<HTMLCanvasElement>;\n  sharedCanvasHqRef?: React.RefObject<HTMLCanvasElement>;\n  forcePlayback?: boolean;\n  onClick: (reaction: ApiReaction) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  forcePlayback,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isCustom = 'documentId' in reaction;\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation) : undefined,\n    !animationId,\n  );\n  const handleClick = useLastCallback(() => {\n    onClick(reaction);\n  });\n\n  const transitionClassNames = useMediaTransition(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n          forceAlways={forcePlayback}\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={mediaData}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n          forceAlways={forcePlayback}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiReaction, ApiSticker } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport { getReactionKey } from '../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport ReactionEmoji from './ReactionEmoji';\nimport StickerButton from './StickerButton';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isChatEmojiSet?: boolean;\n  isChatStickerSet?: boolean;\n  isTranslucent?: boolean;\n  noContextMenus?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isChatEmojiSet,\n  isChatStickerSet,\n  isTranslucent,\n  noContextMenus,\n  forcePlayback,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransition(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useLastCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  });\n\n  const handleAddClick = useLastCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  });\n\n  const handleDefaultTopicIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const handleDefaultStatusIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useLastCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  });\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  });\n\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isCurrentUserPremium && isPremiumSet && !isChatEmojiSet;\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID && stickerSet.id !== POPULAR_SYMBOL_SET_ID\n    && !isChatEmojiSet && !isChatStickerSet;\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = withDefaultTopicIcon ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && isEmoji && !isPopular && !isChatEmojiSet\n    && (!isInstalled || (!isCurrentUserPremium && !isSavedMessages));\n  const addSetButtonText = useMemo(() => {\n    if (isLocked) {\n      if (isInstalled) return lang('lng_emoji_premium_restore');\n      return lang('Unlock');\n    }\n\n    return lang('Add');\n  }, [isLocked, lang, isInstalled]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-title', withAddSetButton && 'symbol-set-title-external')}>\n            {isLocked && <i className=\"symbol-set-locked-icon icon icon-lock-badge\" />}\n            <span className=\"symbol-set-name\">{stickerSet.title}</span>\n            {(isChatEmojiSet || isChatStickerSet) && (\n              <span className=\"symbol-set-chat\">{lang(isChatEmojiSet ? 'GroupEmoji' : 'GroupStickers')}</span>\n            )}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">\n                {lang(isEmoji ? 'EmojiCount' : 'Stickers', stickerSet.stickers.length, 'i')}\n              </span>\n            )}\n          </p>\n          {isRecent && (\n            <i className=\"symbol-set-remove icon icon-close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {addSetButtonText}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName('symbol-set-container shared-canvas-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" draggable={false} />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <i className=\"icon icon-premium\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n              forcePlayback={forcePlayback}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                noContextMenu={noContextMenus}\n                isCurrentUserPremium={isCurrentUserPremium}\n                shouldIgnorePremium={isChatEmojiSet}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n                forcePlayback={forcePlayback}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +{totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"lq8BD6Hc\",\"main\":\"p7c8y0LH\",\"main_customEmoji\":\"U0BL1VvK\",\"mainCustomEmoji\":\"U0BL1VvK\",\"header\":\"Qn3lBUNs\",\"headerWithBorder\":\"HMspKpNp\",\"stickerCover\":\"YKO0Obwy\",\"activated\":\"y02WwQk6\",\"pickerDisabled\":\"BZfaP1GD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiReaction, ApiSticker, ApiStickerSet,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChatFullInfo,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { pickTruthy, unique } from '../../util/iteratees';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { REM } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useScrolledState from '../../hooks/useScrolledState';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport Icon from './Icon';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  pickerListClassName?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  chatEmojiSetId?: string;\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  pickerListClassName,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  stickerSetsById,\n  chatEmojiSetId,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  defaultTagReactions,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const prefix = `${idPrefix}-custom-emoji`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker && isSavedMessages) {\n      if (defaultTagReactions?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang('PremiumPreviewTags'),\n          reactions: defaultTagReactions,\n          count: defaultTagReactions.length,\n          isEmoji: true,\n        });\n      }\n    }\n\n    if (isReactionPicker && !isSavedMessages) {\n      const topReactionsSlice = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: lang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = (defaultStatusIconsPack.stickers || []).concat(recentCustomEmojis || []);\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: lang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const userSetIds = [...(addedCustomEmojiIds || [])];\n    if (chatEmojiSetId) {\n      userSetIds.unshift(chatEmojiSetId);\n    }\n\n    const setIdsToDisplay = unique(userSetIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, lang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId, isSavedMessages, defaultTagReactions, chatEmojiSetId,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleReactionSelect = useLastCallback((reaction: ApiReaction) => {\n    onReactionSelect?.(reaction);\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <Icon name=\"recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              forcePlayback\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !loadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n        forcePlayback\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className={pickerStyles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    pickerListClassName,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={listClassName}\n      >\n        {allSets.map((stickerSet, i) => {\n          const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n            || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n          const isChatEmojiSet = stickerSet.id === chatEmojiSetId;\n\n          return (\n            <StickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n              index={i}\n              idPrefix={prefix}\n              observeIntersection={observeIntersectionForSet}\n              observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n              observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n              isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n              isSavedMessages={isSavedMessages}\n              isStatusPicker={isStatusPicker}\n              isReactionPicker={isReactionPicker}\n              shouldHideHeader={shouldHideHeader}\n              withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              isChatEmojiSet={isChatEmojiSet}\n              isCurrentUserPremium={isCurrentUserPremium}\n              selectedReactionIds={selectedReactionIds}\n              availableReactions={availableReactions}\n              isTranslucent={isTranslucent}\n              onReactionSelect={handleReactionSelect}\n              onStickerSelect={handleEmojiSelect}\n              onContextMenuOpen={onContextMenuOpen}\n              onContextMenuClose={onContextMenuClose}\n              onContextMenuClick={onContextMenuClick}\n              forcePlayback\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      reactions: {\n        availableReactions,\n        recentReactions,\n        topReactions,\n        defaultTags,\n      },\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n\n    return {\n      customEmojisById: !isStatusPicker ? customEmojisById : undefined,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      chatEmojiSetId: chatFullInfo?.emojiSet?.id,\n      availableReactions: isReactionPicker ? availableReactions : undefined,\n      defaultTagReactions: isReactionPicker ? defaultTags : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qk9PEGRE\",\"activated\":\"WYeuJNQx\"};","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"hRzvfaRb\"};","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: RefObject<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"pUyNTysT\",\"modal\":\"IK2mBqbm\",\"loading\":\"zjXCH3pT\",\"description\":\"j6xEoljc\",\"bold\":\"hAA6B1lc\",\"chip\":\"smWR78pO\",\"replaceModal\":\"GIFAjZPY\",\"replaceModalContent\":\"Jxyz9TaL\",\"avatarContainer\":\"OKp6HS1U\",\"arrow\":\"WSJdWV7L\",\"boostedWrapper\":\"NU9itcIm\",\"boostedMark\":\"upXvhNRY\"};","import React, { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiMyBoost } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getChatTitle, isChatAdmin, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateInFuture } from '../../../util/date/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/Icon';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\n\nimport styles from './BoostModal.module.scss';\n\ntype LoadedParams = {\n  boost?: ApiMyBoost;\n  leftText: string;\n  rightText?: string;\n  value: string;\n  progress: number;\n  descriptionText: string;\n  isBoosted?: boolean;\n  canBoostMore?: boolean;\n};\n\ntype BoostInfo = ({\n  isStatusLoaded: false;\n  title: string;\n} & Undefined<LoadedParams>) | ({\n  isStatusLoaded: true;\n  title: string;\n} & LoadedParams);\n\nexport type OwnProps = {\n  modal: TabState['boostModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  prevBoostedChat?: ApiChat;\n  isCurrentUserPremium?: boolean;\n};\n\nconst BoostModal = ({\n  modal,\n  chat,\n  chatFullInfo,\n  prevBoostedChat,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    applyBoost,\n    closeBoostModal,\n    requestConfetti,\n    openPremiumModal,\n    loadFullChat,\n  } = getActions();\n\n  const [isReplaceModalOpen, openReplaceModal, closeReplaceModal] = useFlag();\n  const [isWaitDialogOpen, openWaitDialog, closeWaitDialog] = useFlag();\n  const [isPremiumDialogOpen, openPremiumDialog, closePremiumDialog] = useFlag();\n\n  const isChannel = chat && isChatChannel(chat);\n\n  const isOpen = Boolean(modal);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (chat && !chatFullInfo) {\n      loadFullChat({ chatId: chat.id });\n    }\n  }, [chat, chatFullInfo]);\n\n  const chatTitle = useMemo(() => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return getChatTitle(lang, chat);\n  }, [chat, lang]);\n\n  const boostedChatTitle = useMemo(() => {\n    if (!prevBoostedChat) {\n      return undefined;\n    }\n\n    return getChatTitle(lang, prevBoostedChat);\n  }, [prevBoostedChat, lang]);\n\n  const {\n    isStatusLoaded,\n    isBoosted,\n    boost,\n    title,\n    leftText,\n    rightText,\n    value,\n    progress,\n    descriptionText,\n    canBoostMore,\n  }: BoostInfo = useMemo(() => {\n    if (!modal?.boostStatus || !chat) {\n      return {\n        isStatusLoaded: false,\n        title: lang('Loading'),\n      };\n    }\n\n    const {\n      hasMyBoost,\n    } = modal.boostStatus;\n\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, chat.id);\n    const areBoostsInDifferentChannels = modal?.myBoosts && !areAllBoostsInChannel(modal.myBoosts, chat.id);\n\n    const {\n      boosts,\n      currentLevel,\n      hasNextLevel,\n      levelProgress,\n      remainingBoosts,\n      isMaxLevel,\n    } = getBoostProgressInfo(modal.boostStatus, true);\n\n    const hasBoost = hasMyBoost;\n\n    const left = lang('BoostsLevel', currentLevel);\n    const right = hasNextLevel ? lang('BoostsLevel', currentLevel + 1) : undefined;\n\n    const moreBoosts = lang('ChannelBoost.MoreBoosts', remainingBoosts);\n\n    const modalTitle = isChannel ? lang('BoostChannel') : lang('BoostGroup');\n\n    const boostsLeftToUnrestrict = (chatFullInfo?.boostsToUnrestrict || 0) - (chatFullInfo?.boostsApplied || 0);\n\n    let description: string | undefined;\n    if (isMaxLevel) {\n      description = lang('BoostsMaxLevelReached');\n    } else if (boostsLeftToUnrestrict > 0 && !isChatAdmin(chat)) {\n      const boostTimes = lang('GroupBoost.BoostToUnrestrict.Times', boostsLeftToUnrestrict);\n      description = lang('GroupBoost.BoostToUnrestrict', [boostTimes, chatTitle]);\n    } else {\n      description = lang('ChannelBoost.MoreBoostsNeeded.Text', [chatTitle, moreBoosts]);\n    }\n\n    return {\n      isStatusLoaded: true,\n      title: modalTitle,\n      leftText: left,\n      rightText: right,\n      value: boosts.toString(),\n      progress: levelProgress,\n      remainingBoosts,\n      descriptionText: description,\n      boost: firstBoost,\n      isBoosted: hasBoost,\n      canBoostMore: areBoostsInDifferentChannels && !isMaxLevel,\n    };\n  }, [chat, chatTitle, modal, lang, chatFullInfo, isChannel]);\n\n  const isBoostDisabled = !modal?.myBoosts?.length && isCurrentUserPremium;\n  const isReplacingBoost = boost?.chatId && boost.chatId !== modal?.chatId;\n\n  const handleApplyBoost = useLastCallback(() => {\n    closeReplaceModal();\n    applyBoost({ chatId: chat!.id, slots: [boost!.slot] });\n    requestConfetti({});\n  });\n\n  const handleProceedPremium = useLastCallback(() => {\n    openPremiumModal();\n    closePremiumDialog();\n    closeBoostModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!boost) {\n      if (!isCurrentUserPremium) {\n        openPremiumDialog();\n        return;\n      }\n\n      closeBoostModal();\n      return;\n    }\n\n    if (!canBoostMore) {\n      closeBoostModal();\n      return;\n    }\n\n    if (boost.cooldownUntil) {\n      openWaitDialog();\n      return;\n    }\n\n    if (isReplacingBoost) {\n      openReplaceModal();\n      return;\n    }\n\n    handleApplyBoost();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeBoostModal();\n  });\n\n  function renderContent() {\n    if (!isStatusLoaded) {\n      return <Loading className={styles.loading} />;\n    }\n\n    return (\n      <>\n        <PremiumProgress\n          leftText={leftText}\n          rightText={rightText}\n          progress={progress}\n          floatingBadgeText={value}\n          floatingBadgeIcon=\"boost\"\n        />\n        {isBoosted && (\n          <div className={buildClassName(styles.description, styles.bold)}>\n            {lang('ChannelBoost.YouBoostedChannelText', chatTitle)}\n          </div>\n        )}\n        <div className={styles.description}>\n          {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n        </div>\n        <div className=\"dialog-buttons\">\n          <Button isText className=\"confirm-dialog-button\" disabled={isBoostDisabled} onClick={handleButtonClick}>\n            {canBoostMore ? (\n              <>\n                <Icon name=\"boost\" />\n                {lang(isChannel ? 'ChannelBoost.BoostChannel' : 'GroupBoost.BoostGroup')}\n              </>\n            ) : lang('OK')}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={handleCloseClick}>\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      className={styles.modal}\n      contentClassName={styles.content}\n      onClose={closeBoostModal}\n    >\n      {renderContent()}\n      {isReplacingBoost && boostedChatTitle && (\n        <Modal\n          isOpen={isReplaceModalOpen}\n          className={styles.replaceModal}\n          contentClassName={styles.replaceModalContent}\n          onClose={closeReplaceModal}\n        >\n          <div className={styles.avatarContainer}>\n            <div className={styles.boostedWrapper}>\n              <Avatar peer={prevBoostedChat} size=\"large\" />\n              <Icon name=\"boostcircle\" className={styles.boostedMark} />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar peer={chat} size=\"large\" />\n          </div>\n          <div>\n            {renderText(lang('ChannelBoost.ReplaceBoost', [boostedChatTitle, chatTitle]), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className=\"dialog-buttons\">\n            <Button isText className=\"confirm-dialog-button\" onClick={handleApplyBoost}>\n              {lang('Replace')}\n            </Button>\n            <Button isText className=\"confirm-dialog-button\" onClick={closeReplaceModal}>\n              {lang('Cancel')}\n            </Button>\n          </div>\n        </Modal>\n      )}\n      {Boolean(boost?.cooldownUntil) && (\n        <ConfirmDialog\n          isOpen={isWaitDialogOpen}\n          isOnlyConfirm\n          confirmLabel={lang('OK')}\n          title={lang('ChannelBoost.Error.BoostTooOftenTitle')}\n          onClose={closeWaitDialog}\n          confirmHandler={closeWaitDialog}\n        >\n          {renderText(\n            lang(\n              'ChannelBoost.Error.BoostTooOftenText',\n              formatDateInFuture(lang, getServerTime(), boost!.cooldownUntil),\n            ),\n            ['simple_markdown', 'emoji'],\n          )}\n        </ConfirmDialog>\n      )}\n      {!isCurrentUserPremium && (\n        <ConfirmDialog\n          isOpen={isPremiumDialogOpen}\n          confirmLabel={lang('Common.Yes')}\n          title={lang('PremiumNeeded')}\n          onClose={closePremiumDialog}\n          confirmHandler={handleProceedPremium}\n        >\n          {renderText(lang('PremiumNeededForBoosting'), ['simple_markdown', 'emoji'])}\n        </ConfirmDialog>\n      )}\n    </Modal>\n  );\n};\n\nfunction getFirstAvailableBoost(myBoosts: ApiMyBoost[], chatId?: string) {\n  return myBoosts.find((boost) => !boost.chatId)\n    || myBoosts.filter((b) => chatId && b.chatId !== chatId)\n      .sort((a, b) => a.date - b.date)[0];\n}\n\nfunction areAllBoostsInChannel(myBoosts: ApiMyBoost[], chatId: string) {\n  return myBoosts.every((boost) => boost.chatId === chatId);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal && selectChat(global, modal?.chatId);\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, modal.chatId);\n    const boostedChat = firstBoost?.chatId ? selectChat(global, firstBoost?.chatId) : undefined;\n\n    return {\n      chat,\n      chatFullInfo,\n      prevBoostedChat: boostedChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(BoostModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"M9b5KmrN\",\"clickable\":\"IzcASdzD\",\"title\":\"_dRihuUh\",\"table\":\"VkcHpgVG\",\"chat-item\":\"imIhcLMN\",\"chatItem\":\"imIhcLMN\",\"logo\":\"Mtx4SWww\",\"centered\":\"xVLGjLub\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { selectChatMessage, selectSender } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/date/dateFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport LinkField from '../../common/LinkField';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './GiftCodeModal.module.scss';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\n\nexport type OwnProps = {\n  modal: TabState['giftCodeModal'];\n};\n\nexport type StateProps = {\n  currentUserId?: string;\n  messageSender?: ApiPeer;\n};\n\nconst GIFTCODE_PATH = 'giftcode';\n\nconst GiftCodeModal = ({\n  currentUserId,\n  modal,\n  messageSender,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, openChat, applyGiftCode, focusMessage,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const canUse = (!modal?.info.toId || modal?.info.toId === currentUserId) && !modal?.info.usedAt;\n\n  const handleOpenChat = useLastCallback((peerId: string) => {\n    openChat({ id: peerId });\n    closeGiftCodeModal();\n  });\n\n  const handleOpenGiveaway = useLastCallback(() => {\n    if (!modal || !modal.info.giveawayMessageId) return;\n    focusMessage({\n      chatId: modal.info.fromId!,\n      messageId: modal.info.giveawayMessageId,\n    });\n    closeGiftCodeModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (canUse) {\n      applyGiftCode({ slug: modal!.slug });\n      return;\n    }\n    closeGiftCodeModal();\n  });\n\n  function renderContent() {\n    if (!modal) return undefined;\n    const { slug, info } = modal;\n\n    const fromId = info.fromId || messageSender?.id;\n\n    return (\n      <>\n        <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n        <p className={styles.centered}>{renderText(lang('lng_gift_link_about'), ['simple_markdown'])}</p>\n        <LinkField title=\"BoostingGiftLink\" link={`${TME_LINK_PREFIX}/${GIFTCODE_PATH}/${slug}`} />\n        <table className={styles.table}>\n          <tr>\n            <td className={styles.title}>{lang('BoostingFrom')}</td>\n            <td>\n              {fromId ? (\n                <PickerSelectedItem\n                  peerId={fromId}\n                  className={styles.chatItem}\n                  forceShowSelf\n                  fluid\n                  clickArg={fromId}\n                  onClick={handleOpenChat}\n                />\n              ) : lang('BoostingNoRecipient')}\n            </td>\n          </tr>\n          <tr>\n            <td className={styles.title}>\n              {lang('BoostingTo')}\n            </td>\n            <td>\n              {info.toId ? (\n                <PickerSelectedItem\n                  peerId={info.toId}\n                  className={styles.chatItem}\n                  forceShowSelf\n                  fluid\n                  clickArg={info.toId}\n                  onClick={handleOpenChat}\n                />\n              ) : lang('BoostingNoRecipient')}\n            </td>\n          </tr>\n          <tr>\n            <td className={styles.title}>\n              {lang('BoostingGift')}\n            </td>\n            <td>\n              {lang('BoostingTelegramPremiumFor', lang('Months', info.months, 'i'))}\n            </td>\n          </tr>\n          <tr>\n            <td className={styles.title}>\n              {lang('BoostingReason')}\n            </td>\n            <td className={buildClassName(info.giveawayMessageId && styles.clickable)} onClick={handleOpenGiveaway}>\n              {info.isFromGiveaway && !info.toId ? lang('BoostingIncompleteGiveaway')\n                : lang(info.isFromGiveaway ? 'BoostingGiveaway' : 'BoostingYouWereSelected')}\n            </td>\n          </tr>\n          <tr>\n            <td className={styles.title}>\n              {lang('BoostingDate')}\n            </td>\n            <td>\n              {formatDateTimeToString(info.date * 1000, lang.code, true)}\n            </td>\n          </tr>\n        </table>\n        <span className={styles.centered}>\n          {renderText(\n            info.usedAt ? lang('BoostingUsedLinkDate', formatDateTimeToString(info.usedAt * 1000, lang.code, true))\n              : lang('BoostingSendLinkToAnyone'),\n            ['simple_markdown'],\n          )}\n        </span>\n        <Button onClick={handleButtonClick}>\n          {canUse ? lang('BoostingUseLink') : lang('Close')}\n        </Button>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      isSlim\n      title={lang('lng_gift_link_title')}\n      contentClassName={styles.content}\n      onClose={closeGiftCodeModal}\n    >\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { message } = modal || {};\n    const chatMessage = message && selectChatMessage(global, message.chatId, message.messageId);\n    const sender = chatMessage && selectSender(global, chatMessage);\n\n    return {\n      currentUserId: global.currentUserId,\n      messageSender: sender,\n    };\n  },\n)(GiftCodeModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"dl10exNi\",\"picker-wrapper\":\"gxWY5c6x\",\"pickerWrapper\":\"gxWY5c6x\",\"picker-header\":\"h8N7eyob\",\"pickerHeader\":\"h8N7eyob\",\"picker-header-info\":\"Rth2Qu07\",\"pickerHeaderInfo\":\"Rth2Qu07\",\"selection-toggle\":\"B6eAugx8\",\"selectionToggle\":\"B6eAugx8\",\"foldersWrapper\":\"mwcvgD2S\",\"folders\":\"LKavx8ww\",\"folder\":\"qglLx5Dn\",\"button-text\":\"bgaRuEMs\",\"buttonText\":\"bgaRuEMs\",\"button-badge\":\"rTe14Z22\",\"buttonBadge\":\"rTe14Z22\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = hasChatsToAdd\n    ? lang('FolderLinkSubtitleChats', [newChatsCount, folder.title], undefined, newChatsCount)\n    : lang('FolderLinkSubtitleAlready', folder.title);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <Picker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {lang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <Picker\n          itemIds={invite.alreadyPeerIds}\n          lockedSelectedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n        />\n      </div>\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonJoinPlural', selectedPeerIds.length, 'i')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(suggestedPeerIds);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <Picker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n            />\n          </div>\n        </>\n      )}\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(lang('FolderLinkSubtitle', invite.title), ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {lang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n          </div>\n        </div>\n        <Picker\n          itemIds={invite.peerIds}\n          lockedSelectedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        size=\"smaller\"\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkButtonAdd', invite.title)}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport ChatlistNew from './ChatlistNew';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  modal?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  modal,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingInfo = usePrevious(modal) || modal;\n  const renderingFolder = usePrevious(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) return renderingFolder.title;\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) return renderingInfo.invite.title;\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: string) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab className={styles.folder} isActive badgeCount={folderTabNumber} isBadgeActive title={folderTitle} />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { invite, removal } = modal || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"FqyZSYhX\",\"description\":\"DkalJSBt\",\"secondary\":\"xNUKKd8T\",\"separator\":\"kiRrTaj3\",\"topIcon\":\"PKnc2DV2\",\"content\":\"qxOr0JyQ\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useLang from '../../hooks/useLang';\nimport useSelectorSignal from '../../hooks/useSelectorSignal';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Separator from '../ui/Separator';\nimport Icon from './Icon';\nimport SafeLink from './SafeLink';\n\nimport styles from './AboutAdsModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isRevenueSharing?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\nconst AboutAdsModal: FC<OwnProps> = ({\n  isOpen,\n  isRevenueSharing,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  const minLevelSignal = useSelectorSignal((global) => global.appConfig?.channelRestrictAdsLevelMin);\n  const minLevelToRestrictAds = useDerivedState(minLevelSignal);\n\n  const regularAdContent = useMemo(() => {\n    return (\n      <>\n        <h3>{lang('SponsoredMessageInfoScreen.Title')}</h3>\n        <p>{renderText(lang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n        <p>{renderText(lang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n        <p>{renderText(lang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n        <p>\n          <SafeLink\n            url={lang('SponsoredMessageAlertLearnMoreUrl')}\n            text={lang('SponsoredMessageAlertLearnMoreUrl')}\n          />\n        </p>\n        <p>{renderText(lang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      </>\n    );\n  }, [lang]);\n\n  const revenueSharingAdContent = useMemo(() => {\n    return (\n      <>\n        <div className={styles.topIcon}><Icon name=\"channel\" /></div>\n        <h3 className={styles.title}>{lang('AboutRevenueSharingAds')}</h3>\n        <p className={buildClassName(styles.description, styles.secondary)}>\n          {lang('RevenueSharingAdsAlertSubtitle')}\n        </p>\n        <ListItem\n          isStatic\n          multiline\n          icon=\"lock\"\n        >\n          <span className=\"title\">{lang('RevenueSharingAdsInfo1Title')}</span>\n          <span className=\"subtitle\">\n            {renderText(lang('RevenueSharingAdsInfo1Subtitle'), ['simple_markdown'])}\n          </span>\n        </ListItem>\n        <ListItem\n          isStatic\n          multiline\n          icon=\"revenue-split\"\n        >\n          <span className=\"title\">{lang('RevenueSharingAdsInfo2Title')}</span>\n          <span className=\"subtitle\">\n            {renderText(lang('RevenueSharingAdsInfo2Subtitle'), ['simple_markdown'])}\n          </span>\n        </ListItem>\n        <ListItem\n          isStatic\n          multiline\n          icon=\"nochannel\"\n        >\n          <span className=\"title\">{lang('RevenueSharingAdsInfo3Title')}</span>\n          <span className=\"subtitle\">\n            {renderText(lang('RevenueSharingAdsInfo3Subtitle', minLevelToRestrictAds), ['simple_markdown'])}\n          </span>\n        </ListItem>\n        <Separator className={styles.separator} />\n        <h3 className={styles.title}>{renderText(lang('RevenueSharingAdsInfo4Title'), ['simple_markdown'])}</h3>\n        <p className={styles.description}>\n          {renderText(lang('RevenueSharingAdsInfo4Subtitle2', ''), ['simple_markdown'])}\n          <SafeLink\n            url={lang('PromoteUrl')}\n            text={lang('LearnMoreArrow')}\n          />\n        </p>\n      </>\n    );\n  }, [lang, minLevelToRestrictAds]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      contentClassName={styles.content}\n      onClose={onClose}\n    >\n      {isRevenueSharing ? revenueSharingAdContent : regularAdContent}\n      <Button\n        size=\"smaller\"\n        onClick={onClose}\n      >\n        {lang('RevenueSharingAdsUnderstood')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(AboutAdsModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"qJDgUtjV\",\"modalTitle\":\"ZAdG13Ah\",\"optionText\":\"oWujoaSC\",\"option\":\"aFbjDzNo\",\"optionButton\":\"VbE0HzDs\",\"sectionTitle\":\"jrA2dOiw\",\"description\":\"k71Zrc_P\",\"title\":\"mMmY6YR4\",\"titleMultiline\":\"lVVyV0py\",\"subtitle\":\"gSkAFc4u\",\"transition\":\"HjsGIG6e\"};","import React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportAdModal.module.scss';\n\nconst ADDED_PADDING = 40;\n\nexport type OwnProps = {\n  modal: TabState['reportAdModal'];\n};\n\nconst ReportAdModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportSponsoredMessage, closeReportAdModal, openPreviousReportAdModal,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const { chatId, randomId } = modal!;\n    reportSponsoredMessage({ chatId, randomId, option });\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    if (!renderingDepth) {\n      closeReportAdModal();\n      return;\n    }\n\n    openPreviousReportAdModal();\n  });\n\n  const bottomText = useMemo(() => {\n    if (!modal) return undefined;\n    const template = lang('lng_report_sponsored_reported_learn');\n    const parts = template.split('{link}');\n    return [\n      parts[0],\n      <SafeLink text={lang('lng_report_sponsored_reported_link')} url={lang('ReportAd.Help_URL')} />,\n      parts[1],\n    ];\n  }, [lang, modal]);\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(renderingDepth ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <Icon name={renderingDepth ? 'arrow-left' : 'close'} />\n        </Button>\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={styles.title}>{lang('ReportAd')}</h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.subtitle]);\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      header={header}\n      onClose={closeReportAdModal}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3>\n          {renderingSection?.options.map((option) => (\n            <ListItem\n              narrow\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n        </div>\n        <p className={styles.description}>{bottomText}</p>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAdModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <div className=\"dialog-buttons-column\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        {canPinForAll && (\n          <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n            {contactName\n              ? renderText(lang('Conversation.PinMessagesFor', contactName))\n              : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          </Button>\n        )}\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(isActive ? { 'Mod+C': handleCopy } : undefined);\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanDeleteSelectedMessages, selectCurrentChat, selectTabState, selectUser,\n} from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useLastCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: true });\n  });\n\n  const handleDeleteMessageForSelf = useLastCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds! });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds!, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  });\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      <div className={canDeleteForAll ? 'dialog-buttons-column' : 'dialog-buttons'}>\n        {canDeleteForAll && (\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n            {contactName\n              ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n              : lang('Conversation.DeleteMessagesForEveryone')}\n          </Button>\n        )}\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n          {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = selectTabState(global).selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { IconName } from '../../types/icons';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList, selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(isActive);\n\n  const handleExitMessageSelectMode = useLastCallback(() => {\n    exitMessageSelectMode();\n  });\n\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? openDeleteModal : undefined,\n        onDelete: canDeleteMessages ? openDeleteModal : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useLastCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  });\n\n  const handleDownload = useLastCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  });\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: IconName, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n        aria-label={label}\n      >\n        <i className={buildClassName('icon', `icon-${icon}`)} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={handleExitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && canForwardMessages && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && !hasProtectedMessage && (\n              renderButton('download', lang('lng_media_download'), handleDownload)\n            )}\n            {!hasProtectedMessage && (\n              renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n            )}\n            {canDeleteMessages && (\n              renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, true)\n            )}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const isForwardModalOpen = tabState.forwardMessages.isModalShown;\n    const isAnyModalOpen = Boolean(isForwardModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall);\n\n    return {\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n    };\n  },\n)(MessageSelectToolbar));\n","import React, { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/date/dateFormat';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport styles from './SeenByModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  seenByDates?: Record<string, number>;\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction SeenByModal({\n  isOpen,\n  seenByDates,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingSeenByDates]);\n\n  const handleClick = useLastCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleCloseSeenByModal = useLastCallback(() => {\n    closeSeenByModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className={buildClassName(styles.modal, 'narrow')}\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {memberIds && memberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"message-read\"\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      seenByDates: selectChatMessage(global, chatId, messageId)?.seenByDates,\n    };\n  },\n)(SeenByModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"slqA9gR2\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"tauadiDm\",\"icon\":\"i4wZg_0J\",\"header\":\"MQxuEIRA\",\"desc\":\"AEAN1Au4\",\"separator\":\"sXXb5yOS\",\"button\":\"F7owtTHj\",\"closeButton\":\"i6iFv9YE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTabState, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport Modal, { ANIMATION_DURATION } from '../ui/Modal';\nimport Separator from '../ui/Separator';\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\nimport Icon from './Icon';\n\nimport styles from './PrivacySettingsNoticeModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isReadDate?: boolean;\n};\n\nconst CLOSE_ANIMATION_DURATION = ANIMATION_DURATION + ANIMATION_END_DELAY;\n\nconst PrivacySettingsNoticeModal = ({ isOpen, isReadDate, user }: OwnProps & StateProps) => {\n  const lang = useLang();\n  const {\n    updateGlobalPrivacySettings,\n    openPremiumModal,\n    closePrivacySettingsNoticeModal,\n    showNotification,\n    setPrivacyVisibility,\n    loadUser,\n  } = getActions();\n  const userName = getUserFirstOrLastName(user);\n\n  const handleShowReadTime = useLastCallback(() => {\n    updateGlobalPrivacySettings({ shouldHideReadMarks: false });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumReadSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleShowLastSeen = useLastCallback(() => {\n    setPrivacyVisibility({\n      privacyKey: 'lastSeen',\n      visibility: 'everybody',\n      onSuccess: () => loadUser({ userId: user!.id }),\n    });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumLastSeenSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleOpenPremium = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      openPremiumModal({ initialSection: 'last_seen' });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleClose = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n  });\n\n  return (\n    <Modal isSlim isOpen={isOpen} onClose={handleClose}>\n      <div className={styles.container} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className={styles.closeButton}\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={handleClose}\n          ariaLabel=\"Close\"\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <AnimatedIconWithPreview\n          tgsUrl={isReadDate ? LOCAL_TGS_URLS.ReadTime : LOCAL_TGS_URLS.LastSeen}\n          size={84}\n          className={styles.icon}\n          nonInteractive\n          noLoop\n        />\n        <h2 className={styles.header}>\n          {lang(isReadDate ? 'PremiumReadHeader1' : 'PremiumLastSeenHeader1')}\n        </h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(\n              isReadDate ? 'PremiumReadText1' : 'PremiumLastSeenText1Locked',\n              userName,\n            ),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          size=\"smaller\"\n          onClick={isReadDate ? handleShowReadTime : handleShowLastSeen}\n          className={styles.button}\n        >\n          {lang(isReadDate ? 'PremiumReadButton1' : 'PremiumLastSeenButton1')}\n        </Button>\n        <Separator className={styles.separator}>{lang('PremiumOr')}</Separator>\n        <h2 className={styles.header}>{lang('PremiumReadHeader2')}</h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(isReadDate ? 'PremiumReadText2' : 'PremiumLastSeenText2', userName),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          withPremiumGradient\n          size=\"smaller\"\n          onClick={handleOpenPremium}\n          className={styles.button}\n        >\n          {lang('PremiumLastSeenButton2')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(\n  withGlobal<OwnProps>((global): StateProps => {\n    const { chatId, isReadDate } = selectTabState(global).privacySettingsNoticeModal || {};\n    const user = chatId ? selectUser(global, chatId) : undefined;\n\n    return { user, isReadDate };\n  })(PrivacySettingsNoticeModal),\n);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { getReactionKey, isSameReaction } from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/date/dateFormat';\nimport { unique } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByDates'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByDates,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on chats or users, so we avoid them\n  const chatsById = getGlobal().chats.byId;\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    startClosing();\n  });\n\n  const handleClick = useLastCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  });\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const peerIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ peerId }) => peerId);\n    }\n\n    const seenByUserIds = Object.keys(seenByDates || {});\n\n    return unique(reactors?.reactions.map(({ peerId }) => peerId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByDates]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, peerIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon icon-heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined} className=\"reactor-list-wrapper\">\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (peerId) => {\n                const peer = usersById[peerId] || chatsById[peerId];\n\n                const peerReactions = reactors?.reactions.filter((reactor) => reactor.peerId === peerId);\n                const items: React.ReactNode[] = [];\n                const seenByUser = seenByDates?.[peerId];\n\n                peerReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-${getReactionKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <Avatar peer={peer} size=\"medium\" />\n                      <div className=\"info\">\n                        <FullNameTitle peer={peer} withEmojiStatus />\n                        <span className=\"status\" dir=\"auto\">\n                          <i className=\"icon icon-heart-outline status-icon\" />\n                          {formatDateAtTime(lang, r.addedDate * 1000)}\n                        </span>\n                      </div>\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n\n                if (!chosenTab && !peerReactions?.length) {\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-seen-by`}\n                      className=\"chat-item-clickable scroll-item small-icon\"\n                      // eslint-disable-next-line react/jsx-no-bind\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <PrivateChatInfo\n                        userId={peerId}\n                        noStatusOrTyping\n                        avatarSize=\"medium\"\n                        status={seenByUser ? formatDateAtTime(lang, seenByUser * 1000) : undefined}\n                        statusIcon=\"message-read\"\n                      />\n                    </ListItem>,\n                  );\n                }\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByDates: message?.seenByDates,\n      availableReactions: global.reactions.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_ANDROID } from '../../util/windowEnvironment';\n\nimport useFlag from '../../hooks/useFlag';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useLastCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  });\n\n  const handleCancelAnimation = useLastCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  });\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceAlways\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport {\n  selectLanguageCode,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst ChatLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const {\n    requestMessageTranslation,\n    closeChatLanguageModal,\n    setSettingOption,\n    requestChatTranslation,\n  } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useLang();\n\n  const handleSelect = useLastCallback((langCode: string) => {\n    if (!chatId) return;\n\n    if (messageId) {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: langCode });\n    } else {\n      setSettingOption({ translationLanguage: langCode });\n      requestChatTranslation({ chatId, toLanguageCode: langCode });\n    }\n\n    closeChatLanguageModal();\n  });\n\n  const handleSearch = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  });\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeChatLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={buildClassName(styles.listItem, 'no-icon')}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).chatLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId\n      ? messageId\n        ? selectRequestedMessageTranslationLanguage(global, chatId, messageId)\n        : selectRequestedChatTranslationLanguage(global, chatId)\n      : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(ChatLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aMjNU9gm\",\"list-item\":\"T3An6Hoz\",\"listItem\":\"T3An6Hoz\",\"title\":\"dQ9wwFu1\",\"subtitle\":\"m_J41YYl\",\"languages\":\"r3YNWDQr\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"WEJIbFQj\",\"closeButton\":\"_vwPuDEM\",\"icon\":\"BUiGM8qZ\",\"title\":\"Q3NhXpNI\",\"description\":\"frZbGQ0G\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiCountryCode } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatDateAtTime } from '../../../util/date/dateFormat';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/Icon';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './CollectibleInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['collectibleInfoModal'];\n};\n\ntype StateProps = {\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst TOP_ICON_SIZE = 60;\n\nconst CollectibleInfoModal: FC<OwnProps & StateProps> = ({\n  modal,\n  phoneCodeList,\n}) => {\n  const {\n    closeCollectibleInfoModal,\n    openChat,\n    openUrl,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const isUsername = modal?.type === 'username';\n\n  const handleClose = useLastCallback(() => {\n    closeCollectibleInfoModal();\n  });\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: modal!.userId });\n    handleClose();\n  });\n\n  const handleOpenUrl = useLastCallback(() => {\n    openUrl({\n      url: modal!.url,\n      shouldSkipModal: true,\n    });\n    handleClose();\n  });\n\n  const handleCopy = useLastCallback(() => {\n    const text = isUsername ? formatUsername(modal!.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal!.collectible);\n    copyTextToClipboard(text);\n    showNotification({\n      message: lang(isUsername ? 'UsernameCopied' : 'PhoneCopied'),\n    });\n    handleClose();\n  });\n\n  const title = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameTitle' : 'FragmentPhoneTitle';\n    const formattedCollectible = isUsername\n      ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal.collectible);\n    return lang(key, formattedCollectible);\n  }, [modal, isUsername, phoneCodeList, lang]);\n\n  const description = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameMessage' : 'FragmentPhoneMessage';\n    const date = formatDateAtTime(lang, modal.purchaseDate * 1000);\n    const currency = formatCurrency(modal.amount, modal.currency, lang.code);\n    const cryptoCurrency = formatCurrency(modal.cryptoAmount, modal.cryptoCurrency, lang.code);\n    const paid = `${cryptoCurrency} (${currency})`;\n    return lang(key, [date, paid]);\n  }, [modal, isUsername, lang]);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      isSlim\n      contentClassName={styles.content}\n      onClose={closeCollectibleInfoModal}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.icon}>\n        <AnimatedIconWithPreview\n          tgsUrl={isUsername ? LOCAL_TGS_URLS.Mention : LOCAL_TGS_URLS.Fragment}\n          size={TOP_ICON_SIZE}\n        />\n      </div>\n      <h3 className={styles.title}>\n        {title && renderText(title, ['simple_markdown'])}\n      </h3>\n      <PickerSelectedItem\n        fluid\n        className={styles.chip}\n        peerId={modal?.userId}\n        forceShowSelf\n        onClick={handleOpenChat}\n      />\n      <p className={styles.description}>\n        {description && renderText(description, ['simple_markdown'])}\n      </p>\n      <div className=\"dialog-buttons\">\n        <Button className=\"confirm-dialog-button\" onClick={handleOpenUrl}>\n          {lang('FragmentUsernameOpen')}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleCopy}>\n          {lang(isUsername ? 'FragmentUsernameCopy' : 'FragmentPhoneCopy')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { countryList } = global;\n\n    return {\n      phoneCodeList: countryList.phoneCodes,\n    };\n  },\n)(CollectibleInfoModal));\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { GlobalState, TabState } from '../../../../global/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  searchChatId?: string;\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  isChatProtected?: boolean;\n  shouldWarnAboutSvg?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/date/dateFormat';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p\n              className={buildClassName(\n                'section-heading',\n                isFirst && 'section-heading-first',\n                !isFirst && 'section-heading-with-border',\n              )}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n            isDownloading={activeDownloads[message.chatId]?.ids?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiMessageOutgoingStatus,\n  ApiUser,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageVideo,\n  getPrivateChatUserId,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/date/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  });\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  const peer = privateChatUser || chat;\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        peer={peer}\n        isSavedMessages={privateChatUser?.isSelf}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={peer}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n        draggable={false}\n      />\n      {getMessageVideo(message) && <i className=\"icon icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      ...(privateChatUserId && { privateChatUser }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport { formatDateToString } from '../../../util/date/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport TopicIcon from '../../common/TopicIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const topic = chat?.topics?.[topicId];\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openThread } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      if (!searchChatId) return;\n      openThread({ chatId: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds!.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId } } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { getPrivateChatUserId, isUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectIsChatPinned, selectNotifyExceptions,\n  selectNotifySettings, selectUser,\n} from '../../../global/selectors';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const handleChatFolderChange = useCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  }, [markRenderChatFolderModal, openChatFolderModal]);\n\n  const handleMute = useCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  }, [markRenderMuteModal, openMuteModal]);\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleMute,\n    handleChatFolderChange,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo\n          userId={chatId}\n          withUsername={withUsername}\n          withStory\n          avatarSize=\"large\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={chatId}\n          withUsername={withUsername}\n          avatarSize=\"large\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar peer={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3\n            className={buildClassName(\n              'section-heading mt-0 recent-chats-header',\n              !topUserIds && 'without-border',\n            )}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { ALL_FOLDER_ID, GLOBAL_SUGGESTED_CHANNELS_ID } from '../../../config';\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  isChatChannel,\n} from '../../../global/helpers';\nimport { selectSimilarChannelIds, selectTabState } from '../../../global/selectors';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { unique } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  isChannelList?: boolean;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  contactIds?: string[];\n  accountChatIds?: string[];\n  accountUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  suggestedChannelIds?: string[];\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  isChannelList,\n  searchQuery,\n  searchDate,\n  dateSearchQuery,\n  currentUserId,\n  contactIds,\n  accountChatIds,\n  accountUserIds,\n  globalChatIds,\n  globalUserIds,\n  foundIds,\n  globalMessagesByChatId,\n  fetchingStatus,\n  suggestedChannelIds,\n  onReset,\n  onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId, loadChannelRecommendations,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const chatSelectionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  useEffectOnce(() => {\n    if (isChannelList) loadChannelRecommendations({});\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: isChannelList ? 'channels' : 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!isChannelList && (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2))) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n\n    const orderedChatIds = getOrderedIds(ALL_FOLDER_ID) ?? [];\n    const filteredChatIds = orderedChatIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n    const localChatIds = filterChatsByName(lang, filteredChatIds, chatsById, searchQuery, currentUserId);\n\n    if (isChannelList) return localChatIds;\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(contactIds || []),\n    ];\n\n    const localContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    const localPeerIds = unique([\n      ...localContactIds,\n      ...localChatIds,\n    ]);\n\n    const accountPeerIds = unique([\n      ...(accountChatIds ?? []),\n      ...(accountUserIds ?? []),\n    ].filter((accountPeerId) => !localPeerIds.includes(accountPeerId)));\n\n    return [\n      ...sortChatIds(localPeerIds, undefined, currentUserId ? [currentUserId] : undefined),\n      ...sortChatIds(accountPeerIds),\n    ];\n  }, [searchQuery, lang, currentUserId, contactIds, accountChatIds, accountUserIds, isChannelList]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length || isChannelList, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const ids = unique([...globalChatIds, ...globalUserIds]);\n    const filteredIds = ids.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n\n    return sortChatIds(filteredIds, true);\n  }, [globalChatIds, globalUserIds, isChannelList, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter(Boolean);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const chatsById = getGlobal().chats.byId;\n\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate && !isChannelList) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && !isChannelList && (\n        <div\n          className=\"chat-selection no-scrollbar\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              peerId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang(isChannelList ? 'SearchMyChannels' : 'DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(suggestedChannelIds?.length) && !searchQuery && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {lang('SearchRecommendedChannels')}\n          </h3>\n          {suggestedChannelIds.map((id) => {\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isChannelList }): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const {\n      currentUserId, messages,\n    } = global;\n\n    if (!contactIds) {\n      return {};\n    }\n\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = selectTabState(global).globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: accountChatIds, userIds: accountUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.[isChannelList ? 'channels' : 'text']?.foundIds;\n    const { similarChannelIds } = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID) || {};\n\n    return {\n      currentUserId,\n      contactIds,\n      accountChatIds,\n      accountUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      fetchingStatus,\n      suggestedChannelIds: similarChannelIds,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getMessageDocument } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/date/dateFormat';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Document from '../../common/Document';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  shouldWarnAboutSvg,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p\n              className={buildClassName(\n                'section-heading',\n                isFirst && 'section-heading-first',\n                !isFirst && 'section-heading-with-border',\n              )}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.ids?.includes(message.id)}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/date/dateFormat';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport WebLink from '../../common/WebLink';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p\n              className={buildClassName(\n                'section-heading',\n                isFirst && 'section-heading-first',\n                !isFirst && 'section-heading-with-border',\n              )}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Media from '../../common/Media';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport ChatMessage from './ChatMessage';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      mediaId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseDateString } from '../../../util/date/dateFormat';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport AudioResults from './AudioResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport ChatResults from './ChatResults';\nimport FileResults from './FileResults';\nimport LinkResults from './LinkResults';\nimport MediaResults from './MediaResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.ChannelList, title: 'ChannelsTab' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(2), // Skip ChatList and ChannelList, replaced with All Messages\n];\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const tabs = chatId ? CHAT_TABS : TABS;\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    const tab = tabs[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  });\n\n  const handleSearchDateSelect = useLastCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        renderCount={tabs.length}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n            case GlobalSearchContent.ChannelList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  isChannelList={currentContent === GlobalSearchContent.ChannelList}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaState, TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { isUserId } from '../../../../global/helpers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport Checkbox from '../../../ui/Checkbox';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  shouldHideChatTypes?: boolean;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n  onSaveFilter: VoidFunction;\n  isActive?: boolean;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\ntype StateProps = {\n  maxChats: number;\n};\n\nconst SettingsFoldersChatsPicker: FC<OwnProps & StateProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  shouldHideChatTypes,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n  maxChats,\n  onSaveFilter,\n  isActive,\n}) => {\n  const { openLimitReachedModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const [isTouched, setIsTouched] = useState(false);\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestMutation(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      if (selectedIds.length >= maxChats && mode === 'included') {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      newSelectedIds.push(id);\n    }\n    setIsTouched(true);\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange, maxChats, mode, openLimitReachedModal]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    setIsTouched(true);\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={buildClassName('icon', `icon-${type.icon}`)} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            peerId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        <InputText\n          ref={inputRef}\n          value={filterValue}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll fab-padding-bottom\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <div key=\"header\">\n            {!shouldHideChatTypes && (\n              <>\n                <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('FilterChatTypes')}\n                </h4>\n                {chatTypes.map(renderChatType)}\n                <div className=\"picker-list-divider\" />\n              </>\n            )}\n            <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </div>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <i className=\"icon icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatsPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport { unique } from '../../../../util/iteratees';\n\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport Loading from '../../../ui/Loading';\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      shouldHideChatTypes={shouldHideChatTypes}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n      onSaveFilter={onSaveFilter}\n      isActive={isActive}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatlistExportedInvite } from '../../../../api/types';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { isUserId } from '../../../../global/helpers';\nimport { selectCanShareFolder } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n  onSaveFolder: (cb?: VoidFunction) => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n  maxChatLists: number;\n  chatListCount: number;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nexport const ERROR_NO_TITLE = 'Please provide a title for this folder.';\nexport const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n  maxChatLists,\n  chatListCount,\n  onSaveFolder,\n}) => {\n  const {\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: 'setIsLoading', payload: true });\n\n    onSaveFolder(() => {\n      setTimeout(() => {\n        onReset();\n      }, SUBMIT_TIMEOUT);\n    });\n  }, [dispatch, onSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) {\n      if (isCreating) {\n        onSaveFolder(onShareFolder);\n      }\n      return;\n    }\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (chatListCount >= maxChatLists && !state.folder.isChatList) {\n      openLimitReachedModal({\n        limit: 'chatlistJoined',\n      });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        onSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n      return;\n    }\n\n    openLimitReachedModal({\n      limit: 'chatlistInvites',\n    });\n  }, [\n    invites, state.folderId, state.isTouched, chatListCount, maxInviteLinks, isCreating, onSaveFolder,\n    onShareFolder, lang, maxChatLists, state.folder.isChatList,\n  ]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      onSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [onSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item pt-3\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary mb-0\"\n              icon=\"add\"\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FolderLinkScreen.Title')}\n          </h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={handleCreateInviteClick}\n          >\n            {lang('ChatListFilter.CreateLinkNew')}\n          </ListItem>\n\n          {invites?.map((invite) => (\n            <ListItem\n              className=\"settings-folders-list-item mb-0\"\n              icon=\"link\"\n              multiline\n              onClick={handleEditInviteClick}\n              clickArg={invite.url}\n            >\n              <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n              <span className=\"subtitle\">\n                {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n              </span>\n            </ListItem>\n          ))}\n\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n    const chatListCount = Object.values(byId).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      chatListCount,\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { isBetween } from '../../../../util/math';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\n\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport usePrevious from '../../../../hooks/usePrevious';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\nimport Draggable from '../../../ui/Draggable';\nimport ListItem from '../../../ui/ListItem';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 68;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePrevious(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: lang('FilterAllChats'),\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"with-icon mb-2\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <i className=\"icon icon-add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item mb-2 no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                    allowSelection\n                  >\n                    <span className=\"title\">\n                      {folder.title}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item mb-2 no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderText(folder.title, ['emoji'])}\n                    {isBlocked && <i className=\"icon icon-lock-badge settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <i className=\"icon icon-link mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{renderText(folder.title, ['emoji'])}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { partition } from '../../../../util/iteratees';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport LinkField from '../../../common/LinkField';\nimport Picker from '../../../common/Picker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  title?: string;\n  includedChatIds?: string[];\n  pinnedChatIds?: string[];\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  title,\n  includedChatIds,\n  pinnedChatIds,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId && isActive) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, isActive, url]);\n\n  const handleRevoke = useLastCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  });\n\n  const itemIds = useMemo(() => {\n    return (includedChatIds || []).concat(pinnedChatIds || []);\n  }, [includedChatIds, pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  const isFirstRenderRef = useRef(true);\n  useEffectWithPrevDeps(([prevUrl]) => {\n    if (prevUrl !== url) {\n      isFirstRenderRef.current = true;\n    }\n    if (!isFirstRenderRef.current) return;\n    isFirstRenderRef.current = false;\n    if (!url) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [url, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useLastCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: lang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    if (!folderId || !url || !isTouched) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  });\n\n  const chatsCount = selectedIds.length;\n  const isDisabled = !chatsCount || isLoading;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll SettingsFoldersChatsPicker\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('FolderLinkScreen.TitleDescriptionSelected', [title, chatsCount]),\n            ['simple_markdown'])}\n        </p>\n      </div>\n\n      <LinkField\n        className=\"settings-item\"\n        link={!url ? lang('Loading') : url}\n        withShare\n        onRevoke={handleRevoke}\n        isDisabled={!chatsCount || isTouched}\n      />\n\n      <div className=\"settings-item settings-item-chatlist\">\n        <Picker\n          itemIds={itemIds}\n          lockedSelectedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n          isRoundCheckbox\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isDisabled}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      title: folder?.title,\n      includedChatIds: folder?.includedChatIds,\n      pinnedChatIds: folder?.pinnedChatIds,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsFoldersEdit, { ERROR_NO_CHATS, ERROR_NO_TITLE } from './SettingsFoldersEdit';\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    openShareChatFolderModal,\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const isCreating = state.mode === 'create';\n\n  const saveState = useCallback((newState: FoldersState) => {\n    const { title } = newState.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return false;\n    }\n\n    const {\n      selectedChatIds: includedChatIds,\n      selectedChatTypes: includedChatTypes,\n    } = selectChatFilters(newState, 'included');\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return false;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: newState.folderId!, folderUpdate: newState.folder });\n    } else {\n      addChatFolder({ folder: newState.folder as ApiChatFolder });\n    }\n\n    dispatch({ type: 'setError', payload: undefined });\n    dispatch({ type: 'setIsTouched', payload: false });\n\n    return true;\n  }, [dispatch, isCreating]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    if (!saveState(state)) {\n      return;\n    }\n    cb?.();\n  }, [saveState, state]);\n\n  const handleSaveFilter = useCallback(() => {\n    const newState = dispatch({ type: 'saveFilters' });\n    handleReset();\n    saveState(newState);\n  }, [dispatch, handleReset, saveState]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    dispatch({ type: 'setIsChatlist', payload: true });\n    onScreenSelect(SettingsScreens.FoldersShare);\n  }, [dispatch, onScreenSelect, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    onScreenSelect(SettingsScreens.FoldersShare);\n  }, [onScreenSelect, state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n          onSaveFolder={handleSaveFolder}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PasswordForm from '../../common/PasswordForm';\nimport PasswordMonkey from '../../common/PasswordMonkey';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram Web A.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram Web A and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { decryptSession } from '../../../../util/passcode';\n\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPremiumSection } from '../../../global/types';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PremiumIcon from '../../common/PremiumIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  premiumSection?: ApiPremiumSection;\n};\n\nfunction PremiumStatusItem({ premiumSection }: OwnProps) {\n  const { openPremiumModal } = getActions();\n  const lang = useLang();\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal({ initialSection: premiumSection }));\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        leftElement={<PremiumIcon className=\"icon\" withGradient big />}\n        onClick={handleOpenPremiumModal}\n      >\n        {lang('PrivacyLastSeenPremium')}\n      </ListItem>\n      <p\n        className=\"settings-item-description-larger premium-info\"\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {lang('lng_messages_privacy_premium_about')}\n      </p>\n    </div>\n  );\n}\n\nexport default memo(PremiumStatusItem);\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Icon from '../../common/Icon';\n\nimport styles from './PrivacyLockedOption.module.scss';\n\ntype OwnProps = {\n  label: string;\n};\n\nfunction PrivacyLockedOption({ label }: OwnProps) {\n  const lang = useLang();\n  const { showNotification } = getActions();\n\n  return (\n    <div\n      className={styles.contactsAndPremiumOptionTitle}\n      onClick={() => showNotification({ message: lang('OptionPremiumRequiredMessage') })}\n    >\n      <span>{label}</span>\n      <Icon name=\"lock-badge\" className={styles.lockIcon} />\n    </div>\n  );\n}\n\nexport default memo(PrivacyLockedOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts_and_premium_option-title\":\"TGUdGos3\",\"contactsAndPremiumOptionTitle\":\"TGUdGos3\",\"lock-icon\":\"jWxrRbkh\",\"lockIcon\":\"jWxrRbkh\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { selectIsCurrentUserPremium, selectNewNoncontactPeersRequirePremium } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  canLimitNewMessagesWithoutPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nfunction PrivacyMessages({\n  isActive,\n  canLimitNewMessagesWithoutPremium,\n  shouldNewNonContactPeersRequirePremium,\n  isCurrentUserPremium,\n  onReset,\n}: OwnProps & StateProps) {\n  const { updateGlobalPrivacySettings } = getActions();\n  const lang = useLang();\n\n  const canChange = isCurrentUserPremium || canLimitNewMessagesWithoutPremium;\n\n  const options = useMemo(() => {\n    return [\n      { value: 'everybody', label: lang('P2PEverybody') },\n      {\n        value: 'contacts_and_premium',\n        label: canChange ? (\n          lang('PrivacyMessagesContactsAndPremium')\n        ) : (\n          <PrivacyLockedOption label={lang('PrivacyMessagesContactsAndPremium')} />\n        ),\n        hidden: !canChange,\n      },\n    ];\n  }, [lang, canChange]);\n\n  const handleChange = useLastCallback((privacy: string) => {\n    updateGlobalPrivacySettings({ shouldNewNonContactPeersRequirePremium: privacy === 'contacts_and_premium' });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('PrivacyMessagesTitle')}\n        </h4>\n        <RadioGroup\n          name=\"privacy-messages\"\n          options={options}\n          onChange={handleChange}\n          selected={shouldNewNonContactPeersRequirePremium ? 'contacts_and_premium' : 'everybody'}\n        />\n        <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Privacy.Messages.SectionFooter')}\n        </p>\n      </div>\n      {!canChange && <PremiumStatusItem premiumSection=\"message_privacy\" />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    shouldNewNonContactPeersRequirePremium: selectNewNoncontactPeersRequirePremium(global),\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    canLimitNewMessagesWithoutPremium: global.appConfig?.canLimitNewMessagesWithoutPremium,\n  };\n})(PrivacyMessages));\n","import type { ApiSession } from '../../../../api/types';\nimport type { DeviceType } from '../../../../types/icons/device';\n\nexport default function getSessionIcon(session: ApiSession): DeviceType {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"M84mrPgu\",\"settingsActiveSession\":\"M84mrPgu\",\"iconDevice\":\"Add8P_K4\",\"iconDevice__android\":\"onkXVGY4\",\"iconDeviceAndroid\":\"onkXVGY4\",\"iconDevice__apple\":\"xw13aT8u\",\"iconDeviceApple\":\"xw13aT8u\",\"iconDevice__brave\":\"HESrGUdv\",\"iconDeviceBrave\":\"HESrGUdv\",\"iconDevice__chrome\":\"Vpej7wm7\",\"iconDeviceChrome\":\"Vpej7wm7\",\"iconDevice__edge\":\"ueWE77x9\",\"iconDeviceEdge\":\"ueWE77x9\",\"iconDevice__firefox\":\"_lMTmvya\",\"iconDeviceFirefox\":\"_lMTmvya\",\"iconDevice__linux\":\"cDVfvyG_\",\"iconDeviceLinux\":\"cDVfvyG_\",\"iconDevice__opera\":\"nWqlTxZt\",\"iconDeviceOpera\":\"nWqlTxZt\",\"iconDevice__safari\":\"ldFLp1Gf\",\"iconDeviceSafari\":\"ldFLp1Gf\",\"iconDevice__samsung\":\"VHNORBGL\",\"iconDeviceSamsung\":\"VHNORBGL\",\"iconDevice__ubuntu\":\"QBVivtdu\",\"iconDeviceUbuntu\":\"QBVivtdu\",\"iconDevice__unknown\":\"GbjIgrwU\",\"iconDeviceUnknown\":\"GbjIgrwU\",\"iconDevice__vivaldi\":\"yieVnjoI\",\"iconDeviceVivaldi\":\"yieVnjoI\",\"iconDevice__windows\":\"_0dnTFOE\",\"iconDeviceWindows\":\"_0dnTFOE\",\"iconDevice__xbox\":\"fbCjjDpU\",\"iconDeviceXbox\":\"fbCjjDpU\",\"title\":\"c6edjhlh\",\"note\":\"lRqTZAYn\",\"date\":\"oLnN6crs\",\"box\":\"wVEXuPlZ\",\"actionHeader\":\"olQS2T1n\",\"actionName\":\"KuX1APpO\",\"headerButton\":\"VT8pZfMu\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/date/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/date/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // eslint-disable-next-line max-len\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)}`} iconClassName=\"icon-device\">\n          <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)}`}\n        iconClassName=\"icon-device\"\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wd0fmiSY\",\"avatar\":\"OhZHdRsP\",\"title\":\"EQ7__xGn\",\"note\":\"YRYk96ki\",\"box\":\"kmCTIfvf\",\"action-header\":\"qkq5Fa0V\",\"actionHeader\":\"qkq5Fa0V\",\"action-name\":\"zFYUiy13\",\"actionName\":\"zFYUiy13\",\"header-button\":\"lUf0RJ2h\",\"headerButton\":\"lUf0RJ2h\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): StateProps => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"v0wP46TR\",\"clear-help\":\"WnnxcARX\",\"clearHelp\":\"WnnxcARX\",\"subtitle\":\"uEUfjByC\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/date/dateFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} peer={bot} size=\"tiny\" />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className={buildClassName('subtitle', styles.subtitle)}>{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  }, [firstSticker, onClick]);\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      narrow\n      className={buildClassName('StickerSetCard', className)}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-menu-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\nimport type { IRadioOption } from '../../ui/CheckboxGroup';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { partition, unique } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'language' | 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  language,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n  const [displayedOptions, setDisplayedOptions] = useState<IRadioOption[]>([]);\n  const [search, setSearch] = useState('');\n\n  const options: IRadioOption[] = useMemo(() => {\n    return SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n  }, [language]);\n\n  useEffect(() => {\n    if (!isActive) setSearch('');\n  }, [isActive]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (prevIsActive === isActive) return;\n    if (isActive && displayedOptions.length) return;\n\n    const current = options.find((option) => option.value === language);\n    const otherLanguages = options.filter((option) => option.value !== language);\n\n    const [selected, unselected] = partition(otherLanguages, (option) => doNotTranslate.includes(option.value));\n\n    setDisplayedOptions([current!, ...selected, ...unselected]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, options]);\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value, checked } = event.currentTarget;\n    let newDoNotTranslate: string[];\n    if (checked) {\n      newDoNotTranslate = unique([...doNotTranslate, value]);\n    } else {\n      newDoNotTranslate = doNotTranslate.filter((v) => v !== value);\n    }\n\n    setSettingOption({\n      doNotTranslate: newDoNotTranslate,\n    });\n  }, [doNotTranslate, setSettingOption]);\n\n  const handleSearch = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  }, []);\n\n  const filteredDisplayedOptions = useMemo(() => {\n    if (!search.trim()) {\n      return displayedOptions;\n    }\n\n    return displayedOptions.filter((option) => (\n      option.label.toLowerCase().includes(search.toLowerCase())\n      || option.subLabel?.toLowerCase().includes(search.toLowerCase())\n      || option.value.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [displayedOptions, search]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content custom-scroll')}>\n      <div className={buildClassName(styles.item, 'settings-item')}>\n        <InputText\n          key=\"search\"\n          value={search}\n          onChange={handleSearch}\n          placeholder={lang('Search')}\n          teactExperimentControlled\n        />\n        <div className={buildClassName(styles.languages, 'radio-group custom-scroll')}>\n          {filteredDisplayedOptions.map((option) => (\n            <Checkbox\n              className={styles.checkbox}\n              label={option.label}\n              subLabel={option.subLabel}\n              checked={doNotTranslate.includes(option.value)}\n              value={option.value}\n              key={option.value}\n              onChange={handleChange}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      language,\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ys1i4ssl\",\"item\":\"skaVPMTF\",\"checkbox\":\"obmoCKjY\",\"languages\":\"BccnzXwC\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUsername } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { isBetween } from '../../util/math';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 60;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePrevious(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (!usernameForConfirm) {\n      return;\n    }\n\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item mb-2 no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">@{usernameData.username}</span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PaO1MMi5\",\"header\":\"wSswdVkR\",\"description\":\"oiJc22Aj\",\"sortableContainer\":\"lAeeBh9K\",\"item\":\"l04OwRBg\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport {\n  isUsernameValid, MAX_USERNAME_LENGTH, MIN_UPDATE_USERNAME_LENGTH, USERNAME_REGEX,\n} from '../../util/username';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_UPDATE_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim();\n    // Prevent prefix editing\n    if (asLink && !value.match(LINK_PREFIX_REGEX)) {\n      if (!value.length) {\n        setUsername('');\n        onChange?.('');\n      }\n      return;\n    }\n    const newUsername = value.replace(LINK_PREFIX_REGEX, '');\n\n    setUsername(newUsername);\n\n    const isValid = newUsername === '' ? true : isUsernameValid(newUsername, true);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={currentUsername}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkedUsername={checkedUsername}\n            onChange={handleUsernameChange}\n          />\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">{TME_LINK_PREFIX}{editableUsername}</span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser;\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { DEBUG_LOG_FILENAME } from '../../../config';\nimport { getDebugLogs } from '../../../util/debugConsole';\nimport download from '../../../util/download';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  shouldShowLoginCodeInChatList?: boolean;\n  shouldForceHttpTransport?: boolean;\n  shouldAllowHttpTransport?: boolean;\n  shouldCollectDebugLogs?: boolean;\n  shouldDebugExportedSenders?: boolean;\n};\n\nconst SettingsExperimental: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  shouldShowLoginCodeInChatList,\n  shouldForceHttpTransport,\n  shouldAllowHttpTransport,\n  shouldCollectDebugLogs,\n  shouldDebugExportedSenders,\n}) => {\n  const { requestConfetti, setSettingOption } = getActions();\n  const lang = useLang();\n\n  const [isAutoUpdateEnabled, setIsAutoUpdateEnabled] = useState(false);\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsAutoUpdateEnabled);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDownloadLog = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    const url = URL.createObjectURL(file);\n    download(url, DEBUG_LOG_FILENAME);\n  });\n\n  const handleIsAutoUpdateEnabledChange = useCallback((isChecked: boolean) => {\n    window.electron?.setIsAutoUpdateEnabled(isChecked);\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description pt-3\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => requestConfetti({})}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n\n        <Checkbox\n          label=\"Show login code in chat list\"\n          checked={Boolean(shouldShowLoginCodeInChatList)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldShowLoginCodeInChatList: !shouldShowLoginCodeInChatList })}\n        />\n\n        <Checkbox\n          label=\"Allow HTTP Transport\"\n          checked={Boolean(shouldAllowHttpTransport)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldAllowHttpTransport: !shouldAllowHttpTransport })}\n        />\n\n        <Checkbox\n          label=\"Force HTTP Transport\"\n          disabled={!shouldAllowHttpTransport}\n          checked={Boolean(shouldForceHttpTransport)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldForceHttpTransport: !shouldForceHttpTransport })}\n        />\n\n        <Checkbox\n          label={lang('DebugMenuEnableLogs')}\n          checked={Boolean(shouldCollectDebugLogs)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldCollectDebugLogs: !shouldCollectDebugLogs })}\n        />\n\n        <Checkbox\n          label=\"Enable exported senders debug\"\n          checked={Boolean(shouldDebugExportedSenders)}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={() => setSettingOption({ shouldDebugExportedSenders: !shouldDebugExportedSenders })}\n        />\n\n        {IS_ELECTRON && (\n          <Checkbox\n            label=\"Enable autoupdates\"\n            checked={Boolean(isAutoUpdateEnabled)}\n            onCheck={handleIsAutoUpdateEnabledChange}\n          />\n        )}\n\n        <ListItem\n          onClick={handleDownloadLog}\n          icon=\"bug\"\n        >\n          <div className=\"title\">Download log</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      shouldShowLoginCodeInChatList: global.settings.byKey.shouldShowLoginCodeInChatList,\n      shouldForceHttpTransport: global.settings.byKey.shouldForceHttpTransport,\n      shouldAllowHttpTransport: global.settings.byKey.shouldAllowHttpTransport,\n      shouldCollectDebugLogs: global.settings.byKey.shouldCollectDebugLogs,\n      shouldDebugExportedSenders: global.settings.byKey.shouldDebugExportedSenders,\n    };\n  },\n)(SettingsExperimental));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, TimeFormat } from '../../../types';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport { SettingsScreens } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport { getSystemTheme } from '../../../util/systemTheme';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_MAC_OS, IS_WINDOWS,\n} from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'timeFormat'\n  )> & {\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const isMobileDevice = isMobile && (IS_IOS || IS_ANDROID);\n\n  const appearanceThemeOptions: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const keyboardSendOptions = !isMobileDevice ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS || IS_IOS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, [setSettingOption]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo as ISettings['messageSendKeyCombo'] });\n  }, [setSettingOption]);\n\n  const [isTrayIconEnabled, setIsTrayIconEnabled] = useState(false);\n  useEffect(() => {\n    window.electron?.getIsTrayIconEnabled().then(setIsTrayIconEnabled);\n  }, []);\n\n  const handleIsTrayIconEnabledChange = useCallback((isChecked: boolean) => {\n    window.electron?.setIsTrayIconEnabled(isChecked);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n\n        {IS_ELECTRON && IS_WINDOWS && (\n          <Checkbox\n            label={lang('GeneralSettings.StatusBarItem')}\n            checked={Boolean(isTrayIconEnabled)}\n            onCheck={handleIsTrayIconEnabledChange}\n          />\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={appearanceThemeOptions}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {keyboardSendOptions && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={keyboardSendOptions}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\n\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { selectTheme } from '../../../global/selectors';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { validateFiles } from '../../../util/files';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\n\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { captureEvents } from '../../../util/captureEvents';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { pick } from '../../../util/iteratees';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === `#${hex}` ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\n\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    onScreenSelect(SettingsScreens.Experimental);\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{lang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{lang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{lang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{lang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyBio:\n        return <h3>{lang('PrivacyBio')}</h3>;\n      case SettingsScreens.PrivacyBirthday:\n        return <h3>{lang('PrivacyBirthday')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{lang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyMessages:\n        return <h3>{lang('PrivacyMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{lang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('Animations and Performance')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{lang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {lang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n                  || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {lang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiLanguage } from '../../../api/types';\nimport type { ISettings, LangCode } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport { setLanguage } from '../../../util/langProvider';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n} & Pick<ISettings, 'languages' | 'language' | 'canTranslate' | 'canTranslateChats' | 'doNotTranslate'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  languages,\n  language,\n  canTranslate,\n  canTranslateChats,\n  doNotTranslate,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    loadAttachBots,\n    setSettingOption,\n    openPremiumModal,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const canTranslateChatsEnabled = isCurrentUserPremium && canTranslateChats;\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!languages?.length) {\n      loadLanguages();\n    }\n  }, [languages]);\n\n  const handleChange = useLastCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode as LangCode });\n\n      loadAttachBots(); // Should be refetched every language change\n    });\n  });\n\n  const options = useMemo(() => {\n    return languages ? buildOptions(languages) : undefined;\n  }, [languages]);\n\n  const handleShouldTranslateChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  });\n\n  const handleShouldTranslateChatsChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslateChats: newValue });\n  });\n\n  const handleShouldTranslateChatsClick = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'translations',\n      });\n    }\n  });\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useLastCallback(() => {\n    onScreenSelect(SettingsScreens.DoNotTranslate);\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          <Checkbox\n            className=\"pb-2\"\n            label={lang('ShowTranslateChatButton')}\n            checked={canTranslateChatsEnabled}\n            disabled={!isCurrentUserPremium}\n            rightIcon={!isCurrentUserPremium ? 'lock' : undefined}\n            onClickLabel={handleShouldTranslateChatsClick}\n            onCheck={handleShouldTranslateChatsChange}\n          />\n          {(canTranslate || canTranslateChatsEnabled) && (\n            <ListItem\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\">{lang('Localization.InterfaceLanguage')}</h4>\n        {options ? (\n          <RadioGroup\n            name=\"language-settings\"\n            options={options}\n            selected={selectedLanguage}\n            loadingOption={isLoading ? selectedLanguage : undefined}\n            onChange={handleChange}\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      language, languages, canTranslate, canTranslateChats, doNotTranslate,\n    } = global.settings.byKey;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      languages,\n      language,\n      canTranslate,\n      canTranslateChats,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { FAQ_URL, PRIVACY_URL } from '../../../config';\nimport {\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectIsPremiumPurchaseBlocked,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PremiumIcon from '../../common/PremiumIcon';\nimport ChatExtra from '../../common/profile/ChatExtra';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUserId?: string;\n  canBuyPremium?: boolean;\n  isGiveawayAvailable?: boolean;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  sessionCount,\n  canBuyPremium,\n  isGiveawayAvailable,\n}) => {\n  const {\n    loadProfilePhotos,\n    openPremiumModal,\n    openSupportChat,\n    openUrl,\n    openPremiumGiftingModal,\n  } = getActions();\n\n  const [isSupportDialogOpen, openSupportDialog, closeSupportDialog] = useFlag(false);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (currentUserId) {\n      loadProfilePhotos({ profileId: currentUserId });\n    }\n  }, [currentUserId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleOpenSupport = useLastCallback(() => {\n    openSupportChat();\n    closeSupportDialog();\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUserId && (\n          <ProfileInfo\n            userId={currentUserId}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUserId && (\n          <ChatExtra\n            chatOrUserId={currentUserId}\n            isInSettings\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Performance)}\n        >\n          {lang('Animations and Performance')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.langName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Stickers)}\n        >\n          {lang('StickersName')}\n        </ListItem>\n      </div>\n      <div className=\"settings-main-menu\">\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<PremiumIcon className=\"icon\" withGradient big />}\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n        {isGiveawayAvailable && (\n          <ListItem\n            icon=\"gift\"\n            className=\"settings-main-menu-premium\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => openPremiumGiftingModal()}\n          >\n            {lang('GiftPremiumGifting')}\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"ask-support\"\n          onClick={openSupportDialog}\n        >\n          {lang('AskAQuestion')}\n        </ListItem>\n        <ListItem\n          icon=\"help\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => openUrl({ url: FAQ_URL })}\n        >\n          {lang('TelegramFaq')}\n        </ListItem>\n        <ListItem\n          icon=\"privacy-policy\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => openUrl({ url: PRIVACY_URL })}\n        >\n          {lang('PrivacyPolicy')}\n        </ListItem>\n      </div>\n      <ConfirmDialog\n        isOpen={isSupportDialogOpen}\n        confirmLabel={lang('lng_settings_ask_ok')}\n        title={lang('AskAQuestion')}\n        text={lang('lng_settings_ask_sure')}\n        confirmHandler={handleOpenSupport}\n        onClose={closeSupportDialog}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUserId,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isGiveawayAvailable,\n    };\n  },\n)(SettingsMain));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  checkIfNotificationsSupported,\n  checkIfOfflinePushFailed,\n  playNotifySound,\n} from '../../../util/notifications';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const areNotificationsSupported = checkIfNotificationsSupported();\n  const areOfflineNotificationsSupported = areNotificationsSupported && !checkIfOfflinePushFailed();\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const isEnabled = e.target.checked;\n    updateWebNotificationSettings({\n      hasWebNotifications: isEnabled,\n      ...(!isEnabled && { hasPushNotifications: false }),\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          disabled={!areNotificationsSupported}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications || !areOfflineNotificationsSupported}\n          // eslint-disable-next-line max-len\n          subLabel={areOfflineNotificationsSupported ? lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled') : 'Not supported'}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            disabled={!areNotificationsSupported}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { IS_BACKDROP_BLUR_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype PerformanceSection = [string, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: string;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Power Saving',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS = [\n  'Power Saving',\n  'Custom',\n  'Lots of Stuff',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['LiteMode.Key.animations.Title', [\n    { key: 'pageTransitions', label: 'Page Transitions' },\n    { key: 'messageSendingAnimations', label: 'Message Sending Animation' },\n    { key: 'mediaViewerAnimations', label: 'Media Viewer Animations' },\n    { key: 'messageComposerAnimations', label: 'Message Composer Animations' },\n    { key: 'contextMenuAnimations', label: 'Context Menu Animation' },\n    { key: 'contextMenuBlur', label: 'Context Menu Blur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'Right Column Animation' },\n  ]],\n  ['Stickers and Emoji', [\n    { key: 'animatedEmoji', label: 'Allow Animated Emoji' },\n    { key: 'loopAnimatedStickers', label: 'Loop Animated Stickers' },\n    { key: 'reactionEffects', label: 'Reaction Effects' },\n    { key: 'stickerEffects', label: 'Full-Screen Sticker and Emoji Effects' },\n  ]],\n  ['AutoplayMedia', [\n    { key: 'autoplayGifs', label: 'AutoplayGIF' },\n    { key: 'autoplayVideos', label: 'AutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MID)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n  const animationLevelOptions = animationLevelState === ANIMATION_LEVEL_CUSTOM\n    ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n    : ANIMATION_LEVEL_OPTIONS;\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MID : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performance);\n  }, [setSettingOption]);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">Resource-Intensive Processes</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => (\n                    <Checkbox\n                      key={key}\n                      name={key}\n                      checked={performanceSettings[key]}\n                      label={lang(label)}\n                      disabled={disabled}\n                      onChange={handlePropertyChange}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanSetPasscode, selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PremiumIcon from '../../common/PremiumIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  canSetPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  canDisplayChatInTitle?: boolean;\n  privacy: GlobalState['settings']['privacy'];\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  shouldNewNonContactPeersRequirePremium,\n  canDisplayChatInTitle,\n  canSetPasscode,\n  privacy,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedUsers,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    setSettingOption,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedUsers();\n    loadPrivacySettings();\n    loadContentSettings();\n    loadWebAuthorizations();\n  }, []);\n\n  useEffect(() => {\n    if (isActive) {\n      loadGlobalPrivacySettings();\n    }\n  }, [isActive, loadGlobalPrivacySettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings(isChecked);\n  }, [updateContentSettings]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          {lang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {canSetPasscode && (\n          <ListItem\n            icon=\"key\"\n            narrow\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(\n              hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            )}\n          >\n            <div className=\"multiline-menu-item\">\n              <span className=\"title\">{lang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n          >\n            {lang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.lastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.profilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBio)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyBio')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.bio)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBirthday)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyBirthday')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.birthday)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.forwards)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          allowDisabledClick\n          rightElement={isCurrentUserPremium && <PremiumIcon big withGradient />}\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyVoiceMessages)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.voiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          rightElement={isCurrentUserPremium && <PremiumIcon big withGradient />}\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyMessages)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {shouldNewNonContactPeersRequirePremium\n                ? lang('PrivacyMessagesContactsAndPremium')\n                : lang('P2PEverybody')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.chatInvite)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={handleUpdateContentSettings}\n          />\n        </div>\n      )}\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={lang('ArchiveAndMute')}\n            subLabel={lang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={lang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          canDisplayChatInTitle, shouldNewNonContactPeersRequirePremium,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      shouldNewNonContactPeersRequirePremium,\n      privacy,\n      canDisplayChatInTitle,\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\n\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockUser,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, search)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    blockUser({ userId });\n    onClose();\n  }, [onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { getMainUsername, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockUser } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((userId: string) => {\n    unblockUser({ userId });\n  }, [unblockUser]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, userId) => {\n      const isPrivate = isUserId(userId);\n      const user = isPrivate ? usersByIds[userId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[userId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = usersByIds[contactId];\n    const chat = chatsByIds[contactId];\n    const peer = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          peer={peer}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {peer && <FullNameTitle peer={peer} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (<div className=\"contact-username\" dir=\"auto\">@{userMainUsername}</div>)}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container settings-item\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        className=\"block-user-button\"\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyBio:\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return 'bio';\n    case SettingsScreens.PrivacyBirthday:\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return 'birthday';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n    case SettingsScreens.PrivacyAddByPhone:\n      return 'addByPhone';\n  }\n\n  return undefined;\n}\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { PrivacyVisibility } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectShouldHideReadMarks } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PremiumIcon from '../../common/PremiumIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  visibility?: PrivacyVisibility;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n  shouldHideReadMarks: boolean;\n};\n\nconst SettingsPrivacyLastSeen = ({\n  isCurrentUserPremium, shouldHideReadMarks, visibility,\n}: OwnProps & StateProps) => {\n  const { updateGlobalPrivacySettings, openPremiumModal } = getActions();\n  const lang = useLang();\n  const canShowHideReadTime = visibility === 'nobody' || visibility === 'contacts';\n\n  const handleChangeShouldHideReadMarks = useLastCallback(\n    (isEnabled) => updateGlobalPrivacySettings({ shouldHideReadMarks: isEnabled }),\n  );\n\n  const handleOpenPremiumModal = useLastCallback(() => {\n    openPremiumModal({\n      initialSection: 'last_seen',\n    });\n  });\n\n  return (\n    <>\n      {canShowHideReadTime && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('HideReadTime')}\n            checked={shouldHideReadMarks}\n            onCheck={handleChangeShouldHideReadMarks}\n          />\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('HideReadTimeInfo'), ['br'])}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <ListItem\n          leftElement={<PremiumIcon className=\"icon\" withGradient big />}\n          onClick={handleOpenPremiumModal}\n        >\n          {isCurrentUserPremium ? lang('PrivacyLastSeenPremiumForPremium') : lang('PrivacyLastSeenPremium')}\n        </ListItem>\n        <p\n          className=\"settings-item-description-larger premium-info\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          {isCurrentUserPremium\n            ? lang('PrivacyLastSeenPremiumInfoForPremium')\n            : lang('PrivacyLastSeenPremiumInfo')}\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldHideReadMarks: Boolean(selectShouldHideReadMarks(global)),\n    };\n  },\n)(SettingsPrivacyLastSeen));\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"Qvhl9Jjv\",\"fallbackPhoto\":\"Qvhl9Jjv\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPhoto } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUserId });\n    }\n  }, [hasCurrentUserFullInfo, currentUserId, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectUserFullInfo } from '../../../global/selectors';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\nimport SettingsPrivacyLastSeen from './SettingsPrivacyLastSeen';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n  primaryPrivacy?: ApiPrivacySettings;\n  secondaryPrivacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n};\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  primaryPrivacy,\n  secondaryPrivacy,\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n  isPremiumRequired,\n  onScreenSelect,\n  onReset,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const secondaryScreen = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneP2P;\n      case SettingsScreens.PrivacyPhoneNumber: {\n        return primaryPrivacy?.visibility === 'nobody' ? SettingsScreens.PrivacyAddByPhone : undefined;\n      }\n      default:\n        return undefined;\n    }\n  }, [primaryPrivacy, screen]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <PrivacySubsection\n        screen={screen}\n        privacy={primaryPrivacy}\n        onScreenSelect={onScreenSelect}\n        isPremiumRequired={isPremiumRequired}\n      />\n      {screen === SettingsScreens.PrivacyProfilePhoto && primaryPrivacy?.visibility !== 'everybody' && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUserId={currentUserId}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n      {screen === SettingsScreens.PrivacyLastSeen && (\n        <SettingsPrivacyLastSeen visibility={primaryPrivacy?.visibility} />\n      )}\n      {secondaryScreen && (\n        <PrivacySubsection\n          screen={secondaryScreen}\n          privacy={secondaryPrivacy}\n          onScreenSelect={onScreenSelect}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction PrivacySubsection({\n  screen,\n  privacy,\n  onScreenSelect,\n  isPremiumRequired,\n}: {\n  screen: SettingsScreens;\n  privacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n}) {\n  const { setPrivacyVisibility } = getActions();\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    const hasNobody = screen !== SettingsScreens.PrivacyAddByPhone;\n    const options = [\n      { value: 'everybody', label: lang('P2PEverybody') },\n      {\n        value: 'contacts',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={lang('P2PContacts')} />\n        ) : (\n          lang('P2PContacts')\n        ),\n        hidden: isPremiumRequired,\n      },\n    ];\n\n    if (hasNobody) {\n      options.push({\n        value: 'nobody',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={lang('P2PNobody')} />\n        ) : (\n          lang('P2PNobody')\n        ),\n        hidden: isPremiumRequired,\n      });\n    }\n    return options;\n  }, [lang, screen, isPremiumRequired]);\n\n  const primaryExceptionLists = useMemo(() => {\n    if (screen === SettingsScreens.PrivacyAddByPhone) {\n      return {\n        shouldShowDenied: false,\n        shouldShowAllowed: false,\n      };\n    }\n\n    return {\n      shouldShowDenied: privacy?.visibility !== 'nobody',\n      shouldShowAllowed: privacy?.visibility !== 'everybody',\n    };\n  }, [privacy, screen]);\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      case SettingsScreens.PrivacyAddByPhone: {\n        return privacy?.visibility === 'everybody' ? lang('PrivacyPhoneInfo') : lang('PrivacyPhoneInfo3');\n      }\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesInfo');\n      default:\n        return undefined;\n    }\n  }, [lang, screen, privacy]);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyAddByPhone:\n        return lang('PrivacyPhoneTitle2');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyBio:\n        return lang('PrivacyBioTitle');\n      case SettingsScreens.PrivacyBirthday:\n        return lang('PrivacyBirthdayTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return lang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const prepareSubtitle = useLastCallback((userIds?: string[], chatIds?: string[]) => {\n    const userIdsCount = userIds?.length || 0;\n    const chatIdsCount = chatIds?.length || 0;\n\n    if (!userIdsCount && !chatIdsCount) {\n      return lang('EditAdminAddUsers');\n    }\n\n    const userCountString = userIdsCount > 0 ? lang('Users', userIdsCount) : undefined;\n    const chatCountString = chatIdsCount > 0 ? lang('Chats', chatIdsCount) : undefined;\n\n    return [userCountString, chatCountString].filter(Boolean).join(', ');\n  });\n\n  const allowedString = useMemo(() => {\n    return prepareSubtitle(privacy?.allowUserIds, privacy?.allowChatIds);\n  }, [privacy]);\n\n  const blockString = useMemo(() => {\n    return prepareSubtitle(privacy?.blockUserIds, privacy?.blockChatIds);\n  }, [privacy]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioAllowedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioDeniedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={privacy?.visibility}\n        />\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n      {!isPremiumRequired && (primaryExceptionLists.shouldShowAllowed || primaryExceptionLists.shouldShowDenied) && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('PrivacyExceptions')}\n          </h4>\n          {primaryExceptionLists.shouldShowAllowed && (\n            <ListItem\n              narrow\n              icon=\"add-user\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => {\n                onScreenSelect(allowedContactsScreen);\n              }}\n            >\n              <div className=\"multiline-menu-item full-size\">\n                <span className=\"title\">{lang('AlwaysAllow')}</span>\n                <span className=\"subtitle\">{allowedString}</span>\n              </div>\n            </ListItem>\n          )}\n          {primaryExceptionLists.shouldShowDenied && (\n            <ListItem\n              narrow\n              icon=\"delete-user\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => {\n                onScreenSelect(deniedContactsScreen);\n              }}\n            >\n              <div className=\"multiline-menu-item full-size\">\n                <span className=\"title\">{lang('NeverAllow')}</span>\n                <span className=\"subtitle\">{blockString}</span>\n              </div>\n            </ListItem>\n          )}\n        </div>\n      )}\n      {isPremiumRequired && <PremiumStatusItem />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let primaryPrivacy: ApiPrivacySettings | undefined;\n    let secondaryPrivacy: ApiPrivacySettings | undefined;\n\n    const {\n      currentUserId,\n      settings: { privacy },\n    } = global;\n\n    const currentUserFullInfo = selectUserFullInfo(global, currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        primaryPrivacy = privacy.phoneNumber;\n        secondaryPrivacy = privacy.addByPhone;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        primaryPrivacy = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        primaryPrivacy = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyBio:\n        primaryPrivacy = privacy.bio;\n        break;\n\n      case SettingsScreens.PrivacyBirthday:\n        primaryPrivacy = privacy.birthday;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyPhoneCall:\n        primaryPrivacy = privacy.phoneCall;\n        secondaryPrivacy = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        primaryPrivacy = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        primaryPrivacy = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        primaryPrivacy = privacy.chatInvite;\n        break;\n    }\n\n    if (!primaryPrivacy) {\n      return {\n        currentUserId: currentUserId!,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      };\n    }\n\n    return {\n      primaryPrivacy,\n      secondaryPrivacy,\n      currentUserId: currentUserId!,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      isPremiumRequired: screen === SettingsScreens.PrivacyVoiceMessages && !selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { filterChatsByName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  currentUserId,\n  settings,\n  onScreenSelect,\n  onReset,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  // Reset selected contact ids on change from other client when screen is not active\n  useEffect(() => {\n    if (!isActive) setNewSelectedContactIds(selectedContactIds);\n  }, [isActive, selectedContactIds]);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => chatId !== currentUserId);\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      updatedIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon icon-check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return privacy.bio;\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return privacy.birthday;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { config, reactions } = global;\n\n    return {\n      availableReactions: reactions.availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'shouldSuggestStickers' | 'shouldUpdateStickerSetOrder'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldUpdateStickerSetOrder,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n  onScreenSelect,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n  } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickerSetOrderChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldUpdateStickerSetOrder: newValue });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          className=\"mt-4\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.CustomEmoji)}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('InstalledStickers.DynamicPackOrder')}\n        </h4>\n        <Checkbox\n          label={lang('InstalledStickers.DynamicPackOrder')}\n          checked={shouldUpdateStickerSetOrder}\n          onCheck={handleSuggestStickerSetOrderChange}\n        />\n        <p className=\"settings-item-description mt-3\" dir=\"auto\">\n          {lang('InstalledStickers.DynamicPackOrderInfo')}\n        </p>\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldUpdateStickerSetOrder',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.reactions.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useFlag from '../../../../hooks/useFlag';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Button from '../../../ui/Button';\nimport InputText from '../../../ui/InputText';\nimport Modal from '../../../ui/Modal';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useState } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\n\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Transition from '../../ui/Transition';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport PrivacyMessages from './PrivacyMessages';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsMain from './SettingsMain';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPerformance from './SettingsPerformance';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_BIO_SCREENS = [\n  SettingsScreens.PrivacyBioAllowedContacts,\n  SettingsScreens.PrivacyBioDeniedContacts,\n];\n\nconst PRIVACY_BIRTHDAY_SCREENS = [\n  SettingsScreens.PrivacyBirthdayAllowedContacts,\n  SettingsScreens.PrivacyBirthdayDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal } = getActions();\n\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  });\n\n  function renderCurrentSectionContent(isScreenActive: boolean, activeScreen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBio]: PRIVACY_BIO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBirthday]: PRIVACY_BIRTHDAY_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(activeScreen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(activeScreen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(activeScreen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(activeScreen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(activeScreen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).map(Number).includes(activeScreen)\n      || Object.values(privacyAllowScreens).includes(true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || activeScreen === SettingsScreens.GeneralChatBackgroundColor\n              || activeScreen === SettingsScreens.GeneralChatBackground\n              || activeScreen === SettingsScreens.QuickReaction\n              || activeScreen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || activeScreen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n            onScreenSelect={onScreenSelect}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} onScreenSelect={onScreenSelect} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || activeScreen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyBio:\n      case SettingsScreens.PrivacyBirthday:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyMessages:\n        return (\n          <PrivacyMessages\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={activeScreen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(\n    isScreenActive: boolean,\n    _isFrom: boolean,\n    _currentKey: SettingsScreens,\n    activeKey: SettingsScreens,\n  ) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, activeKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n      withSwipeControl\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable contact-list-item\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n          >\n            <PrivateChatInfo\n              userId={id}\n              forceShowSelf\n              avatarSize=\"large\"\n              withStory\n              storyViewerOrigin={StoryViewerOrigin.ChatList}\n              ripple={!isMobile}\n            />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { filterUsersByName, isUserBot } from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Picker from '../../common/Picker';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst MAX_MEMBERS_FOR_GENERATE_CHAT_NAME = 4;\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  useEffect(() => {\n    if (isChannel) {\n      return;\n    }\n    if (!memberIds.length || memberIds.length > MAX_MEMBERS_FOR_GENERATE_CHAT_NAME) {\n      setTitle('');\n      return;\n    }\n    const global = getGlobal();\n    const usersById = global.users.byId;\n    const memberFirstNames = [global.currentUserId!, ...memberIds]\n      .map((userId) => getUserFirstOrLastName(usersById[userId]))\n      .filter(Boolean);\n    const generatedChatName = memberFirstNames.slice(0, -1).join(', ')\n      + lang('CreateGroup.PeersTitleLastDelimeter')\n      + memberFirstNames[memberFirstNames.length - 1];\n    setTitle(generatedChatName);\n  }, [isChannel, memberIds, lang]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/windowEnvironment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { ANIMATION_DURATION } from '../story/helpers/ribbonAnimation';\n\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport StoryRibbon from '../story/StoryRibbon';\nimport StoryToggler from '../story/StoryToggler';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  isStoryRibbonShown,\n  onReset,\n  onTopicSearch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useLastCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransition(!isForumPanelOpen);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransition(isStoryRibbonShown, undefined, undefined, '', false, ANIMATION_DURATION + ANIMATION_END_DELAY);\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className={buildClassName('left-header', !shouldRenderStoryRibbon && 'left-header-shadow')}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        <div className=\"story-toggler-wrapper\">\n          <StoryToggler canShow isArchived />\n        </div>\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'chat-list-wrapper',\n          shouldRenderStoryRibbon && 'with-story-ribbon',\n          storyRibbonClassNames,\n        )}\n      >\n        {shouldRenderStoryRibbon && (\n          <StoryRibbon isArchived className=\"left-header-shadow\" isClosing={isStoryRibbonClosing} />\n        )}\n        <ChatList\n          folderType=\"archived\"\n          isActive={isActive}\n          isForumPanelOpen={isForumPanelVisible}\n          onSettingsScreenSelect={onSettingsScreenSelect}\n          onLeftColumnContentChange={onLeftColumnContentChange}\n          foldersDispatch={foldersDispatch}\n          archiveSettings={archiveSettings}\n        />\n      </div>\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID).map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('FilterAddTo')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { MAX_INT_32 } from '../../config';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  topicId?: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nenum MuteDuration {\n  OneHour = '3600',\n  FourHours = '14400',\n  EightHours = '28800',\n  OneDay = '86400',\n  ThreeDays = '259200',\n  Forever = '-1',\n}\n\nconst MuteChatModal: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  topicId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [muteUntilOption, setMuteUntilOption] = useState(MuteDuration.Forever);\n  const { updateChatMutedState, updateTopicMutedState } = getActions();\n\n  const lang = useLang();\n\n  const muteForOptions = useMemo(() => [\n    { label: lang('MuteFor.Hours', 1), value: MuteDuration.OneHour },\n    { label: lang('MuteFor.Hours', 4), value: MuteDuration.FourHours },\n    { label: lang('MuteFor.Hours', 8), value: MuteDuration.EightHours },\n    { label: lang('MuteFor.Days', 1), value: MuteDuration.OneDay },\n    { label: lang('MuteFor.Days', 3), value: MuteDuration.ThreeDays },\n    { label: lang('MuteFor.Forever'), value: MuteDuration.Forever },\n  ], [lang]);\n\n  const handleSubmit = useCallback(() => {\n    let muteUntil: number;\n    if (muteUntilOption === MuteDuration.Forever) {\n      muteUntil = MAX_INT_32;\n    } else {\n      muteUntil = Math.floor(Date.now() / 1000) + Number(muteUntilOption);\n    }\n    if (topicId) {\n      updateTopicMutedState({ chatId, topicId, muteUntil });\n    } else {\n      updateChatMutedState({ chatId, muteUntil });\n    }\n    onClose();\n  }, [chatId, muteUntilOption, onClose, topicId]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('Notifications')}\n    >\n      <RadioGroup\n        name=\"muteFor\"\n        options={muteForOptions}\n        selected={muteUntilOption}\n        onChange={setMuteUntilOption as any}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('Common.Done')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(MuteChatModal);\n","import type { ApiFormattedText } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\n\nconst div = document.createElement('div');\nconst ALLOWED_QUOTE_ENTITIES = new Set([\n  ApiMessageEntityTypes.Bold,\n  ApiMessageEntityTypes.Italic,\n  ApiMessageEntityTypes.Underline,\n  ApiMessageEntityTypes.Strike,\n  ApiMessageEntityTypes.Spoiler,\n  ApiMessageEntityTypes.CustomEmoji,\n]);\n\nexport function getSelectionAsFormattedText(range: Range) {\n  const html = getSelectionAsHtml(range);\n  const formattedText = parseHtmlAsFormattedText(html, false, true);\n\n  return stripEntitiesForQuote(formattedText);\n}\n\nfunction getSelectionAsHtml(range: Range) {\n  const clonedSelection = range.cloneContents();\n  div.appendChild(clonedSelection);\n\n  const html = wrapHtmlWithMarkupTags(range, div.innerHTML);\n  div.innerHTML = '';\n\n  return html\n    .replace(/<br\\s*\\/?>/gi, '\\n')\n    .replace(/&nbsp;/gi, ' ') // Convert nbsp's to spaces\n    .replace(/\\u00a0/gi, ' ');\n}\n\nfunction stripEntitiesForQuote(text: ApiFormattedText): ApiFormattedText {\n  if (!text.entities) return text;\n\n  const entities = text.entities.filter((entity) => ALLOWED_QUOTE_ENTITIES.has(entity.type as ApiMessageEntityTypes));\n  return { ...text, entities: entities.length ? entities : undefined };\n}\n\nfunction wrapHtmlWithMarkupTags(range: Range, html: string) {\n  const container = range.commonAncestorContainer;\n  if (container.nodeType === Node.ELEMENT_NODE && (container as Element).classList.contains('text-content')) {\n    return html;\n  }\n  let currentElement = range.commonAncestorContainer.parentElement;\n  while (currentElement && !currentElement.classList.contains('text-content')) {\n    const tag = currentElement.tagName.toLowerCase();\n    const entityType = currentElement.dataset.entityType;\n    html = `<${tag} ${entityType ? `data-entity-type=\"${entityType}\"` : ''}>${html}</${tag}>`;\n    currentElement = currentElement.parentElement;\n  }\n\n  return html;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PinMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PinMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PinMessageModal = useModuleLoader(Bundles.Extra, 'PinMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PinMessageModal ? <PinMessageModal {...props} /> : undefined;\n};\n\nexport default PinMessageModalAsync;\n","import type { ApiMessage } from '../../../../api/types';\nimport type { IconName } from '../../../../types/icons';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport {\n  getMessageContact,\n  getMessageHtmlId,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport {\n  CLIPBOARD_ITEM_SUPPORTED,\n  copyHtmlToClipboard,\n  copyImageToClipboard,\n  copyTextToClipboard,\n} from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport { renderMessageText } from '../../../common/helpers/renderMessageText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: IconName;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  href?: string,\n  canCopy?: boolean,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = canCopy && photo && (mediaHash || hasMessageLocalBlobUrl(message))\n    && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (canCopy && href) {\n    options.push({\n      label: 'lng_context_copy_link',\n      icon: 'copy',\n      handler: () => {\n        copyTextToClipboard(href);\n\n        afterEffect?.();\n      },\n    });\n  } else if (canCopy && text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n      && checkMessageHasSelection(message)\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else if (hasSelection) {\n          document.execCommand('copy');\n        } else {\n          const clipboardText = renderMessageText(\n            { message, shouldRenderAsHtml: true },\n          );\n          if (clipboardText) copyHtmlToClipboard(clipboardText.join(''), getMessageTextWithSpoilers(message)!);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: onCopyLink,\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\nfunction checkMessageHasSelection(message: ApiMessage): boolean {\n  const selection = window.getSelection();\n  const selectionParentNode = (selection?.anchorNode?.parentNode as HTMLElement);\n  const selectedMessageElement = selectionParentNode?.closest<HTMLDivElement>('.Message.message-list-item');\n  return getMessageHtmlId(message.id) === selectedMessageElement?.id;\n}\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"lhinieg0\",\"get\":\"wysoV1T4\",\"skeleton\":\"gPqaUijR\",\"transition\":\"Yg6u_MIn\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../lib/teact/teactn';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { formatDateAtTime } from '../../../util/date/dateFormat';\n\nimport useLang from '../../../hooks/useLang';\n\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/placeholder/Skeleton';\nimport Transition from '../../ui/Transition';\n\nimport styles from './ReadTimeMenuItem.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldRenderShowWhen?: boolean;\n  canLoadReadDate?: boolean;\n  menuSeparatorSize: 'thin' | 'thick';\n  closeContextMenu: NoneToVoidFunction;\n};\n\nfunction ReadTimeMenuItem({\n  message, shouldRenderShowWhen, canLoadReadDate, closeContextMenu, menuSeparatorSize,\n}: OwnProps) {\n  const { openPrivacySettingsNoticeModal } = getActions();\n  const lang = useLang();\n  const { readDate } = message;\n  const shouldRenderSkeleton = canLoadReadDate && !readDate && !shouldRenderShowWhen;\n\n  const handleOpenModal = () => {\n    closeContextMenu();\n    openPrivacySettingsNoticeModal({ chatId: message.chatId, isReadDate: true });\n  };\n\n  return (\n    <>\n      <MenuSeparator size={menuSeparatorSize} />\n      <MenuItem icon=\"message-read\" className={styles.item}>\n        <Transition name=\"fade\" activeKey={shouldRenderSkeleton ? 1 : 2} className={styles.transition}>\n          {shouldRenderSkeleton ? <Skeleton className={styles.skeleton} /> : (\n            <>\n              {Boolean(readDate) && lang('PmReadAt', formatDateAtTime(lang, readDate * 1000))}\n              {!readDate && shouldRenderShowWhen && (\n                <div>\n                  {lang('PmRead')}\n                  <span className={styles.get} onClick={handleOpenModal}>\n                    {lang('PmReadShowWhen')}\n                  </span>\n                </div>\n              )}\n            </>\n          )}\n        </Transition>\n      </MenuItem>\n    </>\n  );\n}\n\nexport default memo(ReadTimeMenuItem);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatReactions,\n  ApiMessage,\n  ApiPeer,\n  ApiReaction,\n  ApiSponsoredMessage,\n  ApiStickerSet,\n  ApiThreadInfo,\n  ApiUser,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { getUserFullName, isUserId } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { getMessageCopyOptions } from './helpers/copyOptions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\n\nimport AvatarList from '../../common/AvatarList';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport MenuSeparator from '../../ui/MenuSeparator';\nimport Skeleton from '../../ui/placeholder/Skeleton';\nimport ReactionSelector from './reactions/ReactionSelector';\nimport ReadTimeMenuItem from './ReadTimeMenuItem';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  isReactionPickerOpen?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  targetHref?: string;\n  message: ApiMessage | ApiSponsoredMessage;\n  canSendNow?: boolean;\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions?: number;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canQuote?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canBuyPremium?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentPeers?: ApiPeer[];\n  noReplies?: boolean;\n  hasCustomEmoji?: boolean;\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n  noTransition?: boolean;\n  isInSavedMessages?: boolean;\n  shouldRenderShowWhen?: boolean;\n  canLoadReadDate?: boolean;\n  onReply?: NoneToVoidFunction;\n  onOpenThread?: VoidFunction;\n  onEdit?: NoneToVoidFunction;\n  onPin?: NoneToVoidFunction;\n  onUnpin?: NoneToVoidFunction;\n  onForward?: NoneToVoidFunction;\n  onDelete?: NoneToVoidFunction;\n  onReport?: NoneToVoidFunction;\n  onFaveSticker?: NoneToVoidFunction;\n  onUnfaveSticker?: NoneToVoidFunction;\n  onSelect?: NoneToVoidFunction;\n  onSend?: NoneToVoidFunction;\n  onReschedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  onCopyLink?: NoneToVoidFunction;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: NoneToVoidFunction;\n  onDownload?: NoneToVoidFunction;\n  onSaveGif?: NoneToVoidFunction;\n  onCancelVote?: NoneToVoidFunction;\n  onClosePoll?: NoneToVoidFunction;\n  onShowSeenBy?: NoneToVoidFunction;\n  onShowReactors?: NoneToVoidFunction;\n  onAboutAds?: NoneToVoidFunction;\n  onSponsoredHide?: NoneToVoidFunction;\n  onSponsorInfo?: NoneToVoidFunction;\n  onSponsoredReport?: NoneToVoidFunction;\n  onTranslate?: NoneToVoidFunction;\n  onShowOriginal?: NoneToVoidFunction;\n  onSelectLanguage?: NoneToVoidFunction;\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  onReactionPickerOpen?: (position: IAnchorPosition) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_SELECTOR_WIDTH_REM = 19.25;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  isReactionPickerOpen,\n  availableReactions,\n  topReactions,\n  defaultTagReactions,\n  isOpen,\n  message,\n  isPrivate,\n  isCurrentUserPremium,\n  enabledReactions,\n  maxUniqueReactions,\n  anchor,\n  targetHref,\n  canSendNow,\n  canReschedule,\n  canBuyPremium,\n  canReply,\n  canQuote,\n  canEdit,\n  noReplies,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canTranslate,\n  canShowOriginal,\n  canSelectLanguage,\n  isDownloading,\n  repliesThreadInfo,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canShowReactionList,\n  seenByRecentPeers,\n  hasCustomEmoji,\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  noTransition,\n  isInSavedMessages,\n  shouldRenderShowWhen,\n  canLoadReadDate,\n  onReply,\n  onOpenThread,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onCancelVote,\n  onClosePoll,\n  onShowSeenBy,\n  onShowReactors,\n  onToggleReaction,\n  onCopyMessages,\n  onAboutAds,\n  onSponsoredHide,\n  onSponsorInfo,\n  onSponsoredReport,\n  onReactionPickerOpen,\n  onTranslate,\n  onShowOriginal,\n  onSelectLanguage,\n}) => {\n  const { showNotification, openStickerSet, openCustomEmojiSets } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions;\n  const withReactions = canShowReactionList && !noReactions;\n  const isSponsoredMessage = !('id' in message);\n  const messageId = !isSponsoredMessage ? message.id : '';\n  const seenByDates = !isSponsoredMessage ? message.seenByDates : undefined;\n\n  const [areItemsHidden, hideItems] = useFlag();\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n  const { isMobile, isDesktop } = useAppLayout();\n  const seenByDatesCount = useMemo(() => (seenByDates ? Object.keys(seenByDates).length : 0), [seenByDates]);\n\n  const handleAfterCopy = useLastCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  });\n\n  useEffect(() => {\n    if (isOpen && areItemsHidden && !isReactionPickerOpen) {\n      onClose();\n    }\n  }, [onClose, isOpen, isReactionPickerOpen, areItemsHidden]);\n\n  const handleOpenCustomEmojiSets = useLastCallback(() => {\n    if (!customEmojiSets) return;\n    if (customEmojiSets.length === 1) {\n      openStickerSet({\n        stickerSetInfo: {\n          shortName: customEmojiSets[0].shortName,\n        },\n      });\n    } else {\n      openCustomEmojiSets({\n        setIds: customEmojiSets.map((set) => set.id),\n      });\n    }\n    onClose();\n  });\n\n  const copyOptions = isSponsoredMessage\n    ? []\n    : getMessageCopyOptions(\n      message,\n      targetHref,\n      canCopy,\n      handleAfterCopy,\n      canCopyLink ? onCopyLink : undefined,\n      onCopyMessages,\n      onCopyNumber,\n    );\n\n  const getTriggerElement = useLastCallback(() => {\n    return isSponsoredMessage\n      ? document.querySelector('.Transition_slide-active > .MessageList .SponsoredMessage')\n      : document.querySelector(`.Transition_slide-active > .MessageList div[data-message-id=\"${messageId}\"]`);\n  });\n\n  const getRootElement = useLastCallback(() => document.querySelector('.Transition_slide-active > .MessageList'));\n\n  const getMenuElement = useLastCallback(() => document.querySelector('.MessageContextMenu .bubble'));\n\n  const getLayout = useLastCallback(() => {\n    const extraHeightAudioPlayer = (isMobile\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessageWrapper');\n    const extraHeightPinned = (((isMobile && !extraHeightAudioPlayer)\n        || (!isMobile && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n      shouldAvoidNegativePosition: !isDesktop,\n      menuElMinWidth: withReactions && isMobile ? REACTION_SELECTOR_WIDTH_REM * REM : undefined,\n    };\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionPicker');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  const handleOpenMessageReactionPicker = useLastCallback((position: IAnchorPosition) => {\n    onReactionPickerOpen!(position);\n    hideItems();\n  });\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      shouldSkipTransition={noTransition}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {withReactions && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          topReactions={topReactions}\n          allAvailableReactions={availableReactions}\n          defaultTagReactions={defaultTagReactions}\n          currentReactions={!isSponsoredMessage ? message.reactions?.results : undefined}\n          maxUniqueReactions={maxUniqueReactions}\n          onToggleReaction={onToggleReaction!}\n          isPrivate={isPrivate}\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isInSavedMessages={isInSavedMessages}\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenMessageReactionPicker}\n          onClose={onClose}\n          className={buildClassName(areItemsHidden && 'ReactionSelector-hidden')}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'MessageContextMenu_items scrollable-content custom-scroll',\n          areItemsHidden && 'MessageContextMenu_items-hidden',\n        )}\n        style={menuStyle}\n        dir={lang.isRtl ? 'rtl' : undefined}\n        ref={scrollableRef}\n      >\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && (\n          <MenuItem icon=\"reply\" onClick={onReply}>\n            {lang(canQuote ? 'lng_context_quote_and_reply' : 'Reply')}\n          </MenuItem>\n        )}\n        {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n          <MenuItem icon=\"replies\" onClick={onOpenThread}>\n            {lang('Conversation.ContextViewReplies', repliesThreadInfo!.messagesCount, 'i')}\n          </MenuItem>\n        )}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canTranslate && <MenuItem icon=\"language\" onClick={onTranslate}>{lang('TranslateMessage')}</MenuItem>}\n        {canShowOriginal && <MenuItem icon=\"language\" onClick={onShowOriginal}>{lang('ShowOriginalButton')}</MenuItem>}\n        {canSelectLanguage && (\n          <MenuItem icon=\"web\" onClick={onSelectLanguage}>{lang('lng_settings_change_lang')}</MenuItem>\n        )}\n        {copyOptions.map((option) => (\n          <MenuItem\n            key={option.label}\n            icon={option.icon}\n            onClick={option.handler}\n            withPreventDefaultOnMouseDown\n          >{lang(option.label)}\n          </MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canRevote && <MenuItem icon=\"revote\" onClick={onCancelVote}>{lang('lng_polls_retract')}</MenuItem>}\n        {canClosePoll && <MenuItem icon=\"stop\" onClick={onClosePoll}>{lang('lng_polls_stop')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n        {hasCustomEmoji && (\n          <>\n            <MenuSeparator size=\"thick\" />\n            {!customEmojiSets && (\n              <>\n                <Skeleton inline className=\"menu-loading-row\" />\n                <Skeleton inline className=\"menu-loading-row\" />\n              </>\n            )}\n            {customEmojiSets && customEmojiSets.length === 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPack', customEmojiSets[0].title), ['simple_markdown', 'emoji'])}\n              </MenuItem>\n            )}\n            {customEmojiSets && customEmojiSets.length > 1 && (\n              <MenuItem withWrap onClick={handleOpenCustomEmojiSets} className=\"menu-custom-emoji-sets\">\n                {renderText(lang('MessageContainsEmojiPacks', customEmojiSets.length), ['simple_markdown'])}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {isSponsoredMessage && message.sponsorInfo && (\n          <MenuItem icon=\"channel\" onClick={onSponsorInfo}>{lang('SponsoredMessageSponsor')}</MenuItem>\n        )}\n        {isSponsoredMessage && (\n          <MenuItem icon=\"info\" onClick={onAboutAds}>\n            {lang(message.canReport ? 'AboutRevenueSharingAds' : 'SponsoredMessageInfo')}\n          </MenuItem>\n        )}\n        {isSponsoredMessage && message.canReport && (\n          <MenuItem icon=\"hand-stop\" onClick={onSponsoredReport}>\n            {lang('ReportAd')}\n          </MenuItem>\n        )}\n        {isSponsoredMessage && onSponsoredHide && (\n          <>\n            <MenuSeparator />\n            <MenuItem icon=\"close-circle\" onClick={onSponsoredHide}>{lang('HideAd')}</MenuItem>\n          </>\n        )}\n        {(canShowSeenBy || canShowReactionsCount) && !isSponsoredMessage && (\n          <>\n            <MenuSeparator size={hasCustomEmoji ? 'thin' : 'thick'} />\n            <MenuItem\n              icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n              onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n              disabled={!canShowReactionsCount && !seenByDatesCount}\n            >\n              <span className=\"MessageContextMenu--seen-by-label-wrapper\">\n                <span className=\"MessageContextMenu--seen-by-label\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {canShowReactionsCount && message.reactors?.count ? (\n                    canShowSeenBy && seenByDatesCount\n                      ? lang(\n                        'Chat.OutgoingContextMixedReactionCount',\n                        [message.reactors.count, seenByDatesCount],\n                      )\n                      : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n                  ) : (\n                    seenByDatesCount === 1 && seenByRecentPeers\n                      ? renderText(\n                        isUserId(seenByRecentPeers[0].id)\n                          ? getUserFullName(seenByRecentPeers[0] as ApiUser)!\n                          : (seenByRecentPeers[0] as ApiChat).title,\n                      ) : (\n                        seenByDatesCount\n                          ? lang('Conversation.ContextMenuSeen', seenByDatesCount, 'i')\n                          : lang('Conversation.ContextMenuNoViews')\n                      )\n                  )}\n                </span>\n              </span>\n              <AvatarList className=\"avatars\" size=\"micro\" peers={seenByRecentPeers} />\n            </MenuItem>\n          </>\n        )}\n        {!isSponsoredMessage && (canLoadReadDate || shouldRenderShowWhen) && (\n          <ReadTimeMenuItem\n            canLoadReadDate={canLoadReadDate}\n            shouldRenderShowWhen={shouldRenderShowWhen}\n            message={message}\n            menuSeparatorSize={hasCustomEmoji ? 'thin' : 'thick'}\n            closeContextMenu={onClose}\n          />\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType, TabState } from '../../../global/types';\nimport type { IAlbum, IAnchorPosition, ThreadId } from '../../../types';\nimport {\n  type ApiAvailableReaction,\n  type ApiChatReactions,\n  type ApiMessage,\n  type ApiReaction,\n  type ApiStickerSet,\n  type ApiStickerSetInfo,\n  type ApiThreadInfo,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\n\nimport { PREVIEW_AVATAR_COUNT, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getMessageVideo,\n  hasMessageTtl,\n  isActionMessage,\n  isChatChannel,\n  isChatGroup,\n  isMessageLocal,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActions,\n  selectCanPlayAnimatedEmojis,\n  selectCanScheduleUntilOnline,\n  selectCanTranslateMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsMessageProtected,\n  selectIsMessageUnread,\n  selectIsPremiumPurchaseBlocked,\n  selectIsReactionPickerOpen,\n  selectMessageCustomEmojiSets,\n  selectMessageTranslations,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectStickerSet,\n  selectUserStatus,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getSelectionAsFormattedText } from './helpers/getSelectionAsFormattedText';\nimport { isSelectionRangeInsideMessage } from './helpers/isSelectionRangeInsideMessage';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport PinMessageModal from '../../common/PinMessageModal.async';\nimport ReportModal from '../../common/ReportModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  targetHref?: string;\n  messageListType: MessageListType;\n  noReplies?: boolean;\n  detectedLanguage?: string;\n  repliesThreadInfo?: ApiThreadInfo;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  threadId?: ThreadId;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  customEmojiSetsInfo?: ApiStickerSetInfo[];\n  customEmojiSets?: ApiStickerSet[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canBuyPremium?: boolean;\n  canShowReactionList?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canTranslate?: boolean;\n  canShowOriginal?: boolean;\n  isMessageTranslated?: boolean;\n  canSelectLanguage?: boolean;\n  isPrivate?: boolean;\n  isCurrentUserPremium?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  canRevote?: boolean;\n  canClosePoll?: boolean;\n  canLoadReadDate?: boolean;\n  shouldRenderShowWhen?: boolean;\n  activeDownloads?: TabState['activeDownloads']['byChatId'][number];\n  canShowSeenBy?: boolean;\n  enabledReactions?: ApiChatReactions;\n  canScheduleUntilOnline?: boolean;\n  maxUniqueReactions?: number;\n  canPlayAnimatedEmojis?: boolean;\n  isReactionPickerOpen?: boolean;\n  isInSavedMessages?: boolean;\n};\n\nconst selection = window.getSelection();\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  threadId,\n  availableReactions,\n  topReactions,\n  defaultTagReactions,\n  isOpen,\n  messageListType,\n  message,\n  customEmojiSetsInfo,\n  customEmojiSets,\n  album,\n  anchor,\n  targetHref,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  repliesThreadInfo,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canEdit,\n  enabledReactions,\n  maxUniqueReactions,\n  isPrivate,\n  isCurrentUserPremium,\n  canForward,\n  canBuyPremium,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  canRevote,\n  canClosePoll,\n  canPlayAnimatedEmojis,\n  canLoadReadDate,\n  shouldRenderShowWhen,\n  activeDownloads,\n  noReplies,\n  canShowSeenBy,\n  canScheduleUntilOnline,\n  canTranslate,\n  isMessageTranslated,\n  canShowOriginal,\n  canSelectLanguage,\n  isReactionPickerOpen,\n  isInSavedMessages,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    openThread,\n    updateDraftReplyInfo,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n    loadStickers,\n    cancelPollVote,\n    closePoll,\n    toggleReaction,\n    requestMessageTranslation,\n    showOriginalMessage,\n    openChatLanguageModal,\n    openMessageReactionPicker,\n    openPremiumModal,\n    loadOutboxReadDate,\n    copyMessageLink,\n  } = getActions();\n\n  const lang = useLang();\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isClosePollDialogOpen, openClosePollDialog, closeClosePollDialog] = useFlag();\n  const [canQuoteSelection, setCanQuoteSelection] = useState(false);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, onClose, message.date);\n\n  // `undefined` indicates that emoji are present and loading\n  const hasCustomEmoji = customEmojiSetsInfo === undefined || Boolean(customEmojiSetsInfo.length);\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canLoadReadDate && isOpen) {\n      loadOutboxReadDate({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canLoadReadDate, isOpen, message.chatId, message.id, message.readDate]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (customEmojiSetsInfo?.length && customEmojiSets?.length !== customEmojiSetsInfo.length) {\n      customEmojiSetsInfo.forEach((set) => {\n        loadStickers({ stickerSetInfo: set });\n      });\n    }\n  }, [customEmojiSetsInfo, customEmojiSets, loadStickers]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentPeers = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    if (message.reactions?.recentReactions?.length) {\n      const uniqueReactors = new Set(message.reactions?.recentReactions?.map(\n        ({ peerId }) => usersById[peerId] || chatsById[peerId],\n      ));\n\n      return Array.from(uniqueReactors).filter(Boolean).slice(0, PREVIEW_AVATAR_COUNT);\n    }\n\n    if (!message.seenByDates) {\n      return undefined;\n    }\n\n    return Object.keys(message.seenByDates).slice(0, PREVIEW_AVATAR_COUNT)\n      .map((id) => usersById[id] || chatsById[id])\n      .filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByDates]);\n\n  const isDownloading = useMemo(() => {\n    if (album) {\n      return album.messages.some((msg) => {\n        return activeDownloads?.[message.isScheduled ? 'scheduledIds' : 'ids']?.includes(msg.id);\n      });\n    }\n\n    return activeDownloads?.[message.isScheduled ? 'scheduledIds' : 'ids']?.includes(message.id);\n  }, [activeDownloads, album, message]);\n\n  const selectionRange = canReply && selection?.rangeCount ? selection.getRangeAt(0) : undefined;\n\n  useEffect(() => {\n    if (isMessageTranslated) {\n      setCanQuoteSelection(false);\n      return;\n    }\n\n    const isMessageTextSelected = selectionRange\n      && !selectionRange.collapsed\n      && Boolean(message.content.text?.text)\n      && isSelectionRangeInsideMessage(selectionRange);\n\n    if (!isMessageTextSelected) {\n      setCanQuoteSelection(false);\n      return;\n    }\n\n    const selectionText = getSelectionAsFormattedText(selectionRange);\n\n    setCanQuoteSelection(\n      selectionText.text.trim().length > 0\n      && message.content.text!.text!.includes(selectionText.text),\n    );\n  }, [\n    selectionRange, selectionRange?.collapsed, selectionRange?.startOffset, selectionRange?.endOffset,\n    isMessageTranslated, message.content.text,\n  ]);\n\n  const handleDelete = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  });\n\n  const handleReport = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const closeReportModal = useLastCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  });\n\n  const closePinModal = useLastCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  });\n\n  const handleReply = useLastCallback(() => {\n    updateDraftReplyInfo({\n      replyToMsgId: message.id,\n      quoteText: canQuoteSelection && selectionRange ? getSelectionAsFormattedText(selectionRange) : undefined,\n    });\n    closeMenu();\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleEdit = useLastCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  });\n\n  const handlePin = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  });\n\n  const handleUnpin = useLastCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  });\n\n  const handleForward = useLastCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  });\n\n  const handleFaveSticker = useLastCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker! });\n  });\n\n  const handleUnfaveSticker = useLastCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker! });\n  });\n\n  const handleCancelVote = useLastCallback(() => {\n    closeMenu();\n    cancelPollVote({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handlePollClose = useLastCallback(() => {\n    closeMenu();\n    closePoll({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleSelectMessage = useLastCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  });\n\n  const handleScheduledMessageSend = useLastCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  });\n\n  const handleRescheduleMessage = useLastCallback((scheduledAt: number) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt,\n    });\n    onClose();\n  });\n\n  const handleOpenCalendar = useLastCallback(() => {\n    setIsMenuOpen(false);\n    requestCalendar(handleRescheduleMessage);\n  });\n\n  const handleOpenSeenByModal = useLastCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleOpenReactorListModal = useLastCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleCopyMessages = useLastCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  });\n\n  const handleCopyLink = useLastCallback(() => {\n    copyMessageLink({\n      chatId: message.chatId,\n      messageId: message.id,\n      shouldIncludeThread: threadId !== MAIN_THREAD_ID,\n      shouldIncludeGrouped: true, // TODO: Provide correct value when ability to target specific message is added\n    });\n    closeMenu();\n  });\n\n  const handleCopyNumber = useLastCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  });\n\n  const handleDownloadClick = useLastCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  });\n\n  const handleSaveGif = useLastCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video! });\n    closeMenu();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReaction) => {\n    if (isInSavedMessages && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'saved_tags',\n      });\n    } else {\n      toggleReaction({\n        chatId: message.chatId, messageId: message.id, reaction, shouldAddToRecent: true,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleReactionPickerOpen = useLastCallback((position: IAnchorPosition) => {\n    openMessageReactionPicker({ chatId: message.chatId, messageId: message.id, position });\n  });\n\n  const handleTranslate = useLastCallback(() => {\n    requestMessageTranslation({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleShowOriginal = useLastCallback(() => {\n    showOriginalMessage({\n      chatId: message.chatId,\n      id: message.id,\n    });\n    closeMenu();\n  });\n\n  const handleSelectLanguage = useLastCallback(() => {\n    openChatLanguageModal({\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n    closeMenu();\n  });\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isReactionPickerOpen={isReactionPickerOpen}\n        availableReactions={availableReactions}\n        topReactions={topReactions}\n        defaultTagReactions={defaultTagReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isCurrentUserPremium={isCurrentUserPremium}\n        canBuyPremium={canBuyPremium}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        maxUniqueReactions={maxUniqueReactions}\n        anchor={anchor}\n        targetHref={targetHref}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canQuote={canQuoteSelection}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        repliesThreadInfo={repliesThreadInfo}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canRevote={canRevote}\n        canClosePoll={canClosePoll}\n        canShowSeenBy={canShowSeenBy}\n        canTranslate={canTranslate}\n        canShowOriginal={canShowOriginal}\n        canSelectLanguage={canSelectLanguage}\n        canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n        shouldRenderShowWhen={shouldRenderShowWhen}\n        canLoadReadDate={canLoadReadDate}\n        hasCustomEmoji={hasCustomEmoji}\n        customEmojiSets={customEmojiSets}\n        isDownloading={isDownloading}\n        seenByRecentPeers={seenByRecentPeers}\n        isInSavedMessages={isInSavedMessages}\n        noReplies={noReplies}\n        onOpenThread={handleOpenThread}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onCancelVote={handleCancelVote}\n        onClosePoll={openClosePollDialog}\n        onShowSeenBy={handleOpenSeenByModal}\n        onToggleReaction={handleToggleReaction}\n        onShowReactors={handleOpenReactorListModal}\n        onReactionPickerOpen={handleReactionPickerOpen}\n        onTranslate={handleTranslate}\n        onShowOriginal={handleShowOriginal}\n        onSelectLanguage={handleSelectLanguage}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      <ConfirmDialog\n        isOpen={isClosePollDialogOpen}\n        onClose={closeClosePollDialog}\n        text={lang('lng_polls_stop_warning')}\n        confirmLabel={lang('lng_polls_stop_sure')}\n        confirmHandler={handlePollClose}\n      />\n      {canReschedule && calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType, detectedLanguage }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n\n    const { defaultTags, topReactions, availableReactions } = global.reactions;\n\n    const activeDownloads = selectActiveDownloads(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const {\n      seenByExpiresAt, seenByMaxChatMembers, maxUniqueReactions, readDateExpiresAt,\n    } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n      canRevote,\n      canClosePoll,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n\n    const isPrivate = chat && isUserId(chat.id);\n    const userStatus = isPrivate ? selectUserStatus(global, chat.id) : undefined;\n    const isOwn = isOwnMessage(message);\n    const isMessageUnread = selectIsMessageUnread(global, message);\n    const canLoadReadDate = Boolean(\n      isPrivate\n        && isOwn\n        && !isMessageUnread\n        && readDateExpiresAt\n        && message.date > Date.now() / 1000 - readDateExpiresAt\n        && !userStatus?.isReadDateRestricted\n        && messageListType !== 'scheduled',\n    );\n    const shouldRenderShowWhen = Boolean(\n      canLoadReadDate && isPrivate && selectUserStatus(global, chat.id)?.isReadDateRestrictedByMe,\n    );\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const hasTtl = hasMessageTtl(message);\n    const canShowSeenBy = Boolean(!isLocal\n      && chat\n      && !isMessageUnread\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwn\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isAction = isActionMessage(message);\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, message.chatId) : undefined;\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const customEmojiSetsInfo = selectMessageCustomEmojiSets(global, message);\n    const customEmojiSetsNotFiltered = customEmojiSetsInfo?.map((set) => selectStickerSet(global, set));\n    const customEmojiSets = customEmojiSetsNotFiltered?.every<ApiStickerSet>(Boolean)\n      ? customEmojiSetsNotFiltered : undefined;\n\n    const translationRequestLanguage = selectRequestedMessageTranslationLanguage(global, message.chatId, message.id);\n    const hasTranslation = translationRequestLanguage\n      ? Boolean(selectMessageTranslations(global, message.chatId, translationRequestLanguage)[message.id]?.text)\n      : undefined;\n    const canTranslate = !hasTranslation && selectCanTranslateMessage(global, message, detectedLanguage);\n    const isChatTranslated = selectRequestedChatTranslationLanguage(global, message.chatId);\n\n    const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n\n    return {\n      threadId,\n      availableReactions,\n      topReactions,\n      defaultTagReactions: defaultTags,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: (canCopyNumber || (!isProtected && canCopy)),\n      canCopyLink: !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      canRevote,\n      canClosePoll: !isScheduled && canClosePoll,\n      activeDownloads,\n      canShowSeenBy,\n      canLoadReadDate,\n      shouldRenderShowWhen,\n      enabledReactions: chat?.isForbidden ? undefined : chatFullInfo?.enabledReactions,\n      maxUniqueReactions,\n      isPrivate,\n      isCurrentUserPremium,\n      hasFullInfo: Boolean(chatFullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction\n        && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID && !hasTtl,\n      canBuyPremium: !isCurrentUserPremium && !selectIsPremiumPurchaseBlocked(global),\n      customEmojiSetsInfo,\n      customEmojiSets,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, message.chatId),\n      canTranslate,\n      canShowOriginal: hasTranslation && !isChatTranslated,\n      canSelectLanguage: hasTranslation && !isChatTranslated,\n      isMessageTranslated: hasTranslation,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      isInSavedMessages,\n    };\n  },\n)(ContextMenuContainer));\n","export function isSelectionRangeInsideMessage(range: Range) {\n  const ancestor = range.commonAncestorContainer;\n  const el = ancestor.nodeType === Node.TEXT_NODE\n    ? ancestor.parentNode! as Element\n    : ancestor as Element;\n\n  return Boolean(el.closest('.message-content-wrapper .text-content'))\n    && !(Boolean(el.closest('.EmbeddedMessage')) || Boolean(el.closest('.WebPage')));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport MessageContextMenu from './MessageContextMenu';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  message: ApiSponsoredMessage;\n  anchor: IAnchorPosition;\n  onAboutAds: NoneToVoidFunction;\n  onReportAd: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd: NoneToVoidFunction;\n};\n\nconst SponsoredMessageContextMenuContainer: FC<OwnProps> = ({\n  message,\n  anchor,\n  onAboutAds,\n  onReportAd,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { openPremiumModal, showDialog } = getActions();\n\n  const [isMenuOpen, , closeMenu] = useFlag(true);\n  const { transitionClassNames } = useShowTransition(isMenuOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleAboutAdsOpen = useLastCallback(() => {\n    onAboutAds();\n    closeMenu();\n  });\n\n  const handleSponsoredHide = useLastCallback(() => {\n    closeMenu();\n    openPremiumModal();\n    onClose();\n  });\n\n  const handleSponsorInfo = useLastCallback(() => {\n    closeMenu();\n    showDialog({\n      data: {\n        message: [message.sponsorInfo, message.additionalInfo].join('\\n'),\n      },\n    });\n  });\n\n  const handleReportSponsoredMessage = useLastCallback(() => {\n    closeMenu();\n    onReportAd();\n  });\n\n  if (!anchor) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        isOpen={isMenuOpen}\n        anchor={anchor}\n        message={message}\n        onClose={closeMenu}\n        onCloseAnimationEnd={closeMenu}\n        onAboutAds={handleAboutAdsOpen}\n        onSponsoredHide={handleSponsoredHide}\n        onSponsorInfo={handleSponsorInfo}\n        onSponsoredReport={handleReportSponsoredMessage}\n      />\n    </div>\n  );\n};\n\nexport default memo(SponsoredMessageContextMenuContainer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectThreadInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport renderText from './helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useSchedule from '../../hooks/useSchedule';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport Loading from '../ui/Loading';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldUpdateStickerSetOrder?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  shouldUpdateStickerSetOrder,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePrevious(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          messageList: currentMessageList, sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && isAdded,\n      });\n      onClose();\n    }\n  }, [currentMessageList, shouldSchedule, requestCalendar, onClose, shouldUpdateStickerSetOrder, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat, chatFullInfo) : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId, isMessageThread, chatFullInfo)\n        && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldUpdateStickerSetOrder: global.settings.byKey.shouldUpdateStickerSetOrder,\n      currentMessageList,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nZYT4vJ3\",\"sets\":\"JzkmXjFF\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  customEmojiSets?: ApiStickerSet[];\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSets,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const customEmojiModalRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePrevious(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => (\n          <StickerSetCard\n            key={customEmojiSet.id}\n            className={styles.setCard}\n            stickerSet={customEmojiSet}\n            onClick={handleSetClick}\n            observeIntersection={observeIntersectionForCovers}\n            noPlay={!canPlayAnimatedEmojis}\n          />\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { customEmojiSetIds }): StateProps => {\n    const customEmojiSets = customEmojiSetIds?.map((id) => global.stickers.setsById[id]);\n\n    return {\n      customEmojiSets,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition, ThreadId } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  getIsSavedDialog,\n  isChatChannel,\n  isChatGroup,\n  isUserId,\n  isUserRightBanned,\n  selectIsChatMuted,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanManage, selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsPremiumPurchaseBlocked,\n  selectIsRightColumnShown, selectNotifyExceptions,\n  selectNotifySettings,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\nimport MuteChatModal from '../left/MuteChatModal.async';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport Portal from '../ui/Portal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: IconName; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canViewBoosts?: boolean;\n  canShowBoostModal?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  canTranslate?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  isForumAsMessages?: true;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  canGiftPremium?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n  isRightColumnShown?: boolean;\n  canManage?: boolean;\n  canTranslate?: boolean;\n  isBlocked?: boolean;\n  isBot?: boolean;\n  isChatWithSelf?: boolean;\n  savedDialog?: ApiChat;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  withForumActions,\n  isTopic,\n  isForum,\n  isForumAsMessages,\n  isChatInfoShown,\n  canStartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canViewBoosts,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  canGiftPremium,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  canManage,\n  isRightColumnShown,\n  canTranslate,\n  isBlocked,\n  isBot,\n  isChatWithSelf,\n  savedDialog,\n  canShowBoostModal,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openBoostStatistics,\n    openGiftPremiumModal,\n    openThreadWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n    toggleManagement,\n    togglePeerTranslations,\n    blockUser,\n    unblockUser,\n    setViewForumAsMessages,\n    openBoostModal,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [shouldCloseFast, setShouldCloseFast] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isMuteModalOpen, setIsMuteModalOpen] = useState(false);\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const handleReport = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  });\n\n  const closeReportModal = useLastCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  });\n\n  const closeMuteModal = useLastCallback(() => {\n    setIsMuteModalOpen(false);\n    onClose();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const handleViewGroupInfo = useLastCallback(() => {\n    openThreadWithInfo({ chatId, threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId });\n  });\n\n  const handleUnmuteClick = useLastCallback(() => {\n    updateChatMutedState({ chatId, isMuted: false });\n    closeMenu();\n  });\n\n  const handleMuteClick = useLastCallback(() => {\n    markRenderMuteModal();\n    setIsMuteModalOpen(true);\n    setIsMenuOpen(false);\n  });\n\n  const handleCreateTopicClick = useLastCallback(() => {\n    openCreateTopicPanel({ chatId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleEditClick = useLastCallback(() => {\n    toggleManagement({ force: true });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleEditTopicClick = useLastCallback(() => {\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleViewAsTopicsClick = useLastCallback(() => {\n    openChat({ id: undefined });\n    setViewForumAsMessages({ chatId, isEnabled: false });\n    closeMenu();\n  });\n\n  const handleEnterVoiceChatClick = useLastCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleLinkedChatClick = useLastCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  });\n\n  const handleGiftPremiumClick = useLastCallback(() => {\n    openGiftPremiumModal({ forUserIds: [chatId] });\n    closeMenu();\n  });\n\n  const handleAddContactClick = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  });\n\n  const handleSubscribe = useLastCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  });\n\n  const handleVideoCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  });\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ userId: chatId });\n    closeMenu();\n  });\n\n  const handleSearch = useLastCallback(() => {\n    onSearchClick();\n    closeMenu();\n  });\n\n  const handleStatisticsClick = useLastCallback(() => {\n    toggleStatistics();\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleBoostClick = useLastCallback(() => {\n    if (canViewBoosts) {\n      openBoostStatistics({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    } else {\n      openBoostModal({ chatId });\n    }\n    closeMenu();\n  });\n\n  const handleEnableTranslations = useLastCallback(() => {\n    togglePeerTranslations({ chatId, isEnabled: true });\n    closeMenu();\n  });\n\n  const handleSelectMessages = useLastCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  });\n\n  const handleOpenAsMessages = useLastCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  });\n\n  const handleBlock = useLastCallback(() => {\n    blockUser({ userId: chatId });\n    closeMenu();\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId });\n    closeMenu();\n  });\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  const deleteTitle = useMemo(() => {\n    if (!chat) return undefined;\n\n    if (savedDialog) {\n      return lang('Delete');\n    }\n\n    if (isPrivate) {\n      return lang('DeleteChatUser');\n    }\n\n    if (canDeleteChat) {\n      return lang('GroupInfo.DeleteAndExit');\n    }\n\n    if (isChannel) {\n      return lang('LeaveChannel');\n    }\n\n    return lang('Group.LeaveGroup');\n  }, [canDeleteChat, chat, isChannel, isPrivate, savedDialog, lang]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n          shouldCloseFast={shouldCloseFast}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {lang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? lang('lng_context_view_topic') : lang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canManage && !canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditClick}\n            >\n              {lang('Edit')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {lang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {lang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && !isForumAsMessages && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {lang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canShowBoostModal && !canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {lang(isChannel ? 'BoostingBoostChannelMenu' : 'BoostingBoostGroupMenu')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (isMuted ? (\n            <MenuItem\n              icon=\"unmute\"\n              onClick={handleUnmuteClick}\n            >\n              {lang('ChatsUnmute')}\n            </MenuItem>\n          )\n            : (\n              <MenuItem\n                icon=\"mute\"\n                onClick={handleMuteClick}\n              >\n                {lang('ChatsMute')}...\n              </MenuItem>\n            )\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {lang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {lang('Boosts')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canTranslate && (\n            <MenuItem\n              icon=\"language\"\n              onClick={handleEnableTranslations}\n            >\n              {lang('lng_context_translate')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGiftPremium && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftPremiumClick}\n            >\n              {lang('GiftPremium')}\n            </MenuItem>\n          )}\n          {isBot && (\n            <MenuItem\n              icon={isBlocked ? 'bots' : 'hand-stop'}\n              onClick={isBlocked ? handleRestartBot : handleBlock}\n            >\n              {isBlocked ? lang('BotRestart') : lang('Bot.Stop')}\n            </MenuItem>\n          )}\n          {isPrivate && !isChatWithSelf && !isBot && (\n            <MenuItem\n              icon={isBlocked ? 'user' : 'hand-stop'}\n              onClick={isBlocked ? handleUnblock : handleBlock}\n            >\n              {isBlocked ? lang('Unblock') : lang('BlockUser')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {deleteTitle}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={savedDialog || chat}\n            isSavedDialog={Boolean(savedDialog)}\n          />\n        )}\n        {canMute && shouldRenderMuteModal && chat?.id && (\n          <MuteChatModal\n            isOpen={isMuteModalOpen}\n            onClose={closeMuteModal}\n            onCloseAnimationEnd={unmarkRenderMuteModal}\n            chatId={chat.id}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            peerId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const canReportChat = isMainThread && (isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf));\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const fullInfo = userFullInfo || chatFullInfo;\n    const canGiftPremium = Boolean(\n      userFullInfo?.premiumGifts?.length\n      && !selectIsPremiumPurchaseBlocked(global),\n    );\n\n    const topic = chat?.topics?.[threadId];\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n    const canManage = selectCanManage(global, chatId);\n    // Context menu item should only be displayed if user hid translation panel\n    const canTranslate = selectCanTranslateChat(global, chatId) && fullInfo?.isTranslationDisabled;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const savedDialog = isSavedDialog ? selectChat(global, String(threadId)) : undefined;\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      isForumAsMessages: chat?.isForumAsMessages,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      canGiftPremium,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n      canManage,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      canTranslate,\n      isBlocked: userFullInfo?.isBlocked,\n      isBot: Boolean(chatBot),\n      isChatWithSelf,\n      savedDialog,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiReaction, ApiReactionKey, ApiSavedReactionTag,\n} from '../../api/types';\nimport type { ThreadId } from '../../types';\n\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getIsSavedDialog, getReactionKey, isSameReaction } from '../../global/helpers';\nimport {\n  selectChat,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n} from '../../global/selectors';\nimport { getDayStartAt } from '../../util/date/dateFormat';\nimport { debounce } from '../../util/schedulers';\nimport { IS_IOS } from '../../util/windowEnvironment';\n\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\nimport SavedTagButton from './message/reactions/SavedTagButton';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  threadId?: ThreadId;\n  query?: string;\n  savedTags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  searchTag?: ApiReaction;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  threadId,\n  query,\n  savedTags,\n  searchTag,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n  isCurrentUserPremium,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setLocalTextSearchTag,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n    openPremiumModal,\n    loadSavedReactionTags,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const tagsRef = useRef<HTMLDivElement>(null);\n\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  const hasQueryData = Boolean(query || searchTag);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0], threadId });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds, threadId]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const tags = useMemo(() => {\n    if (!savedTags) return undefined;\n    return Object.values(savedTags);\n  }, [savedTags]);\n\n  const hasTags = Boolean(tags?.length);\n  const areTagsDisabled = hasTags && !isCurrentUserPremium;\n\n  useHorizontalScroll(tagsRef, !hasTags);\n\n  useEffect(() => {\n    if (isActive) loadSavedReactionTags();\n  }, [hasTags, isActive]);\n\n  const handleMessageSearchQueryChange = useLastCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (hasQueryData) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleTagClick = useLastCallback((tag: ApiReaction) => {\n    if (areTagsDisabled) {\n      openPremiumModal({\n        initialSection: 'saved_tags',\n      });\n      return;\n    }\n\n    setLocalTextSearchTag({ tag });\n\n    runDebouncedForSearch(searchTextMessagesLocal);\n  });\n\n  const handleUp = useLastCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleDown = useLastCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex], threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleCloseLocalTextSearch = useLastCallback(() => {\n    closeLocalTextSearch();\n  });\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={handleCloseLocalTextSearch}\n        >\n          <i className=\"icon icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      {hasTags && (\n        <div\n          ref={tagsRef}\n          className=\"tags-subheader custom-scroll-x no-scrollbar\"\n        >\n          {tags.map((tag) => (\n            <SavedTagButton\n              containerId=\"mobile-search\"\n              key={getReactionKey(tag.reaction)}\n              reaction={tag.reaction}\n              tag={tag}\n              withCount\n              isDisabled={areTagsDisabled}\n              isChosen={isSameReaction(tag.reaction, searchTag)}\n              onClick={handleTagClick}\n            />\n          ))}\n        </div>\n      )}\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {hasQueryData ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n    const { chatId, threadId } = currentMessageList;\n\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, savedTag, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const savedTags = isSavedMessages && !isSavedDialog ? global.savedReactionTags?.byKey : undefined;\n\n    return {\n      chat,\n      query,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n      savedTags,\n      searchTag: savedTag,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(MobileSearchFooter));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"MhpiTAwi\",\"wrapper\":\"NIaqmosK\"};","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiAvailableReaction, ApiChatReactions, ApiReaction } from '../../../../api/types';\n\nimport { getReactionKey, sortReactions } from '../../../../global/helpers';\nimport { selectChatFullInfo } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nimport ReactionEmoji from '../../../common/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  onReactionSelect?: (reaction: ApiReaction) => void;\n  selectedReactionIds?: string[];\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  onReactionSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>(null);\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const allAvailableReactions = useMemo(() => {\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      return sortReactions((availableReactions || []).map(({ reaction }) => reaction), topReactions);\n    }\n\n    return sortReactions(enabledReactions.allowed, topReactions);\n  }, [availableReactions, enabledReactions, topReactions]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect!}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { availableReactions, topReactions } = global.reactions;\n    const { enabledReactions } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n    };\n  },\n)(ReactionPickerLimited));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiMessageEntity,\n  ApiReaction, ApiReactionCustomEmoji, ApiSticker, ApiStory, ApiStorySkipped,\n} from '../../../../api/types';\nimport type { IAnchorPosition } from '../../../../types';\n\nimport { getReactionKey, getStoryKey, isUserId } from '../../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo, selectChatMessage, selectIsContextMenuTranslucent, selectIsCurrentUserPremium,\n  selectPeerStory, selectTabState,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { buildCustomEmojiHtml } from '../../composer/helpers/customEmoji';\n\nimport { getIsMobile } from '../../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMenuPosition from '../../../../hooks/useMenuPosition';\n\nimport CustomEmojiPicker from '../../../common/CustomEmojiPicker';\nimport Menu from '../../../ui/Menu';\nimport ReactionPickerLimited from './ReactionPickerLimited';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  withCustomReactions?: boolean;\n  message?: ApiMessage;\n  story?: ApiStory | ApiStorySkipped;\n  isCurrentUserPremium?: boolean;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n  sendAsMessage?: boolean;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\nconst REACTION_SELECTOR_WIDTH = 16.375 * REM;\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  story,\n  position,\n  isTranslucent,\n  isCurrentUserPremium,\n  withCustomReactions,\n  sendAsMessage,\n}) => {\n  const {\n    toggleReaction, closeReactionPicker, sendMessage, showNotification, sendStoryReaction,\n  } = getActions();\n\n  const lang = useLang();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const renderedStoryPeerId = useCurrentOrPrev(story?.peerId, true);\n  const renderedStoryId = useCurrentOrPrev(story?.id);\n  const storedPosition = useCurrentOrPrev(position, true);\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    if (renderedStoryId) {\n      return storedPosition;\n    }\n\n    return {\n      x: storedPosition.x + (withCustomReactions ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (withCustomReactions ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [renderedStoryId, storedPosition, withCustomReactions]);\n\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({\n    withPortal: true,\n    isDense: !renderedStoryPeerId,\n    deltaX: !getIsMobile() && menuRef.current\n      ? -(menuRef.current.offsetWidth - REACTION_SELECTOR_WIDTH) / 2 - FULL_PICKER_SHIFT_DELTA.x / 2\n      : 0,\n  }));\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style,\n  } = useMenuPosition(renderingPosition, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  const handleToggleCustomReaction = useLastCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction = sticker.isCustomEmoji\n      ? { documentId: sticker.id } as ApiReactionCustomEmoji\n      : { emoticon: sticker.emoji } as ApiReaction;\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReaction) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleStoryReactionSelect = useLastCallback((item: ApiReaction | ApiSticker) => {\n    const reaction = 'id' in item ? { documentId: item.id } : item;\n\n    const sticker = 'documentId' in item\n      ? getGlobal().customEmojis.byId[item.documentId] : 'emoticon' in item ? undefined : item;\n\n    if (sticker && !sticker.isFree && !isCurrentUserPremium) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n\n      closeReactionPicker();\n\n      return;\n    }\n\n    if (!sendAsMessage) {\n      sendStoryReaction({\n        peerId: renderedStoryPeerId!,\n        storyId: renderedStoryId!,\n        containerId: getStoryKey(renderedStoryPeerId!, renderedStoryId!),\n        reaction,\n        shouldAddToRecent: true,\n      });\n      closeReactionPicker();\n      return;\n    }\n\n    let text: string | undefined;\n    let entities: ApiMessageEntity[] | undefined;\n\n    if ('emoticon' in item) {\n      text = item.emoticon;\n    } else {\n      const customEmojiMessage = parseHtmlAsFormattedText(buildCustomEmojiHtml(sticker!));\n      text = customEmojiMessage.text;\n      entities = customEmojiMessage.entities;\n    }\n\n    sendMessage({ text, entities, isReaction: true });\n    closeReactionPicker();\n  });\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push(getReactionKey(reaction));\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(styles.menu, 'ReactionPicker')}\n      bubbleClassName={buildClassName(\n        styles.menuContent,\n        !withCustomReactions && !renderedStoryId && styles.onlyReactions,\n        renderedStoryId && styles.storyMenu,\n      )}\n      withPortal\n      noCompact\n      positionX={positionX}\n      positionY={positionY}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      <CustomEmojiPicker\n        chatId={renderedChatId}\n        idPrefix=\"message-emoji-set-\"\n        isHidden={!isOpen || !(withCustomReactions || renderedStoryId)}\n        loadAndPlay={Boolean(isOpen && withCustomReactions)}\n        isReactionPicker\n        className={!withCustomReactions && !renderedStoryId ? styles.hidden : undefined}\n        selectedReactionIds={selectedReactionIds}\n        isTranslucent={isTranslucent}\n        onCustomEmojiSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleCustomReaction}\n        onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n      />\n      {!withCustomReactions && Boolean(renderedChatId) && (\n        <ReactionPickerLimited\n          chatId={renderedChatId}\n          loadAndPlay={isOpen}\n          onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n          selectedReactionIds={selectedReactionIds}\n        />\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const state = selectTabState(global);\n  const {\n    chatId, messageId, storyPeerId, storyId, position, sendAsMessage,\n  } = state.reactionPicker || {};\n  const story = storyPeerId && storyId\n    ? selectPeerStory(global, storyPeerId, storyId) as ApiStory | ApiStorySkipped\n    : undefined;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = isUserId(chatId || storyPeerId || '');\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const areCustomReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  return {\n    message,\n    story,\n    position,\n    withCustomReactions: chat?.isForbidden || areSomeReactionsAllowed\n      ? false\n      : areCustomReactionsAllowed || isPrivateChat,\n    isTranslucent: selectIsContextMenuTranslucent(global),\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    sendAsMessage,\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"gBh4WvBC\",\"menuContent\":\"qSfKwMzX\",\"storyMenu\":\"srpBMrqr\",\"onlyReactions\":\"dRNSqkOC\",\"hidden\":\"KVwgF6DG\"};","import { fixImageContent } from '../../../../util/parseHtmlAsFormattedText';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QucaiGVU\",\"preview\":\"SHoF85Vw\",\"duration\":\"nI2M1SBH\",\"single\":\"FjrnqGba\",\"no-grouping\":\"g0cTsM9d\",\"noGrouping\":\"g0cTsM9d\",\"file\":\"B6f6GcvN\",\"overlay\":\"bX7LdgxW\",\"action-item\":\"Zo7u5epf\",\"actionItem\":\"Zo7u5epf\",\"delete-file\":\"CYJwy9T_\",\"deleteFile\":\"CYJwy9T_\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { SUPPORTED_IMAGE_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/date/dateFormat';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport File from '../../common/File';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useLastCallback(() => {\n    onToggleSpoiler?.(index);\n  });\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'image':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick!.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <i\n                className={buildClassName('icon', 'icon-delete', styles.actionItem, styles.deleteFile)}\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          <i\n            className={buildClassName(\n              'icon',\n              attachment.shouldSendAsSpoiler ? 'icon-spoiler-disable' : 'icon-spoiler',\n              styles.actionItem,\n            )}\n            onClick={handleSpoilerClick}\n          />\n          {onDelete && (\n            <i\n              className={buildClassName('icon', 'icon-delete', styles.actionItem)}\n              onClick={() => onDelete(index)}\n            />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport function getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'image';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import animateScroll from './animateScroll';\nimport findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useLastCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  });\n\n  const handleArrowKey = useLastCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  });\n\n  const handleItemSelect = useLastCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (!isActive) return false;\n\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  });\n\n  useEffect(() => {\n    if (!isActive) setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n  }, [isActive, shouldRemoveSelectionOnReset]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useLastCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  });\n\n  const handleSelectMention = useLastCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  });\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item smaller-icon\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"a27O2Qlr\",\"mobile\":\"khvUZbGZ\",\"symbolMenuOpen\":\"ir5kkMy1\",\"header-border\":\"Pc1k8G8s\",\"headerBorder\":\"Pc1k8G8s\",\"attachments\":\"_bxSIFgj\",\"attachments-bottom-padding\":\"RPVunBe2\",\"attachmentsBottomPadding\":\"RPVunBe2\",\"caption-wrapper\":\"EtmiUn2k\",\"captionWrapper\":\"EtmiUn2k\",\"caption-top-border\":\"FjjSKMYe\",\"captionTopBorder\":\"FjjSKMYe\",\"caption\":\"Te7lIfpB\",\"drop-target\":\"LhhRTsy6\",\"dropTarget\":\"LhhRTsy6\",\"hovered\":\"AnO3BgVv\",\"send-wrapper\":\"wDqWK9MD\",\"sendWrapper\":\"wDqWK9MD\",\"send\":\"kNlWmBJI\",\"is-pointer-env\":\"rYZmraWo\",\"isPointerEnv\":\"rYZmraWo\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAttachment, ApiChatMember, ApiMessage, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState, MessageListType } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getAttachmentType, isUserId } from '../../../global/helpers';\nimport { selectChatFullInfo, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { validateFiles } from '../../../util/files';\nimport { removeAllSelections } from '../../../util/selection';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useFlag from '../../../hooks/useFlag';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\n\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport MentionTooltip from './MentionTooltip';\nimport MessageInput from './MessageInput';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  attachments: ApiAttachment[];\n  editingMessage?: ApiMessage;\n  messageListType?: MessageListType;\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady: boolean;\n  isForMessage?: boolean;\n  shouldSchedule?: boolean;\n  shouldSuggestCompression?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  forceDarkTheme?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  editingMessage?: ApiMessage;\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  editingMessage,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  isForMessage,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldSuggestCompression,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  forceDarkTheme,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n}) => {\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useRef<HTMLButtonElement | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const isEditing = editingMessage && Boolean(editingMessage);\n  const isInAlbum = editingMessage && editingMessage?.groupedId;\n  const isEditingMessageFile = attachments?.length && getAttachmentType(attachments[0]);\n  const notEditingFile = isEditingMessageFile !== 'file';\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const [shouldSendCompressed, setShouldSendCompressed] = useState(\n    shouldSuggestCompression ?? attachmentSettings.shouldCompress,\n  );\n  const isSendingCompressed = Boolean(\n    (shouldSendCompressed || shouldForceCompression || isInAlbum) && !shouldForceAsFile,\n  );\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendCompressed(shouldSuggestCompression ?? attachmentSettings.shouldCompress);\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n    }\n  }, [attachmentSettings, isOpen, shouldSuggestCompression]);\n\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      removeAllSelections();\n    }\n  }, [isMobile, isOpen]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useLastCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = ((shouldSchedule || shouldSendScheduled) && isForMessage && !editingMessage) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped);\n      updateAttachmentSettings({\n        shouldCompress: shouldSuggestCompression === undefined ? isSendingCompressed : undefined,\n        shouldSendGrouped,\n      });\n    }\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendAttachments(true);\n  });\n\n  const handleSendClick = useLastCallback(() => {\n    sendAttachments();\n  });\n\n  const handleScheduleClick = useLastCallback(() => {\n    sendAttachments(false, true);\n  });\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  });\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useLastCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  });\n\n  const handleDelete = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  });\n\n  const handleEnableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: true,\n    })));\n  });\n\n  const handleDisableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  });\n\n  const handleToggleSpoiler = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  });\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [lang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon icon-more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang(isEditing ? 'EditMessageReplacePhoto' : 'PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang(isEditing ? 'EditMessageReplaceVideo' : 'PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang(isEditing ? 'EditMessageReplaceAudio' : 'PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang(isEditing ? 'EditMessageReplaceFile' : 'PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        {notEditingFile && !isInAlbum\n          && (\n            <DropdownMenu\n              className=\"attachmeneditingMessaget-modal-more-menu with-menu-transitions\"\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              {Boolean(!editingMessage) && (\n                <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{lang('Add')}</MenuItem>\n              )}\n              {hasMedia && (\n                <>\n                  {\n                    !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n                    // eslint-disable-next-line react/jsx-no-bind\n                      <MenuItem icon=\"document\" onClick={() => setShouldSendCompressed(false)}>\n                        {lang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                      </MenuItem>\n                    ) : (\n                    // eslint-disable-next-line react/jsx-no-bind\n                      <MenuItem icon=\"photo\" onClick={() => setShouldSendCompressed(true)}>\n                        {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                      </MenuItem>\n                    ))\n                  }\n                  {isSendingCompressed && hasAnySpoilerable && Boolean(!editingMessage) && (\n                    hasSpoiler ? (\n                      <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                        {lang('Attachment.DisableSpoiler')}\n                      </MenuItem>\n                    ) : (\n                      <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                        {lang('Attachment.EnableSpoiler')}\n                      </MenuItem>\n                    )\n                  )}\n                </>\n              )}\n              {isMultiple && (\n                shouldSendGrouped ? (\n                  <MenuItem\n                    icon=\"grouped-disable\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => setShouldSendGrouped(false)}\n                  >\n                    Ungroup All Media\n                  </MenuItem>\n                ) : (\n                // eslint-disable-next-line react/jsx-no-bind\n                  <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                    Group All Media\n                  </MenuItem>\n                )\n              )}\n            </DropdownMenu>\n          )}\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n        forceDarkTheme && 'component-theme-dark',\n      )}\n      noBackdropClose\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n              idPrefix=\"attachment\"\n              forceDarkTheme={forceDarkTheme}\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              customEmojiPrefix=\"attachment\"\n              isReady={isReady}\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={lang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule && !editingMessage ? lang('Next') : editingMessage ? lang('Save') : lang('Send')}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  canSchedule={isForMessage}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { language, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport TextArea from '../../ui/TextArea';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonymous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const handleSolutionChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setSolution(e.target.value);\n  });\n\n  const focusInput = useLastCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  const addNewOption = useLastCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const isNoCorrectOptionError = isQuizMode && (correctOption === undefined || !options[correctOption].trim());\n\n    const answers = options\n      .map((text, index) => {\n        text = text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          text,\n          option: String(index),\n          ...(index === correctOption && { correct: true }),\n        };\n      }).filter(Boolean);\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    if (!questionTrimmed || answers.length < 2) {\n      setQuestion(questionTrimmed);\n      if (answers.length) {\n        const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter(Boolean);\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isNoCorrectOptionError) {\n      setHasErrors(true);\n      return;\n    }\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseHtmlAsFormattedText(solution.substring(0, MAX_SOLUTION_LENGTH)))\n        || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  });\n\n  const updateOption = useLastCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  });\n\n  const removeOption = useLastCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleCorrectOptionChange = useLastCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  });\n\n  const handleIsAnonymousChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  });\n\n  const handleMultipleAnswersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  });\n\n  const handleQuizModeChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  });\n\n  const handleQuestionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  });\n\n  const getQuestionError = useLastCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  });\n\n  const getOptionsError = useLastCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: !options[index].trim() }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonymous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <TextArea\n              value={solution}\n              onChange={handleSolutionChange}\n              noReplaceNewlines\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport { BASE_URL, IS_PACKAGED_ELECTRON } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji/emoji';\nimport { IS_EMOJI_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `${IS_PACKAGED_ELECTRON ? BASE_URL : '.'}/img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n          draggable={false}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type {\n  EmojiData,\n  EmojiModule,\n  EmojiRawData,\n} from '../../../util/emoji/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport animateScroll from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { uncompressEmoji } from '../../../util/emoji/emoji';\nimport { pick } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useLastCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector(`#emoji-category-${index}`)! as HTMLElement;\n    animateScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  });\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  });\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={buildClassName('icon', icon)} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <div className={containerClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={buildClassName('EmojiPicker-main', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMenuPosition from '../../hooks/useMenuPosition';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Spinner from '../ui/Spinner';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.gif-context-menu .bubble'));\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  });\n\n  const handleUnsaveClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  });\n\n  const handleContextDelete = useLastCallback(() => {\n    onUnsaveClick?.(gif);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n          draggable={false}\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport GifButton from '../../common/GifButton';\nimport Loading from '../../ui/Loading';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useLastCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  });\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div>\n      <div\n        ref={containerRef}\n        className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {!canSendGifs ? (\n          <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n        ) : canRenderContents && savedGifs && savedGifs.length ? (\n          savedGifs.map((gif) => (\n            <GifButton\n              key={gif.id}\n              gif={gif}\n              observeIntersection={observeIntersection}\n              isDisabled={!loadAndPlay}\n              onClick={canSendGifs ? onGifSelect : undefined}\n              onUnsaveClick={handleUnsaveClick}\n              isSavedMessages={isSavedMessages}\n            />\n          ))\n        ) : canRenderContents && savedGifs ? (\n          <div className=\"picker-disabled\">No saved GIFs.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent, ThreadId } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { isUserId } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo, selectIsChatWithSelf, selectIsCurrentUserPremium, selectShouldLoopStickers,\n} from '../../../global/selectors';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pickTruthy } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Avatar from '../../common/Avatar';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport StickerSetCover from './StickerSetCover';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  noContextMenus?: boolean;\n  idPrefix: string;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noContextMenus,\n  idPrefix,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const prefix = `${idPrefix}-sticker-set`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    const userSetIds = [...(addedSetIds || [])];\n    if (chatStickerSetId) {\n      userSetIds.unshift(chatStickerSetId);\n    }\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, userSetIds));\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [addedSetIds, stickerSetsById, favoriteStickers, recentStickers, chatStickerSetId, lang]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents && !noPopulatedSets && canSendStickers;\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  });\n\n  const handleStickerUnfave = useLastCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  });\n\n  const handleStickerFave = useLastCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  });\n\n  const handleMouseMove = useLastCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  });\n\n  const handleRemoveRecentSticker = useLastCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar peer={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n              forcePlayback\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n          forcePlayback\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div ref={headerRef} className={headerClassName}>\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        onScroll={handleContentScroll}\n        className={buildClassName(styles.main, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            noContextMenus={noContextMenus}\n            index={i}\n            idPrefix={prefix}\n            observeIntersection={observeIntersectionForSet}\n            observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n            observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n            isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            isTranslucent={isTranslucent}\n            isChatStickerSet={stickerSet.id === chatStickerSetId}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n            forcePlayback\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  canSearch?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'CustomEmoji',\n  'Stickers',\n  'GIFs',\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText, canSearch,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useLastCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  });\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && canSearch && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon icon-search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\nimport type { ThreadId } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectIsContextMenuTranslucent, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport GifPicker from './GifPicker';\nimport StickerPicker from './StickerPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  isMessageComposer?: boolean;\n  idPrefix: string;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  positionX?: 'left' | 'right';\n  positionY?: 'top' | 'bottom';\n  transformOriginX?: number;\n  transformOriginY?: number;\n  style?: string;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isBackgroundTranslucent?: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isMessageComposer,\n  isLeftColumnShown,\n  idPrefix,\n  isAttachmentModal,\n  canSendPlainText,\n  className,\n  positionX,\n  positionY,\n  transformOriginX,\n  transformOriginY,\n  style,\n  isBackgroundTranslucent,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  const lang = useLang();\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  });\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleSearch = useLastCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, canUpdateStickerSetsOrder);\n  });\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            idPrefix={idPrefix}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            idPrefix={idPrefix}\n            canSendStickers={canSendStickers}\n            noContextMenus={!isMessageComposer}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name=\"slide\"\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        canSearch={isMessageComposer}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n      isMessageComposer && 'in-middle-column',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX={isAttachmentModal ? positionX : 'left'}\n      positionY={isAttachmentModal ? positionY : 'bottom'}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      style={style}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n    };\n  },\n)(SymbolMenu));\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatCommand.scss';\n\ntype OwnProps<T = undefined> = {\n  command: string;\n  description: string;\n  peer?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  clickArg: T;\n  onClick: (arg: T) => void;\n};\n\n// eslint-disable-next-line @typescript-eslint/comma-dangle\nconst ChatCommand = <T,>({\n  withAvatar,\n  focus,\n  command,\n  description,\n  peer,\n  clickArg,\n  onClick,\n}: OwnProps<T>) => {\n  const handleClick = useLastCallback(() => {\n    onClick(clickArg);\n  });\n\n  return (\n    <ListItem\n      key={command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={handleClick}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" peer={peer} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{command}</span>\n        <span className=\"subtitle\">{renderText(description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(ChatCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiBotCommand, ApiMessage, ApiQuickReply, ApiUser,\n} from '../../../api/types';\nimport type { Signal } from '../../../util/signals';\n\nimport buildClassName from '../../../util/buildClassName';\nimport freezeWhenClosed from '../../../util/hoc/freezeWhenClosed';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ChatCommand from './ChatCommand';\n\nimport styles from './ChatCommandTooltip.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  quickReplies?: ApiQuickReply[];\n  quickReplyMessages?: Record<number, ApiMessage>;\n  self: ApiUser;\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype QuickReplyWithDescription = {\n  id: number;\n  command: string;\n  description: string;\n};\n\nconst ChatCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  withUsername,\n  botCommands,\n  quickReplies,\n  quickReplyMessages,\n  self,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand, sendQuickReply } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useLastCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.usernames![0].username}` : ''}`,\n    });\n    onClick();\n  });\n\n  const handleSendQuickReply = useLastCallback((id: number) => {\n    sendQuickReply({ chatId, quickReplyId: id });\n    onClick();\n  });\n\n  const quickRepliesWithDescription = useMemo(() => {\n    if (!quickReplies?.length || !quickReplyMessages) return undefined;\n    return quickReplies.map((reply) => {\n      const message = quickReplyMessages[reply.topMessageId];\n      return {\n        id: reply.id,\n        command: reply.shortcut,\n        description: message?.content.text?.text || '',\n      } satisfies QuickReplyWithDescription;\n    });\n  }, [quickReplies, quickReplyMessages]);\n\n  const handleKeyboardSelect = useLastCallback((item: ApiBotCommand | QuickReplyWithDescription) => {\n    if (!item.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    if ('id' in item) {\n      handleSendQuickReply(item.id);\n    } else {\n      handleSendCommand(item);\n    }\n\n    return true;\n  });\n\n  const keyboardNavigationItems = useMemo(() => {\n    if (!botCommands && !quickRepliesWithDescription) return undefined;\n    return ([] as (ApiBotCommand | QuickReplyWithDescription)[])\n      .concat(quickRepliesWithDescription || [], botCommands || []);\n  }, [botCommands, quickRepliesWithDescription]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: keyboardNavigationItems,\n    onSelect: handleKeyboardSelect,\n    onClose,\n  });\n\n  const isEmpty = (botCommands && !botCommands.length) || (quickReplies && !quickReplies.length);\n\n  useEffect(() => {\n    if (isEmpty) {\n      onClose();\n    }\n  }, [isEmpty, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  if (!shouldRender || isEmpty) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {quickRepliesWithDescription?.map((reply, index) => (\n        <ChatCommand\n          key={`quickReply_${reply.id}`}\n          command={reply.command}\n          description={reply.description}\n          peer={self}\n          withAvatar\n          clickArg={reply.id}\n          onClick={handleSendQuickReply}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n      {botCommands?.map((command, index) => (\n        <ChatCommand\n          key={`${command.botId}_${command.command}`}\n          command={command.command}\n          description={command.description}\n          // No need for expensive global updates on users and chats, so we avoid them\n          peer={getGlobal().users.byId[command.botId]}\n          withAvatar\n          clickArg={command}\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex + (quickRepliesWithDescription?.length || 0) === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(freezeWhenClosed(ChatCommandTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iaTB59vy\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport ChatCommand from './ChatCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useLastCallback((command: string) => {\n    sendBotCommand({\n      command: `/${command}`,\n    });\n    onClose();\n  });\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <ChatCommand\n          key={botCommand.command}\n          command={botCommand.command}\n          description={botCommand.description}\n          clickArg={botCommand.command}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ThreadId } from '../../../types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_8sFuAomM\",\"emojiButton\":\"crWzZ2jr\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useLastCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  });\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useState } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canSchedule,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const lang = useLang();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu with-menu-transitions\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {canSchedule && onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n      {canSchedule && onSendSchedule && displayScheduleUntilOnline && (\n        <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n          {lang('SendWhenOnline')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { IAnchorPosition } from '../../../types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport getKeyFromEvent from '../../../util/getKeyFromEvent';\nimport stopEvent from '../../../util/stopEvent';\nimport { INPUT_CUSTOM_EMOJI_SELECTOR } from './helpers/customEmoji';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useVirtualBackdrop from '../../../hooks/useVirtualBackdrop';\n\nimport Button from '../../ui/Button';\n\nimport './TextFormatter.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  anchorPosition?: IAnchorPosition;\n  selectedRange?: Range;\n  setSelectedRange: (range: Range) => void;\n  onClose: () => void;\n};\n\ninterface ISelectedTextFormats {\n  bold?: boolean;\n  italic?: boolean;\n  underline?: boolean;\n  strikethrough?: boolean;\n  monospace?: boolean;\n  spoiler?: boolean;\n}\n\nconst TEXT_FORMAT_BY_TAG_NAME: Record<string, keyof ISelectedTextFormats> = {\n  B: 'bold',\n  STRONG: 'bold',\n  I: 'italic',\n  EM: 'italic',\n  U: 'underline',\n  DEL: 'strikethrough',\n  CODE: 'monospace',\n  SPAN: 'spoiler',\n};\nconst fragmentEl = document.createElement('div');\n\nconst TextFormatter: FC<OwnProps> = ({\n  isOpen,\n  anchorPosition,\n  selectedRange,\n  setSelectedRange,\n  onClose,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const linkUrlInputRef = useRef<HTMLInputElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen);\n  const [isLinkControlOpen, openLinkControl, closeLinkControl] = useFlag();\n  const [linkUrl, setLinkUrl] = useState('');\n  const [isEditingLink, setIsEditingLink] = useState(false);\n  const [inputClassName, setInputClassName] = useState<string | undefined>();\n  const [selectedTextFormats, setSelectedTextFormats] = useState<ISelectedTextFormats>({});\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n  useVirtualBackdrop(\n    isOpen,\n    containerRef,\n    onClose,\n    true,\n  );\n\n  useEffect(() => {\n    if (isLinkControlOpen) {\n      linkUrlInputRef.current!.focus();\n    } else {\n      setLinkUrl('');\n      setIsEditingLink(false);\n    }\n  }, [isLinkControlOpen]);\n\n  useEffect(() => {\n    if (!shouldRender) {\n      closeLinkControl();\n      setSelectedTextFormats({});\n      setInputClassName(undefined);\n    }\n  }, [closeLinkControl, shouldRender]);\n\n  useEffect(() => {\n    if (!isOpen || !selectedRange) {\n      return;\n    }\n\n    const selectedFormats: ISelectedTextFormats = {};\n    let { parentElement } = selectedRange.commonAncestorContainer;\n    while (parentElement && parentElement.id !== EDITABLE_INPUT_ID) {\n      const textFormat = TEXT_FORMAT_BY_TAG_NAME[parentElement.tagName];\n      if (textFormat) {\n        selectedFormats[textFormat] = true;\n      }\n\n      parentElement = parentElement.parentElement;\n    }\n\n    setSelectedTextFormats(selectedFormats);\n  }, [isOpen, selectedRange, openLinkControl]);\n\n  const restoreSelection = useLastCallback(() => {\n    if (!selectedRange) {\n      return;\n    }\n\n    const selection = window.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(selectedRange);\n    }\n  });\n\n  const updateSelectedRange = useLastCallback(() => {\n    const selection = window.getSelection();\n    if (selection) {\n      setSelectedRange(selection.getRangeAt(0));\n    }\n  });\n\n  const getSelectedText = useLastCallback((shouldDropCustomEmoji?: boolean) => {\n    if (!selectedRange) {\n      return undefined;\n    }\n    fragmentEl.replaceChildren(selectedRange.cloneContents());\n    if (shouldDropCustomEmoji) {\n      fragmentEl.querySelectorAll(INPUT_CUSTOM_EMOJI_SELECTOR).forEach((el) => {\n        el.replaceWith(el.getAttribute('alt')!);\n      });\n    }\n    return fragmentEl.innerHTML;\n  });\n\n  const getSelectedElement = useLastCallback(() => {\n    if (!selectedRange) {\n      return undefined;\n    }\n\n    return selectedRange.commonAncestorContainer.parentElement;\n  });\n\n  function updateInputStyles() {\n    const input = linkUrlInputRef.current;\n    if (!input) {\n      return;\n    }\n\n    const { offsetWidth, scrollWidth, scrollLeft } = input;\n    if (scrollWidth <= offsetWidth) {\n      setInputClassName(undefined);\n      return;\n    }\n\n    let className = '';\n    if (scrollLeft < scrollWidth - offsetWidth) {\n      className = 'mask-right';\n    }\n    if (scrollLeft > 0) {\n      className += ' mask-left';\n    }\n\n    setInputClassName(className);\n  }\n\n  function handleLinkUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setLinkUrl(e.target.value);\n    updateInputStyles();\n  }\n\n  function getFormatButtonClassName(key: keyof ISelectedTextFormats) {\n    if (selectedTextFormats[key]) {\n      return 'active';\n    }\n\n    if (key === 'monospace' || key === 'strikethrough') {\n      if (Object.keys(selectedTextFormats).some(\n        (fKey) => fKey !== key && Boolean(selectedTextFormats[fKey as keyof ISelectedTextFormats]),\n      )) {\n        return 'disabled';\n      }\n    } else if (selectedTextFormats.monospace || selectedTextFormats.strikethrough) {\n      return 'disabled';\n    }\n\n    return undefined;\n  }\n\n  const handleSpoilerText = useLastCallback(() => {\n    if (selectedTextFormats.spoiler) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.dataset.entityType !== ApiMessageEntityTypes.Spoiler\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        spoiler: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand(\n      'insertHTML', false, `<span class=\"spoiler\" data-entity-type=\"${ApiMessageEntityTypes.Spoiler}\">${text}</span>`,\n    );\n    onClose();\n  });\n\n  const handleBoldText = useLastCallback(() => {\n    setSelectedTextFormats((selectedFormats) => {\n      // Somehow re-applying 'bold' command to already bold text doesn't work\n      document.execCommand(selectedFormats.bold ? 'removeFormat' : 'bold');\n      Object.keys(selectedFormats).forEach((key) => {\n        if ((key === 'italic' || key === 'underline') && Boolean(selectedFormats[key])) {\n          document.execCommand(key);\n        }\n      });\n\n      updateSelectedRange();\n      return {\n        ...selectedFormats,\n        bold: !selectedFormats.bold,\n      };\n    });\n  });\n\n  const handleItalicText = useLastCallback(() => {\n    document.execCommand('italic');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      italic: !selectedFormats.italic,\n    }));\n  });\n\n  const handleUnderlineText = useLastCallback(() => {\n    document.execCommand('underline');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      underline: !selectedFormats.underline,\n    }));\n  });\n\n  const handleStrikethroughText = useLastCallback(() => {\n    if (selectedTextFormats.strikethrough) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'DEL'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        strikethrough: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand('insertHTML', false, `<del>${text}</del>`);\n    onClose();\n  });\n\n  const handleMonospaceText = useLastCallback(() => {\n    if (selectedTextFormats.monospace) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'CODE'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        monospace: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    document.execCommand('insertHTML', false, `<code class=\"text-entity-code\" dir=\"auto\">${text}</code>`);\n    onClose();\n  });\n\n  const handleLinkUrlConfirm = useLastCallback(() => {\n    const formattedLinkUrl = (ensureProtocol(linkUrl) || '').split('%').map(encodeURI).join('%');\n\n    if (isEditingLink) {\n      const element = getSelectedElement();\n      if (!element || element.tagName !== 'A') {\n        return;\n      }\n\n      (element as HTMLAnchorElement).href = formattedLinkUrl;\n\n      onClose();\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    restoreSelection();\n    document.execCommand(\n      'insertHTML',\n      false,\n      `<a href=${formattedLinkUrl} class=\"text-entity-link\" dir=\"auto\">${text}</a>`,\n    );\n    onClose();\n  });\n\n  const handleKeyDown = useLastCallback((e: KeyboardEvent) => {\n    const HANDLERS_BY_KEY: Record<string, AnyToVoidFunction> = {\n      k: openLinkControl,\n      b: handleBoldText,\n      u: handleUnderlineText,\n      i: handleItalicText,\n      m: handleMonospaceText,\n      s: handleStrikethroughText,\n      p: handleSpoilerText,\n    };\n\n    const handler = HANDLERS_BY_KEY[getKeyFromEvent(e)];\n\n    if (\n      e.altKey\n      || !(e.ctrlKey || e.metaKey)\n      || !handler\n    ) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    handler();\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      document.addEventListener('keydown', handleKeyDown);\n    }\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, handleKeyDown]);\n\n  const lang = useLang();\n\n  function handleContainerKeyDown(e: React.KeyboardEvent<HTMLDivElement>) {\n    if (e.key === 'Enter' && isLinkControlOpen) {\n      handleLinkUrlConfirm();\n      e.preventDefault();\n    }\n  }\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'TextFormatter',\n    transitionClassNames,\n    isLinkControlOpen && 'link-control-shown',\n  );\n\n  const linkUrlConfirmClassName = buildClassName(\n    'TextFormatter-link-url-confirm',\n    Boolean(linkUrl.length) && 'shown',\n  );\n\n  const style = anchorPosition\n    ? `left: ${anchorPosition.x}px; top: ${anchorPosition.y}px;--text-formatter-left: ${anchorPosition.x}px;`\n    : '';\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      style={style}\n      onKeyDown={handleContainerKeyDown}\n      // Prevents focus loss when clicking on the toolbar\n      onMouseDown={stopEvent}\n    >\n      <div className=\"TextFormatter-buttons\">\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Spoiler text\"\n          className={getFormatButtonClassName('spoiler')}\n          onClick={handleSpoilerText}\n        >\n          <i className=\"icon icon-eye-closed\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Bold text\"\n          className={getFormatButtonClassName('bold')}\n          onClick={handleBoldText}\n        >\n          <i className=\"icon icon-bold\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Italic text\"\n          className={getFormatButtonClassName('italic')}\n          onClick={handleItalicText}\n        >\n          <i className=\"icon icon-italic\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Underlined text\"\n          className={getFormatButtonClassName('underline')}\n          onClick={handleUnderlineText}\n        >\n          <i className=\"icon icon-underlined\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Strikethrough text\"\n          className={getFormatButtonClassName('strikethrough')}\n          onClick={handleStrikethroughText}\n        >\n          <i className=\"icon icon-strikethrough\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Monospace text\"\n          className={getFormatButtonClassName('monospace')}\n          onClick={handleMonospaceText}\n        >\n          <i className=\"icon icon-monospace\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button color=\"translucent\" ariaLabel={lang('TextFormat.AddLinkTitle')} onClick={openLinkControl}>\n          <i className=\"icon icon-link\" />\n        </Button>\n      </div>\n\n      <div className=\"TextFormatter-link-control\">\n        <div className=\"TextFormatter-buttons\">\n          <Button color=\"translucent\" ariaLabel={lang('Cancel')} onClick={closeLinkControl}>\n            <i className=\"icon icon-arrow-left\" />\n          </Button>\n          <div className=\"TextFormatter-divider\" />\n\n          <div\n            className={buildClassName('TextFormatter-link-url-input-wrapper', inputClassName)}\n          >\n            <input\n              ref={linkUrlInputRef}\n              className=\"TextFormatter-link-url-input\"\n              type=\"text\"\n              value={linkUrl}\n              placeholder=\"Enter URL...\"\n              autoComplete=\"off\"\n              inputMode=\"url\"\n              dir=\"auto\"\n              onChange={handleLinkUrlChange}\n              onScroll={updateInputStyles}\n            />\n          </div>\n\n          <div className={linkUrlConfirmClassName}>\n            <div className=\"TextFormatter-divider\" />\n            <Button\n              color=\"translucent\"\n              ariaLabel={lang('Save')}\n              className=\"color-primary\"\n              onClick={handleLinkUrlConfirm}\n            >\n              <i className=\"icon icon-check\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(TextFormatter);\n","export default function getKeyFromEvent(e: KeyboardEvent) {\n  const key = e.key || e.code;\n\n  return key.startsWith('Key') ? key.slice(3).toLowerCase() : key;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport CustomEmojiButton from './CustomEmojiButton';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useLastCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  });\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const handleSelect = useLastCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  });\n\n  const handleClick = useLastCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  });\n\n  const handleCustomEmojiClick = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    shouldRemoveSelectionOnReset: true,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useLastCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  });\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" draggable={false} />\n        <img\n          src={mediaBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport MediaResult from './inlineResults/MediaResult';\nimport StickerResult from './inlineResults/StickerResult';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean,\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useLastCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  });\n\n  const handleOpenWebview = useLastCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n      isFromSwitchWebView: true,\n    });\n  });\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport ListItem from '../../ui/ListItem';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useLastCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  });\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = usersById[id];\n        const chat = chatsById[id];\n        const peer = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <i className=\"icon icon-lock-badge send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              peer={peer}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {peer && <FullNameTitle peer={peer} noFake />}\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiReaction, ApiReactionKey, ApiSavedReactionTag,\n} from '../../api/types';\nimport type { ThreadId } from '../../types';\n\nimport { ANONYMOUS_USER_ID, REPLIES_USER_ID } from '../../config';\nimport { getIsSavedDialog, getReactionKey, isSameReaction } from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectCurrentTextSearch,\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectSender,\n} from '../../global/selectors';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport { debounce } from '../../util/schedulers';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport SavedTagButton from '../middle/message/reactions/SavedTagButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  savedTags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  searchTag?: ApiReaction;\n  totalCount?: number;\n  foundIds?: number[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isActive,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n  savedTags,\n  searchTag,\n  isSavedMessages,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    setLocalTextSearchTag,\n    focusMessage,\n    openPremiumModal,\n    loadSavedReactionTags,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const tagsRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n\n    return enableDirectTextInput;\n  }, [isActive]);\n\n  const tags = useMemo(() => {\n    if (!savedTags) return undefined;\n    return Object.values(savedTags);\n  }, [savedTags]);\n\n  const hasTags = Boolean(tags?.length);\n  const areTagsDisabled = hasTags && !isCurrentUserPremium;\n\n  useHorizontalScroll(tagsRef, !hasTags);\n\n  useEffect(() => {\n    if (isActive) loadSavedReactionTags();\n  }, [hasTags, isActive]);\n\n  const handleSearchTextMessagesLocal = useLastCallback(() => {\n    runDebouncedForSearch(searchTextMessagesLocal);\n  });\n\n  const handleTagClick = useLastCallback((tag: ApiReaction) => {\n    if (areTagsDisabled) {\n      openPremiumModal({\n        initialSection: 'saved_tags',\n      });\n      return;\n    }\n\n    if (isSameReaction(tag, searchTag)) {\n      setLocalTextSearchTag({ tag: undefined });\n      return;\n    }\n\n    setLocalTextSearchTag({ tag });\n    handleSearchTextMessagesLocal();\n  });\n\n  const [viewportIds, getMore] = useInfiniteScroll(handleSearchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if ((!query && !searchTag) || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const global = getGlobal();\n\n      const originalSender = (isSavedMessages || chatId === REPLIES_USER_ID || chatId === ANONYMOUS_USER_ID)\n        ? selectForwardedSender(global, message) : undefined;\n      const messageSender = selectSender(global, message);\n\n      const senderPeer = originalSender || messageSender;\n\n      const hiddenForwardTitle = message.forwardInfo?.hiddenUserName;\n\n      return {\n        message,\n        senderPeer,\n        hiddenForwardTitle,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, searchTag, viewportIds, messagesById, isSavedMessages, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderPeer, hiddenForwardTitle, onClick,\n  }: {\n    message: ApiMessage;\n    senderPeer?: ApiPeer;\n    hiddenForwardTitle?: string;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar\n          peer={senderPeer}\n          text={hiddenForwardTitle}\n        />\n        <div className=\"info\">\n          <div className=\"search-result-message-top\">\n            {senderPeer && <FullNameTitle peer={senderPeer} withEmojiStatus />}\n            {!senderPeer && hiddenForwardTitle}\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {hasTags && (\n        <div\n          ref={tagsRef}\n          className=\"search-tags custom-scroll-x no-scrollbar\"\n          key=\"search-tags\"\n        >\n          {tags.map((tag) => (\n            <SavedTagButton\n              containerId=\"local-search\"\n              key={getReactionKey(tag.reaction)}\n              reaction={tag.reaction}\n              tag={tag}\n              withCount\n              isDisabled={areTagsDisabled}\n              isChosen={isSameReaction(tag.reaction, searchTag)}\n              onClick={handleTagClick}\n            />\n          ))}\n        </div>\n      )}\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const messagesById = selectChatMessages(global, chatId);\n    if (!messagesById) {\n      return {};\n    }\n\n    const { query, savedTag, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const savedTags = isSavedMessages && !isSavedDialog ? global.savedReactionTags?.byKey : undefined;\n\n    return {\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n      isSavedMessages,\n      savedTags,\n      searchTag: savedTag,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\n\nimport StickerButton from '../common/StickerButton';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const sharedCanvasRef = useRef<HTMLCanvasElement>(null);\n\n  const lang = useLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { throttle } from '../../util/schedulers';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiVideo } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf, selectThreadInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport GifButton from '../common/GifButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n  currentMessageList?: MessageList;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  chatFullInfo,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (!currentMessageList) {\n        return;\n      }\n\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({\n            messageList: currentMessageList,\n            gif,\n            scheduledAt,\n            isSilent,\n          });\n        });\n      } else {\n        sendMessage({ messageList: currentMessageList, gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, currentMessageList, requestCalendar]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId)\n      && getCanPostInChat(chat, threadId, isMessageThread, chatFullInfo);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(GifSearch));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OAKzmAva\",\"withImage\":\"BQ6HUOqN\",\"imageContainer\":\"TmJvv2A6\",\"image\":\"U96CW2I7\",\"round\":\"yxjDeIct\",\"circle\":\"cdfiLmXo\",\"withStoryCircle\":\"BOfHPv20\",\"summary\":\"vXi2JQlj\",\"title\":\"bi3fL59p\",\"info\":\"GUK4ajPK\",\"meta\":\"YH6jeZIh\",\"metaWithIcon\":\"q1LnuIUn\",\"metaIcon\":\"PJZzyVLK\",\"date\":\"C7NpG5Y9\"};","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { StatisticsMessageInteractionCounter, StatisticsStoryInteractionCounter } from '../../../api/types';\n\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Icon from '../../common/Icon';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\ninterface OwnProps {\n  postStatistic: StatisticsStoryInteractionCounter | StatisticsMessageInteractionCounter;\n}\n\nfunction StatisticsRecentPostMeta({ postStatistic }: OwnProps) {\n  const lang = useLang();\n  return (\n    <div className={styles.meta}>\n      {postStatistic.reactionsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"heart-outline\" className={styles.metaIcon} />\n          {formatIntegerCompact(postStatistic.reactionsCount)}\n        </span>\n      )}\n\n      {postStatistic.forwardsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"forward\" className={styles.metaIcon} />\n          {formatIntegerCompact(postStatistic.forwardsCount)}\n        </span>\n      )}\n\n      {!postStatistic.forwardsCount && !postStatistic.reactionsCount\n        && lang('ChannelStats.SharesCount_ZeroValueHolder')}\n    </div>\n  );\n}\n\nexport default memo(StatisticsRecentPostMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsMessageInteractionCounter } from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageRoundVideo,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/date/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Icon from '../../common/Icon';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  postStatistic: StatisticsMessageInteractionCounter;\n  message: ApiMessage;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ postStatistic, message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        Boolean(mediaBlobUrl || mediaThumbnail) && styles.withImage,\n      )}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span>\n      <img\n        src={blobUrl}\n        alt=\"\"\n        draggable={false}\n        className={buildClassName(styles.image, isRoundVideo && styles.round)}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiTypeStory,\n  StatisticsStoryInteractionCounter,\n} from '../../../api/types';\nimport type { LangFn } from '../../../hooks/useLang';\n\nimport { getStoryMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/date/dateFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Avatar from '../../common/Avatar';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  story?: ApiTypeStory;\n  postStatistic: StatisticsStoryInteractionCounter;\n};\n\nfunction StatisticsRecentStory({ chat, story, postStatistic }: OwnProps) {\n  const lang = useLang();\n  const { toggleStoryStatistics } = getActions();\n  const isLoaded = story && 'content' in story;\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const mediaThumbnail = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  const handleClick = useLastCallback(() => {\n    toggleStoryStatistics({ storyId: postStatistic.storyId });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, styles.withImage)}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, chat, imgBlobUrl || mediaThumbnail)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {isLoaded && Boolean(story.date) && formatDateTimeToString(story.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n}\n\nfunction renderSummary(lang: LangFn, chat: ApiChat, blobUrl?: string) {\n  return (\n    <span>\n      {blobUrl ? (\n        <span className={styles.imageContainer}>\n          <img\n            src={blobUrl}\n            alt=\"\"\n            draggable={false}\n            className={buildClassName(styles.image, styles.circle, styles.withStoryCircle)}\n          />\n        </span>\n      ) : (\n        <Avatar\n          peer={chat}\n          size=\"small-mobile\"\n          className={styles.image}\n          withStorySolid\n          forceUnreadStorySolid\n        />\n      )}\n\n      {lang('Story')}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentStory);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"T1l_4J8z\",\"pie-slim-in\":\"EgyLOizu\",\"pieSlimIn\":\"EgyLOizu\",\"pie-slim-out\":\"TBiNdFb4\",\"pieSlimOut\":\"TBiNdFb4\",\"messages\":\"suY9dEIz\",\"publicForwards\":\"S1x1ovkC\",\"messages-title\":\"evQIkAqx\",\"messagesTitle\":\"evQIkAqx\",\"publicForwards-title\":\"WxL3i5PM\",\"publicForwardsTitle\":\"WxL3i5PM\",\"ready\":\"aUrozL5_\",\"graph\":\"QQHwjG88\",\"hidden\":\"QGctP1Nk\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChannelStatistics,\n  ApiChat,\n  ApiGroupStatistics,\n  ApiMessage,\n  ApiTypeStory,\n  StatisticsGraph,\n} from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStories,\n  selectStatistics,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\nimport StatisticsRecentStory from './StatisticsRecentStory';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n  reactionsByEmotionGraph: 'ChannelStats.Graph.Reactions',\n  storyInteractionsGraph: 'ChannelStats.Graph.Stories',\n  storyReactionsByEmotionGraph: 'ChannelStats.Graph.StoriesReactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  chat?: ApiChat;\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n  messagesById: Record<string, ApiMessage>;\n  storiesById?: Record<string, ApiTypeStory>;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  statistics,\n  dcId,\n  isGroup,\n  messagesById,\n  storiesById,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <StatisticsOverview\n        statistics={statistics}\n        type={isGroup ? 'group' : 'channel'}\n        title={lang('StatisticOverview')}\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentPosts?.length) && (\n        <div className={styles.messages}>\n          <h2 className={styles.messagesTitle}>{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentPosts.map((postStatistic) => {\n            if ('msgId' in postStatistic) {\n              const message = messagesById[postStatistic.msgId];\n              if (!message || !('content' in message)) return undefined;\n\n              return (\n                <StatisticsRecentMessage\n                  key={`statistic_message_${postStatistic.msgId}`}\n                  message={message}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            if ('storyId' in postStatistic && chat) {\n              const story = storiesById?.[postStatistic.storyId];\n\n              return (\n                <StatisticsRecentStory\n                  key={`statistic_story_${postStatistic.storyId}`}\n                  chat={chat}\n                  story={story}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            return undefined;\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n    const messagesById = selectChatMessages(global, chatId);\n    const storiesById = selectPeerStories(global, chatId)?.byId;\n\n    return {\n      statistics, dcId, isGroup, chat, messagesById, storiesById,\n    };\n  },\n)(Statistics));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oXLpD4Y4\",\"title\":\"paQ2VBe_\",\"views\":\"WvFuOAIf\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsMessagePublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => (data.chat ? getMainUsername(data.chat) : undefined), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={data.chat} />\n\n      <div>\n        <div className={styles.title}>\n          {data.title}\n        </div>\n\n        <div className={styles.views}>\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsMessagePublicForward);\n","import React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessagePublicForward,\n  ApiPostStatistics,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { STATISTICS_PUBLIC_FORWARDS_LIMIT } from '../../../config';\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nfunction Statistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}: OwnProps & StateProps) {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadMessagePublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards && messageId) {\n      loadMessagePublicForwards({ chatId, messageId });\n    }\n  });\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <StatisticsOverview statistics={statistics} type=\"message\" title={lang('StatisticOverview')} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName(styles.graph, !loadedCharts.current.includes(graph) && styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            preloadBackwards={STATISTICS_PUBLIC_FORWARDS_LIMIT}\n            noFastList\n          >\n            {(statistics.publicForwardsData as ApiMessagePublicForward[]).map((item) => (\n              <StatisticsMessagePublicForward key={item.messageId} data={item} />\n            ))}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiStoryPublicForward, ApiUser,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiStoryPublicForward;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nfunction StatisticsMessagePublicForward({ data, chatsById, usersById }: OwnProps) {\n  const lang = useLang();\n  const { openChat } = getActions();\n  const user = usersById[data.peerId];\n  const chat = chatsById[data.peerId];\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: user.id });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={user || chat} withStorySolid forceUnreadStorySolid />\n\n      <div>\n        <div className={styles.title}>\n          {user ? getUserFullName(user) : getChatTitle(lang, chat)}\n        </div>\n\n        <div className={styles.views}>\n          {data.viewsCount ? lang('ChannelStats.ViewsCount', data.viewsCount, 'i') : lang('NoViews')}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(StatisticsMessagePublicForward);\n","import React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiPostStatistics,\n  ApiUser,\n  StatisticsGraph,\n} from '../../../api/types';\n\nimport { STATISTICS_PUBLIC_FORWARDS_LIMIT } from '../../../config';\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsStoryPublicForward from './StatisticsStoryPublicForward';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.StoryInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  storyId?: number;\n  dcId?: number;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n};\n\nfunction StoryStatistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  storyId,\n  chatsById,\n  usersById,\n}: OwnProps & StateProps) {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStoryStatistics, loadStoryPublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (storyId) {\n      loadStoryStatistics({ chatId, storyId });\n    }\n  }, [chatId, storyId]);\n\n  useEffect(() => {\n    if (!isActive || storyId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, storyId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, storyId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!storyId) return;\n\n    loadStoryPublicForwards({ chatId, storyId });\n  });\n\n  if (!isReady || !statistics || !storyId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <StatisticsOverview statistics={statistics} type=\"story\" title={lang('StatisticOverview')} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName(styles.graph, !loadedCharts.current.includes(graph) && styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            preloadBackwards={STATISTICS_PUBLIC_FORWARDS_LIMIT}\n            noFastList\n          >\n            {statistics.publicForwardsData!.map((item) => {\n              if ('messageId' in item) {\n                return (\n                  <StatisticsMessagePublicForward key={`message_${item.messageId}`} data={item} />\n                );\n              }\n\n              return (\n                <StatisticsStoryPublicForward\n                  key={`story_${item.storyId}`}\n                  data={item}\n                  chatsById={chatsById}\n                  usersById={usersById}\n                />\n              );\n            })}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentStory;\n    const storyId = tabState.statistics.currentStoryId;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      statistics, dcId, storyId, usersById, chatsById,\n    };\n  },\n)(StoryStatistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\n\nimport { isUserId } from '../../global/helpers';\nimport { selectTabState } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport ShowMoreButton from '../ui/ShowMoreButton';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo\n                  avatarSize=\"tiny\"\n                  userId={id}\n                  forceShowSelf\n                  noStatusOrTyping\n                />\n              ) : (\n                <GroupChatInfo\n                  avatarSize=\"tiny\"\n                  chatId={id}\n                  noStatusOrTyping\n                />\n              )}\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage } from '../../api/types';\n\nimport { getMessagePoll } from '../../global/helpers';\nimport { selectChat, selectChatMessage, selectTabState } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\n\nimport Loading from '../ui/Loading';\nimport PollAnswerResults from './PollAnswerResults';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  message,\n  onClose,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xrnUE4e6\",\"content\":\"z7kF7tij\",\"section\":\"T6wFpdQO\",\"general\":\"YftUWqqw\",\"top\":\"CWsWIKQ1\",\"bottom\":\"KBl0ycLl\",\"iconWrapper\":\"iJ1U9kDD\",\"icon\":\"Rk6PT_yc\",\"clickable\":\"K1CTKtBS\",\"heading\":\"qlo3vSEw\",\"icon-picker\":\"r06zwL42\",\"iconPicker\":\"r06zwL42\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getTopicColors } from '../../util/forumColors';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            pickerListClassName=\"fab-padding-bottom\"\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Loading from '../ui/Loading';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top, isGeneral && styles.general)}>\n              <span className={styles.heading}>{lang(isGeneral ? 'CreateGeneralTopicTitle' : 'CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  pickerListClassName=\"fab-padding-bottom\"\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.topicId ? chat?.topics?.[editTopicPanel?.topicId] : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotInfo, ApiUser } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  getChatAvatarHash, getMainUsername, getUserFirstOrLastName,\n} from '../../../global/helpers';\nimport {\n  selectBot,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Icon from '../../common/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  userId?: string;\n  user?: ApiUser;\n  chatBot?: ApiBotInfo;\n  currentBio?: string;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  maxBioLength: number;\n};\n\nconst ERROR_NAME_MISSING = 'Please provide name';\n\nconst ManageBot: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  onClose,\n  currentBio,\n  isActive,\n  maxBioLength,\n}) => {\n  const {\n    setBotInfo,\n    uploadProfilePhoto,\n    uploadContactProfilePhoto,\n    startBotFatherConversation,\n  } = getActions();\n\n  const [isFieldTouched, markFieldTouched, unmarkProfileTouched] = useFlag(false);\n  const [isAvatarTouched, markAvatarTouched, unmarkAvatarTouched] = useFlag(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  const username = useMemo(() => (user ? getMainUsername(user) : undefined), [user]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentName = user ? getUserFirstOrLastName(user) : '';\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [name, setName] = useState(currentName || '');\n  const [bio, setBio] = useState(currentBio || '');\n\n  const currentAvatarHash = user && getChatAvatarHash(user);\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  useEffect(() => {\n    unmarkProfileTouched();\n    unmarkAvatarTouched();\n  }, [userId]);\n\n  useEffect(() => {\n    setName(currentName || '');\n    setBio(currentBio || '');\n  }, [currentName, currentBio, user]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkProfileTouched();\n      unmarkAvatarTouched();\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleNameChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n    markFieldTouched();\n\n    if (error === ERROR_NAME_MISSING) {\n      setError(undefined);\n    }\n  });\n\n  const handleBioChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    markFieldTouched();\n  });\n\n  const handlePhotoChange = useLastCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n    markAvatarTouched();\n  });\n\n  const handleProfileSave = useLastCallback(() => {\n    const trimmedName = name.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedName.length) {\n      setError(ERROR_NAME_MISSING);\n      return;\n    }\n\n    setBotInfo({\n      ...(isFieldTouched && {\n        bot: user,\n        name: trimmedName,\n        description: trimmedBio,\n      }),\n    });\n\n    if (photo) {\n      uploadProfilePhoto({\n        file: photo,\n        ...(isAvatarTouched && { bot: user }),\n      });\n    }\n  });\n\n  const handleChangeEditIntro = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-intro` });\n  });\n\n  const handleChangeEditCommands = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-commands` });\n  });\n\n  const handleChangeSettings = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}` });\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const isSuggestRef = useRef(false);\n\n  const handleSelectAvatar = useLastCallback((file: File) => {\n    markAvatarTouched();\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  });\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title={lang('ChatSetPhotoOrVideo')}\n            disabled={isLoading}\n          />\n          <InputText\n            id=\"user-name\"\n            label={lang('PaymentCheckoutName')}\n            onChange={handleNameChange}\n            value={name}\n            error={error === ERROR_NAME_MISSING ? error : undefined}\n            teactExperimentControlled\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('DescriptionPlaceholder')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n        </div>\n        <div className=\"section\">\n          <div className=\"dialog-buttons\">\n            <ListItem icon=\"bot-commands-filled\" ripple onClick={handleChangeEditIntro}>\n              <span>{lang('BotEditIntro')}</span>\n            </ListItem>\n            <ListItem icon=\"bot-command\" ripple onClick={handleChangeEditCommands}>\n              <span>{lang('BotEditCommands')}</span>\n            </ListItem>\n            <ListItem icon=\"bots\" ripple onClick={handleChangeSettings}>\n              <span>{lang('BotChangeSettings')}</span>\n            </ListItem>\n            <div className=\"section-info section-info_push\">\n              {renderText(lang('BotManageInfo'), ['links'])}\n            </div>\n          </div>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isFieldTouched || isAvatarTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectBot(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    return {\n      userId,\n      user,\n      progress,\n      currentBio: userFullInfo?.bio,\n      maxBioLength,\n    };\n  },\n)(ManageBot));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadExportedChatInvites({ chatId });\n    loadExportedChatInvites({ chatId, isRevoked: true });\n    loadChatJoinRequests({ chatId });\n  }, [chatId]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : `${enabledLength}`;\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            maxLength={CHANNEL_MAX_DESCRIPTION}\n            maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      availableReactions: global.reactions.availableReactions,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageChannel));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  isChannel?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const canAddNewAdmins = Boolean(chat?.isCreator || chat?.adminRights?.addAdmins);\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    return Object.values(adminMembersById).sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: chat && isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo,\n  selectManagement, selectTabState,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Spinner from '../../ui/Spinner';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n    resetManagementError,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePrevious(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n\n    if (error) {\n      resetManagementError({\n        chatId: chat.id,\n      });\n    }\n  }, [chat.id, error]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '', shouldDisableUsernames: true });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 0;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available') as string)\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <SafeLink url={privateInviteLink} className=\"group-link\" text={privateInviteLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId) && selectManagement(global, chatId));\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, search);\n  }, [chatMembers, currentUserId, search]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember): MenuItemContextAction[] | undefined => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Avatar from '../../common/Avatar';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            disabled\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <Checkbox\n              checked={isJoinToSend}\n              onCheck={handleJoinToSendCheck}\n              label={lang('ChannelSettingsJoinToSend')}\n            />\n            {isJoinToSend && (\n              <Checkbox\n                checked={isJoinRequest}\n                onCheck={handleJoinRequestCheck}\n                label={lang('ChannelSettingsJoinRequest')}\n              />\n            )}\n            <p className=\"text-muted\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId ? selectChat(global, linkedChatId) : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { debounce } from '../../../util/schedulers';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => isChatPublic(chat), [chat]);\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>(null);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, canInvite]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickPermissions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateGroup = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickMembers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  });\n\n  const handleTogglePreHistory = useLastCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  });\n\n  const handleForumToggle = useLastCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  });\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : `${enabledLength}`;\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key as keyof ApiChatBannedRights];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useLastCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <TextArea\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            maxLength={GROUP_MAX_DESCRIPTION}\n            maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n            noReplaceNewlines\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && !hasLinkedChannel && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n    const canChangeInfo = chat.isCreator || getHasAdminRight(chat, 'changeInfo');\n    const canBanUsers = chat.isCreator || getHasAdminRight(chat, 'banUsers');\n    const canInvite = chat.isCreator || getHasAdminRight(chat, 'inviteUsers');\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo,\n      canBanUsers,\n      canInvite,\n      exportedInvites: invites,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.reactions.availableReactions,\n      canEditForum,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isActive,\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"postStories\"\n              checked={Boolean(permissions.postStories)}\n              label={lang('EditAdminPostStories')}\n              blocking\n              disabled={getControlIsDisabled('postStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"editStories\"\n              checked={Boolean(permissions.editStories)}\n              label={lang('EditAdminEditStories')}\n              blocking\n              disabled={getControlIsDisabled('editStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteStories\"\n              checked={Boolean(permissions.deleteStories)}\n              label={lang('EditAdminDeleteStories')}\n              blocking\n              disabled={getControlIsDisabled('deleteStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport {\n  filterUsersByName, getHasAdminRight, isChatBasicGroup,\n  isChatChannel, isUserBot, sortUserIds,\n} from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport usePeerStoriesPolling from '../../../hooks/polling/usePeerStoriesPolling';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Switcher from '../../ui/Switcher';\nimport DeleteMemberModal from '../DeleteMemberModal';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement, toggleParticipantsHidden,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  usePeerStoriesPolling(memberIds);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  const handleToggleParticipantsHidden = useCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  }, [areParticipantsHidden, chatId, toggleParticipantsHidden]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        {canHideParticipants && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf withStory />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig?.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n    && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport stopEvent from '../../../util/stopEvent';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  hasLinkedChat?: boolean;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  hasLinkedChat,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights, showNotification } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const lang = useLang();\n  const { isForum } = chat || {};\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  const handleDisabledClick = useCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  }, [lang, showNotification]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, setIsLoading, updateChatDefaultBannedRights]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem with-checkbox\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem with-checkbox\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n            <div className=\"ListItem with-checkbox\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                disabled={shouldDisablePermissionForPublicGroup}\n                blocking\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div\n              className=\"ListItem with-checkbox\"\n              onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n            >\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={shouldDisablePermissionForPublicGroup}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      hasLinkedChat,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n    };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport stopEvent from '../../../util/stopEvent';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 24 + 32;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  const { isForum } = chat || {};\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const handleOpenMediaDropdown = useCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  }, [isMediaDropdownOpen]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n           + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"sendPlain\"\n              checked={!permissions.sendPlain}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendPlain')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n              onClickLabel={handleOpenMediaDropdown}\n            />\n          </div>\n\n          <div className=\"DropdownListTrap\">\n            <div\n              className={buildClassName(\n                'DropdownList',\n                isMediaDropdownOpen && 'DropdownList--open',\n              )}\n            >\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendPhotos\"\n                  checked={!permissions.sendPhotos}\n                  label={lang('UserRestrictionsSendPhotos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPhotos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendVideos\"\n                  checked={!permissions.sendVideos}\n                  label={lang('UserRestrictionsSendVideos')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendStickers\"\n                  checked={!permissions.sendStickers && !permissions.sendGifs}\n                  label={lang('UserRestrictionsSendStickers')}\n                  blocking\n                  disabled={getControlIsDisabled('sendStickers')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendAudios\"\n                  checked={!permissions.sendAudios}\n                  label={lang('UserRestrictionsSendMusic')}\n                  blocking\n                  disabled={getControlIsDisabled('sendAudios')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendDocs\"\n                  checked={!permissions.sendDocs}\n                  label={lang('UserRestrictionsSendFiles')}\n                  blocking\n                  disabled={getControlIsDisabled('sendDocs')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendVoices\"\n                  checked={!permissions.sendVoices}\n                  label={lang('UserRestrictionsSendVoices')}\n                  blocking\n                  disabled={getControlIsDisabled('sendVoices')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendRoundvideos\"\n                  checked={!permissions.sendRoundvideos}\n                  label={lang('UserRestrictionsSendRound')}\n                  blocking\n                  disabled={getControlIsDisabled('sendRoundvideos')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"embedLinks\"\n                  checked={!permissions.embedLinks}\n                  label={lang('UserRestrictionsEmbedLinks')}\n                  blocking\n                  disabled={getControlIsDisabled('embedLinks')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"sendPolls\"\n                  checked={!permissions.sendPolls}\n                  label={lang('UserRestrictionsSendPolls')}\n                  blocking\n                  disabled={getControlIsDisabled('sendPolls')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            </div>\n          </div>\n\n          <div className={buildClassName('part', isMediaDropdownOpen && 'shifted')}>\n\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"inviteUsers\"\n                checked={!permissions.inviteUsers}\n                label={lang('UserRestrictionsInviteUsers')}\n                blocking\n                disabled={getControlIsDisabled('inviteUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={!permissions.pinMessages}\n                label={lang('UserRestrictionsPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"changeInfo\"\n                checked={!permissions.changeInfo}\n                label={lang('UserRestrictionsChangeInfo')}\n                blocking\n                disabled={getControlIsDisabled('changeInfo')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n            {isForum && (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name=\"manageTopics\"\n                  checked={!permissions.manageTopics}\n                  label={lang('CreateTopicsPermission')}\n                  blocking\n                  disabled={getControlIsDisabled('manageTopics')}\n                  onChange={handlePermissionChange}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { isChatChannel, sortUserIds } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatTime } from '../../../util/date/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId] || {};\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/date/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {Boolean(expireDate) && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId] || {};\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/date/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport LinkField from '../../common/LinkField';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(forceUpdate, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.usernames ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.usernames, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions: MenuItemContextAction[] = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <LinkField\n            className=\"section\"\n            link={primaryInviteLink}\n            withShare\n            onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n            title={chat?.usernames ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n          />\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<i className={`icon icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<i className={`icon icon-link link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId] || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/date/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            peer={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport AnimatedIcon from '../../common/AnimatedIcon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport JoinRequest from './JoinRequest';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n  }, [enabledReactions]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n    } else {\n      setLocalEnabledReactions(undefined);\n    }\n    setIsTouched(true);\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n    setIsTouched(true);\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info mt-4\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('AvailableReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: selectChatFullInfo(global, chatId)?.enabledReactions,\n      availableReactions: global.reactions.availableReactions,\n      chat,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageReactions));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { isUserBot, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectNotifyExceptions,\n  selectNotifySettings,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            noStatusOrTyping\n            noEmojiStatus\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    peer={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"text-muted\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageBot from './ManageBot';\nimport ManageChannel from './ManageChannel';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvite from './ManageInvite';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageInvites from './ManageInvites';\nimport ManageJoinRequests from './ManageJoinRequests';\nimport ManageReactions from './ManageReactions';\nimport ManageUser from './ManageUser';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'bot':\n          return (\n            <ManageBot\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormState, FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"maC_9u6e\",\"description\":\"zQ6lEVJ2\",\"checkout-picture\":\"JgWvLdK2\",\"checkoutPicture\":\"JgWvLdK2\",\"text\":\"T2pYH395\",\"checkout-title\":\"HadolzeF\",\"checkoutTitle\":\"HadolzeF\",\"checkout-description\":\"oZW7mUNP\",\"checkoutDescription\":\"oZW7mUNP\",\"price-info\":\"P618Q3yr\",\"priceInfo\":\"P618Q3yr\",\"price-info-item\":\"XNNG_ajy\",\"priceInfoItem\":\"XNNG_ajy\",\"price-info-item-main\":\"D9gYNLVk\",\"priceInfoItemMain\":\"D9gYNLVk\",\"price-info-item-title\":\"NtY5Aah7\",\"priceInfoItemTitle\":\"NtY5Aah7\",\"tipsList\":\"WHO341eB\",\"tipsItem\":\"ksLlzBxw\",\"tipsItem_active\":\"J4yem62L\",\"tipsItemActive\":\"J4yem62L\",\"invoice-info\":\"U2IBOLP1\",\"invoiceInfo\":\"U2IBOLP1\",\"provider\":\"kqWcdro1\",\"stripe\":\"xKztZrna\",\"smartglocal\":\"X_Ge1o4u\",\"checkout-info-item-info-title\":\"ysWuPklS\",\"checkoutInfoItemInfoTitle\":\"ysWuPklS\",\"checkout-info-item-info-data\":\"MpC_P8_c\",\"checkoutInfoItemInfoData\":\"MpC_P8_c\",\"tos-checkbox\":\"OrRb0xG7\",\"tosCheckbox\":\"OrRb0xG7\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type {\n  ApiInvoice, ApiPaymentCredentials,\n} from '../../api/types';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { LangCode, Price } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport { PaymentStep } from '../../types';\n\nimport { getWebDocumentHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\n\nimport SafeLink from '../common/SafeLink';\nimport Checkbox from '../ui/Checkbox';\nimport ListItem from '../ui/ListItem';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  invoice?: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n    botName?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: Price[];\n  currency: string;\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoice,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    photo, title, text, termsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(tipAmount!, currency, lang.code)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(tip, currency, lang.code, true)}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = lang('PaymentCheckoutAcceptRecurrent', botName);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, lang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && <img className={styles.checkoutPicture} src={photoUrl} draggable={false} alt=\"\" />}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {text && <div className={styles.checkoutDescription}>{renderText(text, ['br', 'links', 'emoji'])}</div>}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {!isPaymentFormUrl && renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: lang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: lang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || !isInteractive) && renderCheckoutItem({\n          title: shippingAddress,\n          label: lang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: lang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: lang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || !isInteractive) && renderCheckoutItem({\n          title: shippingMethod,\n          label: lang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {termsUrl && renderTos(termsUrl)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title : string | undefined;\n  label: string | undefined;\n  icon?: IconName;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  return (\n    <ListItem\n      multiline={Boolean(title && label !== title)}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n      leftElement={customIcon && <i className={buildClassName('icon', customIcon)} />}\n    >\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\n\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n  onPaymentFormSubmit?: (eventData: PaymentFormSubmitEvent['eventData']) => void;\n};\n\nexport interface PaymentFormSubmitEvent {\n  eventType: 'payment_form_submit';\n  eventData: {\n    credentials: {\n      token: string;\n      type: string;\n    };\n    title: string;\n  };\n}\n\ninterface WebAppOpenTgLinkEvent {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full?: string;\n  };\n}\n\ntype IframeCallbackEvent = PaymentFormSubmitEvent | WebAppOpenTgLinkEvent;\n\nconst ConfirmPayment: FC<OwnProps> = ({\n  url, noRedirect, onClose, onPaymentFormSubmit,\n}) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n      switch (eventType) {\n        case 'web_app_open_tg_link':\n          if (!noRedirect) {\n            const linkUrl = TME_LINK_PREFIX + eventData.path_full!;\n            openTelegramLink({ url: linkUrl });\n          }\n          onClose();\n          break;\n        case 'payment_form_submit':\n          if (onPaymentFormSubmit) {\n            onPaymentFormSubmit(eventData);\n          }\n          break;\n        default:\n          onClose();\n          break;\n      }\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink, onPaymentFormSubmit]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\n\nimport PasswordForm from '../common/PasswordForm';\nimport PasswordMonkey from '../common/PasswordMonkey';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  error?: string;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  error,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const lang = useLang();\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={error ? lang(error) : undefined}\n        hint={passwordHint}\n        description={lang('PaymentConfirmationMessage', cardName)}\n        placeholder={lang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    error: payment.error?.message,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.savedCredentials,\n  };\n})(PasswordConfirm));\n","import type { RefObject } from 'react';\nimport { useEffect } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport { IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      requestMutation(() => {\n        ref.current?.focus();\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { CardType, detectCardType } from '../common/helpers/detectCardType';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport mirIconPath from '../../assets/mir.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 19;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} draggable={false} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} draggable={false} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} draggable={false} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport CardInput from './CardInput';\nimport ExpiryInput from './ExpiryInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv}\n            teactExperimentControlled\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            tabIndex={0}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                  selected={defaultName === state.billingCountry}\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            tabIndex={0}\n            maxLength={12}\n            error={formErrors.billingZip}\n          />\n        )}\n        <Checkbox\n          label={lang('PaymentCardSavePaymentInformation')}\n          checked={canSaveCredentials ? state.saveCredentials : false}\n          tabIndex={0}\n          onChange={handleChangeSaveCredentials}\n          disabled={!canSaveCredentials}\n        />\n        <p className=\"description\">\n          {lang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n        </p>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\n\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\n\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiCountry, ApiPaymentCredentials } from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { Price, ShippingOption } from '../../types';\nimport type { PaymentFormSubmitEvent } from './ConfirmPayment';\nimport { PaymentStep } from '../../types';\n\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\n\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport Checkout from './Checkout';\nimport ConfirmPayment from './ConfirmPayment';\nimport PasswordConfirm from './PasswordConfirm';\nimport PaymentInfo from './PaymentInfo';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport Shipping from './Shipping';\nimport ShippingInfo from './ShippingInfo';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst DONATE_PROVIDER_URL = 'https://payment.smart-glocal.com';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isNameRequested?: boolean;\n  isShippingAddressRequested?: boolean;\n  isPhoneRequested?: boolean;\n  isEmailRequested?: boolean;\n  shouldSendPhoneToProvider?: boolean;\n  shouldSendEmailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions: boolean;\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\ntype GlobalStateProps = Pick<TabState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoice' | 'error'\n)>;\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  isNameRequested,\n  isShippingAddressRequested,\n  isPhoneRequested,\n  isEmailRequested,\n  shouldSendPhoneToProvider,\n  shouldSendEmailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n    setSmartGlocalCardInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n  const prevStep = usePrevious(step, true);\n  const prevRequestId = usePrevious(requestId);\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error, requestId]);\n\n  // When payment verification occurs and the `step` does not change, the card details must be requested\n  useEffect(() => {\n    if (\n      step === PaymentStep.Checkout\n      && step === prevStep\n      && requestId !== prevRequestId\n      && !paymentState.savedCredentialId\n      && !paymentState.cardNumber\n    ) {\n      setStep(PaymentStep.PaymentInfo);\n    }\n  }, [paymentState.cardNumber, paymentState.savedCredentialId, prevRequestId, prevStep, requestId, setStep, step]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handlePaymentFormSubmit = useCallback((eventData: PaymentFormSubmitEvent['eventData']) => {\n    const { credentials } = eventData;\n    setSmartGlocalCardInfo(credentials);\n    sendForm();\n  }, [sendForm]);\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            isPaymentFormUrl={isPaymentFormUrl}\n            currency={currency!}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n            botName={botName}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(isShippingAddressRequested)}\n            needEmail={Boolean(isEmailRequested || shouldSendEmailToProvider)}\n            needPhone={Boolean(isPhoneRequested || shouldSendPhoneToProvider)}\n            needName={Boolean(isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency!}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onPaymentFormSubmit={handlePaymentFormSubmit}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const handleButtonClick = useCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (isPaymentFormUrl) {\n          setIsLoading(true);\n          setStep(PaymentStep.ConfirmPayment);\n          return;\n        }\n\n        if (savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (isEmailRequested && !email)\n          || (isPhoneRequested && !phone)\n          || (isNameRequested && !fullName);\n\n        if ((isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (isShippingAddressRequested && !paymentState.shipping) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  }, [\n    isEmailRequested, isNameRequested, isPhoneRequested, isShippingAddressRequested, nativeProvider, passwordValidUntil,\n    paymentDispatch, paymentState, requestId, savedInfo, sendCredentials, sendForm, setStep, smartGlocalToken, step,\n    stripeId, twoFaPassword, validatePaymentPassword, validateRequest, isPaymentFormUrl,\n  ]);\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return lang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return lang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? lang('Checkout.PayPrice', formatCurrency(totalPrice, currency!, lang.code))\n    : lang('Next');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return !isTosAccepted;\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram Web A doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {lang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <i className={buildClassName(\n            'icon', step === PaymentStep.Checkout ? 'icon-close' : 'icon-arrow-left',\n          )}\n          />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition\n          name=\"slide\"\n          activeKey={step}\n          shouldCleanup\n          cleanupOnlyKey={PaymentStep.ConfirmPayment}\n        >\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContainer,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      savedCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n      url,\n      botName,\n    } = selectTabState(global).payment;\n\n    let providerName = nativeProvider;\n    if (!providerName && url) {\n      providerName = url.startsWith(DONATE_PROVIDER_URL) ? DONATE_PROVIDER : undefined;\n    }\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId!) : undefined;\n    const isProviderError = Boolean(invoice && (!providerName || !SUPPORTED_PROVIDERS.has(providerName)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n    } = (invoiceContainer || {});\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider: providerName,\n      passwordMissing,\n      isNameRequested,\n      isShippingAddressRequested,\n      isPhoneRequested,\n      isEmailRequested,\n      shouldSendPhoneToProvider,\n      shouldSendEmailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl: confirmPaymentUrl ?? url,\n      isPaymentFormUrl: Boolean(!nativeProvider && url),\n      countryList: global.countryList.general,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      savedCredentials,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n      botName,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: Price[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiShippingAddress, ApiWebDocument } from '../../api/types';\nimport type { Price } from '../../types';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Checkout from './Checkout';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  tipAmount?: number;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photo?: ApiWebDocument;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  tipAmount,\n  totalAmount,\n  currency,\n  info,\n  photo,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  const invoice = useMemo(() => {\n    return {\n      photo,\n      text: text!,\n      title: title!,\n      amount: totalAmount!,\n      currency: currency!,\n    };\n  }, [currency, photo, text, title, totalAmount]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={closeModal}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            tipAmount={tipAmount}\n            invoice={invoice}\n            checkoutInfo={checkoutInfo}\n            currency={currency!}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n      tipAmount,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      tipAmount,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photo,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"n8eENbaR\",\"closeButton\":\"smosGkw9\",\"contentText\":\"Qo4PtFZI\",\"title\":\"wtfpombl\",\"separator\":\"UoMeVIyC\",\"userPicker\":\"nEYyTS_m\",\"sendInvites\":\"Ttkq3nqt\",\"avatarList\":\"Nc3SOtKd\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AvatarList from '../../common/AvatarList';\nimport Picker from '../../common/Picker';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './InviteViaLinkModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['inviteViaLinkModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst InviteViaLinkModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n}) => {\n  const { sendInviteMessages, closeInviteViaLinkModal, openPremiumModal } = getActions();\n  const { missingUsers } = modal || {};\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n\n  const userIds = useMemo(() => missingUsers?.map((user) => user.id), [missingUsers]);\n  const [unselectableIds, selectableIds] = useMemo(() => {\n    if (!missingUsers?.length) return [[], []];\n    const [requirePremiumIds, regularIds] = partition(missingUsers, (user) => user.isRequiringPremiumToMessage);\n    return [requirePremiumIds.map((user) => user.id), regularIds.map((user) => user.id)];\n  }, [missingUsers]);\n\n  const invitableWithPremiumIds = useMemo(() => {\n    return missingUsers?.filter((user) => user.isRequiringPremiumToInvite || user.isRequiringPremiumToMessage)\n      .map((user) => user.id);\n  }, [missingUsers]);\n\n  const isEveryPremiumBlocksPm = useMemo(() => {\n    if (!missingUsers) return undefined;\n    return !missingUsers.some((user) => user.isRequiringPremiumToInvite && !user.isRequiringPremiumToMessage);\n  }, [missingUsers]);\n\n  const topListPeers = useMemo(() => {\n    const users = getGlobal().users.byId;\n    return invitableWithPremiumIds?.map((id) => users[id]);\n  }, [invitableWithPremiumIds]);\n\n  useEffect(() => {\n    setSelectedMemberIds(selectableIds);\n  }, [selectableIds]);\n\n  const handleClose = useLastCallback(() => closeInviteViaLinkModal());\n\n  const handleSendInviteLink = useCallback(() => {\n    sendInviteMessages({ chatId: chat!.id, userIds: selectedMemberIds! });\n    closeInviteViaLinkModal();\n  }, [selectedMemberIds, chat]);\n\n  const handleOpenPremiumModal = useCallback(() => {\n    openPremiumModal();\n  }, []);\n\n  const canSendInviteLink = useMemo(() => {\n    if (!chat) return undefined;\n    return Boolean(chat?.isCreator || chat?.adminRights?.inviteUsers);\n  }, [chat]);\n\n  const inviteSectionText = useMemo(() => {\n    return canSendInviteLink\n      ? lang(missingUsers?.length === 1 ? 'InviteBlockedOneMessage' : 'InviteBlockedManyMessage')\n      : lang('InviteRestrictedUsers2', missingUsers?.length);\n  }, [canSendInviteLink, lang, missingUsers?.length]);\n\n  const premiumSectionText = useMemo(() => {\n    if (!invitableWithPremiumIds?.length || !topListPeers?.length) return undefined;\n    const prefix = isEveryPremiumBlocksPm ? 'InviteMessagePremiumBlocked' : 'InvitePremiumBlocked';\n    let langKey = `${prefix}One`;\n    let params = [getUserFullName(topListPeers[0])];\n    if (invitableWithPremiumIds.length === 2) {\n      langKey = `${prefix}Two`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1])];\n    } else if (invitableWithPremiumIds.length === 3) {\n      langKey = `${prefix}Three`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1]), getUserFullName(topListPeers[2])];\n    } else if (invitableWithPremiumIds.length > 3) {\n      langKey = `${prefix}Many`;\n      params = [\n        getUserFullName(topListPeers[0]),\n        getUserFullName(topListPeers[1]),\n        (invitableWithPremiumIds!.length - 2).toString(),\n      ];\n    }\n\n    return lang(langKey, params, undefined, topListPeers.length);\n  }, [invitableWithPremiumIds, isEveryPremiumBlocksPm, lang, topListPeers]);\n\n  if (!userIds) return undefined;\n\n  const hasPremiumSection = Boolean(topListPeers?.length);\n  const hasSelectableSection = Boolean(selectableIds?.length);\n\n  return (\n    <Modal\n      isOpen={Boolean(userIds && chat)}\n      contentClassName={styles.content}\n      onClose={handleClose}\n      isSlim\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      {premiumSectionText && (\n        <>\n          <AvatarList\n            className={styles.avatarList}\n            peers={topListPeers}\n            size=\"large\"\n          />\n          <h3 className={styles.title}>\n            {canSendInviteLink ? lang('InvitePremiumBlockedTitle') : lang('ChannelInviteViaLinkRestricted')}\n          </h3>\n          <p className={styles.contentText}>\n            {renderText(premiumSectionText, ['simple_markdown'])}\n          </p>\n          <Button\n            withPremiumGradient\n            isShiny\n            size=\"smaller\"\n            onClick={handleOpenPremiumModal}\n          >\n            {lang('InvitePremiumBlockedSubscribe')}\n          </Button>\n        </>\n      )}\n      {hasPremiumSection && hasSelectableSection && (\n        <Separator className={styles.separator}>\n          {lang('InvitePremiumBlockedOr')}\n        </Separator>\n      )}\n      {hasSelectableSection && (\n        <>\n          <h3 className={styles.title}>{lang('InviteBlockedTitle')}</h3>\n          <p className={styles.contentText}>\n            {inviteSectionText}\n          </p>\n          <Picker\n            className={styles.userPicker}\n            itemIds={userIds!}\n            selectedIds={selectedMemberIds}\n            lockedUnselectedIds={unselectableIds}\n            lockedUnselectedSubtitle={lang('InvitePremiumBlockedUser')}\n            onSelectedIdsChange={setSelectedMemberIds}\n            isViewOnly={!canSendInviteLink}\n            isRoundCheckbox\n          />\n          {canSendInviteLink && (\n            <Button\n              className={styles.sendInvites}\n              size=\"smaller\"\n              onClick={handleSendInviteLink}\n              disabled={!selectedMemberIds.length}\n            >\n              {lang('SendInviteLink.ActionInvite')}\n            </Button>\n          )}\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal?.chatId ? selectChat(global, modal.chatId) : undefined;\n\n    return {\n      chat,\n    };\n  },\n)(InviteViaLinkModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c3xMWwzW\",\"fade-in-opacity\":\"cHb04cFv\",\"fadeInOpacity\":\"cHb04cFv\",\"closing\":\"_0HkZ8ITm\",\"voice\":\"VLiJWMs0\",\"video\":\"ML2YEpGq\",\"footer\":\"VWy1qXJL\",\"closeBtn\":\"FfMrCmD9\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { isOwnMessage } from '../../../global/helpers';\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport Audio from '../../common/Audio';\nimport RoundVideo from '../../middle/message/RoundVideo';\nimport Button from '../../ui/Button';\n\nimport styles from './OneTimeMediaModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['oneTimeMediaModal'];\n};\n\nconst OneTimeMediaModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    closeOneTimeMediaModal,\n  } = getActions();\n\n  const lang = useLang();\n  const message = useCurrentOrPrev(modal?.message, true);\n\n  const {\n    shouldRender,\n    transitionClassNames,\n  } = useShowTransition(Boolean(modal));\n\n  const handlePlayVoice = useLastCallback(() => {\n    return undefined;\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeOneTimeMediaModal();\n  });\n\n  if (!shouldRender || !message) {\n    return undefined;\n  }\n\n  const isOwn = isOwnMessage(message);\n  const theme = selectTheme(getGlobal());\n  const closeBtnTitle = isOwn ? lang('Chat.Voice.Single.Close') : lang('Chat.Voice.Single.DeleteAndClose');\n\n  function renderMedia() {\n    if (!message?.content) {\n      return undefined;\n    }\n    const { voice, video } = message.content;\n    if (voice) {\n      return (\n        <Audio\n          className={styles.voice}\n          theme={theme}\n          message={message}\n          origin={AudioOrigin.OneTimeModal}\n          autoPlay\n          onPlay={handlePlayVoice}\n          onPause={handleClose}\n        />\n      );\n    } else if (video?.isRound) {\n      return (\n        <RoundVideo\n          className={styles.video}\n          message={message}\n          origin=\"oneTimeModal\"\n          onStop={handleClose}\n        />\n      );\n    }\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, transitionClassNames)}>\n      {renderMedia()}\n      <div className={styles.footer}>\n        <Button\n          faded\n          onClick={handleClose}\n          pill\n          size=\"smaller\"\n          color={theme === 'dark' ? 'dark' : 'secondary'}\n          className={styles.closeBtn}\n        >\n          {closeBtnTitle}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(OneTimeMediaModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { MediaWorkerApi } from '../lib/mediaWorker/index.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TEST } from '../config';\n\nimport { createConnector } from './PostMessageConnector';\n\nexport const MAX_WORKERS = Math.min(navigator.hardwareConcurrency || 4, 4);\n\nlet instances: {\n  worker: Worker;\n  connector: Connector<MediaWorkerApi>;\n}[] | undefined;\n\nexport default function launchMediaWorkers() {\n  if (IS_TEST) return [];\n  if (!instances) {\n    instances = new Array(MAX_WORKERS).fill(undefined).map(\n      () => {\n        const worker = new Worker(new URL('../lib/mediaWorker/index.worker.ts', import.meta.url));\n        const connector = createConnector<MediaWorkerApi>(worker);\n        return { worker, connector };\n      },\n    );\n  }\n\n  return instances;\n}\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","ProfileAvatar","SettingsAvatar","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","getNodes","message","containerSelector","mediaSelector","Album","ScheduledAlbum","getMessageHtmlId","SharedMedia","SearchResult","MiddleHeaderAvatar","SuggestedAvatar","ScheduledInline","Inline","MESSAGE_CONTENT_SELECTOR","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","style","objectFit","signal","createSignal","setIsPictureInPicture","getSetPresentationMode","video","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","useMediaProps","mediaId","avatarOwner","delay","photo","getMessagePhoto","undefined","actionPhoto","getMessageActionPhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","videoSize","getMessageFileSize","avatarMedia","photos","isVideoAvatar","Boolean","isVideo","isPhoto","isGif","isFromSharedMedia","isFromSearch","getMediaHash","useMemo","isFull","getVideoAvatarMediaHash","getChatAvatarHash","getMessageMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","BlobUrl","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","useBlurSync","getMessageMediaThumbDataUri","bestData","isLocal","fileName","getMessageFileName","hasVideoAvatar","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","VIDEO_AVATAR_FULL_DIMENSIONS","AVATAR_FULL_DIMENSIONS","avatarPhoto","getZoomChange","setZoomChange","useZoomChange","memo","withGlobal","global","isSchedule","threadId","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","chat","selectChat","chatId","contactName","isUserId","getUserFirstOrLastName","selectUser","getPrivateChatUserId","isChatWithBot","selectBot","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","DeleteMessageModal","isOpen","album","onConfirm","onClose","deleteMessages","deleteScheduledMessages","getActions","handleDeleteMessageForAll","useCallback","messageIds","messages","map","shouldDeleteForAll","handleDeleteMessageForSelf","lang","useLang","React","Modal","onEnter","className","title","Button","color","isText","onClick","renderText","DeleteProfilePhotoModal","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","canUpdateMedia","currentMessageList","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","isCurrentAvatar","avatarHash","canUpdate","messageListType","type","avatarOwnerId","MediaViewerActions","canReport","selectMedia","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useFlag","isMobile","useAppLayout","downloadMessageMedia","cancelMessageMediaDownload","updateProfilePhoto","updateChatPhoto","downloadProgress","handleDownloadClick","useLastCallback","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","MenuButton","onTrigger","round","ariaLabel","renderDeleteModals","menuItems","isForwardingAllowed","push","icon","children","Math","href","download","destructive","length","DropdownMenu","trigger","positionX","MenuItem","key","ProgressSpinner","progress","noCross","renderDownloadButton","useSignalRef","getValue","ref","useEffectOnce","subscribe","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","MediaViewerFooter","text","isForVideo","isForceMobileVersion","isMultiline","setIsMultiline","useState","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","getCurrentTime","setCurrentTime","useCurrentTimeSignal","getIsVideoWaiting","setIsVideoWaiting","useVideoWaitingSignal","IS_MOBILE","IS_ANDROID","IS_IOS","PREVIEW_SIZE_RATIO","MAX_FRAMES","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","constructor","url","_defineProperty","this","forEach","connector","index","request","name","args","MAX_WORKERS","onFrame","time","frame","frames","currentTime","render","clearCache","close","requestMutation","drawImage","destroy","worker","async","messageId","params","data","result","callApi","mediaFormat","Progressive","arrayBuffer","postMessage","cancelAnimation","SeekLine","duration","bufferedRanges","isReady","posterSize","playbackRate","isActive","isPlaying","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getCurrentTimeSignal","getIsWaiting","useThrottledSignal","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","ratio","getPreviewDimensions","setPreview","floor","renderVideoPreview","createVideoPreviews","remaining","animateNumber","from","to","onUpdate","useLayoutEffect","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","pageX","MouseEvent","touches","t","clamp","preview","clientWidth","stopAnimation","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","ShowTransition","styles","start","end","PLAYBACK_RATES","VideoPlayerControls","bufferedProgress","fileSize","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","setVisibility","isVisible","timeout","body","remove","handleSeek","position","handleSeekStart","volumeIcon","ripple","RangeSlider","bold","value","onChange","renderTime","formatFileSize","Menu","positionY","autoClose","rate","disabled","VideoPlayer","posterData","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setFullscreen","exitFullscreen","useFullscreen","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","elRef","onLeave","isSupported","setIsSupported","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","lockControls","handleVideoMove","handleVideoLeave","bounds","clientX","right","clientY","top","bottom","bufferingHandlers","useBuffering","isUnsupported","useUnsupportedMedia","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","readyState","handleEnded","handleFullscreenChange","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","Number","isFinite","handleKeyDown","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseOut","onContextMenu","onDoubleClick","_extends","autoPlay","controlsList","playsInline","loop","onWaiting","onPlay","onEnded","onPause","onTimeUpdate","join","square","ownProps","selectTabState","mediaViewer","selectChatMessage","senderId","selectScheduledMessage","props","withAnimation","onFooterClick","isMoving","toggleControlsOnMove","calculateMediaViewerDimensions","ARE_WEBCODECS_SUPPORTED","renderPhoto","textParts","content","action","renderMessageText","forcePlayback","isForMediaViewer","hasFooter","shouldForceMobileVersion","imageSize","canDrag","Spinner","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelZoomAnimation","SwipeDirection","MediaViewerSlides","getMediaId","rest","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","x","y","scale","swipeDirectionRef","initialContentRectRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveMediaId","setActiveMediaId","activeMediaIdRef","isScaled","activeMediaId","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","selectMediaDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","useTimeout","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","timing","changeSlideOnClick","target","calculateOffsetBoundaries","initialContentRect","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","max","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","min","scaleFactor","x1","y1","k","Vx","Vy","dirX","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","withWheelDrag","checkIfControlTarget","event","captureEvent","dragOffsetX","dragOffsetY","cancelDrag","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","SWIPE_DIRECTION_THRESHOLD","SWIPE_DIRECTION_TOLERANCE","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMediaId","prevMediaId","hasPrev","hasNext","MediaViewerContent","isRtl","toFixed","element","selector","matches","isAvatar","sender","selectPeer","selectSender","SenderInfo","isFallbackAvatar","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","peer","formatMediaDateTime","date","shouldSkipHistoryAnimations","selectPerformanceSettingsValue","currentUserId","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","user","isChatAdmin","avatarOwnerFallbackPhoto","selectUserFullInfo","fallbackPhoto","selectChatScheduledMessages","selectChatMessages","selectOutlyingListByMessageId","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","MediaViewer","openMediaViewer","openForwardMenu","animationKey","prevSenderId","usePrevious","headerAnimation","isGhostAnimation","isReportModalOpen","openReportModal","closeReportModal","singleMediaId","mediaIds","p","i","getChatMediaMessageIds","selectedMediaIndex","indexOf","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","headerRef","useElectronDrag","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","prevMessage","prevIsHidden","prevOrigin","prevAvatarOwner","prevBestImageData","shouldAnimateOpening","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","applyStyles","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","mediaIdRef","useStateRef","handleFooterClick","currentMediaId","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","mediaIdsRef","fromId","mIds","handleBeforeDelete","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","ReportModal","subject","peerId","OFFSET_BOTTOM","MOBILE_OFFSET","hasBlur","isGhost2","ctx","alpha","IS_CANVAS_FILTER_SUPPORTED","filter","RADIUS","userId","getPeerStoryHtmlId","StoryViewerOrigin","StoryRibbon","storyRibbonStyles","root","ChatList","BASE_SCREEN_WIDTH","BASE_SCREEN_HEIGHT","BASE_ACTIVE_SLIDE_WIDTH","BASE_ACTIVE_SLIDE_HEIGHT","BASE_SLIDE_WIDTH","BASE_SLIDE_HEIGHT","calculateOffsetX","slideAmount","isActiveSlideSize","isMoveThroughActiveSlide","isBackward","mainOffset","additionalOffset","totalOffset","roundToNearestEven","useSlideSizes","baseWidth","baseHeight","newWidth","newHeight","widthScale","heightScale","calculateScale","activeSlideWidth","slideWidth","activeSlide","slide","toActiveScale","fromActiveScale","calculateSlideSizes","useStoryProps","story","isCurrentUserPremium","isDropdownMenuOpen","isLoadedStory","isDeletedStory","hasText","hasMessageText","hasForwardInfo","forwardInfo","thumbnail","previewHash","getStoryMediaHash","noSound","fullMediaHash","fullMediaData","altMediaHash","altMediaData","hasFullData","hasThumb","canDownload","noForwards","downloadHash","downloadMediaData","tabState","storyViewer","isStealthModalOpen","stealthMode","stories","selectIsCurrentUserPremium","StealthModeModal","toggleStealthModal","activateStealthMode","showNotification","openPremiumModal","isOnCooldown","setIsOnCooldown","serverTime","getServerTime","cooldownUntil","handleTimerEnds","handleActivate","initialSection","contentClassName","isSlim","ListItem","multiline","inactive","leftElement","isShiny","withPremiumGradient","TextTimer","langKey","endsAt","onEnd","deleteStory","openNextStory","handleDeleteStoryClick","storyId","ConfirmDialog","confirmLabel","confirmHandler","confirmIsDestructive","contactListIds","usersById","selectedIds","lockedIds","onSelect","searchQuery","setSearchQuery","displayedIds","contactIds","unique","filterUsersByName","Picker","itemIds","MEMO_EMPTY_ARRAY","lockedSelectedIds","filterValue","filterPlaceholder","searchInputId","isSearchable","forceShowSelf","onSelectedIdsChange","onFilterChange","saveCloseFriends","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","closeFriendIds","isCloseFriend","useEffectWithPrevDeps","prevIsActive","handleSelectedContactIdsChange","handleSubmit","userIds","Fragment","FloatingActionButton","isShown","OPTIONS","actions","Screens","selectPeerStory","visibility","contactList","users","byId","editStoryPrivacy","toggleStoryPinned","isOpenModal","openModal","closeModal","privacy","setPrivacy","isPinned","setIsPinned","setActiveKey","editingBlockingCategory","setEditingBlockingCategory","isBackButton","allowList","allowUserIds","selectedBlockedIds","blockUserIds","handleAllowUserIdsChange","newIds","handleDenyUserIdsChange","handleCloseButtonClick","handleIsPinnedToggle","renderContent","storyLifeTime","seconds","hours","remainingSeconds","convertSecondsToHours","expireDate","section","list","option","checked","input","handleVisibilityChange","newVisibility","teactExperimentControlled","optionContent","option_name","tabIndex","role","closeFriends","denyList","handleActionClick","actionInner","getUserFullName","Switcher","label","footer","info","submit","renderPrivacyList","CloseFriends","AllowDenyList","modal","noBackdrop","onCloseAnimationEnd","header","closeButton","headerTitle","renderHeaderContent","slideClassName","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","changedTouches","getTouchY","scrollHeight","preventDefaultForScrollKeys","HTMLElement","tagName","toLowerCase","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","fromPeerId","EmbeddedStoryForward","openStoryViewer","loadPeerStoriesByIds","openChat","storyIds","fromName","openOriginalStory","isDeleted","isSingleStory","handleMouseDown","useFastClick","getPeerColorClass","onMouseDown","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","renderTextWithEntities","renderTextContent","Icon","renderSender","isExpanded","onExpand","onFold","contentRef","textRef","showMoreButtonRef","renderingStory","useCurrentOrPrev","caption","hasOverflow","setHasOverflow","prevIsExpanded","usePrevDuringAnimation","isInExpandedState","addExtraClass","removeExtraClass","canExpand","shouldRenderShowMore","requestMeasure","button","offsetWidth","setProperty","requestForcedReflow","textContainer","textOffsetTop","lineHeight","parseInt","getComputedStyle","isOverflowing","overflowShift","scrollTo","fullClassName","MessageText","messageOrStory","withTranslucentThumbs","StoryFooter","openStoryViewModal","sendStoryReaction","views","isOut","sentReaction","viewsCount","forwardsCount","reactionsCount","isChannel","isSentStoryReactionHeart","emoticon","HEART_REACTION","canForward","isPublic","containerId","getStoryKey","recentViewers","getGlobal","recentViewerIds","handleOpenStoryViewModal","handleForwardClick","handleLikeStory","reaction","AvatarList","peers","nonInteractive","ReactionAnimatedEmoji","documentId","withEffectOnly","isViewed","isPaused","onImageComplete","handleAnimationEnd","animationName","onAnimationEnd","VIDEO_MIN_READY_STATE","IS_SAFARI","appConfig","viewModal","isPrivacyModalOpen","storyList","forwardMessages","forwardedStoryId","premiumModal","safeLinkModalUrl","mapModal","isPremiumModalOpen","shouldForcePause","reactionPicker","mediaAreas","forwardSenderId","find","area","channelId","forwardSender","withHeaderAnimation","fromPeer","orderedIds","storyIdsByPeerId","storyChangelogUserId","viewersExpirePeriod","storyExpirePeriod","storyViewersExpirePeriod","isChatExist","areChatSettingsLoaded","settings","isArchivedStories","isPrivateStories","getIsAnimating","onDelete","viewStory","setStoryViewerMuted","openPreviousStory","loadPeerSkippedStories","copyStoryLink","openStoryPrivacyEditor","loadChatSettings","fetchChat","loadStoryViews","isComposerHasFocus","markComposerHasFocus","unmarkComposerHasFocus","isStoryPlaybackRequested","playStory","pauseStory","isStoryPlaying","markStoryPlaying","unmarkStoryPlaying","isAppFocused","markAppFocused","unmarkAppFocused","isCaptionExpanded","expandCaption","foldCaption","isPausedBySpacebar","setIsPausedBySpacebar","isPausedByLongPress","markIsPausedByLongPress","unmarkIsPausedByLongPress","markDropdownMenuOpen","unmarkDropdownMenuOpen","isChangelog","isUserStory","isChatStory","isChannelStory","isChatChannel","canPinToProfile","canUnpinFromProfile","areViewsExpired","forwardSenderTitle","canCopyLink","usernames","canShare","canPlayStory","shouldShowComposer","shouldShowFooter","shouldRenderSkeleton","skeletonTransitionClassNames","mediaTransitionClassNames","thumbRef","useCanvasBlur","previewTransitionClassNames","useMediaTransition","shouldRenderComposer","composerAppearanceAnimationClassNames","shouldRenderCaptionBackdrop","captionBackdropTransitionClassNames","appearanceAnimationClassNames","shouldRenderCaption","captionAppearanceAnimationClassNames","isStreamingSupported","useStreaming","PRIMARY_VIDEO_MIME","useStoryPreloader","canWrite","handlePauseStory","handlePlayStory","handleLongPressStart","handleLongPressEnd","handleDropdownMenuOpen","handleDropdownMenuClose","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","onMouseLeave","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","onStart","isLongPressActive","isPressed","timerId","canProcessEvent","cancel","useLongPress","hasAllData","useBackgroundMode","load","keyCode","prevIsComposerHasFocus","prevIsCaptionExpanded","prevShouldForcePause","prevIsAppFocused","prevIsPausedByLongPress","handleOpenChat","handleForwardPeerClick","handleFromPeerClick","handleOpenPrevStory","handleOpenNextStory","handleVideoStoryTimeUpdate","captureKeyboardListeners","onRight","onLeft","handleCopyStoryLink","handlePinClick","handleUnpinClick","handleReportStoryClick","handleInfoPrivacyEdit","handleInfoPrivacyClick","isForContacts","isForCloseFriends","myName","handleOpenStealthModal","activeUntil","diff","handleDownload","StoryProgress","formatRelativeTime","isEdited","privacyIcon","gradient","renderStoryPrivacyButton","onOpen","Skeleton","OptimizedVideo","canPlay","isPriority","disableRemotePlayback","SECONDARY_VIDEO_MIME","MediaAreaOverlay","withStory","storyViewerMode","StoryCaption","Composer","MAIN_THREAD_ID","getIsMobile","editableInputCssSelector","EDITABLE_STORY_INPUT_CSS_SELECTOR","editableInputId","EDITABLE_STORY_INPUT_ID","inputId","inputPlaceholder","onFocus","onBlur","lastViewedByPeerIds","lastViewedId","storyIdsForViewer","peerStories","lastReadId","hasUnreadStories","previewIndexId","isLoaded","imageHash","thumbUrl","currentPeerId","currentStoryId","isSinglePeer","isPrivate","isArchive","byPeerId","orderedPeerIds","active","peerIds","selectIsStoryViewerOpen","stopActiveReaction","renderingPeerId","setRenderingPeerId","renderingStoryId","setRenderingStoryId","prevPeerId","renderingIsArchive","renderingIsPrivate","renderingIsSinglePeer","renderingIsSingleStory","slideSizes","rendersRef","setIsAnimating","setRef","renderingPeerIds","slice","renderingPeerPosition","currentPeerPosition","calculateTransformX","reduce","transformX","getCurrentStoryRef","composer","focusEditableElement","Object","entries","String","handleTransitionEnd","Story","onTransitionEnd","buildStyle","renderStory","StoryPreview","renderStoryPreview","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","DEFAULT_REACTION_SIZE","storyView","availableReactions","reactions","StoryView","closeStoryViewer","unblockUser","blockUser","deleteContact","updateStoryView","closeStoryViewModal","contextActions","areStoriesBlocked","isUserBlocked","isContact","fullName","handler","isOnlyStories","statusIcon","shouldColorStatus","status","isModified","parts","formatDateAtTime","opacityFadeIn","blocked","rightElement","ReactionStaticEmoji","viewReaction","withIconHeart","withPortalForMenu","menuBubbleClassName","menuBubble","PrivateChatInfo","withColoredStatus","noStatusOrTyping","GroupChatInfo","nextOffset","isLoading","loadStoryViewList","clearStoryViews","areJustContacts","markJustContacts","unmarkJustContacts","areReactionsFirst","markReactionsFirst","unmarkReactionsFirst","query","setQuery","isExpired","shouldShowJustContacts","STORY_VIEWS_MIN_CONTACTS_FILTER","shouldShowSortByReactions","STORY_MIN_REACTIONS_SORT","shouldShowSearch","STORY_VIEWS_MIN_SEARCH","hasHeader","refetchViews","sortedViews","sort","a","b","reactionA","reactionB","prepareComparator","placeholderCount","notAllAvailable","handleLoadMore","MoreMenuButton","isMenuOpen","fluid","sortButton","topButton","faded","iconSort","iconDown","viewsList","contactFilter","selected","check","SearchInput","search","topScrolled","onScroll","centeredInfo","InfiniteScroll","items","onLoadMore","view","additionalKeyId","Array","_","PlaceholderChatInfo","bottomInfo","closeStoryPrivacyEditor","storyToDelete","setStoryToDelete","isPrevOpen","handleOpenDeleteModal","s","handleCloseDeleteModal","thumb","safeAreaBottom","documentElement","getPropertyValue","parseFloat","toTranslateX","toTranslateY","toScaleX","toScaleY","ghost2","ghost2Top","StorySlides","StoryDeleteConfirmModal","StoryViewModal","StorySettings","TOPIC_ICON_SIZE","ChatOrUserPicker","chatOrUserIds","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","topicIds","topics","chatsById","chats","chatFullInfoById","fullInfoById","topicsResult","searchTitle","values","acc","topic","getCanPostInChat","keys","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","handleTopicClick","topicId","InputText","onKeyDown","placeholder","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","clickArg","TopicIcon","letterClassName","Loading","listIds","orderedPinnedIds","activeListIds","archivedListIds","archived","pinnedIds","RecipientPicker","API_CHAT_TYPES","onSelectRecipient","setSearch","ids","priorityIds","chatIds","isDeletedUser","sorted","sortChatIds","filterChatsByName","filterChatIdsByType","renderingIds","isManyMessages","isStory","ForwardRecipientPicker","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","forwardStory","renderingIsStory","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","isSelf","toChatId","getChatTitle","DraftRecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","AttachBotRecipientPicker","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","Dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","isModalOpen","dialog","contactRequest","invite","hash","about","participantsCount","isRequestNeeded","participantsText","joinText","requestToJoinText","renderInviteHeader","handleJoinClick","renderInvite","handleConfirm","contact","pick","messageList","getReadableErrorText","withVideo","Notifications","notifications","dismissNotification","localId","actionText","Notification","onDismiss","SafeLinkModal","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","OpenMapModal","closeMapModal","point","geoPoint","googleUrl","bingUrl","appleUrl","osmUrl","google","prepareMapUrl","bing","osm","openUrl","handleGoogleClick","handleBingClick","handleAppleClick","handleOsmClick","IS_MAC_OS","currentUser","UrlAuthModal","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","isWriteAllowed","handleLoginChecked","Checkbox","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","padStart","formatDay","CalendarModal","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleChangeHours","replace","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","handleDateSelect","inputMode","historyCalendarSelectedAt","HistoryCalendar","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","userStatus","selectUserStatus","phoneCodeList","countryList","phoneCodes","NewContactModal","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","attachBot","attachMenu","bots","selectCurrentChat","theme","selectTheme","isPaymentModalOpen","payment","paymentStatus","WebAppModal","closeWebApp","sendWebViewData","prolongWebView","toggleAttachBot","openTelegramLink","setWebAppPaymentSlug","switchBotInline","sharePhoneWithBot","mainButton","setMainButton","isBackButtonVisible","setIsBackButtonVisible","isSettingsButtonVisible","setIsSettingsButtonVisible","backgroundColor","setBackgroundColor","headerColor","setHeaderColor","shouldConfirmClosing","setShouldConfirmClosing","isCloseModalOpen","openCloseModal","hideCloseModal","isRemoveModalOpen","openRemoveModal","hideRemoveModal","markLoaded","markUnloaded","popupParameters","setPopupParameters","isRequestingPhone","setIsRequestingPhone","isRequesingWriteAccess","setIsRequestingWriteAccess","unlockPopupsAt","handlePopupOpened","handlePopupClosed","sequentialLimit","resetAfter","setUnlockPopupsAt","sequentialCalls","lastClosedDate","usePopupLimit","themeParams","extractCurrentThemeParams","bg_color","frameRef","buttonText","queryId","replyInfo","isSimple","reloadFrame","sendEvent","sendViewport","sendTheme","useWebAppFrame","isSimpleView","onEvent","onLoad","openInvoice","isReloadSupported","reloadTimeout","ignoreEventsRef","lastFrameSizeRef","handleLoad","contentWindow","JSON","stringify","forceReloadFrame","once","eventType","isNonStable","eventData","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","reload_supported","req_id","slug","linkUrl","available","TME_LINK_PREFIX","path_full","is_visible","validateHexColor","color_key","newColor","button_color","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","need_confirmation","buttons","handleAppPopupClose","chat_types","convertToApiChatType","isSamePeer","handleRejectPhone","handleRejectWriteAccess","handleRequestWriteAccess","method","requestId","parameters","customMethod","handleInvokeCustomMethod","shouldShowMainButton","useInterval","handleMainButtonClick","handleSettingsButtonClick","handleRefreshClick","buttonId","button_id","handleAppPopupModalClose","prevIsPaymentModalOpen","handleRemoveAttachBot","isEnabled","handleToggleClick","handleBackClick","handleAcceptPhone","handleAcceptWriteAccess","openBotChat","backButtonClassName","headerTextVar","r","g","hexToRgb","luma","getColorLuma","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","shortName","isAttachBot","sandbox","allow","allowFullScreen","hasCloseButton","BotTrustModal","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","handleBotTrustAccept","handleBotTrustDecline","AttachBotInstallModal","confirmAttachBotInstall","cancelAttachBotInstall","isTosAccepted","setIsTosAccepted","tosLabel","split","linkText","MINI_APP_TOS_URL","rel","isConfirmDisabled","DeleteFolderDialog","folder","closeDeleteChatFolderModal","deleteChatFolder","openDeleteChatFolderModal","renderingFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","folderId","isConfirmedForChatlist","COLORS","PremiumFeatureItem","isFontIcon","count","newIndex","colorA","colorB","ceil","lerpRgb","buttonClassName","fontIcon","description","SliderDots","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","fill","isLast","isPreLast","isFirst","isPreFirst","isInvisible","PremiumLimitsCompare","leftValue","rightValue","floatingBadgeIcon","rightStyle","viewBox","COLOR_START","COLOR_END","PremiumLimitPreview","colorStepProgress","lerp","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","AnimatedSticker","tgsUrl","play","isLowPriority","noLoop","stickers","premium","PremiumFeaturePreviewStickers","setOffset","setSize","renderedStickers","cycleRestrict","STORY_FEATURE_TITLES","stories_order","stories_stealth","stories_views","stories_timer","stories_save","stories_caption","stories_link","STORY_FEATURE_DESCRIPTIONS","STORY_FEATURE_ICONS","STORY_FEATURE_ORDER","CIRCLE_SIZE","PremiumFeaturePreviewVideo","circleRef","dpr","useDevicePixelRatio","drawGradientCircle","segmentsCount","readSegmentsCount","readSegmentColor","maxSize","forPremiumPromo","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","wrapper","reverse","down","DeviceFrame","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","translations","saved_tags","last_seen","message_privacy","PREMIUM_FEATURE_DESCRIPTIONS","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","recommendedChannels","LIMITS_DESCRIPTIONS","PremiumFeatureModal","promo","isPremium","limits","premiumPromoOrder","subscriptionOption","onClickSubscribe","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","PREMIUM_FEATURE_SECTIONS","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","filteredSections","subscriptionButtonText","amount","months","currency","perMonthPrice","formatCurrency","handleLimitsScroll","scrollContainer","animateHorizontalScroll","then","handleSelectSlide","scrollLeft","scrollLeftOriginal","reverseIndex","prevElement","reverseElement","toString","toggleExtraClass","PREMIUM_LIMITS_ORDER","defaultLimit","premiumLimit","PremiumFeaturePreviewStories","videoSections","videos","PREMIUM_BOTTOM_VIDEOS","PremiumSubscriptionOption","fullMonthlyAmount","isGiveaway","perMonth","isUserCountPlural","discount","handleChange","STATUS_EMOJI_SIZE","PREMIUM_FEATURE_COLOR_ICONS","PremiumStatus","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumTranslate","PremiumTags","PremiumLastSeen","PremiumMessagePrivacy","fromUser","fromUserId","fromUserStatusEmoji","emojiStatus","customEmojis","fromUserStatusSet","selectStickerSet","stickerSetInfo","isSuccess","isGift","monthsAmount","toUser","toUserId","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","premiumSlug","premiumInvoiceSlug","premiumBotUsername","PremiumMainModal","dialogRef","closePremiumModal","requestConfetti","loadStickers","openStickerSet","isHeaderHidden","setHeaderHidden","currentSection","setCurrentSection","selectedSubscriptionOption","setSubscriptionOption","handleOpenSection","handleResetSection","handleClickWithStartParam","handleChangeSubscriptionOption","foundOption","options","showConfetti","prevIsPremium","defaultOption","handleOpenStatusSet","stickerSetTitle","template","first","second","emoji","thumbCustomEmojiId","CustomEmoji","link","monthOption","subscribeButtonText","isBig","PremiumLogo","statusText","entities","statusEntities","renderFooterText","gifts","forUserIds","isCompleted","giftPremiumModal","boostPerSentGift","boostsPerSentGift","GiftPremiumModal","BOOST_PER_SENT_GIFT","closeGiftPremiumModal","selectedMonthOption","setSelectedMonthOption","selectedUserQuantity","giftingUserList","selectedGift","gift","filteredGifts","fullMonthlyGiftAmount","basicGift","handlePremiumClick","userNameList","modalDialog","avatars","headerText","center","part","subpart","boostIcon","subscriptionOptions","match","premiumFeatures","Link","isPrimary","renderPremiumFeaturesLink","CountryPickerModal","selectionLimit","selectedCountryIds","setSelectedCountryIds","noPickerScrollRestore","country","iso2","handleSelectedIdsChange","newSelectedIds","pickerSelector","pickerTitle","main","picker","noScrollRestore","isCountryList","entityType","statusesById","userStatusesById","isSuperGroup","members","adminMembersById","chatFullInfo","selectChatFullInfo","AppendEntityPickerModal","isConfirmModalOpen","openConfirmModal","closeConfirmModal","setSelectedIds","pendingChannelId","setPendingChannelId","channelsIds","adminIds","memberIds","sortUserIds","displayedMembersIds","filteredContactIds","isUserBot","displayedChannelIds","foundChannelIds","contactId","handleSendIdList","confirmPrivateLinkChannelSelection","prevIds","handleSelectedMemberIdsChange","handleSelectedChannelIdsChange","privateLinkChannelId","isChatPublic","GiveawayTypeOption","isLink","onClickAction","userNames","selectedMemberIds","displayText","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","giveawayModal","selectedMemberList","selectedChannelList","selectedChannelIds","giveawayBoostPerPremiumLimit","giveawayBoostsPerPremium","userSelectionLimit","giveawayAddPeersMax","countrySelectionLimit","giveawayCountriesMax","general","prepaidGiveaway","GiveawayModal","GIVEAWAY_BOOST_PER_PREMIUM","GIVEAWAY_MAX_ADDITIONAL_COUNTRIES","GIVEAWAY_MAX_ADDITIONAL_USERS","closeGiveawayModal","launchPrepaidGiveaway","isCalendarOpened","openCalendar","closeCalendar","isCountryPickerModalOpen","openCountryPickerModal","closeCountryPickerModal","isEntityPickerModalOpen","openEntityPickerModal","closeEntityPickerModal","setEntityType","TYPE_OPTIONS","GiveawayUsersRound","customExpireDate","setCustomExpireDate","selectedUserCount","setSelectedUserCount","selectedGiveawayOption","setGiveawayOption","selectedSubscriberOption","setSelectedSubscriberOption","selectedUserIds","setSelectedUserIds","setSelectedChannelIds","selectedCountriesIds","setSelectedCountriesIds","shouldShowWinners","setShouldShowWinners","shouldShowPrizes","setShouldShowPrizes","prizeDescription","setPrizeDescription","dataPrepaidGiveaway","setDataPrepaidGiveaway","boostQuantity","isRandomUsers","SUBSCRIBER_OPTIONS","subLabel","monthQuantity","userCountOptions","uniqueUserCounts","Set","quantity","boostChannelId","additionalChannelIds","isOnlyForNewSubscribers","countries","areWinnersVisible","untilDate","confirmLaunchPrepaidGiveaway","giveawayId","paymentPurpose","handleUserCountChange","newValue","handlePrizeDescriptionChange","handleAdd","handleChangeSubscriberOption","handleChangeTypeOption","handleExpireDateChange","handleSetCountriesListChange","handleSetIdsListChange","handleShouldShowWinnersChange","handleShouldShowPrizesChange","onClickActionHandler","RangeSliderWithMarks","rangeCount","marks","filteredChannelIds","deleteParticipantsHandler","iconClassName","RadioGroup","subLabelClassName","formatDateTimeToString","GIVEAWAY_MAX_ADDITIONAL_CHANNELS","PremiumGiftingModal","closePremiumGiftingModal","openGiftPremiumModal","displayedUserIds","handleSelectedUserIdsChange","LIMIT_DESCRIPTION","uploadMaxFileparts","chatlistInvites","chatlistJoined","savedDialogsPinned","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","PremiumLimitReachedModal","closeLimitReachedModal","isClosing","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SLIDE_TRANSITION_DURATION","FOCUS_MARGIN","useStickerPickerObservers","idPrefix","stickerSetIntersectionsRef","activeSetIndex","setActiveSetIndex","observe","observeIntersectionForSet","freeze","freezeForSet","unfreeze","unfreezeForSet","useIntersectionObserver","rootRef","stickerSetIntersections","entry","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","observeIntersectionForShowingItems","freezeForShowingItems","unfreezeForShowingItems","throttleMs","margin","observeIntersectionForPlayingItems","observeIntersectionForCovers","currentIndex","stickerSetEl","isClose","animateScroll","StickerSetCover","stickerSet","STICKER_SIZE_PICKER_HEADER","observeIntersection","sharedCanvasRef","hasThumbnail","hasVideoThumb","hasAnimatedThumb","hasStaticThumb","customEmoji","useCustomEmoji","hasCustomColor","shouldUseTextColor","customColor","useDynamicColorListener","colorFilter","useColorFilter","useIsIntersecting","shouldPlay","shouldFallbackToStatic","IS_WEBM_SUPPORTED","staticHash","getStickerPreviewHash","staticMediaData","mediaHash","coords","useCoordsInSharedCanvas","accessHash","observeIntersectionForPlaying","selectIsAlwaysHighPriorityEmoji","sharedCanvas","sharedCanvasCoords","forceAlways","getFirstLetters","contentForStatusMenuContext","arg","StickerButton","noContextMenu","isSavedMessages","isStatusPicker","canViewSet","observeIntersectionForShowing","isSelected","shouldIgnorePremium","noShowPremium","withTranslucentThumb","onFaveClick","onUnfaveClick","onRemoveRecentClick","onContextMenuOpen","onContextMenuClose","onContextMenuClick","setEmojiStatus","menuRef","isCustomEmoji","hasEffect","isLocked","shouldLoad","isIntesectingForShowing","isContextMenuOpen","contextMenuPosition","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","shouldRenderContextMenu","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useMenuPosition","getLayout","withPortal","shouldAvoidNegativePosition","handleRemoveClick","handleContextRemoveRecent","handleContextUnfave","handleContextFave","handleSendQuiet","handleSendScheduled","handleOpenSet","handleEmojiStatusExpiresClick","expires","getServerTimeOffset","shouldShowCloseButton","contextMenuItems","item","preventMessageInputBlurWithBubbling","StickerView","isSmall","shouldLoop","shouldPreloadPreview","noLoad","withSharedAnimation","noFastClick","ReactionEmoji","loadAndPlay","sharedCanvasHqRef","isCustom","availableReaction","isSameReaction","staticIcon","animationId","selectAnimation","getDocumentMediaHash","EMOJI_SIZE_PICKER","AnimatedIconWithPreview","StickerSet","isNearActive","favoriteStickers","isReactionPicker","shouldHideHeader","withDefaultTopicIcon","selectedReactionIds","withDefaultStatusIcon","isChatEmojiSet","isChatStickerSet","isTranslucent","noContextMenus","onReactionSelect","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isPopular","POPULAR_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","isInstalled","installedDate","isArchived","canCut","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","withAddSetButton","addSetButtonText","pill","grey","reactionId","getReactionKey","isHqEmoji","canvasRef","has","HEADER_BUTTON_WIDTH","FADED_BUTTON_SET_IDS","STICKER_SET_IDS_WITH_COVER","setsById","stickerSetsById","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","recentReactions","topReactions","defaultTags","addedCustomEmojiIds","added","setIds","canAnimate","selectCanPlayAnimatedEmojis","defaultTopicIconsId","defaultStatusIconsId","chatEmojiSetId","emojiSet","defaultTagReactions","CustomEmojiPicker","pickerListClassName","withDefaultTopicIcons","onCustomEmojiSelect","handleContentScroll","shouldHideTopBorder","pickTruthy","prefix","areAddedLoaded","allSets","defaultSets","TOP_SYMBOL_SET_ID","topReactionsSlice","cleanRecentReactions","some","topReaction","cleanAvailableReactions","allRecentReactions","concat","defaultStatusIconsPack","defaultTopicIconsPack","userSetIds","unshift","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","useAsyncRendering","shouldRenderContent","useHorizontalScroll","newLeft","handleEmojiSelect","handleReactionSelect","pickerStyles","headerClassName","listClassName","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","isFaded","areFeaturedStickersLoaded","selectIsContextMenuTranslucent","StatusPickerMenu","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","getFirstAvailableBoost","myBoosts","boost","firstBoost","prevBoostedChat","BoostModal","applyBoost","closeBoostModal","loadFullChat","isReplaceModalOpen","openReplaceModal","closeReplaceModal","isWaitDialogOpen","openWaitDialog","closeWaitDialog","isPremiumDialogOpen","openPremiumDialog","closePremiumDialog","chatTitle","boostedChatTitle","isStatusLoaded","isBoosted","leftText","rightText","descriptionText","canBoostMore","boostStatus","hasMyBoost","areBoostsInDifferentChannels","every","boosts","currentLevel","hasNextLevel","levelProgress","remainingBoosts","isMaxLevel","getBoostProgressInfo","hasBoost","moreBoosts","modalTitle","boostsLeftToUnrestrict","boostsToUnrestrict","boostsApplied","boostTimes","isBoostDisabled","isReplacingBoost","handleApplyBoost","slots","slot","handleProceedPremium","handleButtonClick","handleCloseClick","PremiumProgress","floatingBadgeText","isOnlyConfirm","formatDateInFuture","chatMessage","messageSender","GiftCodeModal","closeGiftCodeModal","applyGiftCode","canUse","toId","usedAt","handleOpenGiveaway","giveawayMessageId","LinkField","PickerSelectedItem","isFromGiveaway","ChatlistAlready","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","missingPeerIds","hasChatsToAdd","newChatsCount","badgeText","handleSelectionToggle","areAllSelected","pickerWrapper","pickerHeader","pickerHeaderInfo","selectionToggle","alreadyPeerIds","Badge","buttonBadge","isAlternateColor","ChatlistDelete","suggestedPeerIds","leaveChatlist","ChatlistNew","joinedIds","isNotJoined","selectedCount","removal","selectChatFolder","ChatlistInviteModal","renderingInfo","renderingFolderTitle","folderTabNumber","folderTitle","foldersWrapper","folders","badgeCount","isBadgeActive","AboutAdsModal","isRevenueSharing","minLevelSignal","useSelectorSignal","channelRestrictAdsLevelMin","minLevelToRestrictAds","regularAdContent","SafeLink","revenueSharingAdContent","isStatic","Separator","ReportAdModal","reportSponsoredMessage","closeReportAdModal","openPreviousReportAdModal","transitionRef","handleOptionClick","randomId","renderingSection","renderingDepth","sectionDepth","sections","bottomText","hasSubtitle","subtitle","ACTIVE_SLIDE_CLASS_NAME","handleAnimationStart","TO_SLIDE_CLASS_NAME","narrow","secondaryIcon","isPrivateChat","isGroup","canPinForAll","PinMessageModal","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","UnpinAllMessagesModal","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","DeleteSelectedMessageModal","exitMessageSelectMode","selectCanReportSelectedMessages","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","selectCanForwardMessages","isForwardModalOpen","isModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","MessageSelectToolbar","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","useHotkeys","useCopySelectedMessages","handleExitMessageSelectMode","onBackspace","onEsc","handleCopy","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","seenByDates","closeSeenByModal","renderingSeenByDates","leftId","rightId","handleCloseSeenByModal","CLOSE_ANIMATION_DURATION","isReadDate","privacySettingsNoticeModal","PrivacySettingsNoticeModal","updateGlobalPrivacySettings","closePrivacySettingsNoticeModal","setPrivacyVisibility","loadUser","userName","handleShowReadTime","shouldHideReadMarks","handleShowLastSeen","privacyKey","onSuccess","handleOpenPremium","LOCAL_TGS_URLS","ReadTime","LastSeen","reactorModal","reactors","ReactorListModal","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","allReactions","uniqueReactions","seenByUserIds","LoadMoreDirection","Backwards","formatIntegerCompact","flatMap","peerReactions","reactor","seenByUser","FullNameTitle","withEmojiStatus","addedDate","avatarSize","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","EmojiInteractionAnimation","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectHash","effectTgsUrl","startSize","isReversed","quality","chatLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","ChatLanguageModal","requestMessageTranslation","closeChatLanguageModal","setSettingOption","requestChatTranslation","handleSelect","langCode","toLanguageCode","translationLanguage","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","highlight","CollectibleInfoModal","closeCollectibleInfoModal","isUsername","handleOpenUrl","shouldSkipModal","formatUsername","collectible","copyTextToClipboard","formattedCollectible","purchaseDate","cryptoCurrency","cryptoAmount","Mention","chip","createMapStateToProps","fetchingStatus","globalSearch","currentType","isVoice","byChatId","globalMessagesByChatId","activeDownloads","searchChatId","shouldWarnAboutSvg","byKey","runThrottled","cb","AudioResults","searchMessagesGlobal","openAudioPlayer","foundMessages","handleMessageFocus","handlePlayAudio","canRenderContents","noFastList","NothingFound","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","Audio","AudioOrigin","Search","getSenderName","onDateClick","buttonRef","activeElement","privateChatUserId","privateChatUser","ChatMessage","mediaThumbnail","getMessageSticker","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","shouldReplaceHistory","useSelectWithEnter","formatPastTimeShort","renderMessageSummary","isSpoiler","getMessageIsSpoiler","renderSummary","DateSuggest","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","LeftSearchResultTopic","foundTopicIds","ChatMessageResults","dateSearchQuery","onSearchDateSelect","onReset","openThread","nothingFound","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","LeftSearchResultChat","withUsername","isMuteModalOpen","openMuteModal","closeMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","handleChatFolderChange","handleMute","useChatContextActions","storyViewerOrigin","MuteChatModal","ChatFolderModal","topUserIds","topPeers","recentlyFoundChatIds","RecentContacts","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","handleClearRecentlyFoundChats","isChannelList","globalResults","localResults","globalChatIds","globalUserIds","accountChatIds","accountUserIds","similarChannelIds","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","suggestedChannelIds","ChatResults","setGlobalSearchChatId","loadChannelRecommendations","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","startsWith","filteredChatIds","getOrderedIds","ALL_FOLDER_ID","localChatIds","contactIdsWithMe","localContactIds","localPeerIds","accountPeerIds","accountPeerId","filteredIds","handleClickShowMoreLocal","handleClickShowMoreGlobal","noScrollRestoreOnTop","CURRENT_TYPE","FileResults","observeIntersectionForMedia","Document","withDate","datetime","smaller","LinkResults","WebLink","onMessageClick","MediaResults","handleSelectMedia","isMediaGrid","isMessageList","itemSelector","Media","TABS","GlobalSearchContent","ChannelList","Links","Files","Music","Voice","CHAT_TABS","currentContent","LeftSearch","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","tabs","handleSwitchTab","tab","handleSearchDateSelect","TabList","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","payload","maxChats","selectCurrentLimit","SettingsFoldersChatsPicker","mode","selectedChatTypes","shouldHideChatTypes","onSelectedChatTypesChange","onSaveFilter","openLimitReachedModal","chatTypes","INCLUDED_CHAT_TYPES","EXCLUDED_CHAT_TYPES","shouldMinimize","isTouched","setIsTouched","handleItemClick","splice","handleChatTypeClick","newSelectedChatTypes","handleFilterChange","selectedType","typeKey","isMinimized","canClose","withChatType","SettingsFoldersChatFilters","dispatch","chatFilter","selectedChatIds","selectChatFilters","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","isChatList","newFilter","includeFilters","includedChatIds","excludeFilters","excludedChatIds","handleSelectedChatTypesChange","newFilters","ERROR_NO_TITLE","ERROR_NO_CHATS","invites","chatListCount","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","maxInviteLinks","maxChatLists","SettingsFoldersEdit","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","onSaveFolder","loadChatlistInvites","isCreating","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","includedChatTypes","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleCreateInviteClick","selectCanShareFolder","handleEditInviteClick","renderChats","visibleChatIds","leftChatsCount","clickHandler","chatType","renderChatType","ShowMoreButton","itemName","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","FoldersNew","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","SettingsFoldersMain","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","sortChatFolders","setState","orderedFolderIds","dragOrderIds","draggedIndex","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","getFolderDescriptionText","handleCreateFolderFromRecommended","handleDrag","translation","handleDragEnd","canCreateNewFolder","FoldersAll","isBlocked","isDragged","draggedTop","Draggable","onDragEnd","knobStyle","allowSelection","shareFolderScreen","pinnedChatIds","SettingsShareChatlist","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","handleRevoke","unlockedIds","partition","selectCanInviteToChat","isFirstRenderRef","prevUrl","handleClickDisabled","chatsCount","FoldersShare","withShare","onRevoke","onDisabledClick","isRoundCheckbox","SettingsFolders","currentScreen","shownScreen","onScreenSelect","openShareChatFolderModal","editChatFolder","handleReset","SettingsScreens","FoldersCreateFolder","FoldersEditFolder","FoldersEditFolderFromChatList","FoldersEditFolderInvites","FoldersIncludedChats","FoldersExcludedChats","saveState","newState","folderUpdate","handleSaveFolder","handleSaveFilter","handleEditFolder","handleAddIncludedChats","FoldersIncludedChatsFromChatList","handleAddExcludedChats","FoldersExcludedChatsFromChatList","handleShareFolder","noRequestNextScreen","handleOpenInvite","Folders","SettingsPasswordForm","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","SettingsPasscodeCongratulations","fullReset","STICKER_SIZE_PASSCODE","Congratulations","SettingsPasscodeEnabled","Lock","previewUrl","lockPreviewUrl","PasscodeChangePasscodeCurrent","PasscodeTurnOff","SettingsPasscodeStart","passcode","SettingsPasscode","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","handleStartWizard","PasscodeNewPasscode","handleNewPassword","PasscodeNewPasscodeConfirm","handleNewPasswordConfirm","PasscodeCongratulations","handleChangePasswordCurrent","currentPasscode","decryptSession","PasscodeChangePasscodeNew","handleChangePasswordNew","PasscodeChangePasscodeConfirm","handleTurnOff","Privacy","PasscodeDisabled","SettingsPasscodeForm","PasscodeEnabled","premiumSection","handleOpenPremiumModal","PremiumIcon","withGradient","big","shouldNewNonContactPeersRequirePremium","selectNewNoncontactPeersRequirePremium","canLimitNewMessagesWithoutPremium","canChange","PrivacyLockedOption","hidden","PremiumStatusItem","getSessionIcon","session","platform","device","deviceModel","systemVersion","activeSessions","byHash","SettingsActiveSession","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","headerButton","iconDevice","dateActive","box","appName","appVersion","ip","region","getLocation","note","actionHeader","actionName","SettingsActiveSessions","orderedHashes","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","activeWebSessions","SettingsActiveWebsite","terminateWebAuthorization","renderingBot","browser","SettingsActiveWebsites","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","clearHelp","avatar","StickerSetCard","handleCardClick","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","customEmojiSetIds","canPlayAnimatedEmojis","SettingsCustomEmoji","shouldSuggestCustomEmoji","stickerSettingsRef","handleStickerSetClick","handleSuggestCustomEmojiChange","customEmojiSets","SettingsDataStorage","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","language","doNotTranslate","SettingsDoNotTranslate","displayedOptions","setDisplayedOptions","otherLanguages","unselected","newDoNotTranslate","v","filteredDisplayedOptions","ManageUsernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","username","prevUsernameList","orderedUsernames","dragOrderUsernames","handleCopyUsername","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","usernameData","LINK_PREFIX_REGEX","runDebouncedForCheckUsername","UsernameInput","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","MIN_UPDATE_USERNAME_LENGTH","MAX_USERNAME_LENGTH","USERNAME_REGEX","test","handleUsernameChange","newUsername","isUsernameValid","success","readOnly","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","currentFirstName","currentLastName","currentUserFullInfo","currentAvatarHash","currentBio","bio","SettingsEditProfile","loadCurrentUser","updateProfile","firstEditableUsername","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","InProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","Complete","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","TextArea","maxLengthIndicator","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","renderPurchaseLink","shouldShowLoginCodeInChatList","shouldForceHttpTransport","shouldAllowHttpTransport","shouldCollectDebugLogs","shouldDebugExportedSenders","SettingsExperimental","isAutoUpdateEnabled","setIsAutoUpdateEnabled","electron","getIsAutoUpdateEnabled","handleDownloadLog","file","File","getDebugLogs","DEBUG_LOG_FILENAME","URL","createObjectURL","handleIsAutoUpdateEnabledChange","Experimental","IS_ELECTRON","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","SettingsGeneral","messageTextSize","messageSendKeyCombo","timeFormat","isMobileDevice","appearanceThemeOptions","keyboardSendOptions","handleMessageTextSizeChange","newSize","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","isTrayIconEnabled","setIsTrayIconEnabled","getIsTrayIconEnabled","handleIsTrayIconEnabledChange","GeneralChatBackground","IS_WINDOWS","WallpaperTile","wallpaper","localMediaHash","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","SettingsGeneralBackground","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","GeneralChatBackgroundColor","handleResetToDefault","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","isDragging","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","SettingsHeader","editedFolderId","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","callback","currentAmountRef","useMultiClick","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","EditProfile","General","QuickReaction","DataStorage","Language","DoNotTranslate","Stickers","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyForwarding","PrivacyVoiceMessages","PrivacyMessages","PrivacyGroupChats","PrivacyPhoneCall","PrivacyPhoneNumberAllowedContacts","PrivacyLastSeenAllowedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyBioAllowedContacts","PrivacyBirthdayAllowedContacts","PrivacyForwardingAllowedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyGroupChatsAllowedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayDeniedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsDeniedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PDeniedContacts","Performance","ActiveSessions","ActiveWebsites","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaNewPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaChangePasswordHint","TwoFaNewPasswordEmail","TwoFaRecoveryEmail","TwoFaNewPasswordEmailCode","TwoFaRecoveryEmailCode","TwoFaCongratulations","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","languages","canTranslate","canTranslateChats","SettingsLanguage","loadLanguages","loadAttachBots","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","canTranslateChatsEnabled","setLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","buildOptions","handleShouldTranslateChange","handleShouldTranslateChatsChange","handleShouldTranslateChatsClick","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","rightIcon","onClickLabel","loadingOption","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","sessionCount","SettingsMain","loadProfilePhotos","openSupportChat","openPremiumGiftingModal","isSupportDialogOpen","openSupportDialog","closeSupportDialog","handleOpenSupport","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","isInSettings","langName","FAQ_URL","PRIVACY_URL","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","SettingsNotifications","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","areNotificationsSupported","checkIfNotificationsSupported","areOfflineNotificationsSupported","checkIfOfflinePushFailed","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","selectPerformanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MID","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","prev","handleAnimationLevelChange","newLevel","performance","animationLevel","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","canDisplayChatInTitle","hasPasscode","blockedCount","totalCount","webAuthCount","canDisplayAutoarchiveSetting","canSetPasscode","selectCanSetPasscode","SettingsPrivacy","loadPrivacySettings","loadBlockedUsers","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","loadWebAuthorizations","handleArchiveAndMuteChange","handleChatInTitleChange","handleUpdateContentSettings","getVisibilityValue","blockCount","blockChatIds","allowCount","allowChatIds","total","exceptionString","lastSeen","profilePhoto","birthday","forwards","phoneCall","allowDisabledClick","voiceMessages","chatInvite","blockedIds","userSearch","localUserIds","BlockUserModal","setUserSearchQuery","availableContactIds","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","SettingsPrivacyBlockedUsers","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","userMainUsername","renderContact","getPrivacyKey","screen","PrivacyPhoneP2P","PrivacyAddByPhone","selectShouldHideReadMarks","SettingsPrivacyLastSeen","canShowHideReadTime","handleChangeShouldHideReadMarks","SettingsPrivacyPublicProfilePhoto","hasCurrentUserFullInfo","currentUserFallbackPhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","PrivacySubsection","isPremiumRequired","visibilityOptions","hasNobody","primaryExceptionLists","shouldShowDenied","shouldShowAllowed","prepareSubtitle","userIdsCount","chatIdsCount","allowedString","blockString","allowedContactsScreen","deniedContactsScreen","primaryPrivacy","secondaryPrivacy","addByPhone","phoneP2P","SettingsPrivacyVisibility","secondaryScreen","getCurrentPrivacySettings","SettingsPrivacyVisibilityExceptionList","isAllowList","setPrivacySettings","selectedContactIds","updatedIds","config","selectedReaction","defaultReaction","SettingsQuickReaction","setDefaultReaction","isInactive","addedSetIds","SettingsStickers","shouldSuggestStickers","shouldUpdateStickerSetOrder","handleSuggestStickerSetOrderChange","handleSuggestStickersChange","stickerSets","SettingsTwoFaCongratulations","STICKER_SIZE_TWO_FA","animatedEmoji","selectAnimatedEmoji","codeLength","twoFaSettings","waitingEmailCodeLength","SettingsTwoFaEmailCode","focusDelayTimeoutMs","setValue","handleInputChange","AnimatedIconFromSticker","SettingsTwoFaEnabled","SettingsTwoFaSkippableForm","shouldConfirm","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleSkip","handleSkipConfirm","SettingsTwoFaStart","SettingsTwoFa","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleNewPasswordHint","handleNewPasswordEmail","handleChangePasswordConfirm","handleChangePasswordHint","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaPassword","TRANSITION_RENDER_COUNT","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_BIO_SCREENS","PRIVACY_BIRTHDAY_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","Settings","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","isFromSettings","renderCurrentSection","isScreenActive","_isFrom","_currentKey","activeScreen","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","Main","SettingsGeneralBackgroundColor","SettingsPerformance","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","shouldWrap","withSwipeControl","ContactList","openNewContactDialog","isSearching","NewChatStep1","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","foundContactIds","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","NewChatStep2","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","memberFirstNames","generatedChatName","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","NewChat","onContentChange","newChatMemberIds","setNewChatMemberIds","NewChannelStep2","NewGroupStep2","isStepActive","NewChannelStep1","NewGroupStep1","ArchivedChats","isForumPanelOpen","archiveSettings","isStoryRibbonShown","onTopicSearch","onSettingsScreenSelect","onLeftColumnContentChange","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","shouldRenderStoryRibbon","storyRibbonClassNames","isStoryRibbonClosing","StoryToggler","canShow","folderType","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","idsToRemove","idsToAdd","CheckboxGroup","MuteDuration","muteUntilOption","setMuteUntilOption","Forever","updateChatMutedState","updateTopicMutedState","muteForOptions","OneHour","FourHours","EightHours","OneDay","ThreeDays","muteUntil","div","ALLOWED_QUOTE_ENTITIES","ApiMessageEntityTypes","Bold","Italic","Underline","Strike","Spoiler","getSelectionAsFormattedText","range","html","clonedSelection","cloneContents","commonAncestorContainer","nodeType","Node","ELEMENT_NODE","currentElement","tag","wrapHtmlWithMarkupTags","innerHTML","getSelectionAsHtml","entity","stripEntitiesForQuote","parseHtmlAsFormattedText","useModuleLoader","Bundles","Extra","getCopyLabel","hasSelection","shouldRenderShowWhen","canLoadReadDate","closeContextMenu","menuSeparatorSize","openPrivacySettingsNoticeModal","readDate","MenuSeparator","handleOpenModal","MessageContextMenu","isReactionPickerOpen","enabledReactions","maxUniqueReactions","anchor","targetHref","canSendNow","canReschedule","canReply","canQuote","canEdit","noReplies","canPin","canUnpin","canFaveSticker","canUnfaveSticker","canCopy","canSelect","canSaveGif","canRevote","canClosePoll","canShowOriginal","canSelectLanguage","repliesThreadInfo","canShowSeenBy","canShowReactionsCount","canShowReactionList","seenByRecentPeers","hasCustomEmoji","noTransition","isInSavedMessages","onReply","onOpenThread","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onCancelVote","onClosePoll","onShowSeenBy","onShowReactors","onToggleReaction","onCopyMessages","onAboutAds","onSponsoredHide","onSponsorInfo","onSponsoredReport","onReactionPickerOpen","onTranslate","onShowOriginal","onSelectLanguage","openCustomEmojiSets","scrollableRef","withReactions","isSponsoredMessage","areItemsHidden","hideItems","markIsReady","unmarkIsReady","isDesktop","seenByDatesCount","handleAfterCopy","handleOpenCustomEmojiSets","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","selectionParentNode","selectedMessageElement","checkMessageHasSelection","getMessageIdsForSelectedText","execCommand","clipboardText","shouldRenderAsHtml","copyHtmlToClipboard","getMessageTextWithSpoilers","getMessageCopyOptions","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","extraMarginTop","menuElMinWidth","withScroll","handleOpenMessageReactionPicker","bubbleStyle","ReactionSelector","allAvailableReactions","currentReactions","onShowMore","messagesCount","withPreventDefaultOnMouseDown","inline","withWrap","sponsorInfo","ReadTimeMenuItem","detectedLanguage","selectActiveDownloads","seenByExpiresAt","seenByMaxChatMembers","readDateExpiresAt","noOptions","isOwn","isOwnMessage","isMessageUnread","selectIsMessageUnread","isReadDateRestricted","isReadDateRestrictedByMe","isScheduled","isMessageLocal","hasTtl","hasMessageTtl","isChatGroup","membersCount","isAction","isActionMessage","areReactionsEmpty","canSeeList","canCopyNumber","customEmojiSetsInfo","selectMessageCustomEmojiSets","customEmojiSetsNotFiltered","translationRequestLanguage","hasTranslation","selectMessageTranslations","selectCanTranslateMessage","isChatTranslated","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","canScheduleUntilOnline","selectCanScheduleUntilOnline","isMessageTranslated","selectIsReactionPickerOpen","ContextMenuContainer","updateDraftReplyInfo","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","openReactorListModal","copyMessagesByIds","saveGif","cancelPollVote","closePoll","toggleReaction","showOriginalMessage","openChatLanguageModal","openMessageReactionPicker","loadOutboxReadDate","copyMessageLink","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isClosePollDialogOpen","openClosePollDialog","closeClosePollDialog","canQuoteSelection","setCanQuoteSelection","requestCalendar","calendar","useSchedule","uniqueReactors","PREVIEW_AVATAR_COUNT","msg","selectionRange","getRangeAt","collapsed","ancestor","TEXT_NODE","isSelectionRangeInsideMessage","selectionText","startOffset","endOffset","handleDelete","handleReport","closeMenu","closePinModal","handleReply","replyToMsgId","quoteText","handleOpenThread","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleCancelVote","handlePollClose","handleSelectMessage","childMessageIds","withShift","handleScheduledMessageSend","handleRescheduleMessage","scheduledAt","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleCopyMessages","handleCopyLink","shouldIncludeThread","shouldIncludeGrouped","handleCopyNumber","handleSaveGif","gif","handleToggleReaction","shouldAddToRecent","handleReactionPickerOpen","handleTranslate","handleShowOriginal","handleSelectLanguage","reportMessageIds","scheduledMaxDate","SponsoredMessageContextMenuContainer","onReportAd","showDialog","handleAboutAdsOpen","handleSponsoredHide","handleSponsorInfo","additionalInfo","handleReportSponsoredMessage","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isMessageThread","isCommentsInfo","fromChannelId","canSendStickers","shouldSchedule","selectShouldSchedule","StickerSetModal","prevStickerSet","renderingStickerSet","isAdded","isScheduleRequested","isPreloadedGlobally","suffix","renderHeader","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","CustomEmojiSetsModal","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","sets","teactFastList","customEmojiSet","setCard","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","canReportChat","currentChatId","currentThreadId","chatBot","REPLIES_USER_ID","userFullInfo","fullInfo","canGiftPremium","premiumGifts","canCreateTopic","isCreator","isUserRightBanned","getHasAdminRight","canEditTopic","getCanManageTopic","canManage","selectCanManage","selectCanTranslateChat","isTranslationDisabled","savedDialog","getIsSavedDialog","isTopic","isForumAsMessages","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","isChatInfoShown","isRightColumnShown","selectIsRightColumnShown","isBot","HeaderMenuContainer","withExtraActions","withForumActions","canStartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canViewBoosts","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","canShowBoostModal","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestMasterAndRequestCall","toggleStatistics","openBoostStatistics","openThreadWithInfo","openCreateTopicPanel","openEditTopicPanel","toggleManagement","togglePeerTranslations","setViewForumAsMessages","openBoostModal","shouldCloseFast","setShouldCloseFast","setIsMuteModalOpen","isViewGroupInfoShown","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleUnmuteClick","handleMuteClick","handleCreateTopicClick","handleEditClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftPremiumClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleBoostClick","handleEnableTranslations","handleSelectMessages","handleOpenAsMessages","handleBlock","handleUnblock","botButtons","cmd","deleteTitle","DeleteChatModal","isSavedDialog","runDebouncedForSearch","savedTag","selectCurrentTextSearch","savedTags","savedReactionTags","isHistoryCalendarOpen","searchTag","MobileSearchFooter","setLocalTextSearchQuery","setLocalTextSearchTag","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","loadSavedReactionTags","tagsRef","focusedIndex","setFocusedIndex","hasQueryData","visualViewport","mainEl","pageTop","blur","tags","hasTags","areTagsDisabled","handleMessageSearchQueryChange","newQuery","handleTagClick","handleUp","newFocusIndex","handleDown","handleCloseLocalTextSearch","SavedTagButton","withCount","isChosen","getDayStartAt","ReactionPickerLimited","isTouchScreen","sortReactions","allowed","pickerHeight","pickerWidth","gapWidth","itemsInRow","rowsCount","pickerMaxHeight","REACTION_SELECTOR_WIDTH","storyPeerId","sendAsMessage","areSomeReactionsAllowed","areCustomReactionsAllowed","areCustomAllowed","withCustomReactions","ReactionPicker","closeReactionPicker","renderedMessageId","renderedChatId","renderedStoryPeerId","renderedStoryId","storedPosition","renderingPosition","isDense","deltaX","FULL_PICKER_SHIFT_DELTA","handleToggleCustomReaction","handleStoryReactionSelect","isFree","customEmojiMessage","buildCustomEmojiHtml","isReaction","chosenOrder","backdropExcludedSelector","BLUR_CANVAS_SIZE","AttachmentModalItem","attachment","isSingle","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","filename","extension","getFileExtension","previewData","shouldSkipGrouping","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","findInViewport","selectorOrElements","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","isFullyVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","handleArrowKey","handleItemSelect","altKey","metaKey","shiftKey","isSelectionOutOfRange","onUp","onDown","onTab","MentionTooltip","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","keywords","customEmojiForEmoji","forEmoji","captionLimit","AttachmentModal","attachments","getHtml","editingMessage","canShowCustomSendMenu","isForMessage","shouldSuggestCompression","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","forceDarkTheme","onAttachmentsUpdate","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isEditing","isInAlbum","groupedId","notEditingFile","getAttachmentType","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","setShouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","removeAllSelections","isCustomSendMenuOpen","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleDisableSpoilers","handleToggleSpoiler","leftChars","leftCharsBeforeLimit","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","isBottomDividerShown","noBackdropClose","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","uniqueId","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","customEmojiPrefix","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","canSchedule","onSendSchedule","PollModal","isQuiz","shouldBeAnonymous","questionInputRef","optionsListRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","handleSolutionChange","focusInput","addNewOption","newOptions","requestNextMutation","behavior","handleCreate","isNoCorrectOptionError","answers","correct","questionTrimmed","substring","optionsTrimmed","o","summary","multipleChoice","quiz","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","noReplaceNewlines","EmojiButton","native","IS_PACKAGED_ELECTRON","BASE_URL","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","EmojiCategory","category","allEmojis","useOnIntersect","emojisPerRow","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","EmojiPicker","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","allCategories","themeCategories","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","GifButton","onUnsaveClick","withThumb","videoData","shouldRenderVideo","isVideoReady","handleUnsaveClick","handleContextDelete","preload","gifs","saved","GifPicker","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","favorite","chatStickerSetId","recentStickers","selectShouldLoopStickers","StickerPicker","loadRecentStickers","addRecentSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","existingAddedSetIds","shouldRenderContents","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleMouseMove","handleRemoveRecentSticker","CHAT_STICKER_SET_ID","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","GIFs","SYMBOL_MENU_TAB_ICONS","SymbolMenuFooter","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","isBackgroundTranslucent","SymbolMenu","isMessageComposer","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","recentEmojisRef","recentCustomEmojisRef","handleCustomEmojiSelect","canUpdateStickerSetsOrder","isFrom","mobileClassName","onMouseEnter","ChatCommand","withAvatar","freezeWhenClosed","ChatCommandTooltip","quickReplies","quickReplyMessages","self","sendQuickReply","handleSendCommand","handleSendQuickReply","quickReplyId","quickRepliesWithDescription","reply","topMessageId","shortcut","handleKeyboardSelect","selectedCommandIndex","isEmpty","BotCommandMenu","botCommand","StickerTooltip","prevStickers","displayedStickers","clearCustomEmojiForEmoji","ce","emojiButton","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","onSendWhenOnline","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","TEXT_FORMAT_BY_TAG_NAME","B","STRONG","I","EM","U","DEL","CODE","SPAN","fragmentEl","TextFormatter","anchorPosition","selectedRange","setSelectedRange","linkUrlInputRef","isLinkControlOpen","openLinkControl","closeLinkControl","setLinkUrl","isEditingLink","setIsEditingLink","inputClassName","setInputClassName","selectedTextFormats","setSelectedTextFormats","useVirtualBackdrop","selectedFormats","EDITABLE_INPUT_ID","textFormat","restoreSelection","removeAllRanges","addRange","updateSelectedRange","getSelectedText","shouldDropCustomEmoji","replaceChildren","INPUT_CUSTOM_EMOJI_SELECTOR","getSelectedElement","updateInputStyles","scrollWidth","getFormatButtonClassName","fKey","monospace","strikethrough","handleSpoilerText","spoiler","handleBoldText","handleItalicText","italic","handleUnderlineText","underline","handleStrikethroughText","handleMonospaceText","handleLinkUrlConfirm","formattedLinkUrl","encodeURI","u","m","getKeyFromEvent","linkUrlConfirmClassName","autoComplete","CustomEmojiButton","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","prevSelectedIndex","setItemVisible","BaseResult","thumbnailDataUrl","decoding","ArticleResult","inlineResult","webThumbnail","GifResult","_gif","MediaResult","isForGallery","StickerResult","STICKER_SIZE_INLINE_BOT_RESULT","InlineBotTooltip","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","handleSendPm","param","handleOpenWebview","isFromSwitchWebView","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","SendAsMenu","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","messagesById","RightSearch","handleSearchTextMessagesLocal","viewportResults","originalSender","ANONYMOUS_USER_ID","selectForwardedSender","senderPeer","hiddenForwardTitle","hiddenUserName","foundResult","isOnTop","preloadBackwards","renderSearchResult","teactOrderKey","LastMessageMeta","StickerSetResult","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","StickerSearch","loadFeaturedStickers","selectCurrentGifSearch","selectIsChatWithBot","canPostInChat","GifSearch","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","postStatistic","StatisticsRecentMessage","toggleMessageStatistics","StatisticsRecentPostMeta","toggleStoryStatistics","imgBlobUrl","withStorySolid","forceUnreadStorySolid","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","reactionsByEmotionGraph","storyInteractionsGraph","storyReactionsByEmotionGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","statistics","selectStatistics","dcId","statisticsDcId","storiesById","selectPeerStories","Statistics","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","isPercentage","ensureLovelyChart","zoomToken","create","zoomOutLabel","StatisticsOverview","recentPosts","msgId","StatisticsRecentStory","StatisticsMessagePublicForward","openChatByUsername","GRAPH_TITLES","viewsGraph","reactionsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","loadMessagePublicForwards","publicForwards","publicForwardsData","STATISTICS_PUBLIC_FORWARDS_LIMIT","currentStory","loadStoryStatistics","loadStoryPublicForwards","StatisticsStoryPublicForward","answer","voters","offsets","pollResults","PollAnswerResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","PollResults","getMessagePoll","resultsByOption","buildCollectionByKey","ICON_SIZE","createTopicPanel","CreateTopic","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","shouldCleanup","noLoopLimit","editTopicPanel","EditTopic","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","ERROR_NAME_MISSING","management","ManageBot","setBotInfo","uploadContactProfilePhoto","startBotFatherConversation","isFieldTouched","markFieldTouched","unmarkProfileTouched","isAvatarTouched","markAvatarTouched","unmarkAvatarTouched","currentName","setName","ManagementProgress","handleNameChange","trimmedName","handleChangeEditIntro","handleChangeEditCommands","handleChangeSettings","isSuggestRef","handleSelectAvatar","isSuggest","CHANNEL_TITLE_EMPTY","isSignaturesShown","canChangeInfo","canInvite","exportedInvites","ManageChannel","updateChat","toggleSignatures","closeManagement","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","currentTitle","currentAbout","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isRevoked","adminsCount","removedUsersCount","kickedMembers","handleClickEditType","ManagementScreens","ChatPrivacyType","handleClickDiscussion","Discussion","handleClickReactions","Reactions","handleClickAdministrators","ChatAdministrators","handleClickInvites","Invites","handleClickRequests","JoinRequests","handleSetPhoto","handleAboutChange","handleUpdateChannel","trimmedTitle","trimmedAbout","handleToggleSignatures","handleClickSubscribers","ChannelSubscribers","handleRemovedUsersClick","ChannelRemovedUsers","handleDeleteChannel","chatReactionsDescription","enabledLength","totalLength","isChannelPublic","formatInteger","joinRequests","ManageChatAdministrators","onChatMemberSelect","canAddNewAdmins","adminRights","addAdmins","adminMembers","isOwner","handleAdminMemberClick","promotedByUserId","ChatAdminRights","handleAddAdminClick","GroupAddAdmins","getMemberStatus","promotedByUser","selectManagement","maxPublicLinks","privateInviteLink","inviteLink","ManageChatPrivacyType","updatePublicLink","updatePrivateLink","toggleIsProtected","resetManagementError","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","shouldDisableUsernames","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","chatMembers","RemoveGroupUserModal","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","isAdmin","canDeleteMembers","removedMembers","ManageChatRemovedUsers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","bannedRights","forDiscussionIds","linkedChat","ManageDiscussion","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","Initial","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","DiscussionGroups","STICKER_SIZE_DISCUSSION_GROUPS","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","canEditForum","canBanUsers","isChannelsPremiumLimitReached","ManageGroup","togglePreHistoryHidden","deleteChat","toggleForum","isForumEnabled","setIsForumEnabled","isPublicGroup","isPreHistoryHiddenCheckboxRef","handleClickPermissions","GroupPermissions","handleUpdateGroup","handleClickMembers","GroupMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","handleDeleteGroup","isForForum","isPromotedByCurrentUser","isFormFullyDisabled","defaultRights","ManageGroupAdminRights","isNewAdmin","selectedUserId","updateChatAdmin","permissions","setPermissions","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedChatMember","selectedAdminMember","handlePermissionChange","handleSavePermissions","handleDismissAdmin","getControlIsDisabled","memberStatus","handleCustomTitleChange","changeInfo","blocking","postMessages","editMessages","postStories","editStories","deleteStories","banUsers","inviteUsers","pinMessages","manageCall","manageTopics","anonymous","areParticipantsHidden","hiddenMembersMinCount","canHideParticipants","ManageGroupMembers","noAdmins","toggleParticipantsHidden","deletingUserId","setDeletingUserId","usePeerStoriesPolling","shouldUseSearchResults","listedIds","ChatNewAdminRights","handleDeleteMembersModalClose","handleToggleParticipantsHidden","memberId","DeleteMemberModal","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","havePermissionChanged","setHavePermissionChanged","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","checkMedia","mediaPermissions","sendMedia","assign","embedLinks","sendPlain","sendMessages","ManageGroupPermissions","updateChatDefaultBannedRights","shouldDisablePermissionForPublicGroup","GroupRemovedUsers","handleAddExceptionClick","GroupUserPermissionsCreate","handleExceptionMemberClick","GroupUserPermissions","isMediaDropdownOpen","setIsMediaDropdownOpen","handleOpenMediaDropdown","handleDisabledClick","exceptionMembers","getMemberExceptions","getLangKeyForBannedRightKey","translatedString","sendPhotos","sendVideos","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","ManageGroupUserPermissions","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","ManageGroupUserPermissionsCreate","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","ManageInvite","editExportedChatInvite","exportChatInvite","setIsRequestNeeded","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","usageLimit","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","handleSaveClick","formatFullDate","n","inviteInfo","importers","requesters","ManageInviteInfo","loadChatInviteImporters","loadChatInviteRequesters","usage","adminId","handleCopyClicked","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","BULLET","inviteComparator","i1","i2","isPermanent","i1IsPermanent","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","ManageInvites","setEditingExportedInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","revokeInvite","askToRevoke","handleCreateNewClick","EditInvite","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","InviteInfo","deleteInvite","askToDelete","copyLink","prepareUsageText","requested","formatCountdown","getInviteIconClass","prepareContextActions","editInvite","Invite","STICKER_SIZE_INVITES","JoinRequest","hideChatJoinRequest","createClassNameBuilder","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","ManageJoinRequests","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","ManageReactions","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","reactionsOptions","handleSaveReactions","availableActiveReactions","handleReactionsOptionChange","handleReactionChange","local","personalPhoto","notPersonalPhoto","ManageUser","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","handleNotificationChange","handleDeleteContact","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","canSetPersonalPhoto","noEmojiStatus","withFullInfo","noPersonalPhoto","managementType","selectCurrentManagementType","Management","GroupRecentActions","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","defaultName","Checkout","invoice","prices","shippingPrices","checkoutInfo","totalPrice","onAcceptTos","needAddress","hasShippingOptions","savedCredentials","isPaymentFormUrl","botName","setPaymentStep","isInteractive","termsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","getWebDocumentHash","handleTipsClick","tips","handlePaymentMethodClick","step","PaymentStep","SavedPayments","PaymentInfo","handleShippingAddressClick","ShippingInfo","handleShippingMethodClick","Shipping","checkoutPicture","forceAspectRatio","checkoutTitle","checkoutDescription","priceInfo","renderPaymentItem","priceInfoItem","priceInfoItemTitle","tipsList","tip","tipsItem","tipsItem_active","invoiceInfo","renderCheckoutItem","customIcon","provider","langStringSplit","renderTosLink","tosCheckbox","priceInfoItemMain","checkoutInfoItemInfoTitle","checkoutInfoItemInfoData","ConfirmPayment","noRedirect","onPaymentFormSubmit","passwordHint","PasswordConfirm","onPasswordChange","clearPaymentError","cardName","shouldShowSubmit","onInputChange","useFocusAfterAnimation","animationDuration","CardInput","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","ExpiryInput","endsWith","formatCardExpiry","canSaveCredentials","needCardholderName","needCountry","needZip","selectCountryRef","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleCountryChange","handleBillingPostCodeChange","handleChangeSaveCredentials","Select","hasArrow","SavedPaymentCredentials","onNewCardClick","shippingOptions","handleShippingSelect","needEmail","needPhone","needName","phoneRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","savedInfo","invoiceContainer","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","inputInvoice","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","providerName","isProviderError","isNameRequested","isShippingAddressRequested","isPhoneRequested","isEmailRequested","shouldSendPhoneToProvider","shouldSendEmailToProvider","smartGlocalToken","stripeId","passwordValidUntil","validUntil","PaymentModal","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","setSmartGlocalCardInfo","paymentState","paymentDispatch","twoFaPassword","setTwoFaPassword","prevStep","prevRequestId","canRenderFooter","setStep","nextStep","field","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","sendForm","shippingOptionId","handlePaymentFormSubmit","credentials","validateRequest","requestInfo","getRequestInfo","sendCredentials","expiryMonth","expiryYear","zip","getCredentials","ConfirmPassword","handleModalClose","modalHeader","isSubmitDisabled","getIsSubmitDisabled","isRecurring","cleanupOnlyKey","currentStep","renderModalContent","renderError","optionId","receipt","totalAmount","credentialsTitle","ReceiptModal","fullAddress","InviteViaLinkModal","sendInviteMessages","closeInviteViaLinkModal","missingUsers","setSelectedMemberIds","unselectableIds","selectableIds","requirePremiumIds","regularIds","isRequiringPremiumToMessage","invitableWithPremiumIds","isRequiringPremiumToInvite","isEveryPremiumBlocksPm","topListPeers","handleSendInviteLink","canSendInviteLink","inviteSectionText","premiumSectionText","hasPremiumSection","hasSelectableSection","lockedUnselectedIds","lockedUnselectedSubtitle","isViewOnly","OneTimeMediaModal","closeOneTimeMediaModal","handlePlayVoice","closeBtnTitle","voice","OneTimeModal","isRound","RoundVideo","onStop","renderMedia","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","handleFirstMonkeyLoad","MonkeyClose","playSegment","MonkeyPeek","hardwareConcurrency","instances","IS_TEST","Worker","createConnector"],"sourceRoot":""}