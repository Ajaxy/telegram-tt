{"version":3,"file":"6708.62232e3759fa4a0c14aa.js","mappings":"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","sources":["webpack://telegram-t/./src/lib/rlottie/RLottie.ts","webpack://telegram-t/./src/util/PostMessageConnector.ts","webpack://telegram-t/./src/util/cycleRestrict.ts","webpack://telegram-t/./src/util/launchMediaWorkers.ts"],"sourcesContent":["import { animate } from '../../util/animation';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport Deferred from '../../util/Deferred';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\nimport {\n  IS_ANDROID, IS_IOS, IS_SAFARI,\n} from '../../util/windowEnvironment';\nimport { requestMeasure, requestMutation } from '../fasterdom/fasterdom';\n\ninterface Params {\n  size: number;\n  noLoop?: boolean;\n  quality?: number;\n  isLowPriority?: boolean;\n  coords?: { x: number; y: number };\n}\n\nconst WAITING = Symbol('WAITING');\ntype Frame =\n  undefined\n  | typeof WAITING\n  | ImageBitmap;\n\nconst HIGH_PRIORITY_QUALITY = (IS_ANDROID || IS_IOS) ? 0.75 : 1;\nconst LOW_PRIORITY_QUALITY = IS_ANDROID ? 0.5 : 0.75;\nconst LOW_PRIORITY_QUALITY_SIZE_THRESHOLD = 24;\nconst HIGH_PRIORITY_CACHE_MODULO = IS_SAFARI ? 2 : 4;\nconst LOW_PRIORITY_CACHE_MODULO = 0;\nconst CANVAS_CLASS = 'rlottie-canvas';\n\nconst workers = launchMediaWorkers().map(({ connector }) => connector);\nconst instancesByRenderId = new Map<string, RLottie>();\n\nconst PENDING_CANVAS_RESIZES = new WeakMap<HTMLCanvasElement, Promise<void>>();\n\nlet lastWorkerIndex = -1;\n\nclass RLottie {\n  // Config\n\n  private views = new Map<string, {\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n    isLoaded?: boolean;\n    isPaused?: boolean;\n    isSharedCanvas?: boolean;\n    coords?: Params['coords'];\n    onLoad?: NoneToVoidFunction;\n  }>();\n\n  private imgSize!: number;\n\n  private imageData!: ImageData;\n\n  private msPerFrame = 1000 / 60;\n\n  private reduceFactor = 1;\n\n  private cacheModulo!: number;\n\n  private workerIndex!: number;\n\n  private frames: Frame[] = [];\n\n  private framesCount?: number;\n\n  // State\n\n  private isAnimating = false;\n\n  private isWaiting = true;\n\n  private isEnded = false;\n\n  private isDestroyed = false;\n\n  private isRendererInited = false;\n\n  private approxFrameIndex = 0;\n\n  private prevFrameIndex = -1;\n\n  private stopFrameIndex? = 0;\n\n  private speed = 1;\n\n  private direction: 1 | -1 = 1;\n\n  private lastRenderAt?: number;\n\n  static init(...args: ConstructorParameters<typeof RLottie>) {\n    const [\n      , canvas,\n      renderId,\n      params,\n      viewId = generateUniqueId(), ,\n      onLoad,\n    ] = args;\n    let instance = instancesByRenderId.get(renderId);\n\n    if (!instance) {\n      // eslint-disable-next-line prefer-rest-params\n      instance = new RLottie(...args);\n      instancesByRenderId.set(renderId, instance);\n    } else {\n      instance.addView(viewId, canvas, onLoad, params?.coords);\n    }\n\n    return instance;\n  }\n\n  constructor(\n    private tgsUrl: string,\n    private container: HTMLDivElement | HTMLCanvasElement,\n    private renderId: string,\n    private params: Params,\n    viewId: string = generateUniqueId(),\n    private customColor?: [number, number, number],\n    private onLoad?: NoneToVoidFunction | undefined,\n    private onEnded?: (isDestroyed?: boolean) => void,\n    private onLoop?: () => void,\n  ) {\n    this.addView(viewId, container, onLoad, params.coords);\n    this.initConfig();\n    this.initRenderer();\n  }\n\n  public removeView(viewId: string) {\n    const {\n      canvas, ctx, isSharedCanvas, coords,\n    } = this.views.get(viewId)!;\n\n    if (isSharedCanvas) {\n      ctx.clearRect(coords!.x, coords!.y, this.imgSize, this.imgSize);\n    } else {\n      canvas.remove();\n    }\n\n    this.views.delete(viewId);\n\n    if (!this.views.size) {\n      this.destroy();\n    }\n  }\n\n  isPlaying() {\n    return this.isAnimating || this.isWaiting;\n  }\n\n  play(forceRestart = false, viewId?: string) {\n    if (viewId) {\n      this.views.get(viewId)!.isPaused = false;\n    }\n\n    if (this.isEnded && forceRestart) {\n      this.approxFrameIndex = Math.floor(0);\n    }\n\n    this.stopFrameIndex = undefined;\n    this.direction = 1;\n    this.doPlay();\n  }\n\n  pause(viewId?: string) {\n    this.lastRenderAt = undefined;\n\n    if (viewId) {\n      this.views.get(viewId)!.isPaused = true;\n\n      const areAllContainersPaused = Array.from(this.views.values()).every(({ isPaused }) => isPaused);\n      if (!areAllContainersPaused) {\n        return;\n      }\n    }\n\n    if (this.isWaiting) {\n      this.stopFrameIndex = this.approxFrameIndex;\n    } else {\n      this.isAnimating = false;\n    }\n\n    if (!this.params.isLowPriority) {\n      this.frames = this.frames.map((frame, i) => {\n        if (i === this.prevFrameIndex) {\n          return frame;\n        } else {\n          if (frame && frame !== WAITING) {\n            frame.close();\n          }\n\n          return undefined;\n        }\n      });\n    }\n  }\n\n  playSegment([startFrameIndex, stopFrameIndex]: [number, number], forceRestart = false, viewId?: string) {\n    if (viewId) {\n      this.views.get(viewId)!.isPaused = false;\n    }\n\n    const frameIndex = Math.round(this.approxFrameIndex);\n    this.stopFrameIndex = Math.floor(stopFrameIndex / this.reduceFactor);\n    if (frameIndex !== stopFrameIndex || forceRestart) {\n      this.approxFrameIndex = Math.floor(startFrameIndex / this.reduceFactor);\n    }\n    this.direction = startFrameIndex < stopFrameIndex ? 1 : -1;\n\n    this.doPlay();\n  }\n\n  setSpeed(speed: number) {\n    this.speed = speed;\n  }\n\n  setNoLoop(noLoop?: boolean) {\n    this.params.noLoop = noLoop;\n  }\n\n  async setSharedCanvasCoords(viewId: string, newCoords: Params['coords']) {\n    const containerInfo = this.views.get(viewId)!;\n    const {\n      canvas, ctx,\n    } = containerInfo;\n\n    const isCanvasDirty = !canvas.dataset.isJustCleaned || canvas.dataset.isJustCleaned === 'false';\n\n    if (!isCanvasDirty) {\n      await PENDING_CANVAS_RESIZES.get(canvas);\n    }\n\n    let [canvasWidth, canvasHeight] = [canvas.width, canvas.height];\n\n    if (isCanvasDirty) {\n      const sizeFactor = this.calcSizeFactor();\n      ([canvasWidth, canvasHeight] = ensureCanvasSize(canvas, sizeFactor));\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      canvas.dataset.isJustCleaned = 'true';\n      requestMeasure(() => {\n        canvas.dataset.isJustCleaned = 'false';\n      });\n    }\n\n    containerInfo.coords = {\n      x: Math.round((newCoords?.x || 0) * canvasWidth),\n      y: Math.round((newCoords?.y || 0) * canvasHeight),\n    };\n\n    const frame = this.getFrame(this.prevFrameIndex) || this.getFrame(Math.round(this.approxFrameIndex));\n\n    if (frame && frame !== WAITING) {\n      ctx.drawImage(frame, containerInfo.coords!.x, containerInfo.coords!.y);\n    }\n  }\n\n  private addView(\n    viewId: string,\n    container: HTMLDivElement | HTMLCanvasElement,\n    onLoad?: NoneToVoidFunction,\n    coords?: Params['coords'],\n  ) {\n    const sizeFactor = this.calcSizeFactor();\n\n    let imgSize: number;\n\n    if (container instanceof HTMLDivElement) {\n      if (!(container.parentNode instanceof HTMLElement)) {\n        throw new Error('[RLottie] Container is not mounted');\n      }\n\n      const { size } = this.params;\n\n      imgSize = Math.round(size * sizeFactor);\n\n      if (!this.imgSize) {\n        this.imgSize = imgSize;\n        this.imageData = new ImageData(imgSize, imgSize);\n      }\n\n      requestMutation(() => {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d')!;\n\n        canvas.classList.add(CANVAS_CLASS);\n\n        canvas.style.width = `${size}px`;\n        canvas.style.height = `${size}px`;\n\n        canvas.width = imgSize;\n        canvas.height = imgSize;\n\n        container.appendChild(canvas);\n\n        this.views.set(viewId, {\n          canvas, ctx, onLoad,\n        });\n      });\n    } else {\n      if (!container.isConnected) {\n        throw new Error('[RLottie] Shared canvas is not mounted');\n      }\n\n      const canvas = container;\n      const ctx = canvas.getContext('2d')!;\n\n      imgSize = Math.round(this.params.size * sizeFactor);\n\n      if (!this.imgSize) {\n        this.imgSize = imgSize;\n        this.imageData = new ImageData(imgSize, imgSize);\n      }\n\n      const [canvasWidth, canvasHeight] = ensureCanvasSize(canvas, sizeFactor);\n\n      this.views.set(viewId, {\n        canvas,\n        ctx,\n        isSharedCanvas: true,\n        coords: {\n          x: Math.round(coords!.x * canvasWidth),\n          y: Math.round(coords!.y * canvasHeight),\n        },\n        onLoad,\n      });\n    }\n\n    if (this.isRendererInited) {\n      this.doPlay();\n    }\n  }\n\n  private calcSizeFactor() {\n    const {\n      size,\n      isLowPriority,\n      // Reduced quality only looks acceptable on big enough images\n      quality = isLowPriority && (!size || size > LOW_PRIORITY_QUALITY_SIZE_THRESHOLD)\n        ? LOW_PRIORITY_QUALITY : HIGH_PRIORITY_QUALITY,\n    } = this.params;\n\n    // Reduced quality only looks acceptable on high DPR screens\n    return Math.max(window.devicePixelRatio * quality, 1);\n  }\n\n  private destroy() {\n    this.isDestroyed = true;\n    this.pause();\n    this.clearCache();\n    this.destroyRenderer();\n\n    instancesByRenderId.delete(this.renderId);\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      if (frame && frame !== WAITING) {\n        frame.close();\n      }\n    });\n\n    // Help GC\n    this.imageData = undefined as any;\n    this.frames = [];\n  }\n\n  private initConfig() {\n    const { isLowPriority } = this.params;\n\n    this.cacheModulo = isLowPriority ? LOW_PRIORITY_CACHE_MODULO : HIGH_PRIORITY_CACHE_MODULO;\n  }\n\n  setColor(newColor: [number, number, number] | undefined) {\n    this.customColor = newColor;\n  }\n\n  private initRenderer() {\n    this.workerIndex = cycleRestrict(MAX_WORKERS, ++lastWorkerIndex);\n\n    workers[this.workerIndex].request({\n      name: 'rlottie:init',\n      args: [\n        this.renderId,\n        this.tgsUrl,\n        this.imgSize,\n        this.params.isLowPriority || false,\n        this.customColor,\n        this.onRendererInit.bind(this),\n      ],\n    });\n  }\n\n  private destroyRenderer() {\n    workers[this.workerIndex].request({\n      name: 'rlottie:destroy',\n      args: [this.renderId],\n    });\n  }\n\n  private onRendererInit(reduceFactor: number, msPerFrame: number, framesCount: number) {\n    this.isRendererInited = true;\n    this.reduceFactor = reduceFactor;\n    this.msPerFrame = msPerFrame;\n    this.framesCount = framesCount;\n\n    if (this.isWaiting) {\n      this.doPlay();\n    }\n  }\n\n  changeData(tgsUrl: string) {\n    this.pause();\n    this.tgsUrl = tgsUrl;\n    this.initConfig();\n\n    workers[this.workerIndex].request({\n      name: 'rlottie:changeData',\n      args: [\n        this.renderId,\n        this.tgsUrl,\n        this.params.isLowPriority || false,\n        this.onChangeData.bind(this),\n      ],\n    });\n  }\n\n  private onChangeData(reduceFactor: number, msPerFrame: number, framesCount: number) {\n    this.reduceFactor = reduceFactor;\n    this.msPerFrame = msPerFrame;\n    this.framesCount = framesCount;\n    this.isWaiting = false;\n    this.isAnimating = false;\n\n    this.doPlay();\n  }\n\n  private doPlay() {\n    if (!this.framesCount) {\n      return;\n    }\n\n    if (this.isDestroyed) {\n      return;\n    }\n\n    if (this.isAnimating) {\n      return;\n    }\n\n    if (!this.isWaiting) {\n      this.lastRenderAt = undefined;\n    }\n\n    this.isEnded = false;\n    this.isAnimating = true;\n    this.isWaiting = false;\n\n    animate(() => {\n      if (this.isDestroyed) {\n        return false;\n      }\n\n      // Paused from outside\n      if (!this.isAnimating) {\n        const areAllLoaded = Array.from(this.views.values()).every(({ isLoaded }) => isLoaded);\n        if (areAllLoaded) {\n          return false;\n        }\n      }\n\n      const frameIndex = Math.round(this.approxFrameIndex);\n      const frame = this.getFrame(frameIndex);\n      if (!frame || frame === WAITING) {\n        if (!frame) {\n          this.requestFrame(frameIndex);\n        }\n\n        this.isAnimating = false;\n        this.isWaiting = true;\n        return false;\n      }\n\n      if (this.cacheModulo && frameIndex % this.cacheModulo === 0) {\n        this.cleanupPrevFrame(frameIndex);\n      }\n\n      if (frameIndex !== this.prevFrameIndex) {\n        this.views.forEach((containerData) => {\n          const {\n            ctx, isLoaded, isPaused, coords: { x, y } = {}, onLoad,\n          } = containerData;\n\n          if (!isLoaded || !isPaused) {\n            ctx.clearRect(x || 0, y || 0, this.imgSize, this.imgSize);\n            ctx.drawImage(frame, x || 0, y || 0);\n          }\n\n          if (!isLoaded) {\n            containerData.isLoaded = true;\n            onLoad?.();\n          }\n        });\n\n        this.prevFrameIndex = frameIndex;\n      }\n\n      const now = Date.now();\n      const currentSpeed = this.lastRenderAt ? this.msPerFrame / (now - this.lastRenderAt) : 1;\n      const delta = (this.direction * this.speed) / currentSpeed;\n      const expectedNextFrameIndex = Math.round(this.approxFrameIndex + delta);\n\n      this.lastRenderAt = now;\n\n      // Forward animation finished\n      if (delta > 0 && (frameIndex === this.framesCount! - 1 || expectedNextFrameIndex > this.framesCount! - 1)) {\n        if (this.params.noLoop) {\n          this.isAnimating = false;\n          this.isEnded = true;\n          this.onEnded?.();\n          return false;\n        }\n        this.onLoop?.();\n\n        this.approxFrameIndex = 0;\n\n        // Backward animation finished\n      } else if (delta < 0 && (frameIndex === 0 || expectedNextFrameIndex < 0)) {\n        if (this.params.noLoop) {\n          this.isAnimating = false;\n          this.isEnded = true;\n          this.onEnded?.();\n          return false;\n        }\n        this.onLoop?.();\n\n        this.approxFrameIndex = this.framesCount! - 1;\n\n        // Stop frame reached\n      } else if (\n        this.stopFrameIndex !== undefined\n        && (frameIndex === this.stopFrameIndex\n          || (\n            (delta > 0 && expectedNextFrameIndex > this.stopFrameIndex)\n            || (delta < 0 && expectedNextFrameIndex < this.stopFrameIndex)\n          ))\n      ) {\n        this.stopFrameIndex = undefined;\n        this.isAnimating = false;\n        return false;\n\n        // Preparing next frame\n      } else {\n        this.approxFrameIndex += delta;\n      }\n\n      const nextFrameIndex = Math.round(this.approxFrameIndex);\n\n      if (!this.getFrame(nextFrameIndex)) {\n        this.requestFrame(nextFrameIndex);\n        this.isWaiting = true;\n        this.isAnimating = false;\n        return false;\n      }\n\n      return true;\n    }, requestMutation);\n  }\n\n  private getFrame(frameIndex: number) {\n    return this.frames[frameIndex];\n  }\n\n  private requestFrame(frameIndex: number) {\n    this.frames[frameIndex] = WAITING;\n\n    workers[this.workerIndex].request({\n      name: 'rlottie:renderFrames',\n      args: [this.renderId, frameIndex, this.onFrameLoad.bind(this)],\n    });\n  }\n\n  private cleanupPrevFrame(frameIndex: number) {\n    if (this.framesCount! < 3) {\n      return;\n    }\n\n    const prevFrameIndex = cycleRestrict(this.framesCount!, frameIndex - 1);\n    this.frames[prevFrameIndex] = undefined;\n  }\n\n  private onFrameLoad(frameIndex: number, imageBitmap: ImageBitmap) {\n    if (this.frames[frameIndex] !== WAITING) {\n      return;\n    }\n\n    this.frames[frameIndex] = imageBitmap;\n\n    if (this.isWaiting) {\n      this.doPlay();\n    }\n  }\n}\n\nfunction ensureCanvasSize(canvas: HTMLCanvasElement, sizeFactor: number) {\n  const expectedWidth = Math.round(canvas.offsetWidth * sizeFactor);\n  const expectedHeight = Math.round(canvas.offsetHeight * sizeFactor);\n\n  if (canvas.width !== expectedWidth || canvas.height !== expectedHeight) {\n    const deferred = new Deferred<void>();\n    PENDING_CANVAS_RESIZES.set(canvas, deferred.promise);\n    requestMutation(() => {\n      canvas.width = expectedWidth;\n      canvas.height = expectedHeight;\n      deferred.resolve();\n    });\n  }\n\n  return [expectedWidth, expectedHeight];\n}\n\nexport default RLottie;\n","import generateUniqueId from './generateUniqueId';\nimport { throttleWithTickEnd } from './schedulers';\n\nexport interface CancellableCallback {\n  (\n    ...args: any[]\n  ): void;\n\n  isCanceled?: boolean;\n}\n\ntype InitPayload = {\n  type: 'init';\n  messageId?: string;\n  args: any;\n};\n\ntype CallMethodPayload = {\n  type: 'callMethod';\n  messageId?: string;\n  name: string;\n  args: any;\n  withCallback?: boolean;\n};\n\ntype CancelProgressPayload = {\n  type: 'cancelProgress';\n  messageId: string;\n};\n\nexport type OriginPayload =\n  InitPayload\n  | CallMethodPayload\n  | CancelProgressPayload;\n\nexport type OriginMessageData = {\n  channel?: string;\n  payloads: OriginPayload[];\n};\n\nexport interface OriginMessageEvent {\n  data: OriginMessageData;\n}\n\nexport type ApiUpdate =\n  { type: string }\n  & any;\n\nexport type WorkerPayload =\n  {\n    channel?: string;\n    type: 'update';\n    update: ApiUpdate;\n  }\n  |\n  {\n    channel?: string;\n    type: 'methodResponse';\n    messageId: string;\n    response?: any;\n    error?: { message: string };\n  }\n  |\n  {\n    channel?: string;\n    type: 'methodCallback';\n    messageId: string;\n    callbackArgs: any[];\n  }\n  |\n  {\n    channel?: string;\n    type: 'unhandledError';\n    error?: { message: string };\n  };\n\nexport type WorkerMessageData = {\n  channel?: string;\n  payloads: WorkerPayload[];\n};\n\nexport interface WorkerMessageEvent {\n  data: WorkerMessageData;\n}\n\ninterface RequestState {\n  messageId: string;\n  resolve: Function;\n  reject: Function;\n  callback: AnyToVoidFunction;\n}\n\ntype InputRequestTypes = Record<string, AnyFunction>;\n\ntype Values<T> = T[keyof T];\nexport type RequestTypes<T extends InputRequestTypes> = Values<{\n  [Name in keyof (T)]: {\n    name: Name & string;\n    args: Parameters<T[Name]>;\n    transferables?: Transferable[];\n  }\n}>;\n\nclass ConnectorClass<T extends InputRequestTypes> {\n  private requestStates = new Map<string, RequestState>();\n\n  private requestStatesByCallback = new Map<AnyToVoidFunction, RequestState>();\n\n  private pendingPayloads: OriginPayload[] = [];\n\n  private pendingTransferables: Transferable[] = [];\n\n  constructor(\n    public target: Worker,\n    private onUpdate?: (update: ApiUpdate) => void,\n    private channel?: string,\n  ) {\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  public destroy() {\n  }\n\n  init(...args: any[]) {\n    this.postMessageOnTickEnd({\n      type: 'init',\n      args,\n    });\n  }\n\n  request(messageData: RequestTypes<T>) {\n    const { requestStates, requestStatesByCallback } = this;\n    const { transferables, ...restMessageData } = messageData;\n\n    const messageId = generateUniqueId();\n    const payload: CallMethodPayload = {\n      type: 'callMethod',\n      messageId,\n      ...restMessageData,\n    };\n\n    const requestState = { messageId } as RequestState;\n\n    // Re-wrap type because of `postMessage`\n    const promise: Promise<any> = new Promise((resolve, reject) => {\n      Object.assign(requestState, { resolve, reject });\n    });\n\n    if (typeof payload.args[payload.args.length - 1] === 'function') {\n      payload.withCallback = true;\n\n      const callback = payload.args.pop() as AnyToVoidFunction;\n      requestState.callback = callback;\n      requestStatesByCallback.set(callback, requestState);\n    }\n\n    requestStates.set(messageId, requestState);\n    promise\n      .catch(() => undefined)\n      .finally(() => {\n        requestStates.delete(messageId);\n\n        if (requestState.callback) {\n          requestStatesByCallback.delete(requestState.callback);\n        }\n      });\n\n    this.postMessageOnTickEnd(payload, transferables);\n\n    return promise;\n  }\n\n  cancelCallback(progressCallback: CancellableCallback) {\n    progressCallback.isCanceled = true;\n\n    const { messageId } = this.requestStatesByCallback.get(progressCallback) || {};\n    if (!messageId) {\n      return;\n    }\n\n    this.postMessageOnTickEnd({\n      type: 'cancelProgress',\n      messageId,\n    });\n  }\n\n  onMessage(data: WorkerMessageData) {\n    const { requestStates, channel } = this;\n    if (data.channel !== channel) {\n      return;\n    }\n\n    data.payloads.forEach((payload) => {\n      if (payload.type === 'update' && this.onUpdate) {\n        this.onUpdate(payload.update);\n      }\n      if (payload.type === 'methodResponse') {\n        const requestState = requestStates.get(payload.messageId);\n        if (requestState) {\n          if (payload.error) {\n            requestState.reject(payload.error);\n          } else {\n            requestState.resolve(payload.response);\n          }\n        }\n      } else if (payload.type === 'methodCallback') {\n        const requestState = requestStates.get(payload.messageId);\n        requestState?.callback?.(...payload.callbackArgs);\n      } else if (payload.type === 'unhandledError') {\n        throw new Error(payload.error?.message);\n      }\n    });\n  }\n\n  private postMessageOnTickEnd(payload: OriginPayload, transferables?: Transferable[]) {\n    this.pendingPayloads.push(payload);\n\n    if (transferables) {\n      this.pendingTransferables.push(...transferables);\n    }\n\n    this.postMessagesOnTickEnd();\n  }\n\n  private postMessagesOnTickEnd = throttleWithTickEnd(() => {\n    const { channel } = this;\n    const payloads = this.pendingPayloads;\n    const transferables = this.pendingTransferables;\n\n    this.pendingPayloads = [];\n    this.pendingTransferables = [];\n\n    this.target.postMessage({ channel, payloads }, transferables);\n  });\n}\n\nexport function createConnector<T extends InputRequestTypes>(\n  worker: Worker,\n  onUpdate?: (update: ApiUpdate) => void,\n  channel?: string,\n) {\n  const connector = new ConnectorClass<T>(worker, onUpdate, channel);\n\n  function handleMessage({ data }: WorkerMessageEvent) {\n    connector.onMessage(data);\n  }\n\n  worker.addEventListener('message', handleMessage);\n\n  connector.destroy = () => {\n    worker.removeEventListener('message', handleMessage);\n  };\n\n  return connector;\n}\n\nexport type Connector<T extends InputRequestTypes = InputRequestTypes> = ReturnType<typeof createConnector<T>>;\n","export default function cycleRestrict(length: number, index: number) {\n  return index - Math.floor(index / length) * length;\n}\n","import type { MediaWorkerApi } from '../lib/mediaWorker/index.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TEST } from '../config';\n\nimport { createConnector } from './PostMessageConnector';\n\nexport const MAX_WORKERS = Math.min(navigator.hardwareConcurrency || 4, 4);\n\nlet instances: {\n  worker: Worker;\n  connector: Connector<MediaWorkerApi>;\n}[] | undefined;\n\nexport default function launchMediaWorkers() {\n  if (IS_TEST) return [];\n  if (!instances) {\n    instances = new Array(MAX_WORKERS).fill(undefined).map(\n      () => {\n        const worker = new Worker(new URL('../lib/mediaWorker/index.worker.ts', import.meta.url));\n        const connector = createConnector<MediaWorkerApi>(worker, undefined, 'media');\n        return { worker, connector };\n      },\n    );\n  }\n\n  return instances;\n}\n\nexport function requestMediaWorker(payload: Parameters<Connector<MediaWorkerApi>['request']>[0], index: number) {\n  return launchMediaWorkers()[index].connector.request(payload);\n}\n"],"names":["WAITING","Symbol","HIGH_PRIORITY_QUALITY","IS_ANDROID","IS_IOS","LOW_PRIORITY_QUALITY","LOW_PRIORITY_QUALITY_SIZE_THRESHOLD","HIGH_PRIORITY_CACHE_MODULO","IS_SAFARI","workers","launchMediaWorkers","map","connector","instancesByRenderId","Map","PENDING_CANVAS_RESIZES","WeakMap","lastWorkerIndex","RLottie","init","args","canvas","renderId","params","viewId","generateUniqueId","onLoad","instance","get","addView","coords","set","constructor","tgsUrl","container","customColor","onEnded","onLoop","_defineProperty","this","initConfig","initRenderer","removeView","ctx","isSharedCanvas","views","clearRect","x","y","imgSize","remove","delete","size","destroy","isPlaying","isAnimating","isWaiting","play","forceRestart","isPaused","isEnded","approxFrameIndex","Math","floor","stopFrameIndex","undefined","direction","doPlay","pause","lastRenderAt","Array","from","values","every","isLowPriority","frames","frame","i","prevFrameIndex","close","playSegment","startFrameIndex","frameIndex","round","reduceFactor","setSpeed","speed","setNoLoop","noLoop","setSharedCanvasCoords","newCoords","containerInfo","isCanvasDirty","dataset","isJustCleaned","canvasWidth","canvasHeight","width","height","sizeFactor","calcSizeFactor","ensureCanvasSize","requestMeasure","getFrame","drawImage","HTMLDivElement","parentNode","HTMLElement","Error","imageData","ImageData","requestMutation","document","createElement","getContext","classList","add","style","appendChild","isConnected","isRendererInited","quality","max","window","devicePixelRatio","isDestroyed","clearCache","destroyRenderer","forEach","cacheModulo","setColor","newColor","workerIndex","cycleRestrict","MAX_WORKERS","request","name","onRendererInit","bind","msPerFrame","framesCount","changeData","onChangeData","animate","isLoaded","requestFrame","cleanupPrevFrame","containerData","now","Date","currentSpeed","delta","expectedNextFrameIndex","nextFrameIndex","onFrameLoad","imageBitmap","expectedWidth","offsetWidth","expectedHeight","offsetHeight","deferred","Deferred","promise","resolve","ConnectorClass","target","onUpdate","channel","throttleWithTickEnd","payloads","pendingPayloads","transferables","pendingTransferables","postMessage","postMessageOnTickEnd","type","messageData","requestStates","requestStatesByCallback","restMessageData","messageId","payload","requestState","Promise","reject","Object","assign","length","withCallback","callback","pop","catch","finally","cancelCallback","progressCallback","isCanceled","onMessage","data","update","error","response","callbackArgs","message","push","postMessagesOnTickEnd","createConnector","worker","handleMessage","addEventListener","removeEventListener","index","min","navigator","hardwareConcurrency","instances","IS_TEST","fill","Worker","URL","requestMediaWorker"],"sourceRoot":""}