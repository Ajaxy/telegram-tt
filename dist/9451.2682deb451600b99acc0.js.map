{"version":3,"file":"9451.2682deb451600b99acc0.js","mappings":"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","sources":["webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.module.scss?22c9","webpack://telegram-t/./src/components/modals/stars/StarTopupOptionList.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/modals/common/TableAboutModal.tsx","webpack://telegram-t/./src/components/modals/common/TableAboutModal.module.scss?0459","webpack://telegram-t/./src/components/common/pickers/PickerModal.tsx","webpack://telegram-t/./src/components/common/pickers/PickerModal.module.scss?7af2","webpack://telegram-t/./src/components/modals/common/TableInfoModal.module.scss?4f33","webpack://telegram-t/./src/components/modals/common/TableInfoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/helpers/getViewableMedia.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/usePictureInPicture.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useMediaProps.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/common/ReportAvatarModal.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/useZoomChangeSignal.ts","webpack://telegram-t/./src/components/common/DeleteProfilePhotoModal.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/hooks/useSignalRef.ts","webpack://telegram-t/./src/components/mediaViewer/hooks/useControlsSignal.ts","webpack://telegram-t/./src/hooks/useCurrentTimeSignal.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/components/mediaViewer/hooks/useVideoWaitingSignal.ts","webpack://telegram-t/./src/lib/video-preview/VideoPreview.ts","webpack://telegram-t/./src/components/mediaViewer/SeekLine.module.scss?dc47","webpack://telegram-t/./src/components/mediaViewer/SeekLine.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/story/StoryViewer.module.scss?5f32","webpack://telegram-t/./src/components/story/helpers/ghostAnimation.ts","webpack://telegram-t/./src/components/story/helpers/dimensions.ts","webpack://telegram-t/./src/components/story/hooks/useSlideSizes.ts","webpack://telegram-t/./src/components/story/hooks/useStoryProps.ts","webpack://telegram-t/./src/components/story/StealthModeModal.module.scss?40cf","webpack://telegram-t/./src/components/story/StealthModeModal.tsx","webpack://telegram-t/./src/components/story/StoryDeleteConfirmModal.tsx","webpack://telegram-t/./src/components/story/privacy/AllowDenyList.tsx","webpack://telegram-t/./src/components/story/privacy/CloseFriends.module.scss?5d02","webpack://telegram-t/./src/components/story/privacy/CloseFriends.tsx","webpack://telegram-t/./src/components/story/StorySettings.module.scss?b887","webpack://telegram-t/./src/components/story/StorySettings.tsx","webpack://telegram-t/./src/components/common/embedded/EmbeddedStoryForward.tsx","webpack://telegram-t/./src/components/story/StoryCaption.tsx","webpack://telegram-t/./src/components/story/StoryFooter.module.scss?19b1","webpack://telegram-t/./src/components/story/StoryFooter.tsx","webpack://telegram-t/./src/components/story/StoryProgress.tsx","webpack://telegram-t/./src/components/story/StoryProgress.module.scss?59b4","webpack://telegram-t/./src/components/story/Story.tsx","webpack://telegram-t/./src/components/story/StoryPreview.tsx","webpack://telegram-t/./src/components/story/StorySlides.tsx","webpack://telegram-t/./src/hooks/useScrolledState.ts","webpack://telegram-t/./src/components/story/StoryViewModal.module.scss?06b1","webpack://telegram-t/./src/components/story/StoryView.tsx","webpack://telegram-t/./src/components/story/StoryViewModal.tsx","webpack://telegram-t/./src/components/story/StoryViewer.tsx","webpack://telegram-t/./src/components/common/pickers/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/common/RecipientPicker.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.module.scss?0842","webpack://telegram-t/./src/components/modals/map/MapModal.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/hooks/useDraggable.ts","webpack://telegram-t/./src/components/modals/webApp/MinimizedWebAppModal.module.scss?a30f","webpack://telegram-t/./src/components/modals/webApp/MinimizedWebAppModal.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppGridItem.module.scss?b350","webpack://telegram-t/./src/components/modals/webApp/WebAppGridItem.tsx","webpack://telegram-t/./src/components/modals/webApp/MoreAppsTabContent.module.scss?8058","webpack://telegram-t/./src/components/modals/webApp/MoreAppsTabContent.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModalTabContent.module.scss?c843","webpack://telegram-t/./src/components/modals/webApp/WebAppModalTabContent.tsx","webpack://telegram-t/./src/components/modals/webApp/hooks/usePopupLimit.ts","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.module.scss?615e","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.module.scss?7431","webpack://telegram-t/./src/components/main/premium/PremiumFeatureItem.tsx","webpack://telegram-t/./src/components/common/SliderDots.module.scss?afdd","webpack://telegram-t/./src/components/common/SliderDots.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.module.scss?00e6","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitsCompare.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitPreview.module.scss?28b4","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.module.scss?0900","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStickers.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.module.scss?e925","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewStories.tsx","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.module.scss?0228","webpack://telegram-t/./src/components/main/premium/previews/PremiumFeaturePreviewVideo.tsx","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.module.scss?b65b","webpack://telegram-t/./src/components/main/premium/PremiumFeatureModal.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.tsx","webpack://telegram-t/./src/components/main/premium/PremiumSubscriptionOption.module.scss?b798","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.module.scss?323f","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.tsx","webpack://telegram-t/./src/components/common/pickers/ItemPicker.tsx","webpack://telegram-t/./src/components/common/CountryPickerModal.module.scss?d5e6","webpack://telegram-t/./src/components/common/CountryPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayChannelPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayTypeOption.module.scss?6d7c","webpack://telegram-t/./src/components/main/premium/GiveawayUserPickerModal.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.module.scss?ac86","webpack://telegram-t/./src/components/main/premium/GiveawayModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.module.scss?434e","webpack://telegram-t/./src/components/common/hooks/useStickerPickerObservers.ts","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.module.scss?4629","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/common/StickerButton.tsx","webpack://telegram-t/./src/components/common/reactions/ReactionEmoji.module.scss?9dc8","webpack://telegram-t/./src/components/common/reactions/ReactionEmoji.tsx","webpack://telegram-t/./src/components/common/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.module.scss?0978","webpack://telegram-t/./src/components/common/CustomEmojiPicker.tsx","webpack://telegram-t/./src/components/common/CustomEmojiPicker.module.scss?b9fd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.module.scss?d7cd","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.tsx","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.module.scss?77cd","webpack://telegram-t/./src/components/modals/suggestedStatus/SuggestedStatusModal.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.module.scss?aeb4","webpack://telegram-t/./src/components/modals/boost/BoostModal.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.module.scss?1c77","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.tsx","webpack://telegram-t/./src/util/getClosestEntry.ts","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.module.scss?3c02","webpack://telegram-t/./src/components/modals/deleteAccount/DeleteAccountModal.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.module.scss?f731","webpack://telegram-t/./src/components/modals/chatlist/ChatlistAlready.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistDelete.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistNew.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.module.scss?5f0b","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.tsx","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.module.scss?b66d","webpack://telegram-t/./src/components/modals/aboutAds/AboutAdsModal.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.module.scss?2ca6","webpack://telegram-t/./src/components/common/AboutMonetizationModal.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.module.scss?bb6b","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.tsx","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.module.scss?4803","webpack://telegram-t/./src/components/modals/emojiStatusAccess/EmojiStatusAccessModal.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.tsx","webpack://telegram-t/./src/components/modals/locationAccess/LocationAccessModal.module.scss?843e","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.module.scss?b26e","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.module.scss?3c2e","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.tsx","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.module.scss?94bc","webpack://telegram-t/./src/components/modals/preparedMessage/PreparedMessageModal.tsx","webpack://telegram-t/./src/components/modals/sharePreparedMessage/SharePreparedMessageModal.tsx","webpack://telegram-t/./src/components/right/hooks/useManagePermissions.ts","webpack://telegram-t/./src/components/main/PermissionCheckboxList.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.module.scss?fbca","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/common/SeenByModal.module.scss?1d45","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.module.scss?a8aa","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.module.scss?68c3","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.module.scss?497f","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/BotAppResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultTopic.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearchResultSponsored.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsShareChatlist.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/common/paidMessage/PaidMessageSlider.tsx","webpack://telegram-t/./src/components/common/paidMessage/PaidMessagePrice.tsx","webpack://telegram-t/./src/components/left/settings/PremiumStatusItem.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.tsx","webpack://telegram-t/./src/components/left/settings/PrivacyLockedOption.module.scss?16a3","webpack://telegram-t/./src/components/left/settings/PrivacyMessages.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/common/StickerSetCard.tsx","webpack://telegram-t/./src/components/left/settings/SettingsCustomEmoji.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.module.scss?24c7","webpack://telegram-t/./src/components/left/settings/SettingsDoNotTranslate.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.tsx","webpack://telegram-t/./src/components/common/ManageUsernames.module.scss?3086","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsExperimental.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/hooks/useMultiClick.ts","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPerformance.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsAcceptedGift.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyLastSeen.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicPhoto.module.scss?04c5","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyPublicProfilePhoto.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.module.scss?6993","webpack://telegram-t/./src/components/left/MuteChatModal.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.module.scss?b138","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearchResult.module.scss?f0ab","webpack://telegram-t/./src/components/middle/search/MiddleSearchResult.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.module.scss?725f","webpack://telegram-t/./src/components/middle/search/MiddleSearch.tsx","webpack://telegram-t/./src/hooks/events/useOutsideClick.ts","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPickerLimited.module.scss?0536","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.module.scss?695a","webpack://telegram-t/./src/components/middle/composer/helpers/getHtmlTextLength.ts","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.module.scss?41a0","webpack://telegram-t/./src/components/middle/composer/AttachmentModalItem.tsx","webpack://telegram-t/./src/util/visibility/isFullyVisible.ts","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.module.scss?23ea","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommand.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/ChatCommandTooltip.module.scss?f347","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.module.scss?c44f","webpack://telegram-t/./src/components/middle/composer/CustomEmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/TextFormatter.tsx","webpack://telegram-t/./src/util/getKeyFromEvent.ts","webpack://telegram-t/./src/components/middle/composer/CustomEmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPost.module.scss?fea0","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentPostMeta.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentStory.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.module.scss?96a0","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.module.scss?bbd6","webpack://telegram-t/./src/components/right/statistics/StatisticsMessagePublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsStoryPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/ManageTopic.module.scss?04dd","webpack://telegram-t/./src/components/right/CreateTopic.tsx","webpack://telegram-t/./src/components/right/EditTopic.tsx","webpack://telegram-t/./src/components/right/management/ManageBot.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/NewDiscussionGroup.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/components/payment/Checkout.module.scss?4e47","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PasswordConfirm.tsx","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/SavedPaymentCredentials.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.module.scss?717b","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.module.scss?de6c","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.tsx","webpack://telegram-t/./src/components/main/WebAppsCloseConfirmationModal.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.tsx","webpack://telegram-t/./src/components/modals/frozenAccount/FrozenAccountModal.module.scss?86e3","webpack://telegram-t/./src/components/common/PeerBadge.module.scss?732c","webpack://telegram-t/./src/components/common/PeerBadge.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"options\":\"OnCj9kef\",\"option\":\"tpTHQAUF\",\"active\":\"U_9MXPG5\",\"wideOption\":\"dJcJl33b\",\"optionTop\":\"x9G4lqMf\",\"stackedStars\":\"etXLebjM\",\"stackedStar\":\"swttXv9P\",\"optionBottom\":\"tK7La7L2\",\"moreOptions\":\"AWXBaWLW\",\"iconDown\":\"zWYHZJmd\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\n\nimport type { ApiStarGiveawayOption, ApiStarTopupOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './StarTopupOptionList.module.scss';\n\nconst MAX_STARS_COUNT = 6;\n\ntype OwnProps = {\n  isActive?: boolean;\n  options?: ApiStarTopupOption[] | ApiStarGiveawayOption[];\n  selectedStarOption?: ApiStarTopupOption | ApiStarGiveawayOption;\n  selectedStarCount?: number;\n  starsNeeded?: number;\n  className?: string;\n  onClick: (option: ApiStarTopupOption | ApiStarGiveawayOption) => void;\n};\n\nconst StarTopupOptionList: FC<OwnProps> = ({\n  isActive,\n  className,\n  options,\n  selectedStarOption,\n  selectedStarCount,\n  starsNeeded,\n  onClick,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [areOptionsExtended, markOptionsExtended, unmarkOptionsExtended] = useFlag();\n\n  useEffect(() => {\n    if (!isActive) {\n      unmarkOptionsExtended();\n    }\n  }, [isActive]);\n\n  const [renderingOptions, canExtend] = useMemo(() => {\n    if (!options) return [undefined, false];\n\n    const maxOption = options.reduce((max, option) => (\n      max.stars > option.stars ? max : option\n    ));\n    const forceShowAll = starsNeeded && maxOption.stars < starsNeeded;\n\n    const result: { option: ApiStarTopupOption | ApiStarGiveawayOption; starsCount: number; isWide: boolean }[] = [];\n    let currentStackedStarsCount = 0;\n    let canExtendOptions = false;\n    options.forEach((option, index) => {\n      if (!option.isExtended) currentStackedStarsCount++;\n\n      if (starsNeeded && !forceShowAll && option.stars < starsNeeded) return;\n      if (!areOptionsExtended && option.isExtended) {\n        canExtendOptions = true;\n        return;\n      }\n      result.push({\n        option,\n        starsCount: Math.min(currentStackedStarsCount, MAX_STARS_COUNT),\n        isWide: index === options.length - 1,\n      });\n    });\n\n    return [result, canExtendOptions];\n  }, [areOptionsExtended, options, starsNeeded]);\n\n  return (\n    <div className={buildClassName(styles.options, className)}>\n      {renderingOptions?.map(({ option, starsCount, isWide }) => {\n        const length = renderingOptions?.length;\n        const isOdd = length % 2 === 0;\n        const isActiveOption = option === selectedStarOption;\n\n        let perUserStarCount;\n        if (option && 'winners' in option) {\n          const winner = option.winners.find((opt) => opt.users === selectedStarCount)\n            || option.winners.reduce((max, opt) => (opt.users > max.users ? opt : max), option.winners[0]);\n          perUserStarCount = winner?.perUserStars;\n        }\n\n        return (\n          <div\n            className={buildClassName(\n              styles.option, (!isOdd && isWide) && styles.wideOption, isActiveOption && styles.active,\n            )}\n            key={option.stars}\n            onClick={() => onClick?.(option)}\n          >\n            <div className={styles.optionTop}>\n              +\n              {formatInteger(option.stars)}\n              <div className={styles.stackedStars} dir={lang.isRtl ? 'ltr' : 'rtl'}>\n                {Array.from({ length: starsCount }).map(() => (\n                  <StarIcon className={styles.stackedStar} type=\"gold\" size=\"big\" />\n                ))}\n              </div>\n            </div>\n            <div className={styles.optionBottom}>\n              {formatCurrency(lang, option.amount, option.currency)}\n            </div>\n            {(isActiveOption || (selectedStarOption && 'winners' in selectedStarOption))\n              && Boolean(perUserStarCount) && (\n              <div className={styles.optionBottom}>\n                <div className={styles.perUserStars}>\n                  {renderText(oldLang('BoostGift.Stars.PerUser', formatInteger(perUserStarCount)))}\n                </div>\n              </div>\n            )}\n          </div>\n        );\n      })}\n      {!areOptionsExtended && canExtend && (\n        <Button className={styles.moreOptions} isText noForcedUpperCase onClick={markOptionsExtended}>\n          {oldLang('Stars.Purchase.ShowMore')}\n          <Icon className={styles.iconDown} name=\"down\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StarTopupOptionList);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const stikerSize = isMobile ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : stikerSize}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import { memo, type TeactNode } from '../../../lib/teact/teact';\n\nimport type { IconName } from '../../../types/icons';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './TableAboutModal.module.scss';\n\nexport type TableAboutData = [IconName | undefined, TeactNode, TeactNode][];\n\ntype OwnProps = {\n  contentClassName?: string;\n  isOpen?: boolean;\n  listItemData?: TableAboutData;\n  headerIconName?: IconName;\n  header?: TeactNode;\n  footer?: TeactNode;\n  buttonText?: string;\n  hasBackdrop?: boolean;\n  withSeparator?: boolean;\n  onClose: NoneToVoidFunction;\n  onButtonClick?: NoneToVoidFunction;\n};\n\nconst TableAboutModal = ({\n  isOpen,\n  listItemData,\n  headerIconName,\n  header,\n  footer,\n  buttonText,\n  hasBackdrop,\n  withSeparator,\n  onClose,\n  onButtonClick,\n  contentClassName,\n}: OwnProps) => {\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName(styles.root, contentClassName)}\n      contentClassName={styles.content}\n      hasAbsoluteCloseButton\n      absoluteCloseButtonColor={hasBackdrop ? 'translucent-white' : undefined}\n      onClose={onClose}\n    >\n      {headerIconName && <div className={styles.topIcon}><Icon name={headerIconName} /></div>}\n      {header}\n      <div>\n        {listItemData?.map(([icon, title, subtitle]) => {\n          return (\n            <ListItem\n              isStatic\n              multiline\n              icon={icon}\n              iconClassName={styles.listItemIcon}\n            >\n              <span className=\"title\">{title}</span>\n              <span className=\"subtitle\">{subtitle}</span>\n            </ListItem>\n          );\n        })}\n      </div>\n      {withSeparator && <Separator className={styles.separator} />}\n      {footer}\n      {buttonText && (\n        <Button size=\"smaller\" onClick={onButtonClick || onClose}>{buttonText}</Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(TableAboutModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LAh8evux\",\"title\":\"yfODVQ1M\",\"description\":\"QaQn08BX\",\"secondary\":\"sQZslvAr\",\"topIcon\":\"jySLtQNG\",\"listItemIcon\":\"hQbEPsTU\",\"content\":\"hrizpMDe\",\"separator\":\"En1zD2cT\"};","import { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal, { type OwnProps as ModalProps } from '../../ui/Modal';\n\nimport styles from './PickerModal.module.scss';\n\ntype OwnProps = {\n  confirmButtonText?: string;\n  isConfirmDisabled?: boolean;\n  shouldAdaptToSearch?: boolean;\n  withFixedHeight?: boolean;\n  withPremiumGradient?: boolean;\n  onConfirm?: NoneToVoidFunction;\n} & ModalProps;\n\nconst PickerModal = ({\n  confirmButtonText,\n  isConfirmDisabled,\n  shouldAdaptToSearch,\n  withFixedHeight,\n  onConfirm,\n  withPremiumGradient,\n  ...modalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const hasButton = Boolean(confirmButtonText || onConfirm);\n\n  return (\n    <Modal\n\n      {...modalProps}\n      isSlim\n      className={buildClassName(\n        shouldAdaptToSearch && styles.withSearch,\n        withFixedHeight && styles.fixedHeight,\n        modalProps.className,\n      )}\n      contentClassName={buildClassName(styles.content, modalProps.contentClassName)}\n      headerClassName={buildClassName(styles.header, modalProps.headerClassName)}\n    >\n      {modalProps.children}\n      {hasButton && (\n        <div className={styles.buttonWrapper}>\n          <Button\n            withPremiumGradient={withPremiumGradient}\n            onClick={onConfirm || modalProps.onClose}\n            color=\"primary\"\n            size=\"smaller\"\n            disabled={isConfirmDisabled}\n          >\n            {confirmButtonText || lang('Confirm')}\n          </Button>\n        </div>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(PickerModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"FuFYE0AA\",\"fixedHeight\":\"CrEsDylb\",\"withSearch\":\"WGSZ8u75\",\"header\":\"iEptOmIp\",\"buttonWrapper\":\"HqeDTaSr\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"KYHkJ9Qf\",\"title\":\"AwnUe4Qk\",\"value\":\"JGH6P9Az\",\"table\":\"DFRB0Ad4\",\"noFooter\":\"cSamlkt9\",\"cell\":\"Cnh5ENvm\",\"fullWidth\":\"UssCZwgy\",\"avatar\":\"SHQbPR5Y\",\"chatItem\":\"aS9U4hiQ\"};","import { memo, type TeactNode } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { CustomPeer } from '../../../types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './TableInfoModal.module.scss';\n\ntype ChatItem = { chatId: string; withEmojiStatus?: boolean };\n\nexport type TableData = [TeactNode | undefined, TeactNode | ChatItem][];\n\ntype OwnProps = {\n  isOpen?: boolean;\n  title?: string;\n  tableData?: TableData;\n  headerAvatarPeer?: ApiPeer | CustomPeer;\n  header?: TeactNode;\n  modalHeader?: TeactNode;\n  footer?: TeactNode;\n  buttonText?: string;\n  className?: string;\n  hasBackdrop?: boolean;\n  onClose: NoneToVoidFunction;\n  onButtonClick?: NoneToVoidFunction;\n  withBalanceBar?: boolean;\n  isLowStackPriority?: true;\n};\n\nconst TableInfoModal = ({\n  isOpen,\n  title,\n  tableData,\n  headerAvatarPeer,\n  header,\n  modalHeader,\n  footer,\n  buttonText,\n  className,\n  hasBackdrop,\n  onClose,\n  onButtonClick,\n  withBalanceBar,\n  isLowStackPriority,\n}: OwnProps) => {\n  const { openChat } = getActions();\n  const handleOpenChat = useLastCallback((peerId: string) => {\n    openChat({ id: peerId });\n    onClose();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton={Boolean(title)}\n      hasAbsoluteCloseButton={!title}\n      absoluteCloseButtonColor={hasBackdrop ? 'translucent-white' : undefined}\n      isSlim\n      header={modalHeader}\n      title={title}\n      className={className}\n      contentClassName={styles.content}\n      onClose={onClose}\n      withBalanceBar={withBalanceBar}\n      isLowStackPriority={isLowStackPriority}\n    >\n      {headerAvatarPeer && (\n        <Avatar peer={headerAvatarPeer} size=\"jumbo\" className={styles.avatar} />\n      )}\n      {header}\n      <div className={styles.table}>\n        {tableData?.map(([label, value]) => (\n          <>\n            {Boolean(label) && <div className={buildClassName(styles.cell, styles.title)}>{label}</div>}\n            <div className={buildClassName(styles.cell, styles.value, !label && styles.fullWidth)}>\n              {typeof value === 'object' && 'chatId' in value ? (\n                <PeerChip\n                  peerId={value.chatId}\n                  className={styles.chatItem}\n                  forceShowSelf\n                  withEmojiStatus={value.withEmojiStatus}\n                  clickArg={value.chatId}\n                  onClick={handleOpenChat}\n                />\n              ) : value}\n            </div>\n          </>\n        ))}\n      </div>\n      {footer}\n      {buttonText && (\n        <Button\n          className={!footer ? styles.noFooter : undefined}\n          size=\"smaller\"\n          onClick={onButtonClick || onClose}\n        >\n          {buttonText}\n        </Button>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(TableInfoModal);\n","import type {\n  ApiMessage, ApiPeer, ApiPeerPhotos, ApiSponsoredMessage,\n} from '../../../api/types';\nimport type { MediaViewerMedia } from '../../../types';\n\nimport { getMessageContent, isDocumentPhoto, isDocumentVideo } from '../../../global/helpers';\n\nexport type MediaViewerItem = {\n  type: 'message';\n  message: ApiMessage;\n  mediaIndex?: number;\n} | {\n  type: 'avatar';\n  avatarOwner: ApiPeer;\n  profilePhotos: ApiPeerPhotos;\n  mediaIndex: number;\n} | {\n  type: 'standalone';\n  media: MediaViewerMedia[];\n  mediaIndex: number;\n} | {\n  type: 'sponsoredMessage';\n  message: ApiSponsoredMessage;\n  mediaIndex?: number;\n};\n\ntype ViewableMedia = {\n  media: MediaViewerMedia;\n  isSingle?: boolean;\n};\n\nexport function getMediaViewerItem({\n  message, avatarOwner, profilePhotos, standaloneMedia, mediaIndex, sponsoredMessage,\n}: {\n  message?: ApiMessage;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  standaloneMedia?: MediaViewerMedia[];\n  sponsoredMessage?: ApiSponsoredMessage;\n  mediaIndex?: number;\n}): MediaViewerItem | undefined {\n  if (avatarOwner && profilePhotos) {\n    return {\n      type: 'avatar',\n      avatarOwner,\n      profilePhotos,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (standaloneMedia) {\n    return {\n      type: 'standalone',\n      media: standaloneMedia,\n      mediaIndex: mediaIndex!,\n    };\n  }\n\n  if (message) {\n    return {\n      type: 'message',\n      message,\n      mediaIndex,\n    };\n  }\n\n  if (sponsoredMessage) {\n    return {\n      type: 'sponsoredMessage',\n      message: sponsoredMessage,\n      mediaIndex,\n    };\n  }\n\n  return undefined;\n}\n\nexport default function getViewableMedia(params?: MediaViewerItem): ViewableMedia | undefined {\n  if (!params) return undefined;\n\n  if (params.type === 'standalone') {\n    return {\n      media: params.media[params.mediaIndex],\n      isSingle: params.media.length === 1,\n    };\n  }\n\n  if (params.type === 'avatar') {\n    const avatar = params.profilePhotos?.photos[params.mediaIndex];\n    if (avatar) {\n      return {\n        media: avatar,\n      };\n    }\n    return undefined;\n  }\n\n  const {\n    action, document, photo, video, webPage, paidMedia,\n  } = getMessageContent(params.message);\n\n  if (action?.type === 'chatEditPhoto' || action?.type === 'suggestProfilePhoto') {\n    return {\n      media: action.photo!,\n      isSingle: true,\n    };\n  }\n\n  if (document && (isDocumentPhoto(document) || isDocumentVideo(document))) {\n    return {\n      media: document,\n    };\n  }\n\n  if (webPage) {\n    const { photo: webPagePhoto, video: webPageVideo, document: webPageDocument } = webPage;\n    const isDocumentMedia = webPageDocument && (isDocumentPhoto(webPageDocument) || isDocumentVideo(webPageDocument));\n    const mediaDocument = isDocumentMedia ? webPageDocument : undefined;\n    const media = webPageVideo || mediaDocument || webPagePhoto;\n    if (media) {\n      return {\n        media,\n        isSingle: true,\n      };\n    }\n  }\n\n  if (paidMedia) {\n    const extendedMedia = paidMedia.extendedMedia[params.mediaIndex || 0];\n    if (!('mediaType' in extendedMedia)) {\n      const { photo: extendedPhoto, video: extendedVideo } = extendedMedia;\n      return {\n        media: (extendedPhoto || extendedVideo)!,\n      };\n    }\n  }\n\n  const media = video || photo;\n\n  if (media) {\n    return {\n      media,\n      isSingle: video?.isGif,\n    };\n  }\n\n  return undefined;\n}\n","import type { ApiDimensions, ApiMessage } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport getOffsetToContainer from '../../../util/visibility/getOffsetToContainer';\nimport { isElementInViewport } from '../../../util/visibility/isElementInViewport';\nimport windowSize from '../../../util/windowSize';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n  mediaIndex?: number,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message, mediaIndex);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || fromImage);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n    applyShape(ghost, origin);\n\n    document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage, mediaIndex?: number,\n) {\n  const { container, mediaEl: toImage } = getNodes(origin, message, mediaIndex);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [\n      MediaViewerOrigin.Inline,\n      MediaViewerOrigin.ScheduledInline,\n      MediaViewerOrigin.Album,\n      MediaViewerOrigin.ScheduledAlbum,\n    ].includes(origin)\n    && !isMessageImageFullyVisible(toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n\n  let styles: Record<string, string>;\n  if (existingGhost) {\n    const {\n      top, left, width, height,\n    } = existingGhost.getBoundingClientRect();\n    const scaleX = width / toWidth;\n    const scaleY = height / toHeight;\n\n    styles = {\n      transition: 'none',\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      transformOrigin: 'top left',\n      transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n    };\n  } else {\n    styles = {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    };\n  }\n\n  requestMutation(() => {\n    applyStyles(ghost, styles);\n    if (!existingGhost) document.body.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition_slide-active > .MessageList')!;\n\n  const { top } = getOffsetToContainer(imageEl, messageListElement);\n\n  return top > messageListElement.scrollTop\n    && top + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage, index?: number) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      // eslint-disable-next-line @stylistic/max-len\n      containerSelector = `.Transition_slide-active > .MessageList #album-media-${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.PreviewMedia:\n      containerSelector = `#preview-media${index}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition_slide-active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ChannelAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = '.Avatar img';\n      break;\n\n    case MediaViewerOrigin.StarsTransaction:\n      containerSelector = '.transaction-media-preview';\n      mediaSelector = index === 0 ? `.stars-transaction-media-${index} :is(img, video)` : undefined;\n      break;\n\n    case MediaViewerOrigin.SponsoredMessage:\n      containerSelector = '.Transition_slide-active > .MessageList .sponsored-media-preview';\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition_slide-active > .MessageList #${getMessageHtmlId(message!.id, index)}`;\n      mediaSelector = `${MESSAGE_CONTENT_SELECTOR} .full-media,${MESSAGE_CONTENT_SELECTOR} .thumbnail:not(.blurred-bg)`;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = mediaSelector\n    ? container?.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector) : undefined;\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.StarsTransaction:\n    case MediaViewerOrigin.PreviewMedia:\n    case MediaViewerOrigin.ChannelAvatar:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n    case MediaViewerOrigin.SuggestedAvatar:\n      ghost.classList.add('circle');\n      if (origin === MediaViewerOrigin.SuggestedAvatar) {\n        ghost.classList.add('transition-circle');\n      }\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useCallback, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { DEBUG } from '../config';\nimport { IS_IOS, IS_PWA } from '../util/browser/windowEnvironment';\nimport safePlay, { getIsVideoPlaying } from '../util/safePlay';\nimport { createSignal } from '../util/signals';\n\ntype ReturnType = [boolean, () => void, boolean] | [false];\ntype CallbackType = () => void;\n\nconst signal = createSignal(false);\nconst setIsPictureInPicture = signal[1];\n\nexport function usePictureInPictureSignal() {\n  return signal;\n}\n\nexport default function usePictureInPicture(\n  elRef: ElementRef<HTMLVideoElement>,\n  onEnter: CallbackType,\n  onLeave: CallbackType,\n): ReturnType {\n  const [isSupported, setIsSupported] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  useLayoutEffect(() => {\n    // PIP is not supported in PWA on iOS, despite being detected\n    if ((IS_IOS && IS_PWA) || !elRef.current) return undefined;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    const isEnabled = (document.pictureInPictureEnabled && !elRef.current?.disablePictureInPicture)\n      || setMode !== undefined;\n    if (!isEnabled) return undefined;\n    // @ts-ignore\n    video.autoPictureInPicture = true;\n    setIsSupported(true);\n    const onEnterInternal = () => {\n      onEnter();\n      setIsActive(true);\n      setIsPictureInPicture(true);\n    };\n    const onLeaveInternal = () => {\n      setIsPictureInPicture(false);\n      setIsActive(false);\n      onLeave();\n    };\n    video.addEventListener('enterpictureinpicture', onEnterInternal);\n    video.addEventListener('leavepictureinpicture', onLeaveInternal);\n    return () => {\n      video.removeEventListener('enterpictureinpicture', onEnterInternal);\n      video.removeEventListener('leavepictureinpicture', onLeaveInternal);\n    };\n  }, [elRef, onEnter, onLeave]);\n\n  const exitPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    const video = elRef.current;\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('inline');\n    } else {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [elRef]);\n\n  const enterPictureInPicture = useCallback(() => {\n    if (!elRef.current) return;\n    exitPictureInPicture();\n    const video = elRef.current;\n    const isPlaying = getIsVideoPlaying(video);\n    const setMode = getSetPresentationMode(video);\n    if (setMode) {\n      setMode('picture-in-picture');\n    } else {\n      requestPictureInPicture(video);\n    }\n    // Muted video stops in PiP mode, so we need to play it again\n    if (isPlaying) {\n      safePlay(video);\n    }\n  }, [elRef, exitPictureInPicture]);\n\n  if (!isSupported) {\n    return [false];\n  }\n\n  return [isSupported, enterPictureInPicture, isActive];\n}\n\nfunction getSetPresentationMode(video: HTMLVideoElement) {\n  // @ts-ignore\n  if (video.webkitSupportsPresentationMode && typeof video.webkitSetPresentationMode === 'function') {\n    // @ts-ignore\n    return video.webkitSetPresentationMode.bind(video);\n  }\n  return undefined;\n}\n\nfunction requestPictureInPicture(video: HTMLVideoElement) {\n  if (video.requestPictureInPicture) {\n    try {\n      video.requestPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n\nexport function exitPictureInPictureIfNeeded() {\n  if (document.pictureInPictureElement) {\n    try {\n      document.exitPictureInPicture();\n    } catch (err) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('[MV] PictureInPicture Error', err);\n      }\n    }\n  }\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport type { MediaViewerMedia } from '../../../types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getMediaFileSize,\n  getMediaFormat,\n  getMediaHash,\n  getMediaThumbUri,\n  getPhotoFullDimensions,\n  getProfilePhotoMediaHash,\n  getVideoDimensions,\n  getVideoProfilePhotoMediaHash,\n  isDocumentPhoto,\n  isDocumentVideo,\n} from '../../../global/helpers';\nimport { AVATAR_FULL_DIMENSIONS, VIDEO_AVATAR_FULL_DIMENSIONS } from '../../common/helpers/mediaDimensions';\n\nimport useBlurSync from '../../../hooks/useBlurSync';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\n\nconst FALLBACK_DIMENSIONS = AVATAR_FULL_DIMENSIONS;\n\ntype UseMediaProps = {\n  media?: MediaViewerMedia;\n  isAvatar?: boolean;\n  origin?: MediaViewerOrigin;\n  delay: number | false;\n};\n\nexport const useMediaProps = ({\n  media,\n  isAvatar,\n  origin,\n  delay,\n}: UseMediaProps) => {\n  const isPhotoAvatar = isAvatar && media?.mediaType === 'photo' && !media.isVideo;\n  const isVideoAvatar = isAvatar && media?.mediaType === 'photo' && media.isVideo;\n  const isDocument = media?.mediaType === 'document';\n  const isVideo = (media?.mediaType === 'video' && !media.isRound) || (isDocument && isDocumentVideo(media));\n  const isPhoto = media?.mediaType === 'photo' || (isDocument && isDocumentPhoto(media));\n  const isGif = media?.mediaType === 'video' && media.isGif;\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const getMediaOrAvatarHash = useMemo(() => (isFull?: boolean) => {\n    if (!media) return undefined;\n\n    if ((isPhotoAvatar || isVideoAvatar) && !isFull) {\n      return getProfilePhotoMediaHash(media);\n    }\n\n    if (isVideoAvatar && isFull) {\n      return getVideoProfilePhotoMediaHash(media);\n    }\n\n    return getMediaHash(media, isFull ? 'full' : 'preview');\n  }, [isVideoAvatar, isPhotoAvatar, media]);\n\n  const pictogramBlobUrl = useMedia(\n    media\n    // Only use pictogram if it's already loaded\n    && (isFromSharedMedia || isFromSearch || isDocument)\n    && getMediaHash(media, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const previewMediaHash = getMediaOrAvatarHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    delay,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaOrAvatarHash(true),\n    undefined,\n    media && getMediaFormat(media, 'full'),\n    delay,\n  );\n\n  const localBlobUrl = media && 'blobUrl' in media ? media.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && media && getMediaThumbUri(media));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n  if (isVideoAvatar && previewBlobUrl) {\n    bestImageData = previewBlobUrl;\n  }\n  const bestData = localBlobUrl || fullMediaBlobUrl || (\n    (!isVideoAvatar && !isVideo) ? (previewBlobUrl || pictogramBlobUrl || bestImageData) : undefined\n  );\n\n  const mediaSize = media && getMediaFileSize(media);\n\n  const isLocal = Boolean(localBlobUrl);\n\n  const dimensions = useMemo(() => {\n    if (isAvatar) {\n      return isVideoAvatar ? VIDEO_AVATAR_FULL_DIMENSIONS : AVATAR_FULL_DIMENSIONS;\n    }\n\n    if (isDocument) {\n      return media.mediaSize!;\n    }\n\n    if (isPhoto) {\n      return getPhotoFullDimensions(media);\n    }\n\n    if (isVideo) {\n      return getVideoDimensions(media);\n    }\n\n    return FALLBACK_DIMENSIONS;\n  }, [isAvatar, isDocument, isPhoto, isVideo, isVideoAvatar, media]);\n\n  return {\n    getMediaHash: getMediaOrAvatarHash,\n    media,\n    isVideo,\n    isPhoto,\n    isGif,\n    isDocument,\n    bestImageData,\n    bestData,\n    dimensions,\n    isFromSharedMedia,\n    isVideoAvatar,\n    isLocal,\n    loadProgress,\n    mediaSize,\n  };\n};\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useBlur from './useBlur';\nimport useSyncEffect from './useSyncEffect';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useSyncEffect(() => {\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto, ApiReportReason } from '../../api/types';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  peerId?: string;\n  photo?: ApiPhoto;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nconst ReportAvatarModal: FC<OwnProps> = ({\n  isOpen,\n  peerId,\n  photo,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { reportProfilePhoto } = getActions();\n\n  const [selectedReason, setSelectedReason] = useState<ApiReportReason>('spam');\n  const [description, setDescription] = useState('');\n\n  const handleReport = useLastCallback(() => {\n    reportProfilePhoto({\n      chatId: peerId, photo, reason: selectedReason, description,\n    });\n    onClose();\n  });\n\n  const handleSelectReason = useLastCallback((value: string) => {\n    setSelectedReason(value as ApiReportReason);\n  });\n\n  const handleDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setDescription(e.target.value);\n  });\n\n  const lang = useOldLang();\n\n  const REPORT_OPTIONS: { value: ApiReportReason; label: string }[] = useMemo(() => [\n    { value: 'spam', label: lang('lng_report_reason_spam') },\n    { value: 'violence', label: lang('lng_report_reason_violence') },\n    { value: 'pornography', label: lang('lng_report_reason_pornography') },\n    { value: 'childAbuse', label: lang('lng_report_reason_child_abuse') },\n    { value: 'copyright', label: lang('ReportPeer.ReasonCopyright') },\n    { value: 'illegalDrugs', label: 'Illegal Drugs' },\n    { value: 'personalDetails', label: 'Personal Details' },\n    { value: 'other', label: lang('lng_report_reason_other') },\n  ], [lang]);\n\n  if (!peerId || !photo) {\n    return undefined;\n  }\n\n  const title = lang('ReportPeer.Report');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen ? handleReport : undefined}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      className=\"narrow\"\n      title={title}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"report-message\"\n        options={REPORT_OPTIONS}\n        onChange={handleSelectReason}\n        selected={selectedReason}\n      />\n      <InputText\n        label={lang('lng_report_reason_description')}\n        value={description}\n        onChange={handleDescriptionChange}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleReport}>\n          {lang('lng_report_button')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAvatarModal);\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nconst [getZoomChange, setZoomChange] = createSignal(1);\n\nexport default function useZoomChange() {\n  useUnmountCleanup(() => {\n    setZoomChange(1);\n  });\n\n  return [getZoomChange, setZoomChange] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiPhoto } from '../../api/types';\n\nimport { isUserId } from '../../util/entities/ids';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  photo: ApiPhoto;\n  profileId: string;\n  onConfirm?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst DeleteProfilePhotoModal: FC<OwnProps> = ({\n  isOpen,\n  photo,\n  profileId,\n  onClose,\n  onConfirm,\n}) => {\n  const {\n    deleteProfilePhoto,\n    deleteChatPhoto,\n  } = getActions();\n\n  const handleDeletePhoto = useCallback(() => {\n    onConfirm?.();\n    if (isUserId(profileId)) {\n      deleteProfilePhoto({ photo });\n    } else {\n      deleteChatPhoto({\n        photo,\n        chatId: profileId,\n      });\n    }\n    onClose();\n  }, [onConfirm, profileId, onClose, deleteProfilePhoto, photo, deleteChatPhoto]);\n\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleDeletePhoto}\n      className=\"delete dialog-buttons-column\"\n      title={lang('AreYouSure')}\n    >\n      <div className=\"dialog-buttons mt-2\">\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeletePhoto}>\n          {lang('Preview.DeletePhoto')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(DeleteProfilePhotoModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { ActiveDownloads, MediaViewerOrigin, MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { MenuItemProps } from '../ui/MenuItem';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport {\n  getIsDownloading,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectAllowedMessageActionsSlow, selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsChatProtected,\n  selectIsMessageProtected,\n  selectTabState,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport getViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport useOldLang from '../../hooks/useOldLang';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport DeleteProfilePhotoModal from '../common/DeleteProfilePhotoModal';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  activeDownloads: ActiveDownloads;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  canDelete?: boolean;\n  chat?: ApiChat;\n  canUpdate?: boolean;\n  messageListType?: MessageListType;\n  origin?: MediaViewerOrigin;\n};\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  mediaData?: string;\n  isVideo: boolean;\n  canUpdateMedia?: boolean;\n  canReportAvatar?: boolean;\n  activeDownloads?: ActiveDownloads;\n  onReportAvatar: NoneToVoidFunction;\n  onBeforeDelete: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  item,\n  mediaData,\n  isVideo,\n  chat,\n  isChatProtected,\n  isProtected,\n  canReportAvatar,\n  canDelete,\n  canUpdate,\n  messageListType,\n  activeDownloads,\n  origin,\n  onReportAvatar: onReport,\n  onCloseMediaViewer,\n  onBeforeDelete,\n  onForward,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n  const [getZoomChange, setZoomChange] = useZoomChange();\n  const { isMobile } = useAppLayout();\n\n  const {\n    downloadMedia,\n    cancelMediaDownload,\n    updateProfilePhoto,\n    updateChatPhoto,\n    openMediaViewer,\n    openDeleteMessageModal,\n  } = getActions();\n\n  const isMessage = item?.type === 'message';\n\n  const { media } = getViewableMedia(item) || {};\n  const fileName = media && getMediaFilename(media);\n  const isDownloading = media && getIsDownloading(activeDownloads, media);\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    media && getMediaHash(media, 'download'),\n    !isDownloading,\n    media && getMediaFormat(media, 'download'),\n  );\n\n  const handleDownloadClick = useLastCallback(() => {\n    if (!media) return;\n\n    if (isDownloading) {\n      cancelMediaDownload({ media });\n    } else {\n      const message = item?.type === 'message' ? item.message : undefined;\n      downloadMedia({ media, originMessage: message });\n    }\n  });\n\n  const handleZoomOut = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange < 0 ? zoomChange : 0;\n    setZoomChange(change - 1);\n  });\n\n  const handleZoomIn = useLastCallback(() => {\n    const zoomChange = getZoomChange();\n    const change = zoomChange > 0 ? zoomChange : 0;\n    setZoomChange(change + 1);\n  });\n\n  const handleUpdate = useLastCallback(() => {\n    if (item?.type !== 'avatar') return;\n    const { avatarOwner, profilePhotos, mediaIndex } = item;\n    const avatarPhoto = profilePhotos?.photos[mediaIndex];\n    if (isUserId(avatarOwner.id)) {\n      updateProfilePhoto({ photo: avatarPhoto });\n    } else {\n      updateChatPhoto({ chatId: avatarOwner.id, photo: avatarPhoto });\n    }\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: avatarOwner.id,\n      mediaIndex: 0,\n      isAvatarView: true,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const lang = useOldLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDeleteModal() {\n    return (item?.type === 'avatar') ? (\n      <DeleteProfilePhotoModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        onConfirm={onBeforeDelete}\n        profileId={item.avatarOwner.id}\n        photo={item.profilePhotos.photos[item.mediaIndex]}\n      />\n    ) : undefined;\n  }\n\n  function renderDownloadButton() {\n    if (isProtected || item?.type === 'standalone') {\n      return undefined;\n    }\n\n    return item?.type !== 'sponsoredMessage' && (isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <Icon name=\"download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <Icon name=\"download\" />\n      </Button>\n    ));\n  }\n\n  const openDeleteModalHandler = useLastCallback(() => {\n    if (item?.type === 'message' && chat) {\n      openDeleteMessageModal({\n        chatId: chat?.id,\n        messageIds: [item.message.id],\n        isSchedule: messageListType === 'scheduled',\n        onConfirm: onBeforeDelete,\n      });\n    } else {\n      openDeleteModal();\n    }\n  });\n\n  if (isMobile) {\n    const menuItems: MenuItemProps[] = [];\n    if (isMessage && item.message.isForwardingAllowed && !item.message.content.action && !isChatProtected) {\n      menuItems.push({\n        icon: 'forward',\n        onClick: onForward,\n        children: lang('Forward'),\n      });\n    }\n    if (!isProtected) {\n      if (isVideo) {\n        menuItems.push({\n          icon: isDownloading ? 'close' : 'download',\n          onClick: handleDownloadClick,\n          children: isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download',\n        });\n      } else {\n        menuItems.push({\n          icon: 'download',\n          href: mediaData,\n          download: fileName,\n          children: lang('AccActionDownload'),\n        });\n      }\n    }\n\n    if (canReportAvatar) {\n      menuItems.push({\n        icon: 'flag',\n        onClick: onReport,\n        children: lang('ReportPeer.Report'),\n      });\n    }\n\n    if (canUpdate) {\n      menuItems.push({\n        icon: 'copy-media',\n        onClick: handleUpdate,\n        children: lang('ProfilePhoto.SetMainPhoto'),\n      });\n    }\n\n    if (canDelete) {\n      menuItems.push({\n        icon: 'delete',\n        onClick: openDeleteModalHandler,\n        children: lang('Delete'),\n        destructive: true,\n      });\n    }\n\n    if (menuItems.length === 0) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {menuItems.map(({\n            icon, onClick, href, download, children, destructive,\n          }) => (\n            <MenuItem\n              key={icon}\n              icon={icon as IconName}\n              href={href}\n              download={download}\n              onClick={onClick}\n              destructive={destructive}\n            >\n              {children}\n            </MenuItem>\n          ))}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n        {canDelete && renderDeleteModal()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {isMessage && item.message.isForwardingAllowed && !isChatProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <Icon name=\"zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <Icon name=\"zoom-in\" />\n      </Button>\n      {canReportAvatar && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <Icon name=\"flag\" />\n        </Button>\n      )}\n      {canUpdate && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('ProfilePhoto.SetMainPhoto')}\n          onClick={handleUpdate}\n        >\n          <Icon name=\"copy-media\" />\n        </Button>\n      )}\n      {canDelete && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Delete')}\n          onClick={openDeleteModalHandler}\n        >\n          <Icon name=\"delete\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {canDelete && renderDeleteModal()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    item, canUpdateMedia,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { origin } = tabState.mediaViewer;\n\n    const message = item?.type === 'message' ? item.message : undefined;\n    const avatarOwner = item?.type === 'avatar' ? item.avatarOwner : undefined;\n    const avatarPhoto = item?.type === 'avatar' && item.profilePhotos.photos[item.mediaIndex];\n\n    const chat = selectCurrentChat(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const isProtected = selectIsMessageProtected(global, message);\n    const activeDownloads = selectActiveDownloads(global);\n    const isChatProtected = message && selectIsChatProtected(global, message?.chatId);\n    const { canDelete: canDeleteMessage } = (threadId\n      && message && selectAllowedMessageActionsSlow(global, message, threadId)) || {};\n    const isCurrentAvatar = avatarPhoto && (avatarPhoto.id === avatarOwner?.avatarPhotoId);\n    const canDeleteAvatar = canUpdateMedia && Boolean(avatarPhoto);\n    const canDelete = canDeleteMessage || canDeleteAvatar;\n    const canUpdate = canUpdateMedia && Boolean(avatarPhoto) && !isCurrentAvatar;\n    const messageListType = currentMessageList?.type;\n\n    return {\n      activeDownloads,\n      isProtected,\n      chat,\n      isChatProtected,\n      canDelete,\n      canUpdate,\n      messageListType,\n      origin,\n    };\n  },\n)(MediaViewerActions));\n","import { useRef } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport useEffectOnce from './useEffectOnce';\n\n// Allows to use signal value as \"silent\" dependency in hooks (not causing updates)\nexport function useSignalRef<T>(getValue: Signal<T>) {\n  const ref = useRef<T>(getValue());\n\n  useEffectOnce(() => {\n    return getValue.subscribe(() => {\n      ref.current = getValue();\n    });\n  });\n\n  return ref;\n}\n","import { createSignal } from '../../../util/signals';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\n\nconst [getControlsVisible, setControlsVisible] = createSignal(false);\nconst [getIsLocked, setIsLocked] = createSignal(false);\n\nexport default function useControlsSignal() {\n  const getVisible = useDerivedSignal(\n    () => getControlsVisible() && !getIsLocked(),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [getControlsVisible, getIsLocked],\n  );\n\n  return [getVisible, setControlsVisible, setIsLocked] as const;\n}\n","import { useUnmountCleanup } from '../lib/teact/teact';\n\nimport { createSignal } from '../util/signals';\n\nexport const [getCurrentTime, setCurrentTime] = createSignal(0);\n\nexport default function useCurrentTimeSignal() {\n  useUnmountCleanup(() => {\n    setCurrentTime(0);\n  });\n\n  return [getCurrentTime, setCurrentTime] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { throttle } from '../../util/schedulers';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Button from '../ui/Button';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  buttonText?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  isForVideo: boolean;\n  isForceMobileVersion?: boolean;\n  isProtected?: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', buttonText, isForVideo, onClick, handleSponsoredClick, isProtected, isForceMobileVersion,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  const { isMobile } = useAppLayout();\n  const [getIsVisible] = useControlsSignal();\n  const isHidden = useDerivedState(() => (IS_TOUCH_ENV ? !getIsVisible() : false), [getIsVisible]);\n\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text');\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const onButtonClick = useLastCallback(() => {\n    handleSponsoredClick();\n  });\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n    isProtected && 'is-protected',\n    isForceMobileVersion && 'mobile',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {Boolean(text) && (\n        <div className=\"media-viewer-footer-content\" onClick={!isMobile ? onClick : undefined}>\n          <p className={`media-text custom-scroll allow-selection ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">\n            {text}\n          </p>\n        </div>\n      )}\n      {Boolean(buttonText) && (\n        <Button\n          className={buildClassName('media-viewer-footer-content', 'media-viewer-button')}\n          size=\"default\"\n          color=\"primary\"\n          isRectangular\n          onClick={onButtonClick}\n        >\n          {buttonText}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useUnmountCleanup } from '../../../lib/teact/teact';\n\nimport { createSignal } from '../../../util/signals';\n\nexport const [getIsVideoWaiting, setIsVideoWaiting] = createSignal(false);\n\nexport default function useVideoWaitingSignal() {\n  useUnmountCleanup(() => {\n    setIsVideoWaiting(false);\n  });\n\n  return [getIsVideoWaiting, setIsVideoWaiting] as const;\n}\n","import { ApiMediaFormat } from '../../api/types';\n\nimport { IS_ANDROID, IS_IOS } from '../../util/browser/windowEnvironment';\nimport launchMediaWorkers, { MAX_WORKERS } from '../../util/launchMediaWorkers';\nimport { callApi } from '../../api/gramjs';\nimport { requestMutation } from '../fasterdom/fasterdom';\n\nconst IS_MOBILE = IS_ANDROID || IS_IOS;\nconst PREVIEW_SIZE_RATIO = (IS_ANDROID || IS_IOS) ? 0.3 : 0.25;\nconst MAX_FRAMES = IS_MOBILE ? 40 : 80;\nconst PREVIEW_MAX_SIDE = 200;\n\nconst connections = launchMediaWorkers();\n\nlet videoPreview: VideoPreview | undefined;\n\nexport class VideoPreview {\n  frames = new Map<number, ImageBitmap>();\n\n  currentTime = 0;\n\n  canvas: HTMLCanvasElement;\n\n  constructor(url: string, canvas: HTMLCanvasElement) {\n    this.canvas = canvas;\n    connections.forEach(({ connector }, index) => {\n      void connector.request({\n        name: 'video-preview:init',\n        args: [\n          url,\n          MAX_FRAMES,\n          index,\n          MAX_WORKERS,\n          this.onFrame.bind(this),\n        ],\n      });\n    });\n  }\n\n  private onFrame(time: number, frame: ImageBitmap) {\n    this.frames.set(time, frame);\n    if (time === this.currentTime) {\n      this.render(time);\n    }\n  }\n\n  private clearCache() {\n    this.frames.forEach((frame) => {\n      frame.close();\n    });\n    this.frames.clear();\n  }\n\n  render(time: number) {\n    this.currentTime = time;\n    const frame = this.frames.get(time);\n    if (!frame) return false;\n    requestMutation(() => {\n      this.canvas.width = frame.width;\n      this.canvas.height = frame.height;\n      const ctx = this.canvas.getContext('2d')!;\n      ctx.drawImage(frame, 0, 0, this.canvas.width, this.canvas.height);\n    });\n    return true;\n  }\n\n  destroy() {\n    this.clearCache();\n    connections.forEach(({ connector }) => {\n      void connector.request({\n        name: 'video-preview:destroy',\n        args: [],\n      });\n    });\n  }\n}\n\nexport function getPreviewDimensions(width: number, height: number) {\n  width = Math.round(width * PREVIEW_SIZE_RATIO);\n  height = Math.round(height * PREVIEW_SIZE_RATIO);\n  const ratio = width / height;\n  if (width > PREVIEW_MAX_SIDE) {\n    width = PREVIEW_MAX_SIDE;\n    height = Math.round(width / ratio);\n  }\n  if (height > PREVIEW_MAX_SIDE) {\n    height = PREVIEW_MAX_SIDE;\n    width = Math.round(height * ratio);\n  }\n  return { width, height };\n}\n\nconnections.forEach(({ worker }) => {\n  worker.addEventListener('message', async (e) => {\n    const { type, messageId, params } = e.data as {\n      type: string;\n      messageId: string;\n      params: { url: string; start: number; end: number };\n    };\n\n    if (type !== 'requestPart') {\n      return;\n    }\n\n    const result = await callApi('downloadMedia', { mediaFormat: ApiMediaFormat.Progressive, ...params });\n    if (!result) {\n      return;\n    }\n\n    const { arrayBuffer } = result;\n\n    worker.postMessage({\n      type: 'partResponse',\n      messageId,\n      result: arrayBuffer,\n    }, [arrayBuffer!]);\n  });\n});\n\nexport function createVideoPreviews(url: string, canvas: HTMLCanvasElement) {\n  if (videoPreview) {\n    videoPreview.destroy();\n  }\n  videoPreview = new VideoPreview(url, canvas);\n  return () => {\n    videoPreview?.destroy();\n    videoPreview = undefined;\n  };\n}\n\nexport function renderVideoPreview(time: number) {\n  if (!videoPreview) return false;\n  return videoPreview.render(time);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ingarEvU\",\"preview\":\"TqpEWfl3\",\"previewCanvas\":\"fKVz2lln\",\"previewTime\":\"bGiNvx5D\",\"previewTimeText\":\"mnkqvOMR\",\"track\":\"Od9ZSc1U\",\"buffered\":\"ANe2DKfp\",\"played\":\"igaGLblf\",\"seeking\":\"beUP6SqY\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\n\nimport { createVideoPreviews, getPreviewDimensions, renderVideoPreview } from '../../lib/video-preview/VideoPreview';\nimport { animateNumber } from '../../util/animation';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents } from '../../util/captureEvents';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp, round } from '../../util/math';\n\nimport { useThrottledSignal } from '../../hooks/useAsyncResolvers';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport ShowTransition from '../ui/ShowTransition';\n\nimport styles from './SeekLine.module.scss';\n\ntype OwnProps = {\n  url?: string;\n  duration: number;\n  bufferedRanges: BufferedRange[];\n  playbackRate: number;\n  isActive?: boolean;\n  isPlaying?: boolean;\n  isPreviewDisabled?: boolean;\n  isReady: boolean;\n  posterSize?: ApiDimensions;\n  onSeek: (position: number) => void;\n  onSeekStart: () => void;\n};\n\nconst LOCK_TIMEOUT = 250;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\n\nconst SeekLine: FC<OwnProps> = ({\n  duration,\n  bufferedRanges,\n  isReady,\n  posterSize,\n  playbackRate,\n  url,\n  isActive,\n  isPlaying,\n  isPreviewDisabled,\n  onSeek,\n  onSeekStart,\n}) => {\n  const seekerRef = useRef<HTMLDivElement>();\n  const [getCurrentTimeSignal] = useCurrentTimeSignal();\n  const [getIsWaiting] = useVideoWaitingSignal();\n  const getCurrentTime = useThrottledSignal(getCurrentTimeSignal, LOCK_TIMEOUT);\n  const [getSelectedTime, setSelectedTime] = useSignal(getCurrentTime());\n  const [getPreviewOffset, setPreviewOffset] = useSignal(0);\n  const [getPreviewTime, setPreviewTime] = useSignal(0);\n  const isLockedRef = useRef<boolean>(false);\n  const [isPreviewVisible, setPreviewVisible] = useState(false);\n  const [isSeeking, setIsSeeking] = useState(false);\n  const previewCanvasRef = useRef<HTMLCanvasElement>();\n  const previewRef = useRef<HTMLDivElement>();\n  const progressRef = useRef<HTMLDivElement>();\n  const previewTimeRef = useRef<HTMLDivElement>();\n\n  const previewSize = useMemo(() => {\n    return getPreviewDimensions(posterSize?.width || 0, posterSize?.height || 0);\n  }, [posterSize]);\n\n  const setPreview = useLastCallback((time: number) => {\n    time = Math.floor(time);\n    setPreviewTime(time);\n    renderVideoPreview(time);\n  });\n\n  useEffect(() => {\n    if (isPreviewDisabled || !url || !isReady) return undefined;\n    return createVideoPreviews(url, previewCanvasRef.current!);\n  }, [url, isReady, isPreviewDisabled]);\n\n  useEffect(() => {\n    setPreviewVisible(false);\n  }, [isActive]);\n\n  useEffect(() => {\n    if (cancelAnimation) cancelAnimation();\n    cancelAnimation = undefined;\n    if (!isLockedRef.current && !isSeeking) {\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n  }, [getCurrentTime, isSeeking, setSelectedTime, playbackRate, duration]);\n\n  useEffect(() => {\n    if (!isPlaying || getIsWaiting()) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    }\n  }, [isPlaying, getSelectedTime, getIsWaiting]);\n\n  useEffect(() => {\n    if (isPlaying) {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n      const time = getCurrentTime();\n      const remaining = duration - time;\n      cancelAnimation = animateNumber({\n        from: time,\n        to: duration,\n        duration: (remaining * 1000) / playbackRate,\n        onUpdate: setSelectedTime,\n      });\n    }\n    // eslint-disable-next-line\n  }, [isPlaying, playbackRate, duration]);\n\n  useLayoutEffect(() => {\n    if (!progressRef.current) return;\n    const progress = round((getSelectedTime() / duration) * 100, 2);\n    progressRef.current.style.width = `${progress}%`;\n  }, [getSelectedTime, duration]);\n\n  useLayoutEffect(() => {\n    if (!previewRef.current) return;\n    previewRef.current.style.left = `${getPreviewOffset()}px`;\n  }, [getPreviewOffset]);\n\n  useLayoutEffect(() => {\n    if (!previewTimeRef.current) return;\n    previewTimeRef.current.innerText = formatMediaDuration(getPreviewTime());\n  }, [getPreviewTime]);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isActive) return undefined;\n    const seeker = seekerRef.current;\n    let seekerSize = seeker.getBoundingClientRect();\n\n    let time = 0;\n    let offset = 0;\n\n    const getPreviewProps = (e: MouseEvent | TouchEvent) => {\n      const pageX = getPointerPosition(e).x;\n      const t = clamp(duration * ((pageX - seekerSize.left) / seekerSize.width), 0, duration);\n      if (isPreviewDisabled) return [t, 0];\n      if (!seekerSize.width) seekerSize = seeker.getBoundingClientRect();\n      const preview = previewRef.current!;\n      const o = clamp(\n        pageX - seekerSize.left - preview.clientWidth / 2, -4, seekerSize.width - preview.clientWidth + 4,\n      );\n      return [t, o];\n    };\n\n    const stopAnimation = () => {\n      if (cancelAnimation) cancelAnimation();\n      cancelAnimation = undefined;\n    };\n\n    const handleSeek = (e: MouseEvent | TouchEvent) => {\n      stopAnimation();\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      void setPreview(time);\n      setPreviewOffset(offset);\n      setSelectedTime(time);\n    };\n\n    const handleStartSeek = () => {\n      stopAnimation();\n      setPreviewVisible(true);\n      setIsSeeking(true);\n      onSeekStart();\n    };\n\n    const handleStopSeek = () => {\n      stopAnimation();\n      isLockedRef.current = true;\n      setPreviewVisible(false);\n      setIsSeeking(false);\n      setSelectedTime(time);\n      onSeek(time);\n      // Prevent current time updates from overriding the selected time\n      setTimeout(() => {\n        isLockedRef.current = false;\n      }, LOCK_TIMEOUT);\n    };\n\n    const cleanup = captureEvents(seeker, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n\n    if (IS_TOUCH_ENV || isPreviewDisabled) {\n      return cleanup;\n    }\n\n    const handleSeekMouseMove = (e: MouseEvent) => {\n      setPreviewVisible(true);\n      ([time, offset] = getPreviewProps(e));\n      setPreviewOffset(offset);\n      void setPreview(time);\n    };\n\n    const handleSeekMouseLeave = () => {\n      setPreviewVisible(false);\n    };\n\n    seeker.addEventListener('mousemove', handleSeekMouseMove);\n    seeker.addEventListener('mouseenter', handleSeekMouseMove);\n    seeker.addEventListener('mouseleave', handleSeekMouseLeave);\n\n    return () => {\n      cleanup();\n      seeker.removeEventListener('mousemove', handleSeekMouseMove);\n      seeker.removeEventListener('mouseenter', handleSeekMouseMove);\n      seeker.removeEventListener('mouseleave', handleSeekMouseLeave);\n    };\n  }, [\n    duration,\n    setPreview,\n    isActive,\n    onSeek,\n    onSeekStart,\n    setPreviewOffset,\n    setSelectedTime,\n    setIsSeeking,\n    isPreviewDisabled,\n    playbackRate,\n  ]);\n\n  return (\n    <div className={styles.container} ref={seekerRef}>\n      {!isPreviewDisabled && (\n        <ShowTransition\n          isOpen\n          isHidden={!isPreviewVisible}\n          className={styles.preview}\n          style={`width: ${previewSize.width}px; height: ${previewSize.height}px`}\n          ref={previewRef}\n        >\n          <canvas className={styles.previewCanvas} ref={previewCanvasRef} />\n          <div className={styles.previewTime}>\n            <span className={styles.previewTimeText} ref={previewTimeRef} />\n          </div>\n        </ShowTransition>\n      )}\n      <div className={styles.track}>\n        {bufferedRanges.map(({\n          start,\n          end,\n        }) => (\n          <div\n            key={`${start}-${end}`}\n            className={styles.buffered}\n            // @ts-ignore\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n      </div>\n      <div className={styles.track}>\n        <div\n          ref={progressRef}\n          className={buildClassName(styles.played, isSeeking && styles.seeking)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SeekLine);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef,\n  useSignal,\n} from '../../lib/teact/teact';\n\nimport type { ApiDimensions } from '../../api/types';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport type { IconName } from '../../types/icons';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport { formatFileSize } from '../../util/textFormat';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useControlsSignal from './hooks/useControlsSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport SeekLine from './SeekLine';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  url?: string;\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  duration: number;\n  isReady: boolean;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlaying: boolean;\n  isFullscreenSupported: boolean;\n  isPictureInPictureSupported: boolean;\n  isFullscreen: boolean;\n  isPreviewDisabled?: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  posterSize?: ApiDimensions;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onPictureInPictureChange?: () => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onSeek: (position: number) => void;\n  onSeekingChange: (isSeeking: boolean) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 3000;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  url,\n  bufferedRanges,\n  bufferedProgress,\n  duration,\n  isReady,\n  fileSize,\n  isForceMobileVersion,\n  isPlaying,\n  isFullscreenSupported,\n  isFullscreen,\n  isBuffered,\n  isPreviewDisabled,\n  volume,\n  isMuted,\n  playbackRate,\n  posterSize,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  isPictureInPictureSupported,\n  onPictureInPictureChange,\n  onPlayPause,\n  onSeek,\n  onSeekingChange,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  const [getCurrentTime] = useCurrentTimeSignal();\n  const currentTime = useDerivedState(() => Math.trunc(getCurrentTime()), [getCurrentTime]);\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n\n  const closeTimeoutRef = useRef<number | undefined>();\n\n  const { isMobile } = useAppLayout();\n  const [getIsVisible, setVisibility] = useControlsSignal();\n  const isVisible = useDerivedState(getIsVisible);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && !isForceMobileVersion) return undefined;\n    if (!isVisible || !isPlaying || isPlaybackMenuOpen || getIsSeeking()) {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n      return undefined;\n    }\n    closeTimeoutRef.current = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (closeTimeoutRef.current) window.clearTimeout(closeTimeoutRef.current);\n    };\n  }, [isPlaying, isVisible, setVisibility, isPlaybackMenuOpen, getIsSeeking, isForceMobileVersion]);\n\n  useLayoutEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useOldLang();\n\n  const handleSeek = useLastCallback((position: number) => {\n    setIsSeeking(false);\n    onSeek(position);\n    onSeekingChange(false);\n  });\n\n  const handleSeekStart = useLastCallback(() => {\n    setIsSeeking(true);\n    onSeekingChange(true);\n  });\n\n  const volumeIcon: IconName = useMemo(() => {\n    if (volume === 0 || isMuted) return 'muted';\n    if (volume < 0.3) return 'volume-1';\n    if (volume < 0.6) return 'volume-2';\n    return 'volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      <SeekLine\n        url={url}\n        duration={duration}\n        isReady={isReady}\n        isPlaying={isPlaying}\n        isPreviewDisabled={isPreviewDisabled}\n        posterSize={posterSize}\n        bufferedRanges={bufferedRanges}\n        playbackRate={playbackRate}\n        onSeek={handleSeek}\n        onSeekStart={handleSeekStart}\n        isActive={isVisible}\n      />\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!isMobile}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <Icon name={isPlaying ? 'pause' : 'play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <Icon name={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && (\n          <div className=\"player-file-size\">\n            {`${formatFileSize(lang, fileSize * bufferedProgress)} / ${formatFileSize(lang, fileSize)}`}\n          </div>\n        )}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isPictureInPictureSupported && (\n          <Button\n            ariaLabel=\"Picture in picture\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onPictureInPictureChange}\n          >\n            <Icon name=\"pip\" />\n          </Button>\n        )}\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <Icon name={isFullscreen ? 'smallscreen' : 'fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className={buildClassName(\n          'playback-rate-menu',\n          !isFullscreenSupported && 'no-fullscreen',\n          !isPictureInPictureSupported && 'no-pip',\n        )}\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nexport default memo(VideoPlayerControls);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV, IS_YA_BROWSER } from '../../util/browser/windowEnvironment';\nimport getPointerPosition from '../../util/events/getPointerPosition';\nimport { clamp } from '../../util/math';\nimport safePlay from '../../util/safePlay';\nimport stopEvent from '../../util/stopEvent';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePictureInPicture from '../../hooks/usePictureInPicture';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useFullscreen from '../../hooks/window/useFullscreen';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useVideoWaitingSignal from './hooks/useVideoWaitingSignal';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\nimport VideoPlayerControls from './VideoPlayerControls';\n\nimport './VideoPlayer.scss';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isPreviewDisabled?: boolean;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  isProtected?: boolean;\n  shouldCloseOnClick?: boolean;\n  isForceMobileVersion?: boolean;\n  isClickDisabled?: boolean;\n  isSponsoredMessage?: boolean;\n  timestamp?: number;\n  handleSponsoredClick?: (isFromMedia?: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MAX_LOOP_DURATION = 30; // Seconds\nconst MIN_READY_STATE = 4;\nconst REWIND_STEP = 5; // Seconds\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  isForceMobileVersion,\n  shouldCloseOnClick,\n  isProtected,\n  isClickDisabled,\n  isPreviewDisabled,\n  isSponsoredMessage,\n  timestamp,\n  handleSponsoredClick,\n  onClose,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n    setMediaViewerHidden,\n  } = getActions();\n  const videoRef = useRef<HTMLVideoElement>();\n  const [isPlaying, setIsPlaying] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreen(videoRef, setIsPlaying);\n  const { isMobile } = useAppLayout();\n  const duration = videoRef.current?.duration || 0;\n  const isLooped = isGif || duration <= MAX_LOOP_DURATION;\n\n  const handleEnterFullscreen = useLastCallback(() => {\n    // Yandex browser doesn't support PIP when video is hidden\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: true });\n  });\n\n  const handleLeaveFullscreen = useLastCallback(() => {\n    if (IS_YA_BROWSER) return;\n    setMediaViewerHidden({ isHidden: false });\n  });\n\n  const [\n    isPictureInPictureSupported,\n    enterPictureInPicture,\n    isInPictureInPicture,\n  ] = usePictureInPicture(videoRef, handleEnterFullscreen, handleLeaveFullscreen);\n\n  const [, toggleControls, lockControls] = useControlsSignal();\n  const [getIsSeeking, setIsSeeking] = useSignal(false);\n  const lastMousePosition = useRef({ x: 0, y: 0 });\n\n  useEffect(() => {\n    const updateMousePosition = (e: MouseEvent | TouchEvent) => {\n      lastMousePosition.current = getPointerPosition(e);\n    };\n\n    window.addEventListener('mousemove', updateMousePosition);\n    window.addEventListener('touchmove', updateMousePosition);\n\n    return () => {\n      window.removeEventListener('mousemove', updateMousePosition);\n      window.removeEventListener('touchmove', updateMousePosition);\n    };\n  }, []);\n\n  const checkMousePositionAndToggleControls = useLastCallback((clientX: number, clientY: number) => {\n    const bounds = videoRef.current?.getBoundingClientRect();\n    if (!bounds) return;\n    if (clientX <= bounds.left || clientX >= bounds.right\n      || clientY <= bounds.top || clientY >= bounds.bottom) {\n      if (!getIsSeeking()) {\n        toggleControls(false);\n      }\n    }\n  });\n\n  const handleVideoMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const handleVideoLeave = useLastCallback((e) => {\n    checkMousePositionAndToggleControls(e.clientX, e.clientY);\n  });\n\n  const handleSeekingChange = useLastCallback((isSeeking: boolean) => {\n    setIsSeeking(isSeeking);\n    if (!isSeeking) {\n      const { x, y } = lastMousePosition.current;\n      checkMousePositionAndToggleControls(x, y);\n    }\n  });\n\n  const {\n    isReady, isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const isUnsupported = useUnsupportedMedia(videoRef, undefined, !url);\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransitionDeprecated(\n    !isBuffered && !isUnsupported, undefined, undefined, 'slow',\n  );\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransitionDeprecated(\n    IS_IOS && !isPlaying && !shouldRenderSpinner && !isUnsupported, undefined, undefined, 'slow',\n  );\n\n  const [, setCurrentTime] = useCurrentTimeSignal();\n  const [, setIsVideoWaiting] = useVideoWaitingSignal();\n\n  useEffect(() => {\n    lockControls(shouldRenderSpinner);\n  }, [lockControls, shouldRenderSpinner]);\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen || isUnsupported) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url, setMediaViewerMuted, isUnsupported]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  useEffect(() => {\n    if (!timestamp) return;\n    videoRef.current!.currentTime = timestamp;\n    setCurrentTime(timestamp);\n  }, [setCurrentTime, timestamp]);\n\n  const togglePlayState = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlaying) {\n      videoRef.current!.pause();\n      setIsPlaying(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlaying(true);\n    }\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLVideoElement, MouseEvent>) => {\n    if (isSponsoredMessage) {\n      handleSponsoredClick?.(true);\n      onClose(e);\n    }\n    if (isClickDisabled) {\n      return;\n    }\n    if (shouldCloseOnClick) {\n      onClose(e);\n    } else {\n      togglePlayState(e);\n    }\n  });\n\n  useVideoCleanup(videoRef, bufferingHandlers);\n\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= MIN_READY_STATE) {\n      setIsVideoWaiting(false);\n      setCurrentTime(video.currentTime);\n    }\n    if (!isLooped && video.currentTime === video.duration) {\n      setCurrentTime(0);\n      setIsPlaying(false);\n    }\n  });\n\n  const handleEnded = useLastCallback(() => {\n    if (isLooped) return;\n    setCurrentTime(0);\n    setIsPlaying(false);\n    toggleControls(true);\n  });\n\n  const handleFullscreenChange = useLastCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  });\n\n  const handleSeek = useLastCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  });\n\n  const handleVolumeChange = useLastCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setMediaViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handlePlaybackRateChange = useLastCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  });\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const rewind = (dir: number) => {\n      if (!isFullscreen) return;\n      const video = videoRef.current!;\n      const newTime = clamp(video.currentTime + dir * REWIND_STEP, 0, video.duration);\n      if (Number.isFinite(newTime)) {\n        video.currentTime = newTime;\n      }\n    };\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (isInPictureInPicture) return;\n      switch (e.key) {\n        case ' ':\n        case 'Enter':\n          e.preventDefault();\n          togglePlayState(e);\n          break;\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          e.preventDefault();\n          rewind(-1);\n          break;\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          e.preventDefault();\n          rewind(1);\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, false);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen, isFullscreen, isInPictureInPicture]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n  const shouldToggleControls = !IS_TOUCH_ENV && !isForceMobileVersion;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={shouldToggleControls ? handleVideoMove : undefined}\n      onMouseLeave={shouldToggleControls ? handleVideoLeave : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {isProtected && (\n          <div\n            onContextMenu={stopEvent}\n            onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n            onClick={!isMobile ? togglePlayState : undefined}\n            className=\"protector\"\n          />\n        )}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          controlsList=\"nodownload\"\n          playsInline\n          loop={isLooped}\n          // This is to force autoplaying on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onWaiting={() => setIsVideoWaiting(true)}\n          onPlay={() => setIsPlaying(true)}\n          onEnded={handleEnded}\n          onClick={!isMobile && !isFullscreen ? handleClick : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n\n          {...bufferingHandlers}\n          onPause={(e) => {\n            setIsPlaying(false);\n            bufferingHandlers.onPause(e);\n          }}\n          onTimeUpdate={handleTimeUpdate}\n          src={url}\n        />\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <Icon name=\"play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !isSponsoredMessage && !isUnsupported && (\n        <VideoPlayerControls\n          url={url}\n          isPlaying={isPlaying}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isPictureInPictureSupported={isPictureInPictureSupported}\n          isFullscreen={isFullscreen}\n          isPreviewDisabled={isPreviewDisabled}\n          fileSize={fileSize}\n          duration={duration}\n          isReady={isReady}\n          posterSize={posterSize}\n          isForceMobileVersion={isForceMobileVersion}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPictureInPictureChange={enterPictureInPicture}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n          onSeekingChange={handleSeekingChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type React from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiDimensions, ApiMessage, ApiSponsoredMessage,\n} from '../../api/types';\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport { MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION } from '../../config';\nimport {\n  selectIsMessageProtected, selectMessageTimestampableDuration, selectTabState,\n} from '../../global/selectors';\nimport { ARE_WEBCODECS_SUPPORTED } from '../../util/browser/globalEnvironment';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\nimport { calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport getViewableMedia from './helpers/getViewableMedia';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentTimeSignal from '../../hooks/useCurrentTimeSignal';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalEffect } from '../../hooks/useSignalEffect';\nimport useThrottledCallback from '../../hooks/useThrottledCallback';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  item: MediaViewerItem;\n  isActive?: boolean;\n  withAnimation?: boolean;\n  isMoving?: boolean;\n  onClose: () => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: () => void;\n};\n\ntype StateProps = {\n  textMessage?: ApiMessage | ApiSponsoredMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  isHidden?: boolean;\n  playbackRate: number;\n  threadId?: ThreadId;\n  timestamp?: number;\n  maxTimestamp?: number;\n};\n\nconst ANIMATION_DURATION = 350;\nconst MOBILE_VERSION_CONTROL_WIDTH = 350;\nconst PLAYBACK_SAVE_INTERVAL = 1000;\n\nconst MediaViewerContent = ({\n  item,\n  isActive,\n  textMessage,\n  origin,\n  withAnimation,\n  isProtected,\n  volume,\n  playbackRate,\n  isMuted,\n  isHidden,\n  isMoving,\n  threadId,\n  timestamp,\n  maxTimestamp,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}: OwnProps & StateProps) => {\n  const { updateLastPlaybackTimestamp } = getActions();\n\n  const lang = useOldLang();\n\n  const isAvatar = item.type === 'avatar';\n  const isSponsoredMessage = item.type === 'sponsoredMessage';\n  const { media } = getViewableMedia(item) || {};\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isLocal,\n    isVideoAvatar,\n    mediaSize,\n    loadProgress,\n  } = useMediaProps({\n    media, isAvatar, origin, delay: withAnimation ? ANIMATION_DURATION : false,\n  });\n\n  const [, toggleControls] = useControlsSignal();\n  const [getCurrentTime] = useCurrentTimeSignal();\n\n  const isOpen = Boolean(media);\n  const { isMobile } = useAppLayout();\n\n  const toggleControlsOnMove = useLastCallback(() => {\n    toggleControls(true);\n  });\n\n  const updatePlaybackTimestamp = useThrottledCallback(() => {\n    if (!isActive || !textMessage || media?.mediaType !== 'video') return;\n    if (media.duration < MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION) return;\n\n    const message = 'id' in textMessage ? textMessage : undefined;\n    const currentTime = getCurrentTime();\n    if (!currentTime || !message || message.isInAlbum) return;\n\n    // Reset timestamp if we are close to the end of the video\n    const newTimestamp = media.duration - currentTime > PLAYBACK_SAVE_INTERVAL / 1000 ? currentTime : undefined;\n    updateLastPlaybackTimestamp({ chatId: message.chatId, messageId: message.id, timestamp: newTimestamp });\n  }, [getCurrentTime, isActive, media, textMessage], PLAYBACK_SAVE_INTERVAL);\n\n  useSignalEffect(updatePlaybackTimestamp, [getCurrentTime]);\n\n  if (!media) return undefined;\n\n  if (item.type === 'avatar') {\n    if (!isVideoAvatar) {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          {renderPhoto(\n            bestData,\n            calculateMediaViewerDimensions(dimensions!, false),\n            !isMobile && !isProtected,\n            isProtected,\n          )}\n        </div>\n      );\n    } else {\n      return (\n        <div key={media.id} className=\"MediaViewerContent\">\n          <VideoPlayer\n            key={media.id}\n            url={bestData}\n            isGif\n            posterData={bestImageData}\n            posterSize={calculateMediaViewerDimensions(dimensions!, false, true)}\n            loadProgress={loadProgress}\n            fileSize={mediaSize!}\n            isMediaViewerOpen={isOpen && isActive}\n            isProtected={isProtected}\n            isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n            noPlay={!isActive}\n            onClose={onClose}\n            isMuted\n            shouldCloseOnClick\n            volume={0}\n            isClickDisabled={isMoving}\n            playbackRate={1}\n            isSponsoredMessage={isSponsoredMessage}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        </div>\n      );\n    }\n  }\n\n  const textParts = textMessage && (textMessage.content.action?.type === 'suggestProfilePhoto'\n    ? lang('Conversation.SuggestedPhotoTitle')\n    : renderMessageText({\n      message: textMessage, maxTimestamp, threadId, forcePlayback: true, isForMediaViewer: true,\n    }));\n  const buttonText = textMessage && 'buttonText' in textMessage ? textMessage.buttonText : undefined;\n  const hasFooter = Boolean(textParts);\n  const posterSize = calculateMediaViewerDimensions(dimensions!, hasFooter, isVideo);\n  const isForceMobileVersion = isMobile || shouldForceMobileVersion(posterSize);\n\n  return (\n    <div\n      className={buildClassName('MediaViewerContent', hasFooter && 'has-footer')}\n      onMouseMove={isForceMobileVersion && !IS_TOUCH_ENV ? toggleControlsOnMove : undefined}\n    >\n      {isPhoto && renderPhoto(\n        bestData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      )}\n      {isVideo && (!isActive ? renderVideoPreview(\n        bestImageData,\n        posterSize,\n        !isMobile && !isProtected,\n        isProtected,\n      ) : (\n        <VideoPlayer\n          key={media.id}\n          url={bestData}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={posterSize}\n          loadProgress={loadProgress}\n          fileSize={mediaSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          noPlay={!isActive}\n          isPreviewDisabled={!ARE_WEBCODECS_SUPPORTED || isLocal}\n          onClose={onClose}\n          isMuted={isMuted}\n          isHidden={isHidden}\n          isForceMobileVersion={isForceMobileVersion}\n          isProtected={isProtected}\n          volume={volume}\n          isClickDisabled={isMoving}\n          playbackRate={playbackRate}\n          isSponsoredMessage={isSponsoredMessage}\n          handleSponsoredClick={handleSponsoredClick}\n          timestamp={timestamp}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          buttonText={buttonText}\n          onClick={onFooterClick}\n          isProtected={isProtected}\n          isForceMobileVersion={isForceMobileVersion}\n          isForVideo={isVideo && !isGif}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { item }): StateProps => {\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n      isHidden,\n      origin,\n      timestamp,\n      threadId,\n    } = selectTabState(global).mediaViewer;\n    const message = item.type === 'message' ? item.message : undefined;\n    const sponsoredMessage = item.type === 'sponsoredMessage' ? item.message : undefined;\n    const textMessage = message || sponsoredMessage;\n\n    const maxTimestamp = message && selectMessageTimestampableDuration(global, message, true);\n\n    return {\n      origin,\n      textMessage,\n      isProtected: message && selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n      threadId,\n      timestamp,\n      maxTimestamp,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  return blobUrl\n    ? (\n      <div style=\"position: relative;\">\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <img\n          src={blobUrl}\n          alt=\"\"\n          className={buildClassName(isProtected && 'is-protected')}\n          style={imageSize ? `width: ${imageSize.width}px` : ''}\n          draggable={Boolean(canDrag)}\n        />\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean, isProtected?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n        <div\n          style={wrapperStyle}\n        >\n          <video\n            style={videoStyle}\n            className={buildClassName(isProtected && 'is-protected')}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction shouldForceMobileVersion(posterSize?: { width: number; height: number }) {\n  if (!posterSize) return false;\n  return posterSize.width < MOBILE_VERSION_CONTROL_WIDTH;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin, ThreadId } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { useSignalRef } from '../../hooks/useSignalRef';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useControlsSignal from './hooks/useControlsSignal';\nimport useZoomChange from './hooks/useZoomChangeSignal';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  chatId?: string;\n  threadId?: ThreadId;\n  avatarOwnerId?: string;\n  origin?: MediaViewerOrigin;\n  withAnimation?: boolean;\n  isHidden?: boolean;\n  hasFooter?: boolean;\n  getNextItem: (from: MediaViewerItem, direction: number) => MediaViewerItem | undefined;\n  selectItem: (item: MediaViewerItem) => void;\n  loadMoreItemsIfNeeded: (item: MediaViewerItem) => void;\n  onFooterClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  handleSponsoredClick: (isFromMedia?: boolean) => void;\n  onClose: () => void;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_SELECT_MEDIA = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: ReturnType<typeof animateNumber> | undefined;\nlet cancelZoomAnimation: ReturnType<typeof animateNumber> | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  item,\n  isVideo,\n  isGif,\n  isOpen,\n  withAnimation,\n  isHidden,\n  isLoadingMoreMedia,\n  isSynced,\n  loadMoreItemsIfNeeded,\n  getNextItem,\n  selectItem,\n  onClose,\n  onFooterClick,\n  handleSponsoredClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const activeSlideRef = useRef<HTMLDivElement>();\n  const leftSlideRef = useRef<HTMLDivElement>();\n  const rightSlideRef = useRef<HTMLDivElement>();\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const initialContentRectRef = useRef<DOMRect | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const [isActive, setIsActive] = useState(true);\n  const [getZoomChange] = useZoomChange();\n  const prevZoomChangeRef = useRef(getZoomChange());\n  const isFullscreen = useFullscreenStatus();\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const [getTransform, setTransform] = useSignal<Transform>({ x: 0, y: 0, scale: 1 });\n  const transformRef = useSignalRef(getTransform);\n  const [getActiveItem, setActiveItem] = useSignal<MediaViewerItem | undefined>(item);\n  const activeItemRef = useSignalRef(getActiveItem);\n  const isScaled = useDerivedState(() => getTransform().scale !== 1, [getTransform]);\n  const activeItem = useDerivedState(getActiveItem);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const [getControlsVisible, setControlsVisible, lockControls] = useControlsSignal();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  const selectItemDebounced = useDebouncedCallback(selectItem, [selectItem], DEBOUNCE_SELECT_MEDIA, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n\n  const setIsActiveDebounced = useDebouncedCallback((value) => setIsActive(value), [], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = Boolean(isGif && !IS_IOS);\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleControlsVisibility = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setControlsVisible(!getControlsVisible());\n  });\n\n  useTimeout(() => setControlsVisible(true), ANIMATION_DURATION);\n\n  useEffect(() => {\n    const { scale, x, y } = transformRef.current;\n    // Only update active media if slide is in default position\n    if (x === 0 && y === 0 && scale === 1) {\n      setActiveItem(item);\n    }\n  }, [item, setActiveItem, transformRef]);\n\n  useEffect(() => {\n    if (!isSynced || !activeItem || isLoadingMoreMedia) return;\n    loadMoreItemsIfNeeded(activeItem);\n  }, [activeItem, loadMoreItemsIfNeeded, isSynced, isLoadingMoreMedia]);\n\n  useLayoutEffect(() => {\n    const { x, y, scale } = getTransform();\n    lockControls(scale !== 1);\n    if (leftSlideRef.current) {\n      leftSlideRef.current.style.transform = getTransformStyle(-windowWidth + x - SLIDES_GAP);\n    }\n    if (activeSlideRef.current) {\n      activeSlideRef.current.style.transform = getTransformStyle(x, y, scale);\n    }\n    if (rightSlideRef.current) {\n      rightSlideRef.current.style.transform = getTransformStyle(windowWidth + x + SLIDES_GAP);\n    }\n  }, [getTransform, lockControls, windowWidth]);\n\n  useEffect(() => {\n    if (!containerRef.current || activeItemRef.current === undefined || isHidden || isFullscreen) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const cActiveItem = activeItemRef.current;\n      if (cActiveItem === undefined) return false;\n      const nextItem = getNextItem(cActiveItem, direction);\n      if (nextItem !== undefined) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        const transform = transformRef.current;\n        const x = transform.x + offset;\n        setIsActive(false);\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (!withAnimation) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return [false, false];\n      if ((e.target as HTMLElement).closest('div.VideoPlayerControls')) {\n        return [false, false];\n      }\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const { scale } = transformRef.current;\n      if (scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ): [Transform, boolean, boolean] => {\n      const initialContentRect = initialContentRectRef.current;\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const onRelease = (e: MouseEvent | RealTouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      if (e.type === 'mouseup') {\n        setIsMouseDown(false);\n      }\n      const transform = transformRef.current;\n      const { y, scale } = transform;\n      let x = transform.x;\n      const absX = Math.abs(x);\n      const absY = Math.abs(y);\n\n      clearSwipeDirectionDebounced();\n      setIsActiveDebounced(true);\n\n      // If scale is less than 1 we need to bounce back\n      if (scale < 1) {\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [0, 0, 1],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      if (scale > 1) {\n        // Get current content boundaries\n        const s1 = Math.min(scale, MAX_ZOOM);\n        const scaleFactor = s1 / scale;\n\n        // Calculate new position based on the last zoom center to keep the zoom center\n        // at the same position when bouncing back from max zoom\n        let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n        let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n        // Arbitrary pan velocity coefficient\n        const k = 0.15;\n\n        // If scale didn't change, we need to add inertia to pan gesture\n        if (e.type !== 'wheel' && lastTransform.scale === scale) {\n          // Calculate user gesture velocity\n          const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n          const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n          // Add extra distance based on gesture velocity and last pan delta\n          x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n          y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n        }\n\n        [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: value[0],\n            y: value[1],\n            scale: value[2],\n          }),\n        });\n        return;\n      }\n      lastTransform = {\n        x,\n        y,\n        scale,\n      };\n      if (absY >= SWIPE_Y_THRESHOLD) {\n        onClose();\n        return;\n      }\n      // Bounce back if vertical swipe is below threshold\n      if (absY > 0) {\n        cancelAnimation = animateNumber({\n          from: y,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            x: 0,\n            y: value,\n            scale,\n          }),\n        });\n        return;\n      }\n      // Get horizontal swipe direction\n      const direction = x < 0 ? 1 : -1;\n      const cActiveItem = activeItemRef.current;\n      const nextItem = cActiveItem && getNextItem(cActiveItem, x < 0 ? 1 : -1);\n      // Get the direction of the last pan gesture.\n      // Could be different from the total horizontal swipe direction\n      // if user starts a swipe in one direction and then changes the direction\n      // we need to cancel slide transition\n      const dirX = panDelta.x < 0 ? -1 : 1;\n      if (nextItem !== undefined && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        // If image is shifted by more than SWIPE_X_THRESHOLD,\n        // We shift everything by one screen width and then set new active message id\n        x += offset;\n        setActiveItem(nextItem);\n        selectItemDebounced(nextItem);\n      }\n      // Then we always return to the original position\n      cancelAnimation = animateNumber({\n        from: x,\n        to: 0,\n        duration: ANIMATION_DURATION,\n        timing: easeOutCubic,\n        onUpdate: (value) => setTransform({\n          y: 0,\n          x: value,\n          scale: scale ?? 1,\n        }),\n      });\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls, .VideoPlayerControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      withWheelDrag: true,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        const { x, y, scale } = transformRef.current;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (x === 0 && y === 0 && scale === 1) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRectRef.current = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (isReleasedRef.current || checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const { x, y, scale } = transformRef.current;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (event.type === 'mousemove') return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > SWIPE_DIRECTION_THRESHOLD || absOffsetX / absOffsetY > SWIPE_DIRECTION_TOLERANCE) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            setIsActive(false);\n            const limit = windowWidth + SLIDES_GAP;\n            const x1 = clamp(dragOffsetX, -limit, limit);\n            setTransform({\n              x: x1,\n              y: 0,\n              scale,\n            });\n            // We know that at this point onRelease will trigger slide change,\n            // We can trigger onRelease directly instead of waiting for the debounced callback\n            // to avoid a delay\n            if (event.type === 'wheel' && Math.abs(x1) > SWIPE_X_THRESHOLD * 2) {\n              onRelease(event);\n              isReleasedRef.current = true;\n            }\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          const y1 = clamp(dragOffsetY, -limit, limit);\n          setTransform({\n            x: 0,\n            y: y1,\n            scale,\n          });\n          if (event.type === 'wheel' && Math.abs(y1) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        setIsMouseDown(false);\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        const { x, y, scale } = transformRef.current;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease,\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n  },\n  [\n    activeItemRef,\n    clearSwipeDirectionDebounced,\n    clickXThreshold,\n    getNextItem,\n    isFullscreen,\n    isHidden,\n    onClose,\n    selectItemDebounced,\n    setActiveItem,\n    setIsActiveDebounced,\n    setTransform,\n    shouldCloseOnVideo,\n    transformRef,\n    windowHeight,\n    windowWidth,\n    withAnimation,\n  ]);\n\n  useEffect(() => {\n    const zoomChange = getZoomChange();\n    const hasZoomChanged = prevZoomChangeRef.current !== undefined\n      && prevZoomChangeRef.current !== zoomChange;\n    if (!containerRef.current || !hasZoomChanged || isHidden || isFullscreen) return;\n    prevZoomChangeRef.current = zoomChange;\n    const { scale } = transformRef.current;\n    const dir = zoomChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.6;\n    const maxZoom = MAX_ZOOM * 3;\n    let steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (scale === 1 && dir > 0) steps = 20;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [getZoomChange, isHidden, isFullscreen, transformRef]);\n\n  const [prevItem, nextItem] = useMemo(() => {\n    if (activeItem === undefined) return [undefined, undefined];\n    return [getNextItem(activeItem, -1), getNextItem(activeItem, 1)];\n  }, [activeItem, getNextItem]);\n\n  if (activeItem === undefined) return undefined;\n\n  const hasPrev = prevItem !== undefined;\n  const hasNext = nextItem !== undefined;\n  const isMoving = isMouseDown && isScaled;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      <div className=\"MediaViewerSlide\" ref={leftSlideRef}>\n        {hasPrev && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={prevItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'MediaViewerSlide',\n          'MediaViewerSlide--active',\n          isMoving && 'MediaViewerSlide--moving',\n        )}\n        onClick={handleControlsVisibility}\n        ref={activeSlideRef}\n      >\n        <MediaViewerContent\n          item={activeItem}\n          withAnimation={withAnimation}\n          isActive={isActive}\n          isMoving={isMoving}\n          onClose={onClose}\n          onFooterClick={onFooterClick}\n          handleSponsoredClick={handleSponsoredClick}\n        />\n      </div>\n      <div className=\"MediaViewerSlide\" ref={rightSlideRef}>\n        {hasNext && !isScaled && !isResizing && (\n          <MediaViewerContent\n            withAnimation={withAnimation}\n            isMoving={isMoving}\n            item={nextItem}\n            onClose={onClose}\n            onFooterClick={onFooterClick}\n            handleSponsoredClick={handleSponsoredClick}\n          />\n        )}\n      </div>\n      {hasPrev && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {hasNext && !isScaled && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getTransformStyle(x = 0, y = 0, scale = 1) {\n  return `translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)})`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu, .SeekLine',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiPeer } from '../../api/types';\nimport type { MediaViewerItem } from './helpers/getViewableMedia';\n\nimport {\n  isChatChannel, isChatGroup,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectSender,\n} from '../../global/selectors';\nimport { formatMediaDateTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  item?: MediaViewerItem;\n};\n\ntype StateProps = {\n  owner?: ApiPeer;\n};\n\nconst BULLET = '\\u2022';\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  owner,\n  item,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n\n  const handleFocusMessage = useLastCallback(() => {\n    closeMediaViewer();\n\n    if (item?.type !== 'message') return;\n\n    const message = item.message;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId: message.chatId, messageId: message.id });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId: message.chatId, messageId: message.id });\n    }\n  });\n\n  const lang = useOldLang();\n\n  const subtitle = useMemo(() => {\n    if (!item || item.type === 'standalone') return undefined;\n\n    const avatarOwner = item.type === 'avatar' ? item.avatarOwner : undefined;\n    const profilePhotos = item.type === 'avatar' ? item.profilePhotos : undefined;\n    const avatar = profilePhotos?.photos[item.mediaIndex!];\n    const isFallbackAvatar = avatar?.id === profilePhotos?.fallbackPhoto?.id;\n    const isPersonalAvatar = avatar?.id === profilePhotos?.personalPhoto?.id;\n    const date = item.type === 'message' ? item.message.date : avatar?.date;\n    if (!date) return undefined;\n\n    const formattedDate = formatMediaDateTime(lang, date * 1000, true);\n    const count = profilePhotos?.count\n      && (profilePhotos.count + (profilePhotos?.fallbackPhoto ? 1 : 0));\n    const currentIndex = item.mediaIndex! + 1 + (profilePhotos?.personalPhoto ? -1 : 0);\n    const countText = count && lang('Of', [currentIndex, count]);\n\n    const parts: string[] = [];\n    if (avatar) {\n      const chat = !isUserId(avatarOwner!.id) ? avatarOwner as ApiChat : undefined;\n      const isChannel = chat && isChatChannel(chat);\n      const isGroup = chat && isChatGroup(chat);\n      parts.push(lang(\n        isPersonalAvatar ? 'lng_mediaview_profile_photo_by_you'\n          : isFallbackAvatar ? 'lng_mediaview_profile_public_photo'\n            : isChannel ? 'lng_mediaview_channel_photo'\n              : isGroup ? 'lng_mediaview_group_photo' : 'lng_mediaview_profile_photo',\n      ));\n    }\n\n    if (countText && !isPersonalAvatar && !isFallbackAvatar) {\n      parts.push(countText);\n    }\n\n    parts.push(formattedDate);\n\n    return parts.join(` ${BULLET} `);\n  }, [item, lang]);\n\n  if (!owner) {\n    return undefined;\n  }\n\n  const senderTitle = getPeerTitle(lang, owner);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      <Avatar key={owner.id} size=\"medium\" peer={owner} />\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {subtitle}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { item }): StateProps => {\n    const message = item?.type === 'message' ? item.message : undefined;\n    const messageSender = message && selectSender(global, message);\n\n    const owner = item?.type === 'avatar' ? item.avatarOwner : messageSender;\n\n    return {\n      owner,\n    };\n  },\n)(SenderInfo);\n","import type React from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPeer,\n  ApiPeerPhotos,\n  ApiPhoto,\n  ApiSponsoredMessage,\n} from '../../api/types';\nimport { type MediaViewerMedia, MediaViewerOrigin, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatMediaMessageIds, getMessagePaidMedia, isChatAdmin,\n} from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChatMediaSearch,\n  selectCurrentSharedMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerPhotos,\n  selectPerformanceSettingsValue,\n  selectScheduledMessage, selectSponsoredMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { isUserId } from '../../util/entities/ids';\nimport { MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport getViewableMedia, { getMediaViewerItem, type MediaViewerItem } from './helpers/getViewableMedia';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport { exitPictureInPictureIfNeeded, usePictureInPictureSignal } from '../../hooks/usePictureInPicture';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport { useMediaProps } from './hooks/useMediaProps';\n\nimport Icon from '../common/icons/Icon';\nimport ReportAvatarModal from '../common/ReportAvatarModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  messageId?: number;\n  message?: ApiMessage;\n  collectedMessageIds?: number[];\n  isChatWithSelf?: boolean;\n  canUpdateMedia?: boolean;\n  origin?: MediaViewerOrigin;\n  avatar?: ApiPhoto;\n  avatarOwner?: ApiPeer;\n  profilePhotos?: ApiPeerPhotos;\n  chatMessages?: Record<number, ApiMessage>;\n  sponsoredMessage?: ApiSponsoredMessage;\n  standaloneMedia?: MediaViewerMedia[];\n  mediaIndex?: number;\n  isHidden?: boolean;\n  withAnimation?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  withDynamicLoading?: boolean;\n  isLoadingMoreMedia?: boolean;\n  isSynced?: boolean;\n};\n\nconst ANIMATION_DURATION = 250;\nconst AVATAR_LOAD_TRIGGER = 4;\n\nconst MediaViewer = ({\n  chatId,\n  threadId,\n  messageId,\n  message,\n  collectedMessageIds,\n  isChatWithSelf,\n  canUpdateMedia,\n  origin,\n  avatar,\n  avatarOwner,\n  profilePhotos,\n  chatMessages,\n  sponsoredMessage,\n  standaloneMedia,\n  mediaIndex,\n  withAnimation,\n  isHidden,\n  shouldSkipHistoryAnimations,\n  withDynamicLoading,\n  isLoadingMoreMedia,\n  isSynced,\n}: StateProps) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n    searchChatMediaMessages,\n    loadMoreProfilePhotos,\n    clickSponsored,\n    openUrl,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || message || standaloneMedia || sponsoredMessage);\n  const { isMobile } = useAppLayout();\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const senderId = message?.senderId || avatarOwner?.id || message?.chatId;\n  const prevSenderId = usePreviousDeprecated<string | undefined>(senderId);\n  const headerAnimation = withAnimation ? 'slideFade' : 'none';\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  /* Controls */\n  const [isReportAvatarModalOpen, openReportAvatarModal, closeReportAvatarModal] = useFlag();\n\n  const currentItem = getMediaViewerItem({\n    message, avatarOwner, standaloneMedia, profilePhotos, mediaIndex, sponsoredMessage,\n  });\n  const { media, isSingle } = getViewableMedia(currentItem) || {};\n\n  const {\n    isVideo,\n    isPhoto,\n    bestImageData,\n    bestData,\n    dimensions,\n    isGif,\n    isFromSharedMedia,\n  } = useMediaProps({\n    media, isAvatar: Boolean(avatarOwner), origin, delay: isGhostAnimation && ANIMATION_DURATION,\n  });\n\n  const canReportAvatar = (() => {\n    if (isChatWithSelf) return false;\n    if (currentItem?.type !== 'avatar' || !avatarOwner) return false;\n    const info = currentItem.profilePhotos;\n    if (media === info.personalPhoto) return false;\n    return true;\n  })();\n  const isVisible = !isHidden && isOpen;\n\n  const messageMediaIds = useMemo(() => {\n    return withDynamicLoading\n      ? collectedMessageIds\n      : getChatMediaMessageIds(chatMessages || {}, collectedMessageIds || [], isFromSharedMedia);\n  }, [chatMessages, collectedMessageIds, isFromSharedMedia, withDynamicLoading]);\n\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || animationKey.current === undefined)) {\n    animationKey.current = isSingle ? 0 : (messageId || mediaIndex);\n  }\n\n  const [getIsPictureInPicture] = usePictureInPictureSignal();\n\n  useEffect(() => {\n    if (!isOpen || getIsPictureInPicture()) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      stopPriorityPlayback();\n      enableDirectTextInput();\n    };\n  }, [isOpen, getIsPictureInPicture]);\n\n  useEffect(() => {\n    if (isVisible) {\n      exitPictureInPictureIfNeeded();\n    }\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (isMobile) {\n      requestMutation(() => {\n        document.body.classList.toggle('is-media-viewer-open', isOpen);\n      });\n    }\n  }, [isMobile, isOpen]);\n\n  const headerRef = useRef<HTMLDivElement>();\n  useElectronDrag(headerRef);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    mql.addEventListener('change', forceUpdate);\n\n    return () => {\n      mql.removeEventListener('change', forceUpdate);\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePreviousDeprecated<ApiMessage | undefined>(message);\n  const prevIsHidden = usePreviousDeprecated<boolean | undefined>(isHidden);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const prevItem = usePreviousDeprecated(currentItem);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const textParts = message ? renderMessageText({ message, forcePlayback: true, isForMediaViewer: true }) : undefined;\n  const hasFooter = Boolean(textParts);\n  const shouldAnimateOpening = prevIsHidden && prevItem !== currentItem;\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && (shouldAnimateOpening || !prevItem)) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions!, isVideo, message, mediaIndex);\n    }\n\n    if (isGhostAnimation && !isOpen && prevItem) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage, prevItem?.mediaIndex);\n    }\n  }, [\n    bestImageData, dimensions, hasFooter, isGhostAnimation, isOpen, isVideo, message, origin,\n    prevBestImageData, prevItem, prevMessage, prevOrigin, shouldAnimateOpening, mediaIndex,\n  ]);\n\n  const handleClose = useLastCallback(() => closeMediaViewer());\n\n  const handleFooterClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    if (e.target instanceof HTMLElement && e.target.closest('a')) return; // Prevent closing on timestamp click\n\n    handleClose();\n\n    if (!chatId || !messageId) return;\n\n    if (isMobile) {\n      setTimeout(() => {\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId });\n    }\n  });\n\n  const handleSponsoredClick = useLastCallback((isFromMedia?: boolean) => {\n    if (!sponsoredMessage || !chatId) return;\n\n    clickSponsored({ isMedia: isFromMedia, isFullscreen: true, randomId: sponsoredMessage.randomId });\n    openUrl({ url: sponsoredMessage.url });\n    closeMediaViewer();\n  });\n\n  const handleForward = useLastCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId!,\n      messageIds: [messageId!],\n    });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  const loadMoreItemsIfNeeded = useLastCallback((item?: MediaViewerItem) => {\n    if (!item || isLoadingMoreMedia) return;\n\n    if (item.type === 'avatar') {\n      const isNearEnd = item.mediaIndex >= item.profilePhotos.photos.length - AVATAR_LOAD_TRIGGER;\n      if (!isNearEnd) return;\n      loadMoreProfilePhotos({ peerId: item.avatarOwner.id });\n    }\n\n    if (item.type === 'message' && withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: item.message.id });\n    }\n  });\n\n  const getNextItem = useLastCallback((from: MediaViewerItem, direction: number): MediaViewerItem | undefined => {\n    if (direction === 0 || isSingle) return undefined;\n\n    if (from.type === 'standalone') {\n      const { media: fromMedia, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && nextIndex < fromMedia.length) {\n        return { type: 'standalone', media: fromMedia, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'avatar') {\n      const { avatarOwner: fromAvatarOwner, profilePhotos: fromProfilePhotos, mediaIndex: fromMediaIndex } = from;\n      const nextIndex = fromMediaIndex + direction;\n      if (nextIndex >= 0 && fromProfilePhotos && nextIndex < fromProfilePhotos.photos.length) {\n        return {\n          type: 'avatar',\n          avatarOwner: fromAvatarOwner,\n          profilePhotos: fromProfilePhotos,\n          mediaIndex: nextIndex,\n        };\n      }\n\n      return undefined;\n    }\n\n    if (from.type === 'sponsoredMessage') {\n      const { message: fromSponsoredMessage, mediaIndex: fromSponsoredMessageIndex } = from;\n      const nextIndex = fromSponsoredMessageIndex! + direction;\n      if (nextIndex >= 0 && fromSponsoredMessage) {\n        return { type: 'sponsoredMessage', message: fromSponsoredMessage, mediaIndex: nextIndex };\n      }\n\n      return undefined;\n    }\n\n    const { message: fromMessage, mediaIndex: fromMediaIndex } = from;\n\n    const paidMedia = getMessagePaidMedia(fromMessage);\n    if (paidMedia) {\n      const nextIndex = fromMediaIndex! + direction;\n\n      if (nextIndex >= 0 && nextIndex < paidMedia.extendedMedia.length) {\n        return { type: 'message', message: fromMessage, mediaIndex: nextIndex };\n      }\n    }\n\n    const index = messageMediaIds?.indexOf(fromMessage.id);\n    if (index === undefined) return undefined;\n    const nextIndex = index + direction;\n    const nextMessageId = messageMediaIds![nextIndex];\n    const nextMessage = chatMessages?.[nextMessageId];\n    if (nextMessage) {\n      return { type: 'message', message: nextMessage };\n    }\n\n    return undefined;\n  });\n\n  const openMediaViewerItem = useLastCallback((item?: MediaViewerItem) => {\n    if (!item) {\n      handleClose();\n      return;\n    }\n\n    const itemChatId = item.type === 'avatar'\n      ? item.avatarOwner.id : item.type === 'message'\n        ? item.message.chatId : undefined;\n    const itemMessageId = item.type === 'message' ? item.message.id : undefined;\n    const itemStandaloneMedia = item.type === 'standalone' ? item.media : undefined;\n\n    openMediaViewer({\n      origin: origin!,\n      chatId: itemChatId,\n      messageId: itemMessageId,\n      standaloneMedia: itemStandaloneMedia,\n      mediaIndex: item.mediaIndex,\n      isAvatarView: item.type === 'avatar',\n      withDynamicLoading,\n    }, {\n      forceOnHeavyAnimation: true,\n    });\n  });\n\n  const handleBeforeDelete = useLastCallback(() => {\n    const mediaCount = profilePhotos?.photos.length\n      || standaloneMedia?.length || messageMediaIds?.length || 0;\n    if (mediaCount <= 1 || !currentItem) {\n      handleClose();\n      return;\n    }\n    // Before deleting, select previous media\n    const prevMedia = getNextItem(currentItem, -1);\n    if (prevMedia) {\n      openMediaViewerItem(prevMedia);\n      return;\n    }\n\n    if ((currentItem.type === 'avatar' && isUserId(currentItem.avatarOwner.id)) || currentItem.type === 'standalone') {\n      // Keep current item, it'll update when indexes shift\n      return;\n    }\n\n    handleClose();\n  });\n\n  const lang = useOldLang();\n\n  return (\n    <ShowTransition\n      id=\"MediaViewer\"\n      isOpen={isOpen}\n      isHidden={isHidden}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined} ref={headerRef}>\n        {isMobile && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={handleClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          <SenderInfo\n            key={media?.id}\n            item={currentItem}\n          />\n        </Transition>\n        <MediaViewerActions\n          mediaData={bestData}\n          isVideo={isVideo}\n          item={currentItem}\n          canUpdateMedia={canUpdateMedia}\n          canReportAvatar={canReportAvatar}\n          onBeforeDelete={handleBeforeDelete}\n          onReportAvatar={openReportAvatarModal}\n          onCloseMediaViewer={handleClose}\n          onForward={handleForward}\n        />\n        <ReportAvatarModal\n          isOpen={isReportAvatarModalOpen}\n          onClose={closeReportAvatarModal}\n          photo={avatar}\n          peerId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        item={currentItem}\n        loadMoreItemsIfNeeded={loadMoreItemsIfNeeded}\n        isLoadingMoreMedia={isLoadingMoreMedia}\n        isSynced={isSynced}\n        getNextItem={getNextItem}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner?.id}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        isVideo={isVideo}\n        withAnimation={withAnimation}\n        onClose={handleClose}\n        selectItem={openMediaViewerItem}\n        isHidden={isHidden}\n        onFooterClick={handleFooterClick}\n        handleSponsoredClick={handleSponsoredClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { mediaViewer, shouldSkipHistoryAnimations } = selectTabState(global);\n    const {\n      chatId,\n      threadId,\n      messageId,\n      origin,\n      isHidden,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isAvatarView,\n      isSponsoredMessage,\n    } = mediaViewer;\n    const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n    const { currentUserId, isSynced } = global;\n    const isChatWithSelf = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    if (isAvatarView) {\n      const peer = selectPeer(global, chatId!);\n      let canUpdateMedia = false;\n      if (peer) {\n        canUpdateMedia = isUserId(peer.id) ? peer.id === currentUserId : isChatAdmin(peer as ApiChat);\n      }\n\n      const profilePhotos = selectPeerPhotos(global, chatId!);\n\n      return {\n        profilePhotos,\n        avatar: profilePhotos?.photos[mediaIndex!],\n        avatarOwner: peer,\n        isLoadingMoreMedia: profilePhotos?.isLoading,\n        isChatWithSelf,\n        canUpdateMedia,\n        withAnimation,\n        origin,\n        shouldSkipHistoryAnimations,\n        isHidden,\n        standaloneMedia,\n        mediaIndex,\n        isSynced,\n      };\n    }\n\n    let message: ApiMessage | undefined;\n    if (chatId && messageId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        message = selectScheduledMessage(global, chatId, messageId);\n      } else {\n        message = selectChatMessage(global, chatId, messageId);\n      }\n    }\n\n    let sponsoredMessage: ApiSponsoredMessage | undefined;\n    if (isSponsoredMessage && chatId) {\n      if (origin === MediaViewerOrigin.SponsoredMessage) {\n        sponsoredMessage = selectSponsoredMessage(global, chatId);\n      }\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (chatId) {\n      if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n        chatMessages = selectChatScheduledMessages(global, chatId);\n      } else {\n        chatMessages = selectChatMessages(global, chatId);\n      }\n    }\n\n    let isLoadingMoreMedia = false;\n    const isOriginInline = origin === MediaViewerOrigin.Inline;\n    const isOriginAlbum = origin === MediaViewerOrigin.Album;\n    let collectedMessageIds: number[] | undefined;\n\n    if (chatId && threadId && messageId) {\n      if (withDynamicLoading && (isOriginInline || isOriginAlbum)) {\n        const currentSearch = selectCurrentChatMediaSearch(global);\n        isLoadingMoreMedia = Boolean(currentSearch?.isLoading);\n        const { foundIds } = (currentSearch?.currentSegment) || {};\n        collectedMessageIds = foundIds;\n      } else if (origin === MediaViewerOrigin.SharedMedia) {\n        const currentSearch = selectCurrentSharedMediaSearch(global);\n        const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n        collectedMessageIds = foundIds;\n      } else if (isOriginInline || isOriginAlbum) {\n        const outlyingList = selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n        collectedMessageIds = outlyingList || selectListedIds(global, chatId, threadId);\n      }\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      sponsoredMessage,\n      collectedMessageIds,\n      withAnimation,\n      isHidden,\n      shouldSkipHistoryAnimations,\n      withDynamicLoading,\n      standaloneMedia,\n      mediaIndex,\n      isLoadingMoreMedia,\n      isSynced,\n    };\n  },\n)(MediaViewer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"bu_hGbaa\",\"fullSize\":\"W9A8SEMl\",\"backdrop\":\"OFh6u50Q\",\"captionBackdrop\":\"Jd1DYS6Y\",\"backdropNonInteractive\":\"xe67dhtF\",\"close\":\"Mye8Dwxa\",\"wrapper\":\"gLHHo5k8\",\"slideAnimation\":\"GJVwqV9e\",\"slideAnimationToActive\":\"_Yn4SWUB\",\"content\":\"hGCH03qc\",\"slideAnimationFromActive\":\"ZecqXqKy\",\"storyHeader\":\"e7HHuS1g\",\"composer\":\"FXineBYO\",\"caption\":\"RKedwa0I\",\"captionGradient\":\"sHNAfxzf\",\"media\":\"PVZ8TOWS\",\"mediaPreview\":\"lQfkulvp\",\"contentInner\":\"Wi0DXPH2\",\"name\":\"Ka1CGfzq\",\"slide\":\"urTtSsk9\",\"mobileSlide\":\"AjXOHOgE\",\"slidePreview\":\"Sef28wEh\",\"activeSlide\":\"uAlXNXJN\",\"slideInner\":\"g8ypsnnC\",\"mediaWrapper\":\"YiuvOPgT\",\"forward\":\"pGKsAszF\",\"storyIndicators\":\"jGDd2sza\",\"sender\":\"eMYhXF_X\",\"senderInfoTransition\":\"PXnfXZur\",\"senderInfo\":\"WpyVfrsc\",\"senderMeta\":\"jmKI_lhC\",\"senderName\":\"H1uod43o\",\"storyMetaRow\":\"zimpR8Hz\",\"storyMeta\":\"hGTnZuar\",\"closeButton\":\"WlLsjJ2Z\",\"actions\":\"GrsJNw3y\",\"active\":\"q756IpZB\",\"visibilityButton\":\"prxptFFf\",\"visibilityButtonSelf\":\"_MVsZpgB\",\"button\":\"TkphaPyQ\",\"buttonMenu\":\"K0_xAdzf\",\"captionInner\":\"D_5mWNmi\",\"captionContent\":\"ilyTRZtw\",\"captionText\":\"hmFA5qb1\",\"hasOverflow\":\"e1gyTmKe\",\"expanded\":\"HIMnUViv\",\"animate\":\"CvnxnCxN\",\"withShowMore\":\"Vq8pl_kQ\",\"captionShowMore\":\"bM5rlQtM\",\"navigate\":\"nZ30pf4g\",\"prev\":\"SXpRZiax\",\"next\":\"twOBFwUE\",\"modal\":\"nLPOogqS\",\"thumbnail\":\"MnNC7VHS\",\"ghost\":\"fME2l_yv\",\"ghost2\":\"TYicp2_K\",\"ghostImage\":\"HjoURJRK\",\"forwardHeader\":\"JJFtefb9\",\"clickable\":\"BsqMBS2I\",\"headerTitle\":\"G8OgmMDJ\",\"forwardInfo\":\"_M8CgT7s\",\"fromPeer\":\"nJr8QgYX\"};","import type { IDimensions } from '../../../types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport fastBlur from '../../../lib/fastBlur';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getPeerStoryHtmlId } from '../../../global/helpers';\nimport { applyStyles } from '../../../util/animation';\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport stopEvent from '../../../util/stopEvent';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport storyRibbonStyles from '../StoryRibbon.module.scss';\nimport styles from '../StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 200;\nconst OFFSET_BOTTOM = 3.5 * REM;\nconst MOBILE_OFFSET = 0.5 * REM;\nconst MOBILE_WIDTH = 600;\n\nexport function animateOpening(\n  userId: string,\n  origin: StoryViewerOrigin,\n  thumb: string,\n  bestImageData: string | undefined,\n  dimensions: IDimensions,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, userId);\n  if (!fromImage) {\n    return;\n  }\n  const { width: windowWidth, height: windowHeight } = windowSize.get();\n  let { width: toWidth, height: toHeight } = dimensions;\n\n  const isMobile = windowWidth <= MOBILE_WIDTH;\n\n  if (isMobile) {\n    toWidth = windowWidth - 2 * MOBILE_OFFSET;\n    toHeight = windowHeight - OFFSET_BOTTOM - 2 * MOBILE_OFFSET;\n\n    const safeAreaBottom = getComputedStyle(document.documentElement).getPropertyValue('--safe-area-bottom');\n    if (safeAreaBottom) {\n      toHeight -= parseFloat(safeAreaBottom);\n    }\n  }\n\n  const toLeft = isMobile ? MOBILE_OFFSET : (windowWidth - toWidth) / 2;\n  const toTop = isMobile ? MOBILE_OFFSET : (windowHeight - (toHeight + OFFSET_BOTTOM)) / 2;\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData || thumb, !bestImageData);\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: '',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(\n  userId: string,\n  origin: StoryViewerOrigin,\n  bestImageData: string,\n) {\n  const { mediaEl: toImage } = getNodes(origin, userId);\n\n  const fromImage = document.getElementById('StoryViewer')!.querySelector<HTMLImageElement>(\n    `.${styles.mobileSlide} .${styles.media}, .${styles.activeSlide} .${styles.media}`,\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: toTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  const toTranslateX = (toLeft + toWidth / 2) - (fromLeft + fromWidth / 2);\n  const toTranslateY = (toTop + toHeight / 2) - (fromTop + fromHeight / 2);\n  const toScaleX = toWidth / fromWidth;\n  const toScaleY = toHeight / fromHeight;\n\n  requestMutation(() => {\n    const ghost = createGhost(bestImageData);\n    applyStyles(ghost, {\n      top: `${fromTop}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromHeight}px`,\n    });\n\n    const ghost2 = createGhost(toImage.src, undefined, true);\n    const ghost2Top = (fromTop + fromHeight / 2) - fromWidth / 2;\n    applyStyles(ghost2, {\n      top: `${ghost2Top}px`,\n      left: `${fromLeft}px`,\n      width: `${fromWidth}px`,\n      height: `${fromWidth}px`,\n    });\n\n    const container = document.getElementById('StoryViewer')!;\n    container.appendChild(ghost);\n    document.body.appendChild(ghost2);\n    document.body.classList.add('ghost-animating');\n\n    requestMutation(() => {\n      applyStyles(ghost, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX}, ${toScaleY})`,\n      });\n\n      applyStyles(ghost2, {\n        transform: `translate3d(${toTranslateX}px, ${toTranslateY}px, 0) scale(${toScaleX})`,\n        opacity: '1',\n      });\n\n      setTimeout(() => {\n        requestMutation(() => {\n          if (container.contains(ghost)) {\n            container.removeChild(ghost);\n          }\n\n          if (document.body.contains(ghost2)) {\n            document.body.removeChild(ghost2);\n          }\n\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nfunction createGhost(source: string, hasBlur = false, isGhost2 = false) {\n  const ghost = document.createElement('div');\n  ghost.classList.add(!isGhost2 ? styles.ghost : styles.ghost2);\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n  img.classList.add(styles.ghostImage);\n\n  if (hasBlur) {\n    const canvas = document.createElement('canvas');\n    canvas.classList.add(styles.thumbnail);\n    img.onload = () => {\n      const ctx = canvas.getContext('2d', { alpha: false })!;\n      const {\n        width,\n        height,\n      } = img;\n\n      requestMutation(() => {\n        canvas.width = width;\n        canvas.height = height;\n\n        if (IS_CANVAS_FILTER_SUPPORTED) {\n          ctx.filter = `blur(${RADIUS}px)`;\n        }\n\n        ctx.drawImage(img, -RADIUS * 2, -RADIUS * 2, width + RADIUS * 4, height + RADIUS * 4);\n\n        if (!IS_CANVAS_FILTER_SUPPORTED) {\n          fastBlur(ctx, 0, 0, width, height, RADIUS, ITERATIONS);\n        }\n      });\n    };\n    img.src = source;\n    ghost.appendChild(canvas);\n  } else {\n    img.src = source;\n    ghost.appendChild(img);\n  }\n\n  return ghost;\n}\n\nfunction getNodes(origin: StoryViewerOrigin, userId: string) {\n  let containerSelector;\n  const mediaSelector = `#${getPeerStoryHtmlId(userId)}`;\n\n  switch (origin) {\n    case StoryViewerOrigin.StoryRibbon:\n      containerSelector = `#LeftColumn .${storyRibbonStyles.root}`;\n      break;\n    case StoryViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition_slide-active .ChatInfo';\n      break;\n    case StoryViewerOrigin.ChatList:\n      containerSelector = '#LeftColumn .chat-list';\n      break;\n    case StoryViewerOrigin.SearchResult:\n      containerSelector = '#LeftColumn .LeftSearch--container';\n      break;\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement>(`${mediaSelector} img`);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[0],\n  };\n}\n","import type { IDimensions } from '../../../types';\n\nimport { roundToNearestEven } from '../../../util/math';\n\nexport const BASE_STORY_WIDTH = 720;\nexport const BASE_STORY_HEIGHT = 1280;\nconst BASE_SCREEN_WIDTH = 1200;\nconst BASE_SCREEN_HEIGHT = 800;\nconst BASE_ACTIVE_SLIDE_WIDTH = 405;\nconst BASE_ACTIVE_SLIDE_HEIGHT = 720;\nconst BASE_SLIDE_WIDTH = 135;\nconst BASE_SLIDE_HEIGHT = 240;\nconst BASE_GAP_WIDTH = 40;\n\nexport function calculateSlideSizes(windowWidth: number, windowHeight: number): {\n  activeSlide: IDimensions;\n  slide: IDimensions;\n  scale: number;\n  toActiveScale: number;\n  fromActiveScale: number;\n} {\n  const scale = calculateScale(BASE_SCREEN_WIDTH, BASE_SCREEN_HEIGHT, windowWidth, windowHeight);\n\n  const activeSlideWidth = roundToNearestEven(BASE_ACTIVE_SLIDE_WIDTH * scale);\n  const slideWidth = roundToNearestEven(BASE_SLIDE_WIDTH * scale);\n  // Avoid fractional values to prevent blurry text\n  return {\n    activeSlide: {\n      width: activeSlideWidth,\n      height: roundToNearestEven(BASE_ACTIVE_SLIDE_HEIGHT * scale),\n    },\n    slide: {\n      width: slideWidth,\n      height: roundToNearestEven(BASE_SLIDE_HEIGHT * scale),\n    },\n    scale,\n    toActiveScale: activeSlideWidth / slideWidth,\n    fromActiveScale: slideWidth / activeSlideWidth,\n  };\n}\n\nexport function calculateOffsetX({\n  scale,\n  slideAmount,\n  isActiveSlideSize,\n  isMoveThroughActiveSlide,\n  isBackward,\n}: {\n  scale: number;\n  slideAmount: number;\n  isActiveSlideSize: boolean;\n  isMoveThroughActiveSlide?: boolean;\n  isBackward: boolean;\n}) {\n  const mainOffset = BASE_GAP_WIDTH + (isActiveSlideSize ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH);\n  const additionalOffset = (Math.abs(slideAmount) - 1)\n    * ((isMoveThroughActiveSlide ? BASE_ACTIVE_SLIDE_WIDTH : BASE_SLIDE_WIDTH) + BASE_GAP_WIDTH);\n  const totalOffset = roundToNearestEven((mainOffset + additionalOffset) * scale);\n\n  return isBackward ? -totalOffset : totalOffset;\n}\n\nfunction calculateScale(baseWidth: number, baseHeight: number, newWidth: number, newHeight: number) {\n  const widthScale = newWidth / baseWidth;\n  const heightScale = newHeight / baseHeight;\n\n  return Math.min(widthScale, heightScale);\n}\n","import { useMemo } from '../../../lib/teact/teact';\n\nimport { calculateSlideSizes } from '../helpers/dimensions';\n\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nexport default function useSlideSizes() {\n  const { width: windowWidth, height: windowHeight } = useWindowSize();\n  return useMemo(() => calculateSlideSizes(windowWidth, windowHeight), [windowWidth, windowHeight]);\n}\n","import type { ApiTypeStory } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStoryMediaHash, hasMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nexport default function useStoryProps(\n  story?: ApiTypeStory, isCurrentUserPremium = false, isDropdownMenuOpen = false,\n) {\n  const isLoadedStory = story && 'content' in story;\n  const isDeletedStory = story && 'isDeleted' in story;\n  const hasText = isLoadedStory ? hasMessageText(story) : false;\n  const hasForwardInfo = isLoadedStory && Boolean(story.forwardInfo);\n\n  let thumbnail: string | undefined;\n  if (isLoadedStory) {\n    if (story.content.photo?.thumbnail) {\n      thumbnail = story.content.photo.thumbnail.dataUri;\n    }\n    if (story.content.video?.thumbnail?.dataUri) {\n      thumbnail = story.content.video.thumbnail.dataUri;\n    }\n  }\n\n  const previewHash = isLoadedStory ? getStoryMediaHash(story) : undefined;\n  const previewBlobUrl = useMedia(previewHash);\n  const isVideo = Boolean(isLoadedStory && story.content.video);\n  const noSound = isLoadedStory && story.content.video?.noSound;\n  const fullMediaHash = isLoadedStory ? getStoryMediaHash(story, 'full') : undefined;\n  const fullMediaData = useMedia(fullMediaHash, !story, isVideo ? ApiMediaFormat.Progressive : ApiMediaFormat.BlobUrl);\n  const altMediaHash = isVideo && isLoadedStory ? getStoryMediaHash(story, 'full', true) : undefined;\n  const altMediaData = useMedia(altMediaHash, !story, ApiMediaFormat.Progressive);\n\n  const hasFullData = Boolean(fullMediaData || altMediaData);\n  const bestImageData = isVideo ? previewBlobUrl : fullMediaData || previewBlobUrl;\n  const hasThumb = !previewBlobUrl && !hasFullData;\n\n  const canDownload = isCurrentUserPremium && isLoadedStory && !story.noForwards;\n  const downloadHash = isLoadedStory ? getStoryMediaHash(story, 'download') : undefined;\n  const downloadMediaData = useMedia(downloadHash, !canDownload && !isDropdownMenuOpen);\n\n  return {\n    isLoadedStory,\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewHash,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaHash,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    bestImageData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"GrE47IXS\",\"closeButton\":\"NlWSF1pA\",\"stealthIcon\":\"qKi5jsGM\",\"title\":\"BFctFGoT\",\"description\":\"fZIJH4IG\",\"listItem\":\"RGD70uBt\",\"icon\":\"HCYfPccW\",\"button\":\"AM_sxoXP\",\"subtitle\":\"L8oRQyKb\"};","import { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStealthMode } from '../../api/types';\n\nimport { selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport TextTimer from '../ui/TextTimer';\n\nimport styles from './StealthModeModal.module.scss';\n\ntype StateProps = {\n  isOpen?: boolean;\n  stealthMode?: ApiStealthMode;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StealthModeModal = ({ isOpen, stealthMode, isCurrentUserPremium }: StateProps) => {\n  const {\n    toggleStealthModal,\n    activateStealthMode,\n    showNotification,\n    openPremiumModal,\n  } = getActions();\n  const [isOnCooldown, setIsOnCooldown] = useState(false);\n\n  useEffect(() => {\n    if (!stealthMode) return;\n    const serverTime = getServerTime();\n    if (stealthMode.cooldownUntil && stealthMode.cooldownUntil > serverTime) {\n      setIsOnCooldown(true);\n    }\n  }, [stealthMode, isOpen]);\n\n  const lang = useOldLang();\n\n  const handleTimerEnds = useLastCallback(() => {\n    setIsOnCooldown(false);\n  });\n\n  const handleClose = useLastCallback(() => {\n    toggleStealthModal({ isOpen: false });\n  });\n\n  const handleActivate = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({ initialSection: 'stories' });\n      return;\n    }\n\n    activateStealthMode();\n    showNotification({\n      title: lang('StealthModeOn'),\n      message: lang('StealthModeOnHint'),\n    });\n    toggleStealthModal({ isOpen: false });\n  });\n\n  return (\n    <Modal\n      className=\"component-theme-dark\"\n      contentClassName={styles.root}\n      isOpen={isOpen}\n      isSlim\n      onClose={handleClose}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.stealthIcon}>\n        <Icon name=\"eye-crossed-outline\" />\n      </div>\n      <div className={styles.title}>{lang('StealthMode')}</div>\n      <div className={styles.description}>\n        {lang(isCurrentUserPremium ? 'StealthModeHint' : 'StealthModePremiumHint')}\n      </div>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-past\" className={styles.icon} />}\n      >\n        <span className=\"title\">{lang('HideRecentViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideRecentViewsDescription')}</span>\n      </ListItem>\n      <ListItem\n        className={buildClassName(styles.listItem, 'smaller-icon')}\n        multiline\n        inactive\n        leftElement={<Icon name=\"stealth-future\" className={styles.icon} aria-hidden />}\n      >\n        <span className=\"title\">{lang('HideNextViews')}</span>\n        <span className={buildClassName('subtitle', styles.subtitle)}>{lang('HideNextViewsDescription')}</span>\n      </ListItem>\n      <Button\n        className={styles.button}\n        size=\"smaller\"\n        disabled={isOnCooldown}\n        isShiny={!isCurrentUserPremium}\n        withPremiumGradient={!isCurrentUserPremium}\n        onClick={handleActivate}\n      >\n        {!isCurrentUserPremium ? lang('UnlockStealthMode')\n          : isOnCooldown\n            ? (<TextTimer langKey=\"AvailableIn\" endsAt={stealthMode!.cooldownUntil!} onEnd={handleTimerEnds} />)\n            : lang('EnableStealthMode')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const tabState = selectTabState(global);\n\n  return {\n    isOpen: tabState.storyViewer?.isStealthModalOpen,\n    stealthMode: global.stories.stealthMode,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StealthModeModal));\n","import { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ninterface OwnProps {\n  isOpen: boolean;\n  story?: ApiTypeStory;\n  onClose: NoneToVoidFunction;\n}\n\nfunction StoryDeleteConfirmModal({\n  isOpen, story, onClose,\n}: OwnProps) {\n  const { deleteStory, openNextStory } = getActions();\n\n  const lang = useOldLang();\n\n  const handleDeleteStoryClick = useCallback(() => {\n    if (!story) {\n      return;\n    }\n\n    openNextStory();\n    deleteStory({ peerId: story.peerId, storyId: story.id });\n    onClose();\n  }, [onClose, story]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('DeleteStoryTitle')}\n      text={lang('DeleteStorySubtitle')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteStoryClick}\n      confirmIsDestructive\n      className=\"component-theme-dark\"\n    />\n  );\n}\n\nexport default memo(StoryDeleteConfirmModal);\n","import { memo, useMemo, useState } from '../../../lib/teact/teact';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\n\ninterface OwnProps {\n  id: string;\n  contactListIds?: string[];\n  currentUserId: string;\n  selectedIds?: string[];\n  lockedIds?: string[];\n  onSelect: (selectedIds: string[]) => void;\n}\n\nfunction AllowDenyList({\n  id,\n  contactListIds,\n  currentUserId,\n  selectedIds,\n  lockedIds,\n  onSelect,\n}: OwnProps) {\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((userId) => userId !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...selectedIds || [], ...contactIds], query: searchQuery, type: 'user' }));\n  }, [contactListIds, currentUserId, searchQuery, selectedIds]);\n\n  return (\n    <PeerPicker\n      key={id}\n      itemIds={displayedIds}\n      selectedIds={selectedIds ?? MEMO_EMPTY_ARRAY}\n      lockedSelectedIds={lockedIds}\n      filterValue={searchQuery}\n      filterPlaceholder={lang('Search')}\n      searchInputId={`${id}-picker-search`}\n      isSearchable\n      withDefaultPadding\n      forceShowSelf\n      onSelectedIdsChange={onSelect}\n      onFilterChange={setSearchQuery}\n      allowMultiple\n      withStatus\n      itemInputType=\"checkbox\"\n    />\n  );\n}\n\nexport default memo(AllowDenyList);\n","// extracted by mini-css-extract-plugin\nexport default {\"buttonHolder\":\"BDK_pgpt\",\"active\":\"N8ujSwlC\"};","import {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nimport styles from './CloseFriends.module.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  currentUserId: string;\n  usersById: Record<string, ApiUser>;\n  contactListIds?: string[];\n  onClose: NoneToVoidFunction;\n};\n\nfunction CloseFriends({\n  isActive, contactListIds, usersById, currentUserId, onClose,\n}: OwnProps) {\n  const { saveCloseFriends } = getActions();\n\n  const lang = useOldLang();\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>([]);\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const displayedIds = useMemo(() => {\n    const contactIds = (contactListIds || []).filter((id) => id !== currentUserId);\n    return unique(filterPeersByQuery({ ids: [...closeFriendIds, ...contactIds], query: searchQuery, type: 'user' }));\n  }, [closeFriendIds, contactListIds, currentUserId, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (!prevIsActive && isActive) {\n      setIsSubmitShown(false);\n      setNewSelectedContactIds(closeFriendIds);\n    }\n  }, [isActive, closeFriendIds]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useLastCallback(() => {\n    saveCloseFriends({ userIds: newSelectedContactIds });\n    onClose();\n  });\n\n  return (\n    <>\n      <PeerPicker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        searchInputId=\"close-friends-picker-search\"\n        isSearchable\n        withDefaultPadding\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        withStatus\n        itemInputType=\"checkbox\"\n      />\n\n      <div className={buildClassName(styles.buttonHolder, isSubmitShown && styles.active)}>\n        <FloatingActionButton\n          isShown={isSubmitShown}\n          onClick={handleSubmit}\n          ariaLabel={lang('Save')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n    </>\n  );\n}\n\nexport default memo(CloseFriends);\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"hz7SomkK\",\"header\":\"NV6Rt2g9\",\"closeButton\":\"SN1GFS6L\",\"headerTitle\":\"gi0Y6Ns6\",\"content\":\"sTaVDkiD\",\"section\":\"eUiuPoEC\",\"title\":\"iPPiw9DI\",\"list\":\"OUP1Ss0W\",\"option\":\"JL33Sa3b\",\"checked\":\"qVPo_cVL\",\"input\":\"zsDaUk0i\",\"icon\":\"AfYCVlys\",\"action\":\"njMeBBwY\",\"optionContent\":\"TUAAnG2w\",\"footer\":\"r24Qz2bf\",\"info\":\"ljeRVBOm\",\"submit\":\"RwNLN_rH\"};","import type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPrivacySettings, ApiStory, ApiUser, PrivacyVisibility,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectPeerStory, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getHours } from '../../util/dates/units';\nimport stopEvent from '../../util/stopEvent';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Switcher from '../ui/Switcher';\nimport Transition from '../ui/Transition';\nimport AllowDenyList from './privacy/AllowDenyList';\nimport CloseFriends from './privacy/CloseFriends';\n\nimport styles from './StorySettings.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  onClose?: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  story?: ApiStory;\n  visibility?: ApiPrivacySettings;\n  contactListIds?: string[];\n  usersById: Record<string, ApiUser>;\n  currentUserId: string;\n}\n\ntype PrivacyAction = 'blockUserIds' | 'closeFriends' | 'blockContactUserIds' | 'allowUserIds';\n\ninterface PrivacyOption {\n  name: string;\n  value: PrivacyVisibility;\n  color: [string, string];\n  icon: IconName;\n  actions?: PrivacyAction;\n}\n\nconst OPTIONS: PrivacyOption[] = [{\n  name: 'StoryPrivacyOptionEveryone',\n  value: 'everybody',\n  color: ['#50ABFF', '#007AFF'],\n  icon: 'channel-filled',\n  actions: 'blockUserIds',\n}, {\n  name: 'StoryPrivacyOptionContacts',\n  value: 'contacts',\n  color: ['#C36EFF', '#8B60FA'],\n  icon: 'user-filled',\n  actions: 'blockContactUserIds',\n}, {\n  name: 'StoryPrivacyOptionCloseFriends',\n  value: 'closeFriends',\n  color: ['#88D93A', '#30B73B'],\n  icon: 'favorite-filled',\n  actions: 'closeFriends',\n}, {\n  name: 'StoryPrivacyOptionSelectedContacts',\n  value: 'nobody',\n  color: ['#FFB743', '#F69A36'],\n  icon: 'group-filled',\n  actions: 'allowUserIds',\n}];\n\nenum Screens {\n  privacy,\n  allowList,\n  closeFriends,\n  denyList,\n}\n\nfunction StorySettings({\n  isOpen,\n  story,\n  visibility,\n  contactListIds,\n  usersById,\n  currentUserId,\n  onClose,\n}: OwnProps & StateProps) {\n  const { editStoryPrivacy, toggleStoryInProfile } = getActions();\n\n  const lang = useOldLang();\n  const [isOpenModal, openModal, closeModal] = useFlag(false);\n  const [privacy, setPrivacy] = useState<ApiPrivacySettings | undefined>(visibility);\n  const [isPinned, setIsPinned] = useState(story?.isInProfile);\n  const [activeKey, setActiveKey] = useState<Screens>(Screens.privacy);\n  const [editingBlockingCategory, setEditingBlockingCategory] = useState<PrivacyVisibility>('everybody');\n  const isBackButton = activeKey !== Screens.privacy;\n\n  const closeFriendIds = useMemo(() => {\n    return (contactListIds || []).filter((userId) => usersById[userId]?.isCloseFriend);\n  }, [contactListIds, usersById]);\n\n  const lockedIds = useMemo(() => {\n    if (activeKey === Screens.allowList\n      && (!privacy?.allowUserIds?.length || privacy.allowUserIds[0] === currentUserId)\n    ) {\n      return [currentUserId];\n    }\n\n    return undefined;\n  }, [activeKey, currentUserId, privacy?.allowUserIds]);\n\n  const selectedBlockedIds = useMemo(() => {\n    if (editingBlockingCategory !== privacy?.visibility) return [];\n    return privacy?.blockUserIds || [];\n  }, [editingBlockingCategory, privacy?.blockUserIds, privacy?.visibility]);\n\n  const handleAllowUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      allowUserIds: newIds?.length ? newIds?.filter((id) => id !== currentUserId) : [currentUserId],\n    });\n  });\n\n  const handleDenyUserIdsChange = useLastCallback((newIds: string[]) => {\n    setPrivacy({\n      ...privacy!,\n      blockUserIds: newIds,\n      visibility: editingBlockingCategory,\n    });\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      setActiveKey(Screens.privacy);\n      openModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setPrivacy(visibility);\n  }, [visibility]);\n\n  const handleCloseButtonClick = useLastCallback(() => {\n    if (activeKey === Screens.privacy) {\n      closeModal();\n      return;\n    }\n\n    setActiveKey(Screens.privacy);\n  });\n\n  function handleVisibilityChange(newVisibility: PrivacyVisibility) {\n    setPrivacy({\n      ...privacy!,\n      visibility: newVisibility,\n    });\n  }\n\n  function handleActionClick(e: React.MouseEvent<HTMLDivElement>, action: PrivacyAction) {\n    stopEvent(e);\n\n    switch (action) {\n      case 'closeFriends':\n        setActiveKey(Screens.closeFriends);\n        break;\n      case 'allowUserIds':\n        setActiveKey(Screens.allowList);\n        break;\n      case 'blockUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('everybody');\n        break;\n      case 'blockContactUserIds':\n        setActiveKey(Screens.denyList);\n        setEditingBlockingCategory('contacts');\n        break;\n    }\n  }\n\n  const handleIsPinnedToggle = useLastCallback(() => {\n    setIsPinned(!isPinned);\n  });\n\n  // console.warn(privacy?.visibility, story?.visibility, OPTIONS);\n\n  const handleSubmit = useLastCallback(() => {\n    editStoryPrivacy({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      privacy: privacy!,\n    });\n    if (story!.isInProfile !== isPinned) {\n      toggleStoryInProfile({ peerId: story!.peerId, storyId: story!.id, isInProfile: isPinned });\n    }\n    closeModal();\n  });\n\n  function renderActionName(action: PrivacyAction) {\n    if (action === 'closeFriends') {\n      if (closeFriendIds.length === 0) {\n        return lang('StoryPrivacyOptionCloseFriendsDetail');\n      }\n\n      if (closeFriendIds.length === 1) {\n        return getPeerTitle(lang, usersById[closeFriendIds[0]]);\n      }\n\n      return lang('StoryPrivacyOptionPeople', closeFriendIds.length, 'i');\n    }\n\n    if ((action === 'blockUserIds' && privacy?.visibility === 'everybody')\n      || (action === 'blockContactUserIds' && privacy?.visibility === 'contacts')) {\n      if (!privacy?.blockUserIds?.length) {\n        return lang('StoryPrivacyOptionContactsDetail');\n      }\n\n      if (privacy.blockUserIds.length === 1) {\n        return lang('StoryPrivacyOptionExcludePerson', getUserFullName(usersById[privacy.blockUserIds[0]]));\n      }\n\n      return lang('StoryPrivacyOptionExcludePeople', privacy.blockUserIds.length, 'i');\n    }\n\n    if (!privacy?.allowUserIds || privacy.allowUserIds.length === 0) {\n      return lang('StoryPrivacyOptionSelectedContactsDetail');\n    }\n\n    if (privacy.allowUserIds.length === 1) {\n      return getUserFullName(usersById[privacy.allowUserIds[0]]);\n    }\n\n    return lang('StoryPrivacyOptionPeople', privacy.allowUserIds.length, 'i');\n  }\n\n  function renderHeaderContent() {\n    switch (activeKey) {\n      case Screens.privacy:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertEditTitle')}</h3>;\n      case Screens.allowList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertSelectContactsTitle')}</h3>;\n      case Screens.closeFriends:\n        return <h3 className={styles.headerTitle}>{lang('CloseFriends')}</h3>;\n      case Screens.denyList:\n        return <h3 className={styles.headerTitle}>{lang('StoryPrivacyAlertExcludedContactsTitle')}</h3>;\n    }\n  }\n\n  function renderContent(isActive: boolean) {\n    switch (activeKey) {\n      case Screens.privacy:\n        return renderPrivacyList();\n      case Screens.closeFriends:\n        return (\n          <CloseFriends\n            key=\"close-friends\"\n            isActive={isActive}\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            usersById={usersById}\n            onClose={handleCloseButtonClick}\n          />\n        );\n      case Screens.denyList:\n        return (\n          <AllowDenyList\n            key=\"deny-list\"\n            id=\"deny-list\"\n            contactListIds={contactListIds}\n            currentUserId={currentUserId}\n            selectedIds={selectedBlockedIds}\n            onSelect={handleDenyUserIdsChange}\n          />\n        );\n      case Screens.allowList:\n        return (\n          <AllowDenyList\n            key=\"allow-list\"\n            id=\"allow-list\"\n            contactListIds={contactListIds}\n            lockedIds={lockedIds}\n            currentUserId={currentUserId}\n            selectedIds={privacy?.allowUserIds}\n            onSelect={handleAllowUserIdsChange}\n          />\n        );\n    }\n  }\n\n  function renderPrivacyList() {\n    const storyLifeTime = story ? getHours(story.expireDate - story.date) : 0;\n\n    return (\n      <>\n        <div className={styles.section}>\n          <h3 className={styles.title}>{lang('StoryPrivacyAlertSubtitleProfile')}</h3>\n          <div className={styles.list}>\n            {OPTIONS.map((option) => (\n              <label\n                key={option.value}\n                className={buildClassName(styles.option, option.value === privacy?.visibility && styles.checked)}\n              >\n                <input\n                  type=\"radio\"\n                  name=\"story_privacy\"\n                  className={styles.input}\n                  value={option.value}\n                  checked={option.value === privacy?.visibility}\n                  onChange={() => handleVisibilityChange(option.value)}\n                  teactExperimentControlled\n                />\n                <span\n                  className={styles.icon}\n                  style={`--color-from: ${option.color[0]}; --color-to: ${option.color[1]}`}\n                >\n                  <Icon name={option.icon} />\n                </span>\n                <div className={styles.optionContent}>\n                  <span className={buildClassName(styles.option_name)}>{lang(option.name)}</span>\n                  {option.actions && (\n                    <div\n                      tabIndex={0}\n                      role=\"button\"\n                      className={styles.action}\n                      aria-label={lang('Edit')}\n                      onClick={(e) => { handleActionClick(e, option.actions!); }}\n                    >\n                      <span className={styles.actionInner}>{renderActionName(option.actions)}</span>\n                      <Icon name=\"next\" />\n                    </div>\n                  )}\n                </div>\n              </label>\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <ListItem ripple onClick={handleIsPinnedToggle}>\n            <span>{lang('StoryKeep')}</span>\n            <Switcher\n              id=\"group-notifications\"\n              label={lang('StoryKeep')}\n              checked={isPinned}\n              inactive\n            />\n          </ListItem>\n        </div>\n        <div className={styles.footer}>\n          <div className={styles.info}>{lang('StoryKeepInfo', storyLifeTime)}</div>\n          <div className={styles.submit}>\n            <Button onClick={handleSubmit}>{lang('StoryPrivacyButtonSave')}</Button>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpenModal}\n      className={buildClassName(styles.modal, 'component-theme-dark')}\n      onClose={closeModal}\n      noBackdrop\n      onCloseAnimationEnd={onClose}\n    >\n      <div className={styles.header}>\n        <Button\n          className={buildClassName(styles.closeButton, 'close-button')}\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          onClick={handleCloseButtonClick}\n          ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n        >\n          <div className={buildClassName('animated-close-icon', isBackButton && 'state-back')} />\n        </Button>\n        <Transition name=\"slideFade\" activeKey={activeKey}>\n          {renderHeaderContent()}\n        </Transition>\n      </div>\n      <Transition\n        activeKey={activeKey}\n        name=\"slideFade\"\n        slideClassName=\"ChatOrUserPicker_slide\"\n        className={styles.content}\n      >\n        {renderContent}\n      </Transition>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      storyId, peerId,\n    },\n  } = selectTabState(global);\n  const story = (peerId && storyId)\n    ? selectPeerStory(global, peerId, storyId)\n    : undefined;\n\n  return {\n    story: story && 'content' in story ? story : undefined,\n    visibility: story && 'visibility' in story ? story.visibility : undefined,\n    contactListIds: global.contactList?.userIds,\n    usersById: global.users.byId,\n    currentUserId: global.currentUserId!,\n  };\n})(StorySettings));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPeer,\n  ApiStoryForwardInfo,\n  ApiTypeStory,\n} from '../../../api/types';\nimport type { IconName } from '../../../types/icons';\n\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport { selectPeer, selectPeerStory } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\nimport { renderTextWithEntities } from '../helpers/renderTextWithEntities';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\nimport PeerColorWrapper from '../PeerColorWrapper';\nimport EmojiIconBackground from './EmojiIconBackground';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  forwardInfo: ApiStoryForwardInfo;\n  className?: string;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  story?: ApiTypeStory;\n};\n\nconst EmbeddedStoryForward: FC<OwnProps & StateProps> = ({\n  className,\n  forwardInfo,\n  sender,\n  story,\n}) => {\n  const { openStoryViewer, loadPeerStoriesByIds, openChat } = getActions();\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!story && forwardInfo.fromPeerId && forwardInfo.storyId) {\n      loadPeerStoriesByIds({\n        peerId: forwardInfo.fromPeerId,\n        storyIds: [forwardInfo.storyId],\n      });\n    }\n  }, [forwardInfo, story]);\n\n  const senderTitle = sender ? getPeerTitle(lang, sender) : forwardInfo.fromName;\n\n  const openOriginalStory = useLastCallback(() => {\n    const { fromPeerId, storyId } = forwardInfo;\n    if (!fromPeerId) return;\n\n    const isStoryReady = story && !('isDeleted' in story && story.isDeleted);\n\n    if (isStoryReady) {\n      openStoryViewer({\n        peerId: fromPeerId,\n        storyId,\n        isSingleStory: true,\n      });\n    } else {\n      openChat({ id: fromPeerId });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(openOriginalStory);\n\n  function renderTextContent() {\n    if (story && 'content' in story && story.content.text) {\n      return (\n        <p className=\"embedded-text-wrapper\">\n          {renderTextWithEntities(story.content.text)}\n        </p>\n      );\n    }\n\n    return undefined;\n  }\n\n  function renderSender() {\n    if (!sender || !senderTitle) {\n      return undefined;\n    }\n\n    const icon: IconName | undefined = !isUserId(sender.id) ? 'channel-filled' : 'user-filled';\n\n    return (\n      <>\n        {icon && <Icon name={icon} className=\"embedded-chat-icon\" />}\n        {senderTitle && renderText(senderTitle)}\n      </>\n    );\n  }\n\n  return (\n    <PeerColorWrapper\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        getPeerColorClass(sender, true, true),\n      )}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {sender?.color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          emojiDocumentId={sender.color.backgroundEmojiId}\n          className=\"EmbeddedMessage--background-icons\"\n        />\n      )}\n      <div className=\"message-text\">\n        {renderTextContent()}\n        <div className=\"message-title\">\n          {renderSender()}\n        </div>\n      </div>\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { forwardInfo }): StateProps => {\n    const sender = forwardInfo.fromPeerId ? selectPeer(global, forwardInfo.fromPeerId) : undefined;\n    const story = forwardInfo.storyId && forwardInfo.fromPeerId\n      ? selectPeerStory(global, forwardInfo.fromPeerId, forwardInfo.storyId) : undefined;\n    return {\n      sender,\n      story,\n    };\n  },\n)(EmbeddedStoryForward));\n","import {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { requestForcedReflow, requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../util/buildClassName';\nimport calcTextLineHeightAndCount from '../../util/element/calcTextLineHeightAndCount';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport EmbeddedStoryForward from '../common/embedded/EmbeddedStoryForward';\nimport MessageText from '../common/MessageText';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  story: ApiStory;\n  isExpanded: boolean;\n  className?: string;\n  onExpand: NoneToVoidFunction;\n  onFold?: NoneToVoidFunction;\n}\n\nconst EXPAND_ANIMATION_DURATION_MS = 400;\nconst LINES_TO_SHOW = 3;\n\nfunction StoryCaption({\n  story, isExpanded, className, onExpand, onFold,\n}: OwnProps) {\n  const lang = useOldLang();\n  const ref = useRef<HTMLDivElement>();\n  const contentRef = useRef<HTMLDivElement>();\n  const textRef = useRef<HTMLDivElement>();\n  const showMoreButtonRef = useRef<HTMLDivElement>();\n  const renderingStory = useCurrentOrPrev(story, true);\n\n  const caption = renderingStory?.content.text;\n\n  const [hasOverflow, setHasOverflow] = useState(false);\n  const prevIsExpanded = usePrevDuringAnimation(isExpanded || undefined, EXPAND_ANIMATION_DURATION_MS);\n  const isInExpandedState = isExpanded || prevIsExpanded;\n\n  useEffect(() => {\n    requestMutation(() => {\n      if (!contentRef.current) {\n        return;\n      }\n\n      if (isExpanded) {\n        addExtraClass(contentRef.current, styles.animate);\n      } else {\n        removeExtraClass(contentRef.current, styles.animate);\n      }\n    });\n  }, [isExpanded]);\n\n  const canExpand = hasOverflow && !isInExpandedState;\n  const { shouldRender: shouldRenderShowMore, transitionClassNames } = useShowTransitionDeprecated(\n    canExpand, undefined, true, 'slow', true,\n  );\n\n  // Setup gradient to clip caption before button\n  useLayoutEffect(() => {\n    requestMeasure(() => {\n      const container = contentRef.current;\n      const button = showMoreButtonRef.current;\n      if (!container || !button) {\n        return;\n      }\n\n      const { offsetWidth } = button;\n\n      requestMutation(() => {\n        container.style.setProperty('--expand-button-width', `${offsetWidth}px`);\n      });\n    });\n  }, [shouldRenderShowMore, lang]);\n\n  useLayoutEffect(() => {\n    requestForcedReflow(() => {\n      if (!contentRef.current || !textRef.current) {\n        return undefined;\n      }\n\n      const container = contentRef.current;\n      const textContainer = textRef.current;\n\n      const textOffsetTop = textContainer.offsetTop;\n      const { lineHeight, totalLines } = calcTextLineHeightAndCount(textContainer);\n      const isOverflowing = totalLines > LINES_TO_SHOW;\n      const overflowShift = textOffsetTop + lineHeight * LINES_TO_SHOW;\n\n      return () => {\n        if (isOverflowing) {\n          addExtraClass(container, styles.hasOverflow);\n          setHasOverflow(true);\n        }\n\n        container.style.setProperty('--_overflow-shift', `${overflowShift}px`);\n      };\n    });\n  }, [caption]);\n\n  useEffect(() => {\n    if (!isExpanded) {\n      ref.current?.scrollTo({ top: 0 });\n    }\n  }, [isExpanded]);\n\n  const fullClassName = buildClassName(\n    styles.captionContent,\n    isInExpandedState && styles.expanded,\n    shouldRenderShowMore && styles.withShowMore,\n  );\n\n  return (\n    <div className={buildClassName(styles.caption, className)}>\n      <div\n        ref={contentRef}\n        className={fullClassName}\n        role={canExpand ? 'button' : undefined}\n        onClick={canExpand ? onExpand : onFold}\n      >\n        <div\n          ref={ref}\n          className={buildClassName(styles.captionInner, 'allow-selection', 'custom-scroll')}\n        >\n          {renderingStory?.forwardInfo && (\n            <EmbeddedStoryForward\n              forwardInfo={renderingStory.forwardInfo}\n              className={styles.forwardInfo}\n            />\n          )}\n          {renderingStory && (\n            <div ref={textRef} className={styles.captionText}>\n              <MessageText\n                messageOrStory={renderingStory}\n                withTranslucentThumbs\n                forcePlayback\n              />\n            </div>\n          )}\n        </div>\n      </div>\n      {shouldRenderShowMore && (\n        <div\n          ref={showMoreButtonRef}\n          className={buildClassName(styles.captionShowMore, transitionClassNames)}\n          onClick={onExpand}\n        >\n          {lang('Story.CaptionShowMore')}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(StoryCaption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YVD19vOP\",\"viewInfo\":\"cknL5COh\",\"interactive\":\"pJAyeGkG\",\"avatars\":\"Vz_VtJ16\",\"spacer\":\"kKoeDk3Z\",\"reactionCount\":\"sf3u_6Vh\",\"reactionCountHeart\":\"Er2XKRqi\",\"footerItem\":\"vJRk_UUk\",\"views\":\"nIv3YAnZ\",\"viewIcon\":\"WyBiNM6e\",\"reactionButton\":\"lpDXVIuf\",\"reactionHeart\":\"twgMDT1y\"};","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { ApiStory } from '../../api/types';\n\nimport { HEART_REACTION } from '../../config';\nimport {\n  getReactionKey, getStoryKey, isSameReaction,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AvatarList from '../common/AvatarList';\nimport Icon from '../common/icons/Icon';\nimport ReactionAnimatedEmoji from '../common/reactions/ReactionAnimatedEmoji';\nimport Button from '../ui/Button';\n\nimport styles from './StoryFooter.module.scss';\n\ntype OwnProps = {\n  story: ApiStory;\n  className?: string;\n};\n\nconst StoryFooter = ({\n  story,\n  className,\n}: OwnProps) => {\n  const { openStoryViewModal, openForwardMenu, sendStoryReaction } = getActions();\n  const lang = useOldLang();\n\n  const {\n    views, isOut, peerId, id: storyId, sentReaction,\n  } = story;\n  const { viewsCount, forwardsCount, reactionsCount } = views || {};\n  const isChannel = !isUserId(peerId);\n\n  const isSentStoryReactionHeart = sentReaction && isSameReaction(sentReaction, HEART_REACTION);\n\n  const canForward = Boolean(\n    (isOut || isChannel)\n    && story.isPublic\n    && !story.noForwards,\n  );\n\n  const containerId = getStoryKey(peerId, storyId);\n\n  const recentViewers = useMemo(() => {\n    const { users: { byId: usersById } } = getGlobal();\n\n    const recentViewerIds = views && 'recentViewerIds' in views ? views.recentViewerIds : undefined;\n    if (!recentViewerIds) return undefined;\n\n    return recentViewerIds.map((id) => usersById[id]).filter(Boolean);\n  }, [views]);\n\n  const handleOpenStoryViewModal = useLastCallback(() => {\n    openStoryViewModal({ storyId });\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleLikeStory = useLastCallback(() => {\n    const reaction = sentReaction ? undefined : HEART_REACTION;\n    sendStoryReaction({\n      peerId,\n      storyId,\n      containerId,\n      reaction,\n    });\n  });\n\n  if (!viewsCount) {\n    return (\n      <div className={buildClassName(styles.root, className)}>\n        {lang('NobodyViewed')}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        className,\n      )}\n    >\n      <div\n        className={buildClassName(styles.viewInfo, !isChannel && styles.interactive)}\n        onClick={!isChannel ? handleOpenStoryViewModal : undefined}\n      >\n        {Boolean(recentViewers?.length) && (\n          <AvatarList\n            size=\"small\"\n            peers={recentViewers}\n            className={styles.avatars}\n          />\n        )}\n\n        {isChannel ? (\n          <span className={styles.views}>\n            <Icon name=\"channelviews\" className={styles.viewIcon} />\n            {viewsCount}\n          </span>\n        ) : (\n          <span className={styles.views}>{lang('Views', viewsCount, 'i')}</span>\n        )}\n        {Boolean(reactionsCount) && !isChannel && (\n          <span className={styles.reactionCount}>\n            <Icon name=\"heart\" className={styles.reactionCountHeart} />\n            {reactionsCount}\n          </span>\n        )}\n      </div>\n      <div className={styles.spacer} />\n      {canForward && (\n        <Button\n          color=\"translucent\"\n          size=\"smaller\"\n          round\n          onClick={handleForwardClick}\n          ariaLabel={lang('Forward')}\n          className={styles.footerItem}\n        >\n          <Icon name=\"forward\" />\n        </Button>\n      )}\n      {isChannel && (\n        <>\n          {Boolean(forwardsCount) && (\n            <div className={styles.footerItem}>\n              <Button\n                round\n                color=\"translucent\"\n                size=\"smaller\"\n                nonInteractive\n                ariaLabel={lang('PublicShares')}\n              >\n                <Icon name=\"loop\" />\n              </Button>\n              <span>{forwardsCount}</span>\n            </div>\n          )}\n          <div className={styles.footerItem}>\n            <Button\n              round\n              className={styles.reactionButton}\n              color=\"translucent\"\n              size=\"smaller\"\n              onClick={handleLikeStory}\n              ariaLabel={lang('AccDescrLike')}\n            >\n              {sentReaction && (\n                <ReactionAnimatedEmoji\n                  key={getReactionKey(sentReaction)}\n                  containerId={containerId}\n                  reaction={sentReaction}\n                  withEffectOnly={isSentStoryReactionHeart}\n                />\n              )}\n              {(!sentReaction || isSentStoryReactionHeart) && (\n                <Icon\n                  name={isSentStoryReactionHeart ? 'heart' : 'heart-outline'}\n                  className={buildClassName(isSentStoryReactionHeart && styles.reactionHeart)}\n                />\n              )}\n            </Button>\n            {Boolean(reactionsCount) && (<span>{reactionsCount}</span>)}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StoryFooter);\n","import type React from '../../lib/teact/teact';\nimport {\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport styles from './StoryProgress.module.scss';\n\ninterface OwnProps {\n  isActive: boolean;\n  isViewed: boolean;\n  isVideo?: boolean;\n  duration?: number;\n  isPaused?: boolean;\n  onImageComplete: NoneToVoidFunction;\n}\n\nconst DEFAULT_STORY_DURATION_S = 6;\n\nfunction StoryProgress({\n  isActive, isViewed, isVideo, duration = DEFAULT_STORY_DURATION_S, isPaused, onImageComplete,\n}: OwnProps) {\n  const handleAnimationEnd = useLastCallback((event: React.AnimationEvent<HTMLElement>) => {\n    if (!isVideo && event.animationName === styles.progress) {\n      onImageComplete();\n    }\n  });\n\n  const classNames = buildClassName(\n    styles.root,\n    isViewed && styles.viewed,\n    isActive && styles.active,\n    isPaused && styles.paused,\n  );\n\n  return (\n    <span\n      className={classNames}\n      aria-hidden\n    >\n      {isActive && (\n        <i style={`--progress-duration: ${duration}s`} className={styles.inner} onAnimationEnd={handleAnimationEnd} />\n      )}\n    </span>\n  );\n}\n\nexport default memo(StoryProgress);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c1fbGgcx\",\"viewed\":\"xwOKghO2\",\"active\":\"ZuByYcIx\",\"inner\":\"qyBCpJct\",\"progress\":\"XY98E7VM\",\"paused\":\"n9V6B7hP\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMediaAreaChannelPost,\n  ApiPeer, ApiStealthMode, ApiStory, ApiTypeStory,\n} from '../../api/types';\nimport type { IDimensions } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { EDITABLE_STORY_INPUT_CSS_SELECTOR, EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { isChatChannel } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  selectChat,\n  selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n  selectPeer,\n  selectPeerPaidMessagesStars,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { IS_SAFARI } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatMediaDuration, formatRelativePastTime } from '../../util/dates/dateFormat';\nimport download from '../../util/download';\nimport { isUserId } from '../../util/entities/ids';\nimport { formatStarsAsIcon } from '../../util/localization/format';\nimport { round } from '../../util/math';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\nimport { BASE_STORY_HEIGHT, BASE_STORY_WIDTH } from './helpers/dimensions';\nimport { PRIMARY_VIDEO_MIME, SECONDARY_VIDEO_MIME } from './helpers/videoFormats';\n\nimport useUnsupportedMedia from '../../hooks/media/useUnsupportedMedia';\nimport useAppLayout, { getIsMobile } from '../../hooks/useAppLayout';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport { useStreaming } from '../../hooks/useStreaming';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useStoryPreloader from './hooks/useStoryPreloader';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Avatar from '../common/Avatar';\nimport Composer from '../common/Composer';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\nimport Transition from '../ui/Transition';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\nimport StoryCaption from './StoryCaption';\nimport StoryFooter from './StoryFooter';\nimport StoryProgress from './StoryProgress';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peerId: string;\n  storyId: number;\n  dimensions: IDimensions;\n\n  isDeleteModalOpen?: boolean;\n  isPrivateStories?: boolean;\n  isArchivedStories?: boolean;\n  isSingleStory?: boolean;\n  getIsAnimating: Signal<boolean>;\n  onDelete: (story: ApiTypeStory) => void;\n  onClose: NoneToVoidFunction;\n  onReport: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peer: ApiPeer;\n  forwardSender?: ApiPeer;\n  fromPeer?: ApiPeer;\n  story?: ApiTypeStory;\n  isMuted: boolean;\n  orderedIds?: number[];\n  shouldForcePause?: boolean;\n  storyChangelogUserId?: string;\n  viewersExpirePeriod: number;\n  isChatExist?: boolean;\n  arePeerSettingsLoaded?: boolean;\n  isCurrentUserPremium?: boolean;\n  stealthMode: ApiStealthMode;\n  withHeaderAnimation?: boolean;\n  paidMessagesStars?: number;\n  isAccountFrozen?: boolean;\n}\n\nconst VIDEO_MIN_READY_STATE = IS_SAFARI ? 4 : 3;\nconst SPACEBAR_CODE = 32;\n\nconst STEALTH_MODE_NOTIFICATION_DURATION = 4000;\n\nfunction Story({\n  peerId,\n  storyId,\n  peer,\n  forwardSender,\n  fromPeer,\n  isMuted,\n  isArchivedStories,\n  isPrivateStories,\n  story,\n  orderedIds,\n  isSingleStory,\n  dimensions,\n  shouldForcePause,\n  storyChangelogUserId,\n  viewersExpirePeriod,\n  isChatExist,\n  arePeerSettingsLoaded,\n  getIsAnimating,\n  isCurrentUserPremium,\n  stealthMode,\n  withHeaderAnimation,\n  onDelete,\n  onClose,\n  onReport,\n  paidMessagesStars,\n  isAccountFrozen,\n}: OwnProps & StateProps) {\n  const {\n    viewStory,\n    setStoryViewerMuted,\n    openPreviousStory,\n    openNextStory,\n    loadPeerSkippedStories,\n    openForwardMenu,\n    copyStoryLink,\n    toggleStoryInProfile,\n    openChat,\n    showNotification,\n    openStoryPrivacyEditor,\n    loadPeerSettings,\n    fetchChat,\n    loadStoryViews,\n    toggleStealthModal,\n  } = getActions();\n  const serverTime = getServerTime();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const [isComposerHasFocus, markComposerHasFocus, unmarkComposerHasFocus] = useFlag(false);\n  const [isStoryPlaybackRequested, playStory, pauseStory] = useFlag(false);\n  const [isStoryPlaying, markStoryPlaying, unmarkStoryPlaying] = useFlag(false);\n  const [isAppFocused, markAppFocused, unmarkAppFocused] = useFlag(true);\n  const [isCaptionExpanded, expandCaption, foldCaption] = useFlag(false);\n  const [isPausedBySpacebar, setIsPausedBySpacebar] = useState(false);\n  const [isPausedByLongPress, markIsPausedByLongPress, unmarkIsPausedByLongPress] = useFlag(false);\n  const [isDropdownMenuOpen, markDropdownMenuOpen, unmarkDropdownMenuOpen] = useFlag(false);\n  const videoRef = useRef<HTMLVideoElement>();\n  const {\n    isDeletedStory,\n    hasText,\n    hasForwardInfo,\n    thumbnail,\n    previewBlobUrl,\n    isVideo,\n    noSound,\n    fullMediaData,\n    altMediaHash,\n    altMediaData,\n    hasFullData,\n    hasThumb,\n    canDownload,\n    downloadMediaData,\n  } = useStoryProps(story, isCurrentUserPremium, isDropdownMenuOpen);\n\n  const isLoadedStory = story && 'content' in story;\n  const isChangelog = peerId === storyChangelogUserId;\n  const isUserStory = isUserId(peerId);\n  const isChatStory = !isUserStory;\n  const isChannelStory = isChatStory && isChatChannel(peer as ApiChat);\n  const isOut = isLoadedStory && story.isOut;\n\n  const canPinToProfile = useCurrentOrPrev(\n    isOut ? !story.isInProfile : undefined,\n    true,\n  );\n  const canUnpinFromProfile = useCurrentOrPrev(\n    isOut ? story.isInProfile : undefined,\n    true,\n  );\n  const areViewsExpired = Boolean(\n    isOut && (story.date + viewersExpirePeriod) < getServerTime(),\n  );\n\n  const forwardSenderTitle = forwardSender ? getPeerTitle(oldLang, forwardSender)\n    : (isLoadedStory && story.forwardInfo?.fromName);\n\n  const canCopyLink = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !isChangelog\n    && peer?.hasUsername,\n  );\n\n  const canShare = Boolean(\n    isLoadedStory\n    && story.isPublic\n    && !story.noForwards\n    && !isChangelog\n    && !isCaptionExpanded,\n  );\n\n  const canPlayStory = Boolean(\n    hasFullData && !shouldForcePause && isAppFocused && !isComposerHasFocus && !isCaptionExpanded\n    && !isPausedBySpacebar && !isPausedByLongPress,\n  );\n\n  const duration = isLoadedStory && story.content.video?.duration\n    ? story.content.video.duration\n    : undefined;\n\n  const shouldShowComposer = !(isOut && isUserStory) && !isChangelog && !isChannelStory && !isAccountFrozen;\n  const shouldShowFooter = isLoadedStory && !shouldShowComposer && (isOut || isChannelStory);\n  const headerAnimation = isMobile && withHeaderAnimation ? 'slideFade' : 'none';\n\n  const {\n    shouldRender: shouldRenderSkeleton,\n    transitionClassNames: skeletonTransitionClassNames,\n  } = useShowTransitionDeprecated(!hasFullData);\n\n  const {\n    transitionClassNames: mediaTransitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(fullMediaData));\n\n  const thumbRef = useCanvasBlur(thumbnail, !hasThumb);\n  const previewTransitionClassNames = useMediaTransitionDeprecated(previewBlobUrl);\n\n  const {\n    shouldRender: shouldRenderComposer,\n    transitionClassNames: composerAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(shouldShowComposer);\n\n  const {\n    shouldRender: shouldRenderCaptionBackdrop,\n    transitionClassNames: captionBackdropTransitionClassNames,\n  } = useShowTransitionDeprecated(hasText && isCaptionExpanded);\n\n  const { transitionClassNames: appearanceAnimationClassNames } = useShowTransitionDeprecated(true);\n  const {\n    shouldRender: shouldRenderCaption,\n    transitionClassNames: captionAppearanceAnimationClassNames,\n  } = useShowTransitionDeprecated(hasText || hasForwardInfo);\n\n  const isStreamingSupported = useStreaming(videoRef, fullMediaData, PRIMARY_VIDEO_MIME);\n\n  useStoryPreloader(peerId, storyId);\n\n  useEffect(() => {\n    if (storyId) {\n      viewStory({ peerId, storyId });\n    }\n  }, [storyId, peerId]);\n\n  useEffect(() => {\n    loadPeerSkippedStories({ peerId });\n  }, [peerId]);\n\n  // Fetching user privacy settings for use in Composer\n  useEffect(() => {\n    const canWrite = isUserId(peerId);\n    if (!isChatExist && canWrite) {\n      fetchChat({ chatId: peerId });\n    }\n  }, [isChatExist, peerId]);\n  useEffect(() => {\n    if (isChatExist && !arePeerSettingsLoaded) {\n      loadPeerSettings({ peerId });\n    }\n  }, [arePeerSettingsLoaded, isChatExist, peerId]);\n\n  const handlePauseStory = useLastCallback(() => {\n    if (isVideo) {\n      videoRef.current?.pause();\n    }\n\n    unmarkStoryPlaying();\n    pauseStory();\n  });\n\n  const handlePlayStory = useLastCallback(() => {\n    if (!canPlayStory) return;\n\n    playStory();\n    if (!isVideo) markStoryPlaying();\n  });\n\n  const handleLongPressStart = useLastCallback(() => {\n    markIsPausedByLongPress();\n  });\n  const handleLongPressEnd = useLastCallback(() => {\n    unmarkIsPausedByLongPress();\n  });\n\n  const handleDropdownMenuOpen = useLastCallback(() => {\n    markDropdownMenuOpen();\n    handlePauseStory();\n  });\n\n  const handleDropdownMenuClose = useLastCallback(() => {\n    unmarkDropdownMenuOpen();\n    handlePlayStory();\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleLongPressStart,\n    onEnd: handleLongPressEnd,\n  });\n\n  const isUnsupported = useUnsupportedMedia(\n    videoRef,\n    undefined,\n    !isVideo || !fullMediaData || isStreamingSupported,\n  );\n\n  const hasAllData = fullMediaData && (!altMediaHash || altMediaData);\n  // Play story after media has been downloaded\n  useEffect(() => {\n    if (hasAllData && !isUnsupported) handlePlayStory();\n  }, [hasAllData, isUnsupported]);\n\n  useBackgroundMode(unmarkAppFocused, markAppFocused);\n\n  useEffect(() => {\n    if (!hasAllData) return;\n    videoRef.current?.load();\n  }, [hasAllData]);\n\n  useEffect(() => {\n    if (!isLoadedStory || isDeletedStory || areViewsExpired) return;\n\n    if (!isOut && !isChannelStory) return;\n\n    // Refresh counters each time\n    loadStoryViews({ peerId, storyId });\n  }, [isDeletedStory, areViewsExpired, isLoadedStory, peerId, storyId, isOut, isChannelStory]);\n\n  useEffect(() => {\n    if (\n      shouldForcePause || !isAppFocused || isComposerHasFocus\n      || isCaptionExpanded || isPausedBySpacebar || isPausedByLongPress\n    ) {\n      handlePauseStory();\n    } else {\n      handlePlayStory();\n    }\n  }, [\n    handlePlayStory, isAppFocused, isCaptionExpanded, isComposerHasFocus,\n    shouldForcePause, isPausedBySpacebar, isPausedByLongPress,\n  ]);\n\n  useEffect(() => {\n    if (isComposerHasFocus || shouldForcePause || isCaptionExpanded) {\n      return undefined;\n    }\n\n    function handleKeyDown(e: KeyboardEvent) {\n      if (e.keyCode === SPACEBAR_CODE) {\n        e.preventDefault();\n        setIsPausedBySpacebar(!isPausedBySpacebar);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isCaptionExpanded, isComposerHasFocus, isPausedBySpacebar, shouldForcePause]);\n\n  // Reset the state of `isPausedBySpacebar` when closing the caption, losing focus by composer or disable forced pause\n  useEffectWithPrevDeps(([\n    prevIsComposerHasFocus,\n    prevIsCaptionExpanded,\n    prevShouldForcePause,\n    prevIsAppFocused,\n    prevIsPausedByLongPress,\n  ]) => {\n    if (\n      !isPausedBySpacebar || isCaptionExpanded || isComposerHasFocus\n      || shouldForcePause || !isAppFocused || isPausedByLongPress\n    ) {\n      return;\n    }\n\n    if (\n      prevIsCaptionExpanded !== isCaptionExpanded\n      || prevIsComposerHasFocus !== isComposerHasFocus\n      || prevShouldForcePause !== shouldForcePause\n      || prevIsAppFocused !== isAppFocused\n      || prevIsPausedByLongPress !== isPausedByLongPress\n    ) {\n      setIsPausedBySpacebar(false);\n    }\n  }, [isComposerHasFocus, isCaptionExpanded, shouldForcePause, isAppFocused, isPausedByLongPress, isPausedBySpacebar]);\n\n  const handleOpenChat = useLastCallback(() => {\n    onClose();\n    openChat({ id: peerId });\n  });\n\n  const handleForwardPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: forwardSender!.id });\n  });\n\n  const handleFromPeerClick = useLastCallback(() => {\n    onClose();\n    openChat({ id: fromPeer!.id });\n  });\n\n  const handleOpenPrevStory = useLastCallback(() => {\n    openPreviousStory();\n  });\n\n  const handleOpenNextStory = useLastCallback(() => {\n    openNextStory();\n  });\n\n  const handleVideoStoryTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    const video = e.currentTarget;\n    if (video.readyState >= VIDEO_MIN_READY_STATE) {\n      markStoryPlaying();\n    } else {\n      unmarkStoryPlaying();\n    }\n    if (duration && round(video.currentTime, 2) >= round(duration, 2)) {\n      handleOpenNextStory();\n    }\n  });\n\n  useEffect(() => {\n    return !getIsAnimating() && !isComposerHasFocus ? captureKeyboardListeners({\n      onRight: handleOpenNextStory,\n      onLeft: handleOpenPrevStory,\n    }) : undefined;\n  }, [getIsAnimating, isComposerHasFocus]);\n\n  const handleCopyStoryLink = useLastCallback(() => {\n    copyStoryLink({ peerId, storyId });\n  });\n\n  const handlePinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: true });\n  });\n\n  const handleUnpinClick = useLastCallback(() => {\n    toggleStoryInProfile({ peerId, storyId, isInProfile: false });\n  });\n\n  const handleDeleteStoryClick = useLastCallback(() => {\n    onDelete(story!);\n  });\n\n  const handleReportStoryClick = useLastCallback(() => {\n    onReport();\n  });\n\n  const handleForwardClick = useLastCallback(() => {\n    openForwardMenu({ fromChatId: peerId, storyId });\n  });\n\n  const handleInfoPrivacyEdit = useLastCallback(() => {\n    openStoryPrivacyEditor();\n  });\n\n  const handleInfoPrivacyClick = useLastCallback(() => {\n    const visibility = !isLoadedStory || story.isPublic\n      ? undefined\n      : story.isForContacts ? 'contacts' : (story.isForCloseFriends ? 'closeFriends' : 'nobody');\n\n    let message;\n    const myName = getPeerTitle(oldLang, peer);\n    switch (visibility) {\n      case 'nobody':\n        message = oldLang('StorySelectedContactsHint', myName);\n        break;\n      case 'contacts':\n        message = oldLang('StoryContactsHint', myName);\n        break;\n      case 'closeFriends':\n        message = oldLang('StoryCloseFriendsHint', myName);\n        break;\n      default:\n        return;\n    }\n    showNotification({ message });\n  });\n\n  const handleVolumeMuted = useLastCallback(() => {\n    if (noSound) {\n      showNotification({\n        message: oldLang('Story.TooltipVideoHasNoSound'),\n      });\n      return;\n    }\n    // Browser requires explicit user interaction to keep video playing after unmuting\n    videoRef.current!.muted = !videoRef.current!.muted;\n    setStoryViewerMuted({ isMuted: !isMuted });\n  });\n\n  const handleOpenStealthModal = useLastCallback(() => {\n    if (stealthMode.activeUntil && getServerTime() < stealthMode.activeUntil) {\n      const diff = stealthMode.activeUntil - getServerTime();\n      showNotification({\n        title: oldLang('StealthModeOn'),\n        message: oldLang('Story.ToastStealthModeActiveText', formatMediaDuration(diff)),\n        duration: STEALTH_MODE_NOTIFICATION_DURATION,\n      });\n      return;\n    }\n\n    toggleStealthModal({ isOpen: true });\n  });\n\n  const handleDownload = useLastCallback(() => {\n    if (!downloadMediaData) return;\n    download(downloadMediaData, `story-${peerId}-${storyId}.${isVideo ? 'mp4' : 'jpg'}`);\n  });\n\n  useEffect(() => {\n    if (!isDeletedStory) return;\n\n    showNotification({\n      message: oldLang('StoryNotFound'),\n    });\n  }, [oldLang, isDeletedStory]);\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => {\n      return (\n        <Button\n          round\n          ripple={!isMobile}\n          size=\"tiny\"\n          color=\"translucent-white\"\n          onClick={onTrigger}\n          className={buildClassName(styles.button, isOpen && 'active')}\n          ariaLabel={oldLang('AccDescrOpenMenu2')}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      );\n    };\n  }, [isMobile, oldLang]);\n\n  function renderStoriesTabs() {\n    return (\n      <div className={styles.storyIndicators}>\n        {(isSingleStory ? [storyId] : orderedIds ?? []).map((id) => (\n          <StoryProgress\n            key={`progress-${id}`}\n            isActive={id === story?.id}\n            isVideo={isVideo}\n            isViewed={Boolean(story?.id && ((isPrivateStories || isArchivedStories) ? id > story?.id : id < story?.id))}\n            isPaused={!isStoryPlaying}\n            duration={duration}\n            onImageComplete={handleOpenNextStory}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderStoryPrivacyButton() {\n    if (!isUserStory) return undefined;\n\n    let privacyIcon: IconName = 'channel-filled';\n    const gradient: Record<string, [string, string]> = {\n      'channel-filled': ['#50ABFF', '#007AFF'],\n      'user-filled': ['#C36EFF', '#8B60FA'],\n      'favorite-filled': ['#88D93A', '#30B73B'],\n      'group-filled': ['#FFB743', '#F69A36'],\n    };\n\n    if (isOut) {\n      const { visibility } = (story && 'visibility' in story && story.visibility) || {};\n\n      switch (visibility) {\n        case 'everybody':\n          privacyIcon = 'channel-filled';\n          break;\n        case 'contacts':\n          privacyIcon = 'user-filled';\n          break;\n        case 'closeFriends':\n          privacyIcon = 'favorite-filled';\n          break;\n        case 'nobody':\n          privacyIcon = 'group-filled';\n      }\n    } else {\n      if (!story || !('content' in story) || story.isPublic) {\n        return undefined;\n      }\n\n      privacyIcon = story.isForCloseFriends\n        ? 'favorite-filled'\n        : (story.isForContacts ? 'user-filled' : 'group-filled');\n    }\n\n    return (\n      <div\n        className={buildClassName(styles.visibilityButton, isOut && styles.visibilityButtonSelf)}\n        onClick={isOut ? handleInfoPrivacyEdit : handleInfoPrivacyClick}\n        style={`--color-from: ${gradient[privacyIcon][0]}; --color-to: ${gradient[privacyIcon][1]}`}\n      >\n        <Icon name={privacyIcon} />\n        {isOut && <Icon name=\"next\" />}\n      </div>\n    );\n  }\n\n  function renderSenderInfo() {\n    return (\n      <div className={styles.senderInfo}>\n        <Avatar\n          peer={peer}\n          size=\"tiny\"\n          onClick={handleOpenChat}\n        />\n        <div className={styles.senderMeta}>\n          <span onClick={handleOpenChat} className={styles.senderName}>\n            {renderText(getPeerTitle(oldLang, peer) || '')}\n          </span>\n          <div className={styles.storyMetaRow}>\n            {forwardSenderTitle && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.forwardHeader, forwardSender && styles.clickable,\n                )}\n                onClick={forwardSender ? handleForwardPeerClick : undefined}\n              >\n                <Icon name=\"loop\" />\n                <span className={styles.headerTitle}>\n                  {renderText(forwardSenderTitle)}\n                </span>\n              </span>\n            )}\n            {fromPeer && (\n              <span\n                className={buildClassName(\n                  styles.storyMeta, styles.fromPeer,\n                )}\n                onClick={handleFromPeerClick}\n              >\n                <Avatar peer={fromPeer} size=\"micro\" />\n                <span className={styles.headerTitle}>\n                  {renderText(getPeerTitle(oldLang, fromPeer) || '')}\n                </span>\n              </span>\n            )}\n            {story && 'date' in story && (\n              <span className={styles.storyMeta}>{formatRelativePastTime(oldLang, serverTime, story.date)}</span>\n            )}\n            {isLoadedStory && story.isEdited && (\n              <span className={styles.storyMeta}>{oldLang('Story.HeaderEdited')}</span>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSender() {\n    return (\n      <div className={styles.sender}>\n        <Transition activeKey={Number(peerId)} name={headerAnimation} className={styles.senderInfoTransition}>\n          {renderSenderInfo()}\n        </Transition>\n\n        <div className={styles.actions}>\n          {renderStoryPrivacyButton()}\n          {isVideo && (\n            <Button\n              className={styles.button}\n              round\n              ripple={!isMobile}\n              size=\"tiny\"\n              color=\"translucent-white\"\n              disabled={!hasFullData}\n              onClick={handleVolumeMuted}\n              ariaLabel={oldLang('Volume')}\n            >\n              <Icon name={(isMuted || noSound) ? 'speaker-muted-story' : 'speaker-story'} />\n            </Button>\n          )}\n          <DropdownMenu\n            className={styles.buttonMenu}\n            trigger={MenuButton}\n            positionX=\"right\"\n            onOpen={handleDropdownMenuOpen}\n            onClose={handleDropdownMenuClose}\n          >\n            {canCopyLink && <MenuItem icon=\"copy\" onClick={handleCopyStoryLink}>{oldLang('CopyLink')}</MenuItem>}\n            {canPinToProfile && (\n              <MenuItem icon=\"save-story\" onClick={handlePinClick}>\n                {oldLang(isUserStory ? 'StorySave' : 'SaveToPosts')}\n              </MenuItem>\n            )}\n            {canUnpinFromProfile && (\n              <MenuItem icon=\"delete\" onClick={handleUnpinClick}>\n                {oldLang(isUserStory ? 'ArchiveStory' : 'RemoveFromPosts')}\n              </MenuItem>\n            )}\n            {canDownload && (\n              <MenuItem icon=\"download\" disabled={!downloadMediaData} onClick={handleDownload}>\n                {oldLang('lng_media_download')}\n              </MenuItem>\n            )}\n            {!isOut && isUserStory && (\n              <MenuItem icon=\"eye-crossed-outline\" onClick={handleOpenStealthModal}>\n                {oldLang('StealthMode')}\n              </MenuItem>\n            )}\n            {!isOut && <MenuItem icon=\"flag\" onClick={handleReportStoryClick}>{oldLang('lng_report_story')}</MenuItem>}\n            {isOut && (\n              <MenuItem\n                icon=\"delete\"\n                destructive\n                onClick={handleDeleteStoryClick}\n              >\n                {oldLang('Delete')}\n              </MenuItem>\n            )}\n          </DropdownMenu>\n          <Button\n            className={buildClassName(styles.button, styles.closeButton)}\n            round\n            size=\"tiny\"\n            color=\"translucent-white\"\n            ariaLabel={oldLang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const inputPlaceholder = paidMessagesStars\n    ? lang('ComposerPlaceholderPaidReply', {\n      amount: formatStarsAsIcon(lang, paidMessagesStars, { asFont: true, className: 'placeholder-star-icon' }),\n    }, {\n      withNodes: true,\n    })\n    : oldLang(isChatStory ? 'ReplyToGroupStory' : 'ReplyPrivately');\n\n  return (\n    <div\n      className={buildClassName(styles.slideInner, 'component-theme-dark')}\n      onMouseDown={handleLongPressMouseDown}\n      onMouseUp={handleLongPressMouseUp}\n      onMouseLeave={handleLongPressMouseLeave}\n      onTouchStart={handleLongPressTouchStart}\n      onTouchEnd={handleLongPressTouchEnd}\n    >\n      <div className={buildClassName(styles.storyHeader, appearanceAnimationClassNames)}>\n        {renderStoriesTabs()}\n        {renderSender()}\n      </div>\n\n      <div\n        className={styles.mediaWrapper}\n        style={`width: ${dimensions.width}px; height: ${dimensions.height}px`}\n      >\n        <canvas ref={thumbRef} className={styles.thumbnail} />\n        {previewBlobUrl && (\n          <img\n            key={`preview-${storyId}`}\n            src={previewBlobUrl}\n            draggable={false}\n            alt=\"\"\n            className={buildClassName(styles.media, styles.mediaPreview, previewTransitionClassNames)}\n          />\n        )}\n        {shouldRenderSkeleton && (\n          <Skeleton className={buildClassName(skeletonTransitionClassNames, styles.fullSize)} />\n        )}\n        {!isVideo && fullMediaData && (\n          <img\n            src={fullMediaData}\n            alt=\"\"\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            draggable={false}\n          />\n        )}\n        {isVideo && fullMediaData && (\n          <OptimizedVideo\n            ref={videoRef}\n            key={`video-${storyId}`}\n            className={buildClassName(styles.media, mediaTransitionClassNames)}\n            canPlay={isStoryPlaybackRequested}\n            muted={isMuted}\n            width={BASE_STORY_WIDTH}\n            height={BASE_STORY_HEIGHT}\n            draggable={false}\n            playsInline\n            disablePictureInPicture\n            isPriority\n            onPause={unmarkStoryPlaying}\n            onWaiting={unmarkStoryPlaying}\n            disableRemotePlayback\n            onTimeUpdate={handleVideoStoryTimeUpdate}\n          >\n            <source src={fullMediaData} type={PRIMARY_VIDEO_MIME} width=\"720\" />\n            {altMediaData && <source src={altMediaData} type={SECONDARY_VIDEO_MIME} width=\"480\" />}\n          </OptimizedVideo>\n        )}\n\n        {!isPausedByLongPress && !isComposerHasFocus && (\n          <>\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.prev)}\n              onClick={handleOpenPrevStory}\n              aria-label={oldLang('Previous')}\n            />\n            <button\n              type=\"button\"\n              className={buildClassName(styles.navigate, styles.next)}\n              onClick={handleOpenNextStory}\n              aria-label={oldLang('Next')}\n            />\n          </>\n        )}\n        {isLoadedStory && fullMediaData && (\n          <MediaAreaOverlay\n            key={`area-overlay-${storyId}-${peerId}`}\n            story={story}\n            isActive\n            isStoryPlaying={isDropdownMenuOpen}\n          />\n        )}\n        {!isMobile && (\n          <div className={styles.content}>\n            <div className={styles.contentInner}>\n              <Avatar\n                peer={peer}\n                withStory\n                storyViewerMode=\"disabled\"\n              />\n              <div className={styles.name}>{renderText(getPeerTitle(oldLang, peer) || '')}</div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldShowFooter && (\n        <StoryFooter story={story} className={appearanceAnimationClassNames} />\n      )}\n      {shouldRenderCaptionBackdrop && (\n        <div\n          tabIndex={0}\n          role=\"button\"\n          className={buildClassName(styles.captionBackdrop, captionBackdropTransitionClassNames)}\n          onClick={() => foldCaption()}\n          aria-label={oldLang('Close')}\n        />\n      )}\n      {hasText && <div className={buildClassName(styles.captionGradient, captionAppearanceAnimationClassNames)} />}\n      {shouldRenderCaption && (\n        <StoryCaption\n          key={`caption-${storyId}-${peerId}`}\n          story={story as ApiStory}\n          isExpanded={isCaptionExpanded}\n          onExpand={expandCaption}\n          onFold={foldCaption}\n          className={captionAppearanceAnimationClassNames}\n        />\n      )}\n      {shouldRenderComposer && (\n        <Composer\n          type=\"story\"\n          chatId={peerId}\n          threadId={MAIN_THREAD_ID}\n          storyId={storyId}\n          isReady={!isOut}\n          messageListType=\"thread\"\n          isMobile={getIsMobile()}\n          editableInputCssSelector={EDITABLE_STORY_INPUT_CSS_SELECTOR}\n          editableInputId={EDITABLE_STORY_INPUT_ID}\n          inputId=\"story-input-text\"\n          className={buildClassName(styles.composer, composerAppearanceAnimationClassNames)}\n          inputPlaceholder={inputPlaceholder}\n          onForward={canShare ? handleForwardClick : undefined}\n          onFocus={markComposerHasFocus}\n          onBlur={unmarkComposerHasFocus}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, {\n  peerId,\n  storyId,\n  isDeleteModalOpen,\n}): StateProps => {\n  const { appConfig } = global;\n  const user = selectUser(global, peerId);\n  const chat = selectChat(global, peerId);\n  const userFullInfo = selectUserFullInfo(global, peerId);\n  const tabState = selectTabState(global);\n  const {\n    storyViewer: {\n      isMuted,\n      viewModal,\n      isPrivacyModalOpen,\n      isStealthModalOpen,\n      storyList,\n    },\n    forwardMessages: { storyId: forwardedStoryId },\n    premiumModal,\n    safeLinkModalUrl,\n    mapModal,\n    reportModal,\n    giftInfoModal,\n    isPaymentMessageConfirmDialogOpen,\n  } = tabState;\n  const { isOpen: isPremiumModalOpen } = premiumModal || {};\n  const story = selectPeerStory(global, peerId, storyId);\n  const isLoadedStory = story && 'content' in story;\n  const shouldForcePause = Boolean(\n    isPaymentMessageConfirmDialogOpen\n    || viewModal || forwardedStoryId || tabState.reactionPicker?.storyId || reportModal || isPrivacyModalOpen\n    || isPremiumModalOpen || isDeleteModalOpen || safeLinkModalUrl || isStealthModalOpen || mapModal || giftInfoModal,\n  );\n\n  const forwardInfo = isLoadedStory ? story.forwardInfo : undefined;\n  const mediaAreas = isLoadedStory ? story.mediaAreas : undefined;\n  const forwardSenderId = forwardInfo?.fromPeerId\n    || mediaAreas?.find((area): area is ApiMediaAreaChannelPost => area.type === 'channelPost')?.channelId;\n  const forwardSender = forwardSenderId ? selectPeer(global, forwardSenderId) : undefined;\n  const withHeaderAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  const fromPeer = isLoadedStory && story.fromId ? selectPeer(global, story.fromId) : undefined;\n  const paidMessagesStars = selectPeerPaidMessagesStars(global, peerId);\n  const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n  return {\n    peer: (user || chat)!,\n    forwardSender,\n    fromPeer,\n    story,\n    orderedIds: storyList?.storyIdsByPeerId[peerId],\n    isMuted,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    shouldForcePause,\n    storyChangelogUserId: appConfig!.storyChangelogUserId,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    isChatExist: Boolean(chat),\n    arePeerSettingsLoaded: Boolean(userFullInfo?.settings),\n    stealthMode: global.stories.stealthMode,\n    withHeaderAnimation,\n    paidMessagesStars,\n    isAccountFrozen,\n  };\n})(Story));\n","import { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiPeer, ApiPeerStories, ApiTypeStory,\n} from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport { selectTabState } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  peer?: ApiPeer;\n  peerStories?: ApiPeerStories;\n}\n\ninterface StateProps {\n  lastViewedId?: number;\n  origin?: StoryViewerOrigin;\n  storyIdsForViewer?: number[];\n}\n\nfunction StoryPreview({\n  peer, peerStories, lastViewedId, storyIdsForViewer, origin,\n}: OwnProps & StateProps) {\n  const { openStoryViewer, loadPeerSkippedStories } = getActions();\n  const lang = useOldLang();\n\n  const story = useMemo<ApiTypeStory | undefined>(() => {\n    if (!peerStories) {\n      return undefined;\n    }\n\n    const {\n      orderedIds, lastReadId, byId,\n    } = peerStories;\n    const hasUnreadStories = orderedIds[orderedIds.length - 1] !== lastReadId;\n    const previewIndexId = lastViewedId && storyIdsForViewer?.includes(lastViewedId)\n      ? lastViewedId ?? (hasUnreadStories ? (lastReadId ?? -1) : -1)\n      : -1;\n    const resultId = byId[previewIndexId]?.id || storyIdsForViewer?.[0] || orderedIds[0];\n\n    return byId[resultId];\n  }, [lastViewedId, peerStories, storyIdsForViewer]);\n\n  const isLoaded = story && 'content' in story;\n\n  useEffect(() => {\n    if (story && !isLoaded) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [story, isLoaded]);\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  if (!peer || !story || 'isDeleted' in story) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className={styles.slideInner}\n      onClick={() => { openStoryViewer({ peerId: story.peerId, storyId: story.id, origin }); }}\n    >\n      {thumbUrl && (\n        <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n      )}\n      {isLoaded && <MediaAreaOverlay story={story} />}\n\n      <div className={styles.content}>\n        <div className={styles.contentInner}>\n          <Avatar\n            peer={peer}\n            withStory\n            storyViewerMode=\"disabled\"\n          />\n          <div className={styles.name}>{renderText(getPeerTitle(lang, peer) || '')}</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { peer }): StateProps => {\n  const {\n    storyViewer: {\n      lastViewedByPeerId: lastViewedByPeerIds,\n      origin,\n      storyList,\n    },\n  } = selectTabState(global);\n\n  return {\n    lastViewedId: peer?.id ? lastViewedByPeerIds?.[peer.id] : undefined,\n    origin,\n    storyIdsForViewer: peer?.id ? storyList?.storyIdsByPeerId[peer.id] : undefined,\n  };\n})(StoryPreview));\n","import type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useSignal, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiPeerStories, ApiTypeStory } from '../../api/types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { EDITABLE_STORY_INPUT_ID } from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getStoryKey } from '../../global/helpers';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeer,\n  selectTabState,\n} from '../../global/selectors';\nimport { IS_IOS } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport {\n  captureEvents,\n  IOS_SCREEN_EDGE_THRESHOLD,\n  SWIPE_DIRECTION_THRESHOLD,\n  SWIPE_DIRECTION_TOLERANCE,\n} from '../../util/captureEvents';\nimport focusEditableElement from '../../util/focusEditableElement';\nimport { clamp } from '../../util/math';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport { calculateOffsetX } from './helpers/dimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport useSlideSizes from './hooks/useSlideSizes';\n\nimport Story from './Story';\nimport StoryPreview from './StoryPreview';\n\nimport styles from './StoryViewer.module.scss';\n\ninterface OwnProps {\n  isOpen?: boolean;\n  isDeleteModalOpen?: boolean;\n  onDelete: (story: ApiTypeStory) => void;\n  onReport: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n}\n\ninterface StateProps {\n  peerIds: string[];\n  currentPeerId?: string;\n  currentStoryId?: number;\n  byPeerId?: Record<string, ApiPeerStories>;\n  isSinglePeer?: boolean;\n  isSingleStory?: boolean;\n  isPrivate?: boolean;\n  isArchive?: boolean;\n}\n\nconst ACTIVE_SLIDE_VERTICAL_CORRECTION_REM = 1.75;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SCROLL_RELEASE_DELAY = 1500;\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nfunction StorySlides({\n  peerIds,\n  currentPeerId,\n  currentStoryId,\n  isOpen,\n  isSinglePeer,\n  isSingleStory,\n  isPrivate,\n  isArchive,\n  byPeerId,\n  isDeleteModalOpen,\n  onDelete,\n  onClose,\n  onReport,\n}: OwnProps & StateProps) {\n  const { stopActiveReaction } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n  const [renderingPeerId, setRenderingPeerId] = useState(currentPeerId);\n  const [renderingStoryId, setRenderingStoryId] = useState(currentStoryId);\n  const prevPeerId = usePreviousDeprecated(currentPeerId);\n  const renderingIsArchive = useCurrentOrPrev(isArchive, true);\n  const renderingIsPrivate = useCurrentOrPrev(isPrivate, true);\n  const renderingIsSinglePeer = useCurrentOrPrev(isSinglePeer, true);\n  const renderingIsSingleStory = useCurrentOrPrev(isSingleStory, true);\n  const slideSizes = useSlideSizes();\n  const { height: windowHeight, width: windowWidth } = useWindowSize();\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isReleasedRef = useRef(false);\n  const { isMobile } = useAppLayout();\n\n  const rendersRef = useRef<Record<string, { current: HTMLDivElement }>>({});\n  const [getIsAnimating, setIsAnimating] = useSignal(false);\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: onClose,\n    shouldBeReplaced: true,\n  });\n\n  function setRef(ref: HTMLDivElement | undefined, peerId: string) {\n    if (!ref) {\n      return;\n    }\n    if (!rendersRef.current[peerId]) {\n      rendersRef.current[peerId] = { current: ref };\n    } else {\n      rendersRef.current[peerId].current = ref;\n    }\n  }\n\n  const renderingPeerIds = useMemo(() => {\n    if (renderingPeerId && (renderingIsSinglePeer || renderingIsSingleStory)) {\n      return [renderingPeerId];\n    }\n\n    const index = renderingPeerId ? peerIds.indexOf(renderingPeerId) : -1;\n    if (!renderingPeerId || index === -1) {\n      return [];\n    }\n\n    const start = Math.max(index - 4, 0);\n    const end = Math.min(index + 5, peerIds.length);\n\n    return peerIds.slice(start, end);\n  }, [renderingIsSingleStory, renderingIsSinglePeer, renderingPeerId, peerIds]);\n\n  const renderingPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !renderingPeerId) {\n      return -1;\n    }\n\n    return renderingPeerIds.indexOf(renderingPeerId);\n  }, [renderingPeerId, renderingPeerIds]);\n\n  const currentPeerPosition = useMemo(() => {\n    if (!renderingPeerIds.length || !currentPeerId) {\n      return -1;\n    }\n    return renderingPeerIds.indexOf(currentPeerId);\n  }, [currentPeerId, renderingPeerIds]);\n\n  useEffect(() => {\n    if (!isMobile) return;\n\n    // If animation disabled, set rendering peer id to current peer\n    setRenderingPeerId(currentPeerId);\n  }, [currentPeerId, isMobile]);\n\n  // Handling the flipping of stories from a current user\n  useEffect(() => {\n    if (renderingPeerId === currentPeerId && currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n  }, [currentPeerId, currentStoryId, renderingPeerId, renderingStoryId]);\n\n  useEffect(() => {\n    if (isMobile) return undefined;\n    if (prevPeerId && prevPeerId !== currentPeerId) {\n      setIsAnimating(true);\n    }\n\n    return () => {\n      setIsAnimating(false);\n    };\n  }, [prevPeerId, currentPeerId, setIsAnimating, isMobile]);\n\n  useEffect(() => {\n    return () => {\n      if (!currentStoryId || !currentPeerId) return;\n      stopActiveReaction({\n        containerId: getStoryKey(currentPeerId, currentStoryId),\n      });\n    };\n  }, [currentStoryId, currentPeerId]);\n\n  const slideAmount = currentPeerPosition - renderingPeerPosition;\n  const isBackward = renderingPeerPosition > currentPeerPosition;\n\n  const calculateTransformX = useLastCallback(() => {\n    return peerIds.reduce<Record<string, number>>((transformX, peerId, index) => {\n      if (peerId === renderingPeerId) {\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: isBackward,\n        });\n      } else {\n        let isMoveThroughActiveSlide = false;\n        if (!isBackward && index > 0 && peerIds[index - 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n        if (isBackward && index < peerIds.length - 1 && peerIds[index + 1] === renderingPeerId) {\n          isMoveThroughActiveSlide = true;\n        }\n\n        transformX[peerId] = calculateOffsetX({\n          scale: slideSizes.scale,\n          slideAmount,\n          isBackward,\n          isActiveSlideSize: currentPeerId === peerId && !isBackward,\n          isMoveThroughActiveSlide,\n        });\n      }\n\n      return transformX;\n    }, {});\n  });\n\n  useEffect(() => {\n    if (!containerRef.current || !isOpen) {\n      return undefined;\n    }\n\n    let offsetY = 0;\n\n    const getCurrentStoryRef = () => {\n      return renderingPeerId ? rendersRef.current[renderingPeerId]?.current : undefined;\n    };\n\n    const onRelease = (event: MouseEvent | TouchEvent | WheelEvent) => {\n      // This allows to prevent onRelease triggered by debounced wheel event\n      // after onRelease was triggered manually in onDrag\n      if (isReleasedRef.current) {\n        isReleasedRef.current = false;\n        return;\n      }\n      const current = getCurrentStoryRef();\n      if (!current) return;\n\n      if (offsetY < -SWIPE_Y_THRESHOLD) {\n        const composer = document.getElementById(EDITABLE_STORY_INPUT_ID);\n        if (composer) {\n          requestMutation(() => {\n            focusEditableElement(composer);\n          });\n        }\n        return;\n      }\n\n      if (offsetY > SWIPE_Y_THRESHOLD) {\n        onClose();\n        if (event.type === 'wheel') {\n          disableScrolling();\n          setTimeout(enableScrolling, SCROLL_RELEASE_DELAY);\n        }\n      } else {\n        requestMutation(() => {\n          current.style.setProperty('--slide-translate-y', '0px');\n        });\n      }\n    };\n\n    return captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      withWheelDrag: true,\n      excludedClosestSelector: '.Composer',\n      onDrag: (event, captureEvent, {\n        dragOffsetX, dragOffsetY,\n      }) => {\n        if (isReleasedRef.current) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (event.type === 'mousemove') return;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const current = getCurrentStoryRef();\n        if (!current) return;\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(absOffsetY) > SWIPE_DIRECTION_THRESHOLD || absOffsetY / absOffsetX > SWIPE_DIRECTION_TOLERANCE) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          offsetY = clamp(dragOffsetY, -limit, limit);\n          if (offsetY > 0) {\n            requestMutation(() => {\n              current.style.setProperty('--slide-translate-y', `${offsetY * (isMobile ? 1 : -1)}px`);\n            });\n          }\n          if (event.type === 'wheel' && Math.abs(offsetY) > SWIPE_Y_THRESHOLD * 2) {\n            onRelease(event);\n            isReleasedRef.current = true;\n          }\n        }\n      },\n      onRelease,\n    });\n  }, [isOpen, onClose, windowWidth, windowHeight, isMobile, renderingPeerId]);\n\n  useLayoutEffect(() => {\n    if (isMobile) return;\n    const transformX = calculateTransformX();\n\n    Object.entries(rendersRef.current).forEach(([peerId, { current }]) => {\n      if (!current) return;\n\n      if (!getIsAnimating()) {\n        current.classList.remove(styles.slideAnimation, styles.slideAnimationToActive, styles.slideAnimationFromActive);\n        current.style.setProperty('--slide-translate-x', '0px');\n        current.style.setProperty('--slide-translate-y', '0px');\n        current.style.setProperty('--slide-translate-scale', '1');\n        current.style.setProperty('--slide-content-scale', String(slideSizes.toActiveScale));\n\n        return;\n      }\n\n      const getScale = () => {\n        if (currentPeerId === peerId) {\n          return String(slideSizes.toActiveScale);\n        }\n        if (peerId === renderingPeerId) {\n          return String(slideSizes.fromActiveScale);\n        }\n        return '1';\n      };\n\n      let offsetY = 0;\n      if (peerId === renderingPeerId) {\n        offsetY = -ACTIVE_SLIDE_VERTICAL_CORRECTION_REM * slideSizes.fromActiveScale;\n        current.classList.add(styles.slideAnimationFromActive);\n      }\n      if (peerId === currentPeerId) {\n        offsetY = ACTIVE_SLIDE_VERTICAL_CORRECTION_REM;\n        current.classList.add(styles.slideAnimationToActive);\n      }\n\n      current.classList.add(styles.slideAnimation);\n      current.style.setProperty('--slide-translate-x', `${transformX[peerId] || 0}px`);\n      current.style.setProperty('--slide-translate-y', `${offsetY}rem`);\n      current.style.setProperty('--slide-translate-scale', getScale());\n    });\n  }, [currentPeerId, getIsAnimating, renderingPeerId, slideSizes, isMobile]);\n\n  const handleTransitionEnd = useLastCallback((event: React.TransitionEvent<HTMLDivElement>) => {\n    // It is `target` that is needed here, not `currentTarget`\n    const target = event.target as HTMLDivElement | null;\n\n    if (!target || !target.classList.contains(styles.activeSlide)) return;\n\n    if (renderingPeerId !== currentPeerId) {\n      setRenderingPeerId(currentPeerId);\n      setRenderingStoryId(currentStoryId);\n    } else if (currentStoryId !== renderingStoryId) {\n      setRenderingStoryId(currentStoryId);\n    }\n    setIsAnimating(false);\n  });\n\n  if (isMobile) {\n    return (\n      <div className={styles.wrapper} ref={containerRef}>\n        <div\n          className={styles.mobileSlide}\n          ref={(ref) => setRef(ref, renderingPeerId!)}\n        >\n          <Story\n            peerId={renderingPeerId!}\n            storyId={renderingStoryId!}\n            onDelete={onDelete}\n            dimensions={slideSizes.activeSlide}\n            isPrivateStories={renderingIsPrivate}\n            isArchivedStories={renderingIsArchive}\n            isDeleteModalOpen={isDeleteModalOpen}\n            isSingleStory={isSingleStory}\n            getIsAnimating={getIsAnimating}\n            onClose={onClose}\n            onReport={onReport}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  function renderStoryPreview(peerId: string, index: number, position: number) {\n    const style = buildStyle(\n      `width: ${slideSizes.slide.width}px`,\n      `height: ${slideSizes.slide.height}px`,\n    );\n    const className = buildClassName(\n      styles.slide,\n      styles.slidePreview,\n      `slide-${position}`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={className}\n        style={style}\n      >\n        <StoryPreview\n          peer={selectPeer(getGlobal(), peerId)}\n          peerStories={byPeerId?.[peerId]}\n        />\n      </div>\n    );\n  }\n\n  function renderStory(peerId: string) {\n    const style = isMobile ? undefined : buildStyle(\n      `width: ${slideSizes.activeSlide.width}px`,\n      `--slide-media-height: ${slideSizes.activeSlide.height}px`,\n    );\n\n    return (\n      <div\n        key={peerId}\n        ref={(ref) => setRef(ref, peerId)}\n        className={buildClassName(styles.slide, styles.activeSlide)}\n        style={style}\n      >\n        <Story\n          peerId={peerId}\n          storyId={renderingStoryId!}\n          onDelete={onDelete}\n          dimensions={slideSizes.activeSlide}\n          isPrivateStories={renderingIsPrivate}\n          isArchivedStories={renderingIsArchive}\n          isDeleteModalOpen={isDeleteModalOpen}\n          isSingleStory={isSingleStory}\n          getIsAnimating={getIsAnimating}\n          onClose={onClose}\n          onReport={onReport}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className={styles.wrapper}\n      ref={containerRef}\n      style={`--story-viewer-scale: ${slideSizes.scale}`}\n      onTransitionEnd={handleTransitionEnd}\n    >\n      <div className={styles.fullSize} onClick={onClose} />\n      {renderingPeerIds.length > 1 && (\n        <div className={styles.backdropNonInteractive} style={`height: ${slideSizes.slide.height}px`} />\n      )}\n      {renderingPeerIds.map((peerId, index) => {\n        if (peerId === renderingPeerId) {\n          return renderStory(renderingPeerId);\n        }\n\n        return renderStoryPreview(peerId, index, index - renderingPeerPosition);\n      })}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    storyViewer: {\n      peerId: currentPeerId, storyId: currentStoryId, isSinglePeer, isSingleStory, isPrivate, isArchive, storyList,\n    },\n  } = selectTabState(global);\n  const { byPeerId, orderedPeerIds: { active } } = global.stories;\n\n  return {\n    byPeerId,\n    peerIds: storyList?.peerIds ?? active,\n    currentPeerId,\n    currentStoryId,\n    isSinglePeer,\n    isSingleStory,\n    isPrivate,\n    isArchive,\n  };\n}, (global) => selectIsStoryViewerOpen(global))(StorySlides));\n","import { useState } from '../lib/teact/teact';\n\nimport useLastCallback from './useLastCallback';\n\nconst THRESHOLD = 5;\n\nexport default function useScrolledState(threshold = THRESHOLD) {\n  const [isAtBeginning, setIsAtBeginning] = useState(true);\n  const [isAtEnd, setIsAtEnd] = useState(true);\n\n  const handleScroll = useLastCallback((e: React.UIEvent<HTMLElement>) => {\n    const { scrollHeight, scrollTop, clientHeight } = e.target as HTMLElement;\n\n    setIsAtBeginning(scrollTop < threshold);\n    setIsAtEnd(scrollHeight - scrollTop - clientHeight < threshold);\n  });\n\n  return { isAtBeginning, isAtEnd, handleScroll };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"views-list\":\"gpDY8bos\",\"viewsList\":\"gpDY8bos\",\"views-list-loading\":\"vuRAfQ5v\",\"viewsListLoading\":\"vuRAfQ5v\",\"info\":\"AOSUIChK\",\"centeredInfo\":\"oGLhkkS7\",\"view-reaction\":\"MLaabS6n\",\"viewReaction\":\"MLaabS6n\",\"header\":\"d3N2bktu\",\"content\":\"QmRA3HZK\",\"top-button\":\"Dkv8GAxf\",\"topButton\":\"Dkv8GAxf\",\"contact-filter\":\"YpB_9VxE\",\"contactFilter\":\"YpB_9VxE\",\"selected\":\"DoUlpdZJ\",\"sort\":\"axDpgq9G\",\"sort-button\":\"Bm5VA66f\",\"sortButton\":\"Bm5VA66f\",\"icon-sort\":\"YVQiH93R\",\"iconSort\":\"YVQiH93R\",\"icon-down\":\"NXP9aMD0\",\"iconDown\":\"NXP9aMD0\",\"search\":\"QQQqBLK6\",\"bottom-info\":\"_CSv6suH\",\"bottomInfo\":\"_CSv6suH\",\"scrolled\":\"RYQ0liYe\",\"footer\":\"dUK7rP37\",\"closeButton\":\"abPzLiCH\",\"opacity-fade-in\":\"cX8oY3zb\",\"opacityFadeIn\":\"cX8oY3zb\",\"fadeIn\":\"Sx_aeh1o\",\"blocked\":\"L82sciL8\",\"check\":\"UqGBKwjg\",\"menuBubble\":\"dRqemuTA\",\"with-colored-status\":\"GQ96fta9\",\"withColoredStatus\":\"GQ96fta9\"};","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiPeer, ApiTypeStoryView, ApiUser,\n} from '../../api/types';\nimport type { IconName } from '../../types/icons';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectPeer } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { isUserId } from '../../util/entities/ids';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\n\nimport styles from './StoryViewModal.module.scss';\n\ntype OwnProps = {\n  storyView: ApiTypeStoryView;\n};\n\ntype StateProps = {\n  peer?: ApiPeer;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\nconst BULLET = '\\u2022';\n\nconst StoryView = ({\n  storyView,\n  peer,\n  availableReactions,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    closeStoryViewer,\n    unblockUser,\n    blockUser,\n    deleteContact,\n    updateStoryView,\n    focusMessage,\n    openStoryViewer,\n    closeStoryViewModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    const { type } = storyView;\n\n    if (type === 'repost') {\n      closeStoryViewModal();\n      openStoryViewer({\n        peerId: storyView.peerId,\n        storyId: storyView.storyId,\n      });\n      return;\n    }\n\n    closeStoryViewer();\n\n    setTimeout(() => {\n      if (type === 'user') {\n        openChat({ id: storyView.peerId });\n      } else if (type === 'forward') {\n        focusMessage({ chatId: storyView.peerId, messageId: storyView.messageId });\n      }\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const contextActions = useMemo(() => {\n    if (!isUserId(storyView.peerId)) return undefined;\n    const { peerId, areStoriesBlocked, isUserBlocked } = storyView;\n    const user = peer as ApiUser;\n    const { isContact } = user || {};\n    const fullName = getUserFullName(user);\n\n    const actions: MenuItemContextAction[] = [];\n\n    if (!isUserBlocked) {\n      if (!areStoriesBlocked) {\n        actions.push({\n          handler: () => {\n            blockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: true });\n          },\n          title: lang('StoryHideFrom', fullName),\n          icon: 'hand-stop',\n        });\n      } else {\n        actions.push({\n          handler: () => {\n            unblockUser({ userId: peerId, isOnlyStories: true });\n            updateStoryView({ userId: peerId, areStoriesBlocked: false });\n          },\n          title: lang('StoryShowBackTo', fullName),\n          icon: 'play-story',\n        });\n      }\n    }\n\n    if (isContact) {\n      actions.push({\n        handler: () => {\n          deleteContact({ userId: peerId });\n        },\n        title: lang('DeleteContact'),\n        icon: 'delete-user',\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        handler: () => {\n          if (isUserBlocked) {\n            unblockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: false });\n          } else {\n            blockUser({ userId: peerId });\n            updateStoryView({ userId: peerId, isUserBlocked: true });\n          }\n        },\n        title: lang(isUserBlocked ? 'Unblock' : 'BlockUser'),\n        icon: isUserBlocked ? 'user' : 'delete-user',\n        destructive: !isUserBlocked,\n      });\n    }\n\n    return actions;\n  }, [lang, storyView, peer]);\n\n  const statusIcon: IconName = storyView.type === 'user' ? 'message-read'\n    : storyView.type === 'forward' ? 'forward' : 'loop';\n  const shouldColorStatus = storyView.type === 'forward' || storyView.type === 'repost';\n\n  const status = useMemo(() => {\n    const isModified = storyView.type === 'repost' && storyView.story.forwardInfo?.isModified;\n    const parts = [formatDateAtTime(lang, storyView.date * 1000)];\n    if (isModified) {\n      parts.push(lang('lng_edited'));\n    }\n\n    return parts.join(` ${BULLET} `);\n  }, [lang, storyView]);\n\n  return (\n    <ListItem\n      key={storyView.peerId}\n      className={buildClassName(\n        'chat-item-clickable small-icon',\n        styles.opacityFadeIn,\n        (storyView.isUserBlocked || storyView.areStoriesBlocked) && styles.blocked,\n      )}\n      onClick={handleClick}\n      rightElement={storyView.type === 'user' && storyView.reaction ? (\n        <ReactionStaticEmoji\n          reaction={storyView.reaction}\n          className={styles.viewReaction}\n          size={DEFAULT_REACTION_SIZE}\n          availableReactions={availableReactions}\n          withIconHeart\n        />\n      ) : undefined}\n      contextActions={contextActions}\n      withPortalForMenu\n      menuBubbleClassName={styles.menuBubble}\n    >\n      {isUserId(storyView.peerId) ? (\n        <PrivateChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          userId={storyView.peerId}\n          noStatusOrTyping\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n          forceShowSelf\n        />\n      ) : (\n        <GroupChatInfo\n          className={buildClassName(shouldColorStatus && styles.withColoredStatus)}\n          chatId={storyView.peerId}\n          status={status}\n          statusIcon={statusIcon}\n          withStory\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { storyView }) => {\n  const peer = selectPeer(global, storyView.peerId);\n\n  return {\n    peer,\n    availableReactions: global.reactions.availableReactions,\n  };\n})(StoryView));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStoryView } from '../../api/types';\n\nimport {\n  STORY_MIN_REACTIONS_SORT,\n  STORY_VIEWS_MIN_CONTACTS_FILTER,\n  STORY_VIEWS_MIN_SEARCH,\n} from '../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport renderText from '../common/helpers/renderText';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport PlaceholderChatInfo from '../ui/placeholder/PlaceholderChatInfo';\nimport SearchInput from '../ui/SearchInput';\nimport StoryView from './StoryView';\n\nimport styles from './StoryViewModal.module.scss';\n\ninterface StateProps {\n  story?: ApiStory;\n  isLoading?: boolean;\n  views?: ApiTypeStoryView[];\n  nextOffset?: string;\n  viewersExpirePeriod: number;\n  isCurrentUserPremium?: boolean;\n}\n\nconst REFETCH_DEBOUNCE = 250;\n\nfunction StoryViewModal({\n  story,\n  viewersExpirePeriod,\n  views,\n  nextOffset,\n  isLoading,\n  isCurrentUserPremium,\n}: StateProps) {\n  const {\n    loadStoryViewList, closeStoryViewModal, clearStoryViews,\n  } = getActions();\n\n  const [areJustContacts, markJustContacts, unmarkJustContacts] = useFlag(false);\n  const [areReactionsFirst, markReactionsFirst, unmarkReactionsFirst] = useFlag(true);\n  const [query, setQuery] = useState('');\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(story);\n  const isExpired = Boolean(story?.date) && (story.date + viewersExpirePeriod) < getServerTime();\n  const { viewsCount = 0, reactionsCount = 0 } = story?.views || {};\n\n  const shouldShowJustContacts = story?.isPublic && viewsCount > STORY_VIEWS_MIN_CONTACTS_FILTER;\n  const shouldShowSortByReactions = reactionsCount > STORY_MIN_REACTIONS_SORT;\n  const shouldShowSearch = viewsCount > STORY_VIEWS_MIN_SEARCH;\n  const hasHeader = shouldShowJustContacts || shouldShowSortByReactions || shouldShowSearch;\n\n  useEffect(() => {\n    if (!isOpen) {\n      setQuery('');\n      unmarkJustContacts();\n      markReactionsFirst();\n    }\n  }, [isOpen]);\n\n  const refetchViews = useDebouncedCallback(() => {\n    clearStoryViews({ isLoading: true });\n  }, [], REFETCH_DEBOUNCE, true);\n\n  useEffect(() => {\n    refetchViews();\n  }, [areJustContacts, areReactionsFirst, query, refetchViews]);\n\n  const sortedViews = useMemo(() => {\n    return views?.sort(prepareComparator(areReactionsFirst));\n  }, [areReactionsFirst, views]);\n\n  const placeholderCount = !sortedViews?.length ? Math.min(viewsCount, 8) : 1;\n\n  const notAllAvailable = Boolean(sortedViews?.length) && sortedViews.length < viewsCount && isExpired;\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!story?.id || nextOffset === undefined) return;\n    loadStoryViewList({\n      peerId: story.peerId,\n      storyId: story.id,\n      offset: nextOffset,\n      areReactionsFirst: areReactionsFirst || undefined,\n      areJustContacts: areJustContacts || undefined,\n      query,\n    });\n  });\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const handleClose = useLastCallback(() => {\n    closeStoryViewModal();\n  });\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        fluid\n        size=\"tiny\"\n        color=\"translucent\"\n        className={buildClassName(!isMenuOpen && 'active', styles.sortButton, styles.topButton)}\n        faded={isMenuOpen}\n        onClick={onTrigger}\n        ariaLabel={lang('SortBy')}\n      >\n        <Icon name={areReactionsFirst ? 'heart-outline' : 'recent'} className={styles.iconSort} />\n        <Icon name=\"down\" className={styles.iconDown} />\n      </Button>\n    );\n  }, [areReactionsFirst, lang]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={handleClose}\n      className=\"component-theme-dark\"\n      contentClassName={styles.viewsList}\n      isSlim\n    >\n      {hasHeader && (\n        <div className={styles.header}>\n          {shouldShowJustContacts && (\n            <div className={styles.contactFilter}>\n              <Button\n                className={buildClassName(!areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={unmarkJustContacts}\n              >\n                {lang('AllViewers')}\n              </Button>\n              <Button\n                className={buildClassName(areJustContacts && styles.selected, styles.topButton)}\n                size=\"tiny\"\n                color=\"translucent-white\"\n                fluid\n                onClick={markJustContacts}\n              >\n                {lang('Contacts')}\n              </Button>\n            </div>\n          )}\n          {shouldShowSortByReactions && (\n            <DropdownMenu\n              className={styles.sort}\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"heart-outline\" onClick={markReactionsFirst}>\n                {lang('SortByReactions')}\n                {areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n              <MenuItem icon=\"recent\" onClick={unmarkReactionsFirst}>\n                {lang('SortByTime')}\n                {!areReactionsFirst && (\n                  <Icon name=\"check\" className={styles.check} />\n                )}\n              </MenuItem>\n            </DropdownMenu>\n          )}\n          {shouldShowSearch && (\n            <SearchInput className={styles.search} value={query} onChange={setQuery} />\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(styles.content, !isAtBeginning && styles.topScrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {isExpired && !isLoading && !query && Boolean(!sortedViews?.length) && (\n          <div className={buildClassName(styles.info, styles.centeredInfo)}>\n            {renderText(\n              lang(isCurrentUserPremium ? 'ServerErrorViewers' : 'ExpiredViewsStub'),\n              ['simple_markdown', 'emoji'],\n            )}\n          </div>\n        )}\n        {!isLoading && Boolean(query.length) && !sortedViews?.length && (\n          <div className={styles.info}>\n            {lang('Story.ViewList.EmptyTextSearch')}\n          </div>\n        )}\n        <InfiniteScroll\n          items={sortedViews}\n          onLoadMore={handleLoadMore}\n        >\n          {sortedViews?.map((view) => {\n            const additionalKeyId = view.type === 'forward' ? view.messageId\n              : view.type === 'repost' ? view.storyId : 'user';\n            return (\n              <StoryView key={`${view.peerId}-${view.date}-${additionalKeyId}`} storyView={view} />\n            );\n          })}\n          {isLoading && Array.from({ length: placeholderCount }).map((_, i) => (\n            <ListItem\n\n              key={`placeholder-${i}`}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              disabled\n            >\n              <PlaceholderChatInfo />\n            </ListItem>\n          ))}\n          {notAllAvailable && (\n            <div key=\"not-all-available\" className={buildClassName(styles.info, styles.bottomInfo)}>\n              {lang('Story.ViewList.NotFullyRecorded')}\n            </div>\n          )}\n        </InfiniteScroll>\n      </div>\n      <div className={buildClassName(styles.footer, 'dialog-buttons')}>\n        <Button\n          className={buildClassName('confirm-dialog-button', styles.close)}\n          isText\n          onClick={handleClose}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nfunction prepareComparator(areReactionsFirst?: boolean) {\n  return (a: ApiTypeStoryView, b: ApiTypeStoryView) => {\n    if (areReactionsFirst) {\n      const reactionA = a.type === 'user' && a.reaction;\n      const reactionB = b.type === 'user' && b.reaction;\n      if (reactionA && !reactionB) {\n        return -1;\n      }\n      if (!reactionA && reactionB) {\n        return 1;\n      }\n    }\n\n    return b.date - a.date;\n  };\n}\n\nexport default memo(withGlobal((global) => {\n  const { appConfig } = global;\n  const { storyViewer: { viewModal } } = selectTabState(global);\n  const {\n    storyId, views, nextOffset, isLoading,\n  } = viewModal || {};\n  const story = storyId ? selectPeerStory(global, global.currentUserId!, storyId) : undefined;\n\n  return {\n    storyId,\n    views,\n    viewersExpirePeriod: appConfig!.storyExpirePeriod + appConfig!.storyViewersExpirePeriod,\n    story: story && 'content' in story ? story : undefined,\n    nextOffset,\n    isLoading,\n    availableReactions: global.reactions.availableReactions,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n  };\n})(StoryViewModal));\n","import {\n  beginHeavyAnimation,\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiTypeStory } from '../../api/types';\nimport type { StoryViewerOrigin } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport {\n  selectIsStoryViewerOpen,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { disableDirectTextInput, enableDirectTextInput } from '../../util/directInputManager';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { dispatchPriorityPlaybackEvent } from '../../hooks/usePriorityPlaybackCheck';\nimport useSlideSizes from './hooks/useSlideSizes';\nimport useStoryProps from './hooks/useStoryProps';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport StealthModeModal from './StealthModeModal';\nimport StoryDeleteConfirmModal from './StoryDeleteConfirmModal';\nimport StorySettings from './StorySettings';\nimport StorySlides from './StorySlides';\nimport StoryViewModal from './StoryViewModal';\n\nimport styles from './StoryViewer.module.scss';\n\nconst ANIMATION_DURATION = 250;\n\ninterface StateProps {\n  isOpen: boolean;\n  peerId: string;\n  storyId?: number;\n  story?: ApiTypeStory;\n  origin?: StoryViewerOrigin;\n  shouldSkipHistoryAnimations?: boolean;\n  withAnimation?: boolean;\n  isPrivacyModalOpen?: boolean;\n}\n\nfunction StoryViewer({\n  isOpen,\n  peerId,\n  storyId,\n  story,\n  origin,\n  shouldSkipHistoryAnimations,\n  withAnimation,\n  isPrivacyModalOpen,\n}: StateProps) {\n  const { closeStoryViewer, closeStoryPrivacyEditor, reportStory } = getActions();\n\n  const lang = useOldLang();\n  const [storyToDelete, setStoryToDelete] = useState<ApiTypeStory | undefined>(undefined);\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag(false);\n\n  const { bestImageData, thumbnail } = useStoryProps(story);\n  const slideSizes = useSlideSizes();\n  const isPrevOpen = usePreviousDeprecated(isOpen);\n  const prevBestImageData = usePreviousDeprecated(bestImageData);\n  const prevPeerId = usePreviousDeprecated(peerId);\n  const prevOrigin = usePreviousDeprecated(origin);\n  const isGhostAnimation = Boolean(withAnimation && !shouldSkipHistoryAnimations);\n\n  useEffect(() => {\n    if (!isOpen) {\n      setStoryToDelete(undefined);\n      closeDeleteModal();\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    disableDirectTextInput();\n    const stopPriorityPlayback = dispatchPriorityPlaybackEvent();\n\n    return () => {\n      enableDirectTextInput();\n      stopPriorityPlayback();\n    };\n  }, [isOpen]);\n\n  const handleClose = useCallback(() => {\n    closeStoryViewer();\n  }, [closeStoryViewer]);\n\n  const handleOpenDeleteModal = useLastCallback((s: ApiTypeStory) => {\n    setStoryToDelete(s);\n    openDeleteModal();\n  });\n\n  const handleCloseDeleteModal = useLastCallback(() => {\n    closeDeleteModal();\n    setStoryToDelete(undefined);\n  });\n\n  const openMessageReport = useLastCallback(() => {\n    if (!storyId) return;\n    reportStory({ storyId, peerId });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    handleClose();\n  }) : undefined), [handleClose, isOpen]);\n\n  useEffect(() => {\n    if (isGhostAnimation && !isPrevOpen && isOpen && peerId && thumbnail && origin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(peerId, origin, thumbnail, bestImageData, slideSizes.activeSlide);\n    }\n    if (isGhostAnimation && isPrevOpen && !isOpen && prevPeerId && prevBestImageData && prevOrigin !== undefined) {\n      beginHeavyAnimation(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevPeerId, prevOrigin, prevBestImageData);\n    }\n  }, [\n    isGhostAnimation,\n    bestImageData,\n    prevBestImageData,\n    isOpen,\n    isPrevOpen,\n    slideSizes.activeSlide,\n    thumbnail,\n    peerId,\n    prevPeerId,\n    origin,\n    prevOrigin,\n  ]);\n\n  return (\n    <ShowTransition\n      id=\"StoryViewer\"\n      className={styles.root}\n      isOpen={isOpen}\n      shouldAnimateFirstRender\n      noCloseTransition={shouldSkipHistoryAnimations}\n    >\n      <div className={styles.backdrop} onClick={handleClose} />\n      <Button\n        className={styles.close}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n\n      <StorySlides\n        isOpen={isOpen}\n        isDeleteModalOpen={isDeleteModalOpen}\n        onReport={openMessageReport}\n        onClose={handleClose}\n        onDelete={handleOpenDeleteModal}\n      />\n\n      <StoryDeleteConfirmModal\n        isOpen={isDeleteModalOpen}\n        story={storyToDelete}\n        onClose={handleCloseDeleteModal}\n      />\n      <StoryViewModal />\n      <StealthModeModal />\n      <StorySettings isOpen={isPrivacyModalOpen} onClose={closeStoryPrivacyEditor} />\n    </ShowTransition>\n  );\n}\n\nexport default memo(withGlobal((global): StateProps => {\n  const {\n    shouldSkipHistoryAnimations, storyViewer: {\n      storyId, peerId, isPrivacyModalOpen, origin,\n    },\n  } = selectTabState(global);\n  const story = peerId && storyId ? selectPeerStory(global, peerId, storyId) : undefined;\n  const withAnimation = selectPerformanceSettingsValue(global, 'mediaViewerAnimations');\n\n  return {\n    isOpen: selectIsStoryViewerOpen(global),\n    shouldSkipHistoryAnimations,\n    peerId: peerId!,\n    storyId,\n    story,\n    origin,\n    withAnimation,\n    isPrivacyModalOpen,\n  };\n})(StoryViewer));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\n\nimport { PEER_PICKER_ITEM_HEIGHT_PX } from '../../../config';\nimport {\n  getCanPostInChat, getGroupStatus, getUserStatus, isUserOnline,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport { selectMonoforumChannel, selectPeer, selectTopics, selectUserStatus } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../helpers/mediaDimensions';\nimport renderText from '../helpers/renderText';\n\nimport useSelector from '../../../hooks/data/useSelector';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useInputFocusOnOpen from '../../../hooks/useInputFocusOnOpen';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport Avatar from '../Avatar';\nimport FullNameTitle from '../FullNameTitle';\nimport Icon from '../icons/Icon';\nimport TopicIcon from '../TopicIcon';\nimport PickerItem from './PickerItem';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  searchPlaceholder: string;\n  search: string;\n  className?: string;\n  isLowStackPriority?: boolean;\n  loadMore?: NoneToVoidFunction;\n  onSearchChange: (search: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CHAT_LIST_SLIDE = 0;\nconst TOPIC_LIST_SLIDE = 1;\nconst TOPIC_ICON_SIZE = 2.75 * REM;\nconst ITEM_CLASS_NAME = 'ChatOrUserPicker-item';\nconst TOPIC_ITEM_HEIGHT_PX = 56;\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  search,\n  searchPlaceholder,\n  className,\n  loadMore,\n  onSearchChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n}) => {\n  const { loadTopics } = getActions();\n\n  const oldLang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const topicContainerRef = useRef<HTMLDivElement>();\n  const searchRef = useRef<HTMLInputElement>();\n  const topicSearchRef = useRef<HTMLInputElement>();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(search));\n  const [forumId, setForumId] = useState<string | undefined>(undefined);\n  const [topicSearch, setTopicSearch] = useState<string>('');\n  const activeKey = forumId ? TOPIC_LIST_SLIDE : CHAT_LIST_SLIDE;\n  const viewportOffset = chatOrUserIds.indexOf(viewportIds![0]);\n\n  const resetSearch = useLastCallback(() => {\n    onSearchChange('');\n  });\n  useInputFocusOnOpen(searchRef, isOpen && activeKey === CHAT_LIST_SLIDE, resetSearch);\n  useInputFocusOnOpen(topicSearchRef, isOpen && activeKey === TOPIC_LIST_SLIDE);\n\n  const selectTopicsById = useLastCallback((global: GlobalState) => {\n    if (!forumId) {\n      return undefined;\n    }\n\n    return selectTopics(global, forumId);\n  });\n\n  const forumTopicsById = useSelector(selectTopicsById);\n\n  const [topicIds, topics] = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const chatFullInfoById = global.chats.fullInfoById;\n\n    const chat = chatsById[forumId!];\n\n    if (!chat || !forumTopicsById) {\n      return [undefined, undefined];\n    }\n\n    const searchTitle = topicSearch.toLowerCase();\n\n    const result = forumTopicsById\n      ? Object.values(forumTopicsById).reduce((acc, topic) => {\n        if (\n          getCanPostInChat(chat, topic, undefined, chatFullInfoById[forumId!])\n          && (!searchTitle || topic.title.toLowerCase().includes(searchTitle))\n        ) {\n          acc[topic.id] = topic;\n        }\n\n        return acc;\n      }, {} as Record<number, ApiTopic>)\n      : forumTopicsById;\n\n    return [Object.keys(result).map(Number), result];\n  }, [forumId, topicSearch, forumTopicsById]);\n\n  const handleHeaderBackClick = useLastCallback(() => {\n    setForumId(undefined);\n    setTopicSearch('');\n  });\n\n  const handleSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onSearchChange(e.currentTarget.value);\n  });\n\n  const handleTopicSearchChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTopicSearch(e.currentTarget.value);\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      const chatsById = getGlobal().chats.byId;\n\n      const chatId = viewportIds[index === -1 ? 0 : index];\n      const chat = chatsById[chatId];\n      if (chat?.isForum) {\n        if (!forumTopicsById) loadTopics({ chatId });\n        setForumId(chatId);\n      } else {\n        onSelectChatOrUser(chatId);\n      }\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleTopicKeyDown = useKeyboardListNavigation(topicContainerRef, isOpen, (index) => {\n    if (topicIds?.length) {\n      onSelectChatOrUser(forumId!, topicIds[index === -1 ? 0 : index]);\n    }\n  }, `.${ITEM_CLASS_NAME}`, true);\n\n  const handleClick = useLastCallback((chatId: string) => {\n    const chatsById = getGlobal().chats.byId;\n    const chat = chatsById?.[chatId];\n    if (chat?.isForum) {\n      if (!forumTopicsById) loadTopics({ chatId });\n      setForumId(chatId);\n      resetSearch();\n    } else {\n      onSelectChatOrUser(chatId);\n    }\n  });\n\n  const renderChatItem = useCallback((id: string, index: number) => {\n    const global = getGlobal();\n    let peer = selectPeer(global, id);\n    if (!peer) {\n      return undefined;\n    }\n\n    const monoforumChannel = selectMonoforumChannel(global, id);\n    if (monoforumChannel) {\n      peer = monoforumChannel;\n    }\n\n    const isSelf = peer && !isApiPeerChat(peer) ? peer.isSelf : undefined;\n\n    function getSubtitle() {\n      if (!peer) return undefined;\n      if (peer.id === currentUserId) return [oldLang('SavedMessagesInfo')];\n      if (isApiPeerChat(peer)) {\n        return [getGroupStatus(oldLang, peer)];\n      }\n\n      const userStatus = selectUserStatus(global, peer.id);\n      return [\n        getUserStatus(oldLang, peer, userStatus),\n        buildClassName(isUserOnline(peer, userStatus, true) && 'online'),\n      ];\n    }\n\n    const [subtitle, subtitleClassName] = getSubtitle() || [];\n\n    return (\n      <PickerItem\n        key={id}\n        className={ITEM_CLASS_NAME}\n        title={(\n          <div className=\"title-wrapper\">\n            <FullNameTitle\n              className=\"item-title\"\n              peer={peer}\n              isMonoforum={Boolean(monoforumChannel)}\n              isSavedMessages={isSelf}\n            />\n          </div>\n        )}\n        avatarElement={(\n          <Avatar\n            peer={peer}\n            asMessageBubble={Boolean(monoforumChannel)}\n            isSavedMessages={isSelf}\n            size=\"medium\"\n          />\n        )}\n        subtitle={subtitle}\n        subtitleClassName={subtitleClassName}\n        ripple\n        style={`top: ${(viewportOffset + index) * PEER_PICKER_ITEM_HEIGHT_PX}px;`}\n\n        onClick={() => handleClick(id)}\n      />\n    );\n  }, [currentUserId, oldLang, viewportOffset]);\n\n  function renderTopicList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button round color=\"translucent\" size=\"smaller\" ariaLabel={oldLang('Back')} onClick={handleHeaderBackClick}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <InputText\n            ref={topicSearchRef}\n            value={topicSearch}\n            onChange={handleTopicSearchChange}\n            onKeyDown={handleTopicKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        <InfiniteScroll\n          ref={topicContainerRef}\n          className=\"picker-list custom-scroll\"\n          items={topicIds}\n          withAbsolutePositioning\n          maxHeight={(topicIds?.length || 0) * TOPIC_ITEM_HEIGHT_PX}\n          onKeyDown={handleTopicKeyDown}\n        >\n          {!topicIds && <Loading />}\n          {topicIds?.map((topicId, i) => (\n            <PickerItem\n              key={`${forumId}_${topicId}`}\n              className={ITEM_CLASS_NAME}\n\n              onClick={() => onSelectChatOrUser(forumId!, topicId)}\n              style={`top: ${(viewportOffset + i) * TOPIC_ITEM_HEIGHT_PX}px;`}\n              avatarElement={(\n                <TopicIcon\n                  size={TOPIC_ICON_SIZE}\n                  topic={topics[topicId]}\n                  className=\"topic-icon\"\n                  letterClassName=\"topic-icon-letter\"\n                />\n              )}\n              title={renderText(topics[topicId].title)}\n            />\n          ))}\n        </InfiniteScroll>\n      </>\n    );\n  }\n\n  function renderChatList() {\n    return (\n      <>\n        <div className=\"modal-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={oldLang('Close')}\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <InputText\n            ref={searchRef}\n            value={search}\n            onChange={handleSearchChange}\n            onKeyDown={handleKeyDown}\n            placeholder={searchPlaceholder}\n          />\n        </div>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            ref={containerRef}\n            className=\"picker-list custom-scroll\"\n            items={viewportIds}\n            itemSelector={`.${ITEM_CLASS_NAME}`}\n            onLoadMore={getMore}\n            withAbsolutePositioning\n            maxHeight={chatOrUserIds.length * PEER_PICKER_ITEM_HEIGHT_PX}\n            onKeyDown={handleKeyDown}\n          >\n            {viewportIds.map(renderChatItem)}\n          </InfiniteScroll>\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\">{oldLang('lng_blocked_list_not_found')}</p>\n        ) : (\n          <Loading />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={buildClassName('ChatOrUserPicker', className)}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      isLowStackPriority={isLowStackPriority}\n    >\n      <Transition activeKey={activeKey} name=\"slideFade\" slideClassName=\"ChatOrUserPicker_slide\">\n        {() => {\n          return activeKey === TOPIC_LIST_SLIDE ? renderTopicList() : renderChatList();\n        }}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatType } from '../../api/types';\nimport type { ThreadId } from '../../types';\n\nimport { API_CHAT_TYPES } from '../../config';\nimport {\n  getCanPostInChat,\n  isDeletedUser,\n} from '../../global/helpers';\nimport { filterPeersByQuery } from '../../global/helpers/peers';\nimport {\n  filterChatIdsByType, selectChat, selectChatFullInfo, selectIsMonoforumAdmin, selectUser,\n} from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from './helpers/sortChatIds';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ChatOrUserPicker from './pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  searchPlaceholder: string;\n  className?: string;\n  filter?: ApiChatType[];\n  loadMore?: NoneToVoidFunction;\n  onSelectRecipient: (peerId: string, threadId?: ThreadId) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  isLowStackPriority?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n};\n\nconst RecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  filter = API_CHAT_TYPES,\n  className,\n  searchPlaceholder,\n  loadMore,\n  onSelectRecipient,\n  onClose,\n  onCloseAnimationEnd,\n  isLowStackPriority,\n}) => {\n  const [search, setSearch] = useState('');\n  const ids = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const global = getGlobal();\n\n    const peerIds = [\n      ...(activeListIds || []),\n      ...((search && archivedListIds) || []),\n    ].filter((id) => {\n      const chat = selectChat(global, id);\n      const user = selectUser(global, id);\n      if (user && !isDeletedUser(user)) return true;\n\n      if (!chat) return false;\n\n      if (chat.isMonoforum && selectIsMonoforumAdmin(global, id)) {\n        return false;\n      }\n\n      const chatFullInfo = selectChatFullInfo(global, id);\n      // TODO: Handle bulk check with API call\n      return !chatFullInfo || getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n    });\n\n    const sorted = sortChatIds(\n      filterPeersByQuery({\n        ids: unique([\n          ...(currentUserId ? [currentUserId] : []),\n          ...peerIds,\n          ...(contactIds || []),\n        ]),\n        query: search,\n      }),\n      undefined,\n      priorityIds,\n      currentUserId,\n    );\n\n    return filterChatIdsByType(global, sorted, filter);\n  }, [pinnedIds, currentUserId, activeListIds, search, archivedListIds, contactIds, filter, isOpen]);\n\n  const renderingIds = useCurrentOrPrev(ids, true)!;\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      className={className}\n      chatOrUserIds={renderingIds}\n      currentUserId={currentUserId}\n      searchPlaceholder={searchPlaceholder}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={loadMore}\n      onSelectChatOrUser={onSelectRecipient}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      isLowStackPriority={isLowStackPriority}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n    } = global;\n\n    return {\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n    };\n  },\n)(RecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ThreadId } from '../../types';\n\nimport { getChatTitle, getUserFirstOrLastName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  currentUserId?: string;\n  isManyMessages?: boolean;\n  isStory?: boolean;\n  isForwarding?: boolean;\n}\n\nconst ForwardRecipientPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  isManyMessages,\n  isStory,\n  isForwarding,\n}) => {\n  const {\n    openChatOrTopicWithReplyInDraft,\n    setForwardChatOrTopic,\n    exitForwardMode,\n    forwardToSavedMessages,\n    forwardStory,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingIsStory = usePreviousDeprecated(isStory, true);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    const isSelf = recipientId === currentUserId;\n    if (isStory) {\n      forwardStory({ toChatId: recipientId });\n      const global = getGlobal();\n      if (isUserId(recipientId)) {\n        showNotification({\n          message: isSelf\n            ? lang('Conversation.StoryForwardTooltip.SavedMessages.One')\n            : lang(\n              'StorySharedTo',\n              getUserFirstOrLastName(selectUser(global, recipientId)),\n            ),\n        });\n      } else {\n        const chat = selectChat(global, recipientId);\n        if (!chat) return;\n\n        showNotification({\n          message: lang('StorySharedTo', getChatTitle(lang, chat)),\n        });\n      }\n      return;\n    }\n\n    if (isSelf) {\n      const message = lang(\n        isManyMessages\n          ? 'Conversation.ForwardTooltip.SavedMessages.Many'\n          : 'Conversation.ForwardTooltip.SavedMessages.One',\n      );\n\n      forwardToSavedMessages();\n      showNotification({ message });\n    } else {\n      const chatId = recipientId;\n      const topicId = threadId ? Number(threadId) : undefined;\n      if (isForwarding) {\n        setForwardChatOrTopic({ chatId, topicId });\n      } else {\n        openChatOrTopicWithReplyInDraft({ chatId, topicId });\n      }\n    }\n  }, [currentUserId, isManyMessages, isStory, lang, isForwarding]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n  }, [exitForwardMode]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      className={renderingIsStory ? 'component-theme-dark' : undefined}\n      searchPlaceholder={lang(isForwarding ? 'ForwardTo' : 'ReplyToDialog')}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { messageIds, storyId } = selectTabState(global).forwardMessages;\n  const isForwarding = (messageIds && messageIds.length > 0);\n  return {\n    currentUserId: global.currentUserId,\n    isManyMessages: (messageIds?.length || 0) > 1,\n    isStory: Boolean(storyId),\n    isForwarding,\n  };\n})(ForwardRecipientPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { ThreadId } from '../../types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedDraft?: TabState['requestedDraft'];\n};\n\nconst DraftRecipientPicker: FC<OwnProps> = ({\n  requestedDraft,\n}) => {\n  const isOpen = Boolean(requestedDraft && !requestedDraft.chatId);\n  const {\n    openChatWithDraft,\n    resetOpenChatWithDraft,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const handleSelectRecipient = useCallback((recipientId: string, threadId?: ThreadId) => {\n    openChatWithDraft({\n      chatId: recipientId,\n      threadId,\n      text: requestedDraft!.text,\n      files: requestedDraft!.files,\n    });\n  }, [openChatWithDraft, requestedDraft]);\n\n  const handleClose = useCallback(() => {\n    resetOpenChatWithDraft();\n  }, [resetOpenChatWithDraft]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('ForwardTo')}\n      filter={requestedDraft?.filter}\n      onSelectRecipient={handleSelectRecipient}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(DraftRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RecipientPicker from '../common/RecipientPicker';\n\nexport type OwnProps = {\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n};\n\nconst AttachBotRecipientPicker: FC<OwnProps> = ({\n  requestedAttachBotInChat,\n}) => {\n  const { cancelAttachBotInChat, callAttachBot } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(requestedAttachBotInChat);\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const { bot, filter, startParam } = requestedAttachBotInChat || {};\n\n  const handlePeerRecipient = useCallback((recipientId: string) => {\n    callAttachBot({ bot: bot!, chatId: recipientId, startParam });\n    cancelAttachBotInChat();\n  }, [bot, callAttachBot, cancelAttachBotInChat, startParam]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <RecipientPicker\n      isOpen={isOpen}\n      searchPlaceholder={lang('Search')}\n      filter={filter}\n      onSelectRecipient={handlePeerRecipient}\n      onClose={cancelAttachBotInChat}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(AttachBotRecipientPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError,\n} from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { selectCurrentMessageList, selectTabState } from '../../global/selectors';\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport renderText from '../common/helpers/renderText';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  dialogs: (ApiError | ApiContact)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs, currentMessageList }) => {\n  const {\n    dismissDialog,\n    sendMessage,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      if (!currentMessageList) {\n        return;\n      }\n\n      sendMessage({\n        contact: contactRequest,\n        messageList: currentMessageList,\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error)\n          : renderText(error.message, ['simple_markdown', 'emoji', 'br'])}\n        <div className=\"dialog-buttons mt-2\">\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiContact) => {\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1]);\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      dialogs: selectTabState(global).dialogs,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map((notification) => (\n        <Notification key={notification.localId} notification={notification} />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/browser/url';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (!url) {\n      return;\n    }\n\n    window.open(ensureProtocol(url), '_blank', 'noopener noreferrer');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlText', { url: renderingUrl }, { withNodes: true, withMarkdown: true }))}\n      confirmLabel={lang('OpenUrlConfirm')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VJDwJpsF\",\"buttons\":\"aYO2C2Hx\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { IS_IOS, IS_MAC_OS } from '../../../util/browser/windowEnvironment';\nimport { prepareMapUrl } from '../../../util/map';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './MapModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['mapModal'];\n};\n\nconst OpenMapModal = ({ modal }: OwnProps) => {\n  const { closeMapModal } = getActions();\n\n  const { point: geoPoint, zoom } = modal || {};\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(geoPoint);\n\n  const handleClose = useLastCallback(() => {\n    closeMapModal();\n  });\n\n  const [googleUrl, bingUrl, appleUrl, osmUrl] = useMemo(() => {\n    if (!geoPoint) {\n      return [];\n    }\n\n    const google = prepareMapUrl('google', geoPoint, zoom);\n    const bing = prepareMapUrl('bing', geoPoint, zoom);\n    const osm = prepareMapUrl('osm', geoPoint, zoom);\n    const apple = prepareMapUrl('apple', geoPoint, zoom);\n\n    return [google, bing, apple, osm];\n  }, [geoPoint, zoom]);\n\n  const openUrl = useLastCallback((url: string) => {\n    closeMapModal();\n    window.open(url, '_blank', 'noopener');\n  });\n\n  const handleGoogleClick = useLastCallback(() => {\n    openUrl(googleUrl!);\n  });\n\n  const handleBingClick = useLastCallback(() => {\n    openUrl(bingUrl!);\n  });\n\n  const handleAppleClick = useLastCallback(() => {\n    openUrl(appleUrl!);\n  });\n\n  const handleOsmClick = useLastCallback(() => {\n    openUrl(osmUrl!);\n  });\n\n  return (\n    <Modal\n      contentClassName={styles.root}\n      title={lang('OpenMapWith')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      isSlim\n    >\n      <div className={styles.buttons}>\n        {(IS_IOS || IS_MAC_OS) && (\n          <Button fluid size=\"smaller\" onClick={handleAppleClick}>\n            Apple Maps\n          </Button>\n        )}\n        <Button fluid size=\"smaller\" onClick={handleGoogleClick}>\n          Google Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleBingClick}>\n          Bing Maps\n        </Button>\n        <Button fluid size=\"smaller\" onClick={handleOsmClick}>\n          OpenStreetMap\n        </Button>\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(OpenMapModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport renderText from '../../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal?: TabState['urlAuth'];\n};\n\ntype StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps & StateProps> = ({\n  modal, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(modal, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useOldLang();\n\n  const handleOpen = useCallback(() => {\n    if (modal?.url && isLoginChecked) {\n      const acceptAction = modal.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else if (currentAuth?.url) {\n      window.open(ensureProtocol(currentAuth.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    modal, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(modal?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    return {\n      currentUser,\n    };\n  },\n)(UrlAuthModal));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport type { OldLangFn } from '../../hooks/useOldLang';\n\nimport { MAX_INT_32 } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateToString, formatTime, getDayStart } from '../../util/dates/dateFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = MAX_INT_32 * 1000;\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useOldLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  const isDisabled = (isFutureMode && selectedDate.getTime() < minDate.getTime())\n    || (isPastMode && selectedDate.getTime() > maxDate.getTime());\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    if (isFutureMode && selectedDate < minDate) {\n      onSubmit(minDate);\n    } else if (isPastMode && selectedDate > maxDate) {\n      onSubmit(maxDate);\n    } else {\n      onSubmit(selectedDate);\n    }\n  }, [isFutureMode, isPastMode, minDate, maxDate, onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n      onEnter={handleSubmit}\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <Icon name=\"previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <Icon name=\"next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                'div-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : gridDate ? 'clickable' : '',\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <div className=\"footer\">\n          <Button\n            onClick={handleSubmit}\n            disabled={isDisabled}\n          >\n            {submitLabel}\n          </Button>\n          {secondButtonLabel && (\n            <Button onClick={onSecondButtonClick} isText>\n              {secondButtonLabel}\n            </Button>\n          )}\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: OldLangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.getTime() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useOldLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: selectTabState(global).historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport renderText from '../common/helpers/renderText';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Modal from '../ui/Modal';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useOldLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  const inputRef = useRef<HTMLInputElement>();\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => {\n        inputRef.current?.focus();\n      }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar\n            size=\"jumbo\"\n            peer={renderingUser}\n            text={`${firstName} ${lastName}`}\n          />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text NewContactModal__help-text__negative\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = userId ? selectUser(global, userId) : undefined;\n    return {\n      user,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import type {\n  ElementRef } from '../lib/teact/teact';\nimport {\n  useEffect, useSignal, useState,\n} from '../lib/teact/teact';\n\nimport type { Point, Size } from '../types';\n\nimport { RESIZE_HANDLE_SELECTOR } from '../config';\nimport buildStyle from '../util/buildStyle';\nimport { captureEvents } from '../util/captureEvents';\nimport getPointerPosition from '../util/events/getPointerPosition';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport enum ResizeHandleType {\n  Top,\n  Bottom,\n  Left,\n  Right,\n  TopLeft,\n  TopRight,\n  BottomLeft,\n  BottomRight,\n}\n\ntype ResizeHandleSelectorType = 'top' | 'bottom' | 'left'\n  | 'right' | 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\nconst resizeHandleSelectorsMap: Record<ResizeHandleSelectorType, ResizeHandleType> = {\n  top: ResizeHandleType.Top,\n  bottom: ResizeHandleType.Bottom,\n  left: ResizeHandleType.Left,\n  right: ResizeHandleType.Right,\n  topLeft: ResizeHandleType.TopLeft,\n  topRight: ResizeHandleType.TopRight,\n  bottomLeft: ResizeHandleType.BottomLeft,\n  bottomRight: ResizeHandleType.BottomRight,\n};\n\nconst resizeHandleSelectors = Object.keys(resizeHandleSelectorsMap) as ResizeHandleSelectorType[];\n\nlet resizeTimeout: number | undefined;\nconst FULLSCREEN_POSITION = { x: 0, y: 0 };\n\nexport default function useDraggable(\n  ref: ElementRef<HTMLElement>,\n  dragHandleElementRef: ElementRef<HTMLElement>,\n  isDragEnabled: boolean = true,\n  originalSize: Size,\n  isFullscreen: boolean = false,\n  minimumSize: Size = { width: 0, height: 0 },\n  cachedPosition?: Point,\n) {\n  const [elementCurrentPosition, setElementCurrentPosition] = useState<Point | undefined>(cachedPosition);\n  const [elementCurrentSize, setElementCurrentSize] = useState<Size | undefined>(undefined);\n\n  const [getElementPositionOnStartTransform, setElementPositionOnStartTransform] = useSignal({ x: 0, y: 0 });\n  const [getElementSizeOnStartTransform, setElementSizeOnStartTransform] = useSignal({ width: 0, height: 0 });\n  const [getTransformStartPoint, setTransformStartPoint] = useSignal({ x: 0, y: 0 });\n\n  const elementPositionOnStartTransform = getElementPositionOnStartTransform();\n  const transformStartPoint = getTransformStartPoint();\n\n  const element = ref.current;\n  const dragHandleElement = dragHandleElementRef.current;\n\n  const [isInitiated, setIsInitiated] = useFlag(false);\n  const [wasElementShown, setWasElementShown] = useFlag(false);\n  const [isDragging, startDragging, stopDragging] = useFlag(false);\n  const [isResizing, startResizing, stopResizing] = useFlag(false);\n  const [isWindowsResizing, startWindowResizing, stopWindowResizing] = useFlag(false);\n\n  const [hitResizeHandle, setHitResizeHandle] = useState<ResizeHandleType | undefined>(undefined);\n\n  function getVisibleArea() {\n    return {\n      width: window.innerWidth,\n      height: window.innerHeight,\n    };\n  }\n\n  const updateCurrentPosition = useLastCallback((position: Point) => {\n    if (!isFullscreen) setElementCurrentPosition({ x: position.x, y: position.y });\n  });\n\n  const getActualPosition = useLastCallback(() => {\n    return isFullscreen ? FULLSCREEN_POSITION : elementCurrentPosition;\n  });\n\n  const getCenteredPosition = useLastCallback(() => {\n    if (!elementCurrentSize) return undefined;\n    const { width, height } = elementCurrentSize;\n\n    const visibleArea = getVisibleArea();\n    const viewportWidth = visibleArea.width;\n    const viewportHeight = visibleArea.height;\n\n    const centeredX = (viewportWidth - width) / 2;\n    const centeredY = (viewportHeight - height) / 2;\n\n    return { x: centeredX, y: centeredY };\n  });\n\n  useEffect(() => {\n    if (element) setWasElementShown();\n  }, [element]);\n\n  useEffect(() => {\n    if (!isInitiated && elementCurrentSize) {\n      const centeredPosition = getCenteredPosition();\n      if (!centeredPosition) return;\n\n      updateCurrentPosition(centeredPosition);\n      setIsInitiated();\n    }\n  }, [elementCurrentSize, isInitiated, element]);\n\n  const handleStartDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (targetElement.closest('.no-drag') || !element) {\n      return;\n    }\n    const { x, y } = getPointerPosition(event);\n\n    const { left, top } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setTransformStartPoint({ x, y });\n\n    startDragging();\n  });\n\n  function getResizeHandleFromTarget(targetElement: HTMLElement) {\n    const closest = (selector: string) => targetElement.closest(selector);\n\n    if (!closest(RESIZE_HANDLE_SELECTOR)) return undefined;\n    for (const selector of resizeHandleSelectors) {\n      if (closest(`.${selector}`)) {\n        return resizeHandleSelectorsMap[selector];\n      }\n    }\n    return undefined;\n  }\n\n  const handleStartResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (event instanceof MouseEvent && event.button !== 0) {\n      return;\n    }\n\n    const targetElement = event.target as HTMLElement;\n    if (!element || !targetElement) {\n      return;\n    }\n    const resizeHandle = getResizeHandleFromTarget(targetElement);\n\n    if (resizeHandle === undefined) return;\n    setHitResizeHandle(resizeHandle);\n\n    const { x, y } = getPointerPosition(event);\n\n    const {\n      left, right, top, bottom,\n    } = element.getBoundingClientRect();\n    setElementPositionOnStartTransform({ x: left, y: top });\n    setElementSizeOnStartTransform({ width: right - left, height: bottom - top });\n    setTransformStartPoint({ x, y });\n\n    startResizing();\n  });\n\n  const handleDragRelease = useLastCallback(() => {\n    stopDragging();\n  });\n\n  const handleResizeRelease = useLastCallback(() => {\n    stopResizing();\n  });\n\n  useEffect(() => {\n    if (!isDragEnabled) {\n      stopDragging();\n    }\n  }, [isDragEnabled]);\n\n  const ensurePositionInVisibleArea = (x: number, y: number) => {\n    const visibleArea = getVisibleArea();\n\n    const visibleAreaWidth = visibleArea.width;\n    const visibleAreaHeight = visibleArea.height;\n\n    const componentWidth = elementCurrentSize!.width;\n    const componentHeight = elementCurrentSize!.height;\n\n    let newX = x;\n    let newY = y;\n\n    if (newX < 0) newX = 0;\n    if (newY < 0) newY = 0;\n    if (newX + componentWidth > visibleAreaWidth) newX = visibleAreaWidth - componentWidth;\n    if (newY + componentHeight > visibleAreaHeight) newY = visibleAreaHeight - componentHeight;\n\n    return { x: newX, y: newY };\n  };\n\n  const adjustPositionWithinBounds = useLastCallback(() => {\n    if (isFullscreen) return;\n    const position = !wasElementShown && !cachedPosition ? getCenteredPosition() : elementCurrentPosition;\n    if (!elementCurrentSize || !position) return;\n    const newPosition = ensurePositionInVisibleArea(position.x, position.y);\n    updateCurrentPosition(newPosition);\n  });\n\n  const ensureSizeInVisibleArea = useLastCallback((sizeForCheck: Size) => {\n    const newSize = sizeForCheck;\n\n    const visibleArea = getVisibleArea();\n\n    const originalWidth = originalSize.width;\n    const originalHeight = originalSize.height;\n    newSize.width = Math.min(visibleArea.width, Math.max(originalWidth, newSize.width));\n    newSize.height = Math.min(visibleArea.height, Math.max(originalHeight, newSize.height));\n\n    return newSize;\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    const newSize = ensureSizeInVisibleArea({ width: originalSize.width, height: originalSize.height });\n    if (newSize) setElementCurrentSize(newSize);\n  }, [originalSize, isResizing]);\n\n  const adjustSizeWithinBounds = useLastCallback(() => {\n    if (!elementCurrentSize || isResizing) return;\n    const newSize = ensureSizeInVisibleArea(elementCurrentSize);\n    if (newSize) setElementCurrentSize(newSize);\n  });\n\n  useEffect(() => {\n    if (isResizing) return;\n    adjustPositionWithinBounds();\n  }, [elementCurrentSize, isResizing]);\n\n  useEffect(() => {\n    const handleWindowResize = () => {\n      startWindowResizing();\n      adjustSizeWithinBounds();\n      adjustPositionWithinBounds();\n      if (resizeTimeout) {\n        clearTimeout(resizeTimeout);\n        resizeTimeout = undefined;\n      }\n      resizeTimeout = window.setTimeout(() => {\n        resizeTimeout = undefined;\n        stopWindowResizing();\n      }, 250);\n    };\n\n    window.addEventListener('resize', handleWindowResize);\n\n    return () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = undefined;\n      window.removeEventListener('resize', handleWindowResize);\n    };\n  }, [adjustPositionWithinBounds]);\n\n  const handleDrag = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isDragging || !element) return;\n    const { x, y } = getPointerPosition(event);\n\n    const offsetX = x - transformStartPoint.x;\n    const offsetY = y - transformStartPoint.y;\n\n    const newX = elementPositionOnStartTransform.x + offsetX;\n    const newY = elementPositionOnStartTransform.y + offsetY;\n\n    if (elementCurrentSize) setElementCurrentPosition(ensurePositionInVisibleArea(newX, newY));\n  });\n\n  const handleResize = useLastCallback((event: MouseEvent | TouchEvent) => {\n    if (!isResizing || !element || hitResizeHandle === undefined) return;\n    const { x, y } = getPointerPosition(event);\n    const sizeOnStartTransform = getElementSizeOnStartTransform();\n\n    const pageVisibleX = Math.min(Math.max(0, x), getVisibleArea().width);\n    const pageVisibleY = Math.min(Math.max(0, y), getVisibleArea().height);\n\n    const offsetX = pageVisibleX - transformStartPoint.x;\n    const offsetY = pageVisibleY - transformStartPoint.y;\n\n    const maxX = elementPositionOnStartTransform.x + sizeOnStartTransform.width - minimumSize.width;\n    const maxY = elementPositionOnStartTransform.y + sizeOnStartTransform.height - minimumSize.height;\n\n    const originalBounds = {\n      x: elementPositionOnStartTransform.x,\n      y: elementPositionOnStartTransform.y,\n      width: sizeOnStartTransform.width,\n      height: sizeOnStartTransform.height,\n    };\n\n    const newBounds = { ...originalBounds };\n\n    if (hitResizeHandle === ResizeHandleType.Left\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width - offsetX, minimumSize.width);\n      newBounds.x = Math.min(newBounds.x + offsetX, maxX);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Right\n      || hitResizeHandle === ResizeHandleType.TopRight\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.width = Math.max(sizeOnStartTransform.width + offsetX, minimumSize.width);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Top\n      || hitResizeHandle === ResizeHandleType.TopLeft\n      || hitResizeHandle === ResizeHandleType.TopRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height - offsetY, minimumSize.height);\n      newBounds.y = Math.min(newBounds.y + offsetY, maxY);\n    }\n\n    if (hitResizeHandle === ResizeHandleType.Bottom\n      || hitResizeHandle === ResizeHandleType.BottomLeft\n      || hitResizeHandle === ResizeHandleType.BottomRight\n    ) {\n      newBounds.height = Math.max(sizeOnStartTransform.height + offsetY, minimumSize.height);\n    }\n\n    setElementCurrentSize({ width: newBounds.width, height: newBounds.height });\n    setElementCurrentPosition({ x: newBounds.x, y: newBounds.y });\n  });\n\n  useEffect(() => {\n    let cleanup: NoneToVoidFunction | undefined;\n    if (dragHandleElement && isDragEnabled) {\n      cleanup = captureEvents(dragHandleElement, {\n        onCapture: handleStartDrag,\n        onDrag: handleDrag,\n        onRelease: handleDragRelease,\n        onClick: handleDragRelease,\n        onDoubleClick: handleDragRelease,\n      });\n    }\n    return cleanup;\n  }, [isDragEnabled, dragHandleElement]);\n\n  useEffect(() => {\n    const cleanups: NoneToVoidFunction[] = [];\n    if (element && isDragEnabled) {\n      for (const selector of resizeHandleSelectors) {\n        const resizeHandler = element.querySelector(`.resizeHandle.${selector}`) as HTMLElement;\n\n        if (resizeHandler) {\n          const cleanup = captureEvents(resizeHandler, {\n            onCapture: handleStartResize,\n            onDrag: handleResize,\n            onRelease: handleResizeRelease,\n            onClick: handleResizeRelease,\n            onDoubleClick: handleResizeRelease,\n          });\n\n          if (cleanup) {\n            cleanups.push(cleanup);\n          }\n        }\n      }\n    }\n\n    return () => {\n      cleanups.forEach((cleanup) => cleanup());\n    };\n  }, [isDragEnabled, element]);\n\n  const cursorStyle = isDragging ? 'cursor: grabbing !important; ' : '';\n\n  const actualPosition = getActualPosition();\n\n  if (!isInitiated || !elementCurrentSize || !actualPosition) {\n    return {\n      isDragging: false,\n      style: cursorStyle,\n    };\n  }\n\n  const style = buildStyle(\n    `left: ${actualPosition.x}px;`,\n    `top: ${actualPosition.y}px;`,\n    !isFullscreen && `max-width: ${elementCurrentSize.width}px;`,\n    !isFullscreen && `max-height: ${elementCurrentSize.height}px;`,\n    'position: fixed;',\n    (isDragging || isResizing || isWindowsResizing) && 'transition: none !important;',\n    cursorStyle,\n  );\n\n  return {\n    position: elementCurrentPosition,\n    size: elementCurrentSize,\n    isDragging,\n    isResizing,\n    style,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kUZmBlnN\",\"window-state-button\":\"Rax9j_TK\",\"windowStateButton\":\"Rax9j_TK\",\"button\":\"SMRJmUuE\",\"avatars\":\"GP17QhNN\",\"state-icon\":\"sdbTXCxq\",\"stateIcon\":\"sdbTXCxq\",\"icon\":\"P0P4gW6a\",\"title\":\"TZFjRaG4\"};","import {\n  memo, useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { WebApp } from '../../../types/webapp';\n\nimport { selectActiveWebApp, selectTabState, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { unique } from '../../../util/iteratees';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport styles from './MinimizedWebAppModal.module.scss';\n\ntype StateProps = {\n  activeTabBot?: ApiUser;\n  isMinimizedState?: boolean;\n  openedWebApps?: Record<string, WebApp>;\n};\n\nconst MinimizedWebAppModal = ({\n  activeTabBot, isMinimizedState, openedWebApps,\n}: StateProps) => {\n  const {\n    changeWebAppModalState,\n    closeWebAppModal,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const ref = useRef<HTMLDivElement>();\n\n  const openedWebAppsValues = useMemo(() => {\n    return openedWebApps && Object.values(openedWebApps);\n  }, [openedWebApps]);\n\n  const openedTabsCount = openedWebAppsValues?.length;\n\n  const peers = useMemo(() => {\n    if (!openedTabsCount) return [];\n\n    const global = getGlobal();\n    const activeTabBotId = activeTabBot?.id;\n    const openedApps = unique([activeTabBotId, ...openedWebAppsValues.map((app) => app.botId)]);\n    const bots = openedApps.map((id) => id && selectUser(global, id)).filter(Boolean).slice(0, 3);\n    return bots;\n  }, [openedTabsCount, activeTabBot, openedWebAppsValues]);\n\n  const handleCloseClick = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleExpandClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  });\n\n  if (!isMinimizedState) return undefined;\n\n  function renderTitle() {\n    const activeTabName = peers.length > 0 && peers[0]?.firstName;\n    const title = openedTabsCount && activeTabName && openedTabsCount > 1\n      ? lang('MiniAppsMoreTabs',\n        {\n          botName: activeTabName,\n          count: openedTabsCount - 1,\n        },\n        {\n          pluralValue: openedTabsCount - 1,\n        })\n      : activeTabName;\n\n    return (\n      <div className={styles.title}>\n        {title}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        styles.root,\n      )}\n    >\n      <Button\n        className={styles.button}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        ariaLabel={oldLang('Close')}\n        onClick={handleCloseClick}\n      >\n        <Icon className={styles.icon} name=\"close\" />\n      </Button>\n      <AvatarList className={styles.avatars} size=\"mini\" peers={peers} />\n      {renderTitle()}\n      <Button\n        className={buildClassName(\n          styles.windowStateButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleExpandClick}\n      >\n        <Icon className={styles.stateIcon} name=\"expand-modal\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const webApps = tabState.webApps;\n\n    const { botId } = selectActiveWebApp(global) || {};\n    const { modalState, openedWebApps } = webApps || {};\n    const isMinimizedState = modalState === 'minimized';\n    const activeTabBot = botId ? selectUser(global, botId) : undefined;\n\n    return {\n      activeTabBot,\n      isMinimizedState,\n      openedWebApps,\n    };\n  },\n)(MinimizedWebAppModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"RFg0Ey2I\",\"user-count-badge\":\"UZtJ6ZXb\",\"userCountBadge\":\"UZtJ6ZXb\",\"user-badge-icon\":\"pTiZFhsG\",\"userBadgeIcon\":\"pTiZFhsG\",\"name\":\"TzA5nqCC\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport PeerBadge from '../../common/PeerBadge';\n\nimport styles from './WebAppGridItem.module.scss';\n\nexport type OwnProps = {\n\n  chatId: string;\n  isPopularApp?: boolean;\n};\n\nexport type StateProps = {\n  user?: ApiUser;\n};\n\nfunction WebAppGridItem({ user, isPopularApp }: OwnProps & StateProps) {\n  const {\n    requestMainWebView,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useLastCallback(() => {\n    if (!user) {\n      return;\n    }\n    const botId = user?.id;\n    if (!botId) {\n      return;\n    }\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId,\n      peerId: botId,\n      theme,\n    });\n  });\n\n  if (!user) return undefined;\n\n  const title = user?.firstName;\n  const activeUserCount = user?.botActiveUsers;\n  const badgeText = activeUserCount && isPopularApp ? formatIntegerCompact(lang, activeUserCount) : undefined;\n\n  return (\n    <div\n      className={styles.container}\n      onClick={handleClick}\n    >\n      <PeerBadge\n        className={buildClassName(styles.avatarContainer, isPopularApp && 'PopularAppGridItem')}\n        textClassName={styles.name}\n        badgeClassName={styles.userCountBadge}\n        badgeIconClassName={styles.userBadgeIcon}\n        peer={user}\n        text={title}\n        badgeText={badgeText}\n        badgeIcon=\"user-filled\"\n      />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const user = selectUser(global, chatId);\n\n    return {\n      user,\n    };\n  },\n)(WebAppGridItem));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"BJV09FsC\",\"search\":\"bdi8G7GR\",\"section-title\":\"ex3kxgWX\",\"sectionTitle\":\"ex3kxgWX\",\"section-content\":\"uIZzLhEh\",\"sectionContent\":\"uIZzLhEh\",\"showMoreLink\":\"h_Zs9ypA\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback,\n  useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport WebAppGridItem from './WebAppGridItem';\n\nimport styles from './MoreAppsTabContent.module.scss';\n\nconst POPULAR_APPS_SLICE = 30;\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\nconst LESS_GRID_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MoreAppsTabContent: FC<StateProps> = ({\n  foundIds,\n  recentBotIds,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n  const {\n    searchPopularBotApps,\n  } = getActions();\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n\n    return filterPeersByQuery({ ids: foundIds, query: searchQuery, type: 'user' });\n  }, [foundIds, searchQuery]);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleSearchInputReset = useCallback(() => {\n    setSearchQuery('');\n  }, []);\n\n  return (\n    <InfiniteScroll\n      className={buildClassName(styles.root, 'custom-scroll')}\n      items={filteredFoundIds}\n      onLoadMore={handleLoadMore}\n      itemSelector=\".PopularAppGridItem\"\n      noFastList\n      preloadBackwards={POPULAR_APPS_SLICE}\n    >\n      <SearchInput\n        className={styles.search}\n        value={searchQuery}\n        onChange={setSearchQuery}\n        onReset={handleSearchInputReset}\n        placeholder={lang('SearchApps')}\n      />\n      {recentBotIds && !searchQuery && (\n        <div className={styles.section}>\n          <div className={styles.sectionTitle}>\n            <span>{oldLang('SearchAppsMine')}</span>\n            <span className={styles.showMoreLink} onClick={handleToggleShowMoreMine}>\n              {oldLang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n            </span>\n          </div>\n          <div className={styles.sectionContent}>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_GRID_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <WebAppGridItem\n                  chatId={id}\n                />\n              );\n            })}\n          </div>\n        </div>\n      )}\n      <div className={styles.section}>\n        <div className={styles.sectionTitle}>\n          {searchQuery ? lang('Apps') : lang('PopularApps')}\n        </div>\n        <div className={styles.sectionContent}>\n          {filteredFoundIds && filteredFoundIds.map((id) => {\n            return (\n              <WebAppGridItem\n                chatId={id}\n                isPopularApp={!searchQuery}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal((global) => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(MoreAppsTabContent));\n","import type { ElementRef } from '../../../../lib/teact/teact';\nimport { useCallback, useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { WebApp, WebAppInboundEvent, WebAppOutboundEvent } from '../../../../types/webapp';\n\nimport { getWebAppKey } from '../../../../global/helpers';\nimport { extractCurrentThemeParams } from '../../../../util/themeStyle';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst RELOAD_TIMEOUT = 500;\nconst FULLSCREEN_BUTTONS_AREA_HEIGHT = 3.675 * REM;\n\nconst useWebAppFrame = (\n  ref: ElementRef<HTMLIFrameElement>,\n  isOpen: boolean,\n  isFullscreen: boolean,\n  isSimpleView: boolean,\n  onEvent: (event: WebAppInboundEvent) => void,\n  webApp?: WebApp,\n  onLoad?: () => void,\n) => {\n  const {\n    showNotification,\n    setWebAppPaymentSlug,\n    openInvoice,\n    closeWebApp,\n    openSuggestedStatusModal,\n    updateWebApp,\n  } = getActions();\n\n  const isReloadSupported = useRef<boolean>(false);\n  const reloadTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const ignoreEventsRef = useRef<boolean>(false);\n  const lastFrameSizeRef = useRef<{ width: number; height: number; isResizing?: boolean }>();\n  const windowSize = useWindowSize();\n\n  useEffect(() => {\n    if (!ref.current || !isOpen) return undefined;\n\n    const handleLoad = () => {\n      onLoad?.();\n    };\n\n    const frame = ref.current;\n    frame.addEventListener('load', handleLoad);\n    return () => {\n      frame.removeEventListener('load', handleLoad);\n    };\n  }, [onLoad, ref, isOpen]);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, [ref]);\n\n  const sendFullScreenChanged = useCallback((value: boolean) => {\n    sendEvent({\n      eventType: 'fullscreen_changed',\n      eventData: {\n        is_fullscreen: value,\n      },\n    });\n  }, [sendEvent]);\n\n  const forceReloadFrame = useLastCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  });\n\n  const reloadFrame = useCallback((url: string) => {\n    if (isReloadSupported.current) {\n      sendEvent({\n        eventType: 'reload_iframe',\n      });\n      reloadTimeout.current = setTimeout(() => {\n        forceReloadFrame(url);\n      }, RELOAD_TIMEOUT);\n      return;\n    }\n\n    forceReloadFrame(url);\n  }, [sendEvent]);\n\n  const sendViewport = useCallback((isNonStable?: boolean) => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n        is_state_stable: !isNonStable,\n      },\n    });\n  }, [sendEvent, ref]);\n\n  const sendSafeArea = useCallback(() => {\n    if (!ref.current) {\n      return;\n    }\n    sendEvent({\n      eventType: 'safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0,\n      },\n    });\n\n    sendEvent({\n      eventType: 'content_safe_area_changed',\n      eventData: {\n        left: 0,\n        right: 0,\n        top: isFullscreen ? FULLSCREEN_BUTTONS_AREA_HEIGHT : 0,\n        bottom: 0,\n      },\n    });\n  }, [sendEvent, isFullscreen, ref]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n    const contentWindow = ref.current?.contentWindow;\n    const sourceWindow = event.source as Window;\n\n    if (contentWindow !== sourceWindow) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      const { eventType, eventData } = data;\n      // Handle some app requests here to simplify hook usage\n      if (eventType === 'web_app_ready') {\n        onLoad?.();\n      }\n\n      if (eventType === 'web_app_close') {\n        if (webApp) {\n          const key = getWebAppKey(webApp);\n          closeWebApp({ key, skipClosingConfirmation: true });\n        }\n      }\n\n      if (eventType === 'web_app_request_viewport') {\n        sendViewport(windowSize.isResizing);\n      }\n\n      if (eventType === 'web_app_request_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_content_safe_area') {\n        sendSafeArea();\n      }\n\n      if (eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n        isReloadSupported.current = Boolean(eventData.reload_supported);\n      }\n\n      if (eventType === 'iframe_will_reload') {\n        clearTimeout(reloadTimeout.current);\n      }\n\n      if (eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n\n      // Clipboard access temporarily disabled to address security concerns\n      if (eventType === 'web_app_read_text_from_clipboard') {\n        sendEvent({\n          eventType: 'clipboard_text_received',\n          eventData: {\n            req_id: eventData.req_id,\n            // eslint-disable-next-line no-null/no-null\n            data: null,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_open_scan_qr_popup') {\n        showNotification({\n          message: 'Scanning QR code is not supported in this client yet',\n        });\n      }\n\n      if (eventType === 'web_app_open_invoice') {\n        setWebAppPaymentSlug({\n          slug: eventData.slug,\n        });\n        openInvoice({\n          type: 'slug',\n          slug: eventData.slug,\n        });\n      }\n\n      if (eventType === 'web_app_open_link') {\n        const linkUrl = eventData.url;\n        window.open(linkUrl, '_blank', 'noreferrer');\n      }\n\n      if (eventType === 'web_app_biometry_get_info') {\n        sendEvent({\n          eventType: 'biometry_info_received',\n          eventData: {\n            available: false,\n          },\n        });\n      }\n\n      if (eventType === 'web_app_device_storage_clear'\n        || eventType === 'web_app_device_storage_get_key'\n        || eventType === 'web_app_device_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'device_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_secure_storage_clear'\n        || eventType === 'web_app_secure_storage_get_key'\n        || eventType === 'web_app_secure_storage_restore_key'\n        || eventType === 'web_app_secure_storage_save_key') {\n        const { req_id } = eventData;\n        sendEvent({\n          eventType: 'secure_storage_failed',\n          eventData: {\n            req_id,\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_accelerometer') {\n        sendEvent({\n          eventType: 'accelerometer_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_gyroscope') {\n        sendEvent({\n          eventType: 'gyroscope_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_start_device_orientation') {\n        sendEvent({\n          eventType: 'device_orientation_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_add_to_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_check_home_screen') {\n        sendEvent({\n          eventType: 'home_screen_checked',\n          eventData: {\n            status: 'unsupported',\n          },\n        });\n      }\n\n      if (eventType === 'web_app_set_emoji_status') {\n        const { custom_emoji_id, duration } = eventData;\n\n        if (!custom_emoji_id || typeof custom_emoji_id !== 'string') {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'SUGGESTED_EMOJI_INVALID',\n            },\n          });\n          return;\n        }\n\n        if (duration) {\n          try {\n            BigInt(duration);\n          } catch (e) {\n            sendEvent({\n              eventType: 'emoji_status_failed',\n              eventData: {\n                error: 'DURATION_INVALID',\n              },\n            });\n            return;\n          }\n        }\n\n        if (!webApp) {\n          sendEvent({\n            eventType: 'emoji_status_failed',\n            eventData: {\n              error: 'UNKNOWN_ERROR',\n            },\n          });\n          return;\n        }\n\n        openSuggestedStatusModal({\n          webAppKey: getWebAppKey(webApp),\n          customEmojiId: custom_emoji_id,\n          duration: Number(duration),\n          botId: webApp.botId,\n        });\n      }\n\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [\n    isSimpleView, sendEvent, onEvent, sendCustomStyle, webApp,\n    sendTheme, sendViewport, sendSafeArea, onLoad, windowSize.isResizing,\n    ref,\n  ]);\n\n  useEffect(() => {\n    const { width, height, isResizing } = windowSize;\n    if (lastFrameSizeRef.current && lastFrameSizeRef.current.width === width\n      && lastFrameSizeRef.current.height === height && !lastFrameSizeRef.current.isResizing) return;\n    lastFrameSizeRef.current = { width, height, isResizing };\n    sendViewport(isResizing);\n  }, [sendViewport, sendSafeArea, windowSize]);\n\n  useEffect(() => {\n    if (!webApp?.plannedEvents?.length) return;\n    const events = webApp.plannedEvents;\n    events.forEach((event) => {\n      sendEvent(event);\n    });\n\n    updateWebApp({\n      key: getWebAppKey(webApp),\n      update: {\n        plannedEvents: [],\n      },\n    });\n  }, [sendEvent, webApp]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage, ref]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      sendSafeArea();\n      ignoreEventsRef.current = false;\n    } else {\n      lastFrameSizeRef.current = undefined;\n    }\n  }, [isOpen, isFullscreen, sendViewport, sendSafeArea, ref]);\n\n  return {\n    sendEvent, sendFullScreenChanged, reloadFrame, sendViewport, sendSafeArea, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LeeJZdwH\",\"multi-tab\":\"ESsGT5OD\",\"multiTab\":\"ESsGT5OD\",\"loadingPlaceholder\":\"jEAibDyh\",\"placeholderPath\":\"Gx1BIECZ\",\"fadeOpacityBreath\":\"N5Blieah\",\"defaultPlaceholderGrid\":\"Ig_t1R7i\",\"placeholderSquare\":\"ablUg8HU\",\"hide\":\"Wrl63uWL\",\"frame\":\"OmY14FFl\",\"with-button\":\"liDRl1xT\",\"withButton\":\"liDRl1xT\",\"hidden\":\"vOFiAq3l\",\"secondary-button\":\"ypxiUCFQ\",\"secondaryButton\":\"ypxiUCFQ\",\"main-button\":\"U_ggDKn1\",\"mainButton\":\"U_ggDKn1\",\"visible\":\"KwI4XdkC\",\"buttons-container\":\"mR_hsBdT\",\"buttonsContainer\":\"mR_hsBdT\",\"one-row\":\"YfQO314y\",\"oneRow\":\"YfQO314y\",\"two-rows\":\"gUldkEoy\",\"twoRows\":\"gUldkEoy\",\"left-to-right\":\"ntESqwQ_\",\"leftToRight\":\"ntESqwQ_\",\"right-to-left\":\"q6IUFEL0\",\"rightToLeft\":\"q6IUFEL0\",\"top-to-bottom\":\"gb4iHJ9H\",\"topToBottom\":\"gb4iHJ9H\",\"bottom-to-top\":\"R_bh3GF8\",\"bottomToTop\":\"R_bh3GF8\",\"hide-horizontal\":\"oYaRA7u4\",\"hideHorizontal\":\"oYaRA7u4\",\"secondary-button-spinner\":\"NYV0yA2J\",\"secondaryButtonSpinner\":\"NYV0yA2J\",\"main-button-spinner\":\"oq6HKJur\",\"mainButtonSpinner\":\"oq6HKJur\",\"web-app-popup\":\"YEOURXza\",\"webAppPopup\":\"YEOURXza\",\"without-title\":\"gvljUzY9\",\"withoutTitle\":\"gvljUzY9\",\"closeIcon\":\"BvNtfigU\",\"state-back\":\"rC2wkMIk\",\"stateBack\":\"rC2wkMIk\",\"backIconContainer\":\"JXsuZ01s\",\"moreIcon\":\"T58ozRyW\",\"headerPanel\":\"eYrhewMy\",\"icon\":\"a0AI_he5\",\"headerSplitButton\":\"Tl4_05AQ\",\"headerButton\":\"MvCwTbk_\",\"left\":\"emOpAMBm\",\"right\":\"z4C5VD5o\",\"buttonCaptionContainer\":\"dpZR3YT7\",\"backButtonCaption\":\"dWDprnWa\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAttachBot, ApiBotAppSettings, ApiUser,\n} from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { BotAppPermissions, ThemeKey } from '../../../types';\nimport type {\n  PopupOptions,\n  WebApp,\n  WebAppInboundEvent,\n  WebAppModalStateType,\n  WebAppOutboundEvent,\n} from '../../../types/webapp';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { convertToApiChatType } from '../../../global/helpers';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectBotAppPermissions,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { getGeolocationStatus, IS_GEOLOCATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport download from '../../../util/download';\nimport { extractCurrentThemeParams, validateHexColor } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport renderText from '../../common/helpers/renderText';\n\nimport { getIsWebAppsFullscreenSupported } from '../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useFullscreen, { checkIfFullscreen } from '../../../hooks/window/useFullscreen';\nimport usePopupLimit from './hooks/usePopupLimit';\nimport useWebAppFrame from './hooks/useWebAppFrame';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Modal from '../../ui/Modal';\nimport Spinner from '../../ui/Spinner';\nimport Transition from '../../ui/Transition';\n\nimport styles from './WebAppModalTabContent.module.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n  position?: 'left' | 'right' | 'top' | 'bottom';\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n  webApp?: WebApp;\n  registerSendEventCallback: (callback: (event: WebAppOutboundEvent) => void) => void;\n  registerReloadFrameCallback: (callback: (url: string) => void) => void;\n  onContextMenuButtonClick: (e: React.MouseEvent) => void;\n  isTransforming?: boolean;\n  isMultiTabSupported?: boolean;\n  modalHeight: number;\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n  botAppSettings?: ApiBotAppSettings;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  isPaymentModalOpen?: boolean;\n  paymentStatus?: TabState['payment']['status'];\n  isPremium?: boolean;\n  modalState?: WebAppModalStateType;\n  botAppPermissions?: BotAppPermissions;\n};\n\nconst NBSP = '\\u00A0';\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst ANIMATION_WAIT = 400;\nconst COLLAPSING_WAIT = 350;\nconst POPUP_SEQUENTIAL_LIMIT = 3;\nconst POPUP_RESET_DELAY = 2000; // 2s\nconst APP_NAME_DISPLAY_DURATION = 3800;\nconst SANDBOX_ATTRIBUTES = [\n  'allow-scripts',\n  'allow-same-origin',\n  'allow-popups',\n  'allow-forms',\n  'allow-modals',\n  'allow-storage-access-by-user-activation',\n].join(' ');\n\nconst DEFAULT_BUTTON_TEXT: Record<string, string> = {\n  ok: 'OK',\n  cancel: 'Cancel',\n  close: 'Close',\n};\n\nconst WebAppModalTabContent: FC<OwnProps & StateProps> = ({\n  modal,\n  webApp,\n  bot,\n  theme,\n  isPaymentModalOpen,\n  paymentStatus,\n  registerSendEventCallback,\n  registerReloadFrameCallback,\n  isTransforming,\n  modalState,\n  isMultiTabSupported,\n  onContextMenuButtonClick,\n  botAppPermissions,\n  botAppSettings,\n  modalHeight,\n}) => {\n  const {\n    closeActiveWebApp,\n    sendWebViewData,\n    toggleAttachBot,\n    openTelegramLink,\n    setWebAppPaymentSlug,\n    switchBotInline,\n    sharePhoneWithBot,\n    updateWebApp,\n    resetPaymentStatus,\n    openChatWithInfo,\n    showNotification,\n    openEmojiStatusAccessModal,\n    openLocationAccessModal,\n    changeWebAppModalState,\n    closeWebAppModal,\n    openPreparedInlineMessageModal,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const [secondaryButton, setSecondaryButton] = useState<WebAppButton | undefined>();\n\n  const [isLoaded, markLoaded, markUnloaded] = useFlag(false);\n\n  const [popupParameters, setPopupParameters] = useState<PopupOptions | undefined>();\n  const [isRequestingPhone, setIsRequestingPhone] = useState(false);\n  const [isRequestingWriteAccess, setIsRequestingWriteAccess] = useState(false);\n  const [requestedFileDownload, setRequestedFileDownload] = useState<{ url: string; fileName: string } | undefined>();\n  const [bottomBarColor, setBottomBarColor] = useState<string | undefined>();\n  const {\n    unlockPopupsAt, handlePopupOpened, handlePopupClosed,\n  } = usePopupLimit(POPUP_SEQUENTIAL_LIMIT, POPUP_RESET_DELAY);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const headerButtonRef = useRef<HTMLDivElement>();\n\n  const headerButtonCaptionRef = useRef<HTMLDivElement>();\n\n  const isFullscreen = modalState === 'fullScreen';\n  const isMinimizedState = modalState === 'minimized';\n\n  const exitFullScreenCallback = useLastCallback(() => {\n    setTimeout(() => {\n      changeWebAppModalState({ state: 'maximized' });\n    }, COLLAPSING_WAIT);\n  });\n\n  const fullscreenElementRef = useRef<HTMLElement>();\n\n  useEffect(() => {\n    fullscreenElementRef.current = document.querySelector('#portals') as HTMLElement;\n  }, []);\n\n  const [, setFullscreen, exitFullscreen] = useFullscreen(fullscreenElementRef, exitFullScreenCallback);\n\n  const activeWebApp = modal?.activeWebAppKey ? modal.openedWebApps[modal.activeWebAppKey] : undefined;\n  const activeWebAppName = activeWebApp?.appName;\n  const {\n    url, buttonText, isBackButtonVisible,\n  } = webApp || {};\n\n  const {\n    placeholderPath,\n  } = botAppSettings || {};\n\n  const isCloseModalOpen = Boolean(webApp?.isCloseModalOpen);\n  const isRemoveModalOpen = Boolean(webApp?.isRemoveModalOpen);\n\n  const webAppKey = webApp && getWebAppKey(webApp);\n  const activeWebAppKey = activeWebApp && getWebAppKey(activeWebApp);\n\n  const isActive = (activeWebApp && webApp) && activeWebAppKey === webAppKey;\n\n  const isAvailable = IS_GEOLOCATION_SUPPORTED;\n  const isAccessRequested = botAppPermissions?.geolocation !== undefined;\n  const isAccessGranted = Boolean(botAppPermissions?.geolocation);\n\n  const updateCurrentWebApp = useLastCallback((updatedPartialWebApp: Partial<WebApp>) => {\n    if (!webAppKey) return;\n    updateWebApp({ key: webAppKey, update: updatedPartialWebApp });\n  });\n\n  const themeParams = useMemo(() => {\n    return extractCurrentThemeParams();\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [theme]);\n\n  useEffect(() => {\n    setBottomBarColor(themeParams.secondary_bg_color);\n  }, [themeParams]);\n\n  const themeBackgroundColor = themeParams.bg_color;\n  const [backgroundColorFromEvent, setBackgroundColorFromEvent] = useState<string | undefined>();\n  const backgroundColorFromSettings = theme === 'light' ? botAppSettings?.backgroundColor\n    : botAppSettings?.backgroundDarkColor;\n\n  useEffect(() => {\n    const color = backgroundColorFromEvent || backgroundColorFromSettings || themeBackgroundColor;\n\n    updateCurrentWebApp({ backgroundColor: color });\n  }, [themeBackgroundColor, backgroundColorFromEvent, backgroundColorFromSettings]);\n\n  const themeHeaderColor = themeParams.bg_color;\n  const [headerColorFromEvent, setHeaderColorFromEvent] = useState<string | undefined>();\n  const headerColorFromSettings = theme === 'light' ? botAppSettings?.headerColor\n    : botAppSettings?.headerDarkColor;\n\n  useEffect(() => {\n    const color = headerColorFromEvent || headerColorFromSettings || themeHeaderColor;\n\n    updateCurrentWebApp({ headerColor: color });\n  }, [themeHeaderColor, headerColorFromEvent, headerColorFromSettings]);\n\n  const frameRef = useRef<HTMLIFrameElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isOpen = modal?.isModalOpen || false;\n  const isSimple = Boolean(buttonText);\n\n  const {\n    reloadFrame, sendEvent, sendFullScreenChanged, sendViewport, sendSafeArea, sendTheme,\n  } = useWebAppFrame(frameRef, isOpen, isFullscreen, isSimple, handleEvent, webApp, markLoaded);\n\n  useEffect(() => {\n    if (isActive) registerSendEventCallback(sendEvent);\n  }, [sendEvent, registerSendEventCallback, isActive]);\n\n  useEffect(() => {\n    if (isActive) registerReloadFrameCallback(reloadFrame);\n  }, [reloadFrame, registerReloadFrameCallback, isActive]);\n\n  const isMainButtonVisible = isLoaded && mainButton?.isVisible && mainButton.text.trim().length > 0;\n  const isSecondaryButtonVisible = isLoaded && secondaryButton?.isVisible && secondaryButton.text.trim().length > 0;\n\n  const handleHideCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ isCloseModalOpen: false });\n  });\n  const handleConfirmCloseModal = useLastCallback(() => {\n    updateCurrentWebApp({ shouldConfirmClosing: false, isCloseModalOpen: false });\n    setTimeout(() => {\n      closeActiveWebApp();\n    }, ANIMATION_WAIT);\n  });\n\n  const handleHideRemoveModal = useLastCallback(() => {\n    updateCurrentWebApp({ isRemoveModalOpen: false });\n  });\n\n  const handleMainButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  });\n\n  const handleSecondaryButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'secondary_button_pressed',\n    });\n  });\n\n  const handleAppPopupClose = useLastCallback((buttonId?: string) => {\n    setPopupParameters(undefined);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'popup_closed',\n      eventData: {\n        button_id: buttonId,\n      },\n    });\n  });\n\n  const handleAppPopupModalClose = useLastCallback(() => {\n    handleAppPopupClose();\n  });\n\n  const sendThemeCallback = useLastCallback(() => {\n    sendTheme();\n  });\n\n  // Notify view that theme changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendThemeCallback();\n    }, ANIMATION_WAIT);\n  }, [theme]);\n\n  const setFullscreenCallback = useLastCallback(() => {\n    if (!checkIfFullscreen() && isActive) {\n      setFullscreen?.();\n    }\n  });\n\n  const exitIfFullscreenCallback = useLastCallback(() => {\n    if (checkIfFullscreen() && isActive) {\n      exitFullscreen?.();\n    }\n  });\n\n  const sendFullScreenChangedCallback = useLastCallback(\n    (value: boolean) => { if (isActive) sendFullScreenChanged(value); },\n  );\n\n  useEffect(() => {\n    if (isFullscreen) {\n      setFullscreenCallback();\n      sendFullScreenChangedCallback(true);\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChangedCallback(false);\n    }\n  }, [isFullscreen]);\n\n  const visibilityChangedCallBack = useLastCallback((visibility: boolean) => {\n    sendEvent({\n      eventType: 'visibility_changed',\n      eventData: {\n        is_visible: visibility,\n      },\n    });\n  });\n\n  useEffect(() => {\n    if (isLoaded) {\n      visibilityChangedCallBack(Boolean(isActive));\n    }\n  }, [isActive, isLoaded]);\n\n  useEffectWithPrevDeps(([prevModalState]) => {\n    if (modalState === 'minimized') {\n      visibilityChangedCallBack(false);\n    }\n    if (modalState && prevModalState === 'minimized') {\n      visibilityChangedCallBack(true);\n    }\n  }, [modalState]);\n\n  useSyncEffect(([prevIsPaymentModalOpen]) => {\n    if (isPaymentModalOpen === prevIsPaymentModalOpen) return;\n    if (webApp?.slug && !isPaymentModalOpen && paymentStatus) {\n      sendEvent({\n        eventType: 'invoice_closed',\n        eventData: {\n          slug: webApp.slug,\n          status: paymentStatus,\n        },\n      });\n      setWebAppPaymentSlug({\n        slug: undefined,\n      });\n      resetPaymentStatus();\n    }\n  }, [isPaymentModalOpen, paymentStatus, sendEvent, webApp?.slug]);\n\n  const handleRemoveAttachBot = useLastCallback(() => {\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: false,\n    });\n    closeActiveWebApp();\n  });\n\n  const handleRejectPhone = useLastCallback(() => {\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleAcceptPhone = useLastCallback(() => {\n    sharePhoneWithBot({ botId: bot!.id });\n    setIsRequestingPhone(false);\n    handlePopupClosed();\n    sendEvent({\n      eventType: 'phone_requested',\n      eventData: {\n        status: 'sent',\n      },\n    });\n  });\n\n  const handleRejectFileDownload = useLastCallback((shouldCloseActive?: boolean) => {\n    if (shouldCloseActive) {\n      setRequestedFileDownload(undefined);\n      handlePopupClosed();\n    }\n\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n  });\n\n  const handleRejectWriteAccess = useLastCallback(() => {\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'cancelled',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  const handleAcceptWriteAccess = useLastCallback(async () => {\n    if (!bot) return;\n    const result = await callApi('allowBotSendMessages', { bot });\n    if (!result) {\n      handleRejectWriteAccess();\n      return;\n    }\n\n    sendEvent({\n      eventType: 'write_access_requested',\n      eventData: {\n        status: 'allowed',\n      },\n    });\n    setIsRequestingWriteAccess(false);\n    handlePopupClosed();\n  });\n\n  async function handleRequestWriteAccess() {\n    if (!bot) return;\n    const canWrite = await callApi('fetchBotCanSendMessage', {\n      bot,\n    });\n\n    if (canWrite) {\n      sendEvent({\n        eventType: 'write_access_requested',\n        eventData: {\n          status: 'allowed',\n        },\n      });\n    }\n    setIsRequestingWriteAccess(!canWrite);\n  }\n\n  async function handleCheckDownloadFile(fileUrl: string, fileName: string) {\n    const canDownload = await callApi('checkBotDownloadFileParams', {\n      bot: bot!,\n      url: fileUrl,\n      fileName,\n    });\n\n    if (!canDownload) {\n      sendEvent({\n        eventType: 'file_download_requested',\n        eventData: {\n          status: 'cancelled',\n        },\n      });\n      return;\n    }\n\n    setRequestedFileDownload({ url: fileUrl, fileName });\n    handlePopupOpened();\n  }\n\n  const handleDownloadFile = useLastCallback(() => {\n    if (!requestedFileDownload) return;\n    setRequestedFileDownload(undefined);\n    handlePopupClosed();\n\n    download(requestedFileDownload.url, requestedFileDownload.fileName);\n    sendEvent({\n      eventType: 'file_download_requested',\n      eventData: {\n        status: 'downloading',\n      },\n    });\n  });\n\n  async function handleInvokeCustomMethod(requestId: string, method: string, parameters: string) {\n    const result = await callApi('invokeWebViewCustomMethod', {\n      bot: bot!,\n      customMethod: method,\n      parameters,\n    });\n\n    sendEvent({\n      eventType: 'custom_method_invoked',\n      eventData: {\n        req_id: requestId,\n        ...result,\n      },\n    });\n  }\n\n  useEffect(() => {\n    if (!isOpen) {\n      setPopupParameters(undefined);\n      setIsRequestingPhone(false);\n      setIsRequestingWriteAccess(false);\n      setMainButton(undefined);\n      setSecondaryButton(undefined);\n      updateCurrentWebApp({\n        isSettingsButtonVisible: false,\n        shouldConfirmClosing: false,\n        isBackButtonVisible: false,\n        isCloseModalOpen: false,\n        isRemoveModalOpen: false,\n      });\n      markUnloaded();\n    }\n  }, [isOpen]);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChatWithInfo({ id: bot!.id });\n  });\n\n  function handleEvent(event: WebAppInboundEvent) {\n    const { eventType, eventData } = event;\n\n    if (eventType === 'web_app_request_fullscreen') {\n      if (getIsWebAppsFullscreenSupported()) {\n        changeWebAppModalState({ state: 'fullScreen' });\n      } else {\n        sendEvent({\n          eventType: 'fullscreen_failed',\n          eventData: {\n            error: 'UNSUPPORTED',\n          },\n        });\n      }\n    }\n\n    if (eventType === 'web_app_exit_fullscreen') {\n      exitIfFullscreenCallback();\n    }\n\n    if (eventType === 'web_app_open_tg_link') {\n      const linkUrl = TME_LINK_PREFIX + eventData.path_full;\n      openTelegramLink({ url: linkUrl, shouldIgnoreCache: eventData.force_request });\n      closeActiveWebApp();\n    }\n\n    if (eventType === 'web_app_setup_back_button') {\n      updateCurrentWebApp({ isBackButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_setup_settings_button') {\n      updateCurrentWebApp({ isSettingsButtonVisible: eventData.is_visible });\n    }\n\n    if (eventType === 'web_app_set_background_color') {\n      setBackgroundColorFromEvent(validateHexColor(eventData.color) ? eventData.color : undefined);\n    }\n\n    if (eventType === 'web_app_set_header_color') {\n      const key = eventData.color_key;\n      setHeaderColorFromEvent(eventData.color || (key ? themeParams[key] : undefined));\n    }\n\n    if (eventType === 'web_app_set_bottom_bar_color') {\n      setBottomBarColor(eventData.color);\n    }\n\n    if (eventType === 'web_app_data_send') {\n      closeActiveWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n\n    if (eventType === 'web_app_setup_secondary_button') {\n      const color = eventData.color;\n      const textColor = eventData.text_color;\n      setSecondaryButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text,\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n        position: eventData.position,\n      });\n    }\n\n    if (eventType === 'web_app_setup_closing_behavior') {\n      updateCurrentWebApp({ shouldConfirmClosing: true });\n    }\n\n    if (eventType === 'web_app_open_popup') {\n      if (popupParameters || !eventData.message.trim().length || !eventData.buttons?.length\n        || eventData.buttons.length > 3 || isRequestingPhone || isRequestingWriteAccess\n        || unlockPopupsAt > Date.now()) {\n        handleAppPopupClose(undefined);\n        return;\n      }\n\n      setPopupParameters(eventData);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_switch_inline_query') {\n      const filter = eventData.chat_types?.map(convertToApiChatType).filter(Boolean);\n      const isSamePeer = !filter?.length;\n\n      switchBotInline({\n        botId: bot!.id,\n        query: eventData.query,\n        filter,\n        isSamePeer,\n      });\n\n      closeActiveWebApp();\n    }\n\n    if (eventType === 'web_app_request_phone') {\n      if (popupParameters || isRequestingWriteAccess || unlockPopupsAt > Date.now()) {\n        handleRejectPhone();\n        return;\n      }\n\n      setIsRequestingPhone(true);\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_request_write_access') {\n      if (popupParameters || isRequestingPhone || unlockPopupsAt > Date.now()) {\n        handleRejectWriteAccess();\n        return;\n      }\n\n      handleRequestWriteAccess();\n      handlePopupOpened();\n    }\n\n    if (eventType === 'web_app_invoke_custom_method') {\n      const { method, params, req_id: requestId } = eventData;\n      handleInvokeCustomMethod(requestId, method, JSON.stringify(params));\n    }\n\n    if (eventType === 'web_app_request_file_download') {\n      if (requestedFileDownload || unlockPopupsAt > Date.now()) {\n        handleRejectFileDownload();\n        return;\n      }\n      handleCheckDownloadFile(eventData.url, eventData.file_name);\n    }\n\n    if (eventType === 'web_app_send_prepared_message') {\n      if (!bot || !webAppKey) return;\n      const { id } = eventData;\n      openPreparedInlineMessageModal({ botId: bot.id, messageId: id, webAppKey });\n    }\n\n    if (eventType === 'web_app_request_emoji_status_access') {\n      if (!bot) return;\n      openEmojiStatusAccessModal({ bot, webAppKey });\n    }\n\n    if (eventType === 'web_app_check_location') {\n      const handleGeolocationCheck = () => {\n        sendEvent({\n          eventType: 'location_checked',\n          eventData: {\n            available: isAvailable,\n            access_requested: isAccessRequested,\n            access_granted: isAccessGranted,\n          },\n        });\n      };\n\n      handleGeolocationCheck();\n    }\n\n    if (eventType === 'web_app_request_location') {\n      const handleRequestLocation = async () => {\n        const geolocationData = await getGeolocationStatus();\n        const { accessRequested, accessGranted, geolocation } = geolocationData;\n\n        if (!accessGranted || !accessRequested) {\n          sendEvent({\n            eventType: 'location_requested',\n            eventData: {\n              available: false,\n            },\n          });\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n          return;\n        }\n\n        if (isAvailable) {\n          if (isAccessRequested) {\n            sendEvent({\n              eventType: 'location_requested',\n              eventData: {\n                available: Boolean(botAppPermissions?.geolocation),\n                latitude: geolocation?.latitude,\n                longitude: geolocation?.longitude,\n                altitude: geolocation?.altitude,\n                course: geolocation?.heading,\n                speed: geolocation?.speed,\n                horizontal_accuracy: geolocation?.accuracy,\n                vertical_accuracy: geolocation?.altitudeAccuracy,\n              },\n            });\n          } else {\n            openLocationAccessModal({ bot, webAppKey });\n          }\n        } else {\n          showNotification({ message: oldLang('PermissionNoLocationPosition') });\n          handleAppPopupClose(undefined);\n        }\n      };\n\n      handleRequestLocation();\n    }\n\n    if (eventType === 'web_app_open_location_settings') {\n      handleOpenChat();\n    }\n  }\n\n  const mainButtonCurrentColor = useCurrentOrPrev(mainButton?.color, true);\n  const mainButtonCurrentTextColor = useCurrentOrPrev(mainButton?.textColor, true);\n  const mainButtonCurrentIsActive = useCurrentOrPrev(mainButton && Boolean(mainButton.isActive), true);\n  const mainButtonCurrentText = useCurrentOrPrev(mainButton?.text, true);\n\n  const secondaryButtonCurrentPosition = useCurrentOrPrev(secondaryButton?.position, true);\n  const secondaryButtonCurrentColor = useCurrentOrPrev(secondaryButton?.color, true);\n  const secondaryButtonCurrentTextColor = useCurrentOrPrev(secondaryButton?.textColor, true);\n  const secondaryButtonCurrentIsActive = useCurrentOrPrev(secondaryButton && Boolean(secondaryButton.isActive), true);\n  const secondaryButtonCurrentText = useCurrentOrPrev(secondaryButton?.text, true);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideMainButton, setShouldHideMainButton] = useState(true);\n  const [shouldHideSecondaryButton, setShouldHideSecondaryButton] = useState(true);\n  const [shouldShowMainButton, setShouldShowMainButton] = useState(false);\n  const [shouldShowSecondaryButton, setShouldShowSecondaryButton] = useState(false);\n\n  const [shouldShowAppNameInFullscreen, setShouldShowAppNameInFullscreen] = useState(false);\n\n  const [backButtonTextWidth, setBackButtonTextWidth] = useState(0);\n\n  // Notify view that height changed\n  useSyncEffect(() => {\n    setTimeout(() => {\n      sendViewport();\n      sendSafeArea();\n    }, isTransforming ? 0 : ANIMATION_WAIT);\n  }, [shouldShowSecondaryButton, shouldHideSecondaryButton,\n    shouldShowMainButton, shouldShowMainButton,\n    secondaryButton?.position, sendViewport, isTransforming, modalHeight,\n    sendSafeArea]);\n\n  const isVerticalLayout = secondaryButtonCurrentPosition === 'top' || secondaryButtonCurrentPosition === 'bottom';\n  const isHorizontalLayout = !isVerticalLayout;\n\n  const rowsCount = (isVerticalLayout && shouldShowMainButton && shouldShowSecondaryButton) ? 2\n    : shouldShowMainButton || shouldShowSecondaryButton ? 1 : 0;\n\n  const hideDirection = (isHorizontalLayout\n    && (!shouldHideMainButton && !shouldHideSecondaryButton)) ? 'horizontal' : 'vertical';\n\n  const mainButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const mainButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const secondaryButtonFastTimeout = useRef<ReturnType<typeof setTimeout>>();\n  const appNameDisplayTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (isFullscreen && isOpen && Boolean(activeWebAppName)) {\n      setShouldShowAppNameInFullscreen(true);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n\n      appNameDisplayTimeout.current = setTimeout(() => {\n        setShouldShowAppNameInFullscreen(false);\n        appNameDisplayTimeout.current = undefined;\n      }, APP_NAME_DISPLAY_DURATION);\n    } else {\n      setShouldShowAppNameInFullscreen(false);\n\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n        appNameDisplayTimeout.current = undefined;\n      }\n    }\n\n    return () => {\n      if (appNameDisplayTimeout.current) {\n        clearTimeout(appNameDisplayTimeout.current);\n      }\n    };\n  }, [isFullscreen, isOpen, activeWebAppName]);\n\n  useEffect(() => {\n    if (mainButtonChangeTimeout.current) clearTimeout(mainButtonChangeTimeout.current);\n    if (mainButtonFastTimeout.current) clearTimeout(mainButtonFastTimeout.current);\n\n    if (isMainButtonVisible) {\n      mainButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowMainButton(true);\n      }, 35);\n      setShouldHideMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isMainButtonVisible) {\n      setShouldShowMainButton(false);\n      mainButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideMainButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isMainButtonVisible]);\n\n  useEffect(() => {\n    if (secondaryButtonChangeTimeout.current) clearTimeout(secondaryButtonChangeTimeout.current);\n    if (secondaryButtonFastTimeout.current) clearTimeout(secondaryButtonFastTimeout.current);\n\n    if (isSecondaryButtonVisible) {\n      secondaryButtonFastTimeout.current = setTimeout(() => {\n        setShouldShowSecondaryButton(true);\n      }, 35);\n      setShouldHideSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n\n    if (!isSecondaryButtonVisible) {\n      setShouldShowSecondaryButton(false);\n      secondaryButtonChangeTimeout.current = setTimeout(() => {\n        setShouldHideSecondaryButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [isSecondaryButtonVisible]);\n\n  useEffect(() => {\n    if (!shouldShowSecondaryButton && !shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowSecondaryButton, shouldShowMainButton]);\n\n  const frameStyle = isTransforming ? 'pointer-events: none;' : '';\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      exitIfFullscreenCallback();\n      sendFullScreenChanged(false);\n      changeWebAppModalState({ state: 'maximized' });\n      closeWebAppModal();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    exitIfFullscreenCallback();\n  });\n\n  const handleShowContextMenu = useLastCallback((e: React.MouseEvent) => {\n    onContextMenuButtonClick(e);\n  });\n\n  const backIconClass = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n  const backButtonCaption = shouldShowAppNameInFullscreen ? activeWebAppName\n    : oldLang(isBackButtonVisible ? 'Back' : 'Close');\n\n  const hasHeaderElement = headerButtonCaptionRef?.current;\n\n  useEffect(() => {\n    const width = headerButtonCaptionRef?.current?.clientWidth || 0;\n    setBackButtonTextWidth(width);\n  }, [backButtonCaption, hasHeaderElement]);\n\n  function getBackButtonActiveKey() {\n    if (shouldShowAppNameInFullscreen) return 0;\n    return isBackButtonVisible ? 1 : 2;\n  }\n\n  function renderFullscreenBackButtonCaption() {\n    return (\n      <span\n        className={styles.buttonCaptionContainer}\n        style={\n          `width: ${backButtonTextWidth}px;`\n        }\n      >\n        <Transition\n          activeKey={getBackButtonActiveKey()}\n          name=\"slideFade\"\n        >\n          <div\n            ref={headerButtonCaptionRef}\n            className={styles.backButtonCaption}\n          >\n            {backButtonCaption}\n          </div>\n        </Transition>\n      </span>\n    );\n  }\n\n  function renderFullscreenHeaderPanel() {\n    return (\n      <div className={styles.headerPanel}>\n        <div ref={headerButtonRef} className={styles.headerButton} onClick={handleBackClick}>\n          <div className={styles.backIconContainer}>\n            <div className={backIconClass} />\n          </div>\n          {renderFullscreenBackButtonCaption()}\n        </div>\n        <div className={styles.headerSplitButton}>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.left,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-label={lang('WebAppCollapse')}\n            onClick={handleCollapseClick}\n          >\n            <Icon\n              name=\"down\"\n              className={styles.icon}\n            />\n          </div>\n          <div\n            className={buildClassName(\n              styles.headerButton,\n              styles.right,\n            )}\n            tabIndex={0}\n            role=\"button\"\n            aria-haspopup=\"menu\"\n            aria-label={lang('AriaMoreButton')}\n            onClick={handleShowContextMenu}\n          >\n            <Icon\n              name=\"more\"\n              className={buildClassName(\n                styles.icon,\n                styles.moreIcon,\n              )}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function renderDefaultPlaceholder() {\n    const className = buildClassName(styles.loadingPlaceholder, styles.defaultPlaceholderGrid, isLoaded && styles.hide);\n    return (\n      <div className={className}>\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n        <div className={styles.placeholderSquare} />\n      </div>\n    );\n  }\n\n  function renderPlaceholder() {\n    if (!placeholderPath) {\n      return renderDefaultPlaceholder();\n    }\n    return (\n      <svg\n        className={buildClassName(styles.loadingPlaceholder, isLoaded && styles.hide)}\n        viewBox=\"0 0 512 512\"\n      >\n        <path className={styles.placeholderPath} d={placeholderPath} />\n      </svg>\n    );\n  }\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(\n        styles.root,\n        !isActive && styles.hidden,\n        isMultiTabSupported && styles.multiTab,\n      )}\n    >\n      {isFullscreen && getIsWebAppsFullscreenSupported() && renderFullscreenHeaderPanel()}\n      {!isMinimizedState && renderPlaceholder()}\n      <iframe\n        className={buildClassName(\n          styles.frame,\n          shouldDecreaseWebFrameSize && styles.withButton,\n          !isLoaded && styles.hide,\n        )}\n        style={frameStyle}\n        src={url}\n        title={`${bot?.firstName} Web App`}\n        sandbox={SANDBOX_ATTRIBUTES}\n        allow=\"camera; microphone; geolocation; clipboard-write;\"\n        allowFullScreen\n        ref={frameRef}\n      />\n      {!isMinimizedState && (\n        <div\n          style={`background-color: ${bottomBarColor};`}\n          className={buildClassName(\n            styles.buttonsContainer,\n            secondaryButtonCurrentPosition === 'left' && styles.leftToRight,\n            secondaryButtonCurrentPosition === 'right' && styles.rightToLeft,\n            secondaryButtonCurrentPosition === 'top' && styles.topToBottom,\n            secondaryButtonCurrentPosition === 'bottom' && styles.bottomToTop,\n            hideDirection === 'horizontal' && styles.hideHorizontal,\n            rowsCount === 1 && styles.oneRow,\n            rowsCount === 2 && styles.twoRows,\n          )}\n        >\n          <Button\n            className={buildClassName(\n              styles.secondaryButton,\n              shouldShowSecondaryButton && !shouldHideSecondaryButton && styles.visible,\n              shouldHideSecondaryButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${secondaryButtonCurrentColor}; color: ${secondaryButtonCurrentTextColor}`}\n            disabled={!secondaryButtonCurrentIsActive && !secondaryButton?.isProgressVisible}\n            nonInteractive={secondaryButton?.isProgressVisible}\n            onClick={handleSecondaryButtonClick}\n            size=\"smaller\"\n          >\n            {!secondaryButton?.isProgressVisible && secondaryButtonCurrentText}\n            {secondaryButton?.isProgressVisible\n              && <Spinner className={styles.mainButtonSpinner} color=\"blue\" />}\n          </Button>\n          <Button\n            className={buildClassName(\n              styles.mainButton,\n              shouldShowMainButton && !shouldHideMainButton && styles.visible,\n              shouldHideMainButton && styles.hidden,\n            )}\n            fluid\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive && !mainButton?.isProgressVisible}\n            nonInteractive={mainButton?.isProgressVisible}\n            onClick={handleMainButtonClick}\n            size=\"smaller\"\n          >\n            {!mainButton?.isProgressVisible && mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner className={styles.mainButtonSpinner} color=\"white\" />}\n          </Button>\n        </div>\n      )}\n      {popupParameters && (\n        <Modal\n          isOpen={Boolean(popupParameters)}\n          title={popupParameters.title || NBSP}\n          onClose={handleAppPopupModalClose}\n          hasCloseButton\n          className={\n            buildClassName(styles.webAppPopup, !popupParameters.title?.trim().length && styles.withoutTitle)\n          }\n        >\n          {popupParameters.message}\n          <div className=\"dialog-buttons mt-2\">\n            {popupParameters.buttons.map((button) => (\n              <Button\n                key={button.id || button.type}\n                className=\"confirm-dialog-button\"\n                color={button.type === 'destructive' ? 'danger' : 'primary'}\n                isText\n                size=\"smaller\"\n\n                onClick={() => handleAppPopupClose(button.id)}\n              >\n                {button.text || oldLang(DEFAULT_BUTTON_TEXT[button.type])}\n              </Button>\n            ))}\n          </div>\n        </Modal>\n      )}\n\n      <ConfirmDialog\n        isOpen={isRequestingPhone}\n        onClose={handleRejectPhone}\n        title={oldLang('ShareYouPhoneNumberTitle')}\n        text={oldLang('AreYouSureShareMyContactInfoBot')}\n        confirmHandler={handleAcceptPhone}\n        confirmLabel={oldLang('ContactShare')}\n      />\n      <ConfirmDialog\n        isOpen={isRequestingWriteAccess}\n        onClose={handleRejectWriteAccess}\n        title={oldLang('lng_bot_allow_write_title')}\n        text={oldLang('lng_bot_allow_write')}\n        confirmHandler={handleAcceptWriteAccess}\n        confirmLabel={oldLang('lng_bot_allow_write_confirm')}\n      />\n      <ConfirmDialog\n        isOpen={Boolean(requestedFileDownload)}\n        title={oldLang('BotDownloadFileTitle')}\n        textParts={lang('BotDownloadFileDescription', {\n          bot: bot?.firstName,\n          filename: requestedFileDownload?.fileName,\n        }, {\n          withNodes: true,\n          withMarkdown: true,\n        })}\n        confirmLabel={oldLang('BotDownloadFileButton')}\n        onClose={handleRejectFileDownload}\n        confirmHandler={handleDownloadFile}\n      />\n\n      <ConfirmDialog\n        isOpen={isCloseModalOpen}\n        onClose={handleHideCloseModal}\n        title={oldLang('lng_bot_close_warning_title')}\n        text={oldLang('lng_bot_close_warning')}\n        confirmHandler={handleConfirmCloseModal}\n        confirmIsDestructive\n        confirmLabel={oldLang('lng_bot_close_warning_sure')}\n      />\n      <ConfirmDialog\n        isOpen={isRemoveModalOpen}\n        onClose={handleHideRemoveModal}\n        title={oldLang('BotRemoveFromMenuTitle')}\n        textParts={renderText(oldLang('BotRemoveFromMenu', bot?.firstName), ['simple_markdown'])}\n        confirmHandler={handleRemoveAttachBot}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n    const modalState = modal?.modalState;\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const userFullInfo = activeBotId ? selectUserFullInfo(global, activeBotId) : undefined;\n    const botAppSettings = userFullInfo?.botInfo?.appSettings;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const theme = selectTheme(global);\n    const { isPaymentModalOpen, status: regularPaymentStatus } = selectTabState(global).payment;\n    const { status: starsPaymentStatus, inputInvoice: starsInputInvoice } = selectTabState(global).starsPayment;\n    const botAppPermissions = bot ? selectBotAppPermissions(global, bot.id) : undefined;\n\n    const paymentStatus = starsPaymentStatus || regularPaymentStatus;\n\n    return {\n      attachBot,\n      bot,\n      currentUser,\n      theme,\n      isPaymentModalOpen: isPaymentModalOpen || Boolean(starsInputInvoice),\n      paymentStatus,\n      modalState,\n      botAppPermissions,\n      botAppSettings,\n    };\n  },\n)(WebAppModalTabContent));\n","import { useRef, useState } from '../../../../lib/teact/teact';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function usePopupLimit(sequentialLimit: number, resetAfter: number) {\n  const [unlockPopupsAt, setUnlockPopupsAt] = useState(0);\n  const sequentialCalls = useRef(0);\n  const lastClosedDate = useRef(0);\n\n  const handlePopupOpened = useLastCallback(() => {\n    const now = Date.now();\n\n    if (now - lastClosedDate.current > resetAfter) {\n      sequentialCalls.current = 0;\n    }\n\n    sequentialCalls.current += 1;\n\n    if (sequentialCalls.current >= sequentialLimit) {\n      setUnlockPopupsAt(now + resetAfter);\n    }\n  });\n\n  const handlePopupClosed = useLastCallback(() => {\n    if (unlockPopupsAt < Date.now()) { // Prevent confused user from extending lock time\n      lastClosedDate.current = Date.now();\n    }\n  });\n\n  return {\n    unlockPopupsAt,\n    handlePopupOpened,\n    handlePopupClosed,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"XWfkIDLY\",\"multi-tab\":\"gBVR7Hec\",\"multiTab\":\"gBVR7Hec\",\"close-icon\":\"RuJ3d9N6\",\"closeIcon\":\"RuJ3d9N6\",\"minimized\":\"dJ1Ld_PX\",\"fullScreen\":\"ciSTWz16\",\"tabs\":\"X18WbDa5\",\"tool-bar\":\"qK4q0Sat\",\"toolBar\":\"qK4q0Sat\",\"tab-button-wrapper\":\"oHX2d8Or\",\"tabButtonWrapper\":\"oHX2d8Or\",\"tab-button\":\"O4NxErFX\",\"tabButton\":\"O4NxErFX\",\"tab-right-mask\":\"dgdyQDsZ\",\"tabRightMask\":\"dgdyQDsZ\",\"tab-close-button\":\"xGefqS93\",\"tabCloseButton\":\"xGefqS93\",\"tab-button-curve-path\":\"bOuMHiVw\",\"tabButtonCurvePath\":\"bOuMHiVw\",\"tab-button-left-curve\":\"f7EicoVH\",\"tabButtonLeftCurve\":\"f7EicoVH\",\"tab-button-right-curve\":\"s6pBIYMI\",\"tabButtonRightCurve\":\"s6pBIYMI\",\"more-apps-tab-icon\":\"Obu3ui67\",\"moreAppsTabIcon\":\"Obu3ui67\",\"avatar-container\":\"z39ojrWc\",\"avatarContainer\":\"z39ojrWc\",\"web-app-tab-more-menu\":\"txS0KiU0\",\"webAppTabMoreMenu\":\"txS0KiU0\",\"more-button\":\"kKPD09tc\",\"moreButton\":\"kKPD09tc\",\"tab-more-button\":\"gkji2_RB\",\"tabMoreButton\":\"gkji2_RB\",\"more-apps-button\":\"cEuW1_hJ\",\"moreAppsButton\":\"cEuW1_hJ\",\"window-state-button\":\"XpHR_yo0\",\"windowStateButton\":\"XpHR_yo0\",\"header-button\":\"GE5AkJOU\",\"headerButton\":\"GE5AkJOU\",\"fullscreenButton\":\"otlJULGy\",\"tab-close-icon\":\"DoeOewUR\",\"tabCloseIcon\":\"DoeOewUR\",\"state-icon\":\"YRMGpqUS\",\"stateIcon\":\"YRMGpqUS\",\"icon\":\"b13oE9uA\",\"tab-avatar\":\"tI6TE6HP\",\"tabAvatar\":\"tI6TE6HP\",\"state-back\":\"IWA50OWU\",\"stateBack\":\"IWA50OWU\",\"loading-spinner\":\"ZvO65ZK4\",\"loadingSpinner\":\"ZvO65ZK4\",\"hide\":\"_90e04Jo\",\"frame\":\"zA1w1IOq\",\"with-button\":\"XsPaFD9G\",\"withButton\":\"XsPaFD9G\",\"main-button\":\"Os96PEjQ\",\"mainButton\":\"Os96PEjQ\",\"visible\":\"C8aMayAw\",\"hidden\":\"GllU9an9\",\"main-button-spinner\":\"nYSFrf_X\",\"mainButtonSpinner\":\"nYSFrf_X\",\"web-app-popup\":\"cTVKrIjM\",\"webAppPopup\":\"cTVKrIjM\",\"without-title\":\"d0DG1SkF\",\"withoutTitle\":\"d0DG1SkF\"};","import { type MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef,\n  useSignal, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiAttachBot, ApiChat, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { Point, Size, ThemeKey } from '../../../types';\nimport type { WebApp, WebAppOutboundEvent } from '../../../types/webapp';\n\nimport { RESIZE_HANDLE_CLASS_NAME } from '../../../config';\nimport { getWebAppKey } from '../../../global/helpers/bots';\nimport {\n  selectCurrentChat, selectTheme, selectUser,\n  selectWebApp,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { getColorLuma } from '../../../util/colors';\nimport { hexToRgb } from '../../../util/switchTheme';\nimport windowSize from '../../../util/windowSize';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDraggable from '../../../hooks/useDraggable';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport MinimizedWebAppModal from './MinimizedWebAppModal';\nimport MoreAppsTabContent from './MoreAppsTabContent';\nimport WebAppModalTabContent from './WebAppModalTabContent';\n\nimport styles from './WebAppModal.module.scss';\n\ntype WebAppModalTab = {\n  bot?: ApiUser;\n  webApp: WebApp;\n  isOpen: boolean;\n};\n\nexport type OwnProps = {\n  modal?: TabState['webApps'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  bot?: ApiUser;\n  attachBot?: ApiAttachBot;\n  theme?: ThemeKey;\n  cachedSize?: Size;\n  cachedPosition?: Point;\n};\n\nconst PROLONG_INTERVAL = 45000; // 45s\nconst LUMA_THRESHOLD = 128;\n\nconst MINIMIZED_STATE_SIZE = { width: 300, height: 40 };\nconst DEFAULT_MAXIMIZED_STATE_SIZE = { width: 420, height: 730 };\nconst MAXIMIZED_STATE_MINIMUM_SIZE = { width: 300, height: 300 };\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n  bot,\n  attachBot,\n  theme,\n  cachedSize,\n  cachedPosition,\n}) => {\n  const {\n    closeActiveWebApp,\n    closeWebAppModal,\n    prolongWebView,\n    toggleAttachBot,\n    openChat,\n    changeWebAppModalState,\n    openWebAppTab,\n    updateWebApp,\n    openMoreAppsTab,\n    closeMoreAppsTab,\n    updateMiniAppCachedPosition,\n    updateMiniAppCachedSize,\n  } = getActions();\n\n  const [getMaximizedStateSize, setMaximizedStateSize] = useSignal(cachedSize || DEFAULT_MAXIMIZED_STATE_SIZE);\n\n  function getSize() {\n    if (modal?.modalState === 'fullScreen') return windowSize.get();\n    if (modal?.modalState === 'maximized') return getMaximizedStateSize();\n    return MINIMIZED_STATE_SIZE;\n  }\n  function getMinimumSize() {\n    if (modal?.modalState === 'maximized') return MAXIMIZED_STATE_MINIMUM_SIZE;\n    return undefined;\n  }\n\n  const {\n    openedWebApps, activeWebAppKey, openedOrderedKeys, sessionKeys, isMoreAppsTabActive,\n  } = modal || {};\n  const activeWebApp = activeWebAppKey ? openedWebApps?.[activeWebAppKey] : undefined;\n  const {\n    isBackButtonVisible, headerColor, backgroundColor, isSettingsButtonVisible,\n  } = activeWebApp || {};\n\n  const tabs = useMemo(() => {\n    return openedOrderedKeys?.map((key) => {\n      const webApp = openedWebApps![key];\n      return {\n        bot: getGlobal().users.byId[webApp.botId],\n        webApp,\n        isOpen: Boolean(activeWebApp && (key === getWebAppKey(activeWebApp))),\n      };\n    });\n  }, [openedOrderedKeys, openedWebApps, activeWebApp]);\n\n  const { isMobile } = useAppLayout();\n  const isOpen = modal?.isModalOpen || false;\n  const isMaximizedState = modal?.modalState === 'maximized';\n  const isMinimizedState = modal?.modalState === 'minimized';\n  const isFullScreen = modal?.modalState === 'fullScreen';\n\n  const supportMultiTabMode = !isMobile;\n  const ref = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n\n  const getTriggerElement = useLastCallback(() => ref.current!);\n\n  const getRootElement = useLastCallback(\n    () => ref.current!,\n  );\n\n  const getMenuElement = useLastCallback(\n    () => menuRef.current!,\n  );\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const [isDraggingEnabled, setIsDraggingEnabled] = useState(false);\n\n  const headerElement = headerRef.current;\n  const containerElement = ref.current;\n\n  useEffect(() => {\n    setIsDraggingEnabled(Boolean(supportMultiTabMode && headerElement && containerElement && !isFullScreen));\n  }, [supportMultiTabMode, headerElement, containerElement, isFullScreen]);\n\n  useEffect(() => {\n    changeWebAppModalState({ state: 'maximized' });\n  }, [supportMultiTabMode]);\n\n  const {\n    isDragging,\n    isResizing,\n    style: draggableStyle,\n    size,\n    position,\n  } = useDraggable(\n    ref,\n    headerRef,\n    isDraggingEnabled,\n    getSize(),\n    isFullScreen,\n    getMinimumSize(),\n    cachedPosition,\n  );\n\n  const x = position?.x;\n  const y = position?.y;\n  useEffect(() => {\n    if (!isDragging && x !== undefined && y !== undefined) {\n      updateMiniAppCachedPosition({ position: { x, y } });\n    }\n  }, [isDragging, x, y]);\n\n  useEffect(() => {\n    if (!isDragging && size && isMaximizedState) {\n      updateMiniAppCachedSize({ size });\n    }\n  }, [isDragging, isMaximizedState, size]);\n\n  const currentSize = size || getSize();\n\n  const currentWidth = currentSize.width;\n  const currentHeight = currentSize.height;\n\n  useEffect(() => {\n    if (isResizing) {\n      setMaximizedStateSize({ width: currentWidth, height: currentHeight });\n    }\n  }, [currentHeight, currentWidth, isResizing, setMaximizedStateSize]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const {\n    queryId,\n  } = activeWebApp || {};\n\n  const openTabsCount = openedWebApps ? Object.values(openedWebApps).length : 0;\n\n  useInterval(() => {\n    if (!openedWebApps) return;\n    Object.keys(openedWebApps).forEach((key) => {\n      const webApp = openedWebApps[key];\n      if (webApp.queryId) {\n        prolongWebView({\n          botId: webApp.botId,\n          queryId: webApp.queryId,\n          peerId: webApp.peerId || chat!.id,\n          replyInfo: webApp.replyInfo,\n        });\n      }\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  // eslint-disable-next-line no-null/no-null\n  const sendEventCallback = useRef<((event: WebAppOutboundEvent) => void) | null>(null);\n  // eslint-disable-next-line no-null/no-null\n  const reloadFrameCallback = useRef<((url: string) => void) | null>(null);\n\n  const registerSendEventCallback = useLastCallback((callback: (event: WebAppOutboundEvent) => void) => {\n    sendEventCallback.current = callback;\n  });\n\n  const sendEvent = useLastCallback((event: WebAppOutboundEvent) => {\n    if (sendEventCallback.current) {\n      sendEventCallback.current(event);\n    }\n  });\n\n  const registerReloadFrameCallback = useLastCallback((callback: (url: string) => void) => {\n    reloadFrameCallback.current = callback;\n  });\n\n  const reloadFrame = useLastCallback((url: string) => {\n    if (reloadFrameCallback.current) {\n      reloadFrameCallback.current(url);\n    }\n  });\n\n  const handleSettingsButtonClick = useLastCallback(() => {\n    sendEvent({\n      eventType: 'settings_button_pressed',\n    });\n  });\n\n  const handleRefreshClick = useLastCallback(() => {\n    reloadFrame(activeWebApp!.url);\n  });\n\n  const handleModalClose = useLastCallback(() => {\n    closeWebAppModal();\n  });\n\n  const handleCloseMoreAppsTab = useLastCallback(() => {\n    closeMoreAppsTab();\n  });\n\n  const handleTabClose = useLastCallback(() => {\n    if (openTabsCount > 1) {\n      closeActiveWebApp();\n    } else {\n      closeWebAppModal();\n    }\n  });\n\n  const handleToggleClick = useLastCallback(() => {\n    if (attachBot) {\n      const key = getWebAppKey(activeWebApp!);\n      updateWebApp({\n        key,\n        update: {\n          isRemoveModalOpen: true,\n        },\n      });\n      return;\n    }\n\n    toggleAttachBot({\n      botId: bot!.id,\n      isEnabled: true,\n    });\n  });\n\n  const handleBackClick = useLastCallback(() => {\n    if (isBackButtonVisible) {\n      sendEvent({\n        eventType: 'back_button_pressed',\n      });\n    } else {\n      handleModalClose();\n    }\n  });\n\n  const handleCollapseClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'minimized' });\n  });\n\n  const handleFullscreenClick = useLastCallback(() => {\n    changeWebAppModalState({ state: 'fullScreen' });\n  });\n\n  const handleOpenMoreAppsTabClick = useLastCallback(() => {\n    openMoreAppsTab();\n  });\n\n  const handleTabClick = useLastCallback((tab: WebAppModalTab) => {\n    openWebAppTab({ webApp: tab.webApp });\n  });\n\n  const openBotChat = useLastCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n  });\n\n  const MoreMenuButton:\n  FC<{ onTrigger: (e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        className={\n          buildClassName(\n            supportMultiTabMode ? styles.tabMoreButton : styles.moreButton,\n            isMenuOpen && 'active',\n          )\n        }\n        round\n        ripple={!isMobile}\n        size={supportMultiTabMode ? 'tiny' : 'smaller'}\n        color=\"translucent\"\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile, supportMultiTabMode]);\n\n  function renderMenuItems() {\n    return (\n      <>\n        {chat && bot && chat.id !== bot.id && (\n          <MenuItem icon=\"bots\" onClick={openBotChat}>{oldLang('BotWebViewOpenBot')}</MenuItem>\n        )}\n        <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{oldLang('WebApp.ReloadPage')}</MenuItem>\n        {isSettingsButtonVisible && (\n          <MenuItem icon=\"settings\" onClick={handleSettingsButtonClick}>\n            {oldLang('Settings')}\n          </MenuItem>\n        )}\n        {bot?.isAttachBot && (\n          <MenuItem\n            icon={attachBot ? 'stop' : 'install'}\n            onClick={handleToggleClick}\n            destructive={Boolean(attachBot)}\n          >\n            {oldLang(attachBot ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n          </MenuItem>\n        )}\n      </>\n    );\n  }\n\n  function renderMoreMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        ref={menuRef}\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        getTriggerElement={getTriggerElement}\n        getMenuElement={getMenuElement}\n        getRootElement={getRootElement}\n        autoClose\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n      >\n        {renderMenuItems()}\n      </Menu>\n    );\n  }\n\n  function renderDropdownMoreMenu() {\n    return (\n      <DropdownMenu\n        className={buildClassName(\n          supportMultiTabMode ? styles.webAppTabMoreMenu : 'web-app-more-menu',\n          'with-menu-transitions',\n        )}\n        trigger={MoreMenuButton}\n        positionX={supportMultiTabMode ? 'left' : 'right'}\n      >\n        {renderMenuItems()}\n      </DropdownMenu>\n    );\n  }\n\n  const backButtonClassName = buildClassName(\n    styles.closeIcon,\n    isBackButtonVisible && styles.stateBack,\n  );\n\n  const headerTextVar = useMemo(() => {\n    if (isMoreAppsTabActive) return 'color-text';\n    if (!headerColor) return undefined;\n    const { r, g, b } = hexToRgb(headerColor);\n    const luma = getColorLuma([r, g, b]);\n    const adaptedLuma = theme === 'dark' ? 255 - luma : luma;\n    return adaptedLuma > LUMA_THRESHOLD ? 'color-text' : 'color-background';\n  }, [headerColor, theme, isMoreAppsTabActive]);\n\n  function renderTabCurveBorder(className: string) {\n    return (\n      <svg\n        className={className}\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 16 16\"\n        fill=\"none\"\n      >\n        <path\n          className={styles.tabButtonCurvePath}\n          fill-rule=\"evenodd\"\n          clip-rule=\"evenodd\"\n          d=\"M16 16V0C16 12 12 16 0 16H16Z\"\n        />\n      </svg>\n    );\n  }\n\n  function renderActiveTab() {\n    const style = buildStyle(\n      headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n      headerColor && `--active-tab-background: ${headerColor}`,\n    );\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n        style={style}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.avatarContainer}>\n            <Avatar\n              size=\"mini\"\n              peer={bot}\n            />\n            <MoreMenuButton onTrigger={handleContextMenu} isOpen={isContextMenuOpen} />\n          </div>\n          {attachBot?.shortName ?? bot?.firstName}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleTabClose}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsTab() {\n    return (\n      <div\n        className={styles.tabButtonWrapper}\n      >\n        {renderTabCurveBorder(styles.tabButtonLeftCurve)}\n        <div\n          className={styles.tabButton}\n        >\n          <div className={styles.moreAppsTabIcon}>\n            <Icon className={styles.icon} name=\"add\" />\n          </div>\n          {lang('OpenApp')}\n          <div className={styles.tabRightMask} />\n          <Button\n            className={styles.tabCloseButton}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            ariaLabel={oldLang('Close')}\n            onClick={handleCloseMoreAppsTab}\n          >\n            <Icon className={styles.tabCloseIcon} name=\"close\" />\n          </Button>\n        </div>\n        {renderTabCurveBorder(styles.tabButtonRightCurve)}\n      </div>\n    );\n  }\n\n  function renderMoreAppsButton() {\n    return (\n      <Button\n        className={buildClassName(\n          styles.moreAppsButton,\n          'no-drag',\n        )}\n        round\n        color=\"translucent\"\n        size=\"tiny\"\n        onClick={handleOpenMoreAppsTabClick}\n      >\n        <Icon className={styles.icon} name=\"add\" />\n      </Button>\n    );\n  }\n\n  const containerRef = useRef<HTMLDivElement>();\n  useHorizontalScroll(containerRef, !isOpen || isMinimizedState || !(containerRef.current));\n\n  function renderTabs() {\n    return (\n      <div\n        className={styles.tabs}\n        ref={containerRef}\n      >\n        {tabs?.map((tab) => (\n          tab.isOpen ? (\n            renderActiveTab()\n          ) : (\n            <Avatar\n              className={styles.tabAvatar}\n              size=\"mini\"\n              peer={tab.bot}\n\n              onClick={() => handleTabClick(tab)}\n            />\n          )\n        ))}\n        {isMoreAppsTabActive && renderMoreAppsTab()}\n      </div>\n    );\n  }\n\n  function renderHeader() {\n    return (\n      <div\n        ref={headerRef}\n      >\n        {!supportMultiTabMode\n          ? renderSinglePageModeHeader()\n          : (isMaximizedState ? renderMultiTabHeader() : <MinimizedWebAppModal />)}\n      </div>\n    );\n  }\n\n  function renderMultiTabHeader() {\n    return (\n      <div\n        className={buildClassName(\n          'modal-header',\n          'multiTab',\n        )}\n        style={buildStyle(\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          className={styles.headerButton}\n          round\n          color=\"translucent\"\n          size=\"tiny\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        {renderTabs()}\n        {renderMoreMenu()}\n\n        <div className={styles.toolBar}>\n          {!isMoreAppsTabActive && renderMoreAppsButton()}\n\n          {!isMoreAppsTabActive && (\n            <Button\n              className={buildClassName(\n                styles.windowStateButton,\n                styles.fullscreenButton,\n                'no-drag',\n              )}\n              round\n              color=\"translucent\"\n              size=\"tiny\"\n              onClick={handleFullscreenClick}\n            >\n              <Icon className={styles.stateIcon} name=\"expand-modal\" />\n            </Button>\n          )}\n\n          <Button\n            className={buildClassName(\n              styles.windowStateButton,\n              'no-drag',\n            )}\n            round\n            color=\"translucent\"\n            size=\"tiny\"\n            onClick={handleCollapseClick}\n          >\n            <Icon className={styles.stateIcon} name=\"collapse-modal\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  function renderSinglePageModeHeader() {\n    return (\n      <div\n        className=\"modal-header\"\n        style={buildStyle(\n          headerColor && `background-color: ${headerColor}`,\n          headerTextVar && `--color-header-text: var(--${headerTextVar})`,\n        )}\n      >\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={oldLang(isBackButtonVisible ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <div className={backButtonClassName} />\n        </Button>\n        <div className=\"modal-title\">{attachBot?.shortName ?? bot?.firstName}</div>\n        {!isMoreAppsTabActive && renderDropdownMoreMenu()}\n      </div>\n    );\n  }\n\n  function buildResizeHandleClass(handleClassName: string) {\n    return buildClassName(RESIZE_HANDLE_CLASS_NAME, handleClassName);\n  }\n\n  function renderResizeHandles() {\n    return (\n      <>\n        <div className={buildResizeHandleClass('top')} />\n        <div className={buildResizeHandleClass('bottom')} />\n        <div className={buildResizeHandleClass('left')} />\n        <div className={buildResizeHandleClass('right')} />\n        <div className={buildResizeHandleClass('topLeft')} />\n        <div className={buildResizeHandleClass('topRight')} />\n        <div className={buildResizeHandleClass('bottomLeft')} />\n        <div className={buildResizeHandleClass('bottomRight')} />\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      dialogRef={ref}\n      className={buildClassName(\n        styles.root,\n        supportMultiTabMode && styles.multiTab,\n        isMinimizedState && styles.minimized,\n        isFullScreen && styles.fullScreen,\n      )}\n      dialogStyle={supportMultiTabMode ? draggableStyle : undefined}\n      dialogContent={isDraggingEnabled && !isMinimizedState ? renderResizeHandles() : undefined}\n      isOpen={isOpen}\n      isLowStackPriority\n      onClose={handleModalClose}\n      header={renderHeader()}\n      style={`background-color: ${backgroundColor || 'var(--color-background)'}`}\n      noBackdrop\n      noBackdropClose\n    >\n      {isFullScreen && renderMoreMenu()}\n      {openedWebApps && sessionKeys?.map((key) => (\n        <WebAppModalTabContent\n          key={key}\n          modal={modal}\n          registerSendEventCallback={registerSendEventCallback}\n          registerReloadFrameCallback={registerReloadFrameCallback}\n          webApp={openedWebApps[key]}\n          isTransforming={isDragging || isResizing}\n          onContextMenuButtonClick={handleContextMenu}\n          isMultiTabSupported={supportMultiTabMode}\n          modalHeight={currentHeight}\n        />\n      ))}\n      {isMoreAppsTabActive && (<MoreAppsTabContent />)}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const activeWebApp = modal?.activeWebAppKey ? selectWebApp(global, modal.activeWebAppKey) : undefined;\n    const { botId: activeBotId } = activeWebApp || {};\n\n    const attachBot = activeBotId ? global.attachMenu.bots[activeBotId] : undefined;\n    const bot = activeBotId ? selectUser(global, activeBotId) : undefined;\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n    const { miniAppsCachedPosition, miniAppsCachedSize } = selectSharedSettings(global);\n\n    return {\n      attachBot,\n      bot,\n      chat,\n      theme,\n      cachedPosition: miniAppsCachedPosition,\n      cachedSize: miniAppsCachedSize,\n    };\n  },\n)(WebAppModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp' | 'botApp';\n  shouldRequestWriteAccess?: boolean;\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type, shouldRequestWriteAccess }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n\n  const [isWriteAllowed, setIsWriteAllowed] = useState(shouldRequestWriteAccess || false);\n\n  const lang = useOldLang();\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id, isWriteAllowed });\n  }, [markBotTrusted, isWriteAllowed, bot]);\n\n  const handleBotTrustDecline = useCallback(() => {\n    cancelBotTrustRequest();\n  }, []);\n\n  const title = type === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = useMemo(() => {\n    switch (type) {\n      case 'game':\n        return lang('BotPermissionGameAlert', getUserFullName(bot));\n      case 'webApp':\n        return lang('BotOpenPageMessage', getUserFullName(bot));\n      case 'botApp':\n      default:\n        return lang('BotWebViewStartPermission');\n    }\n  }, [bot, type, lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={handleBotTrustDecline}\n      title={title}\n      confirmHandler={handleBotTrustAccept}\n    >\n      {renderText(text, ['simple_markdown'])}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={isWriteAllowed}\n          label={renderText(\n            lang('WebApp.AddToAttachmentAllowMessages', bot?.firstName),\n            ['simple_markdown'],\n          )}\n          onCheck={setIsWriteAllowed}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(BotTrustModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { MINI_APP_TOS_URL } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  modal: TabState['requestedAttachBotInstall'];\n};\n\nconst AttachBotInstallModal: FC<OwnProps> = ({\n  modal,\n}) => {\n  const { confirmAttachBotInstall, cancelAttachBotInstall } = getActions();\n  const bot = modal?.bot;\n\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n\n  const lang = useOldLang();\n\n  const handleConfirm = useCallback(() => {\n    confirmAttachBotInstall({\n      isWriteAllowed: Boolean(bot?.shouldRequestWriteAccess),\n    });\n  }, [confirmAttachBotInstall, bot]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (bot) {\n      setIsTosAccepted(false);\n    }\n  }, [bot]);\n\n  const tosLabel = useMemo(() => {\n    const base = lang('lng_mini_apps_disclaimer_button');\n    const split = base.split('{link}');\n    const linkText = lang('lng_mini_apps_disclaimer_link');\n    return [\n      split[0],\n      <a href={MINI_APP_TOS_URL} target=\"_blank\" rel=\"noopener noreferrer\">{linkText}</a>,\n      split[1],\n    ];\n  }, [lang]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelAttachBotInstall}\n      title={lang('lng_mini_apps_disclaimer_title')}\n      confirmHandler={handleConfirm}\n      isConfirmDisabled={!isTosAccepted}\n    >\n      {renderText(lang('lng_mini_apps_disclaimer_text', bot?.shortName), ['simple_markdown'])}\n      <Checkbox\n        className=\"dialog-checkbox\"\n        checked={isTosAccepted}\n        label={tosLabel}\n        onCheck={setIsTosAccepted}\n      />\n      {renderText(lang('WebBot.Account.Desclaimer.Desc', bot?.shortName), ['simple_markdown'])}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(AttachBotInstallModal);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  folder?: ApiChatFolder;\n};\n\nconst DeleteFolderDialog: FC<OwnProps> = ({\n  folder,\n}) => {\n  const { closeDeleteChatFolderModal, deleteChatFolder, openDeleteChatFolderModal } = getActions();\n  const lang = useOldLang();\n\n  const isOpen = Boolean(folder);\n\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n  const isMyChatlist = renderingFolder?.hasMyInvites;\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteChatFolderModal();\n    if (isMyChatlist) {\n      openDeleteChatFolderModal({ folderId: renderingFolder.id, isConfirmedForChatlist: true });\n    } else {\n      deleteChatFolder({ id: renderingFolder!.id });\n    }\n  }, [isMyChatlist, renderingFolder]);\n\n  return (\n    <ConfirmDialog\n      isOpen={isOpen}\n      onClose={closeDeleteChatFolderModal}\n      text={isMyChatlist ? lang('FilterDeleteAlertLinks') : lang('FilterDeleteAlert')}\n      confirmLabel={lang('Delete')}\n      confirmHandler={handleDeleteFolderMessage}\n      confirmIsDestructive\n    />\n  );\n};\n\nexport default memo(DeleteFolderDialog);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wn7D2H1e\",\"text\":\"IQ1U2TrZ\",\"header\":\"F6qqXRvD\",\"description\":\"ILLaH6qQ\",\"icon\":\"DzGwbpu5\",\"font-icon\":\"Pa9h5mh3\",\"fontIcon\":\"Pa9h5mh3\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { IconName } from '../../../types/icons';\n\nimport { hexToRgb, lerpRgb } from '../../../util/switchTheme';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\n\nimport styles from './PremiumFeatureItem.module.scss';\n\ntype OwnProps<T> = {\n  title: string;\n  text: string;\n  index: number;\n  count: number;\n  section: T;\n  onClick?: (section: T) => void;\n} & ({\n  icon: IconName;\n  isFontIcon: true;\n} | {\n  icon: string;\n  isFontIcon?: false;\n});\n\nconst COLORS = [\n  '#F2862D', '#EB7B4D', '#E46D72', '#DD6091', '#CC5FBA', '#B464E7',\n  '#9873FF', '#768DFF', '#55A5FC', '#52B0C9', '#4FBC93', '#4CC663',\n].map(hexToRgb);\n\nconst PremiumFeatureItem = <T,>({\n  icon,\n  isFontIcon,\n  title,\n  text,\n  index,\n  count,\n  section,\n  onClick,\n}: OwnProps<T>) => {\n  const newIndex = (index / count) * COLORS.length;\n  const colorA = COLORS[Math.floor(newIndex)];\n  const colorB = COLORS[Math.ceil(newIndex)] ?? colorA;\n  const { r, g, b } = lerpRgb(colorA, colorB, 0.5);\n\n  const handleClick = useLastCallback(() => {\n    onClick?.(section);\n  });\n\n  return (\n    <ListItem buttonClassName={styles.root} onClick={handleClick} inactive={!onClick}>\n      {isFontIcon ? (\n        <Icon name={icon} className={styles.fontIcon} style={`--item-color: rgb(${r},${g},${b})`} />\n      ) : (\n        <img src={icon} className={styles.icon} alt=\"\" style={`--item-color: rgb(${r},${g},${b})`} draggable={false} />\n      )}\n      <div className={styles.text}>\n        <div className={styles.title}>{renderText(title, ['br'])}</div>\n        <div className={styles.description}>{text}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(PremiumFeatureItem);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HmY1pYD9\",\"arrow\":\"cqNhvdib\",\"right\":\"hIgQCprt\",\"arrow-hidden\":\"wDzTWXzO\",\"arrowHidden\":\"wDzTWXzO\",\"dot\":\"Ac0pMX9w\",\"medium\":\"yDo_8Y7X\",\"small\":\"bhODNwmU\",\"invisible\":\"O9pyrgj0\",\"active\":\"NYDxCNdz\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport Button from '../ui/Button';\nimport Icon from './icons/Icon';\n\nimport styles from './SliderDots.module.scss';\n\ntype OwnProps = {\n  length: number;\n  active: number;\n  onSelectSlide: (index: number) => void;\n};\n\nconst SliderDots: FC<OwnProps> = ({\n  length,\n  active,\n  onSelectSlide,\n}) => {\n  const startFrom = Math.max(0, Math.min(length - 8, active - 4));\n  const isPreLastBatch = startFrom === length - 8 - 1;\n  const isLastBatch = startFrom === length - 8;\n  const isFirstBatch = startFrom === 0;\n  const isPreFirstBatch = startFrom === 1;\n  const shownDotsCount = Math.min(length, 8);\n\n  const handleGoForward = useCallback(() => {\n    onSelectSlide(active + 1);\n  }, [active, onSelectSlide]);\n\n  const handleGoBack = useCallback(() => {\n    onSelectSlide(active - 1);\n  }, [active, onSelectSlide]);\n\n  const count = Math.min(8, length);\n\n  return (\n    <div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === 0 && styles.arrowHidden)}\n          color=\"translucent\"\n          disabled={active === 0}\n          round\n          onClick={handleGoBack}\n        >\n          <Icon name=\"previous\" />\n        </Button>\n      )}\n      <div className={styles.root} style={`--start-from: ${startFrom}; --length: ${length}; --count: ${count};`}>\n        {Array(length).fill(undefined).map((_, i) => {\n          const index = i;\n          const isLast = (i === startFrom + shownDotsCount - 1 && !isLastBatch && !isPreLastBatch);\n          const isPreLast = (i === startFrom + shownDotsCount - 2 && !isPreLastBatch && !isLastBatch)\n            || (i === startFrom + shownDotsCount - 1 && isPreLastBatch);\n          const isFirst = (i === startFrom) && !isFirstBatch && !isPreFirstBatch;\n          const isPreFirst = ((i === startFrom + 1) && !isFirstBatch && !isPreFirstBatch)\n            || (i === startFrom && isPreFirstBatch);\n          const isInvisible = i < startFrom || i >= startFrom + shownDotsCount;\n          return (\n            <div\n              onClick={() => onSelectSlide(i)}\n              className={buildClassName(\n                styles.dot,\n                index === active && styles.active,\n                (isPreLast || isPreFirst) && styles.medium,\n                (isLast || isFirst || isInvisible) && styles.small,\n                isInvisible && styles.invisible,\n              )}\n            />\n          );\n        })}\n      </div>\n      {!IS_TOUCH_ENV && (\n        <Button\n          className={buildClassName(styles.arrow, active === length - 1 && styles.arrowHidden, styles.right)}\n          color=\"translucent\"\n          round\n          disabled={active === length - 1}\n          onClick={handleGoForward}\n        >\n          <Icon name=\"next\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SliderDots);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"u84X0r2z\",\"floating-badge\":\"hPi4fICJ\",\"floatingBadge\":\"hPi4fICJ\",\"floating-badge-triangle\":\"jufjjcX9\",\"floatingBadgeTriangle\":\"jufjjcX9\",\"floating-badge-icon\":\"XkiOXdMP\",\"floatingBadgeIcon\":\"XkiOXdMP\",\"text\":\"YaiSoFKE\",\"floating-badge-value\":\"iC3LJrvy\",\"floatingBadgeValue\":\"iC3LJrvy\",\"left-text\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"leftText\":\"OejVAPj6 YaiSoFKE YaiSoFKE\",\"right-text\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"rightText\":\"COQdFBQk YaiSoFKE YaiSoFKE\",\"right-value\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"rightValue\":\"BEq3jFlz YaiSoFKE YaiSoFKE\",\"left-value\":\"RJosx238 YaiSoFKE\",\"leftValue\":\"RJosx238 YaiSoFKE\",\"line\":\"Hy5kWx0p\",\"left\":\"scGr4JS9\",\"right\":\"nPaUalQf\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { IconName } from '../../../../types/icons';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\n\nimport styles from './PremiumLimitsCompare.module.scss';\n\ntype OwnProps = {\n  floatingBadgeIcon?: IconName;\n  leftValue?: string;\n  rightValue?: string;\n  className?: string;\n  rightStyle?: string;\n};\n\nconst PremiumLimitsCompare: FC<OwnProps> = ({\n  leftValue,\n  rightValue,\n  className,\n  floatingBadgeIcon,\n  rightStyle,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {floatingBadgeIcon && (\n        <div className={styles.floatingBadge}>\n          <Icon name={floatingBadgeIcon} className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>{leftValue}</div>\n          <div className={styles.floatingBadgeTriangle}>\n            <svg width=\"26\" height=\"9\" viewBox=\"0 0 26 9\" fill=\"none\">\n              <path d=\"M0 0H26H24.4853C22.894 0 21.3679 0.632141 20.2426 1.75736L14.4142 7.58579C13.6332 8.36684 12.3668 8.36683 11.5858 7.58579L5.75736 1.75736C4.63214 0.632139 3.10602 0 1.51472 0H0Z\" fill=\"#7E85FF\" />\n            </svg>\n          </div>\n        </div>\n      )}\n      <div className={buildClassName(styles.line, styles.left)}>\n        <div className={styles.leftText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitFree')}</div>\n        {!floatingBadgeIcon && <div className={styles.leftValue}>{leftValue}</div>}\n      </div>\n      <div className={buildClassName(styles.line, styles.right)} style={rightStyle}>\n        <div className={styles.rightText} dir={lang.isRtl ? 'rtl' : undefined}>{lang('LimitPremium')}</div>\n        <div className={styles.rightValue}>{rightValue}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitsCompare);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../../lib/teact/teact';\n\nimport { lerp } from '../../../../util/math';\n\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitPreview.module.scss';\n\ntype OwnProps = {\n  title: string;\n  description: string;\n  leftValue?: string;\n  rightValue?: string;\n  colorStepProgress: number;\n};\n\nconst COLOR_START = [91, 160, 255];\nconst COLOR_END = [197, 100, 243];\n\nconst PremiumLimitPreview: FC<OwnProps> = ({\n  title,\n  description,\n  leftValue,\n  rightValue,\n  colorStepProgress,\n}) => {\n  const color = useMemo(() => {\n    return COLOR_START.map((start, i) => lerp(start, COLOR_END[i], colorStepProgress));\n  }, [colorStepProgress]);\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.title}>{title}</div>\n      <div className={styles.description}>{description}</div>\n      <PremiumLimitsCompare\n        leftValue={leftValue}\n        rightValue={rightValue}\n        rightStyle={`background: rgb(${color.join(',')})`}\n      />\n    </div>\n  );\n};\n\nexport default memo(PremiumLimitPreview);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"ZXp65Wgy\",\"title\":\"W1xG3pjS\",\"description\":\"b_CBXIkT\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"O1fqNCy0\",\"sticker\":\"ogaoEAcn\",\"effect-sticker\":\"Stdz4UIW ogaoEAcn\",\"effectSticker\":\"Stdz4UIW ogaoEAcn\"};","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\n\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\n\nimport AnimatedSticker from '../../../common/AnimatedSticker';\n\nimport styles from './PremiumFeaturePreviewStickers.module.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  stickers: GlobalState['stickers']['premium']['stickers'];\n};\n\nconst EMOJI_SIZE_MULTIPLIER = 0.6;\nconst EFFECT_SIZE_MULTIPLIER = 0.8;\nconst MAX_EMOJIS = 15;\nconst ENDED_DELAY = 150;\n\nconst AnimatedCircleSticker: FC<{\n  size: number;\n  realIndex: number;\n  sticker: ApiSticker;\n  index: number;\n  maxLength: number;\n  onClick: (index: number) => void;\n  onEnded: (index: number) => void;\n  canPlay: boolean;\n}> = ({\n  size, realIndex, canPlay,\n  sticker, index, maxLength, onClick, onEnded,\n}) => {\n  const mediaData = useMedia(`sticker${sticker.id}`);\n  const mediaDataAround = useMedia(`sticker${sticker.id}?size=f`);\n\n  const isActivated = index === 0;\n  const [isAnimated, animate, inanimate] = useFlag(isActivated);\n\n  const circleSize = size - size * EMOJI_SIZE_MULTIPLIER;\n  const width = circleSize * 3;\n  const height = circleSize * 3.2;\n\n  const a = index / maxLength;\n\n  const angle = a * (Math.PI * 2);\n  const scale = isActivated ? 1 : 0.66;\n\n  const x = Math.cos(angle) * width - circleSize * 2.8;\n  const y = Math.sin(angle) * height;\n\n  const handleClick = useLastCallback(() => {\n    onClick(realIndex);\n  });\n\n  const handleEnded = useLastCallback(() => {\n    inanimate();\n    onEnded(realIndex);\n  });\n\n  useEffect(() => {\n    if (isActivated) {\n      animate();\n    }\n  }, [isActivated, animate]);\n\n  return (\n    <>\n      {isActivated && (\n        <AnimatedSticker\n          className={styles.effectSticker}\n          tgsUrl={mediaDataAround}\n          play={canPlay}\n          isLowPriority\n          noLoop\n          size={EFFECT_SIZE_MULTIPLIER * size}\n          style={`--x: calc(${x}px - 10%); --y: ${y}px;`}\n        />\n      )}\n      <AnimatedSticker\n        className={styles.sticker}\n        tgsUrl={mediaData}\n        play={canPlay && isAnimated}\n        noLoop\n        size={EMOJI_SIZE_MULTIPLIER * size}\n        style={`--x: ${x}px; --y: ${y}px; --opacity: ${scale}`}\n        onClick={handleClick}\n        onEnded={handleEnded}\n      />\n    </>\n  );\n};\n\nconst PremiumFeaturePreviewStickers: FC<OwnProps & StateProps> = ({\n  stickers, isActive,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const [offset, setOffset] = useState(0);\n  const [size, setSize] = useState(0);\n\n  const renderedStickers = stickers?.slice(0, MAX_EMOJIS);\n\n  const handleClick = useLastCallback((i: number) => {\n    setOffset(-i);\n  });\n\n  const handleEnded = useLastCallback((i: number) => {\n    const displayIndex = cycleRestrict(renderedStickers.length, i + offset);\n    if (displayIndex !== 0) return;\n\n    setTimeout(() => {\n      setOffset((current) => {\n        return cycleRestrict(renderedStickers.length, current + 1);\n      });\n    }, ENDED_DELAY);\n  });\n\n  useEffect(() => {\n    const container = containerRef.current;\n    if (!container) return;\n\n    setSize(container.closest('.modal-dialog')!.clientWidth);\n  }, []);\n\n  return (\n    <div\n      className={styles.root}\n      ref={containerRef}\n    >\n      {Boolean(size) && renderedStickers?.map((sticker, i) => {\n        return (\n          <AnimatedCircleSticker\n            size={size}\n            sticker={sticker}\n            realIndex={i}\n            index={(i + offset + renderedStickers.length) % renderedStickers.length}\n            maxLength={renderedStickers.length}\n            onClick={handleClick}\n            onEnded={handleEnded}\n            canPlay={isActive}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      stickers: global.stickers.premium.stickers,\n    };\n  },\n)(PremiumFeaturePreviewStickers));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mFElmm7a\",\"header\":\"Jjbochk6\",\"circle\":\"ChteQ9C3\",\"title\":\"d2ayix6L\",\"features\":\"ensyCeMe\",\"mobile\":\"DFbZJafh\",\"scrolled\":\"iN1T0a2Y\"};","import { memo, useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiUser } from '../../../../api/types';\nimport type { IconName } from '../../../../types/icons';\n\nimport { selectUser } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useOldLang from '../../../../hooks/useOldLang';\nimport useScrolledState from '../../../../hooks/useScrolledState';\nimport useDevicePixelRatio from '../../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar, { AVATAR_SIZES } from '../../../common/Avatar';\nimport { drawGradientCircle } from '../../../common/AvatarStoryCircle';\nimport PremiumFeatureItem from '../PremiumFeatureItem';\n\nimport styles from './PremiumFeaturePreviewStories.module.scss';\n\ntype StateProps = {\n  currentUser: ApiUser;\n};\n\nconst STORY_FEATURE_TITLES = {\n  stories_order: 'PremiumStoriesPriority',\n  stories_stealth: 'PremiumStoriesStealth',\n  stories_views: 'PremiumStoriesViews',\n  stories_timer: 'lng_premium_stories_subtitle_expiration',\n  stories_save: 'PremiumStoriesSaveToGallery',\n  stories_caption: 'lng_premium_stories_subtitle_caption',\n  stories_link: 'lng_premium_stories_subtitle_links',\n};\n\nconst STORY_FEATURE_DESCRIPTIONS = {\n  stories_order: 'PremiumStoriesPriorityDescription',\n  stories_stealth: 'PremiumStoriesStealthDescription',\n  stories_views: 'PremiumStoriesViewsDescription',\n  stories_timer: 'PremiumStoriesExpirationDescription',\n  stories_save: 'PremiumStoriesSaveToGalleryDescription',\n  stories_caption: 'PremiumStoriesCaptionDescription',\n  stories_link: 'PremiumStoriesFormattingDescription',\n};\n\nconst STORY_FEATURE_ICONS: Record<string, IconName> = {\n  stories_order: 'story-priority',\n  stories_stealth: 'eye-crossed-outline',\n  stories_views: 'eye-outline',\n  stories_timer: 'timer',\n  stories_save: 'arrow-down-circle',\n  stories_caption: 'story-caption',\n  stories_link: 'link-badge',\n};\n\nconst STORY_FEATURE_ORDER = Object.keys(STORY_FEATURE_TITLES) as (keyof typeof STORY_FEATURE_TITLES)[];\n\nconst CIRCLE_SIZE = AVATAR_SIZES.giant + 0.25 * REM;\nconst CIRCLE_SEGMENTS = 8;\nconst CIRCLE_READ_SEGMENTS = 0;\n\nconst PremiumFeaturePreviewVideo = ({\n  currentUser,\n}: StateProps) => {\n  const circleRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const dpr = useDevicePixelRatio();\n\n  useLayoutEffect(() => {\n    if (!circleRef.current) {\n      return;\n    }\n\n    drawGradientCircle({\n      canvas: circleRef.current,\n      size: CIRCLE_SIZE * dpr,\n      segmentsCount: CIRCLE_SEGMENTS,\n      color: 'purple',\n      readSegmentsCount: CIRCLE_READ_SEGMENTS,\n      readSegmentColor: 'transparent',\n      dpr,\n    });\n  }, [dpr]);\n\n  const { handleScroll, isAtBeginning } = useScrolledState();\n\n  const maxSize = CIRCLE_SIZE;\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.header}>\n        <Avatar forPremiumPromo peer={currentUser} size=\"giant\" />\n        <canvas className={styles.circle} ref={circleRef} style={`max-width: ${maxSize}px; max-height: ${maxSize}px`} />\n      </div>\n      <div className={styles.title}>{lang('UpgradedStories')}</div>\n      <div\n        className={buildClassName(styles.features, !isAtBeginning && styles.scrolled, 'custom-scroll')}\n        onScroll={handleScroll}\n      >\n        {STORY_FEATURE_ORDER.map((section, index) => {\n          return (\n            <PremiumFeatureItem\n              key={section}\n              title={lang(STORY_FEATURE_TITLES[section])}\n              text={lang(STORY_FEATURE_DESCRIPTIONS[section])}\n              icon={STORY_FEATURE_ICONS[section]}\n              isFontIcon\n              index={index}\n              count={STORY_FEATURE_ORDER.length}\n              section={section}\n            />\n          );\n        })}\n        <div className={styles.mobile}>{lang('lng_premium_stories_about_mobile')}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      currentUser: selectUser(global, global.currentUserId!)!,\n    };\n  },\n)(PremiumFeaturePreviewVideo));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ot0dA1yZ\",\"wrapper\":\"yxSAGAc1\",\"down\":\"Jcy6cDoc\",\"frame\":\"Vn81yTTJ\",\"video\":\"rrVJClLL\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiThumbnail } from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport OptimizedVideo from '../../../ui/OptimizedVideo';\n\nimport styles from './PremiumFeaturePreviewVideo.module.scss';\n\nimport DeviceFrame from '../../../../assets/premium/DeviceFrame.svg';\n\ntype OwnProps = {\n  videoId: string;\n  isReverseAnimation: boolean;\n  isDown: boolean;\n  videoThumbnail: ApiThumbnail;\n  index: number;\n  isActive: boolean;\n};\n\nconst PremiumFeaturePreviewVideo: FC<OwnProps> = ({\n  videoId,\n  isReverseAnimation,\n  isDown,\n  videoThumbnail,\n  index,\n  isActive,\n}) => {\n  const mediaData = useMedia(`document${videoId}`);\n  const thumbnailRef = useCanvasBlur(videoThumbnail.dataUri);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n\n  return (\n    <div className={styles.root}>\n      <div\n        className={buildClassName(\n          styles.wrapper,\n          isReverseAnimation && styles.reverse,\n          isDown && styles.down,\n        )}\n        id={`premium_feature_preview_video_${index}`}\n      >\n        <img src={DeviceFrame} alt=\"\" className={styles.frame} draggable={false} />\n        <canvas ref={thumbnailRef} className={styles.video} />\n        <OptimizedVideo\n          canPlay={isActive}\n          className={buildClassName(styles.video, transitionClassNames)}\n          src={mediaData}\n          disablePictureInPicture\n          playsInline\n          muted\n          loop\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeaturePreviewVideo);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oyUTEj8I\",\"button\":\"EPfM7AgT\",\"button-content\":\"GysZk2mF\",\"buttonContent\":\"GysZk2mF\",\"back-button\":\"njYoMrKM\",\"backButton\":\"njYoMrKM\",\"white-back-button\":\"SB4pczOo\",\"whiteBackButton\":\"SB4pczOo\",\"content\":\"sJubG84j\",\"frame\":\"a7IoUtQG\",\"slide\":\"gubS9KP1\",\"limits\":\"U7ePgVBR\",\"stories\":\"J1M6fEdo\",\"limits-content\":\"n_rowVPI\",\"limitsContent\":\"n_rowVPI\",\"header\":\"mz2Hmd83\",\"no-header-border\":\"AgmNOqi7\",\"noHeaderBorder\":\"AgmNOqi7\",\"preview\":\"dIVBSdWi\",\"title\":\"iZLwcL8v\",\"description\":\"A7YHY8qF\",\"footer\":\"yN2611rA\",\"no-footer-border\":\"rCHMABcD\",\"noFooterBorder\":\"rCHMABcD\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { toggleExtraClass } from '../../../lib/teact/teact-dom';\n\nimport type {\n  ApiLimitTypeForPromo,\n  ApiPremiumPromo,\n  ApiPremiumSection,\n  ApiPremiumSubscriptionOption,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport { PREMIUM_BOTTOM_VIDEOS, PREMIUM_FEATURE_SECTIONS, PREMIUM_LIMITS_ORDER } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport SliderDots from '../../common/SliderDots';\nimport Button from '../../ui/Button';\nimport PremiumLimitPreview from './common/PremiumLimitPreview';\nimport PremiumFeaturePreviewStickers from './previews/PremiumFeaturePreviewStickers';\nimport PremiumFeaturePreviewStories from './previews/PremiumFeaturePreviewStories';\nimport PremiumFeaturePreviewVideo from './previews/PremiumFeaturePreviewVideo';\n\nimport styles from './PremiumFeatureModal.module.scss';\n\nexport const PREMIUM_FEATURE_TITLES: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimits',\n  infinite_reactions: 'PremiumPreviewReactions2',\n  premium_stickers: 'PremiumPreviewStickers',\n  animated_emoji: 'PremiumPreviewEmoji',\n  no_ads: 'PremiumPreviewNoAds',\n  voice_to_text: 'PremiumPreviewVoiceToText',\n  profile_badge: 'PremiumPreviewProfileBadge',\n  faster_download: 'PremiumPreviewDownloadSpeed',\n  more_upload: 'PremiumPreviewUploads',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagement',\n  animated_userpics: 'PremiumPreviewAnimatedProfiles',\n  emoji_status: 'PremiumPreviewEmojiStatus',\n  translations: 'PremiumPreviewTranslations',\n  stories: 'PremiumPreviewStories',\n  saved_tags: 'PremiumPreviewTags2',\n  last_seen: 'PremiumPreviewLastSeen',\n  message_privacy: 'PremiumPreviewMessagePrivacy',\n  effects: 'Premium.MessageEffects',\n};\n\nexport const PREMIUM_FEATURE_DESCRIPTIONS: Record<ApiPremiumSection, string> = {\n  double_limits: 'PremiumPreviewLimitsDescription',\n  infinite_reactions: 'PremiumPreviewReactions2Description',\n  premium_stickers: 'PremiumPreviewStickersDescription',\n  no_ads: 'PremiumPreviewNoAdsDescription',\n  animated_emoji: 'PremiumPreviewEmojiDescription',\n  voice_to_text: 'PremiumPreviewVoiceToTextDescription',\n  profile_badge: 'PremiumPreviewProfileBadgeDescription',\n  faster_download: 'PremiumPreviewDownloadSpeedDescription',\n  more_upload: 'PremiumPreviewUploadsDescription',\n  advanced_chat_management: 'PremiumPreviewAdvancedChatManagementDescription',\n  animated_userpics: 'PremiumPreviewAnimatedProfilesDescription',\n  emoji_status: 'PremiumPreviewEmojiStatusDescription',\n  translations: 'PremiumPreviewTranslationsDescription',\n  stories: 'PremiumPreviewStoriesDescription',\n  saved_tags: 'PremiumPreviewTagsDescription2',\n  last_seen: 'PremiumPreviewLastSeenDescription',\n  message_privacy: 'PremiumPreviewMessagePrivacyDescription',\n  effects: 'Premium.MessageEffectsInfo',\n};\n\nconst LIMITS_TITLES: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitTitle',\n  dialogFolderPinned: 'PinChatsLimitTitle',\n  channelsPublic: 'PublicLinksLimitTitle',\n  savedGifs: 'SavedGifsLimitTitle',\n  stickersFaved: 'FavoriteStickersLimitTitle',\n  aboutLength: 'BioLimitTitle',\n  captionLength: 'CaptionsLimitTitle',\n  dialogFilters: 'FoldersLimitTitle',\n  dialogFiltersChats: 'ChatPerFolderLimitTitle',\n  recommendedChannels: 'SimilarChannelsLimitTitle',\n  moreAccounts: 'ConnectedAccountsLimitTitle',\n};\n\nconst LIMITS_DESCRIPTIONS: Record<ApiLimitTypeForPromo, string> = {\n  channels: 'GroupsAndChannelsLimitSubtitle',\n  dialogFolderPinned: 'PinChatsLimitSubtitle',\n  channelsPublic: 'PublicLinksLimitSubtitle',\n  savedGifs: 'SavedGifsLimitSubtitle',\n  stickersFaved: 'FavoriteStickersLimitSubtitle',\n  aboutLength: 'BioLimitSubtitle',\n  captionLength: 'CaptionsLimitSubtitle',\n  dialogFilters: 'FoldersLimitSubtitle',\n  dialogFiltersChats: 'ChatPerFolderLimitSubtitle',\n  recommendedChannels: 'SimilarChannelsLimitSubtitle',\n  moreAccounts: 'ConnectedAccountsLimitSubtitle',\n};\n\nconst BORDER_THRESHOLD = 20;\n\ntype OwnProps = {\n  initialSection: ApiPremiumSection;\n  promo: ApiPremiumPromo;\n  isPremium?: boolean;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumPromoOrder?: ApiPremiumSection[];\n  subscriptionOption?: ApiPremiumSubscriptionOption;\n  onBack: VoidFunction;\n  onClickSubscribe: (startParam?: string) => void;\n};\n\nconst PremiumFeatureModal: FC<OwnProps> = ({\n  promo,\n  initialSection,\n  isPremium,\n  limits,\n  premiumPromoOrder,\n  subscriptionOption,\n  onBack,\n  onClickSubscribe,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const scrollContainerRef = useRef<HTMLDivElement>();\n  const [currentSlideIndex, setCurrentSlideIndex] = useState(PREMIUM_FEATURE_SECTIONS.indexOf(initialSection));\n  const [reverseAnimationSlideIndex, setReverseAnimationSlideIndex] = useState(0);\n  const [isScrolling, startScrolling, stopScrolling] = useFlag();\n\n  const [isScrolledToTop, setIsScrolledToTop] = useState(true);\n  const [isScrolledToBottom, setIsScrolledToBottom] = useState(false);\n\n  const prevInitialSection = usePreviousDeprecated(initialSection);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  const subscriptionButtonText = useMemo(() => {\n    if (!subscriptionOption) return undefined;\n\n    const { amount, months, currency } = subscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n\n    return isPremium\n      ? lang('OK')\n      : lang('SubscribeToPremium', { price: formatCurrency(lang, perMonthPrice, currency) }, { withNodes: true });\n  }, [isPremium, lang, subscriptionOption]);\n\n  const handleClick = useLastCallback(() => {\n    onClickSubscribe(initialSection);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const target = e.currentTarget;\n    const { clientWidth, scrollLeft: scrollLeftOriginal } = target;\n\n    const scrollLeft = Math.round(scrollLeftOriginal);\n\n    const left = scrollLeft % (clientWidth);\n    const progress = left / (clientWidth);\n\n    const reverseIndex = Math.ceil((scrollLeft + 1) / clientWidth);\n\n    setReverseAnimationSlideIndex(reverseIndex);\n\n    const prevElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex - 1}`);\n    const reverseElement = target.querySelector<HTMLDivElement>(`#premium_feature_preview_video_${reverseIndex}`);\n\n    requestMutation(() => {\n      target.style.setProperty('--scroll-progress', progress.toString());\n      target.style.setProperty('--abs-scroll-progress', Math.abs(progress).toString());\n\n      if (prevElement) toggleExtraClass(prevElement, 'reverse', false);\n      if (reverseElement) toggleExtraClass(reverseElement, 'reverse', true);\n    });\n\n    if (isScrolling) return;\n    const slide = Math.round(scrollLeft / clientWidth);\n    setCurrentSlideIndex(slide);\n  }\n\n  function handleLimitsScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, clientHeight, scrollHeight } = e.currentTarget;\n    setIsScrolledToTop(scrollTop <= BORDER_THRESHOLD);\n    setIsScrolledToBottom(scrollTop >= scrollHeight - clientHeight - BORDER_THRESHOLD);\n  }\n\n  useEffect(() => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer || (prevInitialSection === initialSection)) return;\n\n    const index = filteredSections.indexOf(initialSection);\n    setCurrentSlideIndex(index);\n    startScrolling();\n    animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 0)\n      .then(stopScrolling);\n  }, [currentSlideIndex, filteredSections, initialSection, prevInitialSection]);\n\n  const handleSelectSlide = useLastCallback(async (index: number) => {\n    const scrollContainer = scrollContainerRef.current;\n    if (!scrollContainer) return;\n\n    setCurrentSlideIndex(index);\n\n    startScrolling();\n    await animateHorizontalScroll(scrollContainer, scrollContainer.clientWidth * index, 800);\n    stopScrolling();\n  });\n\n  const currentSection = filteredSections[currentSlideIndex];\n  const hasHeaderBackdrop = currentSection !== 'double_limits' && currentSection !== 'stories';\n\n  return (\n    <div className={styles.root}>\n      <Button\n        round\n        size=\"smaller\"\n        className={buildClassName(styles.backButton, hasHeaderBackdrop && styles.whiteBackButton)}\n        color={hasHeaderBackdrop ? 'translucent-white' : 'translucent'}\n        onClick={onBack}\n        ariaLabel={oldLang('Back')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n\n      <div className={styles.preview} />\n\n      <div className={buildClassName(styles.content, 'no-scrollbar')} onScroll={handleScroll} ref={scrollContainerRef}>\n\n        {filteredSections.map((section, index) => {\n          if (section === 'double_limits') {\n            return (\n              <div className={buildClassName(styles.slide, styles.limits)}>\n                <h2 className={buildClassName(styles.header, isScrolledToTop && styles.noHeaderBorder)}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.double_limits)}\n                </h2>\n                <div className={buildClassName(styles.limitsContent, 'custom-scroll')} onScroll={handleLimitsScroll}>\n                  {PREMIUM_LIMITS_ORDER.map((limit, i) => {\n                    const defaultLimit = limits?.[limit][0].toString();\n                    const premiumLimit = limits?.[limit][1].toString();\n                    return (\n                      <PremiumLimitPreview\n                        title={oldLang(LIMITS_TITLES[limit])}\n                        description={oldLang(LIMITS_DESCRIPTIONS[limit], premiumLimit)}\n                        leftValue={defaultLimit}\n                        rightValue={premiumLimit}\n                        colorStepProgress={i / (PREMIUM_LIMITS_ORDER.length - 1)}\n                      />\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'premium_stickers') {\n            return (\n              <div className={styles.slide}>\n                <div className={styles.frame}>\n                  <PremiumFeaturePreviewStickers isActive={currentSlideIndex === index} />\n                </div>\n                <h1 className={styles.title}>\n                  {oldLang(PREMIUM_FEATURE_TITLES.premium_stickers)}\n                </h1>\n                <div className={styles.description}>\n                  {renderText(oldLang(PREMIUM_FEATURE_DESCRIPTIONS.premium_stickers), ['br'])}\n                </div>\n              </div>\n            );\n          }\n\n          if (section === 'stories') {\n            return (\n              <div className={buildClassName(styles.slide, styles.stories)}>\n                <PremiumFeaturePreviewStories />\n              </div>\n            );\n          }\n\n          const i = promo.videoSections.indexOf(section);\n          if (i === -1) return undefined;\n          return (\n            <div className={styles.slide}>\n              <div className={styles.frame}>\n                <PremiumFeaturePreviewVideo\n                  isActive={currentSlideIndex === index}\n                  videoId={promo.videos[i].id!}\n                  videoThumbnail={promo.videos[i].thumbnail!}\n                  isDown={PREMIUM_BOTTOM_VIDEOS.includes(section)}\n                  index={index}\n                  isReverseAnimation={index === reverseAnimationSlideIndex}\n                />\n              </div>\n              <h1 className={styles.title}>\n                {oldLang(PREMIUM_FEATURE_TITLES[promo.videoSections[i]])}\n              </h1>\n              <div className={styles.description}>\n                {renderText(oldLang(PREMIUM_FEATURE_DESCRIPTIONS[promo.videoSections[i]]), ['br'])}\n              </div>\n            </div>\n          );\n        })}\n\n      </div>\n\n      <div\n        className={buildClassName(\n          styles.footer,\n          (isScrolledToBottom || currentSlideIndex !== 0) && styles.noFooterBorder,\n        )}\n      >\n        <SliderDots\n          length={PREMIUM_FEATURE_SECTIONS.length}\n          active={currentSlideIndex}\n          onSelectSlide={handleSelectSlide}\n        />\n        {Boolean(subscriptionButtonText) && (\n          <Button\n            className={buildClassName(styles.button)}\n            isShiny={!isPremium}\n            withPremiumGradient={!isPremium}\n            onClick={isPremium ? onBack : handleClick}\n          >\n            {subscriptionButtonText}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(PremiumFeatureModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiPremiumGiftCodeOption, ApiPremiumSubscriptionOption } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport styles from './PremiumSubscriptionOption.module.scss';\n\ntype OwnProps = {\n  option: ApiPremiumSubscriptionOption | ApiPremiumGiftCodeOption;\n  isGiveaway?: boolean;\n  checked?: boolean;\n  fullMonthlyAmount?: number;\n  className?: string;\n  onChange: (month: number) => void;\n};\n\nconst PremiumSubscriptionOption: FC<OwnProps> = ({\n  option, checked, fullMonthlyAmount,\n  onChange, className, isGiveaway,\n}) => {\n  const oldLang = useOldLang();\n\n  const {\n    months, amount, currency,\n  } = option;\n  const users = 'users' in option ? option.users : undefined;\n  const perMonth = Math.floor(amount / months);\n  const isUserCountPlural = users ? users > 1 : undefined;\n\n  const discount = useMemo(() => {\n    return fullMonthlyAmount && fullMonthlyAmount > perMonth\n      ? Math.ceil(100 - perMonth / (fullMonthlyAmount / 100))\n      : undefined;\n  }, [fullMonthlyAmount, perMonth]);\n\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(months);\n    }\n  }, [months, onChange]);\n\n  return (\n    <label\n      className={buildClassName(\n        isGiveaway ? styles.giveawayWrapper : styles.wrapper,\n        (checked && !isGiveaway) && styles.active,\n        className,\n      )}\n      dir={oldLang.isRtl ? 'rtl' : undefined}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"subscription_option\"\n        value={months}\n        checked={checked}\n        onChange={handleChange}\n      />\n      <div className={styles.content}>\n        <div className={styles.month}>\n          {Boolean(discount) && (\n            <span\n              className={buildClassName(styles.giveawayDiscount, styles.discount)}\n              title={oldLang('GiftDiscount')}\n            >\n              {' '}\n              &minus;\n              {discount}\n              %\n            </span>\n          )}\n          {oldLang('Months', months)}\n        </div>\n        <div className={styles.perMonth}>\n          {(isGiveaway || isUserCountPlural) ? `${formatCurrencyAsString(amount, currency, oldLang.code)} x ${users!}`\n            : oldLang('PricePerMonth', formatCurrencyAsString(perMonth, currency, oldLang.code))}\n        </div>\n        <div className={styles.amount}>\n          {formatCurrencyAsString(amount, currency, oldLang.code)}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(PremiumSubscriptionOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"qZA6S2kc\",\"giveawayWrapper\":\"PkseWxFK\",\"active\":\"EJOQwnRj\",\"input\":\"WOEkhx6R\",\"content\":\"BHUCScsU\",\"month\":\"DfYCMUkL\",\"perMonth\":\"poxOXJ2o\",\"amount\":\"IGMrERf_\",\"discount\":\"uqDlP3Zt\",\"giveawayDiscount\":\"ublijP0j\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sfbpMFHM\",\"transition\":\"ELNkgPve\",\"button\":\"c1tMxuFH\",\"main\":\"ZpOIPrhp\",\"logo\":\"mlMezt6b\",\"status-emoji\":\"mQwvY9LA\",\"statusEmoji\":\"mQwvY9LA\",\"header-text\":\"y71v6ECL\",\"headerText\":\"y71v6ECL\",\"description\":\"cUcKXV3j\",\"list\":\"c3Ee2oSo\",\"no-button\":\"yWEHoJOL\",\"noButton\":\"yWEHoJOL\",\"header\":\"Bc_F0RKb\",\"hidden-header\":\"ltXo0Xi7\",\"hiddenHeader\":\"ltXo0Xi7\",\"close-button\":\"XyN3eWog\",\"closeButton\":\"XyN3eWog\",\"premium-header-text\":\"xysPdANX\",\"premiumHeaderText\":\"xysPdANX\",\"footer-text\":\"yKm9hKQP\",\"footerText\":\"yKm9hKQP\",\"primary-footer-text\":\"l1WlNpmu\",\"primaryFooterText\":\"l1WlNpmu\",\"footer\":\"nCnlO9UZ\",\"stickerSetText\":\"xw_GbDj7\",\"stickerSetLink\":\"FLzl2ng5\",\"stickerSetLinkIcon\":\"Y0jTcadE\",\"subscriptionOptions\":\"xZC_Oajr\",\"subscriptionOption\":\"gygsbDbE\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiPremiumPromo, ApiPremiumSection, ApiPremiumSubscriptionOption, ApiSticker, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\n\nimport { PREMIUM_FEATURE_SECTIONS, TME_LINK_PREFIX } from '../../../config';\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectIsCurrentUserPremium, selectStickerSet,\n  selectTabState, selectUser,\n} from '../../../global/selectors';\nimport { selectPremiumLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Transition from '../../ui/Transition';\nimport PremiumFeatureItem from './PremiumFeatureItem';\nimport PremiumFeatureModal, {\n  PREMIUM_FEATURE_DESCRIPTIONS,\n  PREMIUM_FEATURE_TITLES,\n} from './PremiumFeatureModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './PremiumMainModal.module.scss';\n\nimport PremiumAds from '../../../assets/premium/PremiumAds.svg';\nimport PremiumBadge from '../../../assets/premium/PremiumBadge.svg';\nimport PremiumChats from '../../../assets/premium/PremiumChats.svg';\nimport PremiumEffects from '../../../assets/premium/PremiumEffects.svg';\nimport PremiumEmoji from '../../../assets/premium/PremiumEmoji.svg';\nimport PremiumFile from '../../../assets/premium/PremiumFile.svg';\nimport PremiumLastSeen from '../../../assets/premium/PremiumLastSeen.svg';\nimport PremiumLimits from '../../../assets/premium/PremiumLimits.svg';\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\nimport PremiumMessagePrivacy from '../../../assets/premium/PremiumMessagePrivacy.svg';\nimport PremiumReactions from '../../../assets/premium/PremiumReactions.svg';\nimport PremiumSpeed from '../../../assets/premium/PremiumSpeed.svg';\nimport PremiumStatus from '../../../assets/premium/PremiumStatus.svg';\nimport PremiumStickers from '../../../assets/premium/PremiumStickers.svg';\nimport PremiumTags from '../../../assets/premium/PremiumTags.svg';\nimport PremiumTranslate from '../../../assets/premium/PremiumTranslate.svg';\nimport PremiumVideo from '../../../assets/premium/PremiumVideo.svg';\nimport PremiumVoice from '../../../assets/premium/PremiumVoice.svg';\n\nconst LIMIT_ACCOUNTS = 4;\nconst STATUS_EMOJI_SIZE = 8 * REM;\n\nconst PREMIUM_FEATURE_COLOR_ICONS: Record<ApiPremiumSection, string> = {\n  stories: PremiumStatus,\n  double_limits: PremiumLimits,\n  infinite_reactions: PremiumReactions,\n  premium_stickers: PremiumStickers,\n  animated_emoji: PremiumEmoji,\n  no_ads: PremiumAds,\n  voice_to_text: PremiumVoice,\n  profile_badge: PremiumBadge,\n  faster_download: PremiumSpeed,\n  more_upload: PremiumFile,\n  advanced_chat_management: PremiumChats,\n  animated_userpics: PremiumVideo,\n  emoji_status: PremiumStatus,\n  translations: PremiumTranslate,\n  saved_tags: PremiumTags,\n  last_seen: PremiumLastSeen,\n  message_privacy: PremiumMessagePrivacy,\n  effects: PremiumEffects,\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  promo?: ApiPremiumPromo;\n  fromUser?: ApiUser;\n  fromUserStatusEmoji?: ApiSticker;\n  fromUserStatusSet?: ApiStickerSet;\n  toUser?: ApiUser;\n  initialSection?: ApiPremiumSection;\n  isPremium?: boolean;\n  isSuccess?: boolean;\n  isGift?: boolean;\n  monthsAmount?: number;\n  limitChannels: number;\n  limitPins: number;\n  limitLinks: number;\n  limitFolders: number;\n  limits?: NonNullable<GlobalState['appConfig']>['limits'];\n  premiumSlug?: string;\n  premiumBotUsername?: string;\n  premiumPromoOrder?: ApiPremiumSection[];\n};\n\nconst PremiumMainModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  currentUserId,\n  fromUser,\n  fromUserStatusEmoji,\n  fromUserStatusSet,\n  promo,\n  initialSection,\n  isPremium,\n  limitChannels,\n  limitLinks,\n  limitFolders,\n  limitPins,\n  limits,\n  premiumSlug,\n  premiumBotUsername,\n  isSuccess,\n  isGift,\n  toUser,\n  monthsAmount,\n  premiumPromoOrder,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closePremiumModal, openInvoice, requestConfetti, openTelegramLink, loadStickers, openStickerSet,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [currentSection, setCurrentSection] = useState<ApiPremiumSection | undefined>(initialSection);\n  const [selectedSubscriptionOption, setSubscriptionOption] = useState<ApiPremiumSubscriptionOption>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      setHeaderHidden(true);\n      setCurrentSection(undefined);\n    }\n  }, [isOpen]);\n\n  const handleOpenSection = useLastCallback((section: ApiPremiumSection) => {\n    setCurrentSection(section);\n  });\n\n  const handleResetSection = useLastCallback(() => {\n    setCurrentSection(undefined);\n  });\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleClickWithStartParam = useLastCallback((startParam?: string) => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n\n    if (premiumSlug) {\n      openInvoice({\n        type: 'slug',\n        slug: premiumSlug,\n      });\n    } else if (premiumBotUsername) {\n      openTelegramLink({\n        url: `${TME_LINK_PREFIX}${premiumBotUsername}?start=${startParam || 'promo'}`,\n      });\n      closePremiumModal();\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (selectedSubscriptionOption) {\n      handleClickWithStartParam(String(selectedSubscriptionOption.months));\n    } else {\n      handleClickWithStartParam();\n    }\n  });\n\n  const handleChangeSubscriptionOption = useLastCallback((months: number) => {\n    const foundOption = promo?.options.find((option) => option.months === months);\n    setSubscriptionOption(foundOption);\n  });\n\n  const showConfetti = useLastCallback(() => {\n    const dialog = dialogRef.current;\n    if (!dialog) return;\n    if (isOpen) {\n      const {\n        top, left, width, height,\n      } = dialog.querySelector('.modal-content')!.getBoundingClientRect();\n      requestConfetti({\n        top,\n        left,\n        width,\n        height,\n        withStars: true,\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (isSuccess) {\n      showConfetti();\n    }\n  }, [isSuccess, showConfetti]);\n\n  useSyncEffect(([prevIsPremium]) => {\n    if (prevIsPremium === isPremium) return;\n\n    showConfetti();\n  }, [isPremium, showConfetti]);\n\n  const filteredSections = useMemo(() => {\n    if (!premiumPromoOrder) return PREMIUM_FEATURE_SECTIONS;\n    return premiumPromoOrder.filter((section) => PREMIUM_FEATURE_SECTIONS.includes(section));\n  }, [premiumPromoOrder]);\n\n  useEffect(() => {\n    if (!fromUserStatusEmoji || fromUserStatusSet) return;\n    loadStickers({\n      stickerSetInfo: fromUserStatusEmoji.stickerSetInfo,\n    });\n  }, [loadStickers, fromUserStatusEmoji, fromUserStatusSet]);\n\n  useEffect(() => {\n    const [defaultOption] = promo?.options ?? [];\n    setSubscriptionOption(defaultOption);\n  }, [promo]);\n\n  const handleOpenStatusSet = useLastCallback(() => {\n    if (!fromUserStatusSet) return;\n\n    openStickerSet({\n      stickerSetInfo: fromUserStatusSet,\n    });\n  });\n\n  const fullMonthlyAmount = useMemo(() => {\n    const monthOption = promo?.options.find((option) => option.months === 1);\n    if (!monthOption) {\n      return undefined;\n    }\n    return Number(monthOption.amount);\n  }, [promo]);\n\n  const subscribeButtonText = useMemo(() => {\n    if (!selectedSubscriptionOption) {\n      return undefined;\n    }\n    const { amount, months, currency } = selectedSubscriptionOption;\n    const perMonthPrice = Math.floor(amount / months);\n    return formatCurrency(\n      lang,\n      perMonthPrice,\n      currency,\n    );\n  }, [selectedSubscriptionOption, lang]);\n\n  if (!promo || (fromUserStatusEmoji && !fromUserStatusSet)) return undefined;\n\n  function getHeaderText() {\n    if (isGift) {\n      return renderText(\n        fromUser?.id === currentUserId\n          ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogTitle', [getUserFullName(toUser), monthsAmount])\n          : oldLang('TelegramPremiumUserGiftedPremiumDialogTitle', [getUserFullName(fromUser), monthsAmount]),\n        ['simple_markdown', 'emoji'],\n      );\n    }\n\n    if (fromUserStatusSet && fromUser) {\n      const template = oldLang('lng_premium_emoji_status_title').replace('{user}', getUserFullName(fromUser)!);\n      const [first, second] = template.split('{link}');\n\n      const emoji = fromUserStatusSet.thumbCustomEmojiId ? (\n        <CustomEmoji className={styles.stickerSetLinkIcon} documentId={fromUserStatusSet.thumbCustomEmojiId} />\n      ) : undefined;\n      const link = (\n        <span className={styles.stickerSetLink} onClick={handleOpenStatusSet}>\n          {emoji}\n          {renderText(fromUserStatusSet.title)}\n        </span>\n      );\n      return [renderText(first), link, renderText(second)];\n    }\n\n    return renderText(\n      fromUser\n        ? oldLang('TelegramPremiumUserDialogTitle', getUserFullName(fromUser))\n        : oldLang(isPremium ? 'TelegramPremiumSubscribedTitle' : 'TelegramPremium'),\n      ['simple_markdown', 'emoji'],\n    );\n  }\n\n  function getHeaderDescription() {\n    if (isGift) {\n      return fromUser?.id === currentUserId\n        ? oldLang('TelegramPremiumUserGiftedPremiumOutboundDialogSubtitle', getUserFullName(toUser))\n        : oldLang('TelegramPremiumUserGiftedPremiumDialogSubtitle');\n    }\n\n    if (fromUserStatusSet) {\n      return oldLang('TelegramPremiumUserStatusDialogSubtitle');\n    }\n\n    return fromUser\n      ? oldLang('TelegramPremiumUserDialogSubtitle')\n      : oldLang(isPremium ? 'TelegramPremiumSubscribedSubtitle' : 'TelegramPremiumSubtitle');\n  }\n\n  function renderFooterText() {\n    if (!promo || (isGift && fromUser?.id === currentUserId)) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.footerText} dir={oldLang.isRtl ? 'rtl' : undefined}>\n        {renderTextWithEntities({\n          text: promo.statusText,\n          entities: promo.statusEntities,\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.subscriptionOptions}>\n        {promo?.options\n          .map((option) => (\n            <PremiumSubscriptionOption\n              className={styles.subscriptionOption}\n              key={option.amount}\n              option={option}\n              onChange={handleChangeSubscriptionOption}\n              fullMonthlyAmount={fullMonthlyAmount}\n              checked={selectedSubscriptionOption?.months === option.months}\n            />\n          ))}\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={closePremiumModal}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n    >\n      <Transition name=\"slide\" activeKey={currentSection ? 1 : 0} className={styles.transition}>\n        {!currentSection ? (\n          <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n            <Button\n              round\n              size=\"smaller\"\n              className={styles.closeButton}\n              color=\"translucent\"\n\n              onClick={() => closePremiumModal()}\n              ariaLabel={oldLang('Close')}\n            >\n              <Icon name=\"close\" />\n            </Button>\n            {(fromUserStatusEmoji && !isGift) ? (\n              <CustomEmoji\n                className={styles.statusEmoji}\n                onClick={handleOpenStatusSet}\n                documentId={fromUserStatusEmoji.id}\n                isBig\n                size={STATUS_EMOJI_SIZE}\n              />\n            ) : (\n              <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n            )}\n            <h2 className={buildClassName(styles.headerText, fromUserStatusSet && styles.stickerSetText)}>\n              {getHeaderText()}\n            </h2>\n            <div className={styles.description}>\n              {renderText(getHeaderDescription(), ['simple_markdown', 'emoji'])}\n            </div>\n            {!isPremium && !isGift && renderSubscriptionOptions()}\n            <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n              <h2 className={styles.premiumHeaderText}>\n                {oldLang('TelegramPremium')}\n              </h2>\n            </div>\n            <div className={buildClassName(styles.list, isPremium && styles.noButton)}>\n              {filteredSections.map((section, index) => {\n                return (\n                  <PremiumFeatureItem\n                    key={section}\n                    title={oldLang(PREMIUM_FEATURE_TITLES[section])}\n                    text={section === 'double_limits'\n                      ? oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section],\n                        [limitChannels, limitFolders, limitPins, limitLinks, LIMIT_ACCOUNTS])\n                      : oldLang(PREMIUM_FEATURE_DESCRIPTIONS[section])}\n                    icon={PREMIUM_FEATURE_COLOR_ICONS[section]}\n                    index={index}\n                    count={filteredSections.length}\n                    section={section}\n                    onClick={handleOpenSection}\n                  />\n                );\n              })}\n              <div\n                className={buildClassName(styles.footerText, styles.primaryFooterText)}\n                dir={oldLang.isRtl ? 'rtl' : undefined}\n              >\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription'), ['simple_markdown'])}\n                </p>\n                <p>\n                  {renderText(oldLang('AboutPremiumDescription2'), ['simple_markdown'])}\n                </p>\n              </div>\n              {renderFooterText()}\n            </div>\n            {!isPremium && selectedSubscriptionOption && (\n              <div className={styles.footer}>\n                <Button className={styles.button} isShiny withPremiumGradient onClick={handleClick}>\n                  {oldLang('SubscribeToPremium', subscribeButtonText)}\n                </Button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <PremiumFeatureModal\n            initialSection={currentSection}\n            onBack={handleResetSection}\n            promo={promo}\n            onClickSubscribe={handleClickWithStartParam}\n            isPremium={isPremium}\n            limits={limits}\n            premiumPromoOrder={premiumPromoOrder}\n            subscriptionOption={selectedSubscriptionOption}\n          />\n        )}\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    premiumModal,\n  } = selectTabState(global);\n\n  const fromUser = premiumModal?.fromUserId ? selectUser(global, premiumModal.fromUserId) : undefined;\n  const fromUserStatusEmoji = fromUser?.emojiStatus ? global.customEmojis.byId[fromUser.emojiStatus.documentId]\n    : undefined;\n  const fromUserStatusSet = fromUserStatusEmoji ? selectStickerSet(global, fromUserStatusEmoji.stickerSetInfo)\n    : undefined;\n\n  return {\n    currentUserId: global.currentUserId,\n    promo: premiumModal?.promo,\n    isSuccess: premiumModal?.isSuccess,\n    isGift: premiumModal?.isGift,\n    monthsAmount: premiumModal?.monthsAmount,\n    fromUser,\n    fromUserStatusEmoji,\n    fromUserStatusSet,\n    toUser: premiumModal?.toUserId ? selectUser(global, premiumModal.toUserId) : undefined,\n    initialSection: premiumModal?.initialSection,\n    isPremium: selectIsCurrentUserPremium(global),\n    limitChannels: selectPremiumLimit(global, 'channels'),\n    limitFolders: selectPremiumLimit(global, 'dialogFilters'),\n    limitPins: selectPremiumLimit(global, 'dialogFolderPinned'),\n    limitLinks: selectPremiumLimit(global, 'channelsPublic'),\n    limits: global.appConfig?.limits,\n    premiumSlug: global.appConfig?.premiumInvoiceSlug,\n    premiumBotUsername: global.appConfig?.premiumBotUsername,\n    premiumPromoOrder: global.appConfig?.premiumPromoOrder,\n  };\n})(PremiumMainModal));\n","import type { TeactNode } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport Loading from '../../ui/Loading';\nimport Radio from '../../ui/Radio';\nimport Icon from '../icons/Icon';\nimport PickerItem from './PickerItem';\n\nimport styles from './PickerStyles.module.scss';\n\nexport type ItemPickerOption = {\n  label: TeactNode;\n  subLabel?: string;\n  disabled?: boolean;\n  isLoading?: boolean;\n  value: string;\n};\n\ntype SingleModeProps = {\n  allowMultiple?: false;\n  itemInputType?: 'radio';\n  selectedValue?: string;\n  selectedValues?: never; // Help TS to throw an error if this is passed\n  onSelectedValueChange?: (value: string) => void;\n};\n\ntype MultipleModeProps = {\n  allowMultiple: true;\n  itemInputType: 'checkbox';\n  selectedValue?: never;\n  selectedValues: string[];\n  lockedSelectedValues?: string[];\n  lockedUnselectedValues?: string[];\n  onSelectedValuesChange?: (values: string[]) => void;\n};\n\ntype OwnProps = {\n  className?: string;\n  isSearchable?: boolean;\n  searchInputId?: string;\n  items: ItemPickerOption[];\n  itemClassName?: string;\n  filterValue?: string;\n  filterPlaceholder?: string;\n  notFoundText?: string;\n  isLoading?: boolean;\n  noScrollRestore?: boolean;\n  isViewOnly?: boolean;\n  withDefaultPadding?: boolean;\n  forceRenderAllItems?: boolean;\n  onFilterChange?: (value: string) => void;\n  onDisabledClick?: (value: string, isSelected: boolean) => void;\n  onLoadMore?: () => void;\n} & (SingleModeProps | MultipleModeProps);\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst ITEM_CLASS_NAME = 'ItemPickerItem';\n\nconst ItemPicker = ({\n  className,\n  isSearchable,\n  searchInputId,\n  items,\n  filterValue,\n  notFoundText,\n  isLoading,\n  noScrollRestore,\n  filterPlaceholder,\n  isViewOnly,\n  itemInputType,\n  itemClassName,\n  withDefaultPadding,\n  forceRenderAllItems,\n  onFilterChange,\n  onDisabledClick,\n  onLoadMore,\n  ...optionalProps\n}: OwnProps) => {\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n\n  const allowMultiple = optionalProps.allowMultiple;\n  const lockedSelectedValues = allowMultiple ? optionalProps.lockedSelectedValues : undefined;\n  const lockedUnselectedValues = allowMultiple ? optionalProps.lockedUnselectedValues : undefined;\n\n  useEffect(() => {\n    if (!isSearchable) return undefined;\n    const timeoutId = window.setTimeout(() => {\n      requestMeasure(() => {\n        inputRef.current?.focus();\n      });\n    }, FOCUS_DELAY_MS);\n\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [isSearchable]);\n\n  const selectedValues = useMemo(() => {\n    if (allowMultiple) {\n      return optionalProps.selectedValues;\n    }\n\n    return optionalProps.selectedValue ? [optionalProps.selectedValue] : MEMO_EMPTY_ARRAY;\n  }, [allowMultiple, optionalProps.selectedValue, optionalProps.selectedValues]);\n\n  const lockedSelectedValuesSet = useMemo(() => new Set(lockedSelectedValues), [lockedSelectedValues]);\n  const lockedUnselectedValuesSet = useMemo(() => new Set(lockedUnselectedValues), [lockedUnselectedValues]);\n\n  const sortedItemValuesList = useMemo(() => {\n    if (filterValue) {\n      return items.map((item) => item.value);\n    }\n\n    const lockedSelectedBucket: ItemPickerOption[] = [];\n    const unlockedBucket: ItemPickerOption[] = [];\n    const lockedUnselectableBucket: ItemPickerOption[] = [];\n\n    items.forEach((item) => {\n      if (lockedSelectedValuesSet.has(item.value)) {\n        lockedSelectedBucket.push(item);\n      } else if (lockedUnselectedValuesSet.has(item.value)) {\n        lockedUnselectableBucket.push(item);\n      } else {\n        unlockedBucket.push(item);\n      }\n    });\n\n    return lockedSelectedBucket.concat(unlockedBucket, lockedUnselectableBucket).map((item) => item.value);\n  }, [filterValue, items, lockedSelectedValuesSet, lockedUnselectedValuesSet]);\n\n  const handleItemClick = useLastCallback((value: string) => {\n    if (allowMultiple) {\n      const newSelectedValues = selectedValues.slice();\n      const index = newSelectedValues.indexOf(value);\n      if (index >= 0) {\n        newSelectedValues.splice(index, 1);\n      } else {\n        newSelectedValues.push(value);\n      }\n\n      optionalProps.onSelectedValuesChange?.(newSelectedValues);\n      return;\n    }\n\n    optionalProps.onSelectedValueChange?.(value);\n  });\n\n  const [viewportValuesList, getMore] = useInfiniteScroll(\n    onLoadMore, sortedItemValuesList, Boolean(forceRenderAllItems || filterValue),\n  );\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange?.(value);\n  });\n\n  const renderItem = useCallback((value: string) => {\n    const item = items.find((itemOption) => itemOption.value === value);\n    if (!item) return undefined;\n\n    const { label, subLabel, isLoading: isItemLoading } = item;\n    const isAlwaysUnselected = lockedUnselectedValuesSet.has(value);\n    const isAlwaysSelected = lockedSelectedValuesSet.has(value);\n    const isLocked = isAlwaysUnselected || isAlwaysSelected;\n    const isChecked = selectedValues.includes(value);\n\n    function getInputElement() {\n      if (isLocked) return <Icon name=\"lock-badge\" />;\n      if (itemInputType === 'radio') {\n        return <Radio checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      if (itemInputType === 'checkbox') {\n        return <Checkbox checked={isChecked} disabled={isLocked} isLoading={isItemLoading} onlyInput />;\n      }\n      return undefined;\n    }\n\n    return (\n      <PickerItem\n        key={value}\n        className={buildClassName(ITEM_CLASS_NAME, itemClassName)}\n        title={label}\n        subtitle={subLabel}\n        disabled={isLocked}\n        inactive={isViewOnly}\n        ripple\n        inputElement={getInputElement()}\n\n        onClick={() => handleItemClick(value)}\n\n        onDisabledClick={onDisabledClick && (() => onDisabledClick(value, isAlwaysSelected))}\n      />\n    );\n  }, [\n    items, lockedUnselectedValuesSet, lockedSelectedValuesSet, selectedValues, isViewOnly, onDisabledClick,\n    itemInputType, itemClassName,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.container, className)}>\n      {isSearchable && (\n        <div className={buildClassName(styles.header, 'custom-scroll')} dir={lang.isRtl ? 'rtl' : undefined}>\n          <InputText\n            id={searchInputId}\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={filterPlaceholder || lang('Search')}\n          />\n        </div>\n      )}\n\n      {viewportValuesList?.length ? (\n        <InfiniteScroll\n          className={buildClassName(styles.pickerList, withDefaultPadding && styles.padded, 'custom-scroll')}\n          items={viewportValuesList}\n          itemSelector={`.${ITEM_CLASS_NAME}`}\n          onLoadMore={getMore}\n          noScrollRestore={noScrollRestore}\n        >\n          {viewportValuesList.map((value) => renderItem(value))}\n        </InfiniteScroll>\n      ) : !isLoading && viewportValuesList && !viewportValuesList.length ? (\n        <p className={styles.noResults}>{notFoundText || lang('SearchEmptyViewTitle')}</p>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ItemPicker);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wzzA3MFh\",\"pickerSelector\":\"xhujrq9i\",\"pickerTitle\":\"YuRK4e7S\",\"picker\":\"YF9nLkCK\",\"footer\":\"ATCZ2Q5G\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport ItemPicker from './pickers/ItemPicker';\n\nimport styles from './CountryPickerModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (value: string[]) => void;\n  countryList: ApiCountry[];\n  selectionLimit?: number | undefined;\n};\n\nconst CountryPickerModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onSubmit,\n  countryList,\n  selectionLimit,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[]>([]);\n  const prevSelectedCountryIds = usePreviousDeprecated(selectedCountryIds);\n  const noPickerScrollRestore = prevSelectedCountryIds === selectedCountryIds;\n\n  const displayedIds = useMemo(() => {\n    if (!countryList) {\n      return [];\n    }\n\n    return countryList.filter((country) => !country.isHidden && country.iso2 !== 'FT')\n      .map(({\n        iso2, defaultName,\n      }) => ({\n        value: iso2,\n        label: defaultName,\n      }));\n  }, [countryList]);\n\n  const handleSelectedIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (selectionLimit && newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningCountries', selectionLimit),\n      });\n      return;\n    }\n    setSelectedCountryIds(newSelectedIds);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    onSubmit(selectedCountryIds);\n    onClose();\n  });\n\n  return (\n    <Modal\n      className={styles.root}\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={handleSubmit}\n    >\n      <div className={styles.container}>\n        <div className={styles.pickerSelector}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <Icon name=\"close\" />\n          </Button>\n\n          <h4 className={styles.pickerTitle}>\n            {lang('BoostingSelectCountry')}\n          </h4>\n        </div>\n      </div>\n\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedIds}\n          selectedValues={selectedCountryIds}\n          onSelectedValuesChange={handleSelectedIdsChange}\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <div className={styles.footer}>\n        <Button\n          size=\"smaller\"\n          onClick={handleSubmit}\n        >\n          {lang('SelectCountries.OK')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(CountryPickerModal);\n","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport {\n  isChatChannel, isChatPublic, isChatSuperGroup,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\nconst GiveawayChannelPickerModal = ({\n  isOpen,\n  giveawayChatId,\n  selectionLimit,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [pendingChannelId, setPendingChannelId] = useState<string | undefined>(undefined);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const channelIds = useMemo(() => {\n    const global = getGlobal();\n    const chatsById = global.chats.byId;\n    const { active, archived } = global.chats.listIds;\n    const ids = (active || []).concat(archived || []);\n\n    return unique(ids).map((id) => chatsById[id])\n      .filter((chat) => (\n        chat && (\n          isChatChannel(chat) || isChatSuperGroup(chat)\n        ) && chat.id !== giveawayChatId\n      )).map((chat) => chat.id);\n  }, [giveawayChatId]);\n\n  const displayedChannelIds = useMemo(() => {\n    const foundChannelIds = channelIds ? filterPeersByQuery({ ids: channelIds, query: searchQuery, type: 'chat' }) : [];\n\n    return sortChatIds(foundChannelIds,\n      false,\n      selectedIds);\n  }, [channelIds, searchQuery, selectedIds]);\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    const chatsById = getGlobal().chats.byId;\n    const newlyAddedIds = newSelectedIds.filter((id) => !selectedIds.includes(id));\n    const privateLinkChannelId = newlyAddedIds.find((id) => {\n      const chat = chatsById[id];\n      return chat && !isChatPublic(chat);\n    });\n\n    if (selectedIds?.length >= selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningChannelsPlural', selectionLimit),\n      });\n      return;\n    }\n\n    if (privateLinkChannelId) {\n      setPendingChannelId(privateLinkChannelId);\n      openConfirmModal();\n    } else {\n      setSelectedIds(newSelectedIds);\n    }\n  });\n\n  const confirmPrivateLinkChannelSelection = useLastCallback(() => {\n    if (pendingChannelId) {\n      setSelectedIds(unique([...selectedIds, pendingChannelId]));\n    }\n    closeConfirmModal();\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('RequestPeer.ChooseChannelTitle')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedChannelIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedChannelIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n      <ConfirmDialog\n        title={lang('BoostingGiveawayPrivateChannel')}\n        text={lang('BoostingGiveawayPrivateChannelWarning')}\n        confirmLabel={lang('Add')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmPrivateLinkChannelSelection}\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(GiveawayChannelPickerModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './GiveawayTypeOption.module.scss';\n\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\n\ntype OwnProps = {\n  option: ApiGiveawayType;\n  name: string;\n  text: string;\n  img: string;\n  checked?: boolean;\n  isLink: boolean;\n  className?: string;\n  onChange: (value: ApiGiveawayType) => void;\n  onClickAction?: () => void;\n  userNames?: string;\n  selectedMemberIds?: string[];\n};\n\nconst GiveawayTypeOption: FC<OwnProps> = ({\n  option, checked,\n  name, text, img,\n  isLink, onChange, onClickAction, className,\n  userNames, selectedMemberIds,\n}) => {\n  const lang = useOldLang();\n\n  let displayText: string | undefined = lang(text);\n  if (isLink && selectedMemberIds?.length) {\n    displayText = selectedMemberIds.length > 2 ? selectedMemberIds.length.toString() : userNames;\n  }\n\n  const handleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.checked) {\n      onChange(option);\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    onClickAction?.();\n  });\n\n  return (\n    <label\n      className={buildClassName(styles.wrapper, className)}\n      dir={lang.isRtl ? 'rtl' : undefined}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <input\n        className={styles.input}\n        type=\"radio\"\n        name=\"giveaway_option\"\n        value={option}\n        checked={checked}\n        onChange={handleChange}\n        onClick={(e) => e.stopPropagation()}\n      />\n      <div className={styles.content}>\n        <img className={styles.optionImg} src={img} alt=\"\" draggable={false} />\n        <div className={styles.giveaway}>\n          <h3 className={styles.title}>\n            {lang(name)}\n          </h3>\n          {isLink ? (\n            <div className={styles.link} onClick={handleClick}>\n              <span>{displayText}</span>\n              <Icon name=\"next\" />\n            </div>\n          ) : (\n            <span className={styles.contentText}>{displayText}</span>\n          )}\n        </div>\n      </div>\n    </label>\n  );\n};\n\nexport default memo(GiveawayTypeOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"w3OGYFKn\",\"input\":\"xy4AclZa\",\"content\":\"TTgSI7Xh\",\"notChecked\":\"JDcXsByU\",\"giveaway\":\"sEt7TF59\",\"title\":\"u4NzVBBi\",\"link\":\"y7XfPOoG\",\"optionImg\":\"lGhZJbMF\",\"contentText\":\"kt2ZKZ6j\"};","import {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember } from '../../../api/types';\n\nimport {\n  isUserBot,\n  sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport PickerModal from '../../common/pickers/PickerModal';\n\ntype OwnProps = {\n  isOpen?: boolean;\n\n  giveawayChatId?: string;\n  selectionLimit: number;\n  initialSelectedIds: string[];\n  onSelectedIdsConfirmed: (newSelectedIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst GiveawayUserPickerModal = ({\n  isOpen,\n  selectionLimit,\n  members,\n  adminMembersById,\n  initialSelectedIds,\n  onSelectedIdsConfirmed,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [selectedIds, setSelectedIds] = useState<string[]>(initialSelectedIds);\n\n  useEffect(() => {\n    setSelectedIds(initialSelectedIds);\n  }, [initialSelectedIds]);\n\n  const memberIds = useMemo(() => {\n    const global = getGlobal();\n    const { byId, statusesById } = global.users;\n    if (!members?.length) {\n      return [];\n    }\n\n    const adminIdsSet = adminMembersById && new Set(Object.keys(adminMembersById));\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      byId,\n      statusesById,\n    );\n\n    return adminIdsSet ? userIds.filter((userId) => !adminIdsSet.has(userId)) : userIds;\n  }, [adminMembersById, members]);\n\n  const displayedMemberIds = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    const filteredUserIds = memberIds\n      ? filterPeersByQuery({ ids: memberIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(unique(filteredUserIds).filter((userId) => {\n      const user = usersById[userId];\n      if (!user) {\n        return true;\n      }\n\n      return !isUserBot(user);\n    }));\n  }, [memberIds, searchQuery]);\n\n  const handleSelectedMemberIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    if (newSelectedIds.length > selectionLimit) {\n      showNotification({\n        message: lang('BoostingSelectUpToWarningUsers', selectionLimit),\n      });\n      return;\n    }\n    setSelectedIds(newSelectedIds);\n  });\n\n  const handleModalConfirm = useLastCallback(() => {\n    onSelectedIdsConfirmed(selectedIds);\n    onClose();\n  });\n\n  return (\n    <PickerModal\n      isOpen={isOpen}\n      onClose={onClose}\n      title={lang('BoostingAwardSpecificUsers')}\n      hasCloseButton\n      shouldAdaptToSearch\n      withFixedHeight\n      confirmButtonText={lang('Save')}\n      onConfirm={handleModalConfirm}\n      onEnter={handleModalConfirm}\n    >\n      <PeerPicker\n        itemIds={displayedMemberIds}\n        selectedIds={selectedIds}\n        filterValue={searchQuery}\n        filterPlaceholder={lang('Search')}\n        onSelectedIdsChange={handleSelectedMemberIdsChange}\n        onFilterChange={setSearchQuery}\n        isSearchable\n        withDefaultPadding\n        withStatus\n        allowMultiple\n        itemInputType=\"checkbox\"\n      />\n    </PickerModal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { giveawayChatId }): StateProps => {\n  const chatFullInfo = giveawayChatId ? selectChatFullInfo(global, giveawayChatId) : undefined;\n  if (!chatFullInfo) {\n    return {};\n  }\n\n  return {\n    members: chatFullInfo.members,\n    adminMembersById: chatFullInfo.adminMembersById,\n  };\n})(GiveawayUserPickerModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"P0kLOw15\",\"button\":\"ILuhBsJG\",\"main\":\"SqiN63Ef\",\"logo\":\"Me2hCsMs\",\"header-text\":\"UVDnB0Wq\",\"headerText\":\"UVDnB0Wq\",\"description\":\"v5yGzV6v\",\"header\":\"U6XNIToQ\",\"hidden-header\":\"tDZc21ZC\",\"hiddenHeader\":\"tDZc21ZC\",\"close-button\":\"OX6_HqAd\",\"closeButton\":\"OX6_HqAd\",\"premium-header-text\":\"v6hiGpEn\",\"premiumHeaderText\":\"v6hiGpEn\",\"primary-footer-text\":\"YGbiSd3e\",\"primaryFooterText\":\"YGbiSd3e\",\"section\":\"rZRDMqUL\",\"types\":\"sQ5PkKEs\",\"footer\":\"hD_AEzjd\",\"options\":\"JjDLNrKG\",\"giveawayTitle\":\"p5Hn4Q6E\",\"subscription\":\"rniPcuiP\",\"starSubscription\":\"bzRAETfR\",\"subscriptionOption\":\"ggZrgZnv\",\"status\":\"q1y2qUTn\",\"info\":\"IsT38nlq\",\"titleInfo\":\"nmsfBLut\",\"month\":\"TsGuei3B\",\"quantity\":\"G9H3tm6D\",\"floatingBadge\":\"xKl2UeV8\",\"floatingBadgeColor\":\"HLx3wTBD\",\"floatingBadgeButtonColor\":\"JLH0MExt\",\"floatingBadgeIcon\":\"Ftr7zf2v\",\"floatingBadgeValue\":\"Ce0Ob2tg\",\"subscriptionFooter\":\"rDFQAfTt\",\"premiumFeatures\":\"eNQ_nrKr\",\"dateButton\":\"GeKqKRgP\",\"title\":\"LZ3vPzak\",\"checkboxSection\":\"Z9QJQ6IS\",\"prizesSection\":\"eQVP0Nx8\",\"prizesInput\":\"qMYNwiUZ\",\"subLabelClassName\":\"txXJxVFu\",\"prepaidImg\":\"ldn4mh2T\",\"addButton\":\"sOXvh85b\",\"addChannel\":\"aGbyR60s\",\"removeChannel\":\"UZdErfVI\",\"starOptions\":\"cLhNkYPB\",\"transition\":\"vEI2Wewt\"};","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiCountry,\n  ApiPremiumGiftCodeOption,\n  ApiPrepaidGiveaway,\n  ApiPrepaidStarsGiveaway,\n  ApiStarGiveawayOption,\n  ApiTypePrepaidGiveaway,\n  ApiUser,\n} from '../../../api/types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n  GIVEAWAY_MAX_ADDITIONAL_CHANNELS,\n  GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  GIVEAWAY_MAX_ADDITIONAL_USERS,\n  STARS_CURRENCY_CODE,\n} from '../../../config';\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { unique } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport CountryPickerModal from '../../common/CountryPickerModal';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport StarTopupOptionList from '../../modals/stars/StarTopupOptionList';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSliderWithMarks from '../../ui/RangeSliderWithMarks';\nimport Switcher from '../../ui/Switcher';\nimport GiveawayChannelPickerModal from './GiveawayChannelPickerModal';\nimport GiveawayTypeOption from './GiveawayTypeOption';\nimport GiveawayUserPickerModal from './GiveawayUserPickerModal';\nimport PremiumSubscriptionOption from './PremiumSubscriptionOption';\n\nimport styles from './GiveawayModal.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  userIds?: string[];\n};\n\ntype StateProps = {\n  chatId?: string;\n  gifts?: ApiPremiumGiftCodeOption[];\n  isOpen?: boolean;\n  fromUser?: ApiUser;\n  selectedMemberList?: string[] | undefined;\n  selectedChannelList?: string[] | undefined;\n  giveawayBoostPerPremiumLimit?: number;\n  userSelectionLimit?: number;\n  countryList: ApiCountry[];\n  prepaidGiveaway?: ApiTypePrepaidGiveaway;\n  countrySelectionLimit: number | undefined;\n  isChannel?: boolean;\n  isStarsGiftEnabled?: boolean;\n  starsGiftOptions?: ApiStarGiveawayOption[] | undefined;\n};\n\ntype GiveawayAction = 'createPremiumGiveaway' | 'createStarsGiveaway';\ntype ApiGiveawayType = 'premium_giveaway' | 'stars_giveaway';\ntype SubscribersType = 'all' | 'new';\n\ninterface TypeOption {\n  name: string;\n  text: string;\n  value: ApiGiveawayType;\n  img: string;\n  actions?: GiveawayAction;\n  isLink: boolean;\n  onClickAction?: () => void;\n}\n\nconst DEFAULT_CUSTOM_EXPIRE_DATE = 86400 * 3 * 1000; // 3 days\nconst MAX_ADDITIONAL_CHANNELS = 9;\nconst DEFAULT_BOOST_COUNT = 5;\n\nconst GIVEAWAY_IMG_LIST: Partial<Record<number, string>> = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst GiveawayModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  gifts,\n  isOpen,\n  isChannel,\n  selectedMemberList,\n  selectedChannelList,\n  giveawayBoostPerPremiumLimit = GIVEAWAY_BOOST_PER_PREMIUM,\n  countryList,\n  prepaidGiveaway,\n  countrySelectionLimit = GIVEAWAY_MAX_ADDITIONAL_COUNTRIES,\n  userSelectionLimit = GIVEAWAY_MAX_ADDITIONAL_USERS,\n  isStarsGiftEnabled,\n  starsGiftOptions,\n}) => {\n  const dialogRef = useRef<HTMLDivElement>();\n  const {\n    closeGiveawayModal, openInvoice, openPremiumModal,\n    launchPrepaidGiveaway, launchPrepaidStarsGiveaway,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isCountryPickerModalOpen, openCountryPickerModal, closeCountryPickerModal] = useFlag();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const [isUserPickerModalOpen, openUserPickerModal, closeUserPickerModal] = useFlag();\n  const [isChannelPickerModalOpen, openChannelPickerModal, closeChannelPickerModal] = useFlag();\n\n  const TYPE_OPTIONS: TypeOption[] = [{\n    name: 'Premium.Title',\n    text: 'BoostingWinnersRandomly',\n    value: 'premium_giveaway',\n    img: GiftBlueRound,\n    actions: 'createPremiumGiveaway',\n    isLink: true,\n    onClickAction: () => {\n      openUserPickerModal();\n    },\n  }];\n\n  if (isStarsGiftEnabled) {\n    TYPE_OPTIONS.push({\n      name: 'TelegramStars',\n      text: 'BoostingWinnersRandomly',\n      value: 'stars_giveaway',\n      img: GiftStar,\n      actions: 'createStarsGiveaway',\n      isLink: false,\n    });\n  }\n\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [isHeaderHidden, setHeaderHidden] = useState(true);\n  const [selectedRandomUserCount, setSelectedRandomUserCount] = useState<number>(DEFAULT_BOOST_COUNT);\n  const [selectedGiveawayOption, setGiveawayOption] = useState<ApiGiveawayType>(TYPE_OPTIONS[0].value);\n  const [selectedStarOption, setSelectedStarOption] = useState<ApiStarGiveawayOption | undefined>();\n  const [selectedSubscriberOption, setSelectedSubscriberOption] = useState<SubscribersType>('all');\n  const [selectedMonthOption, setSelectedMonthOption] = useState<number | undefined>();\n  const [selectedUserIds, setSelectedUserIds] = useState<string[]>([]);\n  const [selectedChannelIds, setSelectedChannelIds] = useState<string[]>([]);\n  const [selectedCountryIds, setSelectedCountryIds] = useState<string[] | undefined>([]);\n  const [shouldShowWinners, setShouldShowWinners] = useState<boolean>(false);\n  const [shouldShowPrizes, setShouldShowPrizes] = useState<boolean>(false);\n  const [prizeDescription, setPrizeDescription] = useState<string | undefined>(undefined);\n  const [dataPrepaidGiveaway, setDataPrepaidGiveaway] = useState<ApiPrepaidGiveaway | undefined>(undefined);\n  const [\n    dataStarsPrepaidGiveaway, setDataStarsPrepaidGiveaway,\n  ] = useState<ApiPrepaidStarsGiveaway | undefined>(undefined);\n\n  const isPremiumGiveaway = selectedGiveawayOption === 'premium_giveaway';\n  const isStarsGiveaway = selectedGiveawayOption === 'stars_giveaway';\n  const selectedUserCount = isPremiumGiveaway\n    && !selectedUserIds.length ? selectedRandomUserCount : selectedUserIds.length;\n  const boostQuantity = selectedUserCount * giveawayBoostPerPremiumLimit;\n  const boostStarsQuantity = selectedStarOption?.yearlyBoosts;\n\n  const SUBSCRIBER_OPTIONS = useMemo(() => [\n    {\n      value: 'all',\n      label: lang(isChannel ? 'BoostingAllSubscribers' : 'BoostingAllMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n    {\n      value: 'new',\n      label: lang(isChannel ? 'BoostingNewSubscribers' : 'BoostingNewMembers'),\n      subLabel: selectedCountryIds && selectedCountryIds.length > 0\n        ? lang('Giveaway.ReceiverType.Countries', selectedCountryIds.length)\n        : lang('BoostingFromAllCountries'),\n    },\n  ], [isChannel, lang, selectedCountryIds]);\n\n  const monthQuantity = lang('Months', selectedMonthOption);\n  const isStarsPrepaidGiveaway = prepaidGiveaway?.type === 'starsGiveaway';\n  const isPremiumPrepaidGiveaway = prepaidGiveaway?.type === 'giveaway';\n\n  const selectedGift = useMemo(() => {\n    return gifts?.find((gift) => gift.months === selectedMonthOption && gift.users === selectedUserCount);\n  }, [gifts, selectedMonthOption, selectedUserCount]);\n\n  const selectedStarsGift = useMemo(() => {\n    return starsGiftOptions?.find((gift) => {\n      return isStarsPrepaidGiveaway && gift.stars === (dataStarsPrepaidGiveaway?.stars);\n    });\n  }, [dataStarsPrepaidGiveaway, starsGiftOptions, isStarsPrepaidGiveaway]);\n\n  const filteredGifts = useMemo(() => {\n    return gifts?.filter((gift) => gift.users === selectedUserCount && gift.currency !== STARS_CURRENCY_CODE);\n  }, [gifts, selectedUserCount]);\n\n  const fullMonthlyAmount = useMemo(() => {\n    const basicGift = filteredGifts?.reduce((acc, gift) => {\n      return gift.amount < acc.amount ? gift : acc;\n    }, filteredGifts[0]);\n\n    return basicGift && Math.floor(basicGift.amount / basicGift.months);\n  }, [filteredGifts]);\n\n  const userCountOptions = useMemo(() => {\n    return unique((gifts?.filter((gift) => gift.currency !== STARS_CURRENCY_CODE)\n      ?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [gifts]);\n\n  const winnerCountOptions = useMemo(() => {\n    return unique((selectedStarOption?.winners?.map((winner) => winner.users) || [])).sort((a, b) => a - b);\n  }, [selectedStarOption]);\n\n  useEffect(() => {\n    if (isOpen && gifts?.length && !isStarsPrepaidGiveaway) {\n      setSelectedMonthOption(gifts?.[0].months);\n    }\n  }, [isOpen, gifts, isStarsPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && starsGiftOptions?.length && !isPremiumPrepaidGiveaway) {\n      setSelectedStarOption(starsGiftOptions?.[0]);\n    }\n  }, [isOpen, starsGiftOptions, isPremiumPrepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isStarsPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataStarsPrepaidGiveaway(prepaidGiveaway);\n    }\n  }, [isOpen, isStarsPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (isOpen && isPremiumPrepaidGiveaway) {\n      setSelectedRandomUserCount(prepaidGiveaway.quantity);\n      setDataPrepaidGiveaway(prepaidGiveaway);\n      setSelectedMonthOption(prepaidGiveaway.months);\n    }\n  }, [isOpen, isPremiumPrepaidGiveaway, prepaidGiveaway]);\n\n  useEffect(() => {\n    if (selectedMemberList) {\n      setSelectedUserIds(selectedMemberList);\n    }\n  }, [selectedMemberList]);\n\n  useEffect(() => {\n    if (selectedChannelList) {\n      setSelectedChannelIds(selectedChannelList);\n    }\n  }, [selectedChannelList]);\n\n  const handlePremiumClick = useLastCallback(() => {\n    openPremiumModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    setDataStarsPrepaidGiveaway(undefined);\n    setDataPrepaidGiveaway(undefined);\n    setSelectedStarOption(undefined);\n    setSelectedMonthOption(undefined);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n    closeGiveawayModal();\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (isPremiumGiveaway) {\n      if (selectedUserIds?.length) {\n        openInvoice({\n          type: 'giftcode',\n          boostChannelId: chatId!,\n          userIds: selectedUserIds,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      } else {\n        openInvoice({\n          type: 'giveaway',\n          chatId: chatId!,\n          additionalChannelIds: selectedChannelIds,\n          isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n          countries: selectedCountryIds,\n          areWinnersVisible: shouldShowWinners,\n          prizeDescription,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n          option: selectedGift!,\n        });\n      }\n    } else {\n      openInvoice({\n        type: 'starsgiveaway',\n        chatId: chatId!,\n        additionalChannelIds: selectedChannelIds,\n        isOnlyForNewSubscribers: selectedSubscriberOption === 'new',\n        countries: selectedCountryIds,\n        areWinnersVisible: shouldShowWinners,\n        prizeDescription,\n        untilDate: customExpireDate / 1000,\n        currency: selectedStarOption!.currency,\n        amount: selectedStarOption!.amount,\n        stars: selectedStarOption!.stars,\n        users: selectedRandomUserCount,\n      });\n    }\n\n    handleClose();\n  });\n\n  const confirmLaunchPrepaidGiveaway = useLastCallback(() => {\n    if (isStarsPrepaidGiveaway) {\n      launchPrepaidStarsGiveaway({\n        chatId: chatId!,\n        giveawayId: dataStarsPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          stars: dataStarsPrepaidGiveaway!.stars,\n          currency: selectedStarsGift!.currency,\n          amount: selectedStarsGift!.amount,\n          users: dataStarsPrepaidGiveaway!.quantity,\n        },\n      });\n    } else {\n      launchPrepaidGiveaway({\n        chatId: chatId!,\n        giveawayId: dataPrepaidGiveaway!.id,\n        paymentPurpose: {\n          additionalChannelIds: selectedChannelIds,\n          countries: selectedCountryIds,\n          prizeDescription,\n          areWinnersVisible: shouldShowWinners,\n          untilDate: customExpireDate / 1000,\n          currency: selectedGift!.currency,\n          amount: selectedGift!.amount,\n        },\n      });\n    }\n\n    closeConfirmModal();\n    handleClose();\n  });\n\n  const handleRandomUserCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handleWinnerCountChange = useLastCallback((newValue) => {\n    setSelectedRandomUserCount(newValue);\n  });\n\n  const handlePrizeDescriptionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setPrizeDescription(e.target.value);\n  });\n\n  const userNames = useMemo(() => {\n    const usersById = getGlobal().users.byId;\n    return selectedUserIds?.map((userId) => getUserFullName(usersById[userId])).join(', ');\n  }, [selectedUserIds]);\n\n  function handleScroll(e: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop } = e.currentTarget;\n\n    setHeaderHidden(scrollTop <= 150);\n  }\n\n  const handleChangeSubscriberOption = useLastCallback((value) => {\n    setSelectedSubscriberOption(value);\n  });\n\n  const handleChangeTypeOption = useLastCallback((value: ApiGiveawayType) => {\n    setGiveawayOption(value);\n    setSelectedUserIds([]);\n    setSelectedRandomUserCount(DEFAULT_BOOST_COUNT);\n  });\n\n  const handleExpireDateChange = useLastCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  });\n\n  const handleSetCountriesListChange = useLastCallback((value: string[]) => {\n    setSelectedCountryIds(value);\n  });\n\n  const handleSelectedUserIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedUserIds(newSelectedIds);\n    if (!newSelectedIds.length) {\n      setGiveawayOption('premium_giveaway');\n    }\n  });\n\n  const handleSelectedChannelIdsChange = useLastCallback((newSelectedIds: string[]) => {\n    setSelectedChannelIds(newSelectedIds);\n  });\n\n  const handleShouldShowWinnersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowWinners(e.target.checked);\n  });\n\n  const handleShouldShowPrizesChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setShouldShowPrizes(e.target.checked);\n  });\n\n  const onClickActionHandler = useLastCallback(() => {\n    openCountryPickerModal();\n  });\n\n  const handleStarClick = useLastCallback((option) => {\n    setSelectedStarOption(option);\n  });\n\n  function renderTypeOptions() {\n    return (\n      <div className={styles.options}>\n        {TYPE_OPTIONS.map((option) => {\n          return (\n            <GiveawayTypeOption\n              key={option.name}\n              name={option.name}\n              text={option.text}\n              option={option.value}\n              img={option.img}\n              onChange={handleChangeTypeOption}\n              checked={selectedGiveawayOption === option.value}\n              isLink={option.isLink}\n              userNames={userNames}\n              selectedMemberIds={selectedUserIds}\n              onClickAction={option.onClickAction}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n\n  function renderSubscribersOptions() {\n    return (\n      <div className={styles.options}>\n        <RadioGroup\n          name=\"subscribers\"\n          options={SUBSCRIBER_OPTIONS}\n          selected={selectedSubscriberOption}\n          onChange={handleChangeSubscriberOption}\n          onClickAction={onClickActionHandler}\n          subLabelClassName={styles.subLabelClassName}\n          isLink\n        />\n      </div>\n    );\n  }\n\n  function renderSubscriptionOptions() {\n    return (\n      <div className={styles.options}>\n        {filteredGifts?.map((gift) => (\n          <PremiumSubscriptionOption\n            isGiveaway\n            key={gift.months}\n            option={gift}\n            fullMonthlyAmount={fullMonthlyAmount}\n            checked={gift.months === selectedMonthOption}\n            onChange={setSelectedMonthOption}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderPremiumFeaturesLink() {\n    const info = lang('GiftPremiumListFeaturesAndTerms');\n    const parts = info.match(/([^*]*)\\*([^*]+)\\*(.*)/);\n\n    if (!parts || parts.length < 4) {\n      return undefined;\n    }\n\n    return (\n      <p className={styles.premiumFeatures}>\n        {parts[1]}\n        <Link isPrimary onClick={handlePremiumClick}>{parts[2]}</Link>\n        {parts[3]}\n      </p>\n    );\n  }\n\n  function deleteParticipantsHandler(id: string) {\n    const filteredChannelIds = selectedChannelIds.filter((channelId) => channelId !== id);\n    setSelectedChannelIds(filteredChannelIds);\n  }\n\n  function renderStarOptionList() {\n    return (\n      <StarTopupOptionList\n        className={styles.starOptions}\n        options={starsGiftOptions}\n        selectedStarCount={selectedRandomUserCount}\n        selectedStarOption={selectedStarOption}\n        onClick={handleStarClick}\n      />\n    );\n  }\n\n  function renderGiveawayOptionList() {\n    return (\n      <>\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingChannelsGroupsIncludedGiveaway')}\n          </h2>\n\n          <ListItem\n            inactive\n            className=\"chat-item-clickable contact-list-item\"\n          >\n            <GroupChatInfo\n              chatId={chatId!}\n              status={lang(isChannel ? 'BoostingChannelWillReceiveBoost'\n                : 'BoostingGroupWillReceiveBoost', boostQuantity || boostStarsQuantity, 'i')}\n            />\n          </ListItem>\n\n          {selectedChannelIds?.map((channelId) => {\n            return (\n              <ListItem\n                ripple\n                key={channelId}\n                className=\"chat-item-clickable contact-list-item\"\n\n                onClick={() => deleteParticipantsHandler(channelId)}\n                rightElement={(<Icon name=\"close\" className={styles.removeChannel} />)}\n              >\n                <GroupChatInfo\n                  chatId={channelId.toString()}\n                />\n              </ListItem>\n            );\n          })}\n\n          {selectedChannelIds.length < MAX_ADDITIONAL_CHANNELS && (\n            <ListItem\n              icon=\"add\"\n              ripple\n              onClick={openChannelPickerModal}\n              className={styles.addButton}\n              iconClassName={styles.addChannel}\n            >\n              {lang('BoostingAddChannelOrGroup')}\n            </ListItem>\n          )}\n        </div>\n\n        <div className={styles.section}>\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingEligibleUsers')}\n          </h2>\n\n          {renderSubscribersOptions()}\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang(isChannel ? 'BoostGift.LimitSubscribersInfo' : 'lng_giveaway_users_about_group'))}\n        </div>\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayAdditionalPrizes')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowPrizes}\n              onChange={handleShouldShowPrizesChange}\n            />\n          </div>\n\n          {shouldShowPrizes && (\n            <div className={styles.prizesSection}>\n              <h2 className={styles.title}>\n                {selectedRandomUserCount}\n              </h2>\n              <InputText\n                className={styles.prizesInput}\n                value={prizeDescription}\n                onChange={handlePrizeDescriptionChange}\n                label={lang('BoostingGiveawayEnterYourPrize')}\n              />\n            </div>\n          )}\n        </div>\n\n        {shouldShowPrizes ? (\n          !isStarsGiveaway && !isStarsPrepaidGiveaway ? (\n            <div className={styles.subscription}>\n              {prizeDescription?.length ? renderText(lang('BoostingGiveawayAdditionPrizeCountNameHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, prizeDescription, monthQuantity]\n                  : [selectedUserCount, prizeDescription, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown']) : renderText(lang('BoostingGiveawayAdditionPrizeCountHint',\n                dataPrepaidGiveaway\n                  ? [dataPrepaidGiveaway.quantity, monthQuantity]\n                  : [selectedUserCount, monthQuantity],\n                undefined,\n                selectedMonthOption), ['simple_markdown'])}\n            </div>\n          ) : undefined\n        ) : (\n          <div className={styles.subscription}>\n            {renderText(lang('BoostingGiveawayAdditionPrizeHint'))}\n          </div>\n        )}\n\n        <div className={styles.section}>\n          <div className={styles.checkboxSection}>\n            <h2 className={styles.title}>\n              {lang('BoostingGiveawayShowWinners')}\n            </h2>\n\n            <Switcher\n              label={lang('BoostingGiveawayAdditionalPrizes')}\n              checked={shouldShowWinners}\n              onChange={handleShouldShowWinnersChange}\n            />\n          </div>\n        </div>\n\n        <div className={styles.subscription}>\n          {renderText(lang('BoostingGiveawayShowWinnersHint'))}\n        </div>\n\n        <div className={buildClassName(styles.section,\n          (dataPrepaidGiveaway || dataStarsPrepaidGiveaway || isStarsGiveaway) && styles.subscriptionFooter)}\n        >\n          <h2 className={styles.giveawayTitle}>\n            {lang('BoostingDateWhenGiveawayEnds')}\n          </h2>\n\n          <Button\n            ariaLabel={lang('BoostGift.DateEnds')}\n            className={buildClassName(styles.dateButton, 'expire-limit')}\n            isText\n            onClick={openCalendar}\n          >\n            <h3 className={styles.title}>\n              {lang('BoostGift.DateEnds')}\n            </h3>\n            {formatDateTimeToString(customExpireDate, lang.code)}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      className={styles.root}\n      onClose={handleClose}\n      isOpen={isOpen}\n      dialogRef={dialogRef}\n      onEnter={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')} onScroll={handleScroll}>\n        <Button\n          round\n          size=\"smaller\"\n          className={styles.closeButton}\n          color=\"translucent\"\n          onClick={handleClose}\n          ariaLabel={lang('Close')}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <img className={styles.logo} src={PremiumLogo} alt=\"\" draggable={false} />\n        <h2 className={styles.headerText}>\n          {renderText(lang('BoostingBoostsViaGifts'))}\n        </h2>\n        <div className={styles.description}>\n          {renderText(lang(isChannel ? 'BoostingGetMoreBoost' : 'BoostingGetMoreBoostsGroup'))}\n        </div>\n        <div className={buildClassName(styles.header, isHeaderHidden && styles.hiddenHeader)}>\n          <h2 className={styles.premiumHeaderText}>\n            {lang('BoostingBoostsViaGifts')}\n          </h2>\n        </div>\n        {(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? (\n          <div className={styles.status}>\n            <div>\n              {dataStarsPrepaidGiveaway ? (\n                <img className={styles.prepaidImg} src={GiftStar} alt=\"\" />\n              ) : (\n                <img\n                  className={styles.prepaidImg}\n                  src={GIVEAWAY_IMG_LIST[dataPrepaidGiveaway!.months] || GIVEAWAY_IMG_LIST[3]}\n                  alt=\"\"\n                />\n              )}\n            </div>\n            <div className={styles.info}>\n              <h3 className={styles.title}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Title', dataStarsPrepaidGiveaway?.stars)\n                  : lang('BoostingTelegramPremiumCountPlural', dataPrepaidGiveaway!.quantity)}\n              </h3>\n              <p className={styles.month}>\n                {dataStarsPrepaidGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', dataStarsPrepaidGiveaway?.quantity)\n                  : lang('PrepaidGiveawayMonths', dataPrepaidGiveaway?.months)}\n              </p>\n            </div>\n            <div className={styles.quantity}>\n              <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {dataStarsPrepaidGiveaway ? dataStarsPrepaidGiveaway?.boosts\n                    : dataPrepaidGiveaway!.quantity * (giveawayBoostPerPremiumLimit ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                </div>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <div className={buildClassName(styles.section, styles.types)}>\n            {renderTypeOptions()}\n          </div>\n        )}\n\n        {isPremiumGiveaway && !selectedUserIds?.length && (\n          <>\n            {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingQuantityPrizes')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedUserCount}\n                    marks={userCountOptions}\n                    onChange={handleRandomUserCountChange}\n                  />\n                </div>\n\n                <div className={styles.subscription}>\n                  {renderText(lang('BoostingChooseHowMany'))}\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {isStarsGiveaway && (\n          <>\n            {!dataStarsPrepaidGiveaway && !dataPrepaidGiveaway && (\n              <>\n                <div className={styles.section}>\n                  <div className={styles.quantity}>\n                    <h2 className={styles.giveawayTitle}>\n                      {lang('BoostingStarsOptions')}\n                    </h2>\n                    <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeColor)}>\n                      <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                      <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                        {boostStarsQuantity}\n                      </div>\n                    </div>\n                  </div>\n\n                  {renderStarOptionList()}\n                </div>\n\n                <div className={buildClassName(styles.subscription, styles.starSubscription)}>\n                  {renderText(lang('BoostGift.Stars.Info'))}\n                </div>\n\n                <div className={styles.section}>\n                  <h2 className={styles.giveawayTitle}>\n                    {lang('BoostingStarsQuantityPrizes')}\n                  </h2>\n\n                  <RangeSliderWithMarks\n                    rangeCount={selectedRandomUserCount}\n                    marks={winnerCountOptions}\n                    onChange={handleWinnerCountChange}\n                  />\n\n                  <div className={styles.subscription}>\n                    {renderText(lang('BoostingStarsQuantityPrizesInfo'))}\n                  </div>\n                </div>\n              </>\n            )}\n\n            {renderGiveawayOptionList()}\n          </>\n        )}\n\n        {!dataPrepaidGiveaway && !dataStarsPrepaidGiveaway && isPremiumGiveaway && (\n          <>\n            <div className={styles.section}>\n              <h2 className={styles.giveawayTitle}>\n                {lang('BoostingDurationOfPremium')}\n              </h2>\n\n              {renderSubscriptionOptions()}\n            </div>\n\n            <div className={buildClassName(styles.subscription, styles.subscriptionFooter)}>\n              {renderPremiumFeaturesLink()}\n            </div>\n          </>\n        )}\n\n        {selectedGiveawayOption && (\n          <div className={styles.footer}>\n            <Button\n              className={styles.button}\n              onClick={(dataPrepaidGiveaway || dataStarsPrepaidGiveaway) ? openConfirmModal : handleClick}\n            >\n              {lang('BoostingStartGiveaway')}\n            </Button>\n          </div>\n        )}\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n      <CountryPickerModal\n        isOpen={isCountryPickerModalOpen}\n        onClose={closeCountryPickerModal}\n        countryList={countryList}\n        onSubmit={handleSetCountriesListChange}\n        selectionLimit={countrySelectionLimit}\n      />\n      <GiveawayUserPickerModal\n        isOpen={isUserPickerModalOpen}\n        onClose={closeUserPickerModal}\n        onSelectedIdsConfirmed={handleSelectedUserIdsChange}\n        initialSelectedIds={selectedUserIds}\n        selectionLimit={userSelectionLimit}\n        giveawayChatId={chatId}\n      />\n      <GiveawayChannelPickerModal\n        isOpen={isChannelPickerModalOpen}\n        onClose={closeChannelPickerModal}\n        initialSelectedIds={selectedChannelIds}\n        onSelectedIdsConfirmed={handleSelectedChannelIdsChange}\n        selectionLimit={GIVEAWAY_MAX_ADDITIONAL_CHANNELS}\n        giveawayChatId={chatId}\n      />\n      <ConfirmDialog\n        title={lang('BoostingStartGiveawayConfirmTitle')}\n        text={lang('BoostingStartGiveawayConfirmText')}\n        confirmLabel={lang('Start')}\n        isOpen={isConfirmModalOpen}\n        onClose={closeConfirmModal}\n        confirmHandler={confirmLaunchPrepaidGiveaway}\n      />\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    giveawayModal,\n  } = selectTabState(global);\n  const chatId = giveawayModal?.chatId;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const isChannel = chat && isChatChannel(chat);\n\n  return {\n    chatId,\n    gifts: giveawayModal?.gifts,\n    selectedMemberList: giveawayModal?.selectedMemberIds,\n    selectedChannelList: giveawayModal?.selectedChannelIds,\n    giveawayBoostPerPremiumLimit: global.appConfig?.giveawayBoostsPerPremium,\n    isStarsGiftEnabled: global.appConfig?.isStarsGiftEnabled,\n    userSelectionLimit: global.appConfig?.giveawayAddPeersMax,\n    countrySelectionLimit: global.appConfig?.giveawayCountriesMax,\n    countryList: global.countryList.general,\n    prepaidGiveaway: giveawayModal?.prepaidGiveaway,\n    isChannel,\n    starsGiftOptions: giveawayModal?.starOptions,\n  };\n})(GiveawayModal));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiLimitTypeWithModal } from '../../../../api/types';\nimport type { OldLangFn } from '../../../../hooks/useOldLang';\nimport type { IconName } from '../../../../types/icons';\n\nimport { MAX_UPLOAD_FILEPART_SIZE } from '../../../../config';\nimport { selectIsCurrentUserPremium, selectIsPremiumPurchaseBlocked } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatFileSize } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport PremiumLimitsCompare from './PremiumLimitsCompare';\n\nimport styles from './PremiumLimitReachedModal.module.scss';\n\nconst LIMIT_DESCRIPTION: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFolders',\n  uploadMaxFileparts: 'LimitReachedFileSize',\n  dialogFilters: 'LimitReachedFolders',\n  dialogFolderPinned: 'LimitReachedPinDialogs',\n  channelsPublic: 'LimitReachedPublicLinks',\n  channels: 'LimitReachedCommunities',\n  chatlistInvites: 'LimitReachedFolderLinks',\n  chatlistJoined: 'LimitReachedSharedFolders',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogs',\n};\n\nconst LIMIT_DESCRIPTION_BLOCKED: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersLocked',\n  uploadMaxFileparts: 'LimitReachedFileSizeLocked',\n  dialogFilters: 'LimitReachedFoldersLocked',\n  dialogFolderPinned: 'LimitReachedPinDialogsLocked',\n  channelsPublic: 'LimitReachedPublicLinksLocked',\n  channels: 'LimitReachedCommunitiesLocked',\n  chatlistInvites: 'LimitReachedFolderLinksLocked',\n  chatlistJoined: 'LimitReachedSharedFoldersLocked',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsLocked',\n};\n\nconst LIMIT_DESCRIPTION_PREMIUM: Record<ApiLimitTypeWithModal, string> = {\n  dialogFiltersChats: 'LimitReachedChatInFoldersPremium',\n  uploadMaxFileparts: 'LimitReachedFileSizePremium',\n  dialogFilters: 'LimitReachedFoldersPremium',\n  dialogFolderPinned: 'LimitReachedPinDialogsPremium',\n  channelsPublic: 'LimitReachedPublicLinksPremium',\n  channels: 'LimitReachedCommunitiesPremium',\n  chatlistInvites: 'LimitReachedFolderLinksPremium',\n  chatlistJoined: 'LimitReachedSharedFoldersPremium',\n  savedDialogsPinned: 'LimitReachedPinSavedDialogsPremium',\n};\n\nconst LIMIT_ICON: Record<ApiLimitTypeWithModal, IconName> = {\n  dialogFiltersChats: 'chat-badge',\n  uploadMaxFileparts: 'file-badge',\n  dialogFilters: 'folder-badge',\n  dialogFolderPinned: 'pin-badge',\n  channelsPublic: 'link-badge',\n  channels: 'chats-badge',\n  chatlistInvites: 'link-badge',\n  chatlistJoined: 'folder-badge',\n  savedDialogsPinned: 'pin-badge',\n};\n\nconst LIMIT_VALUE_FORMATTER: Partial<Record<ApiLimitTypeWithModal, (...args: any[]) => string>> = {\n  uploadMaxFileparts: (lang: OldLangFn, value: number) => {\n    // The real size is not exactly 4gb, so we need to round it\n    if (value === 8000) return lang('FileSize.GB', '4');\n    if (value === 4000) return lang('FileSize.GB', '2');\n    return formatFileSize(lang, value * MAX_UPLOAD_FILEPART_SIZE);\n  },\n};\n\nfunction getLimiterDescription({\n  lang,\n  limitType,\n  isPremium,\n  canBuyPremium,\n  defaultValue,\n  premiumValue,\n  valueFormatter,\n}: {\n  lang: OldLangFn;\n  limitType?: ApiLimitTypeWithModal;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n  defaultValue?: number;\n  premiumValue?: number;\n  valueFormatter?: (...args: any[]) => string;\n}) {\n  if (!limitType) {\n    return undefined;\n  }\n\n  const defaultValueFormatted = valueFormatter ? valueFormatter(lang, defaultValue) : defaultValue;\n  const premiumValueFormatted = valueFormatter ? valueFormatter(lang, premiumValue) : premiumValue;\n\n  if (isPremium) {\n    return lang(LIMIT_DESCRIPTION_PREMIUM[limitType], premiumValueFormatted);\n  }\n\n  return canBuyPremium\n    ? lang(LIMIT_DESCRIPTION[limitType],\n      limitType === 'channelsPublic' ? premiumValueFormatted : [defaultValueFormatted, premiumValueFormatted])\n    : lang(LIMIT_DESCRIPTION_BLOCKED[limitType], defaultValueFormatted);\n}\n\nexport type OwnProps = {\n  limit?: ApiLimitTypeWithModal;\n};\n\ntype StateProps = {\n  defaultValue?: number;\n  premiumValue?: number;\n  isPremium?: boolean;\n  canBuyPremium?: boolean;\n};\n\nconst PremiumLimitReachedModal: FC<OwnProps & StateProps> = ({\n  defaultValue,\n  premiumValue,\n  limit,\n  isPremium,\n  canBuyPremium,\n}) => {\n  const { closeLimitReachedModal, openPremiumModal } = getActions();\n  const lang = useOldLang();\n\n  const [isClosing, startClosing, stopClosing] = useFlag();\n\n  const handleClick = useCallback(() => {\n    openPremiumModal();\n    startClosing();\n  }, [openPremiumModal, startClosing]);\n\n  useEffect(() => {\n    if (!limit && isClosing) stopClosing();\n  }, [isClosing, limit, stopClosing]);\n\n  const title = lang('LimitReached');\n  const valueFormatter = limit && LIMIT_VALUE_FORMATTER[limit];\n  const description = getLimiterDescription({\n    lang,\n    limitType: limit,\n    isPremium,\n    canBuyPremium,\n    defaultValue,\n    premiumValue,\n    valueFormatter,\n  });\n  const icon = limit && LIMIT_ICON[limit];\n  const canUpgrade = canBuyPremium && !isPremium;\n\n  return (\n    <Modal\n      onClose={startClosing}\n      onCloseAnimationEnd={closeLimitReachedModal}\n      isOpen={Boolean(limit) && !isClosing}\n      title={title}\n      className={styles.root}\n    >\n      {!canUpgrade && (\n        <div className={styles.limitBadge}>\n          <i className={buildClassName(styles.limitIcon, icon, 'icon')} />\n          <div className={styles.limitValue}>\n            {valueFormatter?.(\n              lang, isPremium ? premiumValue : defaultValue,\n            ) || (isPremium ? premiumValue : defaultValue)}\n          </div>\n        </div>\n      )}\n\n      {canUpgrade && (\n        <PremiumLimitsCompare\n          className={styles.limitCompare}\n          leftValue={valueFormatter?.(lang, defaultValue) || defaultValue?.toString()}\n          rightValue={valueFormatter?.(lang, premiumValue) || premiumValue?.toString()}\n          floatingBadgeIcon={icon}\n        />\n      )}\n\n      <div>\n        {renderText(description || '', ['simple_markdown', 'br'])}\n      </div>\n\n      <div className={styles.dialogButtons}>\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={startClosing}\n          color=\"primary\"\n        >\n          {lang(canUpgrade ? 'Cancel' : 'OK')}\n        </Button>\n        {canUpgrade\n          && (\n            <Button\n              className=\"confirm-dialog-button\"\n              isText\n              onClick={handleClick}\n              color=\"primary\"\n            >\n              {lang('IncreaseLimit')}\n              <Icon name=\"double-badge\" className={styles.x2} />\n            </Button>\n          )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { limit }): StateProps => {\n    const { limits } = global.appConfig || {};\n    const isPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      defaultValue: limit ? limits?.[limit][0] : undefined,\n      premiumValue: limit ? limits?.[limit][1] : undefined,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isPremium,\n    };\n  },\n)(PremiumLimitReachedModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QAs_iFxO\",\"limit-compare\":\"k0O6Rnjh\",\"limitCompare\":\"k0O6Rnjh\",\"limit-badge\":\"Q5d_7bB4\",\"limitBadge\":\"Q5d_7bB4\",\"limit-value\":\"ArEy3hhB\",\"limitValue\":\"ArEy3hhB\",\"limit-icon\":\"rbnU7JVX\",\"limitIcon\":\"rbnU7JVX\",\"dialog-buttons\":\"RVM_RSap\",\"dialogButtons\":\"RVM_RSap\",\"x2\":\"esB1OhAF\",\"button-icon\":\"ydpxmYS3\",\"buttonIcon\":\"ydpxmYS3\"};","import type { ElementRef } from '../../../lib/teact/teact';\nimport { useRef, useState } from '../../../lib/teact/teact';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport animateScroll from '../../../util/animateScroll';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst STICKER_INTERSECTION_THROTTLE = 200;\nconst STICKER_INTERSECTION_MARGIN = 100;\nconst SLIDE_TRANSITION_DURATION = 350 + ANIMATION_END_DELAY;\nconst SCROLL_MAX_DISTANCE_WHEN_CLOSE = 200;\nconst SCROLL_MAX_DISTANCE_WHEN_FAR = 80;\nconst FOCUS_MARGIN = 0.5 * REM;\n\nexport function useStickerPickerObservers(\n  containerRef: ElementRef<HTMLDivElement>,\n  headerRef: ElementRef<HTMLDivElement>,\n  idPrefix: string,\n  isHidden?: boolean,\n) {\n  const stickerSetIntersectionsRef = useRef<boolean[]>([]);\n\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const {\n    observe: observeIntersectionForSet,\n    freeze: freezeForSet,\n    unfreeze: unfreezeForSet,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n  }, (entries) => {\n    const stickerSetIntersections = stickerSetIntersectionsRef.current;\n\n    entries.forEach((entry) => {\n      const index = Number(entry.target.id.replace(`${idPrefix}-`, ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = stickerSetIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveSetIndex(minIntersectingIndex);\n  });\n\n  const {\n    observe: observeIntersectionForShowingItems,\n    freeze: freezeForShowingItems,\n    unfreeze: unfreezeForShowingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForPlayingItems,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n    margin: STICKER_INTERSECTION_MARGIN,\n  });\n\n  const {\n    observe: observeIntersectionForCovers,\n  } = useIntersectionObserver({\n    rootRef: headerRef,\n  });\n\n  useSyncEffect(() => {\n    if (isHidden) {\n      freezeForSet();\n      freezeForShowingItems();\n    } else {\n      setTimeout(() => {\n        unfreezeForShowingItems();\n        unfreezeForSet();\n      }, SLIDE_TRANSITION_DURATION);\n    }\n  }, [freezeForSet, freezeForShowingItems, isHidden, unfreezeForSet, unfreezeForShowingItems]);\n\n  const selectStickerSet = useLastCallback((index: number) => {\n    setActiveSetIndex((currentIndex) => {\n      const stickerSetEl = document.getElementById(`${idPrefix}-${index}`)!;\n      const isClose = Math.abs(currentIndex - index) === 1;\n\n      animateScroll({\n        container: containerRef.current!,\n        element: stickerSetEl,\n        position: 'start',\n        margin: FOCUS_MARGIN,\n        maxDistance: isClose ? SCROLL_MAX_DISTANCE_WHEN_CLOSE : SCROLL_MAX_DISTANCE_WHEN_FAR,\n      });\n\n      return index;\n    });\n  });\n\n  return {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForShowingItems,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"m6XpTzQX\",\"video\":\"OZHqKbDL\",\"image\":\"enA6c8gc\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji } from '../../../global/selectors';\nimport { IS_WEBM_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport useColorFilter from '../../../hooks/stickers/useColorFilter';\nimport useDynamicColorListener from '../../../hooks/stickers/useDynamicColorListener';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport styles from './StickerSetCover.module.scss';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  size?: number;\n  noPlay?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({\n  stickerSet,\n  size = STICKER_SIZE_PICKER_HEADER,\n  noPlay,\n  forcePlayback,\n  observeIntersection,\n  sharedCanvasRef,\n}) => {\n  const { loadStickers } = getActions();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    hasThumbnail, hasVideoThumb, hasAnimatedThumb, hasStaticThumb, thumbCustomEmojiId,\n  } = stickerSet;\n\n  const { customEmoji } = useCustomEmoji(thumbCustomEmojiId);\n  const hasCustomColor = customEmoji?.shouldUseTextColor;\n  const customColor = useDynamicColorListener(containerRef, undefined, !hasCustomColor);\n  const colorFilter = useColorFilter(customColor);\n\n  const isIntersecting = useIsIntersecting(containerRef, observeIntersection);\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const shouldFallbackToSticker = !hasThumbnail\n    || (hasVideoThumb && !IS_WEBM_SUPPORTED && !hasAnimatedThumb && !hasStaticThumb);\n  const firstStickerHash = shouldFallbackToSticker && stickerSet.stickers?.[0]\n    && getStickerMediaHash(stickerSet.stickers[0], 'preview');\n  const firstStickerMediaData = useMedia(firstStickerHash, !isIntersecting);\n\n  const mediaHash = ((hasThumbnail && !firstStickerHash) || hasAnimatedThumb) && `stickerSet${stickerSet.id}`;\n  const mediaData = useMedia(mediaHash, !isIntersecting);\n  const isReady = thumbCustomEmojiId || mediaData || firstStickerMediaData;\n  const transitionClassNames = useMediaTransitionDeprecated(isReady);\n\n  const coords = useCoordsInSharedCanvas(containerRef, sharedCanvasRef);\n\n  useEffect(() => {\n    if (isIntersecting && !stickerSet.stickers?.length) {\n      loadStickers({\n        stickerSetInfo: stickerSet,\n      });\n    }\n  }, [isIntersecting, loadStickers, stickerSet]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'sticker-set-cover')}\n      style={`--_size: ${size}px`}\n    >\n      {isReady ? (\n        thumbCustomEmojiId ? (\n          <CustomEmoji\n            documentId={thumbCustomEmojiId}\n            size={size}\n            observeIntersectionForPlaying={observeIntersection}\n            noPlay={noPlay}\n          />\n        ) : hasAnimatedThumb ? (\n          <AnimatedSticker\n            className={transitionClassNames}\n            tgsUrl={mediaData}\n            size={size}\n            play={shouldPlay}\n            isLowPriority={!selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet)}\n            sharedCanvas={sharedCanvasRef?.current || undefined}\n            sharedCanvasCoords={coords}\n            forceAlways={forcePlayback}\n          />\n        ) : (hasVideoThumb && !shouldFallbackToSticker) ? (\n          <OptimizedVideo\n            className={buildClassName(styles.video, transitionClassNames)}\n            src={mediaData}\n            canPlay={shouldPlay}\n            style={colorFilter}\n            isPriority={forcePlayback}\n            loop\n            disablePictureInPicture\n          />\n        ) : (\n          <img\n            src={mediaData || firstStickerMediaData}\n            style={colorFilter}\n            className={buildClassName(styles.image, transitionClassNames)}\n            alt=\"\"\n            draggable={false}\n          />\n        )\n      ) : (\n        getFirstLetters(stickerSet.title, 2)\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import type { MouseEvent as ReactMouseEvent, ReactNode } from 'react';\nimport type {\n  ElementRef } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiBotInlineMediaResult, ApiSticker } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { getServerTime } from '../../util/serverTime';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useDynamicColorListener from '../../hooks/stickers/useDynamicColorListener';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport Icon from './icons/Icon';\nimport Sparkles from './Sparkles';\nimport StickerView from './StickerView';\n\nimport './StickerButton.scss';\n\ntype OwnProps<T> = {\n  sticker: ApiSticker;\n  size: number;\n  noPlay?: boolean;\n  title?: string;\n  className?: string;\n  noContextMenu?: boolean;\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  canViewSet?: boolean;\n  isSelected?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldIgnorePremium?: boolean;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  withTranslucentThumb?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection: ObserveFn;\n  observeIntersectionForShowing?: ObserveFn;\n  noShowPremium?: boolean;\n  onClick?: (arg: OwnProps<T>['clickArg'], isSilent?: boolean, shouldSchedule?: boolean) => void;\n  clickArg: T;\n  onFaveClick?: (sticker: ApiSticker) => void;\n  onUnfaveClick?: (sticker: ApiSticker) => void;\n  onRemoveRecentClick?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n  isEffectEmoji?: boolean;\n  withSparkles?: boolean;\n};\n\nconst contentForStatusMenuContext = [\n  { title: 'SetTimeoutFor.Hours', value: 1, arg: 3600 },\n  { title: 'SetTimeoutFor.Hours', value: 2, arg: 7200 },\n  { title: 'SetTimeoutFor.Hours', value: 8, arg: 28800 },\n  { title: 'SetTimeoutFor.Days', value: 1, arg: 86400 },\n  { title: 'SetTimeoutFor.Days', value: 2, arg: 172800 },\n];\n\nconst StickerButton = <T extends number | ApiSticker | ApiBotInlineMediaResult | undefined = undefined>({\n  sticker,\n  size,\n  noPlay,\n  title,\n  className,\n  noContextMenu,\n  isSavedMessages,\n  isStatusPicker,\n  canViewSet,\n  observeIntersection,\n  observeIntersectionForShowing,\n  isSelected,\n  isCurrentUserPremium,\n  shouldIgnorePremium,\n  noShowPremium,\n  sharedCanvasRef,\n  withTranslucentThumb,\n  forcePlayback,\n  onClick,\n  clickArg,\n  onFaveClick,\n  onUnfaveClick,\n  onRemoveRecentClick,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  isEffectEmoji,\n  withSparkles,\n}: OwnProps<T>) => {\n  const { openStickerSet, openPremiumModal, setEmojiStatus } = getActions();\n  const ref = useRef<HTMLDivElement>();\n  const menuRef = useRef<HTMLDivElement>();\n  const lang = useOldLang();\n  const hasCustomColor = sticker.shouldUseTextColor;\n  const customColor = useDynamicColorListener(ref, undefined, !hasCustomColor);\n\n  const {\n    id, stickerSetInfo,\n  } = sticker;\n\n  const isPremium = (!sticker.isFree && isEffectEmoji) || sticker.hasEffect;\n  const isCustomEmoji = sticker.isCustomEmoji || isEffectEmoji;\n  const isLocked = !isCurrentUserPremium && isPremium && !shouldIgnorePremium;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const shouldLoad = isIntersecting;\n  const shouldPlay = isIntersecting && !noPlay;\n\n  const isIntesectingForShowing = useIsIntersecting(ref, observeIntersectionForShowing);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const shouldRenderContextMenu = Boolean(!noContextMenu && contextMenuAnchor);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => {\n    return isStatusPicker ? menuRef.current : ref.current!.querySelector('.sticker-context-menu .bubble');\n  });\n  const getLayout = useLastCallback(() => ({ withPortal: isStatusPicker, shouldAvoidNegativePosition: true }));\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenuOpen?.();\n    } else {\n      onContextMenuClose?.();\n    }\n  }, [isContextMenuOpen, onContextMenuClose, onContextMenuOpen]);\n\n  useEffect(() => {\n    if (!isIntersecting) handleContextMenuClose();\n  }, [handleContextMenuClose, isIntersecting]);\n\n  const handleClick = () => {\n    if (isContextMenuOpen) return;\n    if (isLocked) {\n      if (isEffectEmoji) {\n        openPremiumModal({ initialSection: 'effects' });\n      } else {\n        openPremiumModal({ initialSection: 'premium_stickers' });\n      }\n      return;\n    }\n    onClick?.(clickArg);\n  };\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleRemoveClick = useLastCallback((e: ReactMouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextRemoveRecent = useLastCallback(() => {\n    onRemoveRecentClick!(sticker);\n  });\n\n  const handleContextUnfave = useLastCallback(() => {\n    onUnfaveClick!(sticker);\n  });\n\n  const handleContextFave = useLastCallback(() => {\n    onFaveClick!(sticker);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick?.(clickArg, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick?.(clickArg, undefined, true);\n  });\n\n  const handleOpenSet = useLastCallback(() => {\n    openStickerSet({ stickerSetInfo });\n  });\n\n  const handleEmojiStatusExpiresClick = useLastCallback((e: React.SyntheticEvent, duration = 0) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    handleContextMenuClose();\n    onContextMenuClick?.();\n    setEmojiStatus({\n      emojiStatus: { type: 'regular', documentId: sticker.id, until: getServerTime() + duration },\n    });\n  });\n\n  const shouldShowCloseButton = !IS_TOUCH_ENV && onRemoveRecentClick;\n\n  const fullClassName = buildClassName(\n    'StickerButton',\n    onClick && 'interactive',\n    isSelected && 'selected',\n    isCustomEmoji && 'custom-emoji',\n    isEffectEmoji && 'effect-emoji',\n    className,\n  );\n\n  const contextMenuItems = useMemo(() => {\n    if (!shouldRenderContextMenu || noContextMenu || (isCustomEmoji && !isStatusPicker)) return [];\n\n    const items: ReactNode[] = [];\n\n    if (isCustomEmoji) {\n      contentForStatusMenuContext.forEach((item) => {\n        items.push(\n          <MenuItem onClick={handleEmojiStatusExpiresClick} clickArg={item.arg}>\n            {lang(item.title, item.value, 'i')}\n          </MenuItem>,\n        );\n      });\n\n      return items;\n    }\n\n    if (onUnfaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextUnfave}>\n          {lang('Stickers.RemoveFromFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (onFaveClick) {\n      items.push(\n        <MenuItem icon=\"favorite\" onClick={handleContextFave}>\n          {lang('Stickers.AddToFavorites')}\n        </MenuItem>,\n      );\n    }\n\n    if (!isLocked && onClick) {\n      if (!isSavedMessages) {\n        items.push(<MenuItem onClick={handleSendQuiet} icon=\"muted\">{lang('SendWithoutSound')}</MenuItem>);\n      }\n      items.push(\n        <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>,\n      );\n    }\n\n    if (canViewSet) {\n      items.push(\n        <MenuItem onClick={handleOpenSet} icon=\"stickers\">\n          {lang('ViewPackPreview')}\n        </MenuItem>,\n      );\n    }\n    if (onRemoveRecentClick) {\n      items.push(\n        <MenuItem icon=\"delete\" onClick={handleContextRemoveRecent}>\n          {lang('DeleteFromRecent')}\n        </MenuItem>,\n      );\n    }\n    return items;\n  }, [\n    shouldRenderContextMenu, noContextMenu, isCustomEmoji, isStatusPicker, onUnfaveClick, onFaveClick, isLocked,\n    onClick, canViewSet, onRemoveRecentClick, handleEmojiStatusExpiresClick, lang, handleContextUnfave,\n    handleContextFave, isSavedMessages, handleSendScheduled, handleSendQuiet, handleOpenSet, handleContextRemoveRecent,\n  ]);\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      title={title || (sticker?.emoji)}\n      data-sticker-id={id}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {withSparkles && <Sparkles preset=\"button\" />}\n      {isIntesectingForShowing && (\n        <StickerView\n          containerRef={ref}\n          sticker={sticker}\n          isSmall\n          size={size}\n          shouldLoop\n          shouldPreloadPreview\n          noLoad={!shouldLoad}\n          noPlay={!shouldPlay}\n          noVideoOnMobile\n          withSharedAnimation\n          sharedCanvasRef={sharedCanvasRef}\n          withTranslucentThumb={withTranslucentThumb}\n          customColor={customColor}\n          forceAlways={forcePlayback}\n        />\n      )}\n      {!noShowPremium && isLocked && (\n        <div\n          className=\"sticker-locked\"\n        >\n          <Icon name=\"lock-badge\" />\n        </div>\n      )}\n      {!noShowPremium && isPremium && !isLocked && (\n        <div className=\"sticker-premium\">\n          <Icon name=\"star\" />\n        </div>\n      )}\n      {shouldShowCloseButton && (\n        <Button\n          className=\"sticker-remove-button\"\n          color=\"dark\"\n          round\n          noFastClick\n          onClick={handleRemoveClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      {Boolean(contextMenuItems.length) && (\n        <Menu\n          ref={menuRef}\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className=\"sticker-context-menu\"\n          autoClose\n          withPortal={isStatusPicker}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {contextMenuItems}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AVrrYEbM\",\"selected\":\"QkdO_lz1\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction, ApiReactionWithPaid } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER } from '../../../config';\nimport { getDocumentMediaHash, isSameReaction } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../helpers/animatedAssets';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCoordsInSharedCanvas from '../../../hooks/useCoordsInSharedCanvas';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../AnimatedIconWithPreview';\nimport CustomEmoji from '../CustomEmoji';\n\nimport styles from './ReactionEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionWithPaid;\n  availableReactions?: ApiAvailableReaction[];\n  className?: string;\n  isSelected?: boolean;\n  loadAndPlay?: boolean;\n  observeIntersection?: ObserveFn;\n  sharedCanvasRef?: ElementRef<HTMLCanvasElement>;\n  sharedCanvasHqRef?: ElementRef<HTMLCanvasElement>;\n  forcePlayback?: boolean;\n  onClick: (reaction: ApiReactionWithPaid) => void;\n  onContextMenu?: (reaction: ApiReactionWithPaid) => void;\n};\n\nconst ReactionEmoji: FC<OwnProps> = ({\n  reaction,\n  availableReactions,\n  isSelected,\n  loadAndPlay,\n  observeIntersection,\n  sharedCanvasRef,\n  sharedCanvasHqRef,\n  forcePlayback,\n  onClick,\n  onContextMenu,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const isCustom = reaction.type === 'custom';\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((available) => isSameReaction(available.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const thumbDataUri = availableReaction?.staticIcon?.thumbnail?.dataUri;\n  const animationId = availableReaction?.selectAnimation?.id;\n  const coords = useCoordsInSharedCanvas(ref, sharedCanvasRef);\n  const mediaData = useMedia(\n    availableReaction?.selectAnimation ? getDocumentMediaHash(availableReaction.selectAnimation, 'full') : undefined,\n    !animationId,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, reaction.type !== 'paid', undefined, undefined, undefined, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      onContextMenu?.(reaction);\n\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, onContextMenu, handleContextMenuHide, isContextMenuOpen, reaction]);\n\n  const tgsUrl = reaction.type === 'paid' ? LOCAL_TGS_URLS.StarReaction : mediaData;\n  const handleClick = useLastCallback(() => {\n    onClick(reaction);\n  });\n\n  const transitionClassNames = useMediaTransitionDeprecated(mediaData);\n  const fullClassName = buildClassName(\n    styles.root,\n    isSelected && styles.selected,\n    !isCustom && 'sticker-reaction',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onClick={handleClick}\n      title={availableReaction?.title}\n      data-sticker-id={isCustom ? reaction.documentId : undefined}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n    >\n      {isCustom ? (\n        <CustomEmoji\n          ref={ref}\n          documentId={reaction.documentId}\n          size={EMOJI_SIZE_PICKER}\n          noPlay={!loadAndPlay}\n          observeIntersectionForPlaying={observeIntersection}\n          sharedCanvasRef={sharedCanvasRef}\n          sharedCanvasHqRef={sharedCanvasHqRef}\n          withTranslucentThumb\n          forceAlways={forcePlayback}\n        />\n      ) : (\n        <AnimatedIconWithPreview\n          tgsUrl={tgsUrl}\n          thumbDataUri={thumbDataUri}\n          play={loadAndPlay}\n          noLoop={false}\n          size={EMOJI_SIZE_PICKER}\n          isLowPriority\n          className={transitionClassNames}\n          sharedCanvas={sharedCanvasRef!.current || undefined}\n          sharedCanvasCoords={coords}\n          forceAlways={forcePlayback}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionEmoji);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction, ApiEmojiStatusType, ApiReactionWithPaid, ApiSticker,\n} from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  DEFAULT_STATUS_ICON_ID,\n  DEFAULT_TOPIC_ICON_STICKER_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  EMOJI_SIZE_PICKER,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  STICKER_SIZE_PICKER,\n} from '../../config';\nimport { getReactionKey } from '../../global/helpers';\nimport { selectIsAlwaysHighPriorityEmoji, selectIsSetPremium } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../hooks/useOldLang';\nimport useResizeObserver from '../../hooks/useResizeObserver';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Icon from './icons/Icon';\nimport ReactionEmoji from './reactions/ReactionEmoji';\nimport StickerButton from './StickerButton';\n\nimport grey from '../../assets/icons/forumTopic/grey.svg';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrReactionsSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  idPrefix: string;\n  isNearActive: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldHideHeader?: boolean;\n  selectedReactionIds?: string[];\n  withDefaultTopicIcon?: boolean;\n  withDefaultStatusIcon?: boolean;\n  isChatEmojiSet?: boolean;\n  isChatStickerSet?: boolean;\n  isTranslucent?: boolean;\n  noContextMenus?: boolean;\n  forcePlayback?: boolean;\n  observeIntersection?: ObserveFn;\n  observeIntersectionForPlayingItems: ObserveFn;\n  observeIntersectionForShowingItems: ObserveFn;\n  availableReactions?: ApiAvailableReaction[];\n  onStickerSelect?: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onStickerUnfave?: (sticker: ApiSticker) => void;\n  onStickerFave?: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent?: (sticker: ApiSticker) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  collectibleStatuses?: ApiEmojiStatusType[];\n};\n\nconst ITEMS_PER_ROW_FALLBACK = 8;\nconst ITEMS_MOBILE_PER_ROW_FALLBACK = 7;\nconst ITEMS_MINI_MOBILE_PER_ROW_FALLBACK = 6;\nconst MOBILE_WIDTH_THRESHOLD_PX = 440;\nconst MINI_MOBILE_WIDTH_THRESHOLD_PX = 362;\n\nconst StickerSet: FC<OwnProps & StateProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  idPrefix,\n  isNearActive,\n  favoriteStickers,\n  availableReactions,\n  isSavedMessages,\n  isStatusPicker,\n  isReactionPicker,\n  isCurrentUserPremium,\n  shouldHideHeader,\n  withDefaultTopicIcon,\n  selectedReactionIds,\n  withDefaultStatusIcon,\n  isChatEmojiSet,\n  isChatStickerSet,\n  isTranslucent,\n  noContextMenus,\n  forcePlayback,\n  observeIntersection,\n  observeIntersectionForPlayingItems,\n  observeIntersectionForShowingItems,\n  onReactionSelect,\n  onReactionContext,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n  collectibleStatuses,\n}) => {\n  const {\n    clearRecentStickers,\n    clearRecentCustomEmoji,\n    clearRecentReactions,\n    openPremiumModal,\n    toggleStickerSet,\n    loadStickers,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const { width: windowWidth } = useWindowSize();\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const [itemsPerRow, setItemsPerRow] = useState(getItemsPerRowFallback(windowWidth));\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection ?? observeIntersectionForShowingItems);\n  const transitionClassNames = useMediaTransitionDeprecated(isIntersecting);\n\n  // `isNearActive` is set in advance during animation, but it is not reliable for short sets\n  const shouldRender = isNearActive || isIntersecting;\n\n  const stickerMarginPx = isMobile ? 8 : 4;\n  const emojiMarginPx = isMobile ? 8 : 10;\n  const emojiVerticalMarginPx = isMobile ? 8 : 4;\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n  const isStatusCollectible = stickerSet.id === COLLECTIBLE_STATUS_SET_ID;\n  const isFavorite = stickerSet.id === FAVORITE_SYMBOL_SET_ID;\n  const isPopular = stickerSet.id === POPULAR_SYMBOL_SET_ID;\n  const isEmoji = stickerSet.isEmoji;\n  const isPremiumSet = !isRecent && selectIsSetPremium(stickerSet);\n\n  const handleClearRecent = useLastCallback(() => {\n    if (isReactionPicker) {\n      clearRecentReactions();\n    } else if (isEmoji) {\n      clearRecentCustomEmoji();\n    } else {\n      clearRecentStickers();\n    }\n    closeConfirmModal();\n  });\n\n  const handleAddClick = useLastCallback(() => {\n    if (isPremiumSet && !isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'animated_emoji',\n      });\n    } else {\n      toggleStickerSet({\n        stickerSetId: stickerSet.id,\n      });\n    }\n  });\n\n  const handleDefaultTopicIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_TOPIC_ICON_STICKER_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const handleDefaultStatusIconClick = useLastCallback(() => {\n    onStickerSelect?.({\n      mediaType: 'sticker',\n      id: DEFAULT_STATUS_ICON_ID,\n      isLottie: false,\n      isVideo: false,\n      stickerSetInfo: {\n        shortName: 'dummy',\n      },\n    } satisfies ApiSticker);\n  });\n\n  const itemSize = isEmoji ? EMOJI_SIZE_PICKER : STICKER_SIZE_PICKER;\n  const margin = isEmoji ? emojiMarginPx : stickerMarginPx;\n  const verticalMargin = isEmoji ? emojiVerticalMarginPx : stickerMarginPx;\n\n  const calculateItemsPerRow = useLastCallback((width: number) => {\n    if (!width) {\n      return getItemsPerRowFallback(windowWidth);\n    }\n\n    return Math.floor((width + margin) / (itemSize + margin));\n  });\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setItemsPerRow(calculateItemsPerRow(entry.contentRect.width));\n  });\n\n  useResizeObserver(ref, handleResize);\n\n  useEffect(() => {\n    if (!ref.current) return;\n    setItemsPerRow(calculateItemsPerRow(ref.current.clientWidth));\n  }, [calculateItemsPerRow]);\n\n  useEffect(() => {\n    if (shouldRender && !stickerSet.stickers?.length && !stickerSet.reactions?.length && stickerSet.accessHash) {\n      loadStickers({\n        stickerSetInfo: {\n          id: stickerSet.id,\n          accessHash: stickerSet.accessHash,\n        },\n      });\n    }\n  }, [shouldRender, loadStickers, stickerSet]);\n\n  const isLocked = !isSavedMessages && !isCurrentUserPremium && isPremiumSet && !isChatEmojiSet;\n\n  const isInstalled = stickerSet.installedDate && !stickerSet.isArchived;\n\n  const canCut = !isInstalled && stickerSet.id !== RECENT_SYMBOL_SET_ID\n    && stickerSet.id !== POPULAR_SYMBOL_SET_ID && stickerSet.id !== EFFECT_EMOJIS_SET_ID\n    && stickerSet.id !== EFFECT_STICKERS_SET_ID && !isChatEmojiSet && !isChatStickerSet;\n\n  const [isCut, , expand] = useFlag(canCut);\n  const itemsBeforeCutout = itemsPerRow * 3 - 1;\n  const totalItemsCount = (withDefaultTopicIcon || withDefaultStatusIcon) ? stickerSet.count + 1 : stickerSet.count;\n\n  const itemHeight = itemSize + verticalMargin;\n  const heightWhenCut = Math.ceil(Math.min(itemsBeforeCutout, totalItemsCount) / itemsPerRow)\n    * itemHeight - verticalMargin;\n  const height = isCut ? heightWhenCut : Math.ceil(totalItemsCount / itemsPerRow) * itemHeight - verticalMargin;\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n  const collectibleEmojiIdsSet = useMemo(() => (\n    collectibleStatuses ? new Set(collectibleStatuses.map(({ documentId }) => documentId)) : undefined\n  ), [collectibleStatuses]);\n  const withAddSetButton = !shouldHideHeader && !isRecent && !isStatusCollectible\n    && isEmoji && !isPopular && !isChatEmojiSet\n    && (!isInstalled || (!isCurrentUserPremium && !isSavedMessages));\n  const addSetButtonText = useMemo(() => {\n    if (isLocked) {\n      if (isInstalled) return lang('lng_emoji_premium_restore');\n      return lang('Unlock');\n    }\n\n    return lang('Add');\n  }, [isLocked, lang, isInstalled]);\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`${idPrefix}-${index}`}\n      className={\n        buildClassName('symbol-set', isLocked && 'symbol-set-locked')\n      }\n    >\n      {!shouldHideHeader && (\n        <div className=\"symbol-set-header\">\n          <p className={buildClassName('symbol-set-title', withAddSetButton && 'symbol-set-title-external')}>\n            {isLocked && <Icon name=\"lock-badge\" className=\"symbol-set-locked-icon\" />}\n            <span className=\"symbol-set-name\">{stickerSet.title}</span>\n            {(isChatEmojiSet || isChatStickerSet) && (\n              <span className=\"symbol-set-chat\">{lang(isChatEmojiSet ? 'GroupEmoji' : 'GroupStickers')}</span>\n            )}\n            {withAddSetButton && Boolean(stickerSet.stickers) && (\n              <span className=\"symbol-set-amount\">\n                {lang(isEmoji ? 'EmojiCount' : 'Stickers', stickerSet.stickers.length, 'i')}\n              </span>\n            )}\n          </p>\n          {isRecent && (\n            <Icon className=\"symbol-set-remove\" name=\"close\" onClick={openConfirmModal} />\n          )}\n          {withAddSetButton && (\n            <Button\n              className=\"symbol-set-add-button\"\n              withPremiumGradient={isPremiumSet && !isCurrentUserPremium}\n              onClick={handleAddClick}\n              pill\n              size=\"tiny\"\n              fluid\n            >\n              {addSetButtonText}\n            </Button>\n          )}\n        </div>\n      )}\n      <div\n        className={buildClassName(\n          'symbol-set-container shared-canvas-container',\n          transitionClassNames,\n          stickerSet.id === EFFECT_EMOJIS_SET_ID && 'effect-emojis',\n        )}\n        style={`height: ${height}px;`}\n      >\n        <canvas\n          ref={sharedCanvasRef}\n          className=\"shared-canvas\"\n          style={canCut ? `height: ${heightWhenCut}px;` : undefined}\n        />\n        {(isRecent || isFavorite || canCut) && <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />}\n        {withDefaultTopicIcon && (\n          <Button\n            className=\"StickerButton custom-emoji\"\n            color=\"translucent\"\n            onClick={handleDefaultTopicIconClick}\n            key=\"default-topic-icon\"\n          >\n            <img src={grey} alt=\"Reset\" className=\"sticker-media\" draggable={false} />\n          </Button>\n        )}\n        {withDefaultStatusIcon && (\n          <Button\n            className=\"StickerButton custom-emoji status-default\"\n            color=\"translucent\"\n            onClick={handleDefaultStatusIconClick}\n            key=\"default-status-icon\"\n          >\n            <Icon name=\"star\" />\n          </Button>\n        )}\n        {shouldRender && stickerSet.reactions?.map((reaction) => {\n          const reactionId = getReactionKey(reaction);\n          const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n          return (\n            <ReactionEmoji\n              key={`${stickerSet.id}_${reactionId}`}\n              reaction={reaction}\n              isSelected={isSelected}\n              loadAndPlay={loadAndPlay}\n              availableReactions={availableReactions}\n              observeIntersection={observeIntersectionForPlayingItems}\n              onClick={onReactionSelect!}\n              onContextMenu={onReactionContext}\n              sharedCanvasRef={sharedCanvasRef}\n              sharedCanvasHqRef={sharedCanvasHqRef}\n              forcePlayback={forcePlayback}\n            />\n          );\n        })}\n        {shouldRender && stickerSet.stickers?.slice(0, isCut ? itemsBeforeCutout : stickerSet.stickers.length)\n          .map((sticker, i) => {\n            const isHqEmoji = (isRecent || isFavorite)\n              && selectIsAlwaysHighPriorityEmoji(getGlobal(), sticker.stickerSetInfo);\n            const canvasRef = (canCut && i >= itemsBeforeCutout) || isHqEmoji\n              ? sharedCanvasHqRef\n              : sharedCanvasRef;\n            const reactionId = sticker.isCustomEmoji ? sticker.id : sticker.emoji;\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            const withSparkles = sticker.id === COLLECTIBLE_STATUS_SET_ID\n              || collectibleEmojiIdsSet?.has(sticker.id);\n\n            return (\n              <StickerButton\n                key={sticker.id}\n                sticker={sticker}\n                size={itemSize}\n                observeIntersection={observeIntersectionForPlayingItems}\n                observeIntersectionForShowing={observeIntersectionForShowingItems}\n                noPlay={!loadAndPlay}\n                isSavedMessages={isSavedMessages}\n                isStatusPicker={isStatusPicker}\n                canViewSet\n                noContextMenu={noContextMenus}\n                isCurrentUserPremium={isCurrentUserPremium}\n                shouldIgnorePremium={isChatEmojiSet}\n                sharedCanvasRef={canvasRef}\n                withTranslucentThumb={isTranslucent}\n                onClick={onStickerSelect}\n                clickArg={sticker}\n                isSelected={isSelected}\n                onUnfaveClick={isFavorite && favoriteStickerIdsSet?.has(sticker.id) ? onStickerUnfave : undefined}\n                onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n                onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n                onContextMenuOpen={onContextMenuOpen}\n                onContextMenuClose={onContextMenuClose}\n                onContextMenuClick={onContextMenuClick}\n                forcePlayback={forcePlayback}\n                isEffectEmoji={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n                noShowPremium={isCurrentUserPremium\n                  && (stickerSet.id === EFFECT_STICKERS_SET_ID || stickerSet.id === EFFECT_EMOJIS_SET_ID)}\n                withSparkles={withSparkles}\n              />\n            );\n          })}\n        {isCut && totalItemsCount > itemsBeforeCutout && (\n          <Button\n            className=\"StickerButton custom-emoji set-expand\"\n            round\n            color=\"translucent\"\n            onClick={expand}\n            key=\"more\"\n          >\n            +\n            {totalItemsCount - itemsBeforeCutout}\n          </Button>\n        )}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang(isReactionPicker ? 'ClearRecentReactionsAlertMessage' : 'ClearRecentStickersAlertMessage')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return { collectibleStatuses };\n  },\n)(StickerSet));\n\nfunction getItemsPerRowFallback(windowWidth: number): number {\n  return windowWidth > MOBILE_WIDTH_THRESHOLD_PX\n    ? ITEMS_PER_ROW_FALLBACK\n    : (windowWidth < MINI_MOBILE_WIDTH_THRESHOLD_PX\n      ? ITEMS_MINI_MOBILE_PER_ROW_FALLBACK\n      : ITEMS_MOBILE_PER_ROW_FALLBACK);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"lq8BD6Hc\",\"main\":\"p7c8y0LH\",\"hasHeader\":\"zTGriBHY\",\"main_customEmoji\":\"U0BL1VvK\",\"mainCustomEmoji\":\"U0BL1VvK\",\"header\":\"Qn3lBUNs\",\"headerWithBorder\":\"HMspKpNp\",\"stickerCover\":\"YKO0Obwy\",\"activated\":\"y02WwQk6\",\"pickerDisabled\":\"BZfaP1GD\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiEmojiStatusType,\n  ApiReaction, ApiReactionWithPaid, ApiSticker, ApiStickerSet,\n} from '../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent } from '../../types';\n\nimport {\n  COLLECTIBLE_STATUS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n  TOP_SYMBOL_SET_ID,\n} from '../../config';\nimport { isSameReaction } from '../../global/helpers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChatFullInfo,\n  selectIsAlwaysHighPriorityEmoji,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n} from '../../global/selectors';\nimport animateHorizontalScroll from '../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { pickTruthy, unique, uniqueByField } from '../../util/iteratees';\nimport { REM } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../hooks/useHorizontalScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useScrolledState from '../../hooks/useScrolledState';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\nimport { useStickerPickerObservers } from './hooks/useStickerPickerObservers';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\nimport StickerSet from './StickerSet';\n\nimport pickerStyles from '../middle/composer/StickerPicker.module.scss';\nimport styles from './CustomEmojiPicker.module.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  className?: string;\n  pickerListClassName?: string;\n  isHidden?: boolean;\n  loadAndPlay: boolean;\n  idPrefix?: string;\n  withDefaultTopicIcons?: boolean;\n  selectedReactionIds?: string[];\n  isStatusPicker?: boolean;\n  isReactionPicker?: boolean;\n  isTranslucent?: boolean;\n  onCustomEmojiSelect: (sticker: ApiSticker) => void;\n  onReactionSelect?: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n  onContextMenuOpen?: NoneToVoidFunction;\n  onContextMenuClose?: NoneToVoidFunction;\n  onContextMenuClick?: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  customEmojisById?: Record<string, ApiSticker>;\n  recentCustomEmojiIds?: string[];\n  recentStatusEmojis?: ApiSticker[];\n  collectibleStatuses?: ApiEmojiStatusType[];\n  chatEmojiSetId?: string;\n  topReactions?: ApiReaction[];\n  recentReactions?: ApiReaction[];\n  defaultTagReactions?: ApiReaction[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  availableReactions?: ApiAvailableReaction[];\n  addedCustomEmojiIds?: string[];\n  defaultTopicIconsId?: string;\n  defaultStatusIconsId?: string;\n  customEmojiFeaturedIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  isWithPaidReaction?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst DEFAULT_ID_PREFIX = 'custom-emoji-set';\nconst TOP_REACTIONS_COUNT = 16;\nconst RECENT_REACTIONS_COUNT = 32;\nconst RECENT_DEFAULT_STATUS_COUNT = 7;\nconst FADED_BUTTON_SET_IDS = new Set([RECENT_SYMBOL_SET_ID, FAVORITE_SYMBOL_SET_ID, POPULAR_SYMBOL_SET_ID]);\nconst STICKER_SET_IDS_WITH_COVER = new Set([\n  RECENT_SYMBOL_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  POPULAR_SYMBOL_SET_ID,\n]);\n\nconst CustomEmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  pickerListClassName,\n  isHidden,\n  loadAndPlay,\n  addedCustomEmojiIds,\n  customEmojisById,\n  recentCustomEmojiIds,\n  selectedReactionIds,\n  recentStatusEmojis,\n  collectibleStatuses,\n  stickerSetsById,\n  chatEmojiSetId,\n  topReactions,\n  recentReactions,\n  availableReactions,\n  idPrefix = DEFAULT_ID_PREFIX,\n  customEmojiFeaturedIds,\n  canAnimate,\n  isReactionPicker,\n  isStatusPicker,\n  isTranslucent,\n  isSavedMessages,\n  isCurrentUserPremium,\n  withDefaultTopicIcons,\n  defaultTopicIconsId,\n  defaultStatusIconsId,\n  defaultTagReactions,\n  isWithPaidReaction,\n  onCustomEmojiSelect,\n  onReactionSelect,\n  onReactionContext,\n  onContextMenuOpen,\n  onContextMenuClose,\n  onContextMenuClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const recentCustomEmojis = useMemo(() => {\n    return isStatusPicker\n      ? recentStatusEmojis\n      : Object.values(pickTruthy(customEmojisById!, recentCustomEmojiIds!));\n  }, [customEmojisById, isStatusPicker, recentCustomEmojiIds, recentStatusEmojis]);\n\n  const collectibleStatusEmojis = useMemo(() => {\n    const collectibleStatusEmojiIds = collectibleStatuses?.map((status) => status.documentId);\n    return customEmojisById && collectibleStatusEmojiIds?.map((id) => customEmojisById[id]).filter(Boolean);\n  }, [customEmojisById, collectibleStatuses]);\n\n  const prefix = `${idPrefix}-custom-emoji`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const canLoadAndPlay = usePrevDuringAnimation(loadAndPlay || undefined, SLIDE_TRANSITION_DURATION);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedCustomEmojiIds);\n\n  const allSets = useMemo(() => {\n    const defaultSets: StickerSetOrReactionsSetOrRecent[] = [];\n\n    if (isReactionPicker && isSavedMessages) {\n      if (defaultTagReactions?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('PremiumPreviewTags'),\n          reactions: defaultTagReactions,\n          count: defaultTagReactions.length,\n          isEmoji: true,\n        });\n      }\n    }\n\n    if (isReactionPicker && !isSavedMessages) {\n      const topReactionsSlice: ApiReactionWithPaid[] = topReactions?.slice(0, TOP_REACTIONS_COUNT) || [];\n      if (isWithPaidReaction) {\n        topReactionsSlice.unshift({ type: 'paid' });\n      }\n      if (topReactionsSlice?.length) {\n        defaultSets.push({\n          id: TOP_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang('Reactions'),\n          reactions: topReactionsSlice,\n          count: topReactionsSlice.length,\n          isEmoji: true,\n        });\n      }\n\n      const cleanRecentReactions = (recentReactions || [])\n        .filter((reaction) => !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction)))\n        .slice(0, RECENT_REACTIONS_COUNT);\n      const cleanAvailableReactions = (availableReactions || [])\n        .filter(({ isInactive }) => !isInactive)\n        .map(({ reaction }) => reaction)\n        .filter((reaction) => {\n          return !topReactionsSlice.some((topReaction) => isSameReaction(topReaction, reaction))\n            && !cleanRecentReactions.some((topReaction) => isSameReaction(topReaction, reaction));\n        });\n      if (cleanAvailableReactions?.length || cleanRecentReactions?.length) {\n        const isPopular = !cleanRecentReactions?.length;\n        const allRecentReactions = cleanRecentReactions.concat(cleanAvailableReactions);\n        defaultSets.push({\n          id: isPopular ? POPULAR_SYMBOL_SET_ID : RECENT_SYMBOL_SET_ID,\n          accessHash: '',\n          title: oldLang(isPopular ? 'PopularReactions' : 'RecentStickers'),\n          reactions: allRecentReactions,\n          count: allRecentReactions.length,\n          isEmoji: true,\n        });\n      }\n    } else if (isStatusPicker) {\n      const defaultStatusIconsPack = stickerSetsById[defaultStatusIconsId!];\n      if (defaultStatusIconsPack?.stickers?.length) {\n        const stickers = uniqueByField(defaultStatusIconsPack.stickers\n          .slice(0, RECENT_DEFAULT_STATUS_COUNT)\n          .concat(recentCustomEmojis || []), 'id');\n        defaultSets.push({\n          ...defaultStatusIconsPack,\n          stickers,\n          count: stickers.length,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n          isEmoji: true,\n        });\n      }\n      if (collectibleStatusEmojis?.length) {\n        defaultSets.push({\n          id: COLLECTIBLE_STATUS_SET_ID,\n          accessHash: '',\n          count: collectibleStatusEmojis.length,\n          stickers: collectibleStatusEmojis,\n          title: lang('CollectibleStatusesCategory'),\n          isEmoji: true,\n        });\n      }\n    } else if (withDefaultTopicIcons) {\n      const defaultTopicIconsPack = stickerSetsById[defaultTopicIconsId!];\n      if (defaultTopicIconsPack.stickers?.length) {\n        defaultSets.push({\n          ...defaultTopicIconsPack,\n          id: RECENT_SYMBOL_SET_ID,\n          title: oldLang('RecentStickers'),\n        });\n      }\n    } else if (recentCustomEmojis?.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: oldLang('RecentStickers'),\n        stickers: recentCustomEmojis,\n        count: recentCustomEmojis.length,\n        isEmoji: true,\n      });\n    }\n\n    const userSetIds = [...(addedCustomEmojiIds || [])];\n    if (chatEmojiSetId) {\n      userSetIds.unshift(chatEmojiSetId);\n    }\n\n    const setIdsToDisplay = unique(userSetIds.concat(customEmojiFeaturedIds || []));\n\n    const setsToDisplay = Object.values(pickTruthy(stickerSetsById, setIdsToDisplay));\n\n    return [\n      ...defaultSets,\n      ...setsToDisplay,\n    ];\n  }, [\n    addedCustomEmojiIds, isReactionPicker, isStatusPicker, withDefaultTopicIcons, recentCustomEmojis,\n    customEmojiFeaturedIds, stickerSetsById, topReactions, availableReactions, oldLang, recentReactions,\n    defaultStatusIconsId, defaultTopicIconsId, isSavedMessages, defaultTagReactions, chatEmojiSetId,\n    isWithPaidReaction, collectibleStatusEmojis, lang,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  const canRenderContent = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContent = areAddedLoaded && canRenderContent && !noPopulatedSets;\n\n  useHorizontalScroll(headerRef, isMobile || !shouldRenderContent);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n  });\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      pickerStyles.stickerCover,\n      index === activeSetIndex && styles.activated,\n    );\n\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n    const isHq = selectIsAlwaysHighPriorityEmoji(getGlobal(), stickerSet as ApiStickerSet);\n\n    if (stickerSet.id === TOP_SYMBOL_SET_ID) {\n      return undefined;\n    }\n\n    if (STICKER_SET_IDS_WITH_COVER.has(stickerSet.id) || stickerSet.hasThumbnail || !firstSticker) {\n      const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === POPULAR_SYMBOL_SET_ID;\n      const isFaded = FADED_BUTTON_SET_IDS.has(stickerSet.id);\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={isFaded}\n          color=\"translucent\"\n\n          onClick={() => selectStickerSet(isRecent ? 0 : index)}\n        >\n          {isRecent ? (\n            <Icon name=\"recent\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !canLoadAndPlay}\n              forcePlayback\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n            />\n          )}\n        </Button>\n      );\n    }\n\n    return (\n      <StickerButton\n        key={stickerSet.id}\n        sticker={firstSticker}\n        size={STICKER_SIZE_PICKER_HEADER}\n        title={stickerSet.title}\n        className={buttonClassName}\n        noPlay={!canAnimate || !canLoadAndPlay}\n        observeIntersection={observeIntersectionForCovers}\n        noContextMenu\n        isCurrentUserPremium\n        sharedCanvasRef={withSharedCanvas ? (isHq ? sharedCanvasHqRef : sharedCanvasRef) : undefined}\n        withTranslucentThumb={isTranslucent}\n        onClick={selectStickerSet}\n        clickArg={index}\n        forcePlayback\n      />\n    );\n  }\n\n  const fullClassName = buildClassName('StickerPicker', styles.root, className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={fullClassName}>\n        {noPopulatedSets ? (\n          <div className={pickerStyles.pickerDisabled}>{oldLang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    pickerStyles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && pickerStyles.headerWithBorder,\n  );\n  const listClassName = buildClassName(\n    pickerStyles.main,\n    pickerStyles.main_customEmoji,\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    pickerListClassName,\n    pickerStyles.hasHeader,\n  );\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n      >\n        <div className=\"shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allSets.map(renderCover)}\n        </div>\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={listClassName}\n      >\n        {allSets.map((stickerSet, i) => {\n          const shouldHideHeader = stickerSet.id === TOP_SYMBOL_SET_ID\n            || (stickerSet.id === RECENT_SYMBOL_SET_ID && (withDefaultTopicIcons || isStatusPicker));\n          const isChatEmojiSet = stickerSet.id === chatEmojiSetId;\n\n          return (\n            <StickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              loadAndPlay={Boolean(canAnimate && canLoadAndPlay)}\n              index={i}\n              idPrefix={prefix}\n              observeIntersection={observeIntersectionForSet}\n              observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n              observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n              isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n              isSavedMessages={isSavedMessages}\n              isStatusPicker={isStatusPicker}\n              isReactionPicker={isReactionPicker}\n              shouldHideHeader={shouldHideHeader}\n              withDefaultTopicIcon={withDefaultTopicIcons && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              withDefaultStatusIcon={isStatusPicker && stickerSet.id === RECENT_SYMBOL_SET_ID}\n              isChatEmojiSet={isChatEmojiSet}\n              isCurrentUserPremium={isCurrentUserPremium}\n              selectedReactionIds={selectedReactionIds}\n              availableReactions={availableReactions}\n              isTranslucent={isTranslucent}\n              onReactionSelect={onReactionSelect}\n              onReactionContext={onReactionContext}\n              onStickerSelect={handleEmojiSelect}\n              onContextMenuOpen={onContextMenuOpen}\n              onContextMenuClose={onContextMenuClose}\n              onContextMenuClick={onContextMenuClick}\n              forcePlayback\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isStatusPicker, isReactionPicker }): StateProps => {\n    const {\n      stickers: {\n        setsById: stickerSetsById,\n      },\n      customEmojis: {\n        byId: customEmojisById,\n        featuredIds: customEmojiFeaturedIds,\n        statusRecent: {\n          emojis: recentStatusEmojis,\n        },\n      },\n      recentCustomEmojis: recentCustomEmojiIds,\n      reactions: {\n        availableReactions,\n        recentReactions,\n        topReactions,\n        defaultTags,\n      },\n    } = global;\n\n    const isSavedMessages = Boolean(chatId && selectIsChatWithSelf(global, chatId));\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const collectibleStatuses = global.collectibleEmojiStatuses?.statuses;\n\n    return {\n      customEmojisById,\n      recentCustomEmojiIds: !isStatusPicker ? recentCustomEmojiIds : undefined,\n      recentStatusEmojis: isStatusPicker ? recentStatusEmojis : undefined,\n      collectibleStatuses: isStatusPicker ? collectibleStatuses : undefined,\n      stickerSetsById,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      canAnimate: selectCanPlayAnimatedEmojis(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      customEmojiFeaturedIds,\n      defaultTopicIconsId: global.defaultTopicIconsId,\n      defaultStatusIconsId: global.defaultStatusIconsId,\n      topReactions: isReactionPicker ? topReactions : undefined,\n      recentReactions: isReactionPicker ? recentReactions : undefined,\n      chatEmojiSetId: chatFullInfo?.emojiSet?.id,\n      isWithPaidReaction: isReactionPicker && chatFullInfo?.isPaidReactionAvailable,\n      availableReactions: isReactionPicker ? availableReactions : undefined,\n      defaultTagReactions: isReactionPicker ? defaultTags : undefined,\n    };\n  },\n)(CustomEmojiPicker));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Qk9PEGRE\",\"activated\":\"WYeuJNQx\"};","// extracted by mini-css-extract-plugin\nexport default {\"menuContent\":\"hRzvfaRb\"};","import type { ElementRef, FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { selectIsContextMenuTranslucent } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\n\nimport styles from './StatusPickerMenu.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  statusButtonRef: ElementRef<HTMLButtonElement>;\n  onEmojiStatusSelect: (emojiStatus: ApiSticker) => void;\n  onClose: () => void;\n};\n\ninterface StateProps {\n  areFeaturedStickersLoaded?: boolean;\n  isTranslucent?: boolean;\n}\n\nconst StatusPickerMenu: FC<OwnProps & StateProps> = ({\n  isOpen,\n  statusButtonRef,\n  areFeaturedStickersLoaded,\n  isTranslucent,\n  onEmojiStatusSelect,\n  onClose,\n}) => {\n  const { loadFeaturedEmojiStickers } = getActions();\n\n  const transformOriginX = useRef<number>();\n  const [isContextMenuShown, markContextMenuShown, unmarkContextMenuShown] = useFlag();\n  useEffect(() => {\n    transformOriginX.current = statusButtonRef.current!.getBoundingClientRect().right;\n  }, [isOpen, statusButtonRef]);\n\n  useEffect(() => {\n    if (isOpen && !areFeaturedStickersLoaded) {\n      loadFeaturedEmojiStickers();\n    }\n  }, [areFeaturedStickersLoaded, isOpen, loadFeaturedEmojiStickers]);\n\n  const handleEmojiSelect = useCallback((sticker: ApiSticker) => {\n    onEmojiStatusSelect(sticker);\n    onClose();\n  }, [onClose, onEmojiStatusSelect]);\n\n  return (\n    <Portal>\n      <Menu\n        isOpen={isOpen}\n        noCompact\n        positionX=\"right\"\n        bubbleClassName={styles.menuContent}\n        onClose={onClose}\n        transformOriginX={transformOriginX.current}\n        noCloseOnBackdrop={isContextMenuShown}\n      >\n        <CustomEmojiPicker\n          idPrefix=\"status-emoji-set-\"\n          loadAndPlay={isOpen}\n          isHidden={!isOpen}\n          isStatusPicker\n          isTranslucent={isTranslucent}\n          onContextMenuOpen={markContextMenuShown}\n          onContextMenuClose={unmarkContextMenuShown}\n          onCustomEmojiSelect={handleEmojiSelect}\n          onContextMenuClick={onClose}\n        />\n      </Menu>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    areFeaturedStickersLoaded: Boolean(global.customEmojis.featuredIds?.length),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n  };\n})(StatusPickerMenu));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"C9sWDINB\",\"topEmoji\":\"gdG3oY21\",\"description\":\"p7S4AH8A\",\"title\":\"KVpsce1g\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SuggestedStatusModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['suggestedStatusModal'];\n};\n\ntype StateProps = {\n  bot?: ApiUser;\n  currentUser?: ApiUser;\n};\n\nconst CUSTOM_EMOJI_SIZE = 6 * REM;\n\nconst SuggestedStatusModal = ({ modal, currentUser, bot }: OwnProps & StateProps) => {\n  const { setEmojiStatus, closeSuggestedStatusModal, sendWebAppEvent } = getActions();\n\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !renderingModal) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: renderingModal.customEmojiId,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, renderingModal]);\n\n  const description = useMemo(() => {\n    if (!renderingModal || !bot) return undefined;\n\n    const botName = getUserFullName(bot);\n\n    if (renderingModal.duration) {\n      return lang('BotSuggestedStatusFor', {\n        bot: botName,\n        duration: formatShortDuration(lang, renderingModal.duration),\n      }, {\n        withNodes: true,\n        withMarkdown: true,\n      });\n    }\n\n    return lang('BotSuggestedStatus', { bot: botName }, { withNodes: true, withMarkdown: true });\n  }, [bot, lang, renderingModal]);\n\n  const handleClose = useLastCallback(() => {\n    const webAppKey = renderingModal?.webAppKey;\n\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'emoji_status_failed',\n          eventData: {\n            error: 'USER_DECLINED',\n          },\n        },\n      });\n    }\n\n    closeSuggestedStatusModal();\n  });\n\n  const handleSetStatus = useLastCallback(() => {\n    if (!renderingModal) return;\n\n    const expires = renderingModal.duration ? getServerTime() + renderingModal.duration : undefined;\n\n    setEmojiStatus({\n      referrerWebAppKey: renderingModal.webAppKey,\n      emojiStatus: { type: 'regular', documentId: renderingModal.customEmojiId, until: expires },\n    });\n    closeSuggestedStatusModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      contentClassName={styles.content}\n      hasAbsoluteCloseButton\n      isSlim\n      onClose={handleClose}\n    >\n      {renderingModal && (\n        <CustomEmoji\n          className={styles.topEmoji}\n          documentId={renderingModal.customEmojiId}\n          size={CUSTOM_EMOJI_SIZE}\n          loopLimit={1}\n          forceAlways\n        />\n      )}\n      <div>\n        <h3 className={styles.title}>{lang('BotSuggestedStatusTitle')}</h3>\n        <p className={styles.description}>{description}</p>\n      </div>\n      {mockPeerWithStatus && (\n        <PeerChip\n          mockPeer={mockPeerWithStatus}\n          withEmojiStatus\n        />\n      )}\n      <Button size=\"smaller\" onClick={handleSetStatus}>\n        {lang('GeneralConfirm')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const bot = modal?.botId ? selectUser(global, modal.botId) : undefined;\n\n    return {\n      currentUser,\n      bot,\n    };\n  },\n)(SuggestedStatusModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"pUyNTysT\",\"modal\":\"IK2mBqbm\",\"loading\":\"zjXCH3pT\",\"description\":\"j6xEoljc\",\"bold\":\"hAA6B1lc\",\"chip\":\"smWR78pO\",\"replaceModal\":\"GIFAjZPY\",\"replaceModalContent\":\"Jxyz9TaL\",\"avatarContainer\":\"OKp6HS1U\",\"arrow\":\"WSJdWV7L\",\"boostedWrapper\":\"NU9itcIm\",\"boostedMark\":\"upXvhNRY\"};","import { memo, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiMyBoost } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getChatTitle, isChatAdmin, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatShortDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Loading from '../../ui/Loading';\nimport Modal from '../../ui/Modal';\n\nimport styles from './BoostModal.module.scss';\n\ntype LoadedParams = {\n  boost?: ApiMyBoost;\n  leftText: string;\n  rightText?: string;\n  value: string;\n  progress: number;\n  descriptionText: string;\n  isBoosted?: boolean;\n  canBoostMore?: boolean;\n};\n\ntype BoostInfo = ({\n  isStatusLoaded: false;\n  title: string;\n} & Undefined<LoadedParams>) | ({\n  isStatusLoaded: true;\n  title: string;\n} & LoadedParams);\n\nexport type OwnProps = {\n  modal: TabState['boostModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  prevBoostedChat?: ApiChat;\n  isCurrentUserPremium?: boolean;\n};\n\nconst BoostModal = ({\n  modal,\n  chat,\n  chatFullInfo,\n  prevBoostedChat,\n  isCurrentUserPremium,\n}: OwnProps & StateProps) => {\n  const {\n    applyBoost,\n    closeBoostModal,\n    requestConfetti,\n    openPremiumModal,\n    loadFullChat,\n  } = getActions();\n\n  const [isReplaceModalOpen, openReplaceModal, closeReplaceModal] = useFlag();\n  const [isWaitDialogOpen, openWaitDialog, closeWaitDialog] = useFlag();\n  const [isPremiumDialogOpen, openPremiumDialog, closePremiumDialog] = useFlag();\n\n  const isChannel = chat && isChatChannel(chat);\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (chat && !chatFullInfo) {\n      loadFullChat({ chatId: chat.id });\n    }\n  }, [chat, chatFullInfo]);\n\n  const chatTitle = useMemo(() => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, chat);\n  }, [chat, oldLang]);\n\n  const boostedChatTitle = useMemo(() => {\n    if (!prevBoostedChat) {\n      return undefined;\n    }\n\n    return getChatTitle(oldLang, prevBoostedChat);\n  }, [prevBoostedChat, oldLang]);\n\n  const {\n    isStatusLoaded,\n    isBoosted,\n    boost,\n    title,\n    leftText,\n    rightText,\n    value,\n    progress,\n    descriptionText,\n    canBoostMore,\n  }: BoostInfo = useMemo(() => {\n    if (!modal?.boostStatus || !chat) {\n      return {\n        isStatusLoaded: false,\n        title: oldLang('Loading'),\n      };\n    }\n\n    const {\n      hasMyBoost,\n    } = modal.boostStatus;\n\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, chat.id);\n    const areBoostsInDifferentChannels = modal?.myBoosts && !areAllBoostsInChannel(modal.myBoosts, chat.id);\n\n    const {\n      boosts,\n      currentLevel,\n      hasNextLevel,\n      levelProgress,\n      remainingBoosts,\n      isMaxLevel,\n    } = getBoostProgressInfo(modal.boostStatus, true);\n\n    const hasBoost = hasMyBoost;\n\n    const left = oldLang('BoostsLevel', currentLevel);\n    const right = hasNextLevel ? oldLang('BoostsLevel', currentLevel + 1) : undefined;\n\n    const moreBoosts = oldLang('ChannelBoost.MoreBoosts', remainingBoosts);\n\n    const modalTitle = isChannel ? oldLang('BoostChannel') : oldLang('BoostGroup');\n\n    const boostsLeftToUnrestrict = (chatFullInfo?.boostsToUnrestrict || 0) - (chatFullInfo?.boostsApplied || 0);\n\n    let description: string | undefined;\n    if (isMaxLevel) {\n      description = oldLang('BoostsMaxLevelReached');\n    } else if (boostsLeftToUnrestrict > 0 && !isChatAdmin(chat)) {\n      const boostTimes = oldLang('GroupBoost.BoostToUnrestrict.Times', boostsLeftToUnrestrict);\n      description = oldLang('GroupBoost.BoostToUnrestrict', [boostTimes, chatTitle]);\n    } else {\n      description = oldLang('ChannelBoost.MoreBoostsNeeded.Text', [chatTitle, moreBoosts]);\n    }\n\n    return {\n      isStatusLoaded: true,\n      title: modalTitle,\n      leftText: left,\n      rightText: right,\n      value: boosts.toString(),\n      progress: levelProgress,\n      remainingBoosts,\n      descriptionText: description,\n      boost: firstBoost,\n      isBoosted: hasBoost,\n      canBoostMore: areBoostsInDifferentChannels && !isMaxLevel,\n    };\n  }, [chat, chatTitle, modal, oldLang, chatFullInfo, isChannel]);\n\n  const isBoostDisabled = !modal?.myBoosts?.length && isCurrentUserPremium;\n  const isReplacingBoost = boost?.chatId && boost.chatId !== modal?.chatId;\n\n  const handleApplyBoost = useLastCallback(() => {\n    closeReplaceModal();\n    applyBoost({ chatId: chat!.id, slots: [boost!.slot] });\n    requestConfetti({});\n  });\n\n  const handleProceedPremium = useLastCallback(() => {\n    openPremiumModal();\n    closePremiumDialog();\n    closeBoostModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (!boost) {\n      if (!isCurrentUserPremium) {\n        openPremiumDialog();\n        return;\n      }\n\n      closeBoostModal();\n      return;\n    }\n\n    if (!canBoostMore) {\n      closeBoostModal();\n      return;\n    }\n\n    if (boost.cooldownUntil) {\n      openWaitDialog();\n      return;\n    }\n\n    if (isReplacingBoost) {\n      openReplaceModal();\n      return;\n    }\n\n    handleApplyBoost();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeBoostModal();\n  });\n\n  function renderContent() {\n    if (!isStatusLoaded) {\n      return <Loading className={styles.loading} />;\n    }\n\n    return (\n      <>\n        <PremiumProgress\n          leftText={leftText}\n          rightText={rightText}\n          progress={progress}\n          floatingBadgeText={value}\n          floatingBadgeIcon=\"boost\"\n        />\n        {isBoosted && (\n          <div className={buildClassName(styles.description, styles.bold)}>\n            {oldLang('ChannelBoost.YouBoostedChannelText', chatTitle)}\n          </div>\n        )}\n        <div className={styles.description}>\n          {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n        </div>\n        <div className=\"dialog-buttons\">\n          <Button isText className=\"confirm-dialog-button\" disabled={isBoostDisabled} onClick={handleButtonClick}>\n            {canBoostMore ? (\n              <>\n                <Icon name=\"boost\" />\n                {oldLang(isChannel ? 'ChannelBoost.BoostChannel' : 'GroupBoost.BoostGroup')}\n              </>\n            ) : oldLang('OK')}\n          </Button>\n          <Button isText className=\"confirm-dialog-button\" onClick={handleCloseClick}>\n            {oldLang('Cancel')}\n          </Button>\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      className={styles.modal}\n      contentClassName={styles.content}\n      onClose={closeBoostModal}\n    >\n      {renderContent()}\n      {isReplacingBoost && boostedChatTitle && (\n        <Modal\n          isOpen={isReplaceModalOpen}\n          className={styles.replaceModal}\n          contentClassName={styles.replaceModalContent}\n          onClose={closeReplaceModal}\n        >\n          <div className={styles.avatarContainer}>\n            <div className={styles.boostedWrapper}>\n              <Avatar peer={prevBoostedChat} size=\"large\" />\n              <Icon name=\"boostcircle\" className={styles.boostedMark} />\n            </div>\n            <Icon name=\"next\" className={styles.arrow} />\n            <Avatar peer={chat} size=\"large\" />\n          </div>\n          <div>\n            {renderText(\n              oldLang('ChannelBoost.ReplaceBoost', [boostedChatTitle, chatTitle]), ['simple_markdown', 'emoji'],\n            )}\n          </div>\n          <div className=\"dialog-buttons\">\n            <Button isText className=\"confirm-dialog-button\" onClick={handleApplyBoost}>\n              {oldLang('Replace')}\n            </Button>\n            <Button isText className=\"confirm-dialog-button\" onClick={closeReplaceModal}>\n              {oldLang('Cancel')}\n            </Button>\n          </div>\n        </Modal>\n      )}\n      {Boolean(boost?.cooldownUntil) && (\n        <ConfirmDialog\n          isOpen={isWaitDialogOpen}\n          isOnlyConfirm\n          confirmLabel={oldLang('OK')}\n          title={oldLang('ChannelBoost.Error.BoostTooOftenTitle')}\n          onClose={closeWaitDialog}\n          confirmHandler={closeWaitDialog}\n        >\n          {renderText(\n            oldLang(\n              'ChannelBoost.Error.BoostTooOftenText',\n              formatShortDuration(lang, boost.cooldownUntil - getServerTime()),\n            ),\n            ['simple_markdown', 'emoji'],\n          )}\n        </ConfirmDialog>\n      )}\n      {!isCurrentUserPremium && (\n        <ConfirmDialog\n          isOpen={isPremiumDialogOpen}\n          confirmLabel={oldLang('Common.Yes')}\n          title={oldLang('PremiumNeeded')}\n          onClose={closePremiumDialog}\n          confirmHandler={handleProceedPremium}\n        >\n          {renderText(oldLang('PremiumNeededForBoosting'), ['simple_markdown', 'emoji'])}\n        </ConfirmDialog>\n      )}\n    </Modal>\n  );\n};\n\nfunction getFirstAvailableBoost(myBoosts: ApiMyBoost[], chatId?: string) {\n  return myBoosts.find((boost) => !boost.chatId)\n    || myBoosts.filter((b) => chatId && b.chatId !== chatId)\n      .sort((a, b) => a.date - b.date)[0];\n}\n\nfunction areAllBoostsInChannel(myBoosts: ApiMyBoost[], chatId: string) {\n  return myBoosts.every((boost) => boost.chatId === chatId);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal && selectChat(global, modal?.chatId);\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const firstBoost = modal?.myBoosts && getFirstAvailableBoost(modal.myBoosts, modal.chatId);\n    const boostedChat = firstBoost?.chatId ? selectChat(global, firstBoost?.chatId) : undefined;\n\n    return {\n      chat,\n      chatFullInfo,\n      prevBoostedChat: boostedChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(BoostModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"clickable\":\"IzcASdzD\",\"centered\":\"xVLGjLub\",\"logo\":\"Mtx4SWww\"};","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPeer } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { TME_LINK_PREFIX } from '../../../config';\nimport { selectChatMessage, selectSender } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport TableInfoModal, { type TableData } from '../common/TableInfoModal';\n\nimport styles from './GiftCodeModal.module.scss';\n\nimport PremiumLogo from '../../../assets/premium/PremiumLogo.svg';\n\nexport type OwnProps = {\n  modal: TabState['giftCodeModal'];\n};\n\nexport type StateProps = {\n  currentUserId?: string;\n  messageSender?: ApiPeer;\n};\n\nconst GIFTCODE_PATH = 'giftcode';\n\nconst GiftCodeModal = ({\n  currentUserId,\n  modal,\n  messageSender,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, applyGiftCode, focusMessage,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const canUse = (!modal?.info.toId || modal?.info.toId === currentUserId) && !modal?.info.usedAt;\n\n  const handleOpenGiveaway = useLastCallback(() => {\n    if (!modal || !modal.info.giveawayMessageId) return;\n    focusMessage({\n      chatId: modal.info.fromId!,\n      messageId: modal.info.giveawayMessageId,\n    });\n    closeGiftCodeModal();\n  });\n\n  const handleButtonClick = useLastCallback(() => {\n    if (canUse) {\n      applyGiftCode({ slug: modal!.slug });\n      return;\n    }\n    closeGiftCodeModal();\n  });\n\n  const modalData = useMemo(() => {\n    if (!modal) return undefined;\n    const { slug, info } = modal;\n\n    const fromId = info.fromId || messageSender?.id;\n\n    const header = (\n      <>\n        <img src={PremiumLogo} alt=\"\" className={styles.logo} />\n        <p className={styles.centered}>{renderText(lang('lng_gift_link_about'), ['simple_markdown'])}</p>\n        <LinkField title=\"BoostingGiftLink\" link={`${TME_LINK_PREFIX}/${GIFTCODE_PATH}/${slug}`} />\n      </>\n    );\n\n    const tableData: TableData = [\n      [lang('BoostingFrom'), fromId ? { chatId: fromId } : lang('BoostingNoRecipient')],\n      [lang('BoostingTo'), info.toId ? { chatId: info.toId } : lang('BoostingNoRecipient')],\n      [lang('BoostingGift'), lang('BoostingTelegramPremiumFor', lang('Months', info.months, 'i'))],\n    ];\n    if (info.isFromGiveaway) {\n      tableData.push([\n        lang('BoostingReason'),\n        (\n          <span\n            className={buildClassName(info.giveawayMessageId && styles.clickable)}\n            onClick={handleOpenGiveaway}\n          >\n            {info.isFromGiveaway && !info.toId\n              ? lang('BoostingIncompleteGiveaway')\n              : lang('BoostingGiveaway')}\n          </span>\n        ),\n      ]);\n    }\n    tableData.push([\n      lang('BoostingDate'),\n      formatDateTimeToString(info.date * 1000, lang.code, true),\n    ]);\n\n    const footer = (\n      <span className={styles.centered}>\n        {renderText(\n          info.usedAt ? lang('BoostingUsedLinkDate', formatDateTimeToString(info.usedAt * 1000, lang.code, true))\n            : lang('BoostingSendLinkToAnyone'),\n          ['simple_markdown'],\n        )}\n      </span>\n    );\n\n    return {\n      header,\n      tableData,\n      footer,\n    };\n  }, [lang, messageSender?.id, modal]);\n\n  if (!modalData) return undefined;\n\n  return (\n    <TableInfoModal\n      isOpen={isOpen}\n      title={lang('lng_gift_link_title')}\n      tableData={modalData.tableData}\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={canUse ? lang('BoostingUseLink') : lang('Close')}\n      onButtonClick={handleButtonClick}\n      onClose={closeGiftCodeModal}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { message } = modal || {};\n    const chatMessage = message && selectChatMessage(global, message.chatId, message.messageId);\n    const sender = chatMessage && selectSender(global, chatMessage);\n\n    return {\n      currentUserId: global.currentUserId,\n      messageSender: sender,\n    };\n  },\n)(GiftCodeModal));\n","export function getClosestEntry(arr: number[], value: number): number {\n  return arr.reduce((prev, curr) => {\n    return Math.abs(curr - value) < Math.abs(prev - value) ? curr : prev;\n  });\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"X6K5oA8U\"};","import { memo, useEffect, useMemo, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config.ts';\nimport { getClosestEntry } from '../../../util/getClosestEntry.ts';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup.tsx';\n\nimport styles from './DeleteAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['deleteAccountModal'];\n};\n\nexport type StateProps = {\n  selfDestructAccountDays?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst DeleteAccountModal = ({\n  modal,\n  selfDestructAccountDays,\n}: OwnProps & StateProps) => {\n  const {\n    closeGiftCodeModal, closeDeleteAccountModal, setAccountTTL,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const [selectedOption, setSelectedOption] = useState<string>();\n\n  const optionToDays = useLastCallback((value: string): number => {\n    return Number(value) * DAYS_PER_MONTH;\n  });\n\n  const initialSelectedOption = useMemo(() => {\n    if (!selfDestructAccountDays) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, selfDestructAccountDays / DAYS_PER_MONTH).toString();\n  }, [selfDestructAccountDays]);\n\n  useEffect(() => {\n    if (initialSelectedOption) {\n      setSelectedOption(initialSelectedOption);\n    }\n  }, [initialSelectedOption]);\n\n  const options: { value: string; label: string }[] = useMemo(() => {\n    return ACCOUNT_TTL_OPTIONS.map((months) => ({\n      value: String(months),\n      label: lang('Months', { count: months }, { pluralValue: 1 }),\n    }));\n  }, [lang]);\n\n  const handleChange = useLastCallback((value: string) => {\n    setSelectedOption(value);\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!selectedOption) return;\n    setAccountTTL({ days: optionToDays(selectedOption) });\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteAccountModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={lang('SelfDestructTitle')}\n      onClose={closeGiftCodeModal}\n      className={styles.root}\n    >\n      <p>{lang('SelfDestructSessionsDescription')}</p>\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedOption}\n        onChange={handleChange}\n        withIcon\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n        >\n          {lang('Save')}\n        </Button>\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { selfDestructAccountDays } = modal || {};\n\n    return {\n      selfDestructAccountDays,\n    };\n  },\n)(DeleteAccountModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"dl10exNi\",\"picker-wrapper\":\"gxWY5c6x\",\"pickerWrapper\":\"gxWY5c6x\",\"picker-header\":\"h8N7eyob\",\"pickerHeader\":\"h8N7eyob\",\"picker-header-info\":\"Rth2Qu07\",\"pickerHeaderInfo\":\"Rth2Qu07\",\"selection-toggle\":\"B6eAugx8\",\"selectionToggle\":\"B6eAugx8\",\"foldersWrapper\":\"mwcvgD2S\",\"folders\":\"LKavx8ww\",\"folder\":\"qglLx5Dn\",\"button-text\":\"bgaRuEMs\",\"buttonText\":\"bgaRuEMs\",\"button-badge\":\"rTe14Z22\",\"buttonBadge\":\"rTe14Z22\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistInviteAlready } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteAlready;\n  folder: ApiChatFolder;\n};\n\nconst ChatlistAlready: FC<OwnProps> = ({ invite, folder }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.missingPeerIds);\n\n  const hasChatsToAdd = Boolean(invite.missingPeerIds.length);\n  const isNew = invite.alreadyPeerIds.length === 0;\n  const newChatsCount = hasChatsToAdd ? invite.missingPeerIds.length : 0;\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const descriptionText = isNew ? lang('FolderLinkSubtitleNew')\n    : newChatsCount ? lang('FolderLinkSubtitleAdd', {\n      chats: lang('FolderLinkSubtitleAddCount', { count: newChatsCount }, { pluralValue: newChatsCount }),\n      title: renderTextWithEntities({\n        text: folder.title.text,\n        entities: folder.title.entities,\n        noCustomEmojiPlayback: folder.noTitleAnimations,\n      }),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    }) : lang('FolderLinkSubtitleAlready');\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    if (!selectedPeerIds.length) return;\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.missingPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : invite.missingPeerIds);\n  }, [invite.missingPeerIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {renderText(descriptionText, ['simple_markdown', 'emoji'])}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        {Boolean(invite.missingPeerIds.length) && (\n          <>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {oldLang('FolderLinkHeaderChatsJoin', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === invite.missingPeerIds.length\n                  ? oldLang('DeselectAll') : oldLang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={invite.missingPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </>\n        )}\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderAlready')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.alreadyPeerIds}\n          lockedSelectedIds={invite.alreadyPeerIds}\n          selectedIds={invite.alreadyPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && oldLang('OK')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {oldLang('FolderLinkButtonJoinPlural', selectedPeerIds.length, 'i')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistAlready);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  folder: ApiChatFolder;\n  suggestedPeerIds?: string[];\n};\n\nconst ChatlistDelete: FC<OwnProps> = ({\n  folder,\n  suggestedPeerIds = MEMO_EMPTY_ARRAY,\n}) => {\n  const { closeChatlistModal, leaveChatlist } = getActions();\n\n  const lang = useOldLang();\n\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>([]);\n\n  const badgeText = selectedPeerIds.length ? selectedPeerIds.length.toString() : undefined;\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === suggestedPeerIds.length;\n    setSelectedPeerIds(areAllSelected ? [] : suggestedPeerIds);\n  }, [suggestedPeerIds, selectedPeerIds.length]);\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n    leaveChatlist({ folderId: folder.id, peerIds: selectedPeerIds });\n  }, [folder.id, selectedPeerIds]);\n\n  return (\n    <div className={styles.content}>\n      {Boolean(suggestedPeerIds?.length) && (\n        <>\n          <div className={styles.description}>\n            {renderText(lang('FolderLinkSubtitleRemove'), ['simple_markdown', 'emoji'])}\n          </div>\n          <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n            <div className={styles.pickerHeader}>\n              <div className={styles.pickerHeaderInfo}>\n                {lang('FolderLinkHeaderChatsQuit', selectedPeerIds.length, 'i')}\n              </div>\n              <div\n                className={styles.selectionToggle}\n                role=\"button\"\n                tabIndex={0}\n                onClick={handleSelectionToggle}\n              >\n                {selectedPeerIds.length === suggestedPeerIds.length ? lang('DeselectAll') : lang('SelectAll')}\n              </div>\n            </div>\n            <PeerPicker\n              itemIds={suggestedPeerIds}\n              onSelectedIdsChange={setSelectedPeerIds}\n              selectedIds={selectedPeerIds}\n              allowMultiple\n              withStatus\n              itemInputType=\"checkbox\"\n            />\n          </div>\n        </>\n      )}\n      <Button\n        size=\"smaller\"\n        onClick={handleButtonClick}\n      >\n        <div className={styles.buttonText}>\n          {!selectedPeerIds.length && lang('FolderLinkButtonRemove')}\n          {Boolean(selectedPeerIds.length) && (\n            <>\n              {lang('FolderLinkButtonRemoveChats')}\n              <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n            </>\n          )}\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistDelete);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiChatlistInviteNew } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Badge from '../../ui/Badge';\nimport Button from '../../ui/Button';\n\nimport styles from './ChatlistModal.module.scss';\n\ntype OwnProps = {\n  invite: ApiChatlistInviteNew;\n};\n\nconst ChatlistNew: FC<OwnProps> = ({ invite }) => {\n  const { closeChatlistModal, joinChatlistInvite } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n  const [selectedPeerIds, setSelectedPeerIds] = useState<string[]>(invite.peerIds);\n\n  const joinedIds = useMemo(() => {\n    const chatsById = getGlobal().chats.byId;\n    return invite.peerIds.filter((id) => !chatsById[id].isNotJoined);\n  }, [invite.peerIds]);\n\n  const selectedCount = selectedPeerIds.length - joinedIds.length;\n\n  const badgeText = selectedCount ? selectedCount.toString() : undefined;\n\n  const handleButtonClick = useCallback(() => {\n    closeChatlistModal();\n\n    joinChatlistInvite({\n      invite,\n      peerIds: selectedPeerIds,\n    });\n  }, [invite, selectedPeerIds]);\n\n  const handleSelectionToggle = useCallback(() => {\n    const areAllSelected = selectedPeerIds.length === invite.peerIds.length;\n    setSelectedPeerIds(areAllSelected ? joinedIds : invite.peerIds);\n  }, [invite.peerIds, joinedIds, selectedPeerIds.length]);\n\n  return (\n    <div className={styles.content}>\n      <div className={styles.description}>\n        {lang('FolderLinkSubtitleNew')}\n      </div>\n      <div className={buildClassName(styles.pickerWrapper, 'custom-scroll')}>\n        <div className={styles.pickerHeader}>\n          <div className={styles.pickerHeaderInfo}>\n            {oldLang('FolderLinkHeaderChatsJoin', selectedCount, 'i')}\n          </div>\n          <div\n            className={styles.selectionToggle}\n            role=\"button\"\n            tabIndex={0}\n            onClick={handleSelectionToggle}\n          >\n            {selectedPeerIds.length === invite.peerIds.length ? oldLang('DeselectAll') : oldLang('SelectAll')}\n          </div>\n        </div>\n        <PeerPicker\n          itemIds={invite.peerIds}\n          lockedSelectedIds={joinedIds}\n          onSelectedIdsChange={setSelectedPeerIds}\n          selectedIds={selectedPeerIds}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n      <Button\n        onClick={handleButtonClick}\n        size=\"smaller\"\n        disabled={!selectedPeerIds.length}\n      >\n        <div className={styles.buttonText}>\n          {lang('FolderLinkAddFolder')}\n          <Badge className={styles.buttonBadge} text={badgeText} isAlternateColor />\n        </div>\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ChatlistNew);\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { selectChatFolder } from '../../../global/selectors';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Modal from '../../ui/Modal';\nimport Tab from '../../ui/Tab';\nimport ChatlistAlready from './ChatlistAlready';\nimport ChatlistDelete from './ChatlistDelete';\nimport ChatlistNew from './ChatlistNew';\n\nimport styles from './ChatlistModal.module.scss';\n\nexport type OwnProps = {\n  modal?: TabState['chatlistModal'];\n};\n\ntype StateProps = {\n  folder?: ApiChatFolder;\n};\n\nconst ChatlistInviteModal: FC<OwnProps & StateProps> = ({\n  modal,\n  folder,\n}) => {\n  const { closeChatlistModal } = getActions();\n\n  const lang = useOldLang();\n\n  const isOpen = Boolean(modal);\n  const renderingInfo = usePreviousDeprecated(modal) || modal;\n  const renderingFolder = usePreviousDeprecated(folder) || folder;\n\n  const title = useMemo(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return invite.missingPeerIds.length ? lang('FolderLinkTitleAddChats') : lang('FolderLinkTitleAlready');\n      }\n      return lang('FolderLinkTitleAdd');\n    }\n    if (renderingInfo.removal) {\n      return lang('FolderLinkTitleRemove');\n    }\n\n    return undefined;\n  }, [lang, renderingInfo]);\n\n  const renderingFolderTitle = useMemo(() => {\n    if (renderingFolder) {\n      return renderTextWithEntities({\n        text: renderingFolder.title.text,\n        entities: renderingFolder.title.entities,\n        noCustomEmojiPlayback: renderingFolder.noTitleAnimations,\n      });\n    }\n    if (renderingInfo?.invite && 'title' in renderingInfo.invite) {\n      return renderTextWithEntities({\n        text: renderingInfo.invite.title.text,\n        entities: renderingInfo.invite.title.entities,\n        noCustomEmojiPlayback: renderingInfo.invite.noTitleAnimations,\n      });\n    }\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  const folderTabNumber = useMemo(() => {\n    if (!renderingInfo?.invite) return undefined;\n    if ('missingPeerIds' in renderingInfo.invite) return renderingInfo.invite.missingPeerIds.length;\n    return undefined;\n  }, [renderingInfo]);\n\n  function renderFolders(folderTitle: TeactNode) {\n    return (\n      <div className={styles.foldersWrapper}>\n        <div className={styles.folders}>\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewLeft')} />\n          <Tab\n            className={styles.folder}\n            isActive\n            badgeCount={folderTabNumber}\n            isBadgeActive\n            title={folderTitle}\n          />\n          <Tab className={styles.folder} title={lang('FolderLinkPreviewRight')} />\n        </div>\n      </div>\n    );\n  }\n\n  const renderContent = useCallback(() => {\n    if (!renderingInfo) return undefined;\n    if (renderingInfo.invite) {\n      const invite = renderingInfo.invite;\n      if ('alreadyPeerIds' in invite) {\n        return <ChatlistAlready invite={invite} folder={renderingFolder!} />;\n      }\n\n      return <ChatlistNew invite={invite} />;\n    }\n\n    if (renderingInfo.removal) {\n      return <ChatlistDelete folder={renderingFolder!} suggestedPeerIds={renderingInfo.removal.suggestedPeerIds} />;\n    }\n\n    return undefined;\n  }, [renderingFolder, renderingInfo]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      title={title}\n      onClose={closeChatlistModal}\n      isSlim\n      hasCloseButton\n    >\n      {renderingFolderTitle && renderFolders(renderingFolderTitle)}\n      {renderContent()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const { invite, removal } = modal || {};\n    const folderId = removal?.folderId || (invite && 'folderId' in invite ? invite.folderId : undefined);\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n\n    return {\n      folder,\n    };\n  },\n)(ChatlistInviteModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MZ0RCecx\",\"title\":\"ar8XeydN\",\"participantCount\":\"un00TXYY\",\"participants\":\"YvkZ6c2D\",\"participant\":\"DHJSBDeE\",\"buttons\":\"KFtrPtNr\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getCustomPeerFromInvite, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport PeerBadge from '../../common/PeerBadge';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './ChatInviteModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['chatInviteModal'];\n};\n\nconst ChatInviteModal = ({ modal }: OwnProps) => {\n  const { acceptChatInvite, closeChatInviteModal, showNotification } = getActions();\n  const participantsRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const prevModal = usePrevious(modal);\n  const { hash, inviteInfo } = modal || prevModal || {};\n  const {\n    about, isBroadcast, participantIds, participantsCount, photo, isRequestNeeded,\n  } = inviteInfo || {};\n\n  const handleClose = useLastCallback(() => {\n    closeChatInviteModal();\n  });\n\n  const handleAccept = useLastCallback(() => {\n    acceptChatInvite({ hash: hash! });\n\n    showNotification({\n      message: isBroadcast ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n    });\n\n    handleClose();\n  });\n\n  const acceptLangKey = isBroadcast ? 'ProfileJoinChannel' : 'JoinGroup';\n  const requestToJoinLangKey = isBroadcast ? 'MemberRequests.RequestToJoinChannel'\n    : 'MemberRequests.RequestToJoinGroup';\n\n  const customPeer = useMemo(() => {\n    if (!inviteInfo) return undefined;\n\n    return getCustomPeerFromInvite(inviteInfo);\n  }, [inviteInfo]);\n\n  const participants = useMemo(() => {\n    if (!participantIds) {\n      return undefined;\n    }\n\n    const global = getGlobal();\n    return participantIds.map((id) => selectUser(global, id)).filter(Boolean);\n  }, [participantIds]);\n\n  useHorizontalScroll(participantsRef, !modal || !participants);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      contentClassName={styles.content}\n      isSlim\n      onClose={handleClose}\n      onEnter={handleAccept}\n    >\n      {customPeer && <Avatar size=\"jumbo\" photo={photo} peer={customPeer} withVideo />}\n      {customPeer && <FullNameTitle className={styles.title} peer={customPeer} />}\n      {about && <p className={styles.about}>{about}</p>}\n      <p className={styles.participantCount}>\n        {lang(isBroadcast ? 'Subscribers' : 'Members', participantsCount, 'i')}\n      </p>\n      {participants && (\n        <div ref={participantsRef} className={buildClassName(styles.participants, 'no-scrollbar')}>\n          {participants.map((participant) => (\n            <PeerBadge className={styles.participant} peer={participant} text={getUserFullName(participant)} />\n          ))}\n        </div>\n      )}\n      <div className={buildClassName('dialog-buttons', styles.buttons)}>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleAccept}>\n          {lang(isRequestNeeded ? requestToJoinLangKey : acceptLangKey)}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleClose}>\n          {lang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(ChatInviteModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"LFkgLoAk\",\"title\":\"La4sUYaq\",\"description\":\"Bn5kz5br\",\"moreButton\":\"JdN5pGTw\",\"secondary\":\"hbsLlXSH\",\"content\":\"TZE15Pt_\"};","import { memo, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { TableAboutData } from '../common/TableAboutModal';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport TableAboutModal from '../common/TableAboutModal';\n\nimport styles from './AboutAdsModal.module.scss';\n\nexport type OwnProps = {\n\n  modal: TabState['aboutAdsModal'];\n};\n\ntype StateProps = {\n  minLevelToRestrictAds?: number;\n};\n\nconst AboutAdsModal = ({ modal, minLevelToRestrictAds }: OwnProps & StateProps) => {\n  const { closeAboutAdsModal } = getActions();\n\n  const moreMenuRef = useRef<HTMLButtonElement>();\n\n  const isOpen = Boolean(modal);\n  const renderingModal = useCurrentOrPrev(modal);\n  const {\n    canReport, randomId, additionalInfo, sponsorInfo,\n  } = renderingModal || {};\n  const isMonetizationSharing = canReport;\n\n  const renderingIsNewDesign = useCurrentOrPrev(isMonetizationSharing);\n\n  const oldLang = useOldLang();\n\n  const regularAdContent = useMemo(() => {\n    return (\n      <>\n        <h3>{oldLang('SponsoredMessageInfoScreen.Title')}</h3>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription1'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription2'), ['br'])}</p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription3'), ['br'])}</p>\n        <p>\n          <SafeLink\n            url={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n            text={oldLang('SponsoredMessageAlertLearnMoreUrl')}\n          />\n        </p>\n        <p>{renderText(oldLang('SponsoredMessageInfoDescription4'), ['br'])}</p>\n      </>\n    );\n  }, [oldLang]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleContextMenu, handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(moreMenuRef, !renderingIsNewDesign);\n\n  const handleClose = useLastCallback(() => {\n    closeAboutAdsModal();\n    handleContextMenuClose();\n    handleContextMenuHide();\n  });\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <>\n        <h3 className={styles.title}>{oldLang('AboutRevenueSharingAds')}</h3>\n        <p className={buildClassName(styles.description, styles.secondary)}>\n          {oldLang('RevenueSharingAdsAlertSubtitle')}\n        </p>\n        <Button\n          ref={moreMenuRef}\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className={styles.moreButton}\n          onClick={handleContextMenu}\n        >\n          <Icon name=\"more\" />\n        </Button>\n      </>\n    );\n\n    const listItemData = [\n      ['lock', oldLang('RevenueSharingAdsInfo1Title'),\n        renderText(oldLang('RevenueSharingAdsInfo1Subtitle'), ['simple_markdown'])],\n      ['revenue-split', oldLang('RevenueSharingAdsInfo2Title'),\n        renderText(oldLang('RevenueSharingAdsInfo2Subtitle'), ['simple_markdown'])],\n      ['nochannel', oldLang('RevenueSharingAdsInfo3Title'),\n        renderText(oldLang('RevenueSharingAdsInfo3Subtitle', minLevelToRestrictAds), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{renderText(oldLang('RevenueSharingAdsInfo4Title'), ['simple_markdown'])}</h3>\n        <p className={styles.description}>\n          {renderText(oldLang('RevenueSharingAdsInfo4Subtitle2', ''), ['simple_markdown'])}\n          <SafeLink\n            url={oldLang('PromoteUrl')}\n            text={oldLang('LearnMoreArrow')}\n          />\n        </p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, handleContextMenu, minLevelToRestrictAds]);\n\n  if (renderingIsNewDesign) {\n    return (\n      <>\n        <TableAboutModal\n          isOpen={isOpen}\n          listItemData={modalData?.listItemData}\n          headerIconName=\"channel\"\n          withSeparator\n          header={modalData?.header}\n          footer={modalData?.footer}\n          buttonText={oldLang('RevenueSharingAdsUnderstood')}\n          onClose={handleClose}\n        />\n        {contextMenuAnchor && randomId && (\n          <SponsoredMessageContextMenuContainer\n            isOpen={isContextMenuOpen}\n            anchor={contextMenuAnchor}\n            triggerRef={moreMenuRef}\n            randomId={randomId}\n            additionalInfo={additionalInfo}\n            canReport={canReport}\n            sponsorInfo={sponsorInfo}\n            shouldSkipAbout\n            onItemClick={handleClose}\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      {regularAdContent}\n      <Button\n        size=\"smaller\"\n        onClick={handleClose}\n      >\n        {oldLang('RevenueSharingAdsUnderstood')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const minLevelToRestrictAds = global.appConfig?.channelRestrictAdsLevelMin;\n\n    return {\n      minLevelToRestrictAds,\n    };\n  },\n)(AboutAdsModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"t9iZUzOj\",\"description\":\"mjveZmdr\",\"toncoin\":\"ATkOSqJ7\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo } from '../../lib/teact/teact';\n\nimport type { TableAboutData } from '../modals/common/TableAboutModal';\n\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TableAboutModal from '../modals/common/TableAboutModal';\nimport Icon from './icons/Icon';\nimport SafeLink from './SafeLink';\n\nimport styles from './AboutMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\nconst AboutMonetizationModal: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const blockchainText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnLearnCoinAbout',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationInfoTONLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const monetizationTitle = useMemo(() => {\n    return lang(\n      'MonetizationInfoTONTitle',\n      undefined,\n      {\n        withNodes: true,\n        specialReplacement: { '💎': <Icon className={styles.toncoin} name=\"toncoin\" /> },\n      },\n    );\n  }, [lang]);\n\n  const modalData = useMemo(() => {\n    if (!isOpen) return undefined;\n\n    const header = (\n      <h3 className={styles.title}>{oldLang('lng_channel_earn_learn_title')}</h3>\n    );\n\n    const listItemData = [\n      ['channel', oldLang('lng_channel_earn_learn_in_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_in_about'), ['simple_markdown'])],\n      ['revenue-split', oldLang('lng_channel_earn_learn_split_subtitle'),\n        renderText(oldLang('Monetization.Intro.Split.Text'), ['simple_markdown'])],\n      ['cash-circle', oldLang('lng_channel_earn_learn_out_subtitle'),\n        renderText(oldLang('lng_channel_earn_learn_out_about'), ['simple_markdown'])],\n    ] satisfies TableAboutData;\n\n    const footer = (\n      <>\n        <h3 className={styles.title}>{monetizationTitle}</h3>\n        <p className={styles.description}>{blockchainText}</p>\n      </>\n    );\n\n    return {\n      header,\n      listItemData,\n      footer,\n    };\n  }, [isOpen, oldLang, monetizationTitle, blockchainText]);\n\n  if (!modalData) {\n    return undefined;\n  }\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      listItemData={modalData.listItemData}\n      headerIconName=\"cash-circle\"\n      withSeparator\n      header={modalData.header}\n      footer={modalData.footer}\n      buttonText={oldLang('RevenueSharingAdsUnderstood')}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(AboutMonetizationModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"WqeWhMAS\",\"content\":\"oofoCYlu\"};","import {\n  memo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport Modal from '../ui/Modal';\nimport PasswordForm from './PasswordForm';\n\nimport styles from './VerificationMonetizationModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['monetizationVerificationModal'];\n};\n\ntype StateProps = {\n  passwordHint?: string;\n};\n\nconst VerificationMonetizationModal = ({\n  modal,\n  passwordHint,\n}: OwnProps & StateProps) => {\n  const {\n    closeMonetizationVerificationModal, clearMonetizationVerificationError, processMonetizationRevenueWithdrawalUrl,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const renderingModal = useCurrentOrPrev(modal);\n\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useLastCallback((password: string) => {\n    if (!renderingModal) return;\n    processMonetizationRevenueWithdrawalUrl({\n      peerId: renderingModal.chatId,\n      currentPassword: password,\n    });\n  });\n\n  const handleClearError = useLastCallback(() => {\n    clearMonetizationVerificationError();\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeMonetizationVerificationModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('CheckPasswordTitle')}\n      className={styles.root}\n      contentClassName={styles.content}\n      onClose={handleClose}\n    >\n      <div className={buildClassName(styles.content, 'settings-content password-form custom-scroll')}>\n        <div className=\"settings-item pt-0\">\n          <PasswordForm\n            shouldShowSubmit\n            placeholder={lang('CheckPasswordPlaceholder')}\n            error={renderingModal?.errorKey && lang.withRegular(renderingModal.errorKey)}\n            description={lang('CheckPasswordDescription')}\n            clearError={handleClearError}\n            isLoading={renderingModal?.isLoading}\n            hint={passwordHint}\n            isPasswordVisible={shouldShowPassword}\n            shouldResetValue={isOpen}\n            onChangePasswordVisibility={setShouldShowPassword}\n            onSubmit={handleSubmit}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n\n    return {\n      passwordHint,\n    };\n  },\n)(VerificationMonetizationModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"MKdSUg2P\",\"chatItem\":\"qEIwBtp0\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport {\n  selectIsCurrentUserFrozen, selectIsCurrentUserPremium, selectStickerSet, selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './EmojiStatusAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['emojiStatusAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n  stickerSet?: ApiStickerSet;\n  isPremium?: boolean;\n  isAccountFrozen?: boolean;\n};\n\nconst INTERVAL = 3200;\n\nconst EmojiStatusAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n  stickerSet,\n  isPremium,\n  isAccountFrozen,\n}) => {\n  const {\n    closeEmojiStatusAccessModal,\n    toggleUserEmojiStatusPermission,\n    sendWebAppEvent,\n    openPremiumModal,\n    loadDefaultStatusIcons,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [currentStatusIndex, setCurrentStatusIndex] = useState<number>(0);\n\n  useEffect(() => {\n    if (isOpen && !stickerSet?.stickers && !isAccountFrozen) {\n      loadDefaultStatusIcons();\n    }\n  }, [isOpen, stickerSet, isAccountFrozen]);\n\n  const mockPeerWithStatus = useMemo(() => {\n    if (!currentUser || !stickerSet?.stickers) return undefined;\n    return {\n      ...currentUser,\n      emojiStatus: {\n        type: 'regular',\n        documentId: stickerSet.stickers[currentStatusIndex].id,\n      },\n    } satisfies ApiUser;\n  }, [currentUser, stickerSet, currentStatusIndex]);\n\n  const totalCount = stickerSet?.stickers?.length;\n  useInterval(\n    () => {\n      if (!totalCount) return;\n      setCurrentStatusIndex((prevIndex) => (prevIndex + 1) % totalCount);\n    },\n    totalCount ? INTERVAL : undefined,\n  );\n\n  const renderPickerItem = useLastCallback(() => {\n    return (\n      <PeerChip\n        withEmojiStatus\n        className={styles.chatItem}\n        itemClassName={styles.itemName}\n        mockPeer={mockPeerWithStatus}\n      />\n    );\n  });\n\n  const confirmHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      if (isPremium) {\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'allowed',\n            },\n          },\n        });\n        toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: true, isBotAccessEmojiGranted: true });\n      } else {\n        openPremiumModal();\n        sendWebAppEvent({\n          webAppKey: modal.webAppKey,\n          event: {\n            eventType: 'emoji_status_access_requested',\n            eventData: {\n              status: 'cancelled',\n            },\n          },\n        });\n      }\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeEmojiStatusAccessModal();\n    if (modal?.webAppKey) {\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'emoji_status_access_requested',\n          eventData: {\n            status: 'cancelled',\n          },\n        },\n      });\n    }\n    if (isPremium) {\n      toggleUserEmojiStatusPermission({ botId: modal.bot.id, isEnabled: false });\n    }\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('EmojiStatusAccessText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      contentClassName={styles.content}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderPickerItem()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n    const isPremium = selectIsCurrentUserPremium(global);\n    const stickerSet = global.defaultStatusIconsId ? selectStickerSet(global, global.defaultStatusIconsId) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      currentUser,\n      stickerSet,\n      isPremium,\n      isAccountFrozen,\n    };\n  },\n)(EmojiStatusAccessModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { getGeolocationStatus } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './LocationAccessModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['locationAccessModal'];\n};\n\nexport type StateProps = {\n  currentUser?: ApiUser;\n};\n\nconst LocationAccessModal: FC<OwnProps & StateProps> = ({\n  modal,\n  currentUser,\n}) => {\n  const {\n    closeLocationAccessModal, toggleUserLocationPermission, sendWebAppEvent,\n  } = getActions();\n\n  const isOpen = Boolean(modal);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const confirmHandler = useLastCallback(async () => {\n    const geolocationData = await getGeolocationStatus();\n    const { geolocation } = geolocationData;\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: true,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: true,\n            latitude: geolocation?.latitude,\n            longitude: geolocation?.longitude,\n            altitude: geolocation?.altitude,\n            course: geolocation?.heading,\n            speed: geolocation?.speed,\n            horizontal_accuracy: geolocation?.accuracy,\n            vertical_accuracy: geolocation?.accuracy,\n          },\n        },\n      });\n    }\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    if (!modal?.bot?.id) return;\n    closeLocationAccessModal();\n    if (modal?.webAppKey) {\n      toggleUserLocationPermission({\n        botId: modal.bot.id,\n        isAccessGranted: false,\n      });\n      sendWebAppEvent({\n        webAppKey: modal.webAppKey,\n        event: {\n          eventType: 'location_requested',\n          eventData: {\n            available: false,\n          },\n        },\n      });\n    }\n  });\n\n  const renderInfo = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return (\n      <div className={styles.avatars}>\n        <Avatar\n          size=\"large\"\n          peer={currentUser}\n        />\n        <Icon name=\"next\" className={styles.arrow} />\n        <Avatar\n          size=\"large\"\n          peer={modal.bot}\n        />\n      </div>\n    );\n  });\n\n  const renderStatusText = useLastCallback(() => {\n    if (!modal?.bot) return undefined;\n    return lang('LocationPermissionText', {\n      name: getUserFullName(modal?.bot),\n    }, {\n      withNodes: true,\n      withMarkdown: true,\n    });\n  });\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n    >\n      {renderInfo()}\n      <div>\n        {renderStatusText()}\n        <div\n          className=\"dialog-buttons mt-2\"\n          ref={containerRef}\n        >\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={confirmHandler}\n            color=\"primary\"\n          >\n            {oldLang('lng_bot_allow_write_confirm')}\n          </Button>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            onClick={onCloseHandler}\n          >\n            {lang('Cancel')}\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentUser = selectUser(global, global.currentUserId!);\n\n    return {\n      currentUser,\n    };\n  },\n)(LocationAccessModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatars\":\"CGPoDaLo\",\"arrow\":\"pzERgD5x\"};","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"qJDgUtjV\",\"root\":\"njPBcVYr\",\"modalTitle\":\"ZAdG13Ah\",\"optionText\":\"oWujoaSC\",\"option\":\"aFbjDzNo\",\"optionButton\":\"VbE0HzDs\",\"sectionTitle\":\"jrA2dOiw\",\"description\":\"k71Zrc_P\",\"title\":\"mMmY6YR4\",\"titleMultiline\":\"lVVyV0py\",\"subtitle\":\"gSkAFc4u\",\"transition\":\"HjsGIG6e\"};","import {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportAdModal.module.scss';\n\nconst ADDED_PADDING = 56;\n\nexport type OwnProps = {\n  modal: TabState['reportAdModal'];\n};\n\nconst ReportAdModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportSponsored, closeReportAdModal, openPreviousReportAdModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const { chatId, randomId } = modal!;\n    reportSponsored({ peerId: chatId, randomId, option });\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    if (!renderingDepth) {\n      closeReportAdModal();\n      return;\n    }\n\n    openPreviousReportAdModal();\n  });\n\n  const bottomText = useMemo(() => {\n    if (!modal) return undefined;\n    const template = lang('lng_report_sponsored_reported_learn');\n    const parts = template.split('{link}');\n    return [\n      parts[0],\n      <SafeLink\n        text={lang('lng_report_sponsored_reported_link')}\n        url={lang('ReportAd.Help_URL')}\n      />,\n      parts[1],\n    ];\n  }, [lang, modal]);\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang(renderingDepth ? 'Back' : 'Close')}\n          onClick={handleBackClick}\n        >\n          <Icon name={renderingDepth ? 'arrow-left' : 'close'} />\n        </Button>\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={styles.title}>{lang('ReportAd')}</h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.subtitle]);\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      hasCloseButton\n      className={styles.root}\n      header={header}\n      onClose={closeReportAdModal}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3>\n          {renderingSection?.options.map((option) => (\n            <ListItem\n              narrow\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n        </div>\n        <p className={styles.description}>{bottomText}</p>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportAdModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"slide\":\"kq9LwNTZ\",\"root\":\"E1bGWeON\",\"content\":\"tNysQgHL\",\"modalTitle\":\"Lj_ezEWU\",\"header\":\"AlMDkK7c\",\"optionText\":\"FU8m6NUU\",\"option\":\"RoxwMzvA\",\"optionButton\":\"Z6skYdvb\",\"sectionTitle\":\"GSfUuTet\",\"description\":\"zwfjNhF9\",\"title\":\"QawchdxB\",\"hasDepth\":\"CV7kzv9H\",\"titleMultiline\":\"OYFbu8fQ\",\"subtitle\":\"OUFckTb7\",\"transition\":\"n2VxPirU\",\"block\":\"KpptZ3Mk\",\"optionInfo\":\"yc3szGcx\",\"reportIcon\":\"kO8JC4gK\"};","import type { ChangeEvent } from 'react';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport buildClassName from '../../../util/buildClassName';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport TextArea from '../../ui/TextArea';\nimport Transition, { ACTIVE_SLIDE_CLASS_NAME, TO_SLIDE_CLASS_NAME } from '../../ui/Transition';\n\nimport styles from './ReportModal.module.scss';\n\nconst MAX_DESCRIPTION = 512;\nconst ADDED_PADDING = 20;\n\nexport type OwnProps = {\n  modal: TabState['reportModal'];\n};\n\nconst ReportModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    reportMessages, reportStory, closeReportModal, openPreviousReportModal,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const transitionRef = useRef<HTMLDivElement>();\n\n  const [text, setText] = useState('');\n\n  const handleOptionClick = useLastCallback((e, option: string) => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    if (!messageIds) return;\n    switch (subject) {\n      case 'message':\n        reportMessages({ chatId: chatId!, messageIds, option });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds[0], peerId: peerId!, option,\n        });\n        break;\n    }\n  });\n\n  const [renderingSection, renderingDepth] = useMemo(() => {\n    if (!modal) return [undefined, 0];\n    const sectionDepth = modal.sections.length - 1;\n    return [modal?.sections[sectionDepth], sectionDepth];\n  }, [modal]);\n\n  const handleBackClick = useLastCallback(() => {\n    openPreviousReportModal();\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closeReportModal();\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    const hasSubtitle = Boolean(renderingSection?.subtitle);\n\n    return (\n      <div className=\"modal-header-condensed\">\n        {renderingDepth ? (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Back')}\n            onClick={handleBackClick}\n          >\n            <Icon name=\"arrow-left\" />\n          </Button>\n        ) : (\n          <Button\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Close')}\n            onClick={handleCloseClick}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n        <div className={buildClassName('modal-title', styles.modalTitle, hasSubtitle && styles.titleMultiline)}>\n          <h3 className={buildClassName(styles.title, renderingDepth && styles.hasDepth)}>\n            {renderingSection?.options\n              ? lang(modal?.subject === 'story' ? 'ReportStory' : 'Report') : renderingSection?.title}\n          </h3>\n          {hasSubtitle && (\n            <span className={styles.subtitle}>{renderingSection.subtitle}</span>\n          )}\n        </div>\n      </div>\n    );\n  }, [lang, modal, renderingDepth, renderingSection?.options, renderingSection?.subtitle, renderingSection?.title]);\n\n  const handleTextChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setText(e.target.value);\n  });\n\n  useEffect(() => {\n    if (!modal) return;\n    const slide = document.querySelector<HTMLElement>(`.${ACTIVE_SLIDE_CLASS_NAME} > .${styles.slide}`);\n    if (!slide) return;\n\n    const height = slide.scrollHeight;\n    requestMutation(() => {\n      transitionRef.current!.style.height = `${height}px`;\n    });\n  }, [modal]);\n\n  const handleAnimationStart = useLastCallback(() => {\n    const slide = document.querySelector<HTMLElement>(`.${TO_SLIDE_CLASS_NAME} > .${styles.slide}`)!;\n\n    requestMeasure(() => {\n      const height = slide.scrollHeight;\n      requestMutation(() => {\n        transitionRef.current!.style.height = `${height + ADDED_PADDING}px`;\n      });\n    });\n  });\n\n  const closeReportMessageModalHandler = useLastCallback(() => {\n    setText('');\n    closeReportModal();\n  });\n\n  const sendMessageReportHandler = useLastCallback(() => {\n    const {\n      messageIds, subject, peerId, chatId,\n    } = modal!;\n    switch (subject) {\n      case 'message':\n        reportMessages({\n          chatId: chatId!, messageIds, option: renderingSection?.option, description: text,\n        });\n        break;\n      case 'story':\n        reportStory({\n          storyId: messageIds?.[0], peerId: peerId!, option: renderingSection?.option, description: text,\n        });\n        break;\n    }\n    closeReportMessageModalHandler();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      header={header}\n      onClose={closeReportMessageModalHandler}\n      contentClassName={styles.content}\n      className={buildClassName(styles.root, modal?.subject === 'story' && 'component-theme-dark')}\n    >\n      <Transition\n        name=\"slide\"\n        className={styles.transition}\n        ref={transitionRef}\n        activeKey={renderingDepth}\n        onStart={handleAnimationStart}\n      >\n        <div className={styles.slide}>\n          {renderingSection?.options\n            ? <h3 className={styles.sectionTitle}>{renderingSection?.title}</h3> : undefined}\n          {renderingSection?.options?.map((option) => (\n            <ListItem\n              narrow\n              nonInteractive\n              secondaryIcon=\"next\"\n              className={styles.option}\n              buttonClassName={styles.optionButton}\n              clickArg={option.option}\n              onClick={handleOptionClick}\n            >\n              <div className={styles.optionText}>{option.text}</div>\n            </ListItem>\n          ))}\n          {renderingSection?.option ? (\n            <div className={styles.block}>\n              <AnimatedIconWithPreview\n                tgsUrl={LOCAL_TGS_URLS.Report}\n                size={100}\n                className={styles.reportIcon}\n                nonInteractive\n                forceAlways\n                noLoop={false}\n              />\n              <TextArea\n                id=\"option\"\n                className={styles.optionInfo}\n                label={renderingSection.isOptional ? lang('Report2CommentOptional') : lang('Report2Comment')}\n                onChange={handleTextChange}\n                value={text}\n                maxLength={MAX_DESCRIPTION}\n                maxLengthIndicator={(MAX_DESCRIPTION - text.length).toString()}\n                noReplaceNewlines\n              />\n              <Button\n                size=\"smaller\"\n                onClick={sendMessageReportHandler}\n                disabled={!renderingSection.isOptional ? !text.length : undefined}\n              >\n                {lang('ReportSend')}\n              </Button>\n            </div>\n          ) : undefined}\n        </div>\n      </Transition>\n    </Modal>\n  );\n};\n\nexport default memo(ReportModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Rzj2LMLf\",\"content\":\"Ve4u2KVI\",\"modalTitle\":\"E42tgAwD\",\"container\":\"pNSCKAVN\",\"header\":\"P1fPh6h8\",\"actionMessageView\":\"McJgXCtB\",\"info\":\"xWnXsG7q\",\"background\":\"_6w75ldP\",\"customBgImage\":\"CZkpv8n0\",\"customBgColor\":\"VJAYrDF_\",\"withTransition\":\"lElCwweL\",\"blurred\":\"m8xzfVvU\",\"withRightColumn\":\"rJCyBVMB\"};","import {\n  type FC,\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { ThemeKey } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getMockPreparedMessageFromResult, getUserFullName } from '../../../global/helpers';\nimport { selectTheme, selectThemeValues, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\n\nimport useCustomBackground from '../../../hooks/useCustomBackground';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../../common/icons/Icon';\nimport Message from '../../middle/message/Message';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './PreparedMessageModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['preparedMessageModal'];\n};\n\ntype StateProps = {\n  theme: ThemeKey;\n  isBackgroundBlurred?: boolean;\n  patternColor?: string;\n  customBackground?: string;\n  backgroundColor?: string;\n  bot?: ApiUser;\n};\n\nconst PreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal,\n  theme,\n  isBackgroundBlurred,\n  patternColor,\n  customBackground,\n  backgroundColor,\n  bot,\n}) => {\n  const {\n    closePreparedInlineMessageModal, sendWebAppEvent, openSharePreparedMessageModal,\n  } = getActions();\n  const lang = useLang();\n  const isOpen = Boolean(modal);\n\n  const { webAppKey, message, botId } = modal || {};\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const handleOpenClick = useLastCallback(() => {\n    if (webAppKey && botId && message) {\n      openSharePreparedMessageModal({\n        webAppKey,\n        message,\n      });\n      closePreparedInlineMessageModal();\n    }\n  });\n\n  const handleCloseClick = useLastCallback(() => {\n    closePreparedInlineMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const header = useMemo(() => {\n    if (!modal) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.header}>\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang('Close')}\n          onClick={handleCloseClick}\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <h3 className={buildClassName('modal-title', styles.modalTitle)}>\n          {lang('BotShareMessage')}\n        </h3>\n      </div>\n    );\n  }, [lang, modal]);\n\n  const localMessage = useMemo(() => {\n    if (!botId || !message || !webAppKey) return undefined;\n    return getMockPreparedMessageFromResult(botId, message);\n  }, [botId, message, webAppKey]);\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n  );\n\n  return (\n    <Modal\n      dialogRef={containerRef}\n      isOpen={isOpen}\n      header={header}\n      onClose={handleCloseClick}\n      className={styles.root}\n      contentClassName={styles.content}\n    >\n      <div\n        className={buildClassName(styles.actionMessageView, 'MessageList')}\n        // @ts-ignore -- FIXME: Find a way to disable interactions but keep a11y\n        inert\n        style={buildStyle(\n          `--pattern-color: ${patternColor}`,\n          backgroundColor && `--theme-background-color: ${backgroundColor}`,\n        )}\n      >\n        <div\n          className={bgClassName}\n          style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n        />\n        {localMessage && (\n          <Message\n            key={botId}\n            message={localMessage}\n            threadId={MAIN_THREAD_ID}\n            messageListType=\"thread\"\n            noComments\n            noReplies\n            appearanceOrder={0}\n            isJustAdded={false}\n            isFirstInGroup\n            isLastInGroup\n            isLastInList={false}\n            isFirstInDocumentGroup={false}\n            isLastInDocumentGroup={false}\n          />\n        )}\n      </div>\n      <div className={styles.container}>\n        <p className={styles.info}>\n          {lang('WebAppShareMessageInfo', { user: getUserFullName(bot) })}\n        </p>\n        <Button\n          size=\"smaller\"\n          onClick={handleOpenClick}\n        >\n          {lang('BotShareMessageShare')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }) => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred,\n      patternColor,\n      background: customBackground,\n      backgroundColor,\n    } = selectThemeValues(global, theme) || {};\n    const bot = modal ? selectUser(global, modal?.botId) : undefined;\n\n    return {\n      theme,\n      isBackgroundBlurred,\n      patternColor,\n      customBackground,\n      backgroundColor,\n      bot,\n      currentUserId: global.currentUserId,\n    };\n  },\n)(PreparedMessageModal));\n","import {\n  type FC,\n  memo, useEffect,\n} from '../../../lib/teact/teact';\nimport {\n  getActions, getGlobal, withGlobal,\n} from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport type { ThreadId } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n} from '../../../global/helpers';\nimport { getPeerTitle } from '../../../global/helpers/peers';\nimport {\n  selectPeer, selectTabState,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePaidMessageConfirmation from '../../middle/composer/hooks/usePaidMessageConfirmation';\n\nimport PaymentMessageConfirmDialog from '../../common/PaymentMessageConfirmDialog';\nimport RecipientPicker from '../../common/RecipientPicker';\n\nexport type OwnProps = {\n  modal: TabState['sharePreparedMessageModal'];\n};\n\ntype StateProps = {\n  isPaymentMessageConfirmDialogOpen: boolean;\n  starsBalance: number;\n  isStarsBalanceModalOpen: boolean;\n};\n\nexport type SendParams = {\n  peerName?: string;\n  starsForSendMessage: number;\n};\n\nconst SharePreparedMessageModal: FC<OwnProps & StateProps> = ({\n  modal, isPaymentMessageConfirmDialogOpen, isStarsBalanceModalOpen, starsBalance,\n}) => {\n  const {\n    closeSharePreparedMessageModal,\n    sendInlineBotResult,\n    sendWebAppEvent,\n    showNotification,\n    updateSharePreparedMessageModalSendArgs,\n  } = getActions();\n  const lang = useOldLang();\n  const isOpen = Boolean(modal);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const {\n    message, filter, webAppKey, pendingSendArgs,\n  } = modal || {};\n\n  const {\n    starsForSendMessage,\n  } = pendingSendArgs || {};\n\n  const {\n    closeConfirmDialog: closeConfirmModalPayForMessage,\n    dialogHandler: paymentMessageConfirmDialogHandler,\n    shouldAutoApprove: shouldPaidMessageAutoApprove,\n    setAutoApprove: setShouldPaidMessageAutoApprove,\n    handleWithConfirmation: handleActionWithPaymentConfirmation,\n  } = usePaidMessageConfirmation(starsForSendMessage || 0, isStarsBalanceModalOpen, starsBalance);\n\n  const handleClose = useLastCallback(() => {\n    closeSharePreparedMessageModal();\n    if (webAppKey) {\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_failed',\n          eventData: { error: 'USER_DECLINED' },\n        },\n      });\n    }\n  });\n\n  const handleSend = useLastCallback((id: string, threadId?: ThreadId) => {\n    if (message && webAppKey) {\n      const global = getGlobal();\n      const peer = selectPeer(global, id);\n      sendInlineBotResult({\n        chatId: id,\n        threadId: threadId || MAIN_THREAD_ID,\n        id: message.result.id,\n        queryId: message.result.queryId,\n      });\n      if (!starsForSendMessage) {\n        showNotification({\n          message: lang('BotSharedToOne', getPeerTitle(lang, peer!)),\n        });\n      }\n      sendWebAppEvent({\n        webAppKey,\n        event: {\n          eventType: 'prepared_message_sent',\n        },\n      });\n      closeSharePreparedMessageModal();\n      updateSharePreparedMessageModalSendArgs({ args: undefined });\n    }\n  });\n\n  const handleSelectRecipient = useLastCallback((id: string, threadId?: ThreadId) => {\n    updateSharePreparedMessageModalSendArgs({ args: { peerId: id, threadId } });\n  });\n\n  const handleSendWithPaymentConfirmation = useLastCallback(() => {\n    if (pendingSendArgs) {\n      handleActionWithPaymentConfirmation(handleSend, pendingSendArgs.peerId, pendingSendArgs.threadId);\n    }\n  });\n\n  const handleClosePaymentMessageConfirmDialog = useLastCallback(() => {\n    closeConfirmModalPayForMessage();\n    updateSharePreparedMessageModalSendArgs({ args: undefined });\n  });\n\n  useEffect(() => {\n    if (pendingSendArgs) {\n      handleSendWithPaymentConfirmation();\n    }\n  }, [pendingSendArgs]);\n\n  const global = getGlobal();\n  const peer = pendingSendArgs ? selectPeer(global, pendingSendArgs.peerId) : undefined;\n  const peerName = peer ? getPeerTitle(lang, peer) : undefined;\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <>\n      <RecipientPicker\n        isOpen={isOpen}\n        searchPlaceholder={lang('Search')}\n        filter={filter}\n        onSelectRecipient={handleSelectRecipient}\n        onClose={handleClose}\n        onCloseAnimationEnd={unmarkIsShown}\n        isLowStackPriority\n      />\n      <PaymentMessageConfirmDialog\n        isOpen={isPaymentMessageConfirmDialogOpen}\n        onClose={handleClosePaymentMessageConfirmDialog}\n        userName={peerName}\n        messagePriceInStars={starsForSendMessage || 0}\n        messagesCount={1}\n        shouldAutoApprove={shouldPaidMessageAutoApprove}\n        setAutoApprove={setShouldPaidMessageAutoApprove}\n        confirmHandler={paymentMessageConfirmDialogHandler}\n      />\n    </>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { isPaymentMessageConfirmDialogOpen } = tabState;\n    const starsBalance = global.stars?.balance.amount || 0;\n    const isStarsBalanceModalOpen = Boolean(tabState.starsBalanceModal);\n    return {\n      isPaymentMessageConfirmDialogOpen,\n      starsBalance,\n      isStarsBalanceModalOpen,\n    };\n  },\n)(SharePreparedMessageModal));\n","import type React from '../../../lib/teact/teact';\nimport { useCallback, useEffect, useState } from '../../../lib/teact/teact';\n\nimport type { ApiChatBannedRights } from '../../../api/types';\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\nconst MEDIA_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'embedLinks',\n  'sendPolls',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n  'sendStickers',\n  'sendGifs',\n];\nconst MESSAGE_PERMISSIONS: typeof MEDIA_PERMISSIONS = [...MEDIA_PERMISSIONS, 'sendPlain'];\n\nexport default function useManagePermissions(defaultPermissions: ApiChatBannedRights | undefined) {\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [defaultPermissions]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name: targetName } = e.target;\n\n    const name = targetName as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    const oldPermissions = permissions;\n\n    let newPermissions: ApiChatBannedRights = {\n      ...oldPermissions,\n      [name]: getUpdatedPermissionValue(oldPermissions[name]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(oldPermissions[name]),\n      }),\n    };\n\n    const checkMedia = () => {\n      const mediaPermissions = MEDIA_PERMISSIONS.map((key) => newPermissions[key]);\n      if (mediaPermissions.some((v) => !v)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: undefined,\n        };\n      } else if (mediaPermissions.every(Boolean)) {\n        newPermissions = {\n          ...newPermissions,\n          sendMedia: true,\n        };\n      }\n    };\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    } else {\n      newPermissions = {\n        ...newPermissions,\n        ...(MEDIA_PERMISSIONS.reduce((acc, key) => (\n          Object.assign(acc, { [key]: newPermissions.sendMedia })\n        ), {})),\n      };\n    }\n\n    // Embed links can't be enabled if plain text is banned\n    if (name !== 'embedLinks' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        embedLinks: true,\n      };\n    }\n\n    if (name !== 'sendPlain' && !newPermissions.embedLinks && newPermissions.sendPlain) {\n      newPermissions = {\n        ...newPermissions,\n        sendPlain: undefined,\n      };\n    }\n\n    if (name !== 'sendMedia') {\n      checkMedia();\n    }\n\n    const sendMessages = MESSAGE_PERMISSIONS.every((key) => newPermissions[key]);\n    newPermissions = {\n      ...newPermissions,\n      sendMessages: sendMessages ? true : undefined,\n    };\n\n    setPermissions(newPermissions);\n\n    setHavePermissionChanged(!defaultPermissions || Object.keys(newPermissions).some((k) => {\n      const key = k as Exclude<keyof ApiChatBannedRights, 'untilDate'>;\n      return Boolean(defaultPermissions[key]) !== Boolean(newPermissions[key]);\n    }));\n  }, [defaultPermissions, permissions]);\n\n  const resetPermissions = useCallback(() => {\n    setPermissions(defaultPermissions || {});\n    setHavePermissionChanged(false);\n  }, [defaultPermissions]);\n\n  return {\n    permissions,\n    isLoading,\n    havePermissionChanged,\n    handlePermissionChange,\n    setIsLoading,\n    resetPermissions,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\n\nimport { isChatPublic } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport stopEvent from '../../util/stopEvent';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\n\nexport type OwnProps = {\n  chatId?: string;\n  handlePermissionChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  permissions: ApiChatBannedRights;\n  isMediaDropdownOpen: boolean;\n  setIsMediaDropdownOpen: (open: boolean) => void;\n  className?: string;\n  shiftedClassName?: string;\n  dropdownClassName?: string;\n  withCheckbox?: boolean;\n  permissionGroup?: boolean;\n  getControlIsDisabled?: (key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => boolean | undefined;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasLinkedChat?: boolean;\n};\n\nconst permissionKeyList: (keyof ApiChatBannedRights)[] = [\n  'sendPhotos', 'sendVideos', 'sendStickers',\n  'sendAudios', 'sendDocs', 'sendVoices', 'sendRoundvideos', 'embedLinks', 'sendPolls',\n];\n\nconst PermissionCheckboxList: FC<OwnProps & StateProps> = ({\n  chat,\n  isMediaDropdownOpen,\n  setIsMediaDropdownOpen,\n  hasLinkedChat,\n  permissions,\n  handlePermissionChange,\n  className,\n  shiftedClassName,\n  dropdownClassName,\n  withCheckbox,\n  getControlIsDisabled,\n  permissionGroup,\n}) => {\n  const {\n    showNotification,\n  } = getActions();\n\n  const { isForum } = chat || {};\n\n  const lang = useOldLang();\n\n  const isPublic = useMemo(() => chat && isChatPublic(chat), [chat]);\n  const shouldDisablePermissionForPublicGroup = hasLinkedChat || isPublic;\n\n  const countCheckedPermissions = useMemo(() => {\n    return permissionKeyList.reduce((count, key) => {\n      if (!permissions[key]) {\n        count += 1;\n      }\n      return count;\n    }, 0);\n  }, [permissions]);\n\n  const handleOpenMediaDropdown = useLastCallback((e: React.MouseEvent) => {\n    stopEvent(e);\n    setIsMediaDropdownOpen(!isMediaDropdownOpen);\n  });\n\n  const handleDisabledClick = useLastCallback(() => {\n    showNotification({ message: lang('lng_rights_permission_unavailable') });\n  });\n\n  return (\n    <>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendPlain\"\n          checked={!permissions.sendPlain}\n          label={lang('UserRestrictionsSend')}\n          blocking\n          permissionGroup={permissionGroup}\n          onChange={handlePermissionChange}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendPlain')}\n        />\n      </div>\n      <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n        <Checkbox\n          name=\"sendMedia\"\n          checked={!permissions.sendMedia}\n          label={lang('UserRestrictionsSendMedia')}\n          labelText={`${countCheckedPermissions}/${permissionKeyList.length}`}\n          blocking\n          permissionGroup={permissionGroup}\n          rightIcon={isMediaDropdownOpen ? 'up' : 'down'}\n          onChange={handlePermissionChange}\n          onClickLabel={handleOpenMediaDropdown}\n          disabled={getControlIsDisabled && getControlIsDisabled('sendMedia')}\n        />\n      </div>\n      <div className={dropdownClassName}>\n        <div\n          className={className}\n        >\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPhotos\"\n              checked={!permissions.sendPhotos}\n              label={lang('UserRestrictionsSendPhotos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPhotos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVideos\"\n              checked={!permissions.sendVideos}\n              label={lang('UserRestrictionsSendVideos')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendStickers')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendAudios\"\n              checked={!permissions.sendAudios}\n              label={lang('UserRestrictionsSendMusic')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendAudios')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendDocs\"\n              checked={!permissions.sendDocs}\n              label={lang('UserRestrictionsSendFiles')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendDocs')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendVoices\"\n              checked={!permissions.sendVoices}\n              label={lang('UserRestrictionsSendVoices')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendVoices')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendRoundvideos\"\n              checked={!permissions.sendRoundvideos}\n              label={lang('UserRestrictionsSendRound')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendRoundvideos')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('embedLinks')}\n            />\n          </div>\n\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('sendPolls')}\n            />\n          </div>\n        </div>\n      </div>\n      <div className={shiftedClassName}>\n        <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n          <Checkbox\n            name=\"inviteUsers\"\n            checked={!permissions.inviteUsers}\n            label={lang('UserRestrictionsInviteUsers')}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n            disabled={getControlIsDisabled && getControlIsDisabled('inviteUsers')}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"pinMessages\"\n            checked={!permissions.pinMessages}\n            label={lang('UserRestrictionsPinMessages')}\n            disabled={getControlIsDisabled ? getControlIsDisabled('pinMessages')\n              : shouldDisablePermissionForPublicGroup}\n            blocking\n            permissionGroup={permissionGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        <div\n          className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}\n          onClick={shouldDisablePermissionForPublicGroup ? handleDisabledClick : undefined}\n        >\n          <Checkbox\n            name=\"changeInfo\"\n            checked={!permissions.changeInfo}\n            label={lang('UserRestrictionsChangeInfo')}\n            blocking\n            permissionGroup={permissionGroup}\n            disabled={getControlIsDisabled ? getControlIsDisabled('changeInfo')\n              : shouldDisablePermissionForPublicGroup}\n            onChange={handlePermissionChange}\n          />\n        </div>\n        {isForum && (\n          <div className={buildClassName('ListItem', withCheckbox && 'with-checkbox')}>\n            <Checkbox\n              name=\"manageTopics\"\n              checked={!permissions.manageTopics}\n              label={lang('CreateTopicsPermission')}\n              blocking\n              permissionGroup={permissionGroup}\n              onChange={handlePermissionChange}\n              disabled={getControlIsDisabled && getControlIsDisabled('manageTopics')}\n            />\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const fullInfo = chat && selectChatFullInfo(global, chat.id);\n    const hasLinkedChat = Boolean(fullInfo?.linkedChatId);\n\n    return {\n      chat,\n      hasLinkedChat,\n    };\n  },\n)(PermissionCheckboxList));\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"_YNfwDqt\",\"root\":\"SeaF_shb\",\"container\":\"axa67kqo\",\"title\":\"U4IFhV0a\",\"singleTitle\":\"qd6OFHiG\",\"actionTitle\":\"yGhFKTl5\",\"restrictionTitle\":\"t3KOsBfm\",\"button\":\"goI3MITH\",\"options\":\"b6847Kh3\",\"dropdownList\":\"czTjjKim\",\"dialogButtons\":\"JTT_DIRv\",\"proceedButtons\":\"L4YzeG91\",\"restrictionContainer\":\"iv0u9Zw6\",\"restrictionContainerOpen\":\"qCQftA04\",\"dropdownListOpen\":\"Ifpyv7Jp\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useEffect,\n  useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../api/types';\nimport type { IRadioOption } from '../ui/CheckboxGroup';\n\nimport {\n  getHasAdminRight,\n  getPrivateChatUserId,\n  getUserFirstOrLastName, isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n  isSystemBot,\n} from '../../global/helpers';\nimport { getPeerTitle } from '../../global/helpers/peers';\nimport {\n  getSendersFromSelectedMessages,\n  selectBot,\n  selectCanDeleteSelectedMessages,\n  selectChat,\n  selectChatFullInfo, selectIsChatWithBot,\n  selectSenderFromMessage,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { isUserId } from '../../util/entities/ids';\nimport { buildCollectionByCallback, unique } from '../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useManagePermissions from '../right/hooks/useManagePermissions';\n\nimport PermissionCheckboxList from '../main/PermissionCheckboxList';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport Avatar from './Avatar';\nimport AvatarList from './AvatarList';\nimport Icon from './icons/Icon';\n\nimport styles from './DeleteMessageModal.module.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isGroup?: boolean;\n  isChannel?: boolean;\n  isSuperGroup?: boolean;\n  messageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  currentUserId?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  chatBot?: boolean;\n  isSchedule?: boolean;\n  onConfirm?: NoneToVoidFunction;\n  canBanUsers?: boolean;\n  isCreator?: boolean;\n  linkedChatId?: string;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chat,\n  isChannel,\n  isSuperGroup,\n  isSchedule,\n  currentUserId,\n  messageIds,\n  isCreator,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  chatBot,\n  adminMembersById,\n  canBanUsers,\n  linkedChatId,\n  onConfirm,\n}) => {\n  const {\n    closeDeleteMessageModal,\n    deleteMessages,\n    reportChannelSpam,\n    deleteChatMember,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n    updateChatMemberBannedRights,\n    deleteParticipantHistory,\n  } = getActions();\n\n  const prevIsOpen = usePreviousDeprecated(isOpen);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const {\n    permissions, havePermissionChanged, handlePermissionChange, resetPermissions,\n  } = useManagePermissions(chat?.defaultBannedRights);\n\n  const [peerIdsToDeleteAll, setPeerIdsToDeleteAll] = useState<string[]>([]);\n  const [peerIdsToBan, setPeerIdsToBan] = useState<string[]>([]);\n  const [peerIdsToReportSpam, setPeerIdsToReportSpam] = useState<string[]>([]);\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n  const [isAdditionalOptionsVisible, setIsAdditionalOptionsVisible] = useState(false);\n  const [shouldDeleteForAll, setShouldDeleteForAll] = useState(true);\n\n  const peerList = useMemo(() => {\n    if (isChannel || !messageIds || !chat) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n    const senderArray = getSendersFromSelectedMessages(global, chat.id, messageIds);\n    return senderArray ? unique(senderArray)\n      .filter((peer) => (\n        peer?.id !== chat?.id\n        && peer?.id !== linkedChatId\n        && peer?.id !== chat?.linkedMonoforumId\n      )) : MEMO_EMPTY_ARRAY;\n  }, [chat, isChannel, linkedChatId, messageIds]);\n\n  const buildNestedOptionListWithAvatars = useLastCallback(() => {\n    return peerList.map((member) => {\n      return {\n        value: member.id,\n        label: getPeerTitle(lang, member) || '',\n        leftElement: <Avatar size=\"small\" peer={member} />,\n      };\n    });\n  });\n\n  const peerListToDeleteAll = useMemo(() => {\n    return peerList.filter((peer) => (\n      peer.id !== linkedChatId\n      && peer.id !== chat?.linkedMonoforumId\n      && peer.id !== currentUserId\n    ));\n  }, [peerList, currentUserId, linkedChatId, chat?.linkedMonoforumId]);\n\n  const peerListToReportSpam = useMemo(() => {\n    return peerList.filter((peer) => (\n      peer.id !== currentUserId\n      && peer.id !== linkedChatId\n      && peer.id !== chat?.linkedMonoforumId\n    ));\n  }, [peerList, currentUserId, linkedChatId, chat?.linkedMonoforumId]);\n\n  const peerListToBan = useMemo(() => {\n    const isCurrentUserInList = peerList.some((peer) => peer.id === currentUserId);\n    const shouldReturnEmpty = !canBanUsers || isCurrentUserInList || chat?.isMonoforum;\n\n    if (shouldReturnEmpty) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return peerList.filter((peer) => {\n      const isAdmin = adminMembersById?.[peer.id];\n      return isCreator || !isAdmin;\n    });\n  }, [peerList, isCreator, currentUserId, canBanUsers, adminMembersById, chat?.isMonoforum]);\n\n  const shouldShowAdditionalOptions = useMemo(() => {\n    return Boolean(peerListToDeleteAll.length || peerListToReportSpam.length || peerListToBan.length);\n  }, [peerListToDeleteAll, peerListToReportSpam, peerListToBan]);\n\n  const shouldShowOption = shouldShowAdditionalOptions\n    && !canDeleteForAll && !isSchedule && isSuperGroup;\n\n  const peerNames = useMemo(() => {\n    if (!peerList || isSchedule) return {};\n    return buildCollectionByCallback(peerList, (peer) => [peer.id, getPeerTitle(lang, peer)]);\n  }, [isSchedule, lang, peerList]);\n\n  const ACTION_SPAM_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'spam' : peerList?.[0]?.id,\n        label: oldLang('ReportSpamTitle'),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== chat?.linkedMonoforumId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, linkedChatId, chat?.linkedMonoforumId, currentUserId]);\n\n  const ACTION_DELETE_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'delete_all' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? oldLang('DeleteAllFromUsers')\n          : oldLang('DeleteAllFrom', Object.values(peerNames)[0]),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars().filter((opt) => opt.value !== linkedChatId\n            && opt.value !== chat?.linkedMonoforumId\n            && opt.value !== currentUserId),\n        ] : undefined,\n      },\n    ];\n  }, [messageIds, peerList, oldLang, peerNames, linkedChatId, chat?.linkedMonoforumId, currentUserId]);\n\n  const ACTION_BAN_OPTION: IRadioOption[] = useMemo(() => {\n    return [\n      {\n        value: messageIds && peerList.length >= 2 ? 'ban' : peerList?.[0]?.id,\n        label: messageIds && peerList.length >= 2\n          ? (isAdditionalOptionsVisible ? oldLang('DeleteRestrictUsers') : oldLang('DeleteBanUsers'))\n          : (isAdditionalOptionsVisible ? oldLang('KickFromSupergroup')\n            : oldLang('DeleteBan', Object.values(peerNames)[0])),\n        nestedOptions: messageIds && peerList.length >= 2 ? [\n          ...buildNestedOptionListWithAvatars(),\n        ] : undefined,\n      },\n    ];\n  }, [isAdditionalOptionsVisible, oldLang, messageIds, peerList, peerNames]);\n\n  const toggleAdditionalOptions = useLastCallback(() => {\n    setIsAdditionalOptionsVisible((prev) => !prev);\n  });\n\n  const filterMessageIdByPeerId = useLastCallback((peerIds: string[], selectedMessageIdList: number[]) => {\n    if (!chat) return MEMO_EMPTY_ARRAY;\n    const global = getGlobal();\n    return selectedMessageIdList.filter((msgId) => {\n      const sender = selectSenderFromMessage(global, chat.id, msgId);\n      return sender && peerIds.includes(sender.id);\n    });\n  });\n\n  const handleReportSpam = useLastCallback((userMessagesMap: Record<string, number[]>) => {\n    Object.entries(userMessagesMap).forEach(([userId, messageIdList]) => {\n      if (messageIdList.length) {\n        reportChannelSpam({\n          participantId: userId,\n          chatId: chat!.id,\n          messageIds: messageIdList,\n        });\n      }\n    });\n  });\n\n  const handleDeleteMessages = useLastCallback((filteredMessageIdList: number[]) => {\n    deleteMessages({ messageIds: filteredMessageIdList, shouldDeleteForAll: true });\n  });\n\n  const handleDeleteAllPeerMessages = useLastCallback((peerIdList: string[]) => {\n    if (!chat) return;\n    peerIdList.forEach((peerId) => {\n      deleteParticipantHistory({ peerId, chatId: chat.id });\n    });\n  });\n\n  const handleDeleteMember = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      deleteChatMember({ chatId: chat!.id, userId });\n    });\n  });\n\n  const handleUpdateChatMemberBannedRights = useLastCallback((filteredUserIdList: string[]) => {\n    filteredUserIdList.forEach((userId) => {\n      updateChatMemberBannedRights({\n        chatId: chat!.id,\n        userId,\n        bannedRights: permissions,\n      });\n    });\n  });\n\n  const handleDeleteMessageList = useLastCallback(() => {\n    if (!chat || !messageIds) return;\n\n    onConfirm?.();\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else if (shouldShowOption) {\n      if (peerIdsToReportSpam?.length) {\n        const global = getGlobal();\n        const peerIdList = peerIdsToReportSpam.filter((option) => !Number.isNaN(Number(option)));\n        const messageList = messageIds.reduce<Record<string, number[]>>((acc, msgId) => {\n          const peer = selectSenderFromMessage(global, chat.id, msgId);\n          if (peer && peerIdList.includes(peer.id)) {\n            if (!acc[peer.id]) {\n              acc[peer.id] = [];\n            }\n            acc[peer.id].push(Number(msgId));\n          }\n          return acc;\n        }, {});\n\n        handleReportSpam(messageList);\n      }\n\n      if (peerIdsToDeleteAll?.length) {\n        const peerIdList = peerIdsToDeleteAll.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteAllPeerMessages(peerIdList);\n      }\n\n      if (peerIdsToBan?.length && !havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleDeleteMember(peerIdList);\n        const filteredMessageIdList = filterMessageIdByPeerId(peerIdList, messageIds);\n        handleDeleteMessages(filteredMessageIdList);\n      }\n\n      if (peerIdsToBan?.length && havePermissionChanged) {\n        const peerIdList = peerIdsToBan.filter((option) => !Number.isNaN(Number(option)));\n        handleUpdateChatMemberBannedRights(peerIdList);\n      }\n\n      if (!peerIdsToReportSpam?.length || !peerIdsToDeleteAll?.length || !peerIdsToBan?.length) {\n        deleteMessages({ messageIds, shouldDeleteForAll });\n      }\n    } else {\n      deleteMessages({ messageIds, shouldDeleteForAll });\n    }\n\n    closeDeleteMessageModal();\n    exitMessageSelectMode();\n  });\n\n  const onCloseHandler = useLastCallback(() => {\n    closeDeleteMessageModal();\n  });\n\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      setPeerIdsToReportSpam([]);\n      setPeerIdsToDeleteAll([]);\n      setPeerIdsToBan([]);\n      setShouldDeleteForAll(true);\n      setIsMediaDropdownOpen(false);\n      setIsAdditionalOptionsVisible(false);\n      resetPermissions();\n    }\n  }, [isOpen, prevIsOpen, resetPermissions]);\n\n  function renderHeader() {\n    return (\n      <div\n        className={shouldShowOption && styles.container}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldShowOption && (\n          <AvatarList\n            size=\"small\"\n            peers={peerList}\n          />\n        )}\n        <h3 className={buildClassName(shouldShowOption ? styles.title : styles.singleTitle)}>\n          {oldLang('Chat.DeleteMessagesConfirmation', messageIds?.length)}\n        </h3>\n      </div>\n    );\n  }\n\n  function renderAdditionalActionOptions() {\n    return (\n      <div className={styles.options}>\n        <CheckboxGroup\n          options={ACTION_SPAM_OPTION}\n          onChange={setPeerIdsToReportSpam}\n          selected={peerIdsToReportSpam}\n          nestedCheckbox={messageIds && peerList.length >= 2}\n        />\n        {peerListToDeleteAll?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_DELETE_OPTION}\n            onChange={setPeerIdsToDeleteAll}\n            selected={peerIdsToDeleteAll}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n        {peerListToBan?.length > 0 && (\n          <CheckboxGroup\n            options={ACTION_BAN_OPTION}\n            onChange={setPeerIdsToBan}\n            selected={peerIdsToBan}\n            nestedCheckbox={messageIds && peerList.length >= 2}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderPartiallyRestrictedUser() {\n    return (\n      <div className={buildClassName(styles.restrictionContainer,\n        isAdditionalOptionsVisible && styles.restrictionContainerOpen)}\n      >\n        <h3 className={buildClassName(styles.actionTitle, styles.restrictionTitle)}>\n          {oldLang('UserRestrictionsCanDoUsers', peerList.length)}\n        </h3>\n        <PermissionCheckboxList\n          withCheckbox\n          chatId={chat?.id}\n          isMediaDropdownOpen={isMediaDropdownOpen}\n          setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n          handlePermissionChange={handlePermissionChange}\n          permissions={permissions}\n          className={buildClassName(\n            styles.dropdownList,\n            isMediaDropdownOpen && styles.dropdownListOpen,\n          )}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onCloseHandler}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageList}\n      className={styles.root}\n    >\n      <div className={styles.main}>\n        {renderHeader()}\n        {shouldShowOption && (\n          <>\n            <p className={styles.actionTitle}>{oldLang('DeleteAdditionalActions')}</p>\n            {renderAdditionalActionOptions()}\n            {renderPartiallyRestrictedUser()}\n            {peerIdsToBan?.length && canBanUsers ? (\n              <ListItem\n                narrow\n                buttonClassName={styles.button}\n                onClick={toggleAdditionalOptions}\n              >\n                {oldLang(isAdditionalOptionsVisible ? 'DeleteToggleBanUsers' : 'DeleteToggleRestrictUsers')}\n                <Icon\n                  name={isAdditionalOptionsVisible ? 'up' : 'down'}\n                  className={buildClassName(styles.button, 'ml-2')}\n                />\n              </ListItem>\n            ) : setIsAdditionalOptionsVisible(false)}\n          </>\n        )}\n        {(canDeleteForAll || chatBot || !shouldShowOption) && (\n          <>\n            <p>\n              {messageIds && messageIds.length > 1\n                ? lang('AreYouSureDeleteFewMessages') : lang('AreYouSureDeleteSingleMessage')}\n            </p>\n            {willDeleteForCurrentUserOnly && (\n              <p>{oldLang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n            )}\n            {willDeleteForAll && (\n              <p>{oldLang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n            )}\n          </>\n        )}\n        {canDeleteForAll && (\n          <Checkbox\n            className=\"dialog-checkbox\"\n            label={contactName ? renderText(oldLang('DeleteMessagesOptionAlso', contactName))\n              : oldLang('Conversation.DeleteMessagesForEveryone')}\n            checked={shouldDeleteForAll}\n            onCheck={setShouldDeleteForAll}\n          />\n        )}\n        <div className={buildClassName('dialog-buttons',\n          isMediaDropdownOpen ? styles.dialogButtons : styles.proceedButtons)}\n        >\n          <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageList}>\n            {shouldShowOption ? oldLang('DeleteProceedBtn') : lang('Delete')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onCloseHandler}>{oldLang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      deleteMessageModal,\n    } = selectTabState(global);\n    const messageIds = deleteMessageModal?.messageIds;\n    const chatId = deleteMessageModal?.chatId;\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global, messageIds);\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chat && selectChatFullInfo(global, chat.id);\n    const linkedChatId = chatFullInfo?.linkedChatId;\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const isSchedule = deleteMessageModal?.isSchedule;\n    const onConfirm = deleteMessageModal?.onConfirm;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n    const chatBot = Boolean(chat && !isSystemBot(chat.id) && selectBot(global, chat.id));\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const canBanUsers = chat && getHasAdminRight(chat, 'banUsers');\n    const isCreator = chat?.isCreator;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const willDeleteForCurrentUserOnly = (chat && isChatBasicGroup(chat) && !canDeleteForAll) || isChatWithBot;\n    const willDeleteForAll = chat && (isChatSuperGroup(chat) || isChannel);\n\n    return {\n      chat,\n      isChannel,\n      isSuperGroup,\n      messageIds,\n      currentUserId: global.currentUserId,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n      adminMembersById,\n      chatBot,\n      canBanUsers,\n      linkedChatId,\n      isSchedule,\n      isCreator,\n      onConfirm,\n    };\n  },\n)(DeleteMessageModal));\n","import { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  getPrivateChatUserId,\n  getUserFirstOrLastName,\n  isChatBasicGroup,\n  isChatChannel,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal = ({\n  isOpen,\n  chatId,\n  messageId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}: OwnProps & StateProps) => {\n  const { pinMessage } = getActions();\n\n  const [shouldPinForAll, setShouldPinForAll] = useState(true);\n\n  const handlePinMessage = useLastCallback(() => {\n    pinMessage({\n      chatId,\n      messageId,\n      isUnpin: false,\n      isOneSide: !shouldPinForAll,\n      isSilent: !shouldPinForAll,\n    });\n    onClose();\n  });\n\n  const lang = useOldLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      {canPinForAll && (\n        <Checkbox\n          className=\"dialog-checkbox\"\n          label={contactName ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n          checked={shouldPinForAll}\n          onCheck={setShouldPinForAll}\n        />\n      )}\n      <div className=\"dialog-buttons\">\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n          {lang('DialogPin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <div className=\"dialog-buttons mt-2\">\n        <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n          {lang('DialogUnpin')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive?: boolean) => {\n  function handleCopy(e: KeyboardEvent) {\n    e.preventDefault();\n    getActions().copySelectedMessages();\n  }\n\n  useHotkeys(useMemo(() => (isActive ? {\n    'Mod+C': handleCopy,\n  } : undefined), [isActive]));\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { MessageListType } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanForwardMessages,\n  selectCanReportSelectedMessages, selectCurrentChat,\n  selectCurrentMessageList, selectHasProtectedMessage,\n  selectHasSvg,\n  selectSelectedMessagesCount,\n  selectTabState,\n} from '../../global/selectors';\nimport { selectSharedSettings } from '../../global/selectors/sharedState';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  canForwardMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  isAnyModalOpen?: boolean;\n  selectedMessageIds?: number[];\n  shouldWarnAboutSvg?: boolean;\n  hasSvgs?: boolean;\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  chat,\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  canForwardMessages,\n  hasProtectedMessage,\n  isAnyModalOpen,\n  selectedMessageIds,\n  shouldWarnAboutSvg,\n  hasSvgs,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n    reportMessages,\n    openDeleteMessageModal,\n    setSharedSettingOption,\n  } = getActions();\n  const lang = useOldLang();\n\n  useCopySelectedMessages(isActive);\n\n  const [isSvgDialogOpen, openSvgDialog, closeSvgDialog] = useFlag();\n  const [shouldNotWarnAboutSvg, setShouldNotWarnAboutSvg] = useState(false);\n\n  const handleExitMessageSelectMode = useLastCallback(() => {\n    exitMessageSelectMode();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    openDeleteMessageModal({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n      isSchedule,\n    });\n  });\n\n  useEffect(() => {\n    return isActive && !isAnyModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: canDeleteMessages ? handleDelete : undefined,\n        onDelete: canDeleteMessages ? handleDelete : undefined,\n        onEsc: handleExitMessageSelectMode,\n      })\n      : undefined;\n  }, [\n    isActive, handleDelete, handleExitMessageSelectMode, isAnyModalOpen,\n    canDeleteMessages,\n  ]);\n\n  const handleCopy = useLastCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  });\n\n  const handleDownload = useLastCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  });\n\n  const handleMessageDownload = useLastCallback(() => {\n    if (shouldWarnAboutSvg && hasSvgs) {\n      openSvgDialog();\n      return;\n    }\n\n    handleDownload();\n  });\n\n  const handleSvgConfirm = useLastCallback(() => {\n    setSharedSettingOption({ shouldWarnAboutSvg: !shouldNotWarnAboutSvg });\n    closeSvgDialog();\n    handleDownload();\n  });\n\n  const prevSelectedMessagesCount = usePreviousDeprecated(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const openMessageReport = useLastCallback(() => {\n    if (!selectedMessageIds || !chat) return;\n    reportMessages({\n      chatId: chat.id,\n      messageIds: selectedMessageIds,\n    });\n    exitMessageSelectMode();\n  });\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: IconName, label: string, onClick: AnyToVoidFunction, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'div-button',\n          'item',\n          destructive && 'destructive',\n        )}\n        onClick={onClick}\n        title={label}\n        aria-label={label}\n      >\n        <Icon name={icon} />\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div className={className}>\n        <div className=\"MessageSelectToolbar-inner\">\n          <Button\n            color=\"translucent\"\n            round\n            onClick={handleExitMessageSelectMode}\n            ariaLabel=\"Exit select mode\"\n          >\n            <Icon name=\"close\" />\n          </Button>\n          <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n            {formattedMessagesCount}\n          </span>\n\n          {Boolean(selectedMessagesCount) && (\n            <div className=\"MessageSelectToolbar-actions\">\n              {messageListType !== 'scheduled' && canForwardMessages && (\n                renderButton(\n                  'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages,\n                )\n              )}\n              {canReportMessages && (\n                renderButton('flag', lang('Conversation.ReportMessages'), openMessageReport)\n              )}\n              {canDownloadMessages && !hasProtectedMessage && (\n                renderButton('download', lang('lng_media_download'), handleMessageDownload)\n              )}\n              {!hasProtectedMessage && (\n                renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy)\n              )}\n              {canDeleteMessages && (\n                renderButton('delete', lang('EditAdminGroupDeleteMessages'), handleDelete, true)\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isSvgDialogOpen}\n        onClose={closeSvgDialog}\n        confirmHandler={handleSvgConfirm}\n      >\n        {lang('lng_launch_svg_warning')}\n        <Checkbox\n          className=\"dialog-checkbox\"\n          checked={shouldNotWarnAboutSvg}\n          label={lang('lng_launch_exe_dont_ask')}\n          onCheck={setShouldNotWarnAboutSvg}\n        />\n      </ConfirmDialog>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n    const chat = selectCurrentChat(global);\n\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const isSchedule = messageListType === 'scheduled';\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = Boolean(!isSchedule && selectCanReportSelectedMessages(global));\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = tabState.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n    const canForward = !isSchedule && chatId ? selectCanForwardMessages(global, chatId, selectedMessageIds) : false;\n    const hasSvgs = selectedMessageIds && chatId ? selectHasSvg(global, chatId, selectedMessageIds) : false;\n    const isShareMessageModalOpen = tabState.isShareMessageModalShown;\n    const isAnyModalOpen = Boolean(isShareMessageModalOpen || tabState.requestedDraft\n      || tabState.requestedAttachBotInChat || tabState.requestedAttachBotInstall || tabState.reportModal\n      || tabState.deleteMessageModal);\n\n    return {\n      chat,\n      isSchedule,\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      canForwardMessages: canForward,\n      selectedMessageIds,\n      hasProtectedMessage,\n      isAnyModalOpen,\n      shouldWarnAboutSvg,\n      hasSvgs,\n    };\n  },\n)(MessageSelectToolbar));\n","import { memo, useMemo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChatMessage, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport styles from './SeenByModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  seenByDates?: Record<string, number>;\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nfunction SeenByModal({\n  isOpen,\n  seenByDates,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderingSeenByDates = useCurrentOrPrev(seenByDates, true);\n  const memberIds = useMemo(() => {\n    if (!renderingSeenByDates) {\n      return undefined;\n    }\n\n    const result = Object.keys(renderingSeenByDates);\n    result.sort((leftId, rightId) => renderingSeenByDates[rightId] - renderingSeenByDates[leftId]);\n\n    return result;\n  }, [renderingSeenByDates]);\n\n  const handleClick = useLastCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleCloseSeenByModal = useLastCallback(() => {\n    closeSeenByModal();\n  });\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className={buildClassName(styles.modal, 'narrow')}\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {memberIds && memberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo\n              userId={userId}\n              noStatusOrTyping\n              status={formatDateAtTime(lang, renderingSeenByDates![userId] * 1000)}\n              statusIcon=\"message-read\"\n            />\n          </ListItem>\n        ))}\n      </div>\n      <div className=\"dialog-buttons mt-2\">\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={handleCloseSeenByModal}\n        >\n          {lang('Close')}\n        </Button>\n      </div>\n    </Modal>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      seenByDates: selectChatMessage(global, chatId, messageId)?.seenByDates,\n    };\n  },\n)(SeenByModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"slqA9gR2\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"tauadiDm\",\"icon\":\"i4wZg_0J\",\"header\":\"MQxuEIRA\",\"desc\":\"AEAN1Au4\",\"separator\":\"sXXb5yOS\",\"button\":\"F7owtTHj\",\"closeButton\":\"i6iFv9YE\"};","import { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTabState, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\nimport renderText from './helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal, { ANIMATION_DURATION } from '../ui/Modal';\nimport Separator from '../ui/Separator';\nimport AnimatedIconWithPreview from './AnimatedIconWithPreview';\nimport Icon from './icons/Icon';\n\nimport styles from './PrivacySettingsNoticeModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isReadDate?: boolean;\n};\n\nconst CLOSE_ANIMATION_DURATION = ANIMATION_DURATION + ANIMATION_END_DELAY;\n\nconst PrivacySettingsNoticeModal = ({ isOpen, isReadDate, user }: OwnProps & StateProps) => {\n  const lang = useOldLang();\n  const {\n    updateGlobalPrivacySettings,\n    openPremiumModal,\n    closePrivacySettingsNoticeModal,\n    showNotification,\n    setPrivacyVisibility,\n    loadUser,\n  } = getActions();\n  const userName = getUserFirstOrLastName(user);\n\n  const handleShowReadTime = useLastCallback(() => {\n    updateGlobalPrivacySettings({ shouldHideReadMarks: false });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumReadSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleShowLastSeen = useLastCallback(() => {\n    setPrivacyVisibility({\n      privacyKey: 'lastSeen',\n      visibility: 'everybody',\n      onSuccess: () => loadUser({ userId: user!.id }),\n    });\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      showNotification({ message: lang('PremiumLastSeenSet') });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleOpenPremium = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n\n    setTimeout(() => {\n      openPremiumModal({ initialSection: 'last_seen' });\n    }, CLOSE_ANIMATION_DURATION);\n  });\n\n  const handleClose = useLastCallback(() => {\n    closePrivacySettingsNoticeModal();\n  });\n\n  return (\n    <Modal isSlim isOpen={isOpen} onClose={handleClose}>\n      <div className={styles.container} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className={styles.closeButton}\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={handleClose}\n          ariaLabel=\"Close\"\n        >\n          <Icon name=\"close\" />\n        </Button>\n        <AnimatedIconWithPreview\n          tgsUrl={isReadDate ? LOCAL_TGS_URLS.ReadTime : LOCAL_TGS_URLS.LastSeen}\n          size={84}\n          className={styles.icon}\n          nonInteractive\n          noLoop\n        />\n        <h2 className={styles.header}>\n          {lang(isReadDate ? 'PremiumReadHeader1' : 'PremiumLastSeenHeader1')}\n        </h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(\n              isReadDate ? 'PremiumReadText1' : 'PremiumLastSeenText1Locked',\n              userName,\n            ),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          size=\"smaller\"\n          onClick={isReadDate ? handleShowReadTime : handleShowLastSeen}\n          className={styles.button}\n        >\n          {lang(isReadDate ? 'PremiumReadButton1' : 'PremiumLastSeenButton1')}\n        </Button>\n        <Separator className={styles.separator}>{lang('PremiumOr')}</Separator>\n        <h2 className={styles.header}>{lang('PremiumReadHeader2')}</h2>\n        <p className={styles.desc}>\n          {renderText(\n            lang(isReadDate ? 'PremiumReadText2' : 'PremiumLastSeenText2', userName),\n            ['simple_markdown'],\n          )}\n        </p>\n        <Button\n          withPremiumGradient\n          size=\"smaller\"\n          onClick={handleOpenPremium}\n          className={styles.button}\n        >\n          {lang('PremiumLastSeenButton2')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(\n  withGlobal<OwnProps>((global): StateProps => {\n    const { chatId, isReadDate } = selectTabState(global).privacySettingsNoticeModal || {};\n    const user = chatId ? selectUser(global, chatId) : undefined;\n\n    return { user, isReadDate };\n  })(PrivacySettingsNoticeModal),\n);\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiReaction } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { getReactionKey, isSameReaction } from '../../global/helpers';\nimport {\n  selectChatMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatDateAtTime } from '../../util/dates/dateFormat';\nimport { unique } from '../../util/iteratees';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useFlag from '../../hooks/useFlag';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Avatar from '../common/Avatar';\nimport FullNameTitle from '../common/FullNameTitle';\nimport Icon from '../common/icons/Icon';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ReactionStaticEmoji from '../common/reactions/ReactionStaticEmoji';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByDates'> & {\n  chatId?: string;\n  messageId?: number;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByDates,\n  availableReactions,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on chats or users, so we avoid them\n  const chatsById = getGlobal().chats.byId;\n  const usersById = getGlobal().users.byId;\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<ApiReaction | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isOpen && !isClosing) {\n      chatIdRef.current = undefined;\n    }\n\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  });\n\n  const handleClose = useLastCallback(() => {\n    startClosing();\n  });\n\n  const handleClick = useLastCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  });\n\n  const handleLoadMore = useLastCallback(() => {\n    loadReactors({\n      chatId: chatId!,\n      messageId: messageId!,\n    });\n  });\n\n  const allReactions = useMemo(() => {\n    const uniqueReactions: ApiReaction[] = [];\n    reactors?.reactions?.forEach(({ reaction }) => {\n      if (!uniqueReactions.some((r) => isSameReaction(r, reaction))) {\n        uniqueReactions.push(reaction);\n      }\n    });\n    return uniqueReactions;\n  }, [reactors]);\n\n  const peerIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions\n        .filter(({ reaction }) => isSameReaction(reaction, chosenTab))\n        .map(({ peerId }) => peerId);\n    }\n\n    const seenByUserIds = Object.keys(seenByDates || {});\n\n    return unique(reactors?.reactions.map(({ peerId }) => peerId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors, seenByDates]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, peerIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={oldLang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n\n            onClick={() => setChosenTab(undefined)}\n          >\n            <Icon name=\"heart\" />\n            {Boolean(reactors?.count) && formatIntegerCompact(lang, reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results\n              .find((reactionsCount) => isSameReaction(reactionsCount.reaction, reaction))?.count;\n            return (\n              <Button\n                key={getReactionKey(reaction)}\n                className={buildClassName(isSameReaction(chosenTab, reaction) && 'chosen')}\n                size=\"tiny\"\n                ripple\n\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji\n                  reaction={reaction}\n                  className=\"reaction-filter-emoji\"\n                  availableReactions={availableReactions}\n                />\n                {Boolean(count) && formatIntegerCompact(lang, count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={oldLang.isRtl ? 'rtl' : undefined} className=\"reactor-list-wrapper\">\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.flatMap(\n              (peerId) => {\n                const peer = usersById[peerId] || chatsById[peerId];\n\n                const peerReactions = reactors?.reactions.filter((reactor) => reactor.peerId === peerId);\n                const items: React.ReactNode[] = [];\n                const seenByUser = seenByDates?.[peerId];\n\n                peerReactions?.forEach((r) => {\n                  if (chosenTab && !isSameReaction(r.reaction, chosenTab)) return;\n\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-${getReactionKey(r.reaction)}`}\n                      className=\"chat-item-clickable reactors-list-item\"\n\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <Avatar peer={peer} size=\"medium\" />\n                      <div className=\"info\">\n                        <FullNameTitle peer={peer} withEmojiStatus />\n                        <span className=\"status\" dir=\"auto\">\n                          <Icon name=\"heart-outline\" className=\"status-icon\" />\n                          {formatDateAtTime(oldLang, r.addedDate * 1000)}\n                        </span>\n                      </div>\n                      {r.reaction && (\n                        <ReactionStaticEmoji\n                          className=\"reactors-list-emoji\"\n                          reaction={r.reaction}\n                          availableReactions={availableReactions}\n                        />\n                      )}\n                    </ListItem>,\n                  );\n                });\n\n                if (!chosenTab && !peerReactions?.length) {\n                  items.push(\n                    <ListItem\n                      key={`${peerId}-seen-by`}\n                      className=\"chat-item-clickable scroll-item small-icon\"\n\n                      onClick={() => handleClick(peerId)}\n                    >\n                      <PrivateChatInfo\n                        userId={peerId}\n                        noStatusOrTyping\n                        avatarSize=\"medium\"\n                        status={seenByUser ? formatDateAtTime(oldLang, seenByUser * 1000) : undefined}\n                        statusIcon=\"message-read\"\n                      />\n                    </ListItem>,\n                  );\n                }\n                return items;\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={handleClose}\n      >\n        {oldLang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByDates: message?.seenByDates,\n      availableReactions: global.reactions.availableReactions,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../types';\n\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { IS_ANDROID } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 309;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useLastCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  });\n\n  const handleCancelAnimation = useLastCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  });\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      endHeavyAnimation();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectHash = effectAnimationId && `sticker${effectAnimationId}`;\n  const effectTgsUrl = useMedia(effectHash, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={effectTgsUrl}\n        play\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceAlways\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../config';\nimport {\n  selectLanguageCode,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectTabState,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\nimport ListItem from '../ui/ListItem';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatLanguageModal.module.scss';\n\ntype LanguageItem = {\n  langCode: string;\n  translatedName: string;\n  originalName: string;\n};\n\nexport type OwnProps = {\n  isOpen?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  activeTranslationLanguage?: string;\n  currentLanguageCode: string;\n};\n\nconst ChatLanguageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  messageId,\n  activeTranslationLanguage,\n  currentLanguageCode,\n}) => {\n  const {\n    requestMessageTranslation,\n    closeChatLanguageModal,\n    setSettingOption,\n    requestChatTranslation,\n  } = getActions();\n\n  const [search, setSearch] = useState('');\n  const lang = useOldLang();\n\n  const handleSelect = useLastCallback((langCode: string) => {\n    if (!chatId) return;\n\n    if (messageId) {\n      requestMessageTranslation({ chatId, id: messageId, toLanguageCode: langCode });\n    } else {\n      setSettingOption({ translationLanguage: langCode });\n      requestChatTranslation({ chatId, toLanguageCode: langCode });\n    }\n\n    closeChatLanguageModal();\n  });\n\n  const handleSearch = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearch(e.target.value);\n  });\n\n  const translateLanguages = useMemo(() => SUPPORTED_TRANSLATION_LANGUAGES.map((langCode: string) => {\n    const translatedNames = new Intl.DisplayNames([currentLanguageCode], { type: 'language' });\n    const translatedName = translatedNames.of(langCode)!;\n\n    const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n    const originalName = originalNames.of(langCode)!;\n\n    return {\n      langCode,\n      translatedName,\n      originalName,\n    } satisfies LanguageItem;\n  }), [currentLanguageCode]);\n\n  useEffect(() => {\n    if (!isOpen) setSearch('');\n  }, [isOpen]);\n\n  const filteredDisplayedLanguages = useMemo(() => {\n    if (!search.trim()) {\n      return translateLanguages;\n    }\n\n    return translateLanguages.filter(({ langCode, translatedName, originalName }) => (\n      translatedName.toLowerCase().includes(search.toLowerCase())\n      || originalName.toLowerCase().includes(search.toLowerCase())\n      || langCode.toLowerCase().includes(search.toLowerCase())\n    ));\n  }, [translateLanguages, search]);\n\n  return (\n    <Modal\n      className={styles.root}\n      isSlim\n      isOpen={isOpen}\n      hasCloseButton\n      title={lang('Language')}\n      onClose={closeChatLanguageModal}\n    >\n      <InputText\n        key=\"search\"\n        value={search}\n        onChange={handleSearch}\n        placeholder={lang('Search')}\n        teactExperimentControlled\n      />\n      <div className={buildClassName(styles.languages, 'custom-scroll')}>\n        {filteredDisplayedLanguages.map(({ langCode, originalName, translatedName }) => (\n          <ListItem\n            key={langCode}\n            className={buildClassName(styles.listItem, 'no-icon')}\n            secondaryIcon={activeTranslationLanguage === langCode ? 'check' : undefined}\n            disabled={activeTranslationLanguage === langCode}\n            multiline\n            narrow\n\n            onClick={() => handleSelect(langCode)}\n          >\n            <span className={buildClassName('title', styles.title)}>\n              {renderText(originalName, ['highlight'], { highlight: search })}\n            </span>\n            <span className={buildClassName('subtitle', styles.subtitle)}>\n              {renderText(translatedName, ['highlight'], { highlight: search })}\n            </span>\n          </ListItem>\n        ))}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = selectTabState(global).chatLanguageModal || {};\n\n    const currentLanguageCode = selectLanguageCode(global);\n    const activeTranslationLanguage = chatId\n      ? messageId\n        ? selectRequestedMessageTranslationLanguage(global, chatId, messageId)\n        : selectRequestedChatTranslationLanguage(global, chatId)\n      : undefined;\n\n    return {\n      chatId,\n      messageId,\n      activeTranslationLanguage,\n      currentLanguageCode,\n    };\n  },\n)(ChatLanguageModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"aMjNU9gm\",\"list-item\":\"T3An6Hoz\",\"listItem\":\"T3An6Hoz\",\"title\":\"dQ9wwFu1\",\"subtitle\":\"m_J41YYl\",\"languages\":\"r3YNWDQr\"};","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"WEJIbFQj\",\"closeButton\":\"_vwPuDEM\",\"icon\":\"BUiGM8qZ\",\"title\":\"Q3NhXpNI\",\"description\":\"frZbGQ0G\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiCountryCode } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './CollectibleInfoModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['collectibleInfoModal'];\n};\n\ntype StateProps = {\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst TOP_ICON_SIZE = 60;\n\nconst CollectibleInfoModal: FC<OwnProps & StateProps> = ({\n  modal,\n  phoneCodeList,\n}) => {\n  const {\n    closeCollectibleInfoModal,\n    openChat,\n    openUrl,\n    showNotification,\n  } = getActions();\n  const lang = useOldLang();\n\n  const isUsername = modal?.type === 'username';\n\n  const handleClose = useLastCallback(() => {\n    closeCollectibleInfoModal();\n  });\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: modal!.peerId });\n    handleClose();\n  });\n\n  const handleOpenUrl = useLastCallback(() => {\n    openUrl({\n      url: modal!.url,\n      shouldSkipModal: true,\n    });\n    handleClose();\n  });\n\n  const handleCopy = useLastCallback(() => {\n    const text = isUsername ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal!.collectible);\n    copyTextToClipboard(text);\n    showNotification({\n      message: lang(isUsername ? 'UsernameCopied' : 'PhoneCopied'),\n    });\n    handleClose();\n  });\n\n  const title = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameTitle' : 'FragmentPhoneTitle';\n    const formattedCollectible = isUsername\n      ? formatUsername(modal.collectible)\n      : formatPhoneNumberWithCode(phoneCodeList, modal.collectible);\n    return lang(key, formattedCollectible);\n  }, [modal, isUsername, phoneCodeList, lang]);\n\n  const description = useMemo(() => {\n    if (!modal) return undefined;\n    const key = isUsername ? 'FragmentUsernameMessage' : 'FragmentPhoneMessage';\n    const date = formatDateAtTime(lang, modal.purchaseDate * 1000);\n    const currency = formatCurrencyAsString(modal.amount, modal.currency, lang.code);\n    const cryptoCurrency = formatCurrencyAsString(modal.cryptoAmount, modal.cryptoCurrency, lang.code);\n    const paid = `${cryptoCurrency} (${currency})`;\n    return lang(key, [date, paid]);\n  }, [modal, isUsername, lang]);\n\n  return (\n    <Modal\n      isOpen={Boolean(modal)}\n      isSlim\n      contentClassName={styles.content}\n      onClose={closeCollectibleInfoModal}\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      <div className={styles.icon}>\n        <AnimatedIconWithPreview\n          tgsUrl={isUsername ? LOCAL_TGS_URLS.Mention : LOCAL_TGS_URLS.Fragment}\n          size={TOP_ICON_SIZE}\n        />\n      </div>\n      <h3 className={styles.title}>\n        {title && renderText(title, ['simple_markdown'])}\n      </h3>\n      <PeerChip\n        className={styles.chip}\n        peerId={modal?.peerId}\n        forceShowSelf\n        clickArg={modal?.peerId}\n        onClick={handleOpenChat}\n      />\n      <p className={styles.description}>\n        {description && renderText(description, ['simple_markdown'])}\n      </p>\n      <div className=\"dialog-buttons dialog-buttons-centered\">\n        <Button className=\"confirm-dialog-button\" onClick={handleOpenUrl}>\n          {lang('FragmentUsernameOpen')}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={handleCopy}>\n          {lang(isUsername ? 'FragmentUsernameCopy' : 'FragmentPhoneCopy')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { countryList } = global;\n\n    return {\n      phoneCodeList: countryList.phoneCodes,\n    };\n  },\n)(CollectibleInfoModal));\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { GlobalState, TabState } from '../../../../global/types';\nimport type { ThemeKey } from '../../../../types';\nimport type { SearchResultKey } from '../../../../util/keys/searchResultKey';\n\nimport { selectChat, selectTabState, selectTheme } from '../../../../global/selectors';\nimport { selectSharedSettings } from '../../../../global/selectors/sharedState';\n\nexport type StateProps = {\n  theme: ThemeKey;\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: SearchResultKey[];\n  searchChatId?: string;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  shouldWarnAboutSvg?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const tabState = selectTabState(global);\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = tabState.globalSearch;\n\n    const { shouldWarnAboutSvg } = selectSharedSettings(global);\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = tabState.activeDownloads;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      shouldWarnAboutSvg,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading, getMessageDownloadableMedia } from '../../../global/helpers';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useOldLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [currentType, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n\n      const media = getMessageDownloadableMedia(message)!;\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Audio\n              key={message.id}\n              theme={theme}\n              message={message}\n              origin={AudioOrigin.Search}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              date={message.date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!chatsById[message.chatId]?.isProtected && !message.isProtected}\n              isDownloading={getIsDownloading(activeDownloads, media)}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  const buttonRef = useRef<HTMLDivElement>();\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat, selectIsChatPinned, selectNotifyDefaults, selectNotifyException, selectUser,\n} from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\nimport MuteChatModal from '../MuteChatModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  withOpenAppButton?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n  withOpenAppButton,\n  onClick,\n}) => {\n  const { requestMainWebView } = getActions();\n  const oldLang = useOldLang();\n\n  const [isMuteModalOpen, openMuteModal, closeMuteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n  const [shouldRenderChatFolderModal, markRenderChatFolderModal, unmarkRenderChatFolderModal] = useFlag();\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n\n  const handleChatFolderChange = useCallback(() => {\n    markRenderChatFolderModal();\n    openChatFolderModal();\n  }, [markRenderChatFolderModal, openChatFolderModal]);\n\n  const handleMute = useCallback(() => {\n    markRenderMuteModal();\n    openMuteModal();\n  }, [markRenderMuteModal, openMuteModal]);\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleMute,\n    handleChatFolderChange,\n  }, true);\n\n  const handleClick = useLastCallback(() => {\n    onClick(chatId);\n  });\n\n  const handleOpenApp = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.stopPropagation();\n\n    const theme = extractCurrentThemeParams();\n    requestMainWebView({\n      botId: chatId,\n      peerId: chatId,\n      theme,\n    });\n  });\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo\n          userId={chatId}\n          withUsername={withUsername}\n          withStory\n          avatarSize=\"medium\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={chatId}\n          withUsername={withUsername}\n          avatarSize=\"medium\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      {withOpenAppButton && user?.hasMainMiniApp && (\n        <Button\n          className=\"ChatBadge miniapp\"\n          pill\n          fluid\n          size=\"tiny\"\n          onClick={handleOpenApp}\n        >\n          {oldLang('BotOpen')}\n        </Button>\n      )}\n      {shouldRenderMuteModal && (\n        <MuteChatModal\n          isOpen={isMuteModalOpen}\n          onClose={closeMuteModal}\n          onCloseAnimationEnd={unmarkRenderMuteModal}\n          chatId={chatId}\n        />\n      )}\n      {shouldRenderChatFolderModal && (\n        <ChatFolderModal\n          isOpen={isChatFolderModalOpen}\n          onClose={closeChatFolderModal}\n          onCloseAnimationEnd={unmarkRenderChatFolderModal}\n          chatId={chatId}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const user = selectUser(global, chatId);\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\ntype StateProps = {\n  isLoading?: boolean;\n  foundIds?: string[];\n  recentBotIds?: string[];\n};\n\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst BotAppResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  foundIds,\n  recentBotIds,\n}) => {\n  const {\n    searchPopularBotApps,\n    openChatWithInfo,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const [shouldShowMoreMine, setShouldShowMoreMine] = useState<boolean>(false);\n\n  const filteredFoundIds = useMemo(() => {\n    if (!foundIds) return [];\n    const recentSet = new Set(recentBotIds);\n    const withoutRecent = foundIds.filter((id) => !recentSet.has(id));\n\n    return filterPeersByQuery({ ids: withoutRecent, query: searchQuery, type: 'user' });\n  }, [foundIds, recentBotIds, searchQuery]);\n\n  const handleChatClick = useLastCallback((id: string) => {\n    openChatWithInfo({ id, shouldReplaceHistory: true });\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchPopularBotApps();\n      });\n    }\n  }, []);\n\n  const handleToggleShowMoreMine = useLastCallback(() => {\n    setShouldShowMoreMine((prev) => !prev);\n  });\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll\"\n        items={canRenderContents ? filteredFoundIds : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && !filteredFoundIds?.length && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && !searchQuery && Boolean(recentBotIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">\n              {recentBotIds.length > LESS_LIST_ITEMS_AMOUNT && (\n                <Link className=\"Link\" onClick={handleToggleShowMoreMine}>\n                  {lang(shouldShowMoreMine ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n                </Link>\n              )}\n              {lang('SearchAppsMine')}\n            </h3>\n            {recentBotIds.map((id, index) => {\n              if (!shouldShowMoreMine && index >= LESS_LIST_ITEMS_AMOUNT) {\n                return undefined;\n              }\n\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n        {canRenderContents && Boolean(filteredFoundIds?.length) && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\">{lang('SearchAppsPopular')}</h3>\n            {filteredFoundIds.map((id) => {\n              return (\n                <LeftSearchResultChat\n                  chatId={id}\n                  onClick={handleChatClick}\n                  withOpenAppButton\n                />\n              );\n            })}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  const globalSearch = selectTabState(global).globalSearch;\n  const foundIds = globalSearch.popularBotApps?.peerIds;\n\n  return {\n    isLoading: !foundIds && globalSearch.fetchingStatus?.botApps,\n    foundIds,\n    recentBotIds: global.topBotApps.userIds,\n  };\n})(BotAppResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiMessageOutgoingStatus,\n  ApiUser,\n} from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageRoundVideo,\n  getMessageSticker,\n  getMessageVideo,\n  getPrivateChatUserId,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Link from '../../ui/Link';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n}) => {\n  const { focusMessage } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const mediaThumbnail = !getMessageSticker(message) ? getMessageMediaThumbDataUri(message) : undefined;\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  });\n\n  const lang = useOldLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  const peer = privateChatUser || chat;\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!isMobile}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        peer={peer}\n        isSavedMessages={privateChatUser?.isSelf}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <FullNameTitle\n            peer={peer}\n            withEmojiStatus\n            isSavedMessages={chatId === privateChatUser?.id && privateChatUser?.isSelf}\n          />\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: OldLangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  return (\n    <span className=\"media-preview\">\n      <img\n        src={blobUrl}\n        alt=\"\"\n        className={\n          buildClassName('media-preview--image', isRoundVideo && 'round', isSpoiler && 'media-preview-spoiler')\n        }\n        draggable={false}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n    const privateChatUser = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n\n    return {\n      chat,\n      ...(privateChatUserId && { privateChatUser }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport { formatDateToString } from '../../../util/dates/dateFormat';\n\nimport Icon from '../../common/icons/Icon';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <Icon name=\"calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiTopic } from '../../../api/types';\n\nimport { selectTopic } from '../../../global/selectors';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport TopicIcon from '../../common/TopicIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  topicId: number;\n  onClick: (id: number) => void;\n};\n\ntype StateProps = {\n  topic?: ApiTopic;\n};\n\nconst TOPIC_ICON_SIZE = 2 * REM;\n\nconst LeftSearchResultTopic: FC<OwnProps & StateProps> = ({\n  topicId,\n  topic,\n  onClick,\n}) => {\n  const handleClick = useCallback(() => {\n    onClick(topicId);\n  }, [topicId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!topic) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      buttonClassName=\"topic-item\"\n      buttonRef={buttonRef}\n    >\n      <TopicIcon\n        size={TOPIC_ICON_SIZE}\n        topic={topic}\n        className=\"topic-icon\"\n        letterClassName=\"topic-icon-letter\"\n      />\n      <div dir=\"auto\" className=\"fullName\">{renderText(topic.title)}</div>\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId }): StateProps => {\n    const topic = selectTopic(global, chatId, topicId);\n\n    return {\n      topic,\n    };\n  },\n)(LeftSearchResultTopic));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultTopic from './LeftSearchResultTopic';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: SearchResultKey[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  foundTopicIds?: number[];\n  searchChatId?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  foundTopicIds,\n  searchChatId,\n  onSearchDateSelect,\n  onReset,\n}) => {\n  const { searchMessagesGlobal, openThread } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const handleTopicClick = useCallback(\n    (id: number) => {\n      if (!searchChatId) return;\n      openThread({ chatId: searchChatId, threadId: id, shouldReplaceHistory: true });\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [searchChatId, isMobile, onReset],\n  );\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length\n    && !foundTopicIds?.length;\n\n  return (\n    <div className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {Boolean(foundTopicIds?.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('Topics')}\n            </h3>\n            {foundTopicIds.map((id) => {\n              return (\n                <LeftSearchResultTopic\n                  chatId={searchChatId!}\n                  topicId={id}\n                  onClick={handleTopicClick}\n                />\n              );\n            })}\n          </div>\n        )}\n        {Boolean(foundMessages.length) && (\n          <div className=\"pb-2\">\n            <h3 className=\"section-heading topic-search-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n              {lang('SearchMessages')}\n            </h3>\n            {foundMessages.map(renderFoundMessage)}\n          </div>\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId } } = global;\n    const {\n      fetchingStatus, resultsByType, foundTopicIds, chatId: searchChatId,\n    } = selectTabState(global).globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      foundTopicIds,\n      searchChatId,\n    };\n  },\n)(ChatMessageResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiSponsoredPeer } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { isUserId } from '../../../util/entities/ids';\n\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { type ObserveFn, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport BadgeButton from '../../common/BadgeButton';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport SponsoredMessageContextMenuContainer from '../../middle/message/SponsoredContextMenuContainer';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  sponsoredPeer: ApiSponsoredPeer;\n  observeIntersection?: ObserveFn;\n};\n\nconst LeftSearchResultSponsored: FC<OwnProps> = ({\n  sponsoredPeer,\n  observeIntersection,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const { clickSponsored, viewSponsored, openChat } = getActions();\n  const lang = useLang();\n\n  const {\n    peerId, randomId, additionalInfo, sponsorInfo,\n  } = sponsoredPeer;\n\n  useOnIntersect(ref, observeIntersection, (entry) => {\n    if (entry.intersectionRatio === 1) {\n      viewSponsored({ randomId });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    clickSponsored({ randomId });\n    openChat({ id: peerId });\n  });\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const {\n    handleClick: handleBadgeClick,\n    handleMouseDown: handleBadgeMouseDown,\n  } = useFastClick((e: React.MouseEvent) => {\n    e.stopPropagation();\n    handleContextMenu(e);\n  });\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  return (\n    <ListItem\n      ref={ref}\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n      buttonRef={buttonRef}\n    >\n      {isUserId(peerId) ? (\n        <PrivateChatInfo\n          userId={peerId}\n          withUsername\n          withStory\n          avatarSize=\"medium\"\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      ) : (\n        <GroupChatInfo\n          chatId={peerId}\n          withUsername\n          avatarSize=\"medium\"\n          withStory\n          storyViewerOrigin={StoryViewerOrigin.SearchResult}\n        />\n      )}\n      <BadgeButton className=\"search-sponsored-badge\" onMouseDown={handleBadgeMouseDown} onClick={handleBadgeClick}>\n        {lang('SponsoredPeerBadge')}\n        <Icon name=\"more\" />\n      </BadgeButton>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          triggerRef={ref}\n          randomId={randomId}\n          additionalInfo={additionalInfo}\n          canReport\n          sponsorInfo={sponsorInfo}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </ListItem>\n  );\n};\n\nexport default memo(LeftSearchResultSponsored);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds,\n  usersById,\n  recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  const topUsersRef = useRef<HTMLDivElement>();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const handleClearRecentlyFoundChats = useCallback(() => {\n    clearRecentlyFoundChats();\n  }, [clearRecentlyFoundChats]);\n\n  const lang = useOldLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers\">\n            {topUserIds.map((userId) => (\n              <div\n                key={userId}\n                className=\"top-peer-item\"\n                onClick={() => handleClick(userId)}\n                dir={lang.isRtl ? 'rtl' : undefined}\n              >\n                <Avatar peer={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3\n            className={buildClassName(\n              'section-heading mt-0 recent-chats-header',\n              !topUserIds && 'without-border',\n            )}\n            dir={lang.isRtl ? 'rtl' : undefined}\n          >\n            {lang('Recent')}\n\n            <Button\n              className=\"clear-recent-chats\"\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel={lang('Clear')}\n              onClick={handleClearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <Icon name=\"close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              withOpenAppButton\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageSearchContext, ApiSponsoredPeer } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { ALL_FOLDER_ID, GLOBAL_SUGGESTED_CHANNELS_ID } from '../../../config';\nimport {\n  isChatChannel,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectSimilarChannelIds, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getOrderedIds } from '../../../util/folderManager';\nimport { unique } from '../../../util/iteratees';\nimport { parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PeerChip from '../../common/PeerChip';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Transition from '../../ui/Transition';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport LeftSearchResultSponsored from './LeftSearchResultSponsored';\nimport RecentContacts from './RecentContacts';\n\nimport './ChatResults.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  isChannelList?: boolean;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  contactIds?: string[];\n  accountPeerIds?: string[];\n  globalPeerIds?: string[];\n  foundIds?: SearchResultKey[];\n  sponsoredPeer?: ApiSponsoredPeer;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  suggestedChannelIds?: string[];\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 500, false);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  isChannelList,\n  searchQuery,\n  searchDate,\n  dateSearchQuery,\n  currentUserId,\n  contactIds,\n  accountPeerIds,\n  globalPeerIds,\n  foundIds,\n  globalMessagesByChatId,\n  fetchingStatus,\n  suggestedChannelIds,\n  sponsoredPeer,\n  onReset,\n  onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal,\n    setGlobalSearchChatId, loadChannelRecommendations,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const chatSelectionRef = useRef<HTMLDivElement>();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n  const [searchContext, setSearchContext] = useState<ApiMessageSearchContext>('all');\n  const ref = useRef<HTMLDivElement>();\n\n  useEffectOnce(() => {\n    if (isChannelList) loadChannelRecommendations({});\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: isChannelList ? 'channels' : 'text',\n          context: searchContext,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery, searchContext]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!isMobile) {\n        onReset();\n      }\n    },\n    [openChat, currentUserId, isMobile, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  function getSearchContextCaption(context: ApiMessageSearchContext) {\n    if (context === 'users') return lang('PrivateChatsSearchContext');\n    if (context === 'groups') return lang('GroupChatsSearchContext');\n    if (context === 'channels') return lang('ChannelsSearchContext');\n    return lang('AllChatsSearchContext');\n  }\n\n  const {\n    isContextMenuOpen, contextMenuAnchor, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getRootElement = useLastCallback(() => ref.current!);\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.chatResultsContextMenu .bubble'));\n  const getTriggerElement = useLastCallback(() => ref.current!.querySelector('.menuTrigger'));\n\n  const handleClickContext = useLastCallback((e: React.MouseEvent): void => {\n    handleContextMenu(e);\n  });\n\n  const itemPlaceholderClass = buildClassName('icon', 'iconPlaceholder');\n\n  function renderContextMenu() {\n    return (\n      <Menu\n        isOpen={isContextMenuOpen}\n        anchor={contextMenuAnchor}\n        getTriggerElement={getTriggerElement}\n        getRootElement={getRootElement}\n        getMenuElement={getMenuElement}\n        className=\"chatResultsContextMenu\"\n        onClose={handleContextMenuClose}\n        onCloseAnimationEnd={handleContextMenuHide}\n        autoClose\n      >\n        <>\n          <MenuItem\n            icon={searchContext === 'all' ? 'check' : undefined}\n            customIcon={searchContext !== 'all' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('all')}\n          >\n            {getSearchContextCaption('all')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'users' ? 'check' : undefined}\n            customIcon={searchContext !== 'users' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('users')}\n          >\n            {getSearchContextCaption('users')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'groups' ? 'check' : undefined}\n            customIcon={searchContext !== 'groups' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('groups')}\n          >\n            {getSearchContextCaption('groups')}\n          </MenuItem>\n          <MenuItem\n            icon={searchContext === 'channels' ? 'check' : undefined}\n            customIcon={searchContext !== 'channels' ? <i className={itemPlaceholderClass} /> : undefined}\n\n            onClick={() => setSearchContext('channels')}\n          >\n            {getSearchContextCaption('channels')}\n          </MenuItem>\n        </>\n      </Menu>\n    );\n  }\n\n  const localResults = useMemo(() => {\n    if (!isChannelList && (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2))) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const orderedChatIds = getOrderedIds(ALL_FOLDER_ID) ?? [];\n    const filteredChatIds = orderedChatIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n    const localChatIds = filterPeersByQuery({ ids: filteredChatIds, query: searchQuery, type: 'chat' });\n\n    if (isChannelList) return localChatIds;\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(contactIds || []),\n    ];\n\n    const localContactIds = filterPeersByQuery({\n      ids: contactIdsWithMe, query: searchQuery, type: 'user',\n    });\n\n    const localPeerIds = [\n      ...localContactIds,\n      ...localChatIds,\n    ];\n\n    return unique([\n      ...sortChatIds(localPeerIds, undefined, currentUserId ? [currentUserId] : undefined),\n      ...sortChatIds(accountPeerIds || []),\n    ]);\n  }, [searchQuery, currentUserId, contactIds, accountPeerIds, isChannelList]);\n\n  useHorizontalScroll(chatSelectionRef, !localResults.length || isChannelList, true);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalPeerIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const filteredIds = globalPeerIds.filter((id) => {\n      if (!isChannelList) return true;\n      const chat = chatsById[id];\n      return chat && isChatChannel(chat);\n    });\n\n    return sortChatIds(filteredIds, true);\n  }, [globalPeerIds, isChannelList, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    // No need for expensive global updates, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = parseSearchResultKey(id);\n        const chat = chatsById[chatId];\n        if (!chat) return undefined;\n        if (isChannelList && !isChatChannel(chat)) return undefined;\n\n        return globalMessagesByChatId?.[chatId]?.byId[messageId];\n      })\n      .filter(Boolean);\n  }, [searchQuery, searchDate, foundIds, isChannelList, globalMessagesByChatId]);\n\n  useEffect(() => {\n    if (!searchQuery) return;\n    searchMessagesGlobal({\n      type: isChannelList ? 'channels' : 'text',\n      context: searchContext,\n      shouldResetResultsByType: true,\n      shouldCheckFetchingMessagesStatus: true,\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [searchContext]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const chatsById = getGlobal().chats.byId;\n\n    const text = renderMessageSummary(oldLang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const actualFoundIds = foundMessages;\n\n  const nothingFound = searchContext === 'all' && fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !actualFoundIds.length;\n  const isMessagesFetching = fetchingStatus?.messages;\n\n  const shouldRenderTopPeers = !searchQuery && !searchDate && !isChannelList;\n\n  const { observe } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n    isDisabled: !shouldRenderTopPeers,\n  });\n\n  if (shouldRenderTopPeers) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  const shouldRenderMessagesSection = searchContext === 'all' ? Boolean(actualFoundIds.length) : true;\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"LeftSearch--content custom-scroll\"\n      items={actualFoundIds}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={oldLang('ChatList.Search.NoResults')}\n          description={oldLang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && !isChannelList && (\n        <div\n          className=\"chat-selection no-scrollbar\"\n          dir={oldLang.isRtl ? 'rtl' : undefined}\n          ref={chatSelectionRef}\n        >\n          {localResults.map((id) => (\n            <PeerChip\n              peerId={id}\n              className=\"left-search-local-suggestion\"\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreLocal}>\n                {oldLang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {oldLang(isChannelList ? 'SearchMyChannels' : 'DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                withOpenAppButton\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link className=\"Link\" onClick={handleClickShowMoreGlobal}>\n                {oldLang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {oldLang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {sponsoredPeer && (\n            <LeftSearchResultSponsored sponsoredPeer={sponsoredPeer} observeIntersection={observe} />\n          )}\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(suggestedChannelIds?.length) && !searchQuery && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n            {oldLang('SearchRecommendedChannels')}\n          </h3>\n          {suggestedChannelIds.map((id) => {\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      <div className=\"menuOwner\" ref={ref}>\n        {renderContextMenu()}\n        {shouldRenderMessagesSection && (\n          <div className=\"search-section\">\n            <h3 className=\"section-heading\" dir={oldLang.isRtl ? 'auto' : undefined}>\n              {!isChannelList && (\n                <Link className=\"Link menuTrigger dropDownLink\" onClick={handleClickContext}>\n                  {lang('SearchContextCaption', {\n                    type: getSearchContextCaption(searchContext),\n                  }, {\n                    withNodes: true,\n                  })}\n\n                  <Transition\n                    name=\"fade\"\n                    shouldCleanup\n                    activeKey={Number(isMessagesFetching)}\n                    className=\"iconContainer\"\n                    slideClassName=\"iconContainerSlide\"\n                  >\n                    {isMessagesFetching && (<Loading />)}\n                    {!isMessagesFetching && <Icon name=\"down\" />}\n                  </Transition>\n                </Link>\n              )}\n              {oldLang('SearchMessages')}\n            </h3>\n            {actualFoundIds.map(renderFoundMessage)}\n          </div>\n        )}\n      </div>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isChannelList }): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const {\n      currentUserId, messages,\n    } = global;\n\n    if (!contactIds) {\n      return {};\n    }\n\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType, sponsoredPeer,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: accountPeerIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.[isChannelList ? 'channels' : 'text']?.foundIds;\n    const { similarChannelIds } = selectSimilarChannelIds(global, GLOBAL_SUGGESTED_CHANNELS_ID) || {};\n\n    return {\n      currentUserId,\n      contactIds,\n      accountPeerIds,\n      globalPeerIds,\n      foundIds,\n      globalMessagesByChatId,\n      fetchingStatus,\n      sponsoredPeer,\n      suggestedChannelIds: similarChannelIds,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { getIsDownloading, getMessageDocument } from '../../../global/helpers';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Document from '../../common/Document';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  shouldWarnAboutSvg,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n      const message = globalMessagesByChatId[chatId]?.byId[messageId];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              dir={lang.isRtl ? 'rtl' : undefined}\n              key={message.date}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            key={message.id}\n          >\n            <Document\n              document={getMessageDocument(message)!}\n              message={message}\n              withDate\n              datetime={message.date}\n              smaller\n              sender={getSenderName(lang, message, chatsById, usersById)}\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, message.content.document!)}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dates/dateFormat';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { getSenderName } from './helpers/getSenderName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport NothingFound from '../../common/NothingFound';\nimport WebLink from '../../common/WebLink';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const isFirst = index === 0;\n      const shouldDrawDateDivider = isFirst\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <>\n          {shouldDrawDateDivider && (\n            <p\n              className=\"section-heading\"\n              key={message.date}\n              dir={lang.isRtl ? 'rtl' : undefined}\n            >\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <div\n            className=\"ListItem small-icon\"\n            dir={lang.isRtl ? 'rtl' : undefined}\n            key={message.id}\n          >\n            <WebLink\n              key={message.id}\n              message={message}\n              senderTitle={getSenderName(lang, message, chatsById, usersById)}\n              isProtected={isChatProtected || message.isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          </div>\n        </>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch--content\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={canRenderContents ? foundMessages : undefined}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { parseSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Media from '../../common/Media';\nimport NothingFound from '../../common/NothingFound';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport ChatMessage from './ChatMessage';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n        });\n      });\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `searchQuery` is required to prevent infinite message loading\n  }, [searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = parseSearchResultKey(id);\n\n      return globalMessagesByChatId[chatId]?.byId[messageId];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((id: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      messageId: id,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={`${message.chatId}-${message.id}`}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch--content LeftSearch--media\">\n      <InfiniteScroll\n        className={classNames}\n        items={canRenderContents ? foundMessages : undefined}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { RegularLangKey } from '../../../types/language';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { parseDateString } from '../../../util/dates/dateFormat';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport AudioResults from './AudioResults';\nimport BotAppResults from './BotAppResults';\nimport ChatMessageResults from './ChatMessageResults';\nimport ChatResults from './ChatResults';\nimport FileResults from './FileResults';\nimport LinkResults from './LinkResults';\nimport MediaResults from './MediaResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\ntype TabInfo = {\n  type: GlobalSearchContent;\n  key: RegularLangKey;\n};\n\nconst TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabChats' },\n  { type: GlobalSearchContent.ChannelList, key: 'SearchTabChannels' },\n  { type: GlobalSearchContent.BotApps, key: 'SearchTabApps' },\n  { type: GlobalSearchContent.Media, key: 'SearchTabMedia' },\n  { type: GlobalSearchContent.Links, key: 'SearchTabLinks' },\n  { type: GlobalSearchContent.Files, key: 'SearchTabFiles' },\n  { type: GlobalSearchContent.Music, key: 'SearchTabMusic' },\n  { type: GlobalSearchContent.Voice, key: 'SearchTabVoice' },\n];\n\nconst CHAT_TABS: TabInfo[] = [\n  { type: GlobalSearchContent.ChatList, key: 'SearchTabMessages' },\n  ...TABS.slice(3), // Skip ChatList, ChannelList and BotApps, replaced with All Messages\n];\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const tabs = useMemo(() => {\n    const arr = chatId ? CHAT_TABS : TABS;\n    return arr.map((tab) => ({\n      ...tab,\n      title: lang(tab.key),\n    }));\n  }, [chatId, lang]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    const tab = tabs[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  });\n\n  const handleSearchDateSelect = useLastCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const containerRef = useRef<HTMLDivElement>();\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        renderCount={tabs.length}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n            case GlobalSearchContent.ChannelList:\n              if (chatId) {\n                return (\n                  <ChatMessageResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  isChannelList={currentContent === GlobalSearchContent.ChannelList}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.BotApps:\n              return (\n                <BotAppResults\n                  key=\"botApps\"\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = selectTabState(global).globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaState, TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterPeersByQuery } from '../../../../global/helpers/peers';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { unique } from '../../../../util/iteratees';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport Icon from '../../../common/icons/Icon';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Loading from '../../../ui/Loading';\n\ntype StateProps = {\n  maxChats: number;\n};\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: VoidFunction;\n  onSaveFilter: VoidFunction;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps & StateProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n  onSaveFilter,\n  maxChats,\n}) => {\n  const lang = useOldLang();\n\n  const { openLimitReachedModal } = getActions();\n\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = useMemo(() => selectChatFilters(state, mode, true), [mode, state]);\n  const chatTypes = mode === 'included' ? CUSTOM_PEER_INCLUDED_CHAT_TYPES : CUSTOM_PEER_EXCLUDED_CHAT_TYPES;\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const shouldHideChatTypes = state.folder.isChatList;\n\n  useEffect(() => {\n    if (!isActive) {\n      setIsTouched(false);\n    }\n  }, [isActive]);\n\n  const displayedIds = useMemo(() => {\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...filterPeersByQuery({ ids: chatIds, query: chatFilter, type: 'chat' }),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, chatFilter]);\n\n  const handleFilterChange = useLastCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n    setIsTouched(true);\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    if (mode === 'included') {\n      if (ids.length >= maxChats) {\n        openLimitReachedModal({\n          limit: 'dialogFiltersChats',\n        });\n        return;\n      }\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  const handleSelectedChatTypesChange = useLastCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n    setIsTouched(true);\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <div className=\"Picker settings-folders-chat-list\">\n      <PeerPicker\n        categories={shouldHideChatTypes ? undefined : chatTypes}\n        itemIds={displayedIds}\n        selectedIds={selectedChatIds}\n        selectedCategories={selectedChatTypes}\n        filterValue={chatFilter}\n        filterPlaceholder={lang('Search')}\n        categoryPlaceholderKey=\"FilterChatTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        withDefaultPadding\n        withPeerTypes\n        allowMultiple\n        itemInputType=\"checkbox\"\n        onSelectedIdsChange={handleSelectedIdsChange}\n        onSelectedCategoriesChange={handleSelectedChatTypesChange}\n        onFilterChange={handleFilterChange}\n      />\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={onSaveFilter}\n        ariaLabel={lang('Save')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      maxChats: selectCurrentLimit(global, 'dialogFiltersChats'),\n    };\n  },\n)(SettingsFoldersChatFilters));\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatlistExportedInvite } from '../../../../api/types';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { selectCanShareFolder } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { isUserId } from '../../../../util/entities/ids';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { CUSTOM_PEER_EXCLUDED_CHAT_TYPES, CUSTOM_PEER_INCLUDED_CHAT_TYPES } from '../../../../util/objects/customPeer';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport Icon from '../../../common/icons/Icon';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: VoidFunction;\n  onAddExcludedChats: VoidFunction;\n  onShareFolder: VoidFunction;\n  onOpenInvite: (url: string) => void;\n  isActive?: boolean;\n  isOnlyInvites?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n  onSaveFolder: (cb?: VoidFunction) => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n  invites?: ApiChatlistExportedInvite[];\n  isRemoved?: boolean;\n  maxInviteLinks: number;\n  maxChatLists: number;\n  chatListCount: number;\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nexport const ERROR_NO_TITLE = 'Please provide a title for this folder.';\nexport const ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  onShareFolder,\n  onOpenInvite,\n  isActive,\n  onReset,\n  isRemoved,\n  onBack,\n  loadedActiveChatIds,\n  isOnlyInvites,\n  loadedArchivedChatIds,\n  invites,\n  maxInviteLinks,\n  maxChatLists,\n  chatListCount,\n  onSaveFolder,\n}) => {\n  const {\n    loadChatlistInvites,\n    openLimitReachedModal,\n    showNotification,\n  } = getActions();\n\n  const isCreating = state.mode === 'create';\n  const isEditingChatList = state.folder.isChatList;\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  useEffect(() => {\n    if (isRemoved) {\n      onReset();\n    }\n  }, [isRemoved, onReset]);\n\n  useEffect(() => {\n    if (isActive && state.folderId && state.folder.isChatList) {\n      loadChatlistInvites({ folderId: state.folderId });\n    }\n  }, [isActive, state.folder.isChatList, state.folderId]);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'included'), [state]);\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = useMemo(() => selectChatFilters(state, 'excluded'), [state]);\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    dispatch({ type: 'setIsLoading', payload: true });\n\n    onSaveFolder(() => {\n      setTimeout(() => {\n        onReset();\n      }, SUBMIT_TIMEOUT);\n    });\n  }, [dispatch, onSaveFolder, onReset]);\n\n  const handleCreateInviteClick = useCallback(() => {\n    if (!invites) {\n      if (isCreating) {\n        onSaveFolder(onShareFolder);\n      }\n      return;\n    }\n\n    // Ignoring global updates is a known drawback here\n    if (!selectCanShareFolder(getGlobal(), state.folderId!)) {\n      showNotification({ message: lang('ChatList.Filter.InviteLink.IncludeExcludeError') });\n      return;\n    }\n\n    if (chatListCount >= maxChatLists && !state.folder.isChatList) {\n      openLimitReachedModal({\n        limit: 'chatlistJoined',\n      });\n      return;\n    }\n\n    if (invites.length < maxInviteLinks) {\n      if (state.isTouched) {\n        onSaveFolder(onShareFolder);\n      } else {\n        onShareFolder();\n      }\n      return;\n    }\n\n    openLimitReachedModal({\n      limit: 'chatlistInvites',\n    });\n  }, [\n    invites, state.folderId, state.isTouched, chatListCount, maxInviteLinks, isCreating, onSaveFolder,\n    onShareFolder, lang, maxChatLists, state.folder.isChatList,\n  ]);\n\n  const handleEditInviteClick = useCallback((e: React.MouseEvent<HTMLElement>, url: string) => {\n    if (state.isTouched) {\n      onSaveFolder(() => onOpenInvite(url));\n    } else {\n      onOpenInvite(url);\n    }\n  }, [onSaveFolder, onOpenInvite, state.isTouched]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? CUSTOM_PEER_INCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key)\n      : CUSTOM_PEER_EXCLUDED_CHAT_TYPES.find(({ type: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.type}\n        className=\"settings-folders-list-item mb-1\"\n        narrow\n        inactive\n      >\n        <PrivateChatInfo\n          avatarSize=\"small\"\n          customPeer={chatType}\n        />\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ListItem\n            key=\"load-more\"\n            className=\"settings-folders-list-item\"\n            narrow\n\n            onClick={clickHandler}\n            icon=\"down\"\n          >\n            {lang('FilterShowMoreChats', leftChatsCount, 'i')}\n          </ListItem>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIconWithPreview\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {isCreating && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title.text}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        {!isOnlyInvites && (\n          <div className=\"settings-item\">\n            {state.error && state.error === ERROR_NO_CHATS && (\n              <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang(state.error)}\n              </p>\n            )}\n\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddIncludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('included')}\n          </div>\n        )}\n\n        {!isOnlyInvites && !isEditingChatList && (\n          <div className=\"settings-item pt-3\">\n            <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n            <ListItem\n              className=\"settings-folders-list-item color-primary\"\n              icon=\"add\"\n              narrow\n              onClick={onAddExcludedChats}\n            >\n              {lang('FilterAddChats')}\n            </ListItem>\n\n            {renderChats('excluded')}\n          </div>\n        )}\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FolderLinkScreen.Title')}\n          </h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary\"\n            icon=\"add\"\n            narrow\n            onClick={handleCreateInviteClick}\n          >\n            {lang('ChatListFilter.CreateLinkNew')}\n          </ListItem>\n\n          {invites?.map((invite) => (\n            <ListItem\n              className=\"settings-folders-list-item\"\n              icon=\"link\"\n              narrow\n              multiline\n              onClick={handleEditInviteClick}\n              clickArg={invite.url}\n            >\n              <span className=\"title\" dir=\"auto\">{invite.title || invite.url}</span>\n              <span className=\"subtitle\">\n                {lang('ChatListFilter.LinkLabelChatCount', invite.peerIds.length, 'i')}\n              </span>\n            </ListItem>\n          ))}\n\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { state }): StateProps => {\n    const { listIds } = global.chats;\n    const { byId, invites } = global.chatFolders;\n    const chatListCount = Object.values(byId).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n      invites: state.folderId ? (invites[state.folderId] || MEMO_EMPTY_ARRAY) : undefined,\n      isRemoved: state.folderId !== undefined && !byId[state.folderId],\n      maxInviteLinks: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      chatListCount,\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { ALL_FOLDER_ID, STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport { selectIsCurrentUserPremium } from '../../../../global/selectors';\nimport { selectCurrentLimit } from '../../../../global/selectors/limits';\nimport { isBetween } from '../../../../util/math';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport { throttle } from '../../../../util/schedulers';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../../hooks/usePreviousDeprecated';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Icon from '../../../common/icons/Icon';\nimport Button from '../../../ui/Button';\nimport Draggable from '../../../ui/Draggable';\nimport ListItem from '../../../ui/ListItem';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  folderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n  maxFolders: number;\n  isPremium?: boolean;\n};\n\ntype SortState = {\n  orderedFolderIds?: number[];\n  dragOrderIds?: number[];\n  draggedIndex?: number;\n};\n\nconst FOLDER_HEIGHT_PX = 56;\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  folderIds,\n  foldersById,\n  isPremium,\n  recommendedChatFolders,\n  maxFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    openLimitReachedModal,\n    openDeleteChatFolderModal,\n    sortChatFolders,\n  } = getActions();\n\n  const [state, setState] = useState<SortState>({\n    orderedFolderIds: folderIds,\n    dragOrderIds: folderIds,\n    draggedIndex: undefined,\n  });\n\n  const prevFolderIds = usePreviousDeprecated(folderIds);\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevFolderIds !== folderIds) {\n      setState({\n        orderedFolderIds: folderIds,\n        dragOrderIds: folderIds,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevFolderIds, folderIds, state.orderedFolderIds?.length]);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, maxFolders, onCreateFolder, openLimitReachedModal]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!folderIds) {\n      return undefined;\n    }\n\n    if (folderIds.length <= 1) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return folderIds.map((id) => {\n      const folder = foldersById[id];\n\n      if (id === ALL_FOLDER_ID) {\n        return {\n          id,\n          title: {\n            text: lang('FilterAllChats'),\n            entities: [],\n          },\n        };\n      }\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n        isChatList: folder.isChatList,\n        noTitleAnimations: folder.noTitleAnimations,\n      };\n    });\n  }, [folderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= maxFolders - 1) {\n      openLimitReachedModal({\n        limit: 'dialogFilters',\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, maxFolders, addChatFolder, openLimitReachedModal]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / FOLDER_HEIGHT_PX);\n    const index = state.orderedFolderIds?.indexOf(id as number) || 0;\n    const dragOrderIds = state.orderedFolderIds?.filter((folderId) => folderId !== id);\n\n    if (!dragOrderIds || !isBetween(index + delta, 0, folderIds?.length || 0)) {\n      return;\n    }\n\n    dragOrderIds.splice(index + delta + (isPremium ? 0 : 1), 0, id as number);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderIds,\n    }));\n  }, [folderIds?.length, isPremium, state.orderedFolderIds]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      sortChatFolders({ folderIds: current.dragOrderIds! });\n\n      return {\n        ...current,\n        orderedFolderIds: current.dragOrderIds,\n        draggedIndex: undefined,\n      };\n    });\n  }, [sortChatFolders]);\n\n  const canCreateNewFolder = useMemo(() => {\n    return !isPremium || Object.keys(foldersById).length < maxFolders - 1;\n  }, [foldersById, isPremium, maxFolders]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIconWithPreview\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        {canCreateNewFolder && (\n          <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n            className=\"settings-button with-icon\"\n            color=\"primary\"\n            size=\"smaller\"\n            pill\n            fluid\n            onClick={handleCreateFolder}\n            isRtl={lang.isRtl}\n          >\n            <Icon name=\"add\" />\n            {lang('CreateNewFilter')}\n          </Button>\n        )}\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        <div className=\"settings-sortable-container\" style={`height: ${(folderIds?.length || 0) * FOLDER_HEIGHT_PX}px`}>\n          {userFolders?.length ? userFolders.map((folder, i) => {\n            const isBlocked = i > maxFolders - 1;\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedFolderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n            const top = (state.dragOrderIds?.indexOf(folder.id) ?? 0) * FOLDER_HEIGHT_PX;\n\n            if (folder.id === ALL_FOLDER_ID) {\n              return (\n                <Draggable\n                  key={folder.id}\n                  id={folder.id}\n                  onDrag={handleDrag}\n                  onDragEnd={handleDragEnd}\n                  style={`top: ${isDragged ? draggedTop : top}px;`}\n                  knobStyle={`${lang.isRtl ? 'left' : 'right'}: 0.375rem;`}\n                  isDisabled={!isPremium || !isActive}\n                >\n                  <ListItem\n                    key={folder.id}\n                    className=\"drag-item no-icon settings-sortable-item\"\n                    narrow\n                    inactive\n                    multiline\n                    isStatic\n                    allowSelection\n                  >\n                    <span className=\"title\">\n                      {renderTextWithEntities({\n                        text: folder.title.text,\n                        entities: folder.title.entities,\n                        noCustomEmojiPlayback: folder.noTitleAnimations,\n                      })}\n                    </span>\n                    <span className=\"subtitle\">{lang('FoldersAllChatsDesc')}</span>\n                  </ListItem>\n                </Draggable>\n              );\n            }\n\n            return (\n              <Draggable\n                key={folder.id}\n                id={folder.id}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={isBlocked || !isActive}\n              >\n                <ListItem\n                  className=\"drag-item no-icon settings-sortable-item\"\n                  narrow\n                  secondaryIcon=\"more\"\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        openDeleteChatFolderModal({ folderId: folder.id });\n                      },\n                      destructive: true,\n                      title: lang('Delete'),\n                      icon: 'delete',\n                    },\n                  ]}\n\n                  onClick={() => {\n                    if (isBlocked) {\n                      openLimitReachedModal({\n                        limit: 'dialogFilters',\n                      });\n                    } else {\n                      onEditFolder(foldersById[folder.id]);\n                    }\n                  }}\n                >\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                    {isBlocked && <Icon name=\"lock-badge\" className=\"settings-folders-blocked-icon\" />}\n                  </span>\n                  <span className=\"subtitle\">\n                    {folder.isChatList && <Icon name=\"link\" className=\"mr-1\" />}\n                    {folder.subtitle}\n                  </span>\n                </ListItem>\n              </Draggable>\n            );\n          }) : userFolders && !userFolders.length ? (\n            <p className=\"settings-item-description my-4\" dir=\"auto\">\n              You have no folders yet.\n            </p>\n          ) : <Loading />}\n        </div>\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              narrow\n\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">\n                    {renderTextWithEntities({\n                      text: folder.title.text,\n                      entities: folder.title.entities,\n                      noCustomEmojiPlayback: folder.noTitleAnimations,\n                    })}\n                  </span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: folderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      folderIds,\n      foldersById,\n      isPremium: selectIsCurrentUserPremium(global),\n      recommendedChatFolders,\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { isChatChannel, isUserBot } from '../../../../global/helpers';\nimport {\n  selectCanInviteToChat, selectChat,\n  selectChatFolder,\n  selectTabState, selectUser,\n} from '../../../../global/selectors';\nimport { partition } from '../../../../util/iteratees';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { renderTextWithEntities } from '../../../common/helpers/renderTextWithEntities';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLang from '../../../../hooks/useLang';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Icon from '../../../common/icons/Icon';\nimport LinkField from '../../../common/LinkField';\nimport PeerPicker from '../../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  folderId?: number;\n  folder?: ApiChatFolder;\n  peerIds?: string[];\n  url?: string;\n  isLoading?: boolean;\n};\n\nconst SettingsShareChatlist: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  folderId,\n  folder,\n  peerIds,\n  url,\n  isLoading,\n}) => {\n  const {\n    createChatlistInvite, deleteChatlistInvite, editChatlistInvite, showNotification,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isTouched, setIsTouched] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (!isLoading) {\n      setIsTouched(false);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (!url && folderId && isActive) {\n      createChatlistInvite({ folderId });\n    }\n  }, [folderId, isActive, url]);\n\n  const handleRevoke = useLastCallback(() => {\n    if (!url || !folderId) return;\n\n    deleteChatlistInvite({ folderId, url });\n    onReset();\n  });\n\n  const itemIds = useMemo(() => {\n    return (folder?.includedChatIds || []).concat(folder?.pinnedChatIds || []);\n  }, [folder?.includedChatIds, folder?.pinnedChatIds]);\n\n  const [unlockedIds, lockedIds] = useMemo(() => {\n    const global = getGlobal();\n    return partition(itemIds, (id) => selectCanInviteToChat(global, id));\n  }, [itemIds]);\n\n  const [selectedIds, setSelectedIds] = useState<string[]>(peerIds || []);\n\n  const isFirstRenderRef = useRef(true);\n  useEffectWithPrevDeps(([prevUrl]) => {\n    if (prevUrl !== url) {\n      isFirstRenderRef.current = true;\n    }\n    if (!isFirstRenderRef.current) return;\n    isFirstRenderRef.current = false;\n    if (!url) {\n      setSelectedIds(unlockedIds);\n    } else if (peerIds) {\n      setSelectedIds(peerIds);\n    }\n  }, [url, unlockedIds, peerIds]);\n\n  const handleClickDisabled = useLastCallback((id: string) => {\n    const global = getGlobal();\n    const user = selectUser(global, id);\n    const chat = selectChat(global, id);\n    if (user && isUserBot(user)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableBot'),\n      });\n    } else if (user) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailableUser'),\n      });\n    } else if (chat && isChatChannel(chat)) {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicChannel'),\n      });\n    } else {\n      showNotification({\n        message: oldLang('FolderLinkScreen.AlertTextUnavailablePublicGroup'),\n      });\n    }\n  });\n\n  const handleSelectedIdsChange = useLastCallback((ids: string[]) => {\n    setSelectedIds(ids);\n    setIsTouched(true);\n  });\n\n  const handleSubmit = useLastCallback(() => {\n    if (!folderId || !url || !isTouched) return;\n    editChatlistInvite({ folderId, peerIds: selectedIds, url });\n  });\n\n  const chatsCount = selectedIds.length;\n  const isDisabled = !chatsCount || isLoading;\n\n  return (\n    <div className=\"settings-content no-border custom-scroll SettingsFoldersChatsPicker\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersShare}\n          className=\"settings-content-icon\"\n        />\n\n        {folder && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('FolderLinkTitleDescription', {\n              folder: renderTextWithEntities({\n                text: folder.title.text,\n                entities: folder.title.entities,\n                noCustomEmojiPlayback: folder.noTitleAnimations,\n              }),\n              chats: lang('FolderLinkTitleDescriptionChats', { count: chatsCount }, { pluralValue: chatsCount }),\n            }, {\n              withMarkdown: true,\n              withNodes: true,\n            })}\n          </p>\n        )}\n      </div>\n\n      <LinkField\n        className=\"settings-item\"\n        link={!url ? oldLang('Loading') : url}\n        withShare\n        onRevoke={handleRevoke}\n        isDisabled={!chatsCount || isTouched}\n      />\n\n      <div className=\"settings-item settings-item-picker\">\n        <PeerPicker\n          itemIds={itemIds}\n          lockedUnselectedIds={lockedIds}\n          onSelectedIdsChange={handleSelectedIdsChange}\n          selectedIds={selectedIds}\n          onDisabledClick={handleClickDisabled}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n      </div>\n\n      <FloatingActionButton\n        isShown={isLoading || isTouched}\n        disabled={isDisabled}\n        onClick={handleSubmit}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { folderId, url, isLoading } = selectTabState(global).shareFolderScreen || {};\n    const folder = folderId ? selectChatFolder(global, folderId) : undefined;\n    const invite = folderId ? global.chatFolders.invites[folderId]?.find((i) => i.url === url) : undefined;\n\n    return {\n      folderId,\n      folder,\n      url,\n      isLoading,\n      peerIds: invite?.peerIds,\n    };\n  },\n)(SettingsShareChatlist));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport { selectChatFilters } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\nimport SettingsFoldersEdit, { ERROR_NO_CHATS, ERROR_NO_TITLE } from './SettingsFoldersEdit';\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsShareChatlist from './SettingsShareChatlist';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    openShareChatFolderModal,\n    editChatFolder,\n    addChatFolder,\n    openSettingsScreen,\n  } = getActions();\n\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  }, [state.mode, dispatch, currentScreen, onReset]);\n\n  const isCreating = state.mode === 'create';\n\n  const saveState = useCallback((newState: FoldersState) => {\n    const { title } = newState.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return false;\n    }\n\n    const {\n      selectedChatIds: includedChatIds,\n      selectedChatTypes: includedChatTypes,\n    } = selectChatFilters(newState, 'included');\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return false;\n    }\n\n    if (!isCreating) {\n      editChatFolder({ id: newState.folderId!, folderUpdate: newState.folder });\n    } else {\n      addChatFolder({ folder: newState.folder as ApiChatFolder });\n    }\n\n    dispatch({ type: 'setError', payload: undefined });\n    dispatch({ type: 'setIsTouched', payload: false });\n\n    return true;\n  }, [dispatch, isCreating]);\n\n  const handleSaveFolder = useCallback((cb?: NoneToVoidFunction) => {\n    if (!saveState(state)) {\n      return;\n    }\n    cb?.();\n  }, [saveState, state]);\n\n  const handleSaveFilter = useCallback(() => {\n    const newState = dispatch({ type: 'saveFilters' });\n    handleReset();\n    saveState(newState);\n  }, [dispatch, handleReset, saveState]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n  }, [dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n  }, [dispatch]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersIncludedChatsFromChatList\n        : SettingsScreens.FoldersIncludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    openSettingsScreen({\n      screen: currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n        ? SettingsScreens.FoldersExcludedChatsFromChatList\n        : SettingsScreens.FoldersExcludedChats,\n    });\n  }, [currentScreen, dispatch]);\n\n  const handleShareFolder = useCallback(() => {\n    openShareChatFolderModal({ folderId: state.folderId!, noRequestNextScreen: true });\n    dispatch({ type: 'setIsChatlist', payload: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [dispatch, state.folderId]);\n\n  const handleOpenInvite = useCallback((url: string) => {\n    openShareChatFolderModal({ folderId: state.folderId!, url, noRequestNextScreen: true });\n    openSettingsScreen({ screen: SettingsScreens.FoldersShare });\n  }, [state.folderId]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n    case SettingsScreens.FoldersEditFolderInvites:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onShareFolder={handleShareFolder}\n          onOpenInvite={handleOpenInvite}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          isOnlyInvites={currentScreen === SettingsScreens.FoldersEditFolderInvites}\n          onBack={onReset}\n          onSaveFolder={handleSaveFolder}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          isActive={isActive}\n        />\n      );\n\n    case SettingsScreens.FoldersShare:\n      return (\n        <SettingsShareChatlist\n          isActive={isActive}\n          onReset={handleReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PasswordForm from '../../common/PasswordForm';\nimport PasswordMonkey from '../../common/PasswordMonkey';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useOldLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeCurrent })}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PasscodeTurnOff })}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram Web A.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram Web A and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport { decryptSession } from '../../../../util/passcode';\n\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscode });\n  }, [onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeNewPasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    openSettingsScreen({ screen: SettingsScreens.PasscodeCongratulations });\n  }, [onSetPasscode, passcode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeNew });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onSetPasscode]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    openSettingsScreen({ screen: SettingsScreens.PasscodeChangePasscodeConfirm });\n  }, [onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      openSettingsScreen({ screen: SettingsScreens.Privacy });\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatStarsAsText } from '../../../util/localization/format';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Icon from '../icons/Icon';\n\ntype OwnProps = {\n  min?: number;\n  max: number;\n  value: number;\n  disabled?: boolean;\n  readOnly?: boolean;\n  bold?: boolean;\n  className?: string;\n  defaultValue: number;\n  onChange: (value: number) => void;\n  canChangeChargeForMessages?: boolean;\n};\n\nconst DEFAULT_POINTS = [50, 100, 500, 1000, 2000, 5000, 10000];\n\nconst PaidMessageSlider: FC<OwnProps> = ({\n  min = 0,\n  max,\n  value,\n  disabled,\n  readOnly,\n  bold,\n  className,\n  defaultValue,\n  onChange,\n  canChangeChargeForMessages,\n}) => {\n  const lang = useLang();\n\n  const points = useMemo(() => {\n    const result = [];\n    for (let i = 0; i < DEFAULT_POINTS.length; i++) {\n      if (DEFAULT_POINTS[i] < max) {\n        result.push(DEFAULT_POINTS[i]);\n      }\n\n      if (DEFAULT_POINTS[i] >= max) {\n        result.push(max);\n        break;\n      }\n    }\n\n    return result;\n  }, [max]);\n\n  const handleChange = useLastCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = Number(event.currentTarget.value);\n    onChange(getValue(points, newValue));\n  });\n\n  const mainClassName = buildClassName(\n    className,\n    'RangeSlider',\n    disabled && 'disabled',\n    readOnly && 'readOnly',\n    bold && 'bold',\n  );\n\n  function renderTopRow() {\n    return (\n      <div className=\"slider-top-row\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"value-min\" dir=\"auto\">{lang.number(min)}</span>\n        <span className=\"settings-range-value\">\n          {!canChangeChargeForMessages && (<Icon name=\"lock-badge\" />)}\n          {formatStarsAsText(lang, getValue(points, getProgress(points, value)))}\n        </span>\n        <span className=\"value-max\" dir=\"auto\">{lang.number(max)}</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className={mainClassName}>\n      {renderTopRow()}\n      <div className=\"slider-main\">\n        <div\n          className=\"slider-fill-track\"\n          style={`width: ${(getProgress(points, value) / points.length) * 100}%`}\n        />\n        <input\n          min={0}\n          max={points.length}\n          defaultValue={getProgress(points, defaultValue)}\n          step=\"any\"\n          type=\"range\"\n          className=\"RangeSlider__input\"\n          onChange={handleChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction getProgress(points: number[], value: number) {\n  const pointIndex = points.findIndex((point) => value <= point);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const progress = (value - prevPoint) / (nextPoint - prevPoint);\n  return pointIndex + progress;\n}\n\nfunction getValue(points: number[], progress: number) {\n  const pointIndex = Math.floor(progress);\n  const prevPoint = points[pointIndex - 1] || 1;\n  const nextPoint = points[pointIndex] || points[points.length - 1];\n  const pointValue = prevPoint + (nextPoint - prevPoint) * (progress - pointIndex);\n  return pointValue < 100 ? Math.round(pointValue) : Math.round(pointValue / 10) * 10;\n}\n\nexport default memo(PaidMessageSlider);\n","import {\n  memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport {\n  DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n  MINIMUM_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport { formatPercent } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport Icon from '../icons/Icon';\nimport PaidMessageSlider from './PaidMessageSlider';\n\ntype OwnProps = {\n  chargeForMessages: number;\n  canChangeChargeForMessages?: boolean;\n  isGroupChat?: boolean;\n  onChange: (value: number) => void;\n};\n\ntype StateProps = {\n  starsUsdWithdrawRate: number;\n  starsPaidMessageAmountMax: number;\n  starsPaidMessageCommissionPermille: number;\n};\n\nfunction PaidMessagePrice({\n  starsUsdWithdrawRate,\n  starsPaidMessageAmountMax,\n  starsPaidMessageCommissionPermille,\n  canChangeChargeForMessages,\n  isGroupChat,\n  chargeForMessages,\n  onChange,\n}: OwnProps & StateProps) {\n  const { openPremiumModal } = getActions();\n\n  const lang = useLang();\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    onChange?.(value);\n  });\n\n  const handleUnlockWithPremium = useLastCallback(() => {\n    openPremiumModal({ initialSection: 'message_privacy' });\n  });\n\n  return (\n    <>\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('SectionTitleStarsForForMessages')}\n      </h4>\n      <PaidMessageSlider\n        defaultValue={chargeForMessages}\n        min={MINIMUM_CHARGE_FOR_MESSAGES}\n        max={starsPaidMessageAmountMax}\n        value={chargeForMessages}\n        onChange={handleChargeForMessagesChange}\n        canChangeChargeForMessages={canChangeChargeForMessages}\n        readOnly={!canChangeChargeForMessages}\n      />\n      {!canChangeChargeForMessages && (\n        <Button\n          color=\"primary\"\n          fluid\n          size=\"smaller\"\n          noForcedUpperCase\n          className=\"settings-unlock-button\"\n          onClick={handleUnlockWithPremium}\n        >\n          <span className=\"settings-unlock-button-title\">\n            {lang('UnlockButtonTitle')}\n            <Icon name=\"lock-badge\" className=\"settings-unlock-button-icon\" />\n          </span>\n        </Button>\n      )}\n      {canChangeChargeForMessages && (\n        <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang(isGroupChat ? 'SetPriceGroupDescription' : 'SectionDescriptionStarsForForMessages', {\n            percent: formatPercent(starsPaidMessageCommissionPermille * 100),\n            amount: formatCurrencyAsString(\n              chargeForMessages * starsUsdWithdrawRate * starsPaidMessageCommissionPermille,\n              'USD',\n              lang.code,\n            ),\n          }, {\n            withNodes: true,\n          })}\n        </p>\n      )}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const starsUsdWithdrawRateX1000 = global.appConfig?.starsUsdWithdrawRateX1000;\n    const starsUsdWithdrawRate = starsUsdWithdrawRateX1000 ? starsUsdWithdrawRateX1000 / 1000 : 1;\n    const configStarsPaidMessageCommissionPermille = global.appConfig?.starsPaidMessageCommissionPermille;\n    const starsPaidMessageCommissionPermille = configStarsPaidMessageCommissionPermille\n      ? configStarsPaidMessageCommissionPermille / 1000 : 100;\n\n    return {\n      starsPaidMessageCommissionPermille,\n      starsUsdWithdrawRate,\n      starsPaidMessageAmountMax: global.appConfig?.starsPaidMessageAmountMax || DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(PaidMessagePrice));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPremiumSection } from '../../../api/types';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  premiumSection?: ApiPremiumSection;\n};\n\nfunction PremiumStatusItem({ premiumSection }: OwnProps) {\n  const { openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal({ initialSection: premiumSection }));\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n        onClick={handleOpenPremiumModal}\n      >\n        {lang('PrivacyLastSeenPremium')}\n      </ListItem>\n      <p\n        className=\"settings-item-description-larger premium-info\"\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {lang('lng_messages_privacy_premium_about')}\n      </p>\n    </div>\n  );\n}\n\nexport default memo(PremiumStatusItem);\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './PrivacyLockedOption.module.scss';\n\ntype OwnProps = {\n  label: string;\n  isChecked?: boolean;\n};\n\nfunction PrivacyLockedOption({ label, isChecked }: OwnProps) {\n  const lang = useOldLang();\n  const { showNotification } = getActions();\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        isChecked && styles.checked,\n      )}\n      onClick={() => showNotification({ message: lang('OptionPremiumRequiredMessage') })}\n    >\n      <span>{label}</span>\n      <Icon name=\"lock-badge\" className={styles.lockIcon} />\n    </div>\n  );\n}\n\nexport default memo(PrivacyLockedOption);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sBptmiga\",\"lock-icon\":\"jWxrRbkh\",\"lockIcon\":\"jWxrRbkh\",\"checked\":\"U_6O1ebL\"};","import {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectIsCurrentUserPremium,\n  selectNewNoncontactPeersRequirePremium,\n  selectNonContactPeersPaidStars,\n} from '../../../global/selectors';\n\nimport useDebouncedCallback from '../../../hooks/useDebouncedCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: VoidFunction;\n};\n\ntype StateProps = {\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages?: boolean;\n  canLimitNewMessagesWithoutPremium?: boolean;\n  canChargeForMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  nonContactPeersPaidStars: number;\n  noPaidReactionsForUsersCount: number;\n  privacy: GlobalState['settings']['privacy'];\n};\n\nfunction PrivacyMessages({\n  isActive,\n  canLimitNewMessagesWithoutPremium,\n  canChargeForMessages,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  nonContactPeersPaidStars,\n  isCurrentUserPremium,\n  noPaidReactionsForUsersCount,\n  onReset,\n  privacy,\n}: OwnProps & StateProps) {\n  const { updateGlobalPrivacySettings, openSettingsScreen, showNotification } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const canChangeForContactsAndPremium = isCurrentUserPremium || canLimitNewMessagesWithoutPremium;\n  const canChangeChargeForMessages = isCurrentUserPremium && canChargeForMessages;\n  const [chargeForMessages, setChargeForMessages] = useState<number>(nonContactPeersPaidStars);\n  const [hasShownNotification, setHasShownNotification] = useState(false);\n\n  const selectedValue = useMemo(() => {\n    if (shouldChargeForMessages) return 'charge_for_messages';\n    if (shouldNewNonContactPeersRequirePremium) return 'contacts_and_premium';\n    return 'everybody';\n  }, [shouldChargeForMessages, shouldNewNonContactPeersRequirePremium]);\n\n  useEffectWithPrevDeps(([prevSelectedValue]) => {\n    if (\n      !hasShownNotification && prevSelectedValue !== undefined\n      && selectedValue !== 'everybody'\n      && selectedValue !== prevSelectedValue\n    ) {\n      if (privacy.chatInvite?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyInviteText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyGroupChats },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      if (privacy.phoneCall?.visibility === 'everybody') {\n        showNotification({\n          message: lang('CheckPrivacyCallsText'),\n          action: {\n            action: 'openSettingsScreen',\n            payload: { screen: SettingsScreens.PrivacyPhoneCall },\n          },\n          actionText: { key: 'Review' },\n          duration: 8000,\n        });\n      }\n      setHasShownNotification(true);\n    }\n  }, [selectedValue, shouldChargeForMessages, privacy, lang, hasShownNotification]);\n\n  const options = useMemo(() => {\n    return [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts_and_premium',\n        label: canChangeForContactsAndPremium ? (\n          oldLang('PrivacyMessagesContactsAndPremium')\n        ) : (\n          <PrivacyLockedOption\n            label={oldLang('PrivacyMessagesContactsAndPremium')}\n            isChecked={selectedValue === 'contacts_and_premium'}\n          />\n        ),\n        hidden: !canChangeForContactsAndPremium,\n        isCanCheckedInDisabled: true,\n      },\n      {\n        value: 'charge_for_messages',\n        label: canChangeChargeForMessages ? (\n          lang('PrivacyChargeForMessages')\n        ) : (\n          <PrivacyLockedOption\n            label={lang('PrivacyChargeForMessages')}\n            isChecked={selectedValue === 'charge_for_messages'}\n          />\n        ),\n        hidden: !canChangeChargeForMessages,\n        isCanCheckedInDisabled: true,\n      },\n    ];\n  }, [oldLang, lang, canChangeForContactsAndPremium, canChangeChargeForMessages, selectedValue]);\n\n  const handleChange = useLastCallback((privacyValue: string) => {\n    updateGlobalPrivacySettings({\n      shouldNewNonContactPeersRequirePremium: privacyValue === 'contacts_and_premium',\n      // eslint-disable-next-line no-null/no-null\n      nonContactPeersPaidStars: privacyValue === 'charge_for_messages' ? chargeForMessages : null,\n    });\n  });\n\n  const updateGlobalPrivacySettingsWithDebounced = useDebouncedCallback((value: number) => {\n    updateGlobalPrivacySettings({\n      nonContactPeersPaidStars: value,\n    });\n  }, [updateGlobalPrivacySettings], 300, true);\n\n  const handleChargeForMessagesChange = useCallback((value: number) => {\n    setChargeForMessages(value);\n    updateGlobalPrivacySettingsWithDebounced(value);\n  }, [setChargeForMessages, updateGlobalPrivacySettingsWithDebounced]);\n\n  function renderSectionNoPaidMessagesForUsers() {\n    const itemSubtitle = !noPaidReactionsForUsersCount ? lang('SubtitlePrivacyAddUsers')\n      : oldLang('Users', noPaidReactionsForUsersCount, 'i');\n\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('RemoveFeeTitle')}\n        </h4>\n        <ListItem\n          narrow\n          icon=\"delete-user\"\n\n          onClick={() => {\n            openSettingsScreen({ screen: SettingsScreens.PrivacyNoPaidMessages });\n          }}\n        >\n          <div className=\"multiline-item full-size\">\n            <span className=\"title\">{lang('ExceptionTitlePrivacyChargeForMessages')}</span>\n            <span className=\"subtitle\">\n              {\n                itemSubtitle\n              }\n            </span>\n          </div>\n        </ListItem>\n      </div>\n    );\n  }\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const privacyDescription = useMemo(() => {\n    if (shouldChargeForMessages) return lang('PrivacyDescriptionChargeForMessages');\n    return lang('PrivacyDescriptionMessagesContactsAndPremium');\n  }, [shouldChargeForMessages, lang]);\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('PrivacyMessagesTitle')}\n        </h4>\n        <RadioGroup\n          name=\"privacy-messages\"\n          options={options}\n          onChange={handleChange}\n          selected={selectedValue}\n        />\n        <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {privacyDescription}\n        </p>\n      </div>\n      {selectedValue === 'charge_for_messages' && (\n        <div className=\"settings-item fluid-container\">\n          <PaidMessagePrice\n            canChangeChargeForMessages={canChangeChargeForMessages}\n            chargeForMessages={chargeForMessages}\n            onChange={handleChargeForMessagesChange}\n          />\n        </div>\n      )}\n      {canChangeChargeForMessages && selectedValue === 'charge_for_messages' && renderSectionNoPaidMessagesForUsers()}\n      {!isCurrentUserPremium && selectedValue !== 'charge_for_messages'\n        && <PremiumStatusItem premiumSection=\"message_privacy\" />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const {\n    settings: {\n      privacy,\n    },\n  } = global;\n  const nonContactPeersPaidStars = selectNonContactPeersPaidStars(global);\n\n  const noPaidReactionsForUsersCount = global.settings.privacy.noPaidMessages?.allowUserIds.length || 0;\n\n  return {\n    shouldNewNonContactPeersRequirePremium: selectNewNoncontactPeersRequirePremium(global),\n    shouldChargeForMessages: Boolean(nonContactPeersPaidStars),\n    nonContactPeersPaidStars: nonContactPeersPaidStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    canLimitNewMessagesWithoutPremium: global.appConfig?.canLimitNewMessagesWithoutPremium,\n    canChargeForMessages: global.appConfig?.starsPaidMessagesAvailable,\n    noPaidReactionsForUsersCount,\n    privacy,\n  };\n})(PrivacyMessages));\n","import type { ApiSession } from '../../../../api/types';\nimport type { DeviceType } from '../../../../types/icons/device';\n\nexport default function getSessionIcon(session: ApiSession): DeviceType {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"M84mrPgu\",\"settingsActiveSession\":\"M84mrPgu\",\"iconDevice\":\"Add8P_K4\",\"iconDevice__android\":\"onkXVGY4\",\"iconDeviceAndroid\":\"onkXVGY4\",\"iconDevice__apple\":\"xw13aT8u\",\"iconDeviceApple\":\"xw13aT8u\",\"iconDevice__brave\":\"HESrGUdv\",\"iconDeviceBrave\":\"HESrGUdv\",\"iconDevice__chrome\":\"Vpej7wm7\",\"iconDeviceChrome\":\"Vpej7wm7\",\"iconDevice__edge\":\"ueWE77x9\",\"iconDeviceEdge\":\"ueWE77x9\",\"iconDevice__firefox\":\"_lMTmvya\",\"iconDeviceFirefox\":\"_lMTmvya\",\"iconDevice__linux\":\"cDVfvyG_\",\"iconDeviceLinux\":\"cDVfvyG_\",\"iconDevice__opera\":\"nWqlTxZt\",\"iconDeviceOpera\":\"nWqlTxZt\",\"iconDevice__safari\":\"ldFLp1Gf\",\"iconDeviceSafari\":\"ldFLp1Gf\",\"iconDevice__samsung\":\"VHNORBGL\",\"iconDeviceSamsung\":\"VHNORBGL\",\"iconDevice__ubuntu\":\"QBVivtdu\",\"iconDeviceUbuntu\":\"QBVivtdu\",\"iconDevice__unknown\":\"GbjIgrwU\",\"iconDeviceUnknown\":\"GbjIgrwU\",\"iconDevice__vivaldi\":\"yieVnjoI\",\"iconDeviceVivaldi\":\"yieVnjoI\",\"iconDevice__windows\":\"_0dnTFOE\",\"iconDeviceWindows\":\"_0dnTFOE\",\"iconDevice__xbox\":\"fbCjjDpU\",\"iconDeviceXbox\":\"fbCjjDpU\",\"title\":\"c6edjhlh\",\"note\":\"lRqTZAYn\",\"date\":\"oLnN6crs\",\"box\":\"wVEXuPlZ\",\"actionHeader\":\"olQS2T1n\",\"actionName\":\"KuX1APpO\",\"headerButton\":\"VT8pZfMu\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useOldLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName}\n          {' '}\n          {renderingSession?.appVersion}\n          ,\n          {' '}\n          {renderingSession?.platform}\n          {' '}\n          {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    // https://github.com/DrKLO/Telegram/blob/96dce2c9aabc33b87db61d830aa087b6b03fe397/TMessagesProj/src/main/java/org/telegram/ui/SessionsActivity.java#L195\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n\n    if (ttlDays <= 7) {\n      return '7';\n    }\n\n    if (ttlDays <= 30) {\n      return '30';\n    }\n\n    if (ttlDays <= 93) {\n      return '90';\n    }\n\n    if (ttlDays <= 183) {\n      return '183';\n    }\n\n    if (ttlDays > 183) {\n      return '365';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => {\n    const options = [{\n      label: lang('Weeks', 1, 'i'),\n      value: '7',\n    }, {\n      label: lang('Months', 1, 'i'),\n      value: '30',\n    }, {\n      label: lang('Months', 3, 'i'),\n      value: '90',\n    }, {\n      label: lang('Months', 6, 'i'),\n      value: '183',\n    }];\n    if (ttlDays && ttlDays >= 365) {\n      options.push({\n        label: lang('Years', 1, 'i'),\n        value: '365',\n      });\n    }\n    return options;\n  }, [lang, ttlDays]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)}`} iconClassName=\"icon-device\">\n          <div className=\"multiline-item full-size\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName}\n              {' '}\n              {session.appVersion}\n              ,\n              {' '}\n              {session.platform}\n              {' '}\n              {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">\n              {session.ip}\n              {' '}\n              -\n              {' '}\n              {getLocation(session)}\n            </span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p className=\"settings-item-description-larger\">{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)}`}\n        iconClassName=\"icon-device\"\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName}\n            {' '}\n            {session.appVersion}\n            ,\n            {' '}\n            {session.platform}\n            {' '}\n            {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">\n            {session.ip}\n            {' '}\n            {getLocation(session)}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n          areButtonsInColumn\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Wd0fmiSY\",\"avatar\":\"OhZHdRsP\",\"title\":\"EQ7__xGn\",\"note\":\"YRYk96ki\",\"box\":\"kmCTIfvf\",\"action-header\":\"qkq5Fa0V\",\"actionHeader\":\"qkq5Fa0V\",\"action-name\":\"zFYUiy13\",\"actionName\":\"zFYUiy13\",\"header-button\":\"lUf0RJ2h\",\"headerButton\":\"lUf0RJ2h\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen,\n  session,\n  bot,\n  onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useOldLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={renderingBot}\n        size=\"large\"\n      />\n      {renderingBot && <FullNameTitle className={styles.title} peer={renderingBot} />}\n      <div className={styles.note}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }): StateProps => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"v0wP46TR\",\"clear-help\":\"WnnxcARX\",\"clearHelp\":\"WnnxcARX\",\"subtitle\":\"uEUfjByC\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiWebSession } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatPastTimeShort } from '../../../util/dates/dateFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} peer={bot} size=\"tiny\" />\n        <div className=\"multiline-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          {bot && <FullNameTitle className={styles.title} peer={bot} />}\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}\n            ,\n            {session.browser}\n            ,\n            {session.platform}\n          </span>\n          <span className={buildClassName('subtitle', styles.subtitle)}>\n            {session.ip}\n            {' '}\n            {session.region}\n          </span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { CHAT_HEIGHT_PX, STICKER_SIZE_GENERAL_SETTINGS } from '../../config';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerSetCover from '../middle/composer/StickerSetCover';\nimport Button from '../ui/Button';\nimport ListItem from '../ui/ListItem';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetCard.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  noPlay?: boolean;\n  className?: string;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst StickerSetCard: FC<OwnProps> = ({\n  stickerSet,\n  noPlay,\n  className,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  const firstSticker = stickerSet?.stickers?.[0];\n\n  const handleCardClick = useLastCallback(() => {\n    if (firstSticker) onClick(firstSticker);\n  });\n\n  if (!stickerSet?.stickers) {\n    return undefined;\n  }\n\n  function renderPreview() {\n    if (!stickerSet) return undefined;\n    if (stickerSet.hasThumbnail || !firstSticker) {\n      return (\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          <StickerSetCover\n            stickerSet={stickerSet}\n            size={STICKER_SIZE_GENERAL_SETTINGS}\n            noPlay={noPlay}\n            observeIntersection={observeIntersection}\n          />\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          noPlay={noPlay}\n          observeIntersection={observeIntersection}\n          noContextMenu\n          isCurrentUserPremium\n          clickArg={undefined}\n        />\n      );\n    }\n  }\n\n  return (\n    <ListItem\n      className={buildClassName('StickerSetCard', 'chat-item-clickable small-icon', className)}\n      style={`height: ${CHAT_HEIGHT_PX}px;`}\n      inactive={!firstSticker}\n      onClick={handleCardClick}\n    >\n      {renderPreview()}\n      <div className=\"multiline-item\">\n        <div className=\"title\">{stickerSet.title}</div>\n        <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(StickerSetCard);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'shouldSuggestCustomEmoji'\n)> & {\n  customEmojiSetIds?: string[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  canPlayAnimatedEmojis: boolean;\n};\n\nconst SettingsCustomEmoji: FC<OwnProps & StateProps> = ({\n  isActive,\n  customEmojiSetIds,\n  stickerSetsById,\n  shouldSuggestCustomEmoji,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const { openStickerSet, setSettingOption } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestCustomEmojiChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestCustomEmoji: newValue });\n  }, [setSettingOption]);\n\n  const customEmojiSets = useMemo(() => (\n    customEmojiSetIds && Object.values(pick(stickerSetsById, customEmojiSetIds))\n  ), [customEmojiSetIds, stickerSetsById]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {customEmojiSets && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('SuggestAnimatedEmoji')}\n            checked={shouldSuggestCustomEmoji}\n            onCheck={handleSuggestCustomEmojiChange}\n          />\n          <div className=\"mt-4\" ref={stickerSettingsRef}>\n            {customEmojiSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('EmojiBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestCustomEmoji',\n      ]),\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', {\n      limit: lang('FileSizeMB', { count: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] }),\n    });\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettingsContacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsPrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsGroupChats')}\n          checked={canAutoLoadInGroups}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettingsChannels')}\n          checked={canAutoLoadInChannels}\n\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadFilesTitle'),\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Ys1i4ssl\",\"item\":\"skaVPMTF\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings } from '../../../types';\n\nimport { SUPPORTED_TRANSLATION_LANGUAGES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { partition } from '../../../util/iteratees';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\n\nimport styles from './SettingsDoNotTranslate.module.scss';\n\n// https://fasttext.cc/docs/en/language-identification.html\nconst LOCAL_SUPPORTED_DETECTION_LANGUAGES = [\n  'af', 'als', 'am', 'an', 'ar', 'arz', 'as', 'ast', 'av', 'az',\n  'azb', 'ba', 'bar', 'bcl', 'be', 'bg', 'bh', 'bn', 'bo', 'bpy',\n  'br', 'bs', 'bxr', 'ca', 'cbk', 'ce', 'ceb', 'ckb', 'co', 'cs',\n  'cv', 'cy', 'da', 'de', 'diq', 'dsb', 'dty', 'dv', 'el', 'eml',\n  'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fr', 'frr', 'fy',\n  'ga', 'gd', 'gl', 'gn', 'gom', 'gu', 'gv', 'he', 'hi', 'hif',\n  'hr', 'hsb', 'ht', 'hu', 'hy', 'ia', 'id', 'ie', 'ilo', 'io',\n  'is', 'it', 'ja', 'jbo', 'jv', 'ka', 'kk', 'km', 'kn', 'ko',\n  'krc', 'ku', 'kv', 'kw', 'ky', 'la', 'lb', 'lez', 'li', 'lmo',\n  'lo', 'lrc', 'lt', 'lv', 'mai', 'mg', 'mhr', 'min', 'mk', 'ml',\n  'mn', 'mr', 'mrj', 'ms', 'mt', 'mwl', 'my', 'myv', 'mzn', 'nah',\n  'nap', 'nds', 'ne', 'new', 'nl', 'nn', 'no', 'oc', 'or', 'os',\n  'pa', 'pam', 'pfl', 'pl', 'pms', 'pnb', 'ps', 'pt', 'qu', 'rm',\n  'ro', 'ru', 'rue', 'sa', 'sah', 'sc', 'scn', 'sco', 'sd', 'sh',\n  'si', 'sk', 'sl', 'so', 'sq', 'sr', 'su', 'sv', 'sw', 'ta', 'te',\n  'tg', 'th', 'tk', 'tl', 'tr', 'tt', 'tyv', 'ug', 'uk', 'ur', 'uz',\n  'vec', 'vep', 'vi', 'vls', 'vo', 'wa', 'war', 'wuu', 'xal', 'xmf',\n  'yi', 'yo', 'yue', 'zh',\n];\n\nconst SUPPORTED_LANGUAGES = SUPPORTED_TRANSLATION_LANGUAGES.filter((lang: string) => (\n  LOCAL_SUPPORTED_DETECTION_LANGUAGES.includes(lang)\n));\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<AccountSettings, 'doNotTranslate'>;\n\nconst SettingsDoNotTranslate: FC<OwnProps & StateProps> = ({\n  isActive,\n  doNotTranslate,\n  onReset,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useOldLang();\n  const language = lang.code || 'en';\n  const [displayedOptions, setDisplayedOptions] = useState<string[]>([]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n\n  const displayedOptionList: ItemPickerOption[] = useMemo(() => {\n    const options = SUPPORTED_LANGUAGES.map((langCode: string) => {\n      const translatedNames = new Intl.DisplayNames([language], { type: 'language' });\n      const translatedName = translatedNames.of(langCode)!;\n\n      const originalNames = new Intl.DisplayNames([langCode], { type: 'language' });\n      const originalName = originalNames.of(langCode)!;\n\n      return {\n        langCode,\n        translatedName,\n        originalName,\n      };\n    }).filter(Boolean).map(({ langCode, translatedName, originalName }) => ({\n      label: translatedName,\n      subLabel: originalName,\n      value: langCode,\n    }));\n\n    if (!searchQuery.trim()) {\n      const currentLanguageOption = options.find((option) => option.value === language);\n      const otherOptionList = options.filter((option) => option.value !== language);\n      return currentLanguageOption ? [currentLanguageOption, ...otherOptionList] : options;\n    }\n\n    return options?.filter((option) => option.label.toLowerCase().includes(searchQuery.toLowerCase()));\n  }, [language, searchQuery]);\n\n  useEffectWithPrevDeps(([prevIsActive, prevLanguage]) => {\n    if (prevIsActive === isActive && prevLanguage?.find((option) => option === language)) return;\n    const [selected] = partition(displayedOptionList, (option) => doNotTranslate.includes(option.value));\n    setDisplayedOptions([...selected.map((option) => option.value)]);\n  }, [isActive, doNotTranslate, displayedOptions.length, language, displayedOptionList]);\n\n  const handleChange = useLastCallback((newSelectedIds: string[]) => {\n    setDisplayedOptions(newSelectedIds);\n    setSettingOption({\n      doNotTranslate: newSelectedIds,\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'settings-content infinite-scroll')}>\n      <div className={buildClassName(styles.item)}>\n        <ItemPicker\n          className={styles.picker}\n          items={displayedOptionList}\n          selectedValues={displayedOptions}\n          onSelectedValuesChange={handleChange}\n          filterValue={searchQuery}\n          onFilterChange={setSearchQuery}\n          isSearchable\n          allowMultiple\n          withDefaultPadding\n          itemInputType=\"checkbox\"\n          searchInputId=\"lang-picker-search\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      doNotTranslate,\n    } = global.settings.byKey;\n\n    return {\n      doNotTranslate,\n    };\n  },\n)(SettingsDoNotTranslate));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUsername } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport { isBetween } from '../../util/math';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Draggable from '../ui/Draggable';\nimport ListItem from '../ui/ListItem';\n\nimport styles from './ManageUsernames.module.scss';\n\ntype SortState = {\n  orderedUsernames?: string[];\n  dragOrderUsernames?: string[];\n  draggedIndex?: number;\n};\n\ntype OwnProps = {\n  chatId?: string;\n  usernames: ApiUsername[];\n  onEditUsername: (username: string) => void;\n};\n\nconst USERNAME_HEIGHT_PX = 56;\n\nconst ManageUsernames: FC<OwnProps> = ({\n  chatId,\n  usernames,\n  onEditUsername,\n}) => {\n  const {\n    showNotification,\n    toggleUsername,\n    toggleChatUsername,\n    sortUsernames,\n    sortChatUsernames,\n  } = getActions();\n  const lang = useOldLang();\n  const [usernameForConfirm, setUsernameForConfirm] = useState<ApiUsername | undefined>();\n\n  const usernameList = useMemo(() => usernames.map(({ username }) => username), [usernames]);\n  const prevUsernameList = usePreviousDeprecated(usernameList);\n\n  const [state, setState] = useState<SortState>({\n    orderedUsernames: usernameList,\n    dragOrderUsernames: usernameList,\n    draggedIndex: undefined,\n  });\n\n  // Sync folders state after changing folders in other clients\n  useEffect(() => {\n    if (prevUsernameList !== usernameList) {\n      setState({\n        orderedUsernames: usernameList,\n        dragOrderUsernames: usernameList,\n        draggedIndex: undefined,\n      });\n    }\n  }, [prevUsernameList, usernameList]);\n\n  const handleCopyUsername = useCallback((value: string) => {\n    copyTextToClipboard(`@${value}`);\n    showNotification({\n      message: lang('UsernameCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleUsernameClick = useCallback((data: ApiUsername) => {\n    if (data.isEditable) {\n      onEditUsername(data.username);\n    } else {\n      setUsernameForConfirm(data);\n    }\n  }, [onEditUsername]);\n\n  const closeConfirmUsernameDialog = useCallback(() => {\n    setUsernameForConfirm(undefined);\n  }, []);\n\n  const handleUsernameToggle = useCallback(() => {\n    if (!usernameForConfirm) {\n      return;\n    }\n\n    if (chatId) {\n      toggleChatUsername({\n        chatId,\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    } else {\n      toggleUsername({\n        username: usernameForConfirm.username,\n        isActive: !usernameForConfirm.isActive,\n      });\n    }\n    closeConfirmUsernameDialog();\n  }, [chatId, closeConfirmUsernameDialog, toggleChatUsername, toggleUsername, usernameForConfirm]);\n\n  const handleDrag = useCallback((translation: { x: number; y: number }, id: string | number) => {\n    const delta = Math.round(translation.y / USERNAME_HEIGHT_PX);\n    const index = state.orderedUsernames?.indexOf(id as string) || 0;\n    const dragOrderUsernames = state.orderedUsernames?.filter((username) => username !== id);\n\n    if (!dragOrderUsernames || !isBetween(index + delta, 0, usernameList.length)) {\n      return;\n    }\n\n    dragOrderUsernames.splice(index + delta, 0, id as string);\n    setState((current) => ({\n      ...current,\n      draggedIndex: index,\n      dragOrderUsernames,\n    }));\n  }, [state.orderedUsernames, usernameList.length]);\n\n  const handleDragEnd = useCallback(() => {\n    setState((current) => {\n      if (chatId) {\n        sortChatUsernames({\n          chatId,\n          usernames: current.dragOrderUsernames!,\n        });\n      } else {\n        sortUsernames({ usernames: current.dragOrderUsernames! });\n      }\n\n      return {\n        ...current,\n        orderedUsernames: current.dragOrderUsernames,\n        draggedIndex: undefined,\n      };\n    });\n  }, [chatId, sortChatUsernames, sortUsernames]);\n\n  return (\n    <>\n      <div className={styles.container}>\n        <h4 className={styles.header} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_subtitle')}\n        </h4>\n        <div className={styles.sortableContainer} style={`height: ${(usernames.length) * USERNAME_HEIGHT_PX}px`}>\n          {usernames.map((usernameData, i) => {\n            const isDragged = state.draggedIndex === i;\n            const draggedTop = (state.orderedUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const top = (state.dragOrderUsernames?.indexOf(usernameData.username) ?? 0) * USERNAME_HEIGHT_PX;\n            const subtitle = usernameData.isEditable\n              ? 'lng_usernames_edit'\n              : (usernameData.isActive ? 'lng_usernames_active' : 'lng_usernames_non_active');\n\n            return (\n              <Draggable\n                key={usernameData.username}\n                id={usernameData.username}\n                onDrag={handleDrag}\n                onDragEnd={handleDragEnd}\n                style={`top: ${isDragged ? draggedTop : top}px;`}\n                knobStyle={`${lang.isRtl ? 'left' : 'right'}: 3rem;`}\n                isDisabled={!usernameData.isActive}\n              >\n                <ListItem\n                  key={usernameData.username}\n                  className={buildClassName('drag-item no-icon', styles.item)}\n                  narrow\n                  secondaryIcon=\"more\"\n                  icon={usernameData.isActive ? 'link' : 'link-broken'}\n                  multiline\n                  contextActions={[\n                    {\n                      handler: () => {\n                        handleCopyUsername(usernameData.username);\n                      },\n                      title: lang('Copy'),\n                      icon: 'copy',\n                    },\n                  ]}\n\n                  onClick={() => {\n                    handleUsernameClick(usernameData);\n                  }}\n                >\n                  <span className=\"title\">\n                    @\n                    {usernameData.username}\n                  </span>\n                  <span className=\"subtitle\">{lang(subtitle)}</span>\n                </ListItem>\n              </Draggable>\n            );\n          })}\n        </div>\n        <p className={styles.description} dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('lng_usernames_description')}\n        </p>\n      </div>\n      <ConfirmDialog\n        isOpen={Boolean(usernameForConfirm)}\n        onClose={closeConfirmUsernameDialog}\n        title={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertTitle' : 'Username.ActivateAlertTitle')}\n        text={lang(usernameForConfirm?.isActive ? 'Username.DeactivateAlertText' : 'Username.ActivateAlertText')}\n        confirmLabel={lang(usernameForConfirm?.isActive\n          ? 'Username.DeactivateAlertHide'\n          : 'Username.ActivateAlertShow')}\n        confirmHandler={handleUsernameToggle}\n        confirmIsDestructive={!usernameForConfirm?.isActive}\n      />\n    </>\n  );\n};\n\nexport default memo(ManageUsernames);\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"PaO1MMi5\",\"header\":\"wSswdVkR\",\"description\":\"oiJc22Aj\",\"sortableContainer\":\"lAeeBh9K\",\"item\":\"l04OwRBg\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\nimport {\n  isUsernameValid, MAX_USERNAME_LENGTH, MIN_UPDATE_USERNAME_LENGTH, USERNAME_REGEX,\n} from '../../util/entities/username';\nimport { debounce } from '../../util/schedulers';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  onChange: (value: string) => void;\n};\n\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nconst UsernameInput: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkedUsername,\n  onChange,\n}) => {\n  const { checkUsername, checkPublicLink } = getActions();\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useOldLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = currentUsername !== username\n    ? (isUsernameAvailable ?? previousIsUsernameAvailable) : undefined;\n  const isChecking = username && currentUsername !== username && checkedUsername !== username;\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_UPDATE_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidShort`)];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, lang(`${langPrefix}InvalidLong`)];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, lang(`${langPrefix}Invalid`)];\n    }\n\n    if (renderingIsUsernameAvailable === undefined || isChecking) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      renderingIsUsernameAvailable ? lang(`${langPrefix}Available`, label) : undefined,\n      renderingIsUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, renderingIsUsernameAvailable, isChecking, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.trim();\n    // Prevent prefix editing\n    if (asLink && !value.match(LINK_PREFIX_REGEX)) {\n      if (!value.length) {\n        setUsername('');\n        onChange?.('');\n      }\n      return;\n    }\n    const newUsername = value.replace(LINK_PREFIX_REGEX, '');\n\n    setUsername(newUsername);\n\n    const isValid = newUsername === '' ? true : isUsernameValid(newUsername, true);\n    if (!isValid) return;\n\n    onChange?.(newUsername);\n\n    runDebouncedForCheckUsername(() => {\n      if (newUsername !== currentUsername) {\n        const check = asLink ? checkPublicLink : checkUsername;\n        check({ username: newUsername });\n      }\n    });\n  }, [asLink, checkPublicLink, checkUsername, currentUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? TME_LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={isChecking ? lang('Checking') : label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(UsernameInput);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUsername } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport { selectTabState, selectUser, selectUserFullInfo } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { throttle } from '../../../util/schedulers';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  progress?: ProfileEditProgress;\n  checkedUsername?: string;\n  editUsernameError?: string;\n  isUsernameAvailable?: boolean;\n  maxBioLength: number;\n  usernames?: ApiUsername[];\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  progress,\n  checkedUsername,\n  editUsernameError,\n  isUsernameAvailable,\n  maxBioLength,\n  usernames,\n  onReset,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const firstEditableUsername = useMemo(() => usernames?.find(({ isEditable }) => isEditable), [usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [editableUsername, setEditableUsername] = useState<string | false>(currentUsername);\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = editableUsername === false;\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n  const shouldRenderUsernamesManage = usernames && usernames.length > 1;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || (isUsernameTouched && renderingIsUsernameAvailable === true);\n  }, [isUsernameError, photo, isProfileFieldsTouched, isUsernameTouched, renderingIsUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setEditableUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setEditableUsername(value);\n    setIsUsernameTouched(currentUsername !== value);\n  }, [currentUsername]);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!editableUsername) return;\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username: editableUsername,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    editableUsername, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-item\">\n          <div className=\"settings-input\">\n            <AvatarEditable\n              currentAvatarBlobUrl={currentAvatarBlobUrl}\n              onChange={handlePhotoChange}\n              title=\"Edit your profile photo\"\n              disabled={isLoading}\n            />\n            <InputText\n              value={firstName}\n              onChange={handleFirstNameChange}\n              label={lang('FirstName')}\n              disabled={isLoading}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              value={lastName}\n              onChange={handleLastNameChange}\n              label={lang('LastName')}\n              disabled={isLoading}\n            />\n            <TextArea\n              value={bio}\n              onChange={handleBioChange}\n              label={lang('UserBio')}\n              disabled={isLoading}\n              maxLength={maxBioLength}\n              maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n            />\n          </div>\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <div className=\"settings-input\">\n            <UsernameInput\n              currentUsername={currentUsername}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkedUsername={checkedUsername}\n              onChange={handleUsernameChange}\n            />\n          </div>\n\n          {editUsernameError === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {editableUsername && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}\n              <br />\n              <span className=\"username-link\">\n                {TME_LINK_PREFIX}\n                {editableUsername}\n              </span>\n            </p>\n          )}\n        </div>\n\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            usernames={usernames}\n            onEditUsername={setEditableUsername}\n          />\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const {\n      progress, isUsernameAvailable, checkedUsername, error: editUsernameError,\n    } = selectTabState(global).profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    if (!currentUser) {\n      return {\n        progress,\n        checkedUsername,\n        isUsernameAvailable,\n        editUsernameError,\n        maxBioLength,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      usernames,\n    } = currentUser;\n    const currentUserFullInfo = currentUserId ? selectUserFullInfo(global, currentUserId) : undefined;\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio: currentUserFullInfo?.bio,\n      progress,\n      isUsernameAvailable,\n      checkedUsername,\n      editUsernameError,\n      maxBioLength,\n      usernames,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { DEBUG_LOG_FILENAME } from '../../../config';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_ELECTRON,\n  IS_SNAP_EFFECT_SUPPORTED,\n  IS_WAVE_TRANSFORM_SUPPORTED,\n} from '../../../util/browser/windowEnvironment';\nimport { getDebugLogs } from '../../../util/debugConsole';\nimport download from '../../../util/download';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport { animateSnap } from '../../main/visualEffects/SnapEffectContainer';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  shouldForceHttpTransport?: boolean;\n  shouldAllowHttpTransport?: boolean;\n  shouldCollectDebugLogs?: boolean;\n  shouldDebugExportedSenders?: boolean;\n};\n\nconst SettingsExperimental: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  shouldForceHttpTransport,\n  shouldAllowHttpTransport,\n  shouldCollectDebugLogs,\n  shouldDebugExportedSenders,\n}) => {\n  const { requestConfetti, setSharedSettingOption, requestWave } = getActions();\n\n  const snapButtonRef = useRef<HTMLDivElement>();\n  const [isSnapButtonAnimating, setIsSnapButtonAnimating] = useState(false);\n\n  const lang = useOldLang();\n\n  const [isAutoUpdateEnabled, setIsAutoUpdateEnabled] = useState(false);\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsAutoUpdateEnabled);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDownloadLog = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    const url = URL.createObjectURL(file);\n    download(url, DEBUG_LOG_FILENAME);\n  });\n\n  const handleIsAutoUpdateEnabledChange = useCallback((isChecked: boolean) => {\n    window.electron?.setIsAutoUpdateEnabled(isChecked);\n  }, []);\n\n  const handleRequestWave = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    requestWave({ startX: e.clientX, startY: e.clientY });\n  });\n\n  const handleRequestConfetti = useLastCallback(() => {\n    requestConfetti({ withStars: true });\n  });\n\n  const handleSnap = useLastCallback(() => {\n    const button = snapButtonRef.current;\n    if (!button) return;\n\n    if (animateSnap(button)) {\n      setIsSnapButtonAnimating(true);\n      // Manual reset for debug\n      setTimeout(() => {\n        setIsSnapButtonAnimating(false);\n      }, 1500);\n    }\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Experimental}\n          size={200}\n          className=\"experimental-duck\"\n          nonInteractive\n          noLoop={false}\n        />\n        <p className=\"settings-item-description pt-3\" dir=\"auto\">{lang('lng_settings_experimental_about')}</p>\n      </div>\n      <div className=\"settings-item\">\n        <ListItem\n          onClick={handleRequestConfetti}\n          icon=\"animations\"\n        >\n          <div className=\"title\">Launch some confetti!</div>\n        </ListItem>\n        <ListItem\n          onClick={handleRequestWave}\n          icon=\"story-expired\"\n          disabled={!IS_WAVE_TRANSFORM_SUPPORTED}\n        >\n          <div className=\"title\">Start wave</div>\n        </ListItem>\n        <ListItem\n          ref={snapButtonRef}\n          onClick={handleSnap}\n          icon=\"spoiler\"\n          disabled={!IS_SNAP_EFFECT_SUPPORTED}\n          style={isSnapButtonAnimating ? 'visibility: hidden' : ''}\n        >\n          <div className=\"title\">Vaporize this button</div>\n        </ListItem>\n\n        <Checkbox\n          label=\"Allow HTTP Transport\"\n          checked={Boolean(shouldAllowHttpTransport)}\n\n          onCheck={() => setSharedSettingOption({ shouldAllowHttpTransport: !shouldAllowHttpTransport })}\n        />\n\n        <Checkbox\n          label=\"Force HTTP Transport\"\n          disabled={!shouldAllowHttpTransport}\n          checked={Boolean(shouldForceHttpTransport)}\n\n          onCheck={() => setSharedSettingOption({ shouldForceHttpTransport: !shouldForceHttpTransport })}\n        />\n\n        <Checkbox\n          label={lang('DebugMenuEnableLogs')}\n          checked={Boolean(shouldCollectDebugLogs)}\n\n          onCheck={() => setSharedSettingOption({ shouldCollectDebugLogs: !shouldCollectDebugLogs })}\n        />\n\n        <Checkbox\n          label=\"Enable exported senders debug\"\n          checked={Boolean(shouldDebugExportedSenders)}\n\n          onCheck={() => setSharedSettingOption({ shouldDebugExportedSenders: !shouldDebugExportedSenders })}\n        />\n\n        {IS_ELECTRON && (\n          <Checkbox\n            label=\"Enable autoupdates\"\n            checked={Boolean(isAutoUpdateEnabled)}\n            onCheck={handleIsAutoUpdateEnabledChange}\n          />\n        )}\n\n        <ListItem\n          onClick={handleDownloadLog}\n          icon=\"bug\"\n        >\n          <div className=\"title\">Download log</div>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    } = selectSharedSettings(global);\n\n    return {\n      shouldForceHttpTransport,\n      shouldAllowHttpTransport,\n      shouldCollectDebugLogs,\n      shouldDebugExportedSenders,\n    };\n  },\n)(SettingsExperimental));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { SharedSettings, ThemeKey, TimeFormat } from '../../../types';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_MAC_OS, IS_WINDOWS,\n} from '../../../util/browser/windowEnvironment';\nimport { setTimeFormat } from '../../../util/oldLangProvider';\nimport { getSystemTheme } from '../../../util/systemTheme';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<SharedSettings, (\n    'messageTextSize' |\n    'messageSendKeyCombo' |\n    'timeFormat' |\n    'theme' |\n    'shouldUseSystemTheme'\n  )>;\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  messageTextSize,\n  messageSendKeyCombo,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n  onReset,\n}) => {\n  const {\n    setSharedSettingOption, openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const isMobileDevice = isMobile && (IS_IOS || IS_ANDROID);\n\n  const timeFormatOptions: IRadioOption[] = [{\n    label: lang('SettingsTimeFormat12'),\n    value: '12h',\n  }, {\n    label: lang('SettingsTimeFormat24'),\n    value: '24h',\n  }];\n\n  const appearanceThemeOptions: IRadioOption[] = [{\n    label: lang('EmptyChatAppearanceLight'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChatAppearanceDark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChatAppearanceSystem'),\n    value: 'auto',\n  }];\n\n  const keyboardSendOptions = !isMobileDevice ? [\n    { value: 'enter', label: lang('SettingsSendEnter'), subLabel: lang('SettingsSendEnterDescription') },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS || IS_IOS ? 'SettingsSendCmdenter' : 'SettingsSendCtrlenter'),\n      subLabel: lang('SettingsSendPlusEnterDescription'),\n    },\n  ] : undefined;\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSharedSettingOption({ messageTextSize: newSize });\n  }, []);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ThemeKey;\n\n    setSharedSettingOption({ theme: newTheme });\n    setSharedSettingOption({ shouldUseSystemTheme: value === 'auto' });\n  }, []);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSharedSettingOption({ timeFormat: newTimeFormat as TimeFormat });\n    setSharedSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, []);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSharedSettingOption({ messageSendKeyCombo: newCombo as SharedSettings['messageSendKeyCombo'] });\n  }, []);\n\n  const [isTrayIconEnabled, setIsTrayIconEnabled] = useState(false);\n  useEffect(() => {\n    window.electron?.getIsTrayIconEnabled().then(setIsTrayIconEnabled);\n  }, []);\n\n  const handleIsTrayIconEnabledChange = useCallback((isChecked: boolean) => {\n    window.electron?.setIsTrayIconEnabled(isChecked);\n  }, []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Settings')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.GeneralChatBackground })}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n\n        {IS_ELECTRON && IS_WINDOWS && (\n          <Checkbox\n            label={lang('SettingsTray')}\n            checked={Boolean(isTrayIconEnabled)}\n            onCheck={handleIsTrayIconEnabledChange}\n          />\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={appearanceThemeOptions}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsTimeFormat')}\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={timeFormatOptions}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      {keyboardSendOptions && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SettingsKeyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={keyboardSendOptions}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      theme,\n      shouldUseSystemTheme,\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n    } = selectSharedSettings(global);\n\n    return {\n      messageSendKeyCombo,\n      messageTextSize,\n      timeFormat,\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\n\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransitionDeprecated(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const isLoadingRef = useRef(false);\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePreviousDeprecated(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransitionDeprecated(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    // If we've clicked on a wallpaper, select it when full media is loaded\n    if (fullMedia && isLoadingRef.current) {\n      handleSelect();\n      isLoadingRef.current = false;\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      isLoadingRef.current = true;\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { validateFiles } from '../../../util/files';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n    openSettingsScreen,\n  } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    const validatedFiles = validateFiles(files);\n    if (validatedFiles?.length) {\n      uploadWallpaper(validatedFiles[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.GeneralChatBackgroundColor });\n  }, []);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current!, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current!, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current!, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              key={wallpaper.slug}\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = selectThemeValues(global, theme) || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\n\nimport { selectTheme, selectThemeValues } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { captureEvents } from '../../../util/captureEvents';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport { pick } from '../../../util/iteratees';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<ThemeKey>();\n  themeRef.current = theme;\n  const containerRef = useRef<HTMLDivElement>();\n  const colorPickerRef = useRef<HTMLDivElement>();\n  const huePickerRef = useRef<HTMLDivElement>();\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current!,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={buildClassName('predefined-color', color === `#${hex}` ? 'active' : undefined)}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: React.RefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: React.RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = selectThemeValues(global, theme) || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\nimport useMultiClick from '../../../hooks/useMultiClick';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n}) => {\n  const {\n    signOut,\n    openDeleteChatFolderModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n\n  const handleMultiClick = useMultiClick(5, () => {\n    openSettingsScreen({ screen: SettingsScreens.Experimental });\n  });\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    if (!editedFolderId) return;\n\n    openDeleteChatFolderModal({ folderId: editedFolderId });\n  }, [editedFolderId, openDeleteChatFolderModal]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{oldLang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{oldLang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{oldLang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.CustomEmoji:\n        return <h3>{oldLang('Emoji')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{oldLang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{oldLang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{oldLang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{oldLang('Language')}</h3>;\n      case SettingsScreens.DoNotTranslate:\n        return <h3>{oldLang('DoNotTranslate')}</h3>;\n      case SettingsScreens.Stickers:\n        return <h3>{oldLang('StickersName')}</h3>;\n      case SettingsScreens.Experimental:\n        return <h3>{oldLang('lng_settings_experimental')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{oldLang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{oldLang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{oldLang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{oldLang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{oldLang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyBio:\n        return <h3>{oldLang('PrivacyBio')}</h3>;\n      case SettingsScreens.PrivacyBirthday:\n        return <h3>{oldLang('PrivacyBirthday')}</h3>;\n      case SettingsScreens.PrivacyGifts:\n        return <h3>{lang('PrivacyGifts')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{oldLang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return <h3>{oldLang('PrivacyVoiceMessages')}</h3>;\n      case SettingsScreens.PrivacyMessages:\n        return <h3>{oldLang('PrivacyMessages')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{oldLang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneCall:\n        return <h3>{oldLang('Calls')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{oldLang('AlwaysShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{oldLang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        return <h3>{oldLang('AlwaysAllow')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n        return <h3>{oldLang('NeverAllow')}</h3>;\n\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return <h3>{lang('RemoveFeeTitle')}</h3>;\n\n      case SettingsScreens.Performance:\n        return <h3>{lang('MenuAnimations')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{oldLang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{oldLang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{oldLang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{oldLang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{oldLang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{oldLang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{oldLang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{oldLang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{oldLang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{oldLang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{oldLang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{oldLang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{oldLang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{oldLang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{oldLang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersShare:\n        return <h3>{oldLang('FolderLinkScreen.Title')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{oldLang('FilterEdit')}</h3>\n            {Boolean(editedFolderId) && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {oldLang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <h3>\n            {oldLang(\n              currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList\n                ? 'FilterInclude' : 'FilterExclude',\n            )}\n          </h3>\n        );\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            {/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n            <h3 onClick={handleMultiClick}>\n              {oldLang('SETTINGS')}\n            </h3>\n\n            <Button\n              round\n              ripple={!isMobile}\n              size=\"smaller\"\n              color=\"translucent\"\n\n              onClick={() => openSettingsScreen({ screen: SettingsScreens.EditProfile })}\n              ariaLabel={oldLang('lng_settings_information')}\n            >\n              <Icon name=\"edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{oldLang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={oldLang('AccDescrGoBack')}\n      >\n        <Icon name=\"arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={oldLang('lng_sure_logout')}\n        confirmLabel={oldLang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import { useCallback, useRef } from '../lib/teact/teact';\n\nconst CLICK_TIMEOUT = 300;\n\nexport default function useMultiClick(amount: number, callback: NoneToVoidFunction) {\n  const currentAmountRef = useRef(0);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const handleClick = useCallback(() => {\n    currentAmountRef.current++;\n    if (currentAmountRef.current === amount) {\n      currentAmountRef.current = 0;\n      callback();\n      return;\n    }\n\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      currentAmountRef.current = 0;\n    }, CLICK_TIMEOUT);\n  }, [amount, callback]);\n\n  return handleClick;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AccountSettings, LangCode, SharedSettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { IS_TRANSLATION_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport { oldSetLanguage } from '../../../util/oldLangProvider';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ItemPicker, { type ItemPickerOption } from '../../common/pickers/ItemPicker';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n} & Pick<AccountSettings, 'canTranslate' | 'canTranslateChats' | 'doNotTranslate'>\n& Pick<SharedSettings, 'language' | 'languages'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  languages,\n  language,\n  canTranslate,\n  canTranslateChats,\n  doNotTranslate,\n  onReset,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n    setSharedSettingOption,\n    openPremiumModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  const canTranslateChatsEnabled = isCurrentUserPremium && canTranslateChats;\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    if (!languages?.length) {\n      loadLanguages();\n    }\n  }, [languages]);\n\n  const handleChange = useLastCallback((langCode: string) => {\n    setSelectedLanguage(langCode);\n    markIsLoading();\n\n    void oldSetLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSharedSettingOption({ language: langCode as LangCode });\n    });\n  });\n\n  const options = useMemo(() => {\n    if (!languages) return undefined;\n    const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n    const shortLangCode = currentLangCode.substr(0, 2);\n\n    return languages.map(({ langCode, nativeName, name }) => ({\n      value: langCode,\n      label: nativeName,\n      subLabel: name,\n      isLoading: langCode === selectedLanguage && isLoading,\n    } satisfies ItemPickerOption)).sort((a) => {\n      return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n    });\n  }, [isLoading, languages, selectedLanguage]);\n\n  const handleShouldTranslateChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslate: newValue });\n  });\n\n  const handleShouldTranslateChatsChange = useLastCallback((newValue: boolean) => {\n    setSettingOption({ canTranslateChats: newValue });\n  });\n\n  const handleShouldTranslateChatsClick = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      openPremiumModal({\n        initialSection: 'translations',\n      });\n    }\n  });\n\n  const doNotTranslateText = useMemo(() => {\n    if (!IS_TRANSLATION_SUPPORTED || !doNotTranslate.length) {\n      return undefined;\n    }\n\n    if (doNotTranslate.length === 1) {\n      const originalNames = new Intl.DisplayNames([language], { type: 'language' });\n      return originalNames.of(doNotTranslate[0])!;\n    }\n\n    return lang('Languages', doNotTranslate.length);\n  }, [doNotTranslate, lang, language]);\n\n  const handleDoNotSelectOpen = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.DoNotTranslate });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-language custom-scroll\">\n      {IS_TRANSLATION_SUPPORTED && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('ShowTranslateButton')}\n            checked={canTranslate}\n            onCheck={handleShouldTranslateChange}\n          />\n          <Checkbox\n            label={lang('ShowTranslateChatButton')}\n            checked={canTranslateChatsEnabled}\n            disabled={!isCurrentUserPremium}\n            rightIcon={!isCurrentUserPremium ? 'lock' : undefined}\n            onClickLabel={handleShouldTranslateChatsClick}\n            onCheck={handleShouldTranslateChatsChange}\n          />\n          {(canTranslate || canTranslateChatsEnabled) && (\n            <ListItem\n              narrow\n              onClick={handleDoNotSelectOpen}\n            >\n              {lang('DoNotTranslate')}\n              <span className=\"settings-item__current-value\">{doNotTranslateText}</span>\n            </ListItem>\n          )}\n          <p className=\"settings-item-description mb-0 mt-1\">\n            {lang('lng_translate_settings_about')}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item settings-item-picker\">\n        <h4 className=\"settings-item-header\">\n          {lang('Localization.InterfaceLanguage')}\n        </h4>\n        {options ? (\n          <ItemPicker\n            items={options}\n            selectedValue={selectedLanguage}\n            forceRenderAllItems\n            onSelectedValueChange={handleChange}\n            itemInputType=\"radio\"\n            className=\"settings-picker\"\n          />\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      canTranslate, canTranslateChats, doNotTranslate,\n    } = global.settings.byKey;\n    const { language, languages } = selectSharedSettings(global);\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return {\n      isCurrentUserPremium,\n      languages,\n      language,\n      canTranslate,\n      canTranslateChats,\n      doNotTranslate,\n    };\n  },\n)(SettingsLanguage));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStarsAmount } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { FAQ_URL, PRIVACY_URL } from '../../../config';\nimport { formatStarsAmount } from '../../../global/helpers/payments';\nimport {\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectIsPremiumPurchaseBlocked,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport ChatExtra from '../../common/profile/ChatExtra';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUserId?: string;\n  canBuyPremium?: boolean;\n  isGiveawayAvailable?: boolean;\n  starsBalance?: ApiStarsAmount;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  currentUserId,\n  sessionCount,\n  canBuyPremium,\n  isGiveawayAvailable,\n  starsBalance,\n  onReset,\n}) => {\n  const {\n    loadMoreProfilePhotos,\n    openPremiumModal,\n    openSupportChat,\n    openUrl,\n    openGiftRecipientPicker,\n    openStarsBalanceModal,\n    openSettingsScreen,\n  } = getActions();\n\n  const [isSupportDialogOpen, openSupportDialog, closeSupportDialog] = useFlag(false);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (currentUserId) {\n      loadMoreProfilePhotos({ peerId: currentUserId, isPreload: true });\n    }\n  }, [currentUserId]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleOpenSupport = useLastCallback(() => {\n    openSupportChat();\n    closeSupportDialog();\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu self-profile\">\n        {currentUserId && (\n          <ProfileInfo\n            peerId={currentUserId}\n            canPlayVideo={Boolean(isActive)}\n            forceShowSelf\n          />\n        )}\n        {currentUserId && (\n          <ChatExtra\n            chatOrUserId={currentUserId}\n            isInSettings\n          />\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"settings\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.General })}\n        >\n          {lang('TelegramGeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"animations\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Performance })}\n        >\n          {lang('MenuAnimations')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Notifications })}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.DataStorage })}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Privacy })}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Folders })}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveSessions })}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Language })}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{lang.languageInfo.nativeName}</span>\n        </ListItem>\n        <ListItem\n          icon=\"stickers\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.Stickers })}\n        >\n          {lang('MenuStickers')}\n        </ListItem>\n      </div>\n      <div className=\"settings-main-menu\">\n        {canBuyPremium && (\n          <ListItem\n            leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n            narrow\n\n            onClick={() => openPremiumModal()}\n          >\n            {lang('TelegramPremium')}\n          </ListItem>\n        )}\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"gold\" size=\"big\" />}\n          narrow\n\n          onClick={() => openStarsBalanceModal({})}\n        >\n          {lang('MenuStars')}\n          {Boolean(starsBalance) && (\n            <span className=\"settings-item__current-value\">\n              {formatStarsAmount(lang, starsBalance)}\n            </span>\n          )}\n        </ListItem>\n        {isGiveawayAvailable && (\n          <ListItem\n            icon=\"gift\"\n            narrow\n\n            onClick={() => openGiftRecipientPicker()}\n          >\n            {lang('MenuSendGift')}\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-main-menu\">\n        <ListItem\n          icon=\"ask-support\"\n          narrow\n          onClick={openSupportDialog}\n        >\n          {lang('AskAQuestion')}\n        </ListItem>\n        <ListItem\n          icon=\"help\"\n          narrow\n\n          onClick={() => openUrl({ url: FAQ_URL })}\n        >\n          {lang('MenuTelegramFaq')}\n        </ListItem>\n        <ListItem\n          icon=\"privacy-policy\"\n          narrow\n\n          onClick={() => openUrl({ url: PRIVACY_URL })}\n        >\n          {lang('MenuPrivacyPolicy')}\n        </ListItem>\n      </div>\n      <ConfirmDialog\n        isOpen={isSupportDialogOpen}\n        confirmLabel={lang('OK')}\n        title={lang('AskAQuestion')}\n        textParts={lang('MenuAskText', undefined, { withNodes: true, renderTextFilters: ['br'] })}\n        confirmHandler={handleOpenSupport}\n        onClose={closeSupportDialog}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const starsBalance = global.stars?.balance;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUserId,\n      canBuyPremium: !selectIsPremiumPurchaseBlocked(global),\n      isGiveawayAvailable,\n      starsBalance,\n    };\n  },\n)(SettingsMain));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiNotifyPeerType, ApiPeerNotifySettings } from '../../../api/types';\n\nimport {\n  checkIfNotificationsSupported,\n  checkIfOfflinePushFailed,\n  playNotifySound,\n} from '../../../util/notifications';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  notifyDefaults?: Record<ApiNotifyPeerType, ApiPeerNotifySettings>;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  notifyDefaults,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const areNotificationsSupported = checkIfNotificationsSupported();\n  const areOfflineNotificationsSupported = areNotificationsSupported && !checkIfOfflinePushFailed();\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: ApiNotifyPeerType,\n    setting: 'mute' | 'showPreviews',\n  ) => {\n    const currentIsMuted = Boolean(notifyDefaults?.[peerType]?.mutedUntil);\n    const currentShouldShowPreviews = Boolean(notifyDefaults?.[peerType]?.shouldShowPreviews);\n\n    updateNotificationSettings({\n      peerType,\n      isMuted: setting === 'mute' ? !e.target.checked : currentIsMuted,\n      shouldShowPreviews: setting === 'showPreviews' ? e.target.checked : currentShouldShowPreviews,\n    });\n  }, [notifyDefaults]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const isEnabled = e.target.checked;\n    updateWebNotificationSettings({\n      hasWebNotifications: isEnabled,\n      ...(!isEnabled && { hasPushNotifications: false }),\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'mute');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'users', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'groups', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'mute');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'channels', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('NotificationsWeb')}\n        </h4>\n        <Checkbox\n          label={lang('NotificationsWeb')}\n          subLabel={lang(hasWebNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={hasWebNotifications}\n          disabled={!areNotificationsSupported}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label={lang('NotificationsOffline')}\n          disabled={!hasWebNotifications || !areOfflineNotificationsSupported}\n          subLabel={areOfflineNotificationsSupported\n            ? lang(hasPushNotifications ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')\n            : lang('SettingsOfflineNotificationUnsupported')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label={lang('NotificationsSound')}\n            min={0}\n            max={10}\n            disabled={!areNotificationsSupported}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          subLabel={lang(notifyDefaults?.users?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.users?.mutedUntil)}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.users?.mutedUntil}\n          subLabel={lang(notifyDefaults?.users?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.users?.shouldShowPreviews)}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(notifyDefaults?.groups?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.groups?.mutedUntil)}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.groups?.mutedUntil}\n          subLabel={lang(notifyDefaults?.groups?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.groups?.shouldShowPreviews)}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          subLabel={lang(notifyDefaults?.channels?.mutedUntil\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.channels?.mutedUntil)}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!notifyDefaults?.channels?.mutedUntil}\n          subLabel={lang(notifyDefaults?.channels?.shouldShowPreviews\n            ? 'UserInfoNotificationsEnabled' : 'UserInfoNotificationsDisabled')}\n          checked={Boolean(notifyDefaults?.channels?.shouldShowPreviews)}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, PerformanceType, PerformanceTypeKey } from '../../../types';\nimport type { RegularLangKey } from '../../../types/language';\n\nimport {\n  ANIMATION_LEVEL_CUSTOM, ANIMATION_LEVEL_MAX, ANIMATION_LEVEL_MED, ANIMATION_LEVEL_MIN,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectPerformanceSettings } from '../../../global/selectors';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { IS_BACKDROP_BLUR_SUPPORTED, IS_SNAP_EFFECT_SUPPORTED } from '../../../util/browser/windowEnvironment';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype PerformanceSection = [RegularLangKey, PerformanceOption[]];\ntype PerformanceOption = {\n  key: PerformanceTypeKey;\n  label: RegularLangKey;\n  disabled?: boolean;\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  performanceSettings: PerformanceType;\n};\n\nconst ANIMATION_LEVEL_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderMedium',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst ANIMATION_LEVEL_CUSTOM_OPTIONS: RegularLangKey[] = [\n  'SettingsPerformanceSliderLow',\n  'SettingsPerformanceSliderCustom',\n  'SettingsPerformanceSliderHigh',\n];\n\nconst PERFORMANCE_OPTIONS: PerformanceSection[] = [\n  ['SettingsPerformanceInterfaceAnimations', [\n    { key: 'pageTransitions', label: 'SettingsPerformancePageTransitions' },\n    { key: 'messageSendingAnimations', label: 'SettingsPerformanceSending' },\n    { key: 'mediaViewerAnimations', label: 'SettingsPerformanceMediaViewer' },\n    { key: 'messageComposerAnimations', label: 'SettingsPerformanceComposer' },\n    { key: 'contextMenuAnimations', label: 'SettingsPerformanceContextAnimation' },\n    { key: 'contextMenuBlur', label: 'SettingsPerformanceContextBlur', disabled: !IS_BACKDROP_BLUR_SUPPORTED },\n    { key: 'rightColumnAnimations', label: 'SettingsPerformanceRightColumn' },\n    { key: 'snapEffect', label: 'SettingsPerformanceThanos' },\n  ]],\n  ['SettingsPerformanceStickers', [\n    { key: 'animatedEmoji', label: 'SettingsPerformanceAnimatedEmoji' },\n    { key: 'loopAnimatedStickers', label: 'SettingsPerformanceLoopStickers' },\n    { key: 'reactionEffects', label: 'SettingsPerformanceReactionEffects' },\n    { key: 'stickerEffects', label: 'SettingsPerformanceStickerEffects' },\n  ]],\n  ['SettingsPerformanceMediaAutoplay', [\n    { key: 'autoplayGifs', label: 'SettingsPerformanceAutoplayGif' },\n    { key: 'autoplayVideos', label: 'SettingsPerformanceAutoplayVideo' },\n  ]],\n];\n\nfunction SettingsPerformance({\n  isActive,\n  performanceSettings,\n  onReset,\n}: OwnProps & StateProps) {\n  const {\n    setSharedSettingOption,\n    updatePerformanceSettings,\n  } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const lang = useLang();\n  const [sectionExpandedStates, setSectionExpandedStates] = useState<Record<number, boolean>>({});\n\n  const sectionCheckedStates = useMemo(() => {\n    return PERFORMANCE_OPTIONS.reduce((acc, [, options], index) => {\n      acc[index] = options.every(({ key }) => performanceSettings[key]);\n\n      return acc;\n    }, {} as Record<number, boolean>);\n  }, [performanceSettings]);\n\n  const animationLevelState = useMemo(() => {\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MAX)) {\n      return ANIMATION_LEVEL_MAX;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MIN)) {\n      return ANIMATION_LEVEL_MIN;\n    }\n    if (areDeepEqual(performanceSettings, INITIAL_PERFORMANCE_STATE_MID)) {\n      return ANIMATION_LEVEL_MED;\n    }\n\n    return ANIMATION_LEVEL_CUSTOM;\n  }, [performanceSettings]);\n\n  const animationLevelOptions = useMemo(() => {\n    const options = animationLevelState === ANIMATION_LEVEL_CUSTOM\n      ? ANIMATION_LEVEL_CUSTOM_OPTIONS\n      : ANIMATION_LEVEL_OPTIONS;\n\n    return options.map((option) => lang(option));\n  }, [animationLevelState, lang]);\n\n  const handleToggleSection = useCallback((e: React.MouseEvent, index?: string) => {\n    e.preventDefault();\n    const sectionIndex = Number(index);\n\n    setSectionExpandedStates((prev) => ({\n      ...prev,\n      [sectionIndex]: !prev[sectionIndex],\n    }));\n  }, []);\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    const performance = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MED ? INITIAL_PERFORMANCE_STATE_MID : INITIAL_PERFORMANCE_STATE_MAX);\n\n    setSharedSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performance);\n  }, []);\n\n  const handlePropertyGroupChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n    const perfomanceSection = PERFORMANCE_OPTIONS.find(([sectionName]) => sectionName === name);\n    if (!perfomanceSection) {\n      return;\n    }\n\n    const newSettings = perfomanceSection[1].reduce((acc, { key }) => {\n      acc[key] = checked;\n      return acc;\n    }, {} as Partial<PerformanceType>);\n\n    updatePerformanceSettings(newSettings);\n  }, []);\n\n  const handlePropertyChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = e.target;\n\n    updatePerformanceSettings({ [name as PerformanceTypeKey]: checked });\n  }, []);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderTitle')}\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('SettingsPerformanceSliderSubtitle')}\n        </p>\n\n        <RangeSlider\n          options={animationLevelOptions}\n          value={animationLevelState === ANIMATION_LEVEL_CUSTOM ? ANIMATION_LEVEL_MED : animationLevelState}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      <div className=\"settings-item-simple settings-item__with-shifted-dropdown\">\n        <h3 className=\"settings-item-header\" dir=\"auto\">Resource-Intensive Processes</h3>\n\n        {PERFORMANCE_OPTIONS.map(([sectionName, options], index) => {\n          return (\n            <div\n              key={sectionName}\n              className=\"settings-dropdown-section\"\n            >\n              <div className=\"ListItem with-checkbox\">\n                <Checkbox\n                  name={sectionName}\n                  value={index.toString()}\n                  checked={sectionCheckedStates[index]}\n                  label={lang(sectionName)}\n                  rightIcon={sectionExpandedStates[index] ? 'up' : 'down'}\n                  onChange={handlePropertyGroupChange}\n                  onClickLabel={handleToggleSection}\n                />\n              </div>\n              {Boolean(sectionExpandedStates[index]) && (\n                <div className=\"DropdownList DropdownList--open\">\n                  {options.map(({ key, label, disabled }) => {\n                    if (key === 'snapEffect' && !IS_SNAP_EFFECT_SUPPORTED) return undefined;\n                    return (\n                      <Checkbox\n                        key={key}\n                        name={key}\n                        checked={performanceSettings[key]}\n                        label={lang(label)}\n                        disabled={disabled}\n                        onChange={handlePropertyChange}\n                      />\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  return {\n    performanceSettings: selectPerformanceSettings(global),\n  };\n})(SettingsPerformance));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ACCOUNT_TTL_OPTIONS } from '../../../config.ts';\nimport {\n  selectCanSetPasscode, selectIsCurrentUserFrozen,\n  selectIsCurrentUserPremium,\n} from '../../../global/selectors';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport { getClosestEntry } from '../../../util/getClosestEntry.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  canSetPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  canDisplayAutoarchiveSetting: boolean;\n  shouldArchiveAndMuteNewNonContact?: boolean;\n  shouldNewNonContactPeersRequirePremium?: boolean;\n  shouldChargeForMessages: boolean;\n  canDisplayChatInTitle?: boolean;\n  isCurrentUserFrozen?: boolean;\n  privacy: GlobalState['settings']['privacy'];\n  accountDaysTtl?: number;\n};\n\nconst DAYS_PER_MONTH = 30;\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  isCurrentUserPremium,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  canDisplayAutoarchiveSetting,\n  shouldArchiveAndMuteNewNonContact,\n  shouldNewNonContactPeersRequirePremium,\n  shouldChargeForMessages,\n  canDisplayChatInTitle,\n  canSetPasscode,\n  privacy,\n  onReset,\n  isCurrentUserFrozen,\n  accountDaysTtl,\n}) => {\n  const {\n    openDeleteAccountModal,\n    loadPrivacySettings,\n    loadBlockedUsers,\n    loadContentSettings,\n    updateContentSettings,\n    loadGlobalPrivacySettings,\n    updateGlobalPrivacySettings,\n    loadWebAuthorizations,\n    setSharedSettingOption,\n    openSettingsScreen,\n    loadAccountDaysTtl,\n  } = getActions();\n\n  useEffect(() => {\n    if (!isCurrentUserFrozen) {\n      loadBlockedUsers();\n      loadPrivacySettings();\n      loadContentSettings();\n      loadWebAuthorizations();\n    }\n  }, [isCurrentUserFrozen]);\n\n  useEffect(() => {\n    if (isActive && !isCurrentUserFrozen) {\n      loadGlobalPrivacySettings();\n      loadAccountDaysTtl();\n    }\n  }, [isActive, isCurrentUserFrozen, loadGlobalPrivacySettings]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleArchiveAndMuteChange = useCallback((isEnabled: boolean) => {\n    updateGlobalPrivacySettings({\n      shouldArchiveAndMuteNewNonContact: isEnabled,\n    });\n  }, [updateGlobalPrivacySettings]);\n\n  const handleChatInTitleChange = useCallback((isChecked: boolean) => {\n    setSharedSettingOption({\n      canDisplayChatInTitle: isChecked,\n    });\n  }, []);\n\n  const handleUpdateContentSettings = useCallback((isChecked: boolean) => {\n    updateContentSettings({ isSensitiveEnabled: isChecked });\n  }, [updateContentSettings]);\n\n  const handleOpenDeleteAccountModal = useLastCallback(() => {\n    if (!accountDaysTtl) return;\n    openDeleteAccountModal({ days: accountDaysTtl });\n  });\n\n  const dayOption = useMemo(() => {\n    if (!accountDaysTtl) return undefined;\n    return getClosestEntry(ACCOUNT_TTL_OPTIONS, accountDaysTtl / DAYS_PER_MONTH).toString();\n  }, [accountDaysTtl]);\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    if (!setting) return oldLang('Loading');\n\n    const { visibility, shouldAllowPremium, botsPrivacy } = setting;\n\n    const isAllowBots = botsPrivacy === 'allow';\n    const isVisibilityEverybody = visibility === 'everybody';\n    const shouldShowBotsString = isAllowBots && !isVisibilityEverybody;\n\n    const blockCount = setting.blockChatIds.length + setting.blockUserIds.length;\n    const allowCount = setting.allowChatIds.length + setting.allowUserIds.length;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount && !isVisibilityEverybody) total.push(`+${allowCount}`);\n\n    const botPrivacyString = shouldShowBotsString ? lang('PrivacyValueBots') : '';\n    const totalString = lang.conjunction(total);\n\n    const exceptionString = [botPrivacyString, totalString].filter(Boolean).join(' ');\n    if (shouldShowBotsString && !isVisibilityEverybody) return exceptionString;\n\n    if (shouldAllowPremium) {\n      return oldLang(exceptionString ? 'ContactsAndPremium' : 'PrivacyPremium');\n    }\n\n    switch (visibility) {\n      case 'everybody':\n        return `${oldLang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${oldLang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${oldLang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBlockedUsers })}\n        >\n          {oldLang('BlockedUsers')}\n          <span className=\"settings-item__current-value\">{blockedCount || ''}</span>\n        </ListItem>\n        {canSetPasscode && (\n          <ListItem\n            icon=\"key\"\n            narrow\n\n            onClick={() => openSettingsScreen({\n              screen: hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n            })}\n          >\n            <div className=\"multiline-item\">\n              <span className=\"title\">{oldLang('Passcode')}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {oldLang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n              </span>\n            </div>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"lock\"\n          narrow\n\n          onClick={() => openSettingsScreen({\n            screen: hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {oldLang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.ActiveWebsites })}\n          >\n            {oldLang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{oldLang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneNumber })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyLastSeen })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.lastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyProfilePhoto })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.profilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBio })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBio')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.bio)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyBirthday })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyBirthday')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.birthday)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGifts })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{lang('PrivacyGifts')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.gifts)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyForwarding })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.forwards)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyPhoneCall })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.phoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          allowDisabledClick\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyVoiceMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyVoiceMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.voiceMessages)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          rightElement={isCurrentUserPremium && <StarIcon size=\"big\" type=\"premium\" />}\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyMessages })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('PrivacyMessagesTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {shouldChargeForMessages ? lang('PrivacyPaidMessagesValue')\n                : shouldNewNonContactPeersRequirePremium\n                  ? oldLang('PrivacyMessagesContactsAndPremium')\n                  : oldLang('P2PEverybody')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.PrivacyGroupChats })}\n        >\n          <div className=\"multiline-item\">\n            <span className=\"title\">{oldLang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacy.chatInvite)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={oldLang('lng_settings_sensitive_disable_filtering')}\n            subLabel={oldLang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={handleUpdateContentSettings}\n          />\n        </div>\n      )}\n\n      {canDisplayAutoarchiveSetting && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('NewChatsFromNonContacts')}\n          </h4>\n          <Checkbox\n            label={oldLang('ArchiveAndMute')}\n            subLabel={oldLang('ArchiveAndMuteInfo')}\n            checked={Boolean(shouldArchiveAndMuteNewNonContact)}\n            onCheck={handleArchiveAndMuteChange}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {oldLang('lng_settings_window_system')}\n        </h4>\n        <Checkbox\n          label={oldLang('lng_settings_title_chat_name')}\n          checked={Boolean(canDisplayChatInTitle)}\n          onCheck={handleChatInTitleChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n          {lang('DeleteMyAccount')}\n        </h4>\n        <ListItem\n          narrow\n          onClick={handleOpenDeleteAccountModal}\n        >\n          {lang('DeleteAccountIfAwayFor')}\n          <span className=\"settings-item__current-value\">\n            {lang('Months', { count: dayOption }, { pluralValue: 1 })}\n          </span>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive, shouldArchiveAndMuteNewNonContact,\n          shouldNewNonContactPeersRequirePremium, nonContactPeersPaidStars,\n        },\n        privacy,\n        accountDaysTtl,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n      appConfig,\n    } = global;\n\n    const { canDisplayChatInTitle } = selectSharedSettings(global);\n    const shouldChargeForMessages = Boolean(nonContactPeersPaidStars);\n    const isCurrentUserFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canDisplayAutoarchiveSetting: Boolean(appConfig?.canDisplayAutoarchiveSetting),\n      shouldArchiveAndMuteNewNonContact,\n      canChangeSensitive,\n      shouldNewNonContactPeersRequirePremium,\n      shouldChargeForMessages,\n      privacy,\n      canDisplayChatInTitle,\n      canSetPasscode: selectCanSetPasscode(global),\n      isCurrentUserFrozen,\n      accountDaysTtl,\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockUser,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  useEffect(() => {\n    setUserSearchQuery({ query: search });\n  }, [search, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterPeersByQuery({ ids: availableContactIds, query: search, type: 'user' })\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, search, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    blockUser({ userId });\n    onClose();\n  }, [onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      searchPlaceholder={lang('BlockedUsers.BlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: selectTabState(global).userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockUser } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((userId: string) => {\n    unblockUser({ userId });\n  }, [unblockUser]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const blockedUsernamesById = useMemo(() => {\n    return blockedIds.reduce((acc, userId) => {\n      const isPrivate = isUserId(userId);\n      const user = isPrivate ? usersByIds[userId] : undefined;\n      const mainUsername = user && !user.phoneNumber && getMainUsername(user);\n\n      if (mainUsername) {\n        acc[userId] = mainUsername;\n      }\n\n      return acc;\n    }, {} as Record<string, string>);\n  }, [blockedIds, usersByIds]);\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = usersByIds[contactId];\n    const chat = chatsByIds[contactId];\n    const peer = user || chat;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    const userMainUsername = blockedUsernamesById[contactId];\n\n    return (\n      <ListItem\n        key={`blocked_${contactId}`}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar\n          size=\"medium\"\n          peer={peer}\n        />\n        <div className=\"contact-info\" dir=\"auto\">\n          {peer && <FullNameTitle peer={peer} />}\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {userMainUsername && (\n            <div className=\"contact-username\" dir=\"auto\">\n              @\n              {userMainUsername}\n            </div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container settings-item\">\n              {blockedIds.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        className=\"block-user-button\"\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <Icon name=\"add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { ApiPrivacyKey } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyBio:\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return 'bio';\n    case SettingsScreens.PrivacyBirthday:\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return 'birthday';\n    case SettingsScreens.PrivacyGifts:\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return 'gifts';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyVoiceMessages:\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return 'voiceMessages';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n    case SettingsScreens.PrivacyAddByPhone:\n      return 'addByPhone';\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return 'noPaidMessages';\n  }\n\n  return undefined;\n}\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiDisallowedGiftsSettings } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium } from '../../../global/selectors';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport ListItem from '../../ui/ListItem';\nimport Switcher from '../../ui/Switcher';\n\ntype StateProps = {\n  disallowedGifts?: ApiDisallowedGiftsSettings;\n  isCurrentUserPremium: boolean;\n};\n\nconst SettingsAcceptedGift = ({\n  disallowedGifts, isCurrentUserPremium,\n}: StateProps) => {\n  const { showNotification, updateGlobalPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const handleOpenTelegramPremiumModal = useLastCallback(() => {\n    showNotification({\n      message: lang('PrivacySubscribeToTelegramPremium'),\n      action: {\n        action: 'openPremiumModal',\n        payload: {},\n      },\n      actionText: { key: 'Open' },\n      icon: 'star',\n    });\n  });\n\n  const handleLimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowLimitedStarGifts: !disallowedGifts?.shouldDisallowLimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUnlimitedEditionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUnlimitedStarGifts: !disallowedGifts?.shouldDisallowUnlimitedStarGifts || undefined,\n      },\n    });\n  });\n\n  const handleUniqueChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowUniqueStarGifts: !disallowedGifts?.shouldDisallowUniqueStarGifts || undefined,\n      },\n    });\n  });\n\n  const handlePremiumSubscriptionChange = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      handleOpenTelegramPremiumModal();\n      return;\n    }\n    updateGlobalPrivacySettings({\n      disallowedGifts: {\n        ...disallowedGifts,\n        shouldDisallowPremiumGifts: !disallowedGifts?.shouldDisallowPremiumGifts || undefined,\n      },\n    });\n  });\n\n  return (\n    <div className=\"settings-item\">\n      <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftTitle')}\n      </h4>\n      <ListItem onClick={handleLimitedEditionChange}>\n        <span>{lang('PrivacyGiftLimitedEdition')}</span>\n        <Switcher\n          id=\"limited_edition\"\n          label={disallowedGifts?.shouldDisallowLimitedStarGifts ? lang('PrivacyDisableLimitedEditionStarGifts')\n            : lang('PrivacyEnableLimitedEditionStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowLimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUnlimitedEditionChange}>\n        <span>{lang('PrivacyGiftUnlimited')}</span>\n        <Switcher\n          id=\"unlimited\"\n          label={disallowedGifts?.shouldDisallowUnlimitedStarGifts ? lang('PrivacyDisableUnlimitedStarGifts')\n            : lang('PrivacyEnableUnlimitedStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUnlimitedStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handleUniqueChange}>\n        <span>{lang('PrivacyGiftUnique')}</span>\n        <Switcher\n          id=\"unique\"\n          label={disallowedGifts?.shouldDisallowUniqueStarGifts ? lang('PrivacyDisableUniqueStarGifts')\n            : lang('PrivacyEnableUniqueStarGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowUniqueStarGifts}\n        />\n      </ListItem>\n      <ListItem onClick={handlePremiumSubscriptionChange}>\n        <span>{lang('PrivacyGiftPremiumSubscription')}</span>\n        <Switcher\n          id=\"premium_subscription\"\n          label={disallowedGifts?.shouldDisallowPremiumGifts ? lang('PrivacyDisablePremiumGifts')\n            : lang('PrivacyEnablePremiumGifts')}\n          disabled={!isCurrentUserPremium}\n          checked={!isCurrentUserPremium ? true : !disallowedGifts?.shouldDisallowPremiumGifts}\n        />\n      </ListItem>\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('PrivacyAcceptedGiftInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          disallowedGifts,\n        },\n      },\n    } = global;\n\n    return {\n      disallowedGifts,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsAcceptedGift));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { PrivacyVisibility } from '../../../api/types';\n\nimport { selectIsCurrentUserPremium, selectShouldHideReadMarks } from '../../../global/selectors';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  visibility?: PrivacyVisibility;\n};\n\ntype StateProps = {\n  isCurrentUserPremium: boolean;\n  shouldHideReadMarks: boolean;\n};\n\nconst SettingsPrivacyLastSeen = ({\n  isCurrentUserPremium, shouldHideReadMarks, visibility,\n}: OwnProps & StateProps) => {\n  const { updateGlobalPrivacySettings, openPremiumModal } = getActions();\n  const lang = useOldLang();\n  const canShowHideReadTime = visibility === 'nobody' || visibility === 'contacts';\n\n  const handleChangeShouldHideReadMarks = useLastCallback(\n    (isEnabled) => updateGlobalPrivacySettings({ shouldHideReadMarks: isEnabled }),\n  );\n\n  const handleOpenPremiumModal = useLastCallback(() => {\n    openPremiumModal({\n      initialSection: 'last_seen',\n    });\n  });\n\n  return (\n    <>\n      {canShowHideReadTime && (\n        <div className=\"settings-item\">\n          <Checkbox\n            label={lang('HideReadTime')}\n            checked={shouldHideReadMarks}\n            onCheck={handleChangeShouldHideReadMarks}\n          />\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('HideReadTimeInfo'), ['br'])}\n          </p>\n        </div>\n      )}\n      <div className=\"settings-item\">\n        <ListItem\n          leftElement={<StarIcon className=\"icon ListItem-main-icon\" type=\"premium\" size=\"big\" />}\n          onClick={handleOpenPremiumModal}\n        >\n          {isCurrentUserPremium ? lang('PrivacyLastSeenPremiumForPremium') : lang('PrivacyLastSeenPremium')}\n        </ListItem>\n        <p\n          className=\"settings-item-description-larger premium-info\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          {isCurrentUserPremium\n            ? lang('PrivacyLastSeenPremiumInfoForPremium')\n            : lang('PrivacyLastSeenPremiumInfo')}\n        </p>\n      </div>\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldHideReadMarks: Boolean(selectShouldHideReadMarks(global)),\n    };\n  },\n)(SettingsPrivacyLastSeen));\n","// extracted by mini-css-extract-plugin\nexport default {\"fallback-photo\":\"Qvhl9Jjv\",\"fallbackPhoto\":\"Qvhl9Jjv\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPhoto } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\n\nimport styles from './SettingsPrivacyPublicPhoto.module.scss';\n\ntype OwnProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n};\n\nconst SettingsPrivacyPublicProfilePhoto: FC<OwnProps> = ({\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n}) => {\n  const {\n    loadFullUser, uploadProfilePhoto, deleteProfilePhoto, showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const [isDeleteFallbackPhotoModalOpen, openDeleteFallbackPhotoModal, closeDeleteFallbackPhotoModal] = useFlag(false);\n\n  const inputRef = useRef<HTMLInputElement>();\n\n  useEffect(() => {\n    if (!hasCurrentUserFullInfo) {\n      loadFullUser({ userId: currentUserId });\n    }\n  }, [hasCurrentUserFullInfo, currentUserId, loadFullUser]);\n\n  const handleSelectFile = useCallback((file: File) => {\n    uploadProfilePhoto({\n      file,\n      isFallback: true,\n    });\n    showNotification({\n      message: lang('Privacy.ProfilePhoto.PublicPhotoSuccess'),\n    });\n  }, [lang, showNotification, uploadProfilePhoto]);\n\n  const handleConfirmDelete = useCallback(() => {\n    closeDeleteFallbackPhotoModal();\n    deleteProfilePhoto({ photo: currentUserFallbackPhoto! });\n  }, [closeDeleteFallbackPhotoModal, deleteProfilePhoto, currentUserFallbackPhoto]);\n\n  const handleOpenFileSelector = useCallback(() => {\n    inputRef.current?.click();\n  }, []);\n\n  return (\n    <div className=\"settings-item\">\n      <ListItem\n        narrow\n        icon=\"camera-add\"\n        onClick={handleOpenFileSelector}\n      >\n        <SelectAvatar\n          onChange={handleSelectFile}\n          inputRef={inputRef}\n        />\n        {lang(currentUserFallbackPhoto\n          ? 'Privacy.ProfilePhoto.UpdatePublicPhoto'\n          : 'Privacy.ProfilePhoto.SetPublicPhoto')}\n      </ListItem>\n      {currentUserFallbackPhoto && (\n        <ListItem\n          narrow\n          leftElement={<Avatar photo={currentUserFallbackPhoto} size=\"mini\" className={styles.fallbackPhoto} />}\n          onClick={openDeleteFallbackPhotoModal}\n          destructive\n        >\n          {lang(currentUserFallbackPhoto.isVideo\n            ? 'Privacy.ProfilePhoto.RemovePublicVideo'\n            : 'Privacy.ProfilePhoto.RemovePublicPhoto')}\n          <ConfirmDialog\n            isOpen={isDeleteFallbackPhotoModalOpen}\n            onClose={closeDeleteFallbackPhotoModal}\n            text={lang('Privacy.ResetPhoto.Confirm')}\n            confirmLabel={lang('Delete')}\n            confirmHandler={handleConfirmDelete}\n            confirmIsDestructive\n          />\n        </ListItem>\n      )}\n      <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {lang('Privacy.ProfilePhoto.PublicPhotoInfo')}\n      </p>\n    </div>\n  );\n};\n\nexport default memo(SettingsPrivacyPublicProfilePhoto);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiPrivacySettings, BotsPrivacyType } from '../../../api/types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectIsCurrentUserPremium, selectUserFullInfo } from '../../../global/selectors';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Switcher from '../../ui/Switcher';\nimport PremiumStatusItem from './PremiumStatusItem';\nimport PrivacyLockedOption from './PrivacyLockedOption';\nimport SettingsAcceptedGift from './SettingsAcceptedGift';\nimport SettingsPrivacyLastSeen from './SettingsPrivacyLastSeen';\nimport SettingsPrivacyPublicProfilePhoto from './SettingsPrivacyPublicProfilePhoto';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId: string;\n  hasCurrentUserFullInfo?: boolean;\n  currentUserFallbackPhoto?: ApiPhoto;\n  primaryPrivacy?: ApiPrivacySettings;\n  secondaryPrivacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n  shouldDisplayGiftsButton?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  primaryPrivacy,\n  secondaryPrivacy,\n  currentUserId,\n  hasCurrentUserFullInfo,\n  currentUserFallbackPhoto,\n  isPremiumRequired,\n  onReset,\n  shouldDisplayGiftsButton,\n  isCurrentUserPremium,\n}) => {\n  const { updateGlobalPrivacySettings, showNotification } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleShowGiftIconInChats = useLastCallback(() => {\n    if (!isCurrentUserPremium) {\n      showNotification({\n        message: lang('PrivacySubscribeToTelegramPremium'),\n        action: {\n          action: 'openPremiumModal',\n          payload: {},\n        },\n        actionText: { key: 'Open' },\n        icon: 'star',\n      });\n      return;\n    }\n    updateGlobalPrivacySettings({\n      shouldDisplayGiftsButton: !shouldDisplayGiftsButton,\n    });\n  });\n\n  const secondaryScreen = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneP2P;\n      case SettingsScreens.PrivacyPhoneNumber: {\n        return primaryPrivacy?.visibility === 'nobody' ? SettingsScreens.PrivacyAddByPhone : undefined;\n      }\n      default:\n        return undefined;\n    }\n  }, [primaryPrivacy, screen]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {screen === SettingsScreens.PrivacyGifts && (\n        <div className=\"settings-item\">\n          <ListItem onClick={handleShowGiftIconInChats}>\n            <span>{lang('PrivacyDisplayGiftsButton')}</span>\n            <Switcher\n              id=\"gift\"\n              disabled={!isCurrentUserPremium}\n              label={shouldDisplayGiftsButton ? lang('HideGiftsButton') : lang('DisplayGiftsButton')}\n              checked={shouldDisplayGiftsButton}\n            />\n          </ListItem>\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('PrivacyDisplayGiftIconInChats', {\n              icon: <Icon name=\"gift\" className=\"gift-icon\" />,\n              gift: lang('PrivacyDisplayGift'),\n            }, {\n              withNodes: true,\n            })}\n          </p>\n        </div>\n      )}\n      <PrivacySubsection\n        screen={screen}\n        privacy={primaryPrivacy}\n        isPremiumRequired={isPremiumRequired}\n      />\n      {screen === SettingsScreens.PrivacyProfilePhoto && primaryPrivacy?.visibility !== 'everybody' && (\n        <SettingsPrivacyPublicProfilePhoto\n          currentUserId={currentUserId}\n          hasCurrentUserFullInfo={hasCurrentUserFullInfo}\n          currentUserFallbackPhoto={currentUserFallbackPhoto}\n        />\n      )}\n      {screen === SettingsScreens.PrivacyLastSeen && (\n        <SettingsPrivacyLastSeen visibility={primaryPrivacy?.visibility} />\n      )}\n      {screen === SettingsScreens.PrivacyGifts && (\n        <SettingsAcceptedGift />\n      )}\n      {Boolean(secondaryScreen) && (\n        <PrivacySubsection\n          screen={secondaryScreen}\n          privacy={secondaryPrivacy}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction PrivacySubsection({\n  screen,\n  privacy,\n  isPremiumRequired,\n}: {\n  screen: SettingsScreens;\n  privacy?: ApiPrivacySettings;\n  isPremiumRequired?: boolean;\n}) {\n  const { setPrivacyVisibility, openSettingsScreen } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    const hasNobody = screen !== SettingsScreens.PrivacyAddByPhone;\n    const options = [\n      { value: 'everybody', label: oldLang('P2PEverybody') },\n      {\n        value: 'contacts',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PContacts')} />\n        ) : (\n          oldLang('P2PContacts')\n        ),\n        hidden: isPremiumRequired,\n      },\n    ];\n\n    if (hasNobody) {\n      options.push({\n        value: 'nobody',\n        label: isPremiumRequired ? (\n          <PrivacyLockedOption label={oldLang('P2PNobody')} />\n        ) : (\n          oldLang('P2PNobody')\n        ),\n        hidden: isPremiumRequired,\n      });\n    }\n    return options;\n  }, [oldLang, screen, isPremiumRequired]);\n\n  const primaryExceptionLists = useMemo(() => {\n    if (screen === SettingsScreens.PrivacyAddByPhone) {\n      return {\n        shouldShowDenied: false,\n        shouldShowAllowed: false,\n      };\n    }\n\n    return {\n      shouldShowDenied: privacy?.visibility !== 'nobody',\n      shouldShowAllowed: privacy?.visibility !== 'everybody',\n    };\n  }, [privacy, screen]);\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsInfo');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('CustomHelp');\n      case SettingsScreens.PrivacyAddByPhone: {\n        return privacy?.visibility === 'everybody' ? oldLang('PrivacyPhoneInfo') : oldLang('PrivacyPhoneInfo3');\n      }\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesInfo');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen, privacy]);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return oldLang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyAddByPhone:\n        return oldLang('PrivacyPhoneTitle2');\n      case SettingsScreens.PrivacyLastSeen:\n        return oldLang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return oldLang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyBio:\n        return oldLang('PrivacyBioTitle');\n      case SettingsScreens.PrivacyBirthday:\n        return oldLang('PrivacyBirthdayTitle');\n      case SettingsScreens.PrivacyGifts:\n        return lang('PrivacyGiftsTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return oldLang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyVoiceMessages:\n        return oldLang('PrivacyVoiceMessagesTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return oldLang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return oldLang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return oldLang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [oldLang, lang, screen]);\n\n  const prepareSubtitle = useLastCallback(\n    (userIds?: string[], chatIds?: string[], shouldAllowPremium?: boolean, botsPrivacy?: BotsPrivacyType) => {\n      const userIdsCount = userIds?.length || 0;\n      const chatIdsCount = chatIds?.length || 0;\n      const isAllowBots = botsPrivacy === 'allow';\n      const hasPeers = userIdsCount || chatIdsCount;\n\n      if (!hasPeers && !isAllowBots) {\n        return shouldAllowPremium ? oldLang('PrivacyPremium') : oldLang('EditAdminAddUsers');\n      } else if (shouldAllowPremium) {\n        return oldLang('ContactsAndPremium');\n      }\n\n      const userCountString = userIdsCount > 0 ? oldLang('Users', userIdsCount) : undefined;\n      const chatCountString = chatIdsCount > 0 ? oldLang('Chats', chatIdsCount) : undefined;\n\n      const botPrivacyString = isAllowBots ? lang('PrivacyValueBots') : '';\n      const peersString = lang.conjunction([userCountString, chatCountString].filter(Boolean));\n\n      return [botPrivacyString, peersString].filter(Boolean).join(' ');\n    },\n  );\n\n  const allowedString = useMemo(() => {\n    return prepareSubtitle(\n      privacy?.allowUserIds,\n      privacy?.allowChatIds,\n      privacy?.shouldAllowPremium,\n      privacy?.botsPrivacy,\n    );\n  }, [privacy]);\n\n  const blockString = useMemo(() => {\n    return prepareSubtitle(privacy?.blockUserIds, privacy?.blockChatIds);\n  }, [privacy]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey: privacyKey!,\n      visibility: value,\n    });\n  }, [privacyKey]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioAllowedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayAllowedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyBio:\n        return SettingsScreens.PrivacyBioDeniedContacts;\n      case SettingsScreens.PrivacyBirthday:\n        return SettingsScreens.PrivacyBirthdayDeniedContacts;\n      case SettingsScreens.PrivacyGifts:\n        return SettingsScreens.PrivacyGiftsDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      case SettingsScreens.PrivacyVoiceMessages:\n        return SettingsScreens.PrivacyVoiceMessagesDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  return (\n    <>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={privacy?.visibility}\n        />\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={oldLang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n      {!isPremiumRequired && (primaryExceptionLists.shouldShowAllowed || primaryExceptionLists.shouldShowDenied) && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n            {oldLang('PrivacyExceptions')}\n          </h4>\n          {primaryExceptionLists.shouldShowAllowed && (\n            <ListItem\n              narrow\n              icon=\"add-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: allowedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('AlwaysAllow')}</span>\n                <span className=\"subtitle\">{allowedString}</span>\n              </div>\n            </ListItem>\n          )}\n          {primaryExceptionLists.shouldShowDenied && (\n            <ListItem\n              narrow\n              icon=\"delete-user\"\n\n              onClick={() => {\n                openSettingsScreen({ screen: deniedContactsScreen });\n              }}\n            >\n              <div className=\"multiline-item full-size\">\n                <span className=\"title\">{oldLang('NeverAllow')}</span>\n                <span className=\"subtitle\">{blockString}</span>\n              </div>\n            </ListItem>\n          )}\n        </div>\n      )}\n      {isPremiumRequired && <PremiumStatusItem />}\n    </>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let primaryPrivacy: ApiPrivacySettings | undefined;\n    let secondaryPrivacy: ApiPrivacySettings | undefined;\n\n    const {\n      currentUserId,\n      settings: {\n        privacy,\n        byKey: {\n          shouldDisplayGiftsButton,\n        },\n      },\n    } = global;\n\n    const currentUserFullInfo = selectUserFullInfo(global, currentUserId!);\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        primaryPrivacy = privacy.phoneNumber;\n        secondaryPrivacy = privacy.addByPhone;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        primaryPrivacy = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        primaryPrivacy = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyBio:\n        primaryPrivacy = privacy.bio;\n        break;\n\n      case SettingsScreens.PrivacyBirthday:\n        primaryPrivacy = privacy.birthday;\n        break;\n\n      case SettingsScreens.PrivacyGifts:\n        primaryPrivacy = privacy.gifts;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyPhoneCall:\n        primaryPrivacy = privacy.phoneCall;\n        secondaryPrivacy = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        primaryPrivacy = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyVoiceMessages:\n        primaryPrivacy = privacy.voiceMessages;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        primaryPrivacy = privacy.chatInvite;\n        break;\n    }\n\n    if (!primaryPrivacy) {\n      return {\n        currentUserId: currentUserId!,\n        hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n        currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      };\n    }\n\n    return {\n      primaryPrivacy,\n      secondaryPrivacy,\n      currentUserId: currentUserId!,\n      hasCurrentUserFullInfo: Boolean(currentUserFullInfo),\n      currentUserFallbackPhoto: currentUserFullInfo?.fallbackPhoto,\n      isPremiumRequired: screen === SettingsScreens.PrivacyVoiceMessages && !selectIsCurrentUserPremium(global),\n      shouldDisplayGiftsButton,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { CustomPeerType, UniqueCustomPeer } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport {\n  isChatChannel, isDeletedUser,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { unique } from '../../../util/iteratees';\nimport { CUSTOM_PEER_PREMIUM } from '../../../util/objects/customPeer';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  withPremiumCategory?: boolean;\n  withMiniAppsCategory?: boolean;\n  usersOnly?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst PREMIUM_CATEGORY = [CUSTOM_PEER_PREMIUM];\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  withPremiumCategory,\n  withMiniAppsCategory,\n  screen,\n  isActive,\n  currentUserId,\n  settings,\n  usersOnly = false,\n  onReset,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const customPeerBots: UniqueCustomPeer = useMemo(() => {\n    return {\n      isCustomPeer: true,\n      type: 'bots',\n      title: lang('PrivacyValueBots'),\n      avatarIcon: 'bots',\n      isAvatarSquare: true,\n      peerColorId: 6,\n    };\n  }, [lang]);\n\n  const miniAppsCategory = useMemo(() => {\n    return [customPeerBots];\n  }, [customPeerBots]);\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const selectedCategoryTypes = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n    if (settings.shouldAllowPremium) {\n      return [CUSTOM_PEER_PREMIUM.type];\n    }\n    if (settings.botsPrivacy === 'allow' && isAllowList) {\n      return [customPeerBots.type];\n    }\n    return [];\n  }, [settings, isAllowList, customPeerBots]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n  const [newSelectedCategoryTypes, setNewSelectedCategoryTypes] = useState<CustomPeerType[]>(selectedCategoryTypes);\n\n  // Reset selected contact ids on change from other client when screen is not active\n  useEffect(() => {\n    if (!isActive) {\n      setNewSelectedContactIds(selectedContactIds);\n      setNewSelectedCategoryTypes(selectedCategoryTypes);\n    }\n  }, [isActive, selectedCategoryTypes, selectedContactIds]);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n        const user = usersById[chatId];\n        const isDeleted = user && isDeletedUser(user);\n        const isChannel = chat && isChatChannel(chat);\n        return (!usersOnly || user)\n          && chatId !== currentUserId\n          && chatId !== SERVICE_NOTIFICATIONS_USER_ID\n          && !isChannel && !isDeleted;\n      });\n\n    const filteredChats = filterPeersByQuery({ ids: chatIds, query: searchQuery });\n\n    // Show only relevant items\n    if (searchQuery) return filteredChats;\n\n    return unique([\n      ...selectedContactIds,\n      ...chatIds,\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, searchQuery, currentUserId, usersOnly]);\n\n  const handleSelectedCategoriesChange = useCallback((value: CustomPeerType[]) => {\n    setNewSelectedCategoryTypes(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen)!,\n      isAllowList: Boolean(isAllowList),\n      updatedIds: newSelectedContactIds,\n      isPremiumAllowed: newSelectedCategoryTypes.includes(CUSTOM_PEER_PREMIUM.type) || undefined,\n      botsPrivacy: (!withMiniAppsCategory) ? 'none'\n        : (newSelectedCategoryTypes.includes(customPeerBots.type) ? 'allow' : 'disallow'),\n    });\n\n    onReset();\n  }, [\n    isAllowList,\n    withMiniAppsCategory,\n    newSelectedCategoryTypes,\n    newSelectedContactIds,\n    onReset,\n    screen,\n    customPeerBots,\n  ]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function getCustomCategory() {\n    if (withPremiumCategory) return PREMIUM_CATEGORY;\n    if (withMiniAppsCategory && isAllowList) return miniAppsCategory;\n    return undefined;\n  }\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <PeerPicker\n        categories={getCustomCategory()}\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        selectedCategories={newSelectedCategoryTypes}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? oldLang('AlwaysAllowPlaceholder') : oldLang('NeverAllowPlaceholder')}\n        categoryPlaceholderKey=\"PrivacyUserTypes\"\n        searchInputId=\"new-group-picker-search\"\n        isSearchable\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onSelectedCategoriesChange={handleSelectedCategoriesChange}\n        onFilterChange={setSearchQuery}\n        allowMultiple\n        itemInputType=\"checkbox\"\n        withDefaultPadding\n        withStatus\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? oldLang('AlwaysAllow') : oldLang('NeverAllow')}\n      >\n        <Icon name=\"check\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyBioAllowedContacts:\n    case SettingsScreens.PrivacyBioDeniedContacts:\n      return privacy.bio;\n    case SettingsScreens.PrivacyBirthdayAllowedContacts:\n    case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      return privacy.birthday;\n    case SettingsScreens.PrivacyGiftsAllowedContacts:\n    case SettingsScreens.PrivacyGiftsDeniedContacts:\n      return privacy.gifts;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n    case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      return privacy.voiceMessages;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n    case SettingsScreens.PrivacyNoPaidMessages:\n      return privacy.noPaidMessages;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  availableReactions,\n  selectedReaction,\n  onReset,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = useMemo(() => (\n    (availableReactions || []).filter((availableReaction) => !availableReaction.isInactive)\n      .map((availableReaction) => ({\n        label: (\n          <>\n            <ReactionStaticEmoji reaction={availableReaction.reaction} availableReactions={availableReactions} />\n            {availableReaction.title}\n          </>\n        ),\n        value: availableReaction.reaction.emoticon,\n      }))\n  ), [availableReactions]);\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({\n      reaction: { type: 'emoji', emoticon: reaction },\n    });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n        withIcon\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { config, reactions } = global;\n\n    return {\n      availableReactions: reactions.availableReactions,\n      selectedReaction: config?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n  ApiSticker,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type { AccountSettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../../global/selectors';\nimport { pick } from '../../../util/iteratees';\nimport { REM } from '../../common/helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport StickerSetCard from '../../common/StickerSetCard';\nimport Checkbox from '../../ui/Checkbox';\nimport ListItem from '../../ui/ListItem';\n\nconst DEFAULT_REACTION_SIZE = 1.5 * REM;\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<AccountSettings, (\n    'shouldSuggestStickers' | 'shouldUpdateStickerSetOrder'\n  )> & {\n    addedSetIds?: string[];\n    customEmojiSetIds?: string[];\n    stickerSetsById: Record<string, ApiStickerSet>;\n    defaultReaction?: ApiReaction;\n    availableReactions?: ApiAvailableReaction[];\n    canPlayAnimatedEmojis: boolean;\n  };\n\nconst SettingsStickers: FC<OwnProps & StateProps> = ({\n  isActive,\n  addedSetIds,\n  customEmojiSetIds,\n  stickerSetsById,\n  defaultReaction,\n  shouldSuggestStickers,\n  shouldUpdateStickerSetOrder,\n  availableReactions,\n  canPlayAnimatedEmojis,\n  onReset,\n}) => {\n  const {\n    setSettingOption,\n    openStickerSet,\n    openSettingsScreen,\n  } = getActions();\n  const lang = useOldLang();\n\n  const stickerSettingsRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n\n  const handleStickerSetClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet]);\n\n  const handleSuggestStickerSetOrderChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldUpdateStickerSetOrder: newValue });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = useMemo(() => (\n    addedSetIds && Object.values(pick(stickerSetsById, addedSetIds))\n  ), [addedSetIds, stickerSetsById]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <ListItem\n          narrow\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.CustomEmoji })}\n          icon=\"smile\"\n        >\n          {lang('StickersList.EmojiItem')}\n          {customEmojiSetIds && <span className=\"settings-item__current-value\">{customEmojiSetIds.length}</span>}\n        </ListItem>\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            narrow\n\n            onClick={() => openSettingsScreen({ screen: SettingsScreens.QuickReaction })}\n          >\n            <ReactionStaticEmoji\n              reaction={defaultReaction}\n              className=\"current-default-reaction\"\n              size={DEFAULT_REACTION_SIZE}\n              availableReactions={availableReactions}\n            />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('InstalledStickers.DynamicPackOrder')}\n        </h4>\n        <Checkbox\n          label={lang('InstalledStickers.DynamicPackOrder')}\n          checked={shouldUpdateStickerSetOrder}\n          onCheck={handleSuggestStickerSetOrderChange}\n        />\n        <p className=\"settings-item-description mt-3\" dir=\"auto\">\n          {lang('InstalledStickers.DynamicPackOrderInfo')}\n        </p>\n      </div>\n      {stickerSets && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('ChooseStickerMyStickerSets')}\n          </h4>\n          <div ref={stickerSettingsRef}>\n            {stickerSets.map((stickerSet: ApiStickerSet) => (\n              <StickerSetCard\n                key={stickerSet.id}\n                stickerSet={stickerSet}\n                observeIntersection={observeIntersectionForCovers}\n                onClick={handleStickerSetClick}\n                noPlay={!canPlayAnimatedEmojis}\n              />\n            ))}\n          </div>\n          <p className=\"settings-item-description mt-3\" dir=\"auto\">\n            {renderText(lang('StickersBotInfo'), ['links'])}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      ...pick(global.settings.byKey, [\n        'shouldSuggestStickers',\n        'shouldUpdateStickerSetOrder',\n      ]),\n      addedSetIds: global.stickers.added.setIds,\n      customEmojiSetIds: global.customEmojis.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.config?.defaultReaction,\n      availableReactions: global.reactions.availableReactions,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(SettingsStickers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIcon from '../../../common/AnimatedIcon';\nimport Button from '../../../ui/Button';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.Privacy });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji, selectTabState } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n  recoveryEmail: string;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n  recoveryEmail,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {recoveryEmail && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('TwoStepAuth.ConfirmEmailDescription', recoveryEmail)}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  const tabState = selectTabState(global);\n  const recoveryEmail = tabState.recoveryEmail;\n\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n    recoveryEmail,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport ListItem from '../../../ui/ListItem';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const { openSettingsScreen } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item\">\n        <ListItem\n          icon=\"edit\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordCurrent })}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaTurnOff })}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n\n          onClick={() => openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCurrentPassword })}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport type React from '../../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../../util/browser/windowEnvironment';\nimport renderText from '../../../common/helpers/renderText';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useFlag from '../../../../hooks/useFlag';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\nimport Button from '../../../ui/Button';\nimport InputText from '../../../ui/InputText';\nimport Modal from '../../../ui/Modal';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const { isMobile } = useAppLayout();\n\n  const focusDelayTimeoutMs = isMobile ? 550 : 400;\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, focusDelayTimeoutMs);\n    }\n  }, [focusDelayTimeoutMs]);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n        {type === 'email' && (\n          <p className=\"settings-item-description mb-3\" dir=\"auto\">\n            {lang('RecoveryEmailSubtitle')}\n          </p>\n        )}\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\nimport Button from '../../../ui/Button';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item settings-group\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  errorKey,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n    openSettingsScreen,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmailCode });\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmailCode });\n      }\n    }\n  }, [currentScreen, waitingEmailCodeLength, openSettingsScreen]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPassword });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaNewPasswordEmail });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordNew });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordConfirm });\n  }, [dispatch, openSettingsScreen]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    openSettingsScreen({ screen: SettingsScreens.TwoFaChangePasswordHint });\n  }, [openSettingsScreen]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updatePassword, openSettingsScreen]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.Privacy });\n      },\n    });\n  }, [clearPassword, openSettingsScreen]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaRecoveryEmail });\n      },\n    });\n  }, [checkPassword, dispatch, openSettingsScreen]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value!,\n      onSuccess: () => {\n        openSettingsScreen({ screen: SettingsScreens.TwoFaCongratulations });\n      },\n    });\n  }, [dispatch, state, updateRecoveryEmail, openSettingsScreen]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          submitLabel={oldLang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          placeholder={oldLang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={oldLang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={oldLang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={oldLang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={oldLang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={errorKey && lang.withRegular(errorKey)}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\nimport { SettingsScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { LAYERS_ANIMATION_NAME } from '../../../util/browser/windowEnvironment';\n\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMarkScrolled from '../../../hooks/useMarkScrolled/useMarkScrolled';\n\nimport Transition from '../../ui/Transition';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsPasscode from './passcode/SettingsPasscode';\nimport PrivacyMessages from './PrivacyMessages';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsCustomEmoji from './SettingsCustomEmoji';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsDoNotTranslate from './SettingsDoNotTranslate';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsExperimental from './SettingsExperimental';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsMain from './SettingsMain';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPerformance from './SettingsPerformance';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsStickers from './SettingsStickers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersEditFolderInvites,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n  SettingsScreens.FoldersShare,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_BIO_SCREENS = [\n  SettingsScreens.PrivacyBioAllowedContacts,\n  SettingsScreens.PrivacyBioDeniedContacts,\n];\n\nconst PRIVACY_BIRTHDAY_SCREENS = [\n  SettingsScreens.PrivacyBirthdayAllowedContacts,\n  SettingsScreens.PrivacyBirthdayDeniedContacts,\n];\n\nconst PRIVACY_GIFTS_SCREENS = [\n  SettingsScreens.PrivacyGiftsAllowedContacts,\n  SettingsScreens.PrivacyGiftsDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_VOICE_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyVoiceMessagesAllowedContacts,\n  SettingsScreens.PrivacyVoiceMessagesDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nconst PRIVACY_MESSAGES_SCREENS = [\n  SettingsScreens.PrivacyNoPaidMessages,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const { closeShareChatFolderModal, openSettingsScreen } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  useMarkScrolled({\n    containerRef,\n    selector: '.settings-content',\n  }, [currentScreen]);\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    const isFromSettings = selectTabState(getGlobal()).shareFolderScreen?.isFromSettings;\n\n    if (currentScreen === SettingsScreens.FoldersShare) {\n      closeShareChatFolderModal();\n    }\n\n    if (forceReturnToChatList === true || (isFromSettings !== undefined && !isFromSettings)) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      || currentScreen === SettingsScreens.FoldersEditFolderInvites\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        openSettingsScreen({ screen: SettingsScreens.FoldersCreateFolder });\n      } else {\n        openSettingsScreen({ screen: SettingsScreens.FoldersEditFolder });\n      }\n      return;\n    }\n\n    onReset();\n  });\n\n  function renderCurrentSectionContent(isScreenActive: boolean, activeScreen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBio]: PRIVACY_BIO_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyBirthday]: PRIVACY_BIRTHDAY_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGifts]: PRIVACY_GIFTS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyVoiceMessages]: PRIVACY_VOICE_MESSAGES_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(activeScreen),\n      [SettingsScreens.PrivacyMessages]: PRIVACY_MESSAGES_SCREENS.includes(activeScreen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(activeScreen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(activeScreen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(activeScreen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(activeScreen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).map(Number).includes(activeScreen)\n      || Object.values(privacyAllowScreens).includes(true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            isActive={isScreenActive\n              || activeScreen === SettingsScreens.GeneralChatBackgroundColor\n              || activeScreen === SettingsScreens.GeneralChatBackground\n              || activeScreen === SettingsScreens.QuickReaction\n              || activeScreen === SettingsScreens.CustomEmoji\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.CustomEmoji:\n        return (\n          <SettingsCustomEmoji isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage\n            isActive={isScreenActive || activeScreen === SettingsScreens.DoNotTranslate}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.DoNotTranslate:\n        return (\n          <SettingsDoNotTranslate isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Stickers:\n        return (\n          <SettingsStickers isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Experimental:\n        return (\n          <SettingsExperimental isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            isActive={isScreenActive || activeScreen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyBio:\n      case SettingsScreens.PrivacyBirthday:\n      case SettingsScreens.PrivacyGifts:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyVoiceMessages:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyBioAllowedContacts:\n      case SettingsScreens.PrivacyBirthdayAllowedContacts:\n      case SettingsScreens.PrivacyGiftsAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      case SettingsScreens.PrivacyNoPaidMessages:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            usersOnly={currentScreen === SettingsScreens.PrivacyNoPaidMessages}\n            withPremiumCategory={currentScreen === SettingsScreens.PrivacyGroupChatsAllowedContacts}\n            withMiniAppsCategory={currentScreen === SettingsScreens.PrivacyGiftsAllowedContacts}\n            screen={currentScreen}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyBioDeniedContacts:\n      case SettingsScreens.PrivacyBirthdayDeniedContacts:\n      case SettingsScreens.PrivacyGiftsDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyMessages:\n        return (\n          <PrivacyMessages\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersEditFolderInvites:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n      case SettingsScreens.FoldersShare:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={activeScreen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={activeScreen}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Performance:\n        return (\n          <SettingsPerformance\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(\n    isScreenActive: boolean,\n    _isFrom: boolean,\n    _currentKey: SettingsScreens,\n    activeKey: SettingsScreens,\n  ) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, activeKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      ref={containerRef}\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n      shouldWrap\n      withSwipeControl\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\nimport { StoryViewerOrigin } from '../../../types';\n\nimport { sortUserIds } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterPeersByQuery({ ids: contactIds, query: filter, type: 'user' });\n\n    return sortUserIds(filteredIds, usersById, userStatusesById);\n  }, [contactIds, filter, usersById, userStatusesById]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable contact-list-item\"\n            onClick={() => handleClick(id)}\n          >\n            <PrivateChatInfo\n              userId={id}\n              forceShowSelf\n              avatarSize=\"large\"\n              withStory\n              storyViewerOrigin={StoryViewerOrigin.ChatList}\n              ripple={!isMobile}\n            />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        key=\"create-new-contact\"\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <Icon name=\"add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { isUserBot } from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localPeerIds?: string[];\n  globalPeerIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localPeerIds,\n  globalPeerIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, []);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds\n      ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localPeerIds || []),\n        ...(globalPeerIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n\n        return user && !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, searchQuery, localPeerIds, globalPeerIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    setGlobalSearchQuery({ query: '' });\n    onNextStep();\n  }, [onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          isSearchable\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n          withDefaultPadding\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <Icon name=\"arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = selectTabState(global).globalSearch;\n    const { peerIds: globalPeerIds } = globalResults || {};\n    const { peerIds: localPeerIds } = localResults || {};\n\n    return {\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalPeerIds,\n      localPeerIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport { selectTabState } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n  maxGroupSize?: number;\n};\n\nconst MAX_MEMBERS_FOR_GENERATE_CHAT_NAME = 4;\n\nconst NewChatStep2: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  memberIds,\n  maxGroupSize,\n  creationProgress,\n  creationError,\n  onReset,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  useEffect(() => {\n    if (isChannel) {\n      return;\n    }\n    if (!memberIds.length || memberIds.length > MAX_MEMBERS_FOR_GENERATE_CHAT_NAME) {\n      setTitle('');\n      return;\n    }\n    const global = getGlobal();\n    const usersById = global.users.byId;\n    const memberFirstNames = [global.currentUserId!, ...memberIds]\n      .map((userId) => getUserFirstOrLastName(usersById[userId]))\n      .filter(Boolean);\n    const generatedChatName = memberFirstNames.slice(0, -1).join(', ')\n      + lang('CreateGroup.PeersTitleLastDelimeter')\n      + memberFirstNames[memberFirstNames.length - 1];\n    setTitle(generatedChatName);\n  }, [isChannel, memberIds, lang]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (maxGroupSize && memberIds.length >= maxGroupSize) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, maxGroupSize, createGroupChat, photo]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n      isChannel: true,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n      maxGroupSize: global.config?.maxGroupSize,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/browser/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onReset,\n}) => {\n  const { openLeftColumnContent, setGlobalSearchQuery } = getActions();\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    openLeftColumnContent({\n      contentKey: isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2,\n    });\n  }, [isChannel]);\n\n  const changeSelectedMemberIdsHandler = useLastCallback((ids: string[]) => {\n    const isSelection = ids.length > newChatMemberIds.length;\n\n    setNewChatMemberIds(ids);\n    if (isSelection) {\n      setGlobalSearchQuery({ query: '' });\n    }\n  });\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={changeSelectedMemberIdsHandler}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FolderEditDispatch } from '../../hooks/reducers/useFoldersReducer';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { ANIMATION_DURATION } from '../story/helpers/ribbonAnimation';\n\nimport useForumPanelRender from '../../hooks/useForumPanelRender';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useLeftHeaderButtonRtlForumTransition from './main/hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport Icon from '../common/icons/Icon';\nimport StoryRibbon from '../story/StoryRibbon';\nimport StoryToggler from '../story/StoryToggler';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ChatList from './main/ChatList';\nimport ForumPanel from './main/ForumPanel';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isForumPanelOpen?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  onReset: () => void;\n  onTopicSearch: NoneToVoidFunction;\n  foldersDispatch: FolderEditDispatch;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({\n  isActive,\n  isForumPanelOpen,\n  archiveSettings,\n  isStoryRibbonShown,\n  onReset,\n  onTopicSearch,\n  foldersDispatch,\n}) => {\n  const { updateArchiveSettings } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleDisplayArchiveInChats = useLastCallback(() => {\n    updateArchiveSettings({ isHidden: false });\n  });\n\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(isForumPanelOpen);\n\n  const {\n    shouldRender: shouldRenderTitle,\n    transitionClassNames: titleClassNames,\n  } = useShowTransitionDeprecated(!isForumPanelOpen, undefined, undefined, false);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderStoryRibbon,\n    transitionClassNames: storyRibbonClassNames,\n    isClosing: isStoryRibbonClosing,\n  } = useShowTransitionDeprecated(\n    isStoryRibbonShown, undefined, undefined, '', false, ANIMATION_DURATION + ANIMATION_END_DELAY,\n  );\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className={buildClassName('left-header', !shouldRenderStoryRibbon && 'left-header-shadow')}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            isForumPanelVisible && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          onTransitionEnd={handleDropdownMenuTransitionEnd}\n        >\n          <Icon name=\"arrow-left\" />\n        </Button>\n        {shouldRenderTitle && <h3 className={titleClassNames}>{lang('ArchivedChats')}</h3>}\n        <div className=\"story-toggler-wrapper\">\n          <StoryToggler canShow isArchived />\n        </div>\n        {archiveSettings.isHidden && (\n          <DropdownMenu\n            className=\"archived-chats-more-menu\"\n            positionX=\"right\"\n            onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n          >\n            <MenuItem icon=\"archive-from-main\" onClick={handleDisplayArchiveInChats}>\n              {lang('lng_context_archive_to_list')}\n            </MenuItem>\n          </DropdownMenu>\n        )}\n      </div>\n      <div\n        className={buildClassName(\n          'chat-list-wrapper',\n          shouldRenderStoryRibbon && 'with-story-ribbon',\n          storyRibbonClassNames,\n        )}\n      >\n        {shouldRenderStoryRibbon && (\n          <StoryRibbon isArchived className=\"left-header-shadow\" isClosing={isStoryRibbonClosing} />\n        )}\n        <ChatList\n          folderType=\"archived\"\n          isActive={isActive}\n          isForumPanelOpen={isForumPanelVisible}\n          isMainList\n          foldersDispatch={foldersDispatch}\n          archiveSettings={archiveSettings}\n        />\n      </div>\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport { ALL_FOLDER_ID } from '../../config';\nimport buildClassName from '../../util/buildClassName';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\nimport Modal from '../ui/Modal';\n\nimport styles from './ChatFolderModal.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useOldLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.filter((folderId) => folderId !== ALL_FOLDER_ID)\n      .map((folderId) => {\n        const folder = foldersById ? foldersById[folderId] : undefined;\n        const label = folder ? renderTextWithEntities({\n          text: folder.title.text,\n          entities: folder.title.entities,\n          noCustomEmojiPlayback: folder.noTitleAnimations,\n        }) : '';\n        return {\n          label,\n          value: String(folderId),\n        };\n      }) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className={buildClassName(styles.root, 'delete')}\n      contentClassName={styles.modalContent}\n      title={lang('FilterAddTo')}\n    >\n      <div className={buildClassName(styles.main, 'custom-scroll')}>\n        <CheckboxGroup\n          options={folders}\n          selected={selectedFolderIds}\n          onChange={setSelectedFolderIds}\n        />\n      </div>\n      <div className={styles.footer}>\n        <div className=\"dialog-buttons\">\n          <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n            {lang('FilterAddTo')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"modalContent\":\"EG5lPWY1\",\"root\":\"_fJBBCCE\",\"main\":\"heYMHiUt\",\"footer\":\"_jtqAaUU\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { MAX_INT_32 } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport RadioGroup from '../ui/RadioGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  topicId?: number;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\nenum MuteDuration {\n  OneHour = '3600',\n  FourHours = '14400',\n  EightHours = '28800',\n  OneDay = '86400',\n  ThreeDays = '259200',\n  Forever = '-1',\n}\n\nconst MuteChatModal: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  topicId,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [muteUntilOption, setMuteUntilOption] = useState(MuteDuration.Forever);\n  const { updateChatMutedState, updateTopicMutedState } = getActions();\n\n  const lang = useOldLang();\n\n  const muteForOptions = useMemo(() => [\n    { label: lang('MuteFor.Hours', 1), value: MuteDuration.OneHour },\n    { label: lang('MuteFor.Hours', 4), value: MuteDuration.FourHours },\n    { label: lang('MuteFor.Hours', 8), value: MuteDuration.EightHours },\n    { label: lang('MuteFor.Days', 1), value: MuteDuration.OneDay },\n    { label: lang('MuteFor.Days', 3), value: MuteDuration.ThreeDays },\n    { label: lang('MuteFor.Forever'), value: MuteDuration.Forever },\n  ], [lang]);\n\n  const handleSubmit = useCallback(() => {\n    let mutedUntil: number;\n    if (muteUntilOption === MuteDuration.Forever) {\n      mutedUntil = MAX_INT_32;\n    } else {\n      mutedUntil = Math.floor(Date.now() / 1000) + Number(muteUntilOption);\n    }\n    if (topicId) {\n      updateTopicMutedState({ chatId, topicId, mutedUntil });\n    } else {\n      updateChatMutedState({ chatId, mutedUntil });\n    }\n    onClose();\n  }, [chatId, muteUntilOption, onClose, topicId]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('Notifications')}\n    >\n      <RadioGroup\n        className=\"dialog-checkbox-group\"\n        name=\"muteFor\"\n        options={muteForOptions}\n        selected={muteUntilOption}\n        onChange={setMuteUntilOption as any}\n      />\n      <div className=\"dialog-buttons\">\n        <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n          {lang('Common.Done')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(MuteChatModal);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { EMOJI_SIZE_MODAL, STICKER_SIZE_MODAL, TME_LINK_PREFIX } from '../../config';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectPeerPaidMessagesStars,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { copyTextToClipboard } from '../../util/clipboard';\nimport renderText from './helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useSchedule from '../../hooks/useSchedule';\nimport useScrolledState from '../../hooks/useScrolledState';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport Loading from '../ui/Loading';\nimport MenuItem from '../ui/MenuItem';\nimport Modal from '../ui/Modal';\nimport Icon from './icons/Icon';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  currentMessageList?: MessageList;\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n  shouldUpdateStickerSetOrder?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  isCurrentUserPremium,\n  shouldUpdateStickerSetOrder,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n    showNotification,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n\n  const { isMobile } = useAppLayout();\n\n  const prevStickerSet = usePreviousDeprecated(stickerSet);\n  const renderingStickerSet = stickerSet || prevStickerSet;\n\n  const isAdded = Boolean(!renderingStickerSet?.isArchived && renderingStickerSet?.installedDate);\n  const isEmoji = renderingStickerSet?.isEmoji;\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen && !renderingStickerSet?.stickers) {\n      loadStickers({\n        stickerSetInfo: fromSticker ? fromSticker.stickerSetInfo : { shortName: stickerSetShortName! },\n      });\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName, renderingStickerSet]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({\n          messageList: currentMessageList, sticker, isSilent, scheduledAt,\n        });\n        onClose();\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && isAdded,\n      });\n      onClose();\n    }\n  }, [currentMessageList, shouldSchedule, requestCalendar, onClose, shouldUpdateStickerSetOrder, isAdded]);\n\n  const handleButtonClick = useCallback(() => {\n    if (renderingStickerSet) {\n      toggleStickerSet({ stickerSetId: renderingStickerSet.id });\n      onClose();\n    }\n  }, [onClose, renderingStickerSet, toggleStickerSet]);\n\n  const handleCopyLink = useCallback(() => {\n    if (!renderingStickerSet) return;\n    const { shortName } = renderingStickerSet;\n    const suffix = isEmoji ? 'addemoji' : 'addstickers';\n    const url = `${TME_LINK_PREFIX}${suffix}/${shortName}`;\n    copyTextToClipboard(url);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [isEmoji, lang, renderingStickerSet, showNotification]);\n\n  const renderButtonText = () => {\n    if (!renderingStickerSet) return lang('Loading');\n\n    const suffix = isEmoji ? 'Emoji' : 'Sticker';\n\n    return lang(\n      isAdded ? `StickerPack.Remove${suffix}Count` : `StickerPack.Add${suffix}Count`,\n      renderingStickerSet.count,\n      'i',\n    );\n  };\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  function renderHeader() {\n    const fullClassName = buildClassName('modal-header', !shouldHideTopBorder && 'with-top-border');\n\n    return (\n      <div className={fullClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">\n          {renderingStickerSet ? renderText(renderingStickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n        </div>\n        <DropdownMenu\n          className=\"stickers-more-menu with-menu-transitions\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          <MenuItem icon=\"copy\" onClick={handleCopyLink}>{lang('StickersCopy')}</MenuItem>\n        </DropdownMenu>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className={buildClassName('StickerSetModal', isEmoji && 'custom-emoji')}\n      isOpen={isOpen}\n      onClose={onClose}\n      header={renderHeader()}\n    >\n      {renderingStickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\" onScroll={handleContentScroll}>\n            <div className=\"shared-canvas-container stickers-grid\">\n              <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n              {renderingStickerSet.stickers.map((sticker) => (\n                <StickerButton\n                  sticker={sticker}\n                  size={isEmoji ? EMOJI_SIZE_MODAL : STICKER_SIZE_MODAL}\n                  observeIntersection={observeIntersection}\n                  onClick={canSendStickers && !isEmoji ? handleSelect : undefined}\n                  clickArg={sticker}\n                  isSavedMessages={isSavedMessages}\n                  isCurrentUserPremium={isCurrentUserPremium}\n                  sharedCanvasRef={sharedCanvasRef}\n                />\n              ))}\n            </div>\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={isAdded ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {renderButtonText()}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const chatBot = chatId && selectBot(global, chatId);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n\n    const sendOptions = chat\n      ? getAllowedAttachmentOptions(chat, chatFullInfo, Boolean(chatBot), isSavedMessages)\n      : undefined;\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo)\n      && sendOptions?.canSendStickers,\n    );\n\n    const stickerSetInfo = fromSticker ? fromSticker.stickerSetInfo\n      : stickerSetShortName ? { shortName: stickerSetShortName } : undefined;\n\n    const stickerSet = stickerSetInfo ? selectStickerSet(global, stickerSetInfo) : undefined;\n    const paidMessagesStars = chatId ? selectPeerPaidMessagesStars(global, chatId) : undefined;\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: !paidMessagesStars && selectShouldSchedule(global),\n      stickerSet,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      shouldUpdateStickerSetOrder: global.settings.byKey.shouldUpdateStickerSetOrder,\n      currentMessageList,\n    };\n  },\n)(StickerSetModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nZYT4vJ3\",\"sets\":\"JzkmXjFF\"};","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiSticker } from '../../api/types';\n\nimport { selectCanPlayAnimatedEmojis } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Modal from '../ui/Modal';\nimport StickerSetCard from './StickerSetCard';\n\nimport styles from './CustomEmojiSetsModal.module.scss';\n\nexport type OwnProps = {\n  customEmojiSetIds?: string[];\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst CustomEmojiSetsModal: FC<OwnProps & StateProps> = ({\n  customEmojiSetIds,\n  canPlayAnimatedEmojis,\n  onClose,\n}) => {\n  const { openStickerSet } = getActions();\n  const lang = useOldLang();\n\n  const customEmojiSets = useMemo(() => {\n    return customEmojiSetIds?.map((id) => getGlobal().stickers.setsById[id]);\n  }, [customEmojiSetIds]);\n\n  const customEmojiModalRef = useRef<HTMLDivElement>();\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({\n    rootRef: customEmojiModalRef, isDisabled: !customEmojiSets,\n  });\n\n  const prevCustomEmojiSets = usePreviousDeprecated(customEmojiSets);\n  const renderingCustomEmojiSets = customEmojiSets || prevCustomEmojiSets;\n\n  const handleSetClick = useLastCallback((sticker: ApiSticker) => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  return (\n    <Modal\n      isOpen={Boolean(customEmojiSets)}\n      className={styles.root}\n      onClose={onClose}\n      hasCloseButton\n      title={lang('lng_custom_emoji_used_sets')}\n    >\n      <div className={buildClassName(styles.sets, 'custom-scroll')} ref={customEmojiModalRef} teactFastList>\n        {renderingCustomEmojiSets?.map((customEmojiSet) => {\n          return (\n            <StickerSetCard\n              key={customEmojiSet.id}\n              className={styles.setCard}\n              stickerSet={customEmojiSet}\n              onClick={handleSetClick}\n              observeIntersection={observeIntersectionForCovers}\n              noPlay={!canPlayAnimatedEmojis}\n            />\n          );\n        })}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(CustomEmojiSetsModal));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotCommand, ApiChat, ApiDisallowedGifts,\n} from '../../api/types';\nimport type { IAnchorPosition, ThreadId } from '../../types';\nimport type { IconName } from '../../types/icons';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  getCanAddContact,\n  getCanDeleteChat,\n  getCanManageTopic,\n  getHasAdminRight,\n  getIsSavedDialog,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport { getIsChatMuted } from '../../global/helpers/notifications';\nimport {\n  selectBot,\n  selectCanGift,\n  selectCanManage,\n  selectCanTranslateChat,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectIsCurrentUserFrozen,\n  selectIsRightColumnShown,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectTopic,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { disableScrolling } from '../../util/scrollLock';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport MuteChatModal from '../left/MuteChatModal.async';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MenuSeparator from '../ui/MenuSeparator';\nimport Portal from '../ui/Portal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: IconName; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canViewBoosts?: boolean;\n  canViewMonetization?: boolean;\n  canShowBoostModal?: boolean;\n  withForumActions?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  pendingJoinRequests?: number;\n  canTranslate?: boolean;\n  channelMonoforumId?: string;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onAsMessagesClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n  onJoinRequestsClick?: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  botPrivacyPolicyUrl?: string;\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  isTopic?: boolean;\n  isForum?: boolean;\n  isForumAsMessages?: true;\n  canAddContact?: boolean;\n  canDeleteChat?: boolean;\n  canReportChat?: boolean;\n  canGift?: boolean;\n  canCreateTopic?: boolean;\n  canEditTopic?: boolean;\n  hasLinkedChat?: boolean;\n  isChatInfoShown?: boolean;\n  isRightColumnShown?: boolean;\n  canManage?: boolean;\n  canTranslate?: boolean;\n  isBlocked?: boolean;\n  isBot?: boolean;\n  isChatWithSelf?: boolean;\n  savedDialog?: ApiChat;\n  disallowedGifts?: ApiDisallowedGifts;\n  isAccountFrozen?: boolean;\n};\n\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  botPrivacyPolicyUrl,\n  withForumActions,\n  isTopic,\n  isForum,\n  isForumAsMessages,\n  isChatInfoShown,\n  canStartBot,\n  canSubscribe,\n  canReportChat,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canViewMonetization,\n  canViewBoosts,\n  pendingJoinRequests,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canDeleteChat,\n  canGift,\n  hasLinkedChat,\n  canAddContact,\n  canCreateTopic,\n  canEditTopic,\n  canManage,\n  isRightColumnShown,\n  canTranslate,\n  isBlocked,\n  isBot,\n  isChatWithSelf,\n  savedDialog,\n  canShowBoostModal,\n  disallowedGifts,\n  isAccountFrozen,\n  channelMonoforumId,\n  onJoinRequestsClick,\n  onSubscribeChannel,\n  onSearchClick,\n  onAsMessagesClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    requestMasterAndJoinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    openFrozenAccountModal,\n    requestMasterAndRequestCall,\n    toggleStatistics,\n    openMonetizationStatistics,\n    openBoostStatistics,\n    openGiftModal,\n    openThreadWithInfo,\n    openCreateTopicPanel,\n    openEditTopicPanel,\n    openChat,\n    openUrl,\n    toggleManagement,\n    togglePeerTranslations,\n    blockUser,\n    unblockUser,\n    setViewForumAsMessages,\n    openBoostModal,\n    reportMessages,\n    showNotification,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { isMobile } = useAppLayout();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [shouldCloseFast, setShouldCloseFast] = useState(false);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isMuteModalOpen, setIsMuteModalOpen] = useState(false);\n  const [shouldRenderMuteModal, markRenderMuteModal, unmarkRenderMuteModal] = useFlag();\n  const { x, y } = anchor;\n\n  useShowTransitionDeprecated(isOpen, onCloseAnimationEnd, undefined, false);\n  const isViewGroupInfoShown = usePrevDuringAnimation(\n    (!isChatInfoShown && isForum) ? true : undefined, CLOSE_MENU_ANIMATION_DURATION,\n  );\n\n  const areAllGiftsDisallowed = useMemo(() => {\n    if (!disallowedGifts) {\n      return undefined;\n    }\n    return Object.values(disallowedGifts).every(Boolean);\n  }, [disallowedGifts]);\n\n  const closeMuteModal = useLastCallback(() => {\n    setIsMuteModalOpen(false);\n    onClose();\n  });\n\n  const handleReport = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      setIsMenuOpen(false);\n      reportMessages({ chatId, messageIds: [] });\n    }\n    onClose();\n  });\n\n  const handleDelete = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      onClose();\n    } else {\n      setIsDeleteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const closeMenu = useLastCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  });\n\n  const handleViewGroupInfo = useLastCallback(() => {\n    openThreadWithInfo({ chatId, threadId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const closeDeleteModal = useLastCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      sendBotCommand({ command: '/start' });\n    }\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      restartBot({ chatId });\n    }\n  });\n\n  const handleUnmuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      updateChatMutedState({ chatId, isMuted: false });\n    }\n    closeMenu();\n  });\n\n  const handleMuteClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n      closeMenu();\n    } else {\n      markRenderMuteModal();\n      setIsMuteModalOpen(true);\n    }\n    setIsMenuOpen(false);\n  });\n\n  const handleCreateTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openCreateTopicPanel({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      toggleManagement({ force: true });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleEditTopicClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openEditTopicPanel({ chatId, topicId: Number(threadId) });\n      setShouldCloseFast(!isRightColumnShown);\n    }\n    closeMenu();\n  });\n\n  const handleViewAsTopicsClick = useLastCallback(() => {\n    openChat({ id: undefined });\n    setViewForumAsMessages({ chatId, isEnabled: false });\n    closeMenu();\n  });\n\n  const handleEnterVoiceChatClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canCreateVoiceChat) {\n      // TODO Show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      requestMasterAndJoinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  });\n\n  const handleLinkedChatClick = useLastCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  });\n\n  const handleGiftClick = useLastCallback(() => {\n    if (areAllGiftsDisallowed && chat) {\n      showNotification({ message: lang('SendDisallowError') });\n      return;\n    }\n    openGiftModal({ forUserId: chatId });\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openGiftModal({ forUserId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleAddContactClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      openAddContactDialog({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSubscribe = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      onSubscribeChannel();\n    }\n    closeMenu();\n  });\n\n  const handleVideoCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId, isVideo: true });\n    }\n    closeMenu();\n  });\n\n  const handleCall = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      requestMasterAndRequestCall({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSearch = useLastCallback(() => {\n    onSearchClick();\n    closeMenu();\n  });\n\n  const handleStatisticsClick = useLastCallback(() => {\n    toggleStatistics();\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleMonetizationClick = useLastCallback(() => {\n    openMonetizationStatistics({ chatId });\n    setShouldCloseFast(!isRightColumnShown);\n    closeMenu();\n  });\n\n  const handleBoostClick = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else if (canViewBoosts) {\n      openBoostStatistics({ chatId });\n      setShouldCloseFast(!isRightColumnShown);\n    } else {\n      openBoostModal({ chatId });\n    }\n    closeMenu();\n  });\n\n  const handleEnableTranslations = useLastCallback(() => {\n    togglePeerTranslations({ chatId, isEnabled: true });\n    closeMenu();\n  });\n\n  const handleSelectMessages = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      enterMessageSelectMode();\n    }\n    closeMenu();\n  });\n\n  const handleOpenAsMessages = useLastCallback(() => {\n    onAsMessagesClick();\n    closeMenu();\n  });\n\n  const handleBlock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      blockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    if (isAccountFrozen) {\n      openFrozenAccountModal();\n    } else {\n      unblockUser({ userId: chatId });\n    }\n    closeMenu();\n  });\n\n  const handleSendChannelMessage = useLastCallback(() => {\n    openChat({ id: channelMonoforumId });\n    closeMenu();\n  });\n\n  useEffect(disableScrolling, []);\n\n  const botButtons = useMemo(() => {\n    const commandButtons = botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n\n          onClick={handleClick}\n        >\n          {oldLang(cmd.label)}\n        </MenuItem>\n      );\n    });\n\n    const hasPrivacyCommand = botCommands?.some(({ command }) => command === 'privacy');\n\n    const privacyButton = isBot && (\n      <MenuItem\n        icon=\"privacy-policy\"\n\n        onClick={() => {\n          if (hasPrivacyCommand && !botPrivacyPolicyUrl) {\n            sendBotCommand({ command: '/privacy' });\n          } else {\n            openUrl({ url: botPrivacyPolicyUrl || oldLang('BotDefaultPrivacyPolicy') });\n          }\n          closeMenu();\n        }}\n      >\n        {oldLang('BotPrivacyPolicy')}\n      </MenuItem>\n    );\n\n    return [...commandButtons || [], privacyButton].filter(Boolean);\n  }, [botCommands, oldLang, botPrivacyPolicyUrl, isBot]);\n\n  const deleteTitle = useMemo(() => {\n    if (!chat) return undefined;\n\n    if (savedDialog) {\n      return oldLang('Delete');\n    }\n\n    if (isPrivate) {\n      return oldLang('DeleteChatUser');\n    }\n\n    if (canDeleteChat) {\n      return oldLang('GroupInfo.DeleteAndExit');\n    }\n\n    if (isChannel) {\n      return oldLang('LeaveChannel');\n    }\n\n    return oldLang('Group.LeaveGroup');\n  }, [canDeleteChat, chat, isChannel, isPrivate, savedDialog, oldLang]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n          shouldCloseFast={shouldCloseFast}\n        >\n          {isMobile && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {oldLang('Search')}\n            </MenuItem>\n          )}\n          {withForumActions && canCreateTopic && (\n            <>\n              <MenuItem\n                icon=\"comments\"\n                onClick={handleCreateTopicClick}\n              >\n                {oldLang('lng_forum_create_topic')}\n              </MenuItem>\n              <MenuSeparator />\n            </>\n          )}\n          {channelMonoforumId && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleSendChannelMessage}\n            >\n              {lang('ChannelSendMessage')}\n            </MenuItem>\n          )}\n          {isViewGroupInfoShown && (\n            <MenuItem\n              icon=\"info\"\n              onClick={handleViewGroupInfo}\n            >\n              {isTopic ? oldLang('lng_context_view_topic') : oldLang('lng_context_view_group')}\n            </MenuItem>\n          )}\n          {canManage && !canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditClick}\n            >\n              {oldLang('Edit')}\n            </MenuItem>\n          )}\n          {canEditTopic && (\n            <MenuItem\n              icon=\"edit\"\n              onClick={handleEditTopicClick}\n            >\n              {oldLang('lng_forum_topic_edit')}\n            </MenuItem>\n          )}\n          {isMobile && !withForumActions && isForum && !isTopic && (\n            <MenuItem\n              icon=\"forums\"\n              onClick={handleViewAsTopicsClick}\n            >\n              {oldLang('Chat.ContextViewAsTopics')}\n            </MenuItem>\n          )}\n          {withForumActions && Boolean(pendingJoinRequests) && (\n            <MenuItem\n              icon=\"user\"\n              onClick={onJoinRequestsClick}\n            >\n              {isChannel ? oldLang('SubscribeRequests') : oldLang('MemberRequests')}\n              <div className=\"right-badge\">{pendingJoinRequests}</div>\n            </MenuItem>\n          )}\n          {withForumActions && !isTopic && !isForumAsMessages && (\n            <MenuItem\n              icon=\"message\"\n              onClick={handleOpenAsMessages}\n            >\n              {oldLang('lng_forum_view_as_messages')}\n            </MenuItem>\n          )}\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {oldLang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {oldLang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canShowBoostModal && !canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang(isChannel ? 'BoostingBoostChannelMenu' : 'BoostingBoostGroupMenu')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {oldLang('AddContact')}\n            </MenuItem>\n          )}\n          {isMobile && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {oldLang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {oldLang('VideoCall')}\n            </MenuItem>\n          )}\n          {canMute && (isMuted ? (\n            <MenuItem\n              icon=\"unmute\"\n              onClick={handleUnmuteClick}\n            >\n              {oldLang('ChatsUnmute')}\n            </MenuItem>\n          )\n            : (\n              <MenuItem\n                icon=\"mute\"\n                onClick={handleMuteClick}\n              >\n                {oldLang('ChatsMute')}\n                ...\n              </MenuItem>\n            )\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {oldLang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {oldLang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          {!withForumActions && (\n            <MenuItem\n              icon=\"select\"\n              onClick={handleSelectMessages}\n            >\n              {oldLang('ReportSelectMessages')}\n            </MenuItem>\n          )}\n          {canViewBoosts && (\n            <MenuItem\n              icon=\"boost-outline\"\n              onClick={handleBoostClick}\n            >\n              {oldLang('Boosts')}\n            </MenuItem>\n          )}\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {oldLang('Statistics')}\n            </MenuItem>\n          )}\n          {isChannel && canViewMonetization && (\n            <MenuItem\n              icon=\"cash-circle\"\n              onClick={handleMonetizationClick}\n            >\n              {oldLang('lng_channel_earn_title')}\n            </MenuItem>\n          )}\n          {canTranslate && (\n            <MenuItem\n              icon=\"language\"\n              onClick={handleEnableTranslations}\n            >\n              {oldLang('lng_context_translate')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {oldLang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canGift && (\n            <MenuItem\n              icon=\"gift\"\n              onClick={handleGiftClick}\n            >\n              {oldLang('ProfileSendAGift')}\n            </MenuItem>\n          )}\n          {isBot && (\n            <MenuItem\n              icon={isBlocked ? 'bots' : 'hand-stop'}\n              onClick={isBlocked ? handleRestartBot : handleBlock}\n            >\n              {isBlocked ? oldLang('BotRestart') : oldLang('Bot.Stop')}\n            </MenuItem>\n          )}\n          {isPrivate && !isChatWithSelf && !isBot && (\n            <MenuItem\n              icon={isBlocked ? 'user' : 'hand-stop'}\n              onClick={isBlocked ? handleUnblock : handleBlock}\n            >\n              {isBlocked ? oldLang('Unblock') : oldLang('BlockUser')}\n            </MenuItem>\n          )}\n          {canLeave && (\n            <>\n              <MenuSeparator />\n              <MenuItem\n                destructive\n                icon=\"delete\"\n                onClick={handleDelete}\n              >\n                {deleteTitle}\n              </MenuItem>\n            </>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={savedDialog || chat}\n            isSavedDialog={Boolean(savedDialog)}\n          />\n        )}\n        {canMute && shouldRenderMuteModal && chat?.id && (\n          <MuteChatModal\n            isOpen={isMuteModalOpen}\n            onClose={closeMuteModal}\n            onCloseAnimationEnd={unmarkRenderMuteModal}\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const isMainThread = threadId === MAIN_THREAD_ID;\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global) || {};\n    const canReportChat = isMainThread && !user && (isChatChannel(chat) || isChatGroup(chat)) && !isChatAdmin(chat);\n\n    const chatBot = !isSystemBot(chatId) ? selectBot(global, chatId) : undefined;\n    const userFullInfo = isPrivate ? selectUserFullInfo(global, chatId) : undefined;\n    const chatFullInfo = !isPrivate ? selectChatFullInfo(global, chatId) : undefined;\n    const fullInfo = userFullInfo || chatFullInfo;\n    const canGift = selectCanGift(global, chatId);\n\n    const topic = selectTopic(global, chatId, threadId);\n    const canCreateTopic = chat.isForum && (\n      chat.isCreator || !isUserRightBanned(chat, 'manageTopics') || getHasAdminRight(chat, 'manageTopics')\n    );\n    const canEditTopic = topic && getCanManageTopic(chat, topic);\n    const canManage = selectCanManage(global, chatId);\n    // Context menu item should only be displayed if user hid translation panel\n    const canTranslate = selectCanTranslateChat(global, chatId) && fullInfo?.isTranslationDisabled;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const savedDialog = isSavedDialog ? selectChat(global, String(threadId)) : undefined;\n    const isAccountFrozen = selectIsCurrentUserFrozen(global);\n\n    return {\n      chat,\n      isMuted: getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id)),\n      isPrivate,\n      isTopic: chat?.isForum && !isMainThread,\n      isForum: chat?.isForum,\n      isForumAsMessages: chat?.isForumAsMessages,\n      canAddContact,\n      canDeleteChat: getCanDeleteChat(chat),\n      canReportChat,\n      canGift,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      botCommands: chatBot ? userFullInfo?.botInfo?.commands : undefined,\n      botPrivacyPolicyUrl: chatBot ? userFullInfo?.botInfo?.privacyPolicyUrl : undefined,\n      isChatInfoShown: selectTabState(global).isChatInfoShown\n        && currentChatId === chatId && currentThreadId === threadId,\n      canCreateTopic,\n      canEditTopic,\n      canManage,\n      isRightColumnShown: selectIsRightColumnShown(global),\n      canTranslate,\n      isBlocked: userFullInfo?.isBlocked,\n      isBot: Boolean(chatBot),\n      isChatWithSelf,\n      savedDialog,\n      disallowedGifts: userFullInfo?.disallowedGifts,\n      isAccountFrozen,\n    };\n  },\n)(HeaderMenuContainer));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vv5ppXel\",\"active\":\"FVgqrSSK\",\"info\":\"DboxqiZd\",\"topRow\":\"Ymu2m1PR\",\"meta\":\"A2rsvUBm\",\"subtitle\":\"qUzmwaIn\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { ApiChat, ApiMessage, ApiPeer } from '../../../api/types';\n\nimport { getMessageSenderName } from '../../../global/helpers/peers';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport LastMessageMeta from '../../common/LastMessageMeta';\nimport MessageSummary from '../../common/MessageSummary';\n\nimport styles from './MiddleSearchResult.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  message: ApiMessage;\n  senderPeer?: ApiPeer;\n  messageChat?: ApiChat;\n  shouldShowChat?: boolean;\n  query?: string;\n  className?: string;\n  onClick: (message: ApiMessage) => void;\n};\n\nconst TRUNCATE_LENGTH = 200;\n\nconst MiddleSearchResult = ({\n  isActive,\n  message,\n  senderPeer,\n  messageChat,\n  shouldShowChat,\n  query,\n  className,\n  onClick,\n}: OwnProps) => {\n  const lang = useOldLang();\n  const hiddenForwardTitle = message.forwardInfo?.hiddenUserName;\n\n  const peer = shouldShowChat ? messageChat : senderPeer;\n\n  const senderName = shouldShowChat && senderPeer ? getMessageSenderName(lang, message.chatId, senderPeer) : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(message);\n  });\n\n  return (\n    <div\n      role=\"button\"\n      tabIndex={0}\n      className={buildClassName(styles.root, isActive && styles.active, className)}\n      onClick={handleClick}\n    >\n      <Avatar\n        className={styles.avatar}\n        peer={peer}\n        text={hiddenForwardTitle}\n        size=\"medium\"\n      />\n      <div className={styles.info}>\n        <div className={styles.topRow}>\n          {(peer && <FullNameTitle peer={peer} withEmojiStatus />) || hiddenForwardTitle}\n          <LastMessageMeta className={styles.meta} message={message} />\n        </div>\n        <div className={styles.subtitle} dir=\"auto\">\n          {senderName && (\n            <>\n              <span className=\"sender-name\">{renderText(senderName)}</span>\n              <span className=\"colon\">:</span>\n            </>\n          )}\n          <MessageSummary message={message} highlight={query} truncateLength={TRUNCATE_LENGTH} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MiddleSearchResult);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FTMljUuX\",\"header\":\"OvmjSMwA\",\"active\":\"DEIUzXQd\",\"avatar\":\"mp1PmoMq\",\"input\":\"z2K8Q7ib\",\"mobile\":\"u0fb78AA\",\"focused\":\"dqF8dYNx\",\"withDropdown\":\"AqhBggrp\",\"adaptSearchBorders\":\"Q9RZQaTu\",\"dropdown\":\"MFGvbICO\",\"dropdownHidden\":\"Alee0CKy\",\"results\":\"RtfTOE72\",\"placeholder\":\"O1HoZFge\",\"separator\":\"_Yy43QLl\",\"savedTags\":\"BcvAfv1E\",\"wrap\":\"JkESCST6\",\"searchTags\":\"rO3pH3LI\",\"savedSearchTag\":\"qA4gov4D\",\"hash\":\"q5NOmUAM\",\"searchTypes\":\"rVYZG__K\",\"searchType\":\"nE1Xwoo7\",\"selectedType\":\"i29dP8iT\",\"footer\":\"jyS1l9yn\",\"keyboard-visible\":\"ao05jKHW\",\"keyboardVisible\":\"ao05jKHW\",\"counter\":\"NmmL_cO3\",\"mobileNavigation\":\"dLO1hlHU\",\"navigationButton\":\"Z4vLAlsu\",\"navigationDisabled\":\"IqA7R2xO\",\"jumpIn\":\"n9kXbTu6\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect,\n  useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiReaction, ApiReactionKey, ApiSavedReactionTag,\n} from '../../../api/types';\nimport type {\n  CustomPeer, MiddleSearchParams, MiddleSearchType, ThreadId,\n} from '../../../types';\n\nimport { ANONYMOUS_USER_ID } from '../../../config';\nimport { requestMeasure, requestMutation, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog, getReactionKey, isSameReaction, isSystemBot,\n} from '../../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectForwardedSender,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectMonoforumChannel,\n  selectSender,\n  selectTabState,\n} from '../../../global/selectors';\nimport { IS_IOS } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport { getSearchResultKey, parseSearchResultKey, type SearchResultKey } from '../../../util/keys/searchResultKey';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { debounce, fastRaf } from '../../../util/schedulers';\n\nimport { useClickOutside } from '../../../hooks/events/useOutsideClick';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PeerChip from '../../common/PeerChip';\nimport Button from '../../ui/Button';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport SearchInput from '../../ui/SearchInput';\nimport SavedTagButton from '../message/reactions/SavedTagButton';\nimport MiddleSearchResult from './MiddleSearchResult';\n\nimport styles from './MiddleSearch.module.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  monoforumChat?: ApiChat;\n  threadId?: ThreadId;\n  requestedQuery?: string;\n  savedTags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  savedTag?: ApiReaction;\n  totalCount?: number;\n  lastSearchQuery?: string;\n  foundIds?: SearchResultKey[];\n  isHistoryCalendarOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n  isSavedMessages?: boolean;\n  fetchingQuery?: string;\n  isHashtagQuery?: boolean;\n  searchType?: MiddleSearchType;\n  currentUserId?: string;\n};\n\nconst CHANNELS_PEER: CustomPeer = {\n  isCustomPeer: true,\n  avatarIcon: 'channel-filled',\n  titleKey: 'SearchPublicPosts',\n};\nconst FOCUSED_SEARCH_TRIGGER_OFFSET = 5;\nconst HIDE_TIMEOUT = 200;\nconst RESULT_ITEM_CLASS_NAME = 'MiddleSearchResult';\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MiddleSearch: FC<StateProps> = ({\n  isActive,\n  chat,\n  monoforumChat,\n  threadId,\n  requestedQuery,\n  savedTags,\n  savedTag,\n  totalCount,\n  lastSearchQuery,\n  foundIds,\n  isHistoryCalendarOpen,\n  isCurrentUserPremium,\n  isSavedMessages,\n  fetchingQuery,\n  isHashtagQuery,\n  searchType = 'chat',\n  currentUserId,\n}) => {\n  const {\n    updateMiddleSearch,\n    resetMiddleSearch,\n    performMiddleSearch,\n    focusMessage,\n    closeMiddleSearch,\n    openHistoryCalendar,\n    openPremiumModal,\n    loadSavedReactionTags,\n  } = getActions();\n\n  const ref = useRef<HTMLDivElement>();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n  const shouldCancelSearchRef = useRef(false);\n\n  const { isMobile } = useAppLayout();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [query, setQuery] = useState(requestedQuery || '');\n  const [focusedIndex, setFocusedIndex] = useState(0);\n  const canFocusNewer = foundIds && focusedIndex > 0;\n  const canFocusOlder = foundIds && focusedIndex < foundIds.length - 1;\n\n  const [isFullyHidden, setIsFullyHidden] = useState(!isActive);\n  const hiddenTimerRef = useRef<number>();\n  const maybeLongPressActiveRef = useRef(true);\n\n  const [isFocused, markFocused, markBlurred] = useFlag();\n  const [isViewAsList, setIsViewAsList] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    if (maybeLongPressActiveRef.current) return;\n    // Ignore clicks inside modals\n    if ((event.target as HTMLElement).closest('.Modal')) return;\n    markBlurred();\n  });\n  useClickOutside([ref], handleClickOutside);\n\n  const hasResultsContainer = Boolean((query && foundIds) || isHashtagQuery);\n  const isOnlyHash = isHashtagQuery && !query;\n  const areResultsEmpty = Boolean(query && foundIds && !foundIds.length && !isLoading && !isOnlyHash);\n  const hasResultsPlaceholder = areResultsEmpty || isOnlyHash;\n  const isNonFocusedDropdownForced = searchType === 'myChats' || searchType === 'channels';\n  const hasResultsDropdown = isActive && (isViewAsList || !isMobile) && (isFocused || isNonFocusedDropdownForced)\n    && Boolean(\n      hasResultsContainer || hasResultsPlaceholder || savedTags,\n    );\n\n  const hasQueryData = Boolean((query && !isOnlyHash) || savedTag);\n  const hasNavigationButtons = searchType === 'chat' && Boolean(foundIds?.length);\n\n  const handleClose = useLastCallback(() => {\n    closeMiddleSearch();\n  });\n\n  const focusInput = useLastCallback(() => {\n    requestMeasure(() => {\n      inputRef.current?.focus();\n    });\n  });\n\n  const blurInput = useLastCallback(() => {\n    inputRef.current?.blur();\n  });\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n\n        requestMutation(() => {\n          mainEl.style.transform = `translateY(${pageTop}px)`;\n          mainEl.style.height = `${height}px`;\n          document.documentElement.scrollTop = pageTop;\n        });\n      } else {\n        requestMutation(() => {\n          mainEl.style.transform = '';\n          mainEl.style.height = '';\n        });\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Reset focus on query result\n  useEffect(() => {\n    setFocusedIndex(-1);\n  }, [lastSearchQuery]);\n\n  // Disable native up/down buttons on iOS\n  useLayoutEffect(() => {\n    if (!IS_IOS) return;\n\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n      setIsViewAsList(true);\n      setFocusedIndex(0);\n      setQuery('');\n      hiddenTimerRef.current = window.setTimeout(() => setIsFullyHidden(true), HIDE_TIMEOUT);\n    } else {\n      setIsFullyHidden(false);\n      clearTimeout(hiddenTimerRef.current);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (!requestedQuery || !chat?.id) return;\n    setQuery(requestedQuery);\n    updateMiddleSearch({ chatId: chat.id, threadId, update: { requestedQuery: undefined } });\n    setIsLoading(true);\n\n    requestNextMutation(() => {\n      const input = inputRef.current;\n      if (!input) return;\n      focusEditableElement(input, true, true);\n      markFocused();\n    });\n  }, [chat?.id, requestedQuery, threadId]);\n\n  useEffectWithPrevDeps(([prevIsActive]) => {\n    if (isActive !== prevIsActive && !query && lastSearchQuery) {\n      setQuery(lastSearchQuery); // Restore query when returning back\n    }\n  }, [isActive, lastSearchQuery, query]);\n\n  useEffectWithPrevDeps(([prevIsCalendarOpen]) => {\n    if (!isActive || prevIsCalendarOpen === isHistoryCalendarOpen) return;\n    if (isHistoryCalendarOpen) {\n      blurInput();\n      markBlurred();\n    } else {\n      focusInput();\n    }\n  }, [isHistoryCalendarOpen, isActive]);\n\n  const handleReset = useLastCallback(() => {\n    if (!query?.length && !savedTag) {\n      handleClose();\n      return;\n    }\n\n    setQuery('');\n    setIsLoading(false);\n    resetMiddleSearch();\n    focusInput();\n  });\n\n  useEffect(() => (isActive ? captureEscKeyListener(handleReset) : undefined), [isActive, handleClose]);\n\n  const savedTagsArray = useMemo(() => {\n    if (!savedTags) return undefined;\n    return Object.values(savedTags);\n  }, [savedTags]);\n\n  const hasSavedTags = Boolean(savedTagsArray?.length);\n  const areSavedTagsDisabled = hasSavedTags && !isCurrentUserPremium;\n\n  useEffect(() => {\n    if (isSavedMessages && isActive) loadSavedReactionTags();\n  }, [isSavedMessages, isActive]);\n\n  const handleSearch = useLastCallback(() => {\n    const chatId = chat?.id;\n    if (!chatId) {\n      return;\n    }\n\n    runDebouncedForSearch(() => {\n      if (shouldCancelSearchRef.current) return;\n      performMiddleSearch({ chatId, threadId, query });\n    });\n  });\n\n  const handleQueryChange = useLastCallback((newQuery: string) => {\n    shouldCancelSearchRef.current = false;\n\n    if (newQuery.startsWith('#') && !isHashtagQuery) {\n      updateMiddleSearch({ chatId: chat!.id, threadId, update: { isHashtag: true } });\n      setQuery(newQuery.slice(1));\n      handleSearch();\n      return;\n    }\n\n    setQuery(newQuery);\n\n    if (!newQuery) {\n      setIsLoading(false);\n      resetMiddleSearch();\n      shouldCancelSearchRef.current = true;\n    }\n  });\n\n  useEffect(() => {\n    if (query) {\n      handleSearch();\n    }\n  }, [query]);\n\n  useEffect(() => {\n    setIsLoading(Boolean(fetchingQuery));\n  }, [fetchingQuery]);\n\n  useEffect(() => {\n    if (!foundIds?.length) return;\n    const isClose = foundIds.length - focusedIndex < FOCUSED_SEARCH_TRIGGER_OFFSET;\n    if (isClose) {\n      handleSearch();\n    }\n  }, [focusedIndex, foundIds?.length]);\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    maybeLongPressActiveRef.current = true;\n\n    function focus() {\n      inputRef.current?.focus();\n      markFocused();\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    function removeListeners() {\n      window.removeEventListener('touchend', focus);\n      window.removeEventListener('mouseup', focus);\n\n      fastRaf(() => {\n        maybeLongPressActiveRef.current = false;\n      });\n    }\n\n    window.addEventListener('touchend', focus);\n    window.addEventListener('mouseup', focus);\n\n    window.addEventListener('touchstart', removeListeners);\n    window.addEventListener('mousedown', removeListeners);\n\n    return () => {\n      removeListeners();\n      window.removeEventListener('touchstart', removeListeners);\n      window.removeEventListener('mousedown', removeListeners);\n    };\n  }, [isActive]);\n\n  useHistoryBack({\n    isActive,\n    onBack: handleClose,\n  });\n\n  const [viewportIds, getMore, viewportOffset = 0] = useInfiniteScroll(handleSearch, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if ((!query && !savedTag) || !viewportIds?.length) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const global = getGlobal();\n\n    return viewportIds.map((searchResultKey) => {\n      const [chatId, id] = parseSearchResultKey(searchResultKey);\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return undefined;\n      }\n\n      const originalSender = (isSavedMessages || isSystemBot(chatId) || chatId === ANONYMOUS_USER_ID)\n        ? selectForwardedSender(global, message) : undefined;\n      const messageSender = selectSender(global, message);\n      const messageChat = selectChat(global, message.chatId);\n\n      const senderPeer = originalSender || messageSender;\n\n      return {\n        searchResultKey,\n        message,\n        messageChat,\n        senderPeer,\n      };\n    }).filter(Boolean);\n  }, [query, savedTag, viewportIds, isSavedMessages]);\n\n  const handleMessageClick = useLastCallback((message: ApiMessage) => {\n    const searchResultKey = getSearchResultKey(message);\n    const index = foundIds?.indexOf(searchResultKey) || 0;\n    const realIndex = index + viewportOffset;\n    setFocusedIndex(realIndex);\n\n    if (searchType === 'chat') {\n      setIsViewAsList(false);\n    }\n\n    focusMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      threadId: !isHashtagQuery ? threadId : undefined,\n    });\n\n    markBlurred();\n  });\n\n  const handleTriggerViewStyle = useLastCallback(() => {\n    setIsViewAsList((prev) => !prev);\n    markFocused();\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, hasResultsContainer, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      handleMessageClick(foundResult.message);\n      setFocusedIndex(index + viewportOffset);\n    }\n  }, `.${RESULT_ITEM_CLASS_NAME}`, true);\n\n  const updateSearchParams = useLastCallback((update: Partial<MiddleSearchParams>) => {\n    updateMiddleSearch({ chatId: chat!.id, threadId, update });\n\n    handleSearch();\n  });\n\n  const activateSearchTag = useLastCallback((tag: ApiReaction) => {\n    if (areSavedTagsDisabled) {\n      openPremiumModal({\n        initialSection: 'saved_tags',\n      });\n      return;\n    }\n\n    updateSearchParams({ savedTag: tag });\n  });\n\n  const removeSearchSavedTag = useLastCallback(() => {\n    updateSearchParams({ savedTag: undefined });\n  });\n\n  const handleDeleteTag = useLastCallback(() => {\n    if (isHashtagQuery) {\n      updateSearchParams({ isHashtag: false });\n      return;\n    }\n\n    if (savedTag) {\n      removeSearchSavedTag();\n    }\n  });\n\n  const handleChangeSearchType = useLastCallback((type: MiddleSearchType) => {\n    updateSearchParams({ type });\n    setIsViewAsList(true);\n  });\n\n  const handleFocusOlder = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  const handleFocusNewer = useLastCallback(() => {\n    if (searchType !== 'chat') return;\n    markBlurred();\n    blurInput();\n    if (foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      const [chatId, messageId] = parseSearchResultKey(foundIds[newFocusIndex]);\n      focusMessage({ chatId, messageId, threadId });\n      setFocusedIndex(newFocusIndex);\n    }\n  });\n\n  function renderTypeTag(type: MiddleSearchType, isForTag?: boolean) {\n    const isSelected = !isForTag && searchType === type;\n    switch (type) {\n      case 'chat':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={chat?.id}\n            title={oldLang('SearchThisChat')}\n            clickArg=\"chat\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'myChats':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            peerId={currentUserId}\n            forceShowSelf\n            title={oldLang('SearchMyMessages')}\n            clickArg=\"myChats\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n      case 'channels':\n        return (\n          <PeerChip\n            className={buildClassName(styles.searchType, isSelected && styles.selectedType)}\n            customPeer={CHANNELS_PEER}\n            title={oldLang('SearchPublicPosts')}\n            clickArg=\"channels\"\n            onClick={isForTag ? handleDeleteTag : handleChangeSearchType}\n          />\n        );\n    }\n    return undefined;\n  }\n\n  function renderDropdown() {\n    return (\n      <div className={buildClassName(styles.dropdown, !hasResultsDropdown && styles.dropdownHidden)}>\n        {!isMobile && <div className={styles.separator} />}\n        {hasSavedTags && !isHashtagQuery && (\n          <div\n            className={buildClassName(\n              styles.savedTags,\n              !isMobile && styles.wrap,\n              'no-scrollbar',\n            )}\n          >\n            {savedTagsArray.map((tag) => {\n              const isChosen = isSameReaction(tag.reaction, savedTag);\n              return (\n                <SavedTagButton\n                  containerId=\"local-search\"\n                  key={getReactionKey(tag.reaction)}\n                  reaction={tag.reaction}\n                  tag={tag}\n                  withCount\n                  isDisabled={areSavedTagsDisabled}\n                  isChosen={isChosen}\n                  onClick={isChosen ? removeSearchSavedTag : activateSearchTag}\n                />\n              );\n            })}\n          </div>\n        )}\n        {isHashtagQuery && (\n          <div\n            className={buildClassName(styles.searchTypes, 'no-scrollbar')}\n          >\n            {renderTypeTag('chat')}\n            {renderTypeTag('myChats')}\n            {renderTypeTag('channels')}\n          </div>\n        )}\n        {hasResultsContainer && (\n          <InfiniteScroll\n            ref={containerRef}\n            className={buildClassName(styles.results, 'custom-scroll')}\n            items={viewportResults}\n            itemSelector={`.${RESULT_ITEM_CLASS_NAME}`}\n            preloadBackwards={0}\n            onLoadMore={getMore}\n            onKeyDown={handleKeyDown}\n          >\n            {areResultsEmpty && (\n              <span key=\"nothing\" className={styles.placeholder}>\n                {oldLang('NoResultFoundFor', query)}\n              </span>\n            )}\n            {isOnlyHash && (\n              <span key=\"enterhash\" className={styles.placeholder}>\n                {oldLang('HashtagSearchPlaceholder')}\n              </span>\n            )}\n            {viewportResults?.map(({\n              message, senderPeer, messageChat, searchResultKey,\n            }, i) => (\n              <MiddleSearchResult\n                key={searchResultKey}\n                teactOrderKey={-message.date}\n                className={RESULT_ITEM_CLASS_NAME}\n                query={query}\n                message={message}\n                senderPeer={senderPeer}\n                messageChat={messageChat}\n                shouldShowChat={isHashtagQuery}\n                isActive={focusedIndex - viewportOffset === i}\n                onClick={handleMessageClick}\n              />\n            ))}\n          </InfiniteScroll>\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div\n      id=\"MiddleSearch\"\n      className={buildClassName(\n        styles.root,\n        isActive && styles.active,\n        !isActive && isFullyHidden && 'visually-hidden', // `display: none` would prevent focus on iOS\n        isFocused && styles.focused,\n        isMobile && styles.mobile,\n      )}\n      ref={ref}\n    >\n      <div className={styles.header}>\n        {!isMobile && (\n          <Avatar\n            className={styles.avatar}\n            peer={monoforumChat || chat}\n            size=\"medium\"\n            isSavedMessages={isSavedMessages}\n          />\n        )}\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          className={buildClassName(\n            styles.input,\n            hasResultsDropdown && styles.withDropdown,\n            hasResultsDropdown && !isMobile && styles.adaptSearchBorders,\n          )}\n          canClose={!isMobile}\n          isLoading={isLoading}\n          resultsItemSelector={`.${styles.results} .${RESULT_ITEM_CLASS_NAME}`}\n          hasUpButton={hasNavigationButtons && !isMobile}\n          hasDownButton={hasNavigationButtons && !isMobile}\n          placeholder={isHashtagQuery ? oldLang('SearchHashtagsHint') : oldLang('Search')}\n          teactExperimentControlled\n          onChange={handleQueryChange}\n          onStartBackspace={handleDeleteTag}\n          onReset={handleReset}\n          withBackIcon={isMobile}\n          onFocus={markFocused}\n          focused={isFocused}\n          onUpClick={canFocusOlder ? handleFocusOlder : undefined}\n          onDownClick={canFocusNewer ? handleFocusNewer : undefined}\n        >\n          <div className={styles.searchTags}>\n            {savedTag && (\n              <SavedTagButton\n                containerId=\"local-search-tags\"\n                className={styles.savedSearchTag}\n                reaction={savedTag}\n                tag={savedTags![getReactionKey(savedTag)]}\n                onClick={removeSearchSavedTag}\n              />\n            )}\n            {isHashtagQuery && <div className={styles.hash}>#</div>}\n          </div>\n          {!isMobile && renderDropdown()}\n        </SearchInput>\n        {!isMobile && (\n          <div className={styles.icons}>\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel={oldLang('JumpToDate')}\n            >\n              <Icon name=\"calendar\" />\n            </Button>\n          </div>\n        )}\n      </div>\n      {isMobile && renderDropdown()}\n      {isMobile && (\n        <div className={styles.footer}>\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n\n            onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n            ariaLabel={oldLang('JumpToDate')}\n          >\n            <Icon name=\"calendar\" />\n          </Button>\n          <div className={styles.counter}>\n            {hasQueryData && (\n              foundIds?.length ? (\n                oldLang('Of', [Math.max(focusedIndex + 1, 1), totalCount])\n              ) : foundIds && !foundIds.length && (\n                oldLang('NoResult')\n              )\n            )}\n          </div>\n          {searchType === 'chat' && Boolean(foundIds?.length) && (\n            <Button\n              className={styles.viewStyle}\n              size=\"smaller\"\n              isText\n              fluid\n              noForcedUpperCase\n              onClick={handleTriggerViewStyle}\n            >\n              {isViewAsList ? oldLang('SearchAsChat') : oldLang('SearchAsList')}\n            </Button>\n          )}\n          {hasNavigationButtons && !hasResultsDropdown && (\n            <div className={styles.mobileNavigation}>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusOlder && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusOlder}\n                nonInteractive={!canFocusOlder}\n                ariaLabel={lang('AriaSearchOlderResult')}\n              >\n                <Icon name=\"up\" />\n              </Button>\n              <Button\n                className={buildClassName(styles.navigationButton, !canFocusNewer && styles.navigationDisabled)}\n                round\n                size=\"smaller\"\n                color=\"secondary\"\n                onClick={handleFocusNewer}\n                nonInteractive={!canFocusNewer}\n                ariaLabel={lang('AriaSearchNewerResult')}\n              >\n                <Icon name=\"down\" />\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n    const { chatId, threadId } = currentMessageList;\n\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const {\n      requestedQuery, savedTag, results, fetchingQuery, isHashtag, type,\n    } = selectCurrentMiddleSearch(global) || {};\n    const { totalCount, foundIds, query: lastSearchQuery } = results || {};\n\n    const currentUserId = global.currentUserId;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    const savedTags = isSavedMessages && !isSavedDialog ? global.savedReactionTags?.byKey : undefined;\n\n    const monoforumChat = selectMonoforumChannel(global, chatId);\n\n    return {\n      chat,\n      monoforumChat,\n      requestedQuery,\n      totalCount,\n      threadId,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(selectTabState(global).historyCalendarSelectedAt),\n      savedTags,\n      savedTag,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isSavedMessages,\n      fetchingQuery,\n      isHashtagQuery: isHashtag,\n      currentUserId,\n      searchType: type,\n      lastSearchQuery,\n    };\n  },\n)(MiddleSearch));\n","import type { ElementRef } from '../../lib/teact/teact';\nimport { useEffect } from '../../lib/teact/teact';\n\nimport useLastCallback from '../useLastCallback';\n\n// Fragile\nexport function useClickOutside(\n  refs: ElementRef<HTMLElement>[], callback: (event: MouseEvent) => void,\n) {\n  const handleClickOutside = useLastCallback((event: MouseEvent) => {\n    const clickedOutside = refs.every((ref) => {\n      return ref.current && !ref.current.contains(event.target as Node);\n    });\n\n    if (clickedOutside) callback(event);\n  });\n\n  useEffect(() => {\n    document.addEventListener('click', handleClickOutside);\n    return () => {\n      document.removeEventListener('click', handleClickOutside);\n    };\n  }, [handleClickOutside]);\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSticker, ApiStickerSet } from '../../../api/types';\nimport type { StickerSetOrReactionsSetOrRecent, ThreadId } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  EFFECT_EMOJIS_SET_ID,\n  EFFECT_STICKERS_SET_ID,\n  FAVORITE_SYMBOL_SET_ID,\n  RECENT_SYMBOL_SET_ID,\n  SLIDE_TRANSITION_DURATION,\n  STICKER_PICKER_MAX_SHARED_COVERS,\n  STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport {\n  selectChat, selectChatFullInfo, selectIsChatWithSelf, selectIsCurrentUserPremium, selectShouldLoopStickers,\n} from '../../../global/selectors';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId } from '../../../util/entities/ids';\nimport { pickTruthy } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { useStickerPickerObservers } from '../../common/hooks/useStickerPickerObservers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from '../../common/StickerSet';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport StickerSetCover from './StickerSetCover';\n\nimport styles from './StickerPicker.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  className: string;\n  isHidden?: boolean;\n  isTranslucent?: boolean;\n  loadAndPlay: boolean;\n  canSendStickers?: boolean;\n  noContextMenus?: boolean;\n  idPrefix: string;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  isForEffects?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  effectStickers?: ApiSticker[];\n  effectEmojis?: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  chatStickerSetId?: string;\n  addedSetIds?: string[];\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst HEADER_BUTTON_WIDTH = 2.5 * REM; // px (including margin)\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  isHidden,\n  isTranslucent,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  effectStickers,\n  effectEmojis,\n  addedSetIds,\n  stickerSetsById,\n  chatStickerSetId,\n  canAnimate,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noContextMenus,\n  idPrefix,\n  onStickerSelect,\n  isForEffects,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const sendMessageAction = useSendMessageAction(chat?.id, threadId);\n\n  const prefix = `${idPrefix}-sticker-set`;\n  const {\n    activeSetIndex,\n    observeIntersectionForSet,\n    observeIntersectionForPlayingItems,\n    observeIntersectionForShowingItems,\n    observeIntersectionForCovers,\n    selectStickerSet,\n  } = useStickerPickerObservers(containerRef, headerRef, prefix, isHidden);\n\n  const lang = useOldLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (isForEffects && effectStickers) {\n      const effectSets: StickerSetOrReactionsSetOrRecent[] = [];\n      if (effectEmojis?.length) {\n        effectSets.push({\n          id: EFFECT_EMOJIS_SET_ID,\n          accessHash: '0',\n          title: '',\n          stickers: effectEmojis,\n          count: effectEmojis.length,\n          isEmoji: true,\n        });\n      }\n      if (effectStickers?.length) {\n        effectSets.push({\n          id: EFFECT_STICKERS_SET_ID,\n          accessHash: '0',\n          title: lang('StickerEffects'),\n          stickers: effectStickers,\n          count: effectStickers.length,\n        });\n      }\n      return effectSets;\n    }\n\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        accessHash: '0',\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    const userSetIds = [...(addedSetIds || [])];\n    if (chatStickerSetId) {\n      userSetIds.unshift(chatStickerSetId);\n    }\n\n    const existingAddedSetIds = Object.values(pickTruthy(stickerSetsById, userSetIds));\n\n    return [\n      ...defaultSets,\n      ...existingAddedSetIds,\n    ];\n  }, [\n    addedSetIds,\n    stickerSetsById,\n    favoriteStickers,\n    recentStickers,\n    chatStickerSetId,\n    lang,\n    effectStickers,\n    isForEffects,\n    effectEmojis,\n  ]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (!loadAndPlay) return;\n    loadRecentStickers();\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [canSendStickers, loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n  const shouldRenderContents = areAddedLoaded && canRenderContents\n    && !noPopulatedSets && (canSendStickers || isForEffects);\n\n  useHorizontalScroll(headerRef, !shouldRenderContents || !headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    animateHorizontalScroll(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n    addRecentSticker({ sticker });\n  });\n\n  const handleStickerUnfave = useLastCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  });\n\n  const handleStickerFave = useLastCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  });\n\n  const handleMouseMove = useLastCallback(() => {\n    if (!canSendStickers) return;\n    sendMessageAction({ type: 'chooseSticker' });\n  });\n\n  const handleRemoveRecentSticker = useLastCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  });\n\n  if (!chat) return undefined;\n\n  function renderCover(stickerSet: StickerSetOrReactionsSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(styles.stickerCover, index === activeSetIndex && styles.activated);\n    const withSharedCanvas = index < STICKER_PICKER_MAX_SHARED_COVERS;\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker\n    ) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <Icon name=\"recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <Icon name=\"favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar peer={chat} size=\"small\" />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              noPlay={!canAnimate || !loadAndPlay}\n              observeIntersection={observeIntersectionForCovers}\n              sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n              forcePlayback\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          noPlay={!canAnimate || !loadAndPlay}\n          observeIntersection={observeIntersectionForCovers}\n          noContextMenu\n          isCurrentUserPremium\n          sharedCanvasRef={withSharedCanvas ? sharedCanvasRef : undefined}\n          withTranslucentThumb={isTranslucent}\n          onClick={selectStickerSet}\n          clickArg={index}\n          forcePlayback\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName(styles.root, className);\n\n  if (!shouldRenderContents) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers && !isForEffects ? (\n          <div className={styles.pickerDisabled}>{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className={styles.pickerDisabled}>{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    styles.header,\n    'no-scrollbar',\n    !shouldHideTopBorder && styles.headerWithBorder,\n  );\n\n  return (\n    <div className={fullClassName}>\n      {!isForEffects && (\n        <div ref={headerRef} className={headerClassName}>\n          <div className=\"shared-canvas-container\">\n            <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n            {allSets.map(renderCover)}\n          </div>\n        </div>\n      )}\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        onScroll={handleContentScroll}\n        className={\n          buildClassName(\n            styles.main,\n            IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n            !isForEffects && styles.hasHeader,\n          )\n        }\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(canAnimate && loadAndPlay)}\n            noContextMenus={noContextMenus}\n            index={i}\n            idPrefix={prefix}\n            observeIntersection={observeIntersectionForSet}\n            observeIntersectionForPlayingItems={observeIntersectionForPlayingItems}\n            observeIntersectionForShowingItems={observeIntersectionForShowingItems}\n            isNearActive={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n            isCurrentUserPremium={isCurrentUserPremium}\n            isTranslucent={isTranslucent}\n            isChatStickerSet={stickerSet.id === chatStickerSetId}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n            forcePlayback\n            shouldHideHeader={stickerSet.id === EFFECT_EMOJIS_SET_ID}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n      effect,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatStickerSetId = !isUserId(chatId) ? selectChatFullInfo(global, chatId)?.stickerSet?.id : undefined;\n\n    return {\n      chat,\n      effectStickers: effect?.stickers,\n      effectEmojis: effect?.emojis,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      canAnimate: selectShouldLoopStickers(global),\n      isSavedMessages,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      chatStickerSetId,\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../../../lib/teact/teact';\nimport {\n  memo,\n  useMemo, useRef,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChatReactions, ApiMessage,\n  ApiReaction,\n  ApiReactionWithPaid,\n} from '../../../../api/types';\n\nimport {\n  getReactionKey, sortReactions,\n} from '../../../../global/helpers';\nimport { selectChatFullInfo } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../../hooks/useAppLayout';\nimport useWindowSize from '../../../../hooks/window/useWindowSize';\n\nimport ReactionEmoji from '../../../common/reactions/ReactionEmoji';\n\nimport styles from './ReactionPickerLimited.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  loadAndPlay: boolean;\n  selectedReactionIds?: string[];\n  message?: ApiMessage;\n  onReactionSelect: (reaction: ApiReactionWithPaid) => void;\n  onReactionContext?: (reaction: ApiReactionWithPaid) => void;\n};\n\ntype StateProps = {\n  enabledReactions?: ApiChatReactions;\n  availableReactions?: ApiAvailableReaction[];\n  topReactions: ApiReaction[];\n  isWithPaidReaction?: boolean;\n  canAnimate?: boolean;\n  isSavedMessages?: boolean;\n  reactionsLimit?: number;\n  isCurrentUserPremium?: boolean;\n};\n\nconst REACTION_SIZE = 36;\nconst GRID_GAP_THRESHOLD = 600;\nconst MODAL_PADDING_SIZE_REM = 0.5;\nconst MODAL_MAX_HEIGHT_REM = 18;\nconst MODAL_MAX_WIDTH_REM = 26.25;\nconst GRID_GAP_DESKTOP_REM = 0.625;\nconst GRID_GAP_MOBILE_REM = 0.5;\n\nconst ReactionPickerLimited: FC<OwnProps & StateProps> = ({\n  loadAndPlay,\n  enabledReactions,\n  availableReactions,\n  topReactions,\n  selectedReactionIds,\n  isWithPaidReaction,\n  message,\n  reactionsLimit,\n  onReactionSelect,\n  onReactionContext,\n}) => {\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n  const sharedCanvasHqRef = useRef<HTMLCanvasElement>();\n  const { width: windowWidth } = useWindowSize();\n  const { isTouchScreen } = useAppLayout();\n\n  const currentReactions = message?.reactions?.results;\n\n  const shouldUseCurrentReactions = reactionsLimit && currentReactions\n    && currentReactions.length >= reactionsLimit;\n\n  const allAvailableReactions = useMemo(() => {\n    if (shouldUseCurrentReactions) {\n      const reactions = currentReactions.map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactions.unshift({ type: 'paid' });\n      }\n      return reactions;\n    }\n\n    if (!enabledReactions) {\n      return [];\n    }\n\n    if (enabledReactions.type === 'all') {\n      const reactionsToSort: ApiReactionWithPaid[] = (availableReactions || []).map(({ reaction }) => reaction);\n      if (isWithPaidReaction) {\n        reactionsToSort.unshift({ type: 'paid' });\n      }\n      return sortReactions(reactionsToSort, topReactions);\n    }\n\n    const reactionsToSort: ApiReactionWithPaid[] = enabledReactions.allowed.slice();\n    if (isWithPaidReaction) {\n      reactionsToSort.unshift({ type: 'paid' });\n    }\n\n    return sortReactions(reactionsToSort, topReactions);\n  }, [\n    availableReactions, enabledReactions, topReactions, shouldUseCurrentReactions, currentReactions, isWithPaidReaction,\n  ]);\n\n  const pickerHeight = useMemo(() => {\n    const pickerWidth = Math.min(MODAL_MAX_WIDTH_REM * REM, windowWidth);\n    const gapWidth = (windowWidth > GRID_GAP_THRESHOLD ? GRID_GAP_DESKTOP_REM : GRID_GAP_MOBILE_REM) * REM;\n    const availableWidth = pickerWidth - MODAL_PADDING_SIZE_REM * REM;\n\n    const itemsInRow = Math.floor((availableWidth + gapWidth) / (REACTION_SIZE + gapWidth));\n    const rowsCount = Math.ceil(allAvailableReactions.length / itemsInRow);\n\n    const pickerMaxHeight = rowsCount * REACTION_SIZE + (rowsCount - 1) * gapWidth + MODAL_PADDING_SIZE_REM * REM * 2;\n\n    return Math.min(MODAL_MAX_HEIGHT_REM * REM, pickerMaxHeight);\n  }, [allAvailableReactions.length, windowWidth]);\n\n  return (\n    <div className={styles.root} style={`height: ${pickerHeight}px`}>\n      <div className={buildClassName(styles.wrapper, isTouchScreen ? 'no-scrollbar' : 'custom-scroll')}>\n        <div className=\"symbol-set-container shared-canvas-container\">\n          <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n          <canvas ref={sharedCanvasHqRef} className=\"shared-canvas\" />\n          {allAvailableReactions.map((reaction) => {\n            const reactionId = getReactionKey(reaction);\n            const isSelected = reactionId ? selectedReactionIds?.includes(reactionId) : undefined;\n\n            return (\n              <ReactionEmoji\n                key={reactionId}\n                reaction={reaction}\n                isSelected={isSelected}\n                loadAndPlay={loadAndPlay}\n                availableReactions={availableReactions}\n                onClick={onReactionSelect}\n                onContextMenu={onReactionContext}\n                sharedCanvasRef={sharedCanvasRef}\n                sharedCanvasHqRef={sharedCanvasHqRef}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { availableReactions, topReactions } = global.reactions;\n\n    const { maxUniqueReactions } = global.appConfig || {};\n    const { enabledReactions, isPaidReactionAvailable } = selectChatFullInfo(global, chatId) || {};\n\n    return {\n      enabledReactions,\n      availableReactions,\n      topReactions,\n      reactionsLimit: maxUniqueReactions,\n      isWithPaidReaction: isPaidReactionAvailable,\n    };\n  },\n)(ReactionPickerLimited));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"MhpiTAwi\",\"wrapper\":\"NIaqmosK\"};","import type { FC } from '../../../../lib/teact/teact';\nimport { memo, useMemo, useRef } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiReaction,\n  ApiReactionWithPaid,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n} from '../../../../api/types';\nimport type { IAnchorPosition } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\n\nimport { getReactionKey, getStoryKey } from '../../../../global/helpers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectIsContextMenuTranslucent,\n  selectIsCurrentUserPremium,\n  selectPeerStory,\n  selectTabState,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { isUserId } from '../../../../util/entities/ids';\nimport parseHtmlAsFormattedText from '../../../../util/parseHtmlAsFormattedText';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { buildCustomEmojiHtml } from '../../composer/helpers/customEmoji';\n\nimport { getIsMobile } from '../../../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../../../common/CustomEmojiPicker';\nimport Menu from '../../../ui/Menu';\nimport StickerPicker from '../../composer/StickerPicker';\nimport ReactionPickerLimited from './ReactionPickerLimited';\n\nimport styles from './ReactionPicker.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ninterface StateProps {\n  shouldUseFullPicker?: boolean;\n  message?: ApiMessage;\n  story?: ApiStory | ApiStorySkipped;\n  isCurrentUserPremium?: boolean;\n  position?: IAnchorPosition;\n  isTranslucent?: boolean;\n  sendAsMessage?: boolean;\n  chatId?: string;\n  isForEffects?: boolean;\n  availableEffectById: Record<string, ApiAvailableEffect>;\n}\n\nconst FULL_PICKER_SHIFT_DELTA = { x: -23, y: -64 };\nconst LIMITED_PICKER_SHIFT_DELTA = { x: -21, y: -10 };\nconst REACTION_SELECTOR_WIDTH = 16.375 * REM;\n\nconst ReactionPicker: FC<OwnProps & StateProps> = ({\n  isOpen,\n  message,\n  story,\n  position,\n  isTranslucent,\n  isCurrentUserPremium,\n  shouldUseFullPicker,\n  sendAsMessage,\n  chatId,\n  isForEffects,\n  availableEffectById,\n}) => {\n  const {\n    toggleReaction, closeReactionPicker, sendMessage, showNotification, sendStoryReaction, saveEffectInDraft,\n    requestEffectInComposer, addLocalPaidReaction, openPaidReactionModal,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  const renderedMessageId = useCurrentOrPrev(message?.id, true);\n  const renderedChatId = useCurrentOrPrev(message?.chatId, true);\n  const renderedStoryPeerId = useCurrentOrPrev(story?.peerId, true);\n  const renderedStoryId = useCurrentOrPrev(story?.id);\n  const storedPosition = useCurrentOrPrev(position, true);\n  const menuRef = useRef<HTMLDivElement>();\n  const renderingPosition = useMemo((): IAnchorPosition | undefined => {\n    if (!storedPosition) {\n      return undefined;\n    }\n\n    if (renderedStoryId) {\n      return storedPosition;\n    }\n\n    return {\n      x: storedPosition.x + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.x : LIMITED_PICKER_SHIFT_DELTA.x),\n      y: storedPosition.y + (shouldUseFullPicker ? FULL_PICKER_SHIFT_DELTA.y : LIMITED_PICKER_SHIFT_DELTA.y),\n    };\n  }, [renderedStoryId, storedPosition, shouldUseFullPicker]);\n\n  const getMenuElement = useLastCallback(() => menuRef.current);\n  const getLayout = useLastCallback(() => ({\n    withPortal: true,\n    isDense: !renderedStoryPeerId,\n    deltaX: !getIsMobile() && menuRef.current\n      ? -(menuRef.current.offsetWidth - REACTION_SELECTOR_WIDTH) / 2 - FULL_PICKER_SHIFT_DELTA.x / 2\n      : 0,\n  }));\n\n  const handleToggleCustomReaction = useLastCallback((sticker: ApiSticker) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n    const reaction: ApiReaction = sticker.isCustomEmoji\n      ? { type: 'custom', documentId: sticker.id }\n      : { type: 'emoji', emoticon: sticker.emoji! };\n\n    toggleReaction({\n      chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n    });\n    closeReactionPicker();\n  });\n\n  const handleToggleReaction = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (!renderedChatId || !renderedMessageId) {\n      return;\n    }\n\n    if (reaction.type === 'paid') {\n      addLocalPaidReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, count: 1,\n      });\n    } else {\n      toggleReaction({\n        chatId: renderedChatId, messageId: renderedMessageId, reaction, shouldAddToRecent: true,\n      });\n    }\n    closeReactionPicker();\n  });\n\n  const handleReactionContextMenu = useLastCallback((reaction: ApiReactionWithPaid) => {\n    if (reaction.type !== 'paid') return;\n\n    openPaidReactionModal({\n      chatId: renderedChatId!,\n      messageId: renderedMessageId!,\n    });\n    closeReactionPicker();\n  });\n\n  const handleStoryReactionSelect = useLastCallback((item: ApiReactionWithPaid | ApiSticker) => {\n    if ('type' in item && item.type === 'paid') return; // Not supported for stories\n\n    const reaction = 'id' in item ? { type: 'custom', documentId: item.id } as const : item;\n\n    const sticker = 'type' in item && item.type === 'custom' ? getGlobal().customEmojis.byId[item.documentId]\n      : 'id' in item ? item : undefined;\n\n    if (sticker && !sticker.isFree && !isCurrentUserPremium) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n\n      closeReactionPicker();\n\n      return;\n    }\n\n    if (!sendAsMessage) {\n      sendStoryReaction({\n        peerId: renderedStoryPeerId!,\n        storyId: renderedStoryId!,\n        containerId: getStoryKey(renderedStoryPeerId!, renderedStoryId!),\n        reaction,\n        shouldAddToRecent: true,\n      });\n      closeReactionPicker();\n      return;\n    }\n\n    let text: string | undefined;\n    let entities: ApiMessageEntity[] | undefined;\n\n    if ('type' in item && item.type === 'emoji') {\n      text = item.emoticon;\n    } else {\n      const customEmojiMessage = parseHtmlAsFormattedText(buildCustomEmojiHtml(sticker!));\n      text = customEmojiMessage.text;\n      entities = customEmojiMessage.entities;\n    }\n\n    sendMessage({ text, entities, isReaction: true });\n    closeReactionPicker();\n  });\n\n  const handleStickerSelect = useLastCallback((sticker: ApiSticker) => {\n    const availableEffects = Object.values(availableEffectById);\n    const effectId = availableEffects.find((effect) => effect.effectStickerId === sticker.id)?.id;\n\n    if (chatId) saveEffectInDraft({ chatId, threadId: MAIN_THREAD_ID, effectId });\n\n    if (effectId) requestEffectInComposer({});\n    closeReactionPicker();\n  });\n\n  const selectedReactionIds = useMemo(() => {\n    return (message?.reactions?.results || []).reduce<string[]>((acc, { chosenOrder, reaction }) => {\n      if (chosenOrder !== undefined) {\n        acc.push(getReactionKey(reaction));\n      }\n\n      return acc;\n    }, []);\n  }, [message?.reactions?.results]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      ref={menuRef}\n      className={buildClassName(styles.menu, 'ReactionPicker')}\n      bubbleClassName={buildClassName(\n        styles.menuContent,\n        !shouldUseFullPicker && !renderedStoryId && styles.onlyReactions,\n        renderedStoryId && styles.storyMenu,\n      )}\n      withPortal\n      noCompact\n      anchor={renderingPosition}\n      positionY={story && 'bottom'}\n      getTriggerElement={getTriggerElement}\n      getRootElement={getRootElement}\n      getMenuElement={getMenuElement}\n      getLayout={getLayout}\n      backdropExcludedSelector=\".Modal.confirm\"\n      onClose={closeReactionPicker}\n    >\n      {isForEffects && chatId ? (\n        <StickerPicker\n          className=\"\"\n          isHidden={!isOpen}\n          loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n          idPrefix=\"message-effect\"\n          canSendStickers={false}\n          noContextMenus={false}\n          chatId={chatId}\n          isTranslucent={isTranslucent}\n          onStickerSelect={handleStickerSelect}\n          isForEffects={isForEffects}\n        />\n      ) : (\n        <>\n          <CustomEmojiPicker\n            chatId={renderedChatId}\n            idPrefix=\"message-emoji-set-\"\n            isHidden={!isOpen || !(shouldUseFullPicker || renderedStoryId)}\n            loadAndPlay={Boolean(isOpen && shouldUseFullPicker)}\n            isReactionPicker\n            className={!shouldUseFullPicker && !renderedStoryId ? styles.hidden : undefined}\n            selectedReactionIds={selectedReactionIds}\n            isTranslucent={isTranslucent}\n            onCustomEmojiSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleCustomReaction}\n            onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n            onReactionContext={handleReactionContextMenu}\n          />\n          {!shouldUseFullPicker && Boolean(renderedChatId) && (\n            <ReactionPickerLimited\n              chatId={renderedChatId}\n              loadAndPlay={isOpen}\n              onReactionSelect={renderedStoryId ? handleStoryReactionSelect : handleToggleReaction}\n              onReactionContext={handleReactionContextMenu}\n              selectedReactionIds={selectedReactionIds}\n              message={message}\n            />\n          )}\n        </>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const state = selectTabState(global);\n  const availableEffectById = global.availableEffectById;\n  const {\n    chatId, messageId, storyPeerId, storyId, position, sendAsMessage, isForEffects,\n  } = state.reactionPicker || {};\n  const story = storyPeerId && storyId\n    ? selectPeerStory(global, storyPeerId, storyId) as ApiStory | ApiStorySkipped\n    : undefined;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n  const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n  const isPrivateChat = isUserId(chatId || storyPeerId || '');\n  const areSomeReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'some';\n  const { maxUniqueReactions } = global.appConfig || {};\n  const areAllReactionsAllowed = chatFullInfo?.enabledReactions?.type === 'all'\n    && chatFullInfo?.enabledReactions?.areCustomAllowed;\n\n  const currentReactions = message?.reactions?.results;\n  const shouldUseCurrentReactions = Boolean(maxUniqueReactions && currentReactions\n    && currentReactions.length >= maxUniqueReactions);\n\n  return {\n    message,\n    story,\n    position,\n    shouldUseFullPicker: (chat?.isForbidden || areSomeReactionsAllowed || shouldUseCurrentReactions) ? false\n      : (areAllReactionsAllowed || isPrivateChat),\n    isTranslucent: selectIsContextMenuTranslucent(global),\n    isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    sendAsMessage,\n    isForEffects,\n    chatId,\n    availableEffectById,\n  };\n})(ReactionPicker));\n\nfunction getTriggerElement(): HTMLElement | null {\n  return document.querySelector('body');\n}\n\nfunction getRootElement() {\n  return document.querySelector('body');\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"menu\":\"gBh4WvBC\",\"menuContent\":\"qSfKwMzX\",\"storyMenu\":\"srpBMrqr\",\"onlyReactions\":\"dRNSqkOC\",\"hidden\":\"KVwgF6DG\"};","import { fixImageContent } from '../../../../util/parseHtmlAsFormattedText';\n\nconst div = document.createElement('div');\n\nexport function getHtmlTextLength(html: string) {\n  div.innerHTML = html;\n  fixImageContent(div);\n  div.querySelectorAll('br').forEach((br) => {\n    br.replaceWith('\\n');\n  });\n  return div.textContent?.trim().length || 0;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"QucaiGVU\",\"preview\":\"SHoF85Vw\",\"duration\":\"nI2M1SBH\",\"single\":\"FjrnqGba\",\"no-grouping\":\"g0cTsM9d\",\"noGrouping\":\"g0cTsM9d\",\"file\":\"B6f6GcvN\",\"overlay\":\"bX7LdgxW\",\"action-item\":\"Zo7u5epf\",\"actionItem\":\"Zo7u5epf\",\"delete-file\":\"CYJwy9T_\",\"deleteFile\":\"CYJwy9T_\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiAttachment } from '../../../api/types';\n\nimport { SUPPORTED_PHOTO_CONTENT_TYPES, SUPPORTED_VIDEO_CONTENT_TYPES } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport File from '../../common/File';\nimport Icon from '../../common/icons/Icon';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './AttachmentModalItem.module.scss';\n\ntype OwnProps = {\n  attachment: ApiAttachment;\n  className?: string;\n  shouldDisplayCompressed?: boolean;\n  shouldDisplayGrouped?: boolean;\n  isSingle?: boolean;\n  index: number;\n  onDelete?: (index: number) => void;\n  onToggleSpoiler?: (index: number) => void;\n};\n\nconst BLUR_CANVAS_SIZE = 15 * REM;\n\nconst AttachmentModalItem: FC<OwnProps> = ({\n  attachment,\n  className,\n  isSingle,\n  shouldDisplayCompressed,\n  shouldDisplayGrouped,\n  index,\n  onDelete,\n  onToggleSpoiler,\n}) => {\n  const displayType = getDisplayType(attachment, shouldDisplayCompressed);\n\n  const handleSpoilerClick = useLastCallback(() => {\n    onToggleSpoiler?.(index);\n  });\n\n  const content = useMemo(() => {\n    switch (displayType) {\n      case 'photo':\n        return (\n          <img\n            className={styles.preview}\n            src={attachment.blobUrl}\n            alt=\"\"\n            draggable={false}\n          />\n        );\n      case 'video':\n        return (\n          <>\n            {Boolean(attachment.quick?.duration) && (\n              <div className={styles.duration}>{formatMediaDuration(attachment.quick.duration)}</div>\n            )}\n            <video\n              className={styles.preview}\n              src={attachment.blobUrl}\n              autoPlay\n              muted\n              loop\n              disablePictureInPicture\n            />\n          </>\n        );\n      default:\n        return (\n          <>\n            <File\n              className={styles.file}\n              name={attachment.filename}\n              extension={getFileExtension(attachment.filename, attachment.mimeType)}\n              previewData={attachment.previewBlobUrl}\n              size={attachment.size}\n              smaller\n            />\n            {onDelete && (\n              <Icon\n                name=\"delete\"\n                className={buildClassName(styles.actionItem, styles.deleteFile)}\n\n                onClick={() => onDelete(index)}\n              />\n            )}\n          </>\n        );\n    }\n  }, [attachment, displayType, index, onDelete]);\n\n  const shouldSkipGrouping = displayType === 'file' || !shouldDisplayGrouped;\n  const shouldDisplaySpoiler = Boolean(displayType !== 'file' && attachment.shouldSendAsSpoiler);\n  const shouldRenderOverlay = displayType !== 'file';\n\n  const rootClassName = buildClassName(\n    className, styles.root, isSingle && styles.single, shouldSkipGrouping && styles.noGrouping,\n  );\n\n  return (\n    <div className={rootClassName}>\n      {content}\n      <MediaSpoiler\n        isVisible={shouldDisplaySpoiler}\n        thumbDataUri={attachment.previewBlobUrl || attachment.blobUrl}\n        width={BLUR_CANVAS_SIZE}\n        height={BLUR_CANVAS_SIZE}\n      />\n      {shouldRenderOverlay && (\n        <div className={styles.overlay}>\n          <Icon\n            name={attachment.shouldSendAsSpoiler ? 'spoiler-disable' : 'spoiler'}\n            className={styles.actionItem}\n            onClick={handleSpoilerClick}\n          />\n          {onDelete && (\n\n            <Icon name=\"delete\" className={styles.actionItem} onClick={() => onDelete(index)} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport function getDisplayType(attachment: ApiAttachment, shouldDisplayCompressed?: boolean) {\n  if (shouldDisplayCompressed && attachment.quick) {\n    if (SUPPORTED_PHOTO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'photo';\n    }\n    if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n      return 'video';\n    }\n  }\n  return 'file';\n}\n\nexport default memo(AttachmentModalItem);\n","export default function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","import { type ElementRef } from '../lib/teact/teact';\n\nimport isFullyVisible from './visibility/isFullyVisible';\nimport animateScroll from './animateScroll';\nimport findInViewport from './findInViewport';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: ElementRef<HTMLElement>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    animateScroll({\n      container,\n      element: allElements[index],\n      position,\n      margin: SCROLL_MARGIN,\n    });\n  }\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: (item: any) => void | boolean;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useLastCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  });\n\n  const handleArrowKey = useLastCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  });\n\n  const handleItemSelect = useLastCallback((e: KeyboardEvent) => {\n    // Prevent action on key combinations\n    if (e.altKey || e.ctrlKey || e.metaKey || e.shiftKey) return false;\n    if (!isActive) return false;\n\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        if (onSelect(item) === false) {\n          return false;\n        }\n\n        e.preventDefault();\n      }\n    }\n\n    return true;\n  });\n\n  useEffect(() => {\n    if (!isActive) setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n  }, [isActive, shouldRemoveSelectionOnReset]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useLastCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent, id: string) => {\n    e.preventDefault();\n\n    handleUserSelect(id);\n  });\n\n  const handleSelectMention = useLastCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  });\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePreviousDeprecated(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item smaller-icon\"\n          onClick={handleClick}\n          clickArg={id}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"a27O2Qlr\",\"mobile\":\"khvUZbGZ\",\"symbolMenuOpen\":\"ir5kkMy1\",\"header-border\":\"Pc1k8G8s\",\"headerBorder\":\"Pc1k8G8s\",\"sendButtonStar\":\"C1OOt81o\",\"attachments\":\"_bxSIFgj\",\"attachments-bottom-padding\":\"RPVunBe2\",\"attachmentsBottomPadding\":\"RPVunBe2\",\"caption-wrapper\":\"EtmiUn2k\",\"captionWrapper\":\"EtmiUn2k\",\"caption-top-border\":\"FjjSKMYe\",\"captionTopBorder\":\"FjjSKMYe\",\"caption\":\"Te7lIfpB\",\"dropTarget\":\"AT_d9l0W\",\"dropOutlineContainer\":\"d9O65j_I\",\"dropOutline\":\"jzCBDWMw\",\"outline\":\"xjNY3Z8u\",\"hovered\":\"AnO3BgVv\",\"send-wrapper\":\"wDqWK9MD\",\"sendWrapper\":\"wDqWK9MD\",\"send\":\"kNlWmBJI\",\"is-pointer-env\":\"rYZmraWo\",\"isPointerEnv\":\"rYZmraWo\"};","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAttachment, ApiChatMember, ApiMessage, ApiSticker,\n} from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { MessageListType, ThreadId } from '../../../types';\nimport type { Signal } from '../../../util/signals';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getAttachmentMediaType } from '../../../global/helpers';\nimport { selectChatFullInfo, selectIsChatWithSelf } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectSharedSettings } from '../../../global/selectors/sharedState';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { validateFiles } from '../../../util/files';\nimport { formatStarsAsIcon } from '../../../util/localization/format';\nimport { removeAllSelections } from '../../../util/selection';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\nimport { getHtmlTextLength } from './helpers/getHtmlTextLength';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useEffectOnce from '../../../hooks/useEffectOnce';\nimport useFlag from '../../../hooks/useFlag';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Modal from '../../ui/Modal';\nimport AttachmentModalItem from './AttachmentModalItem';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport MentionTooltip from './MentionTooltip';\nimport MessageInput from './MessageInput';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport styles from './AttachmentModal.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  attachments: ApiAttachment[];\n  editingMessage?: ApiMessage;\n  messageListType?: MessageListType;\n  getHtml: Signal<string>;\n  canShowCustomSendMenu?: boolean;\n  isReady: boolean;\n  isForMessage?: boolean;\n  shouldSchedule?: boolean;\n  shouldForceCompression?: boolean;\n  shouldForceAsFile?: boolean;\n  isForCurrentMessageList?: boolean;\n  forceDarkTheme?: boolean;\n  onCaptionUpdate: (html: string) => void;\n  onSend: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onFileAppend: (files: File[], isSpoiler?: boolean) => void;\n  onAttachmentsUpdate: (attachments: ApiAttachment[]) => void;\n  onClear: NoneToVoidFunction;\n  onSendSilent: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onSendScheduled: (sendCompressed: boolean, sendGrouped: boolean, isInvertedMedia?: true) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onRemoveSymbol: VoidFunction;\n  onEmojiSelect: (emoji: string) => void;\n  canScheduleUntilOnline?: boolean;\n  canSchedule?: boolean;\n  onSendWhenOnline?: NoneToVoidFunction;\n  paidMessagesStars?: number;\n};\n\ntype StateProps = {\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  editingMessage?: ApiMessage;\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSuggestCustomEmoji?: boolean;\n  customEmojiForEmoji?: ApiSticker[];\n  captionLimit: number;\n  attachmentSettings: GlobalState['attachmentSettings'];\n};\n\nconst ATTACHMENT_MODAL_INPUT_ID = 'caption-input-text';\nconst DROP_LEAVE_TIMEOUT_MS = 150;\nconst MAX_LEFT_CHARS_TO_SHOW = 100;\nconst CLOSE_MENU_ANIMATION_DURATION = 200;\n\nconst AttachmentModal: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  getHtml,\n  editingMessage,\n  canShowCustomSendMenu,\n  captionLimit,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  isForMessage,\n  shouldSchedule,\n  shouldSuggestCustomEmoji,\n  customEmojiForEmoji,\n  attachmentSettings,\n  shouldForceCompression,\n  shouldForceAsFile,\n  isForCurrentMessageList,\n  forceDarkTheme,\n  onAttachmentsUpdate,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n  onCustomEmojiSelect,\n  onRemoveSymbol,\n  onEmojiSelect,\n  canScheduleUntilOnline,\n  canSchedule,\n  onSendWhenOnline,\n  paidMessagesStars,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n  const svgRef = useRef<SVGSVGElement>();\n  const { addRecentCustomEmoji, addRecentEmoji, updateAttachmentSettings } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const mainButtonRef = useRef<HTMLButtonElement>();\n  const inputRef = useRef<HTMLDivElement>();\n\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePreviousDeprecated(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const { isMobile } = useAppLayout();\n\n  const isEditing = editingMessage && Boolean(editingMessage);\n  const isInAlbum = editingMessage && editingMessage?.groupedId;\n  const isEditingMessageFile = isEditing && attachments?.length && getAttachmentMediaType(attachments[0]);\n  const notEditingFile = isEditingMessageFile !== 'file';\n\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n\n  const shouldSendCompressed = attachmentSettings.shouldCompress;\n  const isSendingCompressed = Boolean(\n    (shouldSendCompressed || shouldForceCompression || isInAlbum) && !shouldForceAsFile,\n  );\n  const [shouldSendGrouped, setShouldSendGrouped] = useState(attachmentSettings.shouldSendGrouped);\n  const isInvertedMedia = attachmentSettings.isInvertedMedia;\n  const [shouldSendInHighQuality, setShouldSendInHighQuality] = useState(\n    attachmentSettings.shouldSendInHighQuality,\n  );\n  const [renderingShouldSendInHighQuality, setRenderingShouldSendInHighQuality] = useState(shouldSendInHighQuality);\n\n  const {\n    handleScroll: handleAttachmentsScroll,\n    isAtBeginning: areAttachmentsNotScrolled,\n    isAtEnd: areAttachmentsScrolledToBottom,\n  } = useScrolledState();\n\n  const { handleScroll: handleCaptionScroll, isAtBeginning: isCaptionNotScrolled } = useScrolledState();\n\n  const isOpen = Boolean(attachments.length);\n  const renderingIsOpen = Boolean(renderingAttachments?.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n\n  const timerRef = useRef<number | undefined>();\n\n  useEffect(() => {\n    if (!isOpen) {\n      closeSymbolMenu();\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [closeSymbolMenu, isOpen]);\n\n  const [hasMedia, hasOnlyMedia] = useMemo(() => {\n    const onlyMedia = Boolean(renderingAttachments?.every((a) => a.quick || a.audio));\n    if (onlyMedia) return [true, true];\n    const oneMedia = Boolean(renderingAttachments?.some((a) => a.quick || a.audio));\n    return [oneMedia, false];\n  }, [renderingAttachments]);\n\n  const [hasSpoiler, isEverySpoiler] = useMemo(() => {\n    const areAllSpoilers = Boolean(renderingAttachments?.every((a) => a.shouldSendAsSpoiler));\n    if (areAllSpoilers) return [true, true];\n    const hasOneSpoiler = Boolean(renderingAttachments?.some((a) => a.shouldSendAsSpoiler));\n    return [hasOneSpoiler, false];\n  }, [renderingAttachments]);\n\n  const getSelectionRange = useGetSelectionRange(`#${EDITABLE_INPUT_MODAL_ID}`);\n\n  const {\n    isEmojiTooltipOpen,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n    closeEmojiTooltip,\n  } = useEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    insertCustomEmoji,\n    closeCustomEmojiTooltip,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && (isForCurrentMessageList || !isForMessage) && renderingIsOpen && shouldSuggestCustomEmoji),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && renderingIsOpen),\n    getHtml,\n    onCaptionUpdate,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setShouldSendGrouped(attachmentSettings.shouldSendGrouped);\n      setShouldSendInHighQuality(attachmentSettings.shouldSendInHighQuality);\n    }\n  }, [attachmentSettings, isOpen]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      updateAttachmentSettings({ isInvertedMedia: undefined });\n    }\n  }, [updateAttachmentSettings, isOpen]);\n\n  function setIsInvertedMedia(value?: true) {\n    updateAttachmentSettings({ isInvertedMedia: value });\n  }\n\n  useEffect(() => {\n    if (isOpen && isMobile) {\n      removeAllSelections();\n    }\n  }, [isMobile, isOpen]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useLastCallback((isSilent?: boolean, shouldSendScheduled?: boolean) => {\n    if (isOpen) {\n      const send = ((shouldSchedule || shouldSendScheduled) && isForMessage && !editingMessage) ? onSendScheduled\n        : isSilent ? onSendSilent : onSend;\n      send(isSendingCompressed, shouldSendGrouped, isInvertedMedia);\n      updateAttachmentSettings({\n        shouldCompress: isSendingCompressed,\n        shouldSendGrouped,\n        isInvertedMedia,\n        shouldSendInHighQuality,\n      });\n    }\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendAttachments(true);\n  });\n\n  const handleSendClick = useLastCallback(() => {\n    sendAttachments();\n  });\n\n  const handleScheduleClick = useLastCallback(() => {\n    sendAttachments(false, true);\n  });\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches(`.${styles.dropTarget}`) && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest(`.${styles.hovered}`)) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useLastCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      onFileAppend(files, isEverySpoiler);\n    }\n  });\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  const handleFileSelect = useLastCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileAppend(validatedFiles, isEverySpoiler);\n    }\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog('*', (e) => handleFileSelect(e));\n  });\n\n  const handleDelete = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.filter((a, i) => i !== index));\n  });\n\n  const handleEnableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({\n      ...a,\n      shouldSendAsSpoiler: true,\n    })));\n  });\n\n  const handleToggleShouldCompress = useLastCallback(() => {\n    const newValue = !shouldSendCompressed;\n    updateAttachmentSettings({ shouldCompress: newValue });\n  });\n\n  const handleToggleQuality = useLastCallback(() => {\n    const newValue = !shouldSendInHighQuality;\n    setShouldSendInHighQuality(newValue);\n    updateAttachmentSettings({ shouldSendInHighQuality: newValue });\n  });\n\n  const handleDisableSpoilers = useLastCallback(() => {\n    onAttachmentsUpdate(attachments.map((a) => ({ ...a, shouldSendAsSpoiler: undefined })));\n  });\n\n  const handleToggleSpoiler = useLastCallback((index: number) => {\n    onAttachmentsUpdate(attachments.map((attachment, i) => {\n      if (i === index) {\n        return {\n          ...attachment,\n          shouldSendAsSpoiler: !attachment.shouldSendAsSpoiler || undefined,\n        };\n      }\n\n      return attachment;\n    }));\n  });\n\n  const handleResize = useLastCallback(() => {\n    const svg = svgRef.current;\n    if (!svg) {\n      return;\n    }\n\n    const { width, height } = svg.getBoundingClientRect();\n    svg.viewBox.baseVal.width = width;\n    svg.viewBox.baseVal.height = height;\n  });\n\n  // Can't listen for SVG resize\n  useResizeObserver(ref, handleResize);\n\n  useEffectOnce(handleResize);\n\n  useEffect(() => {\n    const mainButton = mainButtonRef.current;\n    const input = document.getElementById(ATTACHMENT_MODAL_INPUT_ID);\n\n    if (!mainButton || !input) return;\n\n    const { width } = mainButton.getBoundingClientRect();\n\n    requestMutation(() => {\n      input.style.setProperty('--margin-for-scrollbar', `${width}px`);\n    });\n  }, [oldLang, isOpen]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <Icon name=\"more\" />\n      </Button>\n    );\n  }, [isMobile]);\n\n  const leftChars = useDerivedState(() => {\n    if (!renderingIsOpen) return undefined;\n\n    const leftCharsBeforeLimit = captionLimit - getHtmlTextLength(getHtml());\n    return leftCharsBeforeLimit <= MAX_LEFT_CHARS_TO_SHOW ? leftCharsBeforeLimit : undefined;\n  }, [captionLimit, getHtml, renderingIsOpen]);\n\n  const isQuickGallery = isSendingCompressed && hasOnlyMedia;\n\n  const [areAllPhotos, areAllVideos, areAllAudios, hasAnyPhoto] = useMemo(() => {\n    if (!isQuickGallery || !renderingAttachments) return [false, false, false];\n    const everyPhoto = renderingAttachments.every((a) => SUPPORTED_PHOTO_CONTENT_TYPES.has(a.mimeType));\n    const everyVideo = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n    const everyAudio = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n    const hasAnyPhoto = renderingAttachments.some((a) => SUPPORTED_PHOTO_CONTENT_TYPES.has(a.mimeType));\n    return [everyPhoto, everyVideo, everyAudio, hasAnyPhoto];\n  }, [renderingAttachments, isQuickGallery]);\n\n  const hasAnySpoilerable = useMemo(() => {\n    if (!renderingAttachments) return false;\n    return renderingAttachments.some((a) => !SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n  }, [renderingAttachments]);\n\n  useEffect(() => {\n    if (shouldSendInHighQuality === renderingShouldSendInHighQuality) return;\n    if (timerRef.current) clearTimeout(timerRef.current);\n    timerRef.current = window.setTimeout(() => {\n      setRenderingShouldSendInHighQuality(shouldSendInHighQuality);\n    }, CLOSE_MENU_ANIMATION_DURATION);\n    return () => {\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n        timerRef.current = undefined;\n      }\n    };\n  }, [shouldSendInHighQuality, renderingShouldSendInHighQuality]);\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const isMultiple = renderingAttachments.length > 1;\n\n  const canInvertMedia = (() => {\n    if (isEditing) return false;\n    if (!hasMedia) return false;\n    if (!shouldForceAsFile && !shouldForceCompression && !isSendingCompressed) return false;\n    if (isMultiple && shouldSendGrouped) return false;\n    return true;\n  })();\n\n  let title = '';\n  const attachmentsLength = renderingAttachments.length;\n  if (areAllPhotos) {\n    title = oldLang(isEditing ? 'EditMessageReplacePhoto' : 'PreviewSender.SendPhoto', attachmentsLength, 'i');\n  } else if (areAllVideos) {\n    title = oldLang(isEditing ? 'EditMessageReplaceVideo' : 'PreviewSender.SendVideo', attachmentsLength, 'i');\n  } else if (areAllAudios) {\n    title = oldLang(isEditing ? 'EditMessageReplaceAudio' : 'PreviewSender.SendAudio', attachmentsLength, 'i');\n  } else {\n    title = oldLang(isEditing ? 'EditMessageReplaceFile' : 'PreviewSender.SendFile', attachmentsLength, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        {notEditingFile && !isInAlbum\n          && (\n            <DropdownMenu\n              className=\"attachmeneditingMessaget-modal-more-menu with-menu-transitions\"\n              trigger={MoreMenuButton}\n              positionX=\"right\"\n            >\n              {Boolean(!editingMessage) && (\n                <MenuItem icon=\"add\" onClick={handleDocumentSelect}>{oldLang('Add')}</MenuItem>\n              )}\n              {hasMedia && (\n                <>\n                  {\n                    canInvertMedia && (!isInvertedMedia ? (\n\n                      <MenuItem icon=\"move-caption-up\" onClick={() => setIsInvertedMedia(true)}>\n                        {oldLang('PreviewSender.MoveTextUp')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"move-caption-down\" onClick={() => setIsInvertedMedia(undefined)}>\n                        {oldLang(('PreviewSender.MoveTextDown'))}\n                      </MenuItem>\n                    ))\n                  }\n                  {\n                    !shouldForceAsFile && !shouldForceCompression && (isSendingCompressed ? (\n\n                      <MenuItem icon=\"document\" onClick={handleToggleShouldCompress}>\n                        {oldLang(isMultiple ? 'Attachment.SendAsFiles' : 'Attachment.SendAsFile')}\n                      </MenuItem>\n                    ) : (\n\n                      <MenuItem icon=\"photo\" onClick={handleToggleShouldCompress}>\n                        {isMultiple ? 'Send All as Media' : 'Send as Media'}\n                      </MenuItem>\n                    ))\n                  }\n                  {isSendingCompressed && !editingMessage && hasAnyPhoto && (\n                    <MenuItem\n                      icon={renderingShouldSendInHighQuality ? 'sd-photo' : 'hd-photo'}\n                      onClick={handleToggleQuality}\n                    >\n                      {lang(renderingShouldSendInHighQuality ? 'SendInStandardQuality' : 'SendInHighQuality')}\n                    </MenuItem>\n                  )}\n                  {isSendingCompressed && hasAnySpoilerable && Boolean(!editingMessage) && (\n                    hasSpoiler ? (\n                      <MenuItem icon=\"spoiler-disable\" onClick={handleDisableSpoilers}>\n                        {oldLang('Attachment.DisableSpoiler')}\n                      </MenuItem>\n                    ) : (\n                      <MenuItem icon=\"spoiler\" onClick={handleEnableSpoilers}>\n                        {oldLang('Attachment.EnableSpoiler')}\n                      </MenuItem>\n                    )\n                  )}\n                </>\n              )}\n              {isMultiple && (\n                shouldSendGrouped ? (\n                  <MenuItem\n                    icon=\"grouped-disable\"\n\n                    onClick={() => setShouldSendGrouped(false)}\n                  >\n                    Ungroup All Media\n                  </MenuItem>\n                ) : (\n\n                  <MenuItem icon=\"grouped\" onClick={() => setShouldSendGrouped(true)}>\n                    Group All Media\n                  </MenuItem>\n                )\n              )}\n            </DropdownMenu>\n          )}\n      </div>\n    );\n  }\n\n  const isBottomDividerShown = !areAttachmentsScrolledToBottom || !isCaptionNotScrolled;\n  const buttonSendCaption = paidMessagesStars ? formatStarsAsIcon(lang,\n    attachmentsLength * paidMessagesStars,\n    {\n      className: styles.sendButtonStar,\n      asFont: true,\n    }) : oldLang('Send');\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={buildClassName(\n        styles.root,\n        isHovered && styles.hovered,\n        !areAttachmentsNotScrolled && styles.headerBorder,\n        isMobile && styles.mobile,\n        isSymbolMenuOpen && styles.symbolMenuOpen,\n        forceDarkTheme && 'component-theme-dark',\n      )}\n      noBackdropClose\n      isLowStackPriority\n    >\n      <div\n        className={styles.dropTarget}\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={unmarkHovered}\n        data-attach-description={oldLang('Preview.Dragging.AddItems', 10)}\n        data-dropzone\n      >\n        <svg className={styles.dropOutlineContainer}>\n          <rect className={styles.dropOutline} x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" rx=\"8\" />\n        </svg>\n        <div\n          className={buildClassName(\n            styles.attachments,\n            'custom-scroll',\n            isBottomDividerShown && styles.attachmentsBottomPadding,\n          )}\n          onScroll={handleAttachmentsScroll}\n        >\n          {renderingAttachments.map((attachment, i) => (\n            <AttachmentModalItem\n              attachment={attachment}\n              shouldDisplayCompressed={isSendingCompressed}\n              shouldDisplayGrouped={shouldSendGrouped}\n              isSingle={renderingAttachments.length === 1}\n              index={i}\n              key={attachment.uniqueId || i}\n              onDelete={handleDelete}\n              onToggleSpoiler={handleToggleSpoiler}\n            />\n          ))}\n        </div>\n        <div\n          className={buildClassName(\n            styles.captionWrapper,\n            isBottomDividerShown && styles.captionTopBorder,\n          )}\n        >\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            filteredUsers={mentionFilteredUsers}\n            onInsertUserName={insertMention}\n            onClose={closeMentionTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onCustomEmojiSelect={insertCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <div className={styles.caption}>\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              onCustomEmojiSelect={onCustomEmojiSelect}\n              onRemoveSymbol={onRemoveSymbol}\n              onEmojiSelect={onEmojiSelect}\n              isAttachmentModal\n              canSendPlainText\n              className=\"attachment-modal-symbol-menu with-menu-transitions\"\n              idPrefix=\"attachment\"\n              forceDarkTheme={forceDarkTheme}\n            />\n            <MessageInput\n              ref={inputRef}\n              id={ATTACHMENT_MODAL_INPUT_ID}\n              chatId={chatId}\n              threadId={threadId}\n              isAttachmentModalInput\n              customEmojiPrefix=\"attachment\"\n              isReady={isReady}\n              isActive={isOpen}\n              getHtml={getHtml}\n              editableInputId={EDITABLE_INPUT_MODAL_ID}\n              placeholder={oldLang('AddCaption')}\n              onUpdate={onCaptionUpdate}\n              onSend={handleSendClick}\n              onScroll={handleCaptionScroll}\n              canAutoFocus={Boolean(isReady && isForCurrentMessageList && attachments.length)}\n              captionLimit={leftChars}\n              shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n              onSuppressedFocus={closeSymbolMenu}\n            />\n            <div className={styles.sendWrapper}>\n              <Button\n                ref={mainButtonRef}\n                className={styles.send}\n                onClick={handleSendClick}\n                onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n              >\n                {shouldSchedule && !editingMessage ? oldLang('Next')\n                  : editingMessage ? oldLang('Save') : buttonSendCaption}\n              </Button>\n              {canShowCustomSendMenu && (\n                <CustomSendMenu\n                  isOpen={isCustomSendMenuOpen}\n                  canSchedule={canSchedule && isForMessage}\n                  onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n                  onSendSchedule={handleScheduleClick}\n                  onClose={handleContextMenuClose}\n                  onCloseAnimationEnd={handleContextMenuHide}\n                  isSavedMessages={isChatWithSelf}\n                  onSendWhenOnline={onSendWhenOnline}\n                  canScheduleUntilOnline={canScheduleUntilOnline}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      currentUserId,\n      recentEmojis,\n      customEmojis,\n      attachmentSettings,\n    } = global;\n\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const { shouldSuggestCustomEmoji } = global.settings.byKey;\n    const { language } = selectSharedSettings(global);\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n\n    return {\n      isChatWithSelf,\n      currentUserId,\n      groupChatMembers: chatFullInfo?.members,\n      recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      shouldSuggestCustomEmoji,\n      customEmojiForEmoji: customEmojis.forEmoji.stickers,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      attachmentSettings,\n    };\n  },\n)(AttachmentModal));\n","import type { ChangeEvent } from 'react';\nimport type { ElementRef } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport Modal from '../../ui/Modal';\nimport RadioGroup from '../../ui/RadioGroup';\nimport TextArea from '../../ui/TextArea';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonymous?: boolean;\n  isQuiz?: boolean;\n  maxOptionsCount?: number;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst FALLBACK_MAX_OPTIONS_COUNT = 12;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal = ({\n  isOpen,\n  isQuiz,\n  shouldBeAnonymous,\n  maxOptionsCount = FALLBACK_MAX_OPTIONS_COUNT,\n  onSend,\n  onClear,\n}: OwnProps) => {\n  const questionInputRef = useRef<HTMLInputElement>();\n  const optionsListRef = useRef<HTMLDivElement>();\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<number | undefined>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useOldLang();\n\n  const handleSolutionChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setSolution(e.target.value);\n  });\n\n  const focusInput = useLastCallback((ref: ElementRef<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption(undefined);\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  const addNewOption = useLastCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n\n    requestNextMutation(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      requestMeasure(() => {\n        list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n      });\n    });\n  });\n\n  const handleCreate = useLastCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const isNoCorrectOptionError = isQuizMode && (correctOption === undefined || !options[correctOption].trim());\n\n    const answers = options\n      .map((text, index) => {\n        text = text.trim();\n\n        if (!text) return undefined;\n\n        return {\n          text: {\n            text,\n          },\n          option: String(index),\n          ...(index === correctOption && { correct: true }),\n        };\n      }).filter(Boolean);\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    if (!questionTrimmed || answers.length < 2) {\n      setQuestion(questionTrimmed);\n      if (answers.length) {\n        const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter(Boolean);\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isNoCorrectOptionError) {\n      setHasErrors(true);\n      return;\n    }\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: {\n          text: questionTrimmed,\n        },\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseHtmlAsFormattedText(solution.substring(0, MAX_SOLUTION_LENGTH)))\n        || {};\n\n      payload.quiz = {\n        correctAnswers: [String(correctOption)],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  });\n\n  const updateOption = useLastCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < maxOptionsCount) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  });\n\n  const removeOption = useLastCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n\n    if (correctOption !== undefined) {\n      if (correctOption === index) {\n        setCorrectOption(undefined);\n      } else if (index < correctOption) {\n        setCorrectOption(correctOption - 1);\n      }\n    }\n\n    requestNextMutation(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  });\n\n  const handleCorrectOptionChange = useLastCallback((newValue: string) => {\n    setCorrectOption(Number(newValue));\n  });\n\n  const handleIsAnonymousChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  });\n\n  const handleMultipleAnswersChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  });\n\n  const handleQuizModeChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  });\n\n  const handleKeyPress = useLastCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  });\n\n  const handleQuestionChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  });\n\n  const getQuestionError = useLastCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  });\n\n  const getOptionsError = useLastCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  });\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <Icon name=\"close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          maxLength={MAX_OPTION_LENGTH}\n          label={index !== options.length - 1 || options.length === maxOptionsCount\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n\n            onClick={() => removeOption(index)}\n          >\n            <Icon name=\"close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: !options[index].trim() }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (correctOption === undefined || !optionsTrimmed[correctOption]) && (\n      <p className=\"poll-error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            selected={String(correctOption)}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        <div className=\"dialog-checkbox-group\">\n          {!shouldBeAnonymous && (\n            <Checkbox\n              label={lang('PollAnonymous')}\n              checked={isAnonymous}\n              onChange={handleIsAnonymousChange}\n            />\n          )}\n          <Checkbox\n            label={lang('PollMultiple')}\n            checked={isMultipleAnswers}\n            disabled={isQuizMode}\n            onChange={handleMultipleAnswersChange}\n          />\n          <Checkbox\n            label={lang('PollQuiz')}\n            checked={isQuizMode}\n            disabled={isMultipleAnswers || isQuiz !== undefined}\n            onChange={handleQuizModeChange}\n          />\n        </div>\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <TextArea\n              value={solution}\n              onChange={handleSolutionChange}\n              noReplaceNewlines\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport { BASE_URL, IS_PACKAGED_ELECTRON } from '../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji/emoji';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `${IS_PACKAGED_ELECTRON ? BASE_URL : '.'}/img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n          draggable={false}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { EMOJI_SIZE_PICKER, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransitionDeprecated from '../../../hooks/useMediaTransitionDeprecated';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 8;\nconst EMOJI_MARGIN = 0.625 * REM;\nconst EMOJI_VERTICAL_MARGIN = 0.25 * REM;\nconst EMOJI_VERTICAL_MARGIN_MOBILE = 0.5 * REM;\nconst MOBILE_CONTAINER_PADDING = 0.5 * REM;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransitionDeprecated(shouldRender);\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  const emojisPerRow = isMobile\n    ? Math.floor(\n      (windowSize.get().width - MOBILE_CONTAINER_PADDING + EMOJI_MARGIN) / (EMOJI_SIZE_PICKER + EMOJI_MARGIN),\n    )\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow)\n    * (EMOJI_SIZE_PICKER + (isMobile ? EMOJI_VERTICAL_MARGIN_MOBILE : EMOJI_VERTICAL_MARGIN));\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { IconName } from '../../../types/icons';\nimport type {\n  EmojiData,\n  EmojiModule,\n  EmojiRawData,\n} from '../../../util/emoji/emoji';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport animateScroll from '../../../util/animateScroll';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { uncompressEmoji } from '../../../util/emoji/emoji';\nimport { pick } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useScrolledState from '../../../hooks/useScrolledState';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\n\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, IconName> = {\n  recent: 'recent',\n  people: 'smile',\n  nature: 'animals',\n  foods: 'eats',\n  activity: 'sport',\n  places: 'car',\n  objects: 'lamp',\n  symbols: 'language',\n  flags: 'flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\nconst SMOOTH_SCROLL_DISTANCE = 100;\nconst FOCUS_MARGIN = 3.25 * REM;\nconst HEADER_BUTTON_WIDTH = 2.625 * REM; // Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule> | undefined;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className,\n  recentEmojis,\n  onEmojiSelect,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const headerRef = useRef<HTMLDivElement>();\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n  const { isMobile } = useAppLayout();\n  const {\n    handleScroll: handleContentScroll,\n    isAtBeginning: shouldHideTopBorder,\n  } = useScrolledState();\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const minIntersectingIndex = categoryIntersections.reduce((lowestIndex, isIntersecting, index) => {\n      return isIntersecting && index < lowestIndex ? index : lowestIndex;\n    }, Infinity);\n\n    if (minIntersectingIndex === Infinity) {\n      return;\n    }\n\n    setActiveCategoryIndex(minIntersectingIndex);\n  });\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n  const shouldRenderContent = emojis && canRenderContents;\n\n  useHorizontalScroll(headerRef, !(isMobile && shouldRenderContent));\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    animateHorizontalScroll(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useOldLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useLastCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = containerRef.current!.closest<HTMLElement>('.SymbolMenu-main')!\n      .querySelector<HTMLElement>(`#emoji-category-${index}`)!;\n    animateScroll({\n      container: containerRef.current!,\n      element: categoryEl,\n      position: 'start',\n      margin: FOCUS_MARGIN,\n      maxDistance: SMOOTH_SCROLL_DISTANCE,\n    });\n  });\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  });\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <Icon name={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!shouldRenderContent) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  const headerClassName = buildClassName(\n    'EmojiPicker-header',\n    !shouldHideTopBorder && 'with-top-border',\n  );\n\n  return (\n    <div className={containerClassName}>\n      <div\n        ref={headerRef}\n        className={headerClassName}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        onScroll={handleContentScroll}\n        className={buildClassName('EmojiPicker-main', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { getVideoMediaHash, getVideoPreviewMediaHash } from '../../global/helpers';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Spinner from '../ui/Spinner';\nimport Icon from './icons/Icon';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  const ref = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewHash = !gif.hasVideoPreview && gif.thumbnail && getVideoMediaHash(gif, 'pictogram');\n  const previewBlobUrl = useMedia(previewHash, !loadAndPlay);\n\n  const [withThumb] = useState(gif.thumbnail?.dataUri && !previewBlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, !withThumb);\n\n  const videoHash = getVideoPreviewMediaHash(gif) || getVideoMediaHash(gif, 'full');\n  const videoData = useMedia(videoHash, !loadAndPlay);\n\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!.closest('.custom-scroll, .no-scrollbar'));\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.gif-context-menu .bubble'));\n\n  const handleClick = useLastCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  });\n\n  const handleUnsaveClick = useLastCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  });\n\n  const handleContextDelete = useLastCallback(() => {\n    onUnsaveClick?.(gif);\n  });\n\n  const handleSendQuiet = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  });\n\n  const handleSendScheduled = useLastCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  });\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          noFastClick\n          onClick={handleUnsaveClick}\n        >\n          <Icon name=\"close\" className=\"gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {withThumb && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n          draggable={false}\n        />\n      )}\n      {shouldRenderVideo && (\n        <OptimizedVideo\n          canPlay\n          src={videoData}\n          autoPlay\n          loop\n          muted\n          disablePictureInPicture\n          playsInline\n          preload=\"none\"\n\n          {...bufferingHandlers}\n        />\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || withThumb ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport GifButton from '../../common/GifButton';\nimport Loading from '../../ui/Loading';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs?: boolean;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useLastCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  });\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div>\n      <div\n        ref={containerRef}\n        className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {!canSendGifs ? (\n          <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n        ) : canRenderContents && savedGifs && savedGifs.length ? (\n          savedGifs.map((gif) => (\n            <GifButton\n              key={gif.id}\n              gif={gif}\n              observeIntersection={observeIntersection}\n              isDisabled={!loadAndPlay}\n              onClick={canSendGifs ? onGifSelect : undefined}\n              onUnsaveClick={handleUnsaveClick}\n              isSavedMessages={isSavedMessages}\n            />\n          ))\n        ) : canRenderContents && savedGifs ? (\n          <div className=\"picker-disabled\">No saved GIFs.</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n  canSearch?: boolean;\n};\n\nexport enum SymbolMenuTabs {\n  Emoji,\n  CustomEmoji,\n  Stickers,\n  GIFs,\n}\n\nexport const SYMBOL_MENU_TAB_TITLES: Record<SymbolMenuTabs, string> = {\n  [SymbolMenuTabs.Emoji]: 'Emoji',\n  [SymbolMenuTabs.CustomEmoji]: 'StickersList.EmojiItem',\n  [SymbolMenuTabs.Stickers]: 'AccDescrStickers',\n  [SymbolMenuTabs.GIFs]: 'GifsTab',\n};\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.CustomEmoji]: 'icon-favorite',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen, isAttachmentModal,\n  canSendPlainText, canSearch,\n}) => {\n  const lang = useOldLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={lang(SYMBOL_MENU_TAB_TITLES[tab])}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={buildClassName('icon', SYMBOL_MENU_TAB_ICONS[tab])} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useLastCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  });\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && activeTab !== SymbolMenuTabs.CustomEmoji && canSearch && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <Icon name=\"search\" />\n        </Button>\n      )}\n\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.Emoji)}\n      {canSendPlainText && renderTabButton(SymbolMenuTabs.CustomEmoji)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.Stickers)}\n      {!isAttachmentModal && renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {(activeTab === SymbolMenuTabs.Emoji || activeTab === SymbolMenuTabs.CustomEmoji) && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <Icon name=\"delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\nimport type { ThreadId } from '../../../types';\nimport type { MenuPositionOptions } from '../../ui/Menu';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { selectIsContextMenuTranslucent, selectTabState } from '../../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport CustomEmojiPicker from '../../common/CustomEmojiPicker';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Portal from '../../ui/Portal';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport GifPicker from './GifPicker';\nimport StickerPicker from './StickerPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\nconst STICKERS_TAB_INDEX = 2;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  canSendStickers?: boolean;\n  canSendGifs?: boolean;\n  isMessageComposer?: boolean;\n  idPrefix: string;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onStickerSelect?: (\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    shouldSchedule?: boolean,\n    shouldPreserveInput?: boolean,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => void;\n  onGifSelect?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: GlobalActions['addRecentEmoji'];\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  className?: string;\n  isAttachmentModal?: boolean;\n  canSendPlainText?: boolean;\n}\n& MenuPositionOptions;\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n  isBackgroundTranslucent?: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isMessageComposer,\n  isLeftColumnShown,\n  idPrefix,\n  isAttachmentModal,\n  canSendPlainText,\n  className,\n  isBackgroundTranslucent,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n  ...menuPositionOptions\n}) => {\n  const [activeTab, setActiveTab] = useState<SymbolMenuTabs>(SymbolMenuTabs.Emoji);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n  const [recentCustomEmojis, setRecentCustomEmojis] = useState<string[]>([]);\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, onClose, false, false);\n\n  const lang = useOldLang();\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  // If we can't send plain text, we should always show the stickers tab\n  useEffect(() => {\n    if (canSendPlainText) return;\n    setActiveTab(STICKERS_TAB_INDEX);\n  }, [canSendPlainText]);\n\n  useLayoutEffect(() => {\n    if (!isMobile || !isOpen || isAttachmentModal) {\n      return undefined;\n    }\n\n    document.body.classList.add('enable-symbol-menu-transforms');\n    document.body.classList.add('is-symbol-menu-open');\n\n    return () => {\n      document.body.classList.remove('is-symbol-menu-open');\n\n      setTimeout(() => {\n        requestMutation(() => {\n          document.body.classList.remove('enable-symbol-menu-transforms');\n        });\n      }, ANIMATION_DURATION);\n    };\n  }, [isAttachmentModal, isMobile, isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentEmoji]);\n\n  const handleEmojiSelect = useLastCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => [...emojis, name]);\n\n    onEmojiSelect(emoji);\n  });\n\n  const recentCustomEmojisRef = useRef(recentCustomEmojis);\n  recentCustomEmojisRef.current = recentCustomEmojis;\n  useEffect(() => {\n    if (!recentCustomEmojisRef.current.length || isOpen) {\n      return;\n    }\n\n    recentCustomEmojisRef.current.forEach((documentId) => {\n      addRecentCustomEmoji({\n        documentId,\n      });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, addRecentCustomEmoji]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    setRecentCustomEmojis((ids) => [...ids, emoji.id]);\n\n    onCustomEmojiSelect(emoji);\n  });\n\n  const handleSearch = useLastCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    onStickerSelect?.(sticker, isSilent, shouldSchedule, true, canUpdateStickerSetsOrder);\n  });\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.CustomEmoji:\n        return (\n          <CustomEmojiPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            idPrefix={idPrefix}\n            loadAndPlay={isOpen && (isActive || isFrom)}\n            chatId={chatId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            isHidden={!isOpen || !isActive}\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            idPrefix={idPrefix}\n            canSendStickers={canSendStickers}\n            noContextMenus={!isMessageComposer}\n            chatId={chatId}\n            threadId={threadId}\n            isTranslucent={!isMobile && isBackgroundTranslucent}\n            onStickerSelect={handleStickerSelect}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition\n            name=\"slide\"\n            activeKey={activeTab}\n            renderCount={Object.values(SYMBOL_MENU_TAB_TITLES).length}\n          >\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {isMobile && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <Icon name=\"close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        canSearch={isMessageComposer}\n        onSearchOpen={handleSearch}\n        isAttachmentModal={isAttachmentModal}\n        canSendPlainText={canSendPlainText}\n      />\n    </>\n  );\n\n  if (isMobile) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const mobileClassName = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n      isAttachmentModal && 'in-attachment-modal',\n      isMessageComposer && 'in-middle-column',\n    );\n\n    if (isAttachmentModal) {\n      return (\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      );\n    }\n\n    return (\n      <Portal>\n        <div className={mobileClassName}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      onClose={onClose}\n      withPortal={isAttachmentModal}\n      className={buildClassName('SymbolMenu', className)}\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n\n      {...(isAttachmentModal ? menuPositionOptions : {\n        positionX: 'left',\n        positionY: 'bottom',\n      })}\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: selectTabState(global).isLeftColumnShown,\n      isBackgroundTranslucent: selectIsContextMenuTranslucent(global),\n    };\n  },\n)(SymbolMenu));\n","import { memo } from '../../../lib/teact/teact';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\nimport ListItem from '../../ui/ListItem';\n\nimport './ChatCommand.scss';\n\ntype OwnProps<T = undefined> = {\n  command: string;\n  description: string;\n  peer?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  clickArg: T;\n  onClick: (arg: T) => void;\n};\n\nconst ChatCommand = <T,>({\n  withAvatar,\n  focus,\n  command,\n  description,\n  peer,\n  clickArg,\n  onClick,\n}: OwnProps<T>) => {\n  const handleClick = useLastCallback(() => {\n    onClick(clickArg);\n  });\n\n  return (\n    <ListItem\n      key={command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      onClick={handleClick}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" peer={peer} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">\n          /\n          {command}\n        </span>\n        <span className=\"subtitle\">{renderText(description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(ChatCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiBotCommand, ApiMessage, ApiQuickReply, ApiUser,\n} from '../../../api/types';\nimport type { Signal } from '../../../util/signals';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport freezeWhenClosed from '../../../util/hoc/freezeWhenClosed';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ChatCommand from './ChatCommand';\n\nimport styles from './ChatCommandTooltip.module.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  quickReplies?: ApiQuickReply[];\n  quickReplyMessages?: Record<number, ApiMessage>;\n  self: ApiUser;\n  getHtml: Signal<string>;\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype QuickReplyWithDescription = {\n  id: number;\n  command: string;\n  description: string;\n};\n\nconst ChatCommandTooltip: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  withUsername,\n  botCommands,\n  quickReplies,\n  quickReplyMessages,\n  self,\n  getHtml,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand, sendQuickReply } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useLastCallback(({ botId, command }: ApiBotCommand) => {\n    // No need for expensive global updates on users and chats, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const bot = usersById[botId];\n\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${getMainUsername(bot)}` : ''}`,\n    });\n    onClick();\n  });\n\n  const handleSendQuickReply = useLastCallback((id: number) => {\n    sendQuickReply({ chatId, quickReplyId: id });\n    onClick();\n  });\n\n  const quickRepliesWithDescription = useMemo(() => {\n    if (!quickReplies?.length || !quickReplyMessages) return undefined;\n    return quickReplies.map((reply) => {\n      const message = quickReplyMessages[reply.topMessageId];\n      return {\n        id: reply.id,\n        command: reply.shortcut,\n        description: message?.content.text?.text || '',\n      } satisfies QuickReplyWithDescription;\n    });\n  }, [quickReplies, quickReplyMessages]);\n\n  const handleKeyboardSelect = useLastCallback((item: ApiBotCommand | QuickReplyWithDescription) => {\n    if (!item.command.startsWith(getHtml().slice(1))) {\n      return false;\n    }\n\n    if ('id' in item) {\n      handleSendQuickReply(item.id);\n    } else {\n      handleSendCommand(item);\n    }\n\n    return true;\n  });\n\n  const keyboardNavigationItems = useMemo(() => {\n    if (!botCommands && !quickRepliesWithDescription) return undefined;\n    return ([] as (ApiBotCommand | QuickReplyWithDescription)[])\n      .concat(quickRepliesWithDescription || [], botCommands || []);\n  }, [botCommands, quickRepliesWithDescription]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: keyboardNavigationItems,\n    onSelect: handleKeyboardSelect,\n    onClose,\n  });\n\n  const isEmpty = (botCommands && !botCommands.length) || (quickReplies && !quickReplies.length);\n\n  useEffect(() => {\n    if (isEmpty) {\n      onClose();\n    }\n  }, [isEmpty, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  if (!shouldRender || isEmpty) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {quickRepliesWithDescription?.map((reply, index) => (\n        <ChatCommand\n          key={`quickReply_${reply.id}`}\n          command={reply.command}\n          description={reply.description}\n          peer={self}\n          withAvatar\n          clickArg={reply.id}\n          onClick={handleSendQuickReply}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n      {botCommands?.map((command, index) => (\n        <ChatCommand\n          key={`${command.botId}_${command.command}`}\n          command={command.command}\n          description={command.description}\n          // No need for expensive global updates on users and chats, so we avoid them\n          peer={getGlobal().users.byId[command.botId]}\n          withAvatar\n          clickArg={command}\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex + (quickRepliesWithDescription?.length || 0) === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(freezeWhenClosed(ChatCommandTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"iaTB59vy\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport ChatCommand from './ChatCommand';\n\nimport './BotCommandMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n  const { isMobile } = useAppLayout();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, isMobile);\n\n  const handleClick = useLastCallback((command: string) => {\n    sendBotCommand({\n      command: `/${command}`,\n    });\n    onClose();\n  });\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <ChatCommand\n          key={botCommand.command}\n          command={botCommand.command}\n          description={botCommand.description}\n          clickArg={botCommand.command}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ThreadId } from '../../../types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  onStickerSelect,\n  onClose,\n  stickers,\n  isSavedMessages,\n  isCurrentUserPremium,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={isOpen ? onStickerSelect : undefined}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    return { stickers, isSavedMessages, isCurrentUserPremium };\n  },\n)(StickerTooltip));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"_8sFuAomM\",\"emojiButton\":\"crWzZ2jr\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { GlobalActions } from '../../../global';\n\nimport { COMPOSER_EMOJI_SIZE_PICKER } from '../../../config';\nimport { selectIsChatWithSelf, selectIsCurrentUserPremium } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport StickerButton from '../../common/StickerButton';\nimport Loading from '../../ui/Loading';\n\nimport styles from './CustomEmojiTooltip.module.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isOpen: boolean;\n  addRecentCustomEmoji: GlobalActions['addRecentCustomEmoji'];\n  onCustomEmojiSelect: (customEmoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  noPlay?: boolean;\n};\n\ntype StateProps = {\n  customEmoji?: ApiSticker[];\n  isSavedMessages?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst CustomEmojiTooltip: FC<OwnProps & StateProps> = ({\n  isOpen,\n  addRecentCustomEmoji,\n  onCustomEmojiSelect,\n  onClose,\n  customEmoji,\n  isSavedMessages,\n  isCurrentUserPremium,\n  noPlay,\n}) => {\n  const { clearCustomEmojiForEmoji } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const prevStickers = usePreviousDeprecated(customEmoji, true);\n  const displayedStickers = customEmoji || prevStickers;\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n\n  const handleCustomEmojiSelect = useLastCallback((ce: ApiSticker) => {\n    if (!isOpen) return;\n    onCustomEmojiSelect(ce);\n    addRecentCustomEmoji({\n      documentId: ce.id,\n    });\n    clearCustomEmojiForEmoji();\n  });\n\n  const className = buildClassName(\n    styles.root,\n    'composer-tooltip custom-scroll-x',\n    transitionClassNames,\n    !displayedStickers?.length && styles.hidden,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            className={styles.emojiButton}\n            size={COMPOSER_EMOJI_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={handleCustomEmojiSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n            isCurrentUserPremium={isCurrentUserPremium}\n            noPlay={noPlay}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers: customEmoji } = global.customEmojis.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    return { customEmoji, isSavedMessages, isCurrentUserPremium };\n  },\n)(CustomEmojiTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction,\n  ApiReaction,\n} from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport ReactionSelector from '../message/reactions/ReactionSelector';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  canSchedule?: boolean;\n  canScheduleUntilOnline?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onSendWhenOnline?: NoneToVoidFunction;\n  onRemoveEffect?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n  chatId?: string;\n  withEffects?: boolean;\n  hasCurrentEffect?: boolean;\n  effectReactions?: ApiReaction[];\n  allAvailableReactions?: ApiAvailableReaction[];\n  onToggleReaction?: (reaction: ApiReaction) => void;\n  canBuyPremium?: boolean;\n  isCurrentUserPremium?: boolean;\n  isInSavedMessages?: boolean;\n  isInStoryViewer?: boolean;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst ANIMATION_DURATION = 200;\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  canSchedule,\n  canScheduleUntilOnline,\n  onSendSilent,\n  onSendSchedule,\n  onSendWhenOnline,\n  onRemoveEffect,\n  onClose,\n  onCloseAnimationEnd,\n  chatId,\n  withEffects,\n  hasCurrentEffect,\n  effectReactions,\n  allAvailableReactions,\n  onToggleReaction,\n  canBuyPremium,\n  isCurrentUserPremium,\n  isInSavedMessages,\n  isInStoryViewer,\n  canPlayAnimatedEmojis,\n}) => {\n  const {\n    openEffectPicker,\n  } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const [displayScheduleUntilOnline, setDisplayScheduleUntilOnline] = useState(false);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const [areItemsHidden, hideItems, showItems] = useFlag();\n\n  useEffectWithPrevDeps(([prevIsOpen]) => {\n    // Avoid context menu item shuffling when opened\n    if (isOpen && !prevIsOpen) {\n      showItems();\n      setDisplayScheduleUntilOnline(Boolean(canScheduleUntilOnline));\n    }\n  }, [isOpen, canScheduleUntilOnline]);\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const handleOpenMessageEffectsPicker = useLastCallback((position: IAnchorPosition) => {\n    hideItems();\n    if (chatId) openEffectPicker({ chatId, position });\n  });\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className={buildClassName(\n        'CustomSendMenu', 'fluid', 'with-menu-transitions', withEffects && 'with-effects',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n\n      {withEffects && !isInStoryViewer && (\n        <ReactionSelector\n          allAvailableReactions={allAvailableReactions}\n          effectReactions={effectReactions}\n          currentReactions={undefined}\n          onToggleReaction={onToggleReaction!}\n          isPrivate\n          isReady={isReady}\n          canBuyPremium={canBuyPremium}\n          isCurrentUserPremium={isCurrentUserPremium}\n          isInSavedMessages={isInSavedMessages}\n          isForEffects\n          canPlayAnimatedEmojis={canPlayAnimatedEmojis}\n          onShowMore={handleOpenMessageEffectsPicker}\n          onClose={onClose}\n          className={buildClassName(areItemsHidden && 'ReactionSelector-hidden')}\n        />\n      )}\n\n      <div\n        className={buildClassName(\n          'CustomSendMenu_items',\n          areItemsHidden && 'CustomSendMenu_items-hidden',\n        )}\n        dir={oldLang.isRtl ? 'rtl' : undefined}\n      >\n        {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{oldLang('SendWithoutSound')}</MenuItem>}\n        {canSchedule && onSendSchedule && (\n          <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n            {oldLang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n        )}\n        {canSchedule && onSendSchedule && displayScheduleUntilOnline && (\n          <MenuItem icon=\"user-online\" onClick={onSendWhenOnline}>\n            {oldLang('SendWhenOnline')}\n          </MenuItem>\n        )}\n        {withEffects && hasCurrentEffect && (\n          <MenuItem icon=\"delete\" onClick={onRemoveEffect}>\n            {lang('RemoveEffect')}\n          </MenuItem>\n        )}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { IAnchorPosition } from '../../../types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\n\nimport { EDITABLE_INPUT_ID } from '../../../config';\nimport { ensureProtocol } from '../../../util/browser/url';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getKeyFromEvent from '../../../util/getKeyFromEvent';\nimport stopEvent from '../../../util/stopEvent';\nimport { INPUT_CUSTOM_EMOJI_SELECTOR } from './helpers/customEmoji';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport useVirtualBackdrop from '../../../hooks/useVirtualBackdrop';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './TextFormatter.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  anchorPosition?: IAnchorPosition;\n  selectedRange?: Range;\n  setSelectedRange: (range: Range) => void;\n  onClose: () => void;\n};\n\ninterface ISelectedTextFormats {\n  bold?: boolean;\n  italic?: boolean;\n  underline?: boolean;\n  strikethrough?: boolean;\n  monospace?: boolean;\n  spoiler?: boolean;\n}\n\nconst TEXT_FORMAT_BY_TAG_NAME: Record<string, keyof ISelectedTextFormats> = {\n  B: 'bold',\n  STRONG: 'bold',\n  I: 'italic',\n  EM: 'italic',\n  U: 'underline',\n  DEL: 'strikethrough',\n  CODE: 'monospace',\n  SPAN: 'spoiler',\n};\nconst fragmentEl = document.createElement('div');\n\nconst TextFormatter: FC<OwnProps> = ({\n  isOpen,\n  anchorPosition,\n  selectedRange,\n  setSelectedRange,\n  onClose,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const linkUrlInputRef = useRef<HTMLInputElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen);\n  const [isLinkControlOpen, openLinkControl, closeLinkControl] = useFlag();\n  const [linkUrl, setLinkUrl] = useState('');\n  const [isEditingLink, setIsEditingLink] = useState(false);\n  const [inputClassName, setInputClassName] = useState<string | undefined>();\n  const [selectedTextFormats, setSelectedTextFormats] = useState<ISelectedTextFormats>({});\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClose) : undefined), [isOpen, onClose]);\n  useVirtualBackdrop(\n    isOpen,\n    containerRef,\n    onClose,\n    true,\n  );\n\n  useEffect(() => {\n    if (isLinkControlOpen) {\n      linkUrlInputRef.current!.focus();\n    } else {\n      setLinkUrl('');\n      setIsEditingLink(false);\n    }\n  }, [isLinkControlOpen]);\n\n  useEffect(() => {\n    if (!shouldRender) {\n      closeLinkControl();\n      setSelectedTextFormats({});\n      setInputClassName(undefined);\n    }\n  }, [closeLinkControl, shouldRender]);\n\n  useEffect(() => {\n    if (!isOpen || !selectedRange) {\n      return;\n    }\n\n    const selectedFormats: ISelectedTextFormats = {};\n    let { parentElement } = selectedRange.commonAncestorContainer;\n    while (parentElement && parentElement.id !== EDITABLE_INPUT_ID) {\n      const textFormat = TEXT_FORMAT_BY_TAG_NAME[parentElement.tagName];\n      if (textFormat) {\n        selectedFormats[textFormat] = true;\n      }\n\n      parentElement = parentElement.parentElement;\n    }\n\n    setSelectedTextFormats(selectedFormats);\n  }, [isOpen, selectedRange, openLinkControl]);\n\n  const restoreSelection = useLastCallback(() => {\n    if (!selectedRange) {\n      return;\n    }\n\n    const selection = window.getSelection();\n    if (selection) {\n      selection.removeAllRanges();\n      selection.addRange(selectedRange);\n    }\n  });\n\n  const updateSelectedRange = useLastCallback(() => {\n    const selection = window.getSelection();\n    if (selection) {\n      setSelectedRange(selection.getRangeAt(0));\n    }\n  });\n\n  const getSelectedText = useLastCallback((shouldDropCustomEmoji?: boolean) => {\n    if (!selectedRange) {\n      return undefined;\n    }\n    fragmentEl.replaceChildren(selectedRange.cloneContents());\n    if (shouldDropCustomEmoji) {\n      fragmentEl.querySelectorAll(INPUT_CUSTOM_EMOJI_SELECTOR).forEach((el) => {\n        el.replaceWith(el.getAttribute('alt')!);\n      });\n    }\n    return fragmentEl.innerHTML;\n  });\n\n  const getSelectedElement = useLastCallback(() => {\n    if (!selectedRange) {\n      return undefined;\n    }\n\n    return selectedRange.commonAncestorContainer.parentElement;\n  });\n\n  function updateInputStyles() {\n    const input = linkUrlInputRef.current;\n    if (!input) {\n      return;\n    }\n\n    const { offsetWidth, scrollWidth, scrollLeft } = input;\n    if (scrollWidth <= offsetWidth) {\n      setInputClassName(undefined);\n      return;\n    }\n\n    let className = '';\n    if (scrollLeft < scrollWidth - offsetWidth) {\n      className = 'mask-right';\n    }\n    if (scrollLeft > 0) {\n      className += ' mask-left';\n    }\n\n    setInputClassName(className);\n  }\n\n  function handleLinkUrlChange(e: React.ChangeEvent<HTMLInputElement>) {\n    setLinkUrl(e.target.value);\n    updateInputStyles();\n  }\n\n  function getFormatButtonClassName(key: keyof ISelectedTextFormats) {\n    if (selectedTextFormats[key]) {\n      return 'active';\n    }\n\n    if (key === 'monospace' || key === 'strikethrough') {\n      if (Object.keys(selectedTextFormats).some(\n        (fKey) => fKey !== key && Boolean(selectedTextFormats[fKey as keyof ISelectedTextFormats]),\n      )) {\n        return 'disabled';\n      }\n    } else if (selectedTextFormats.monospace || selectedTextFormats.strikethrough) {\n      return 'disabled';\n    }\n\n    return undefined;\n  }\n\n  const handleSpoilerText = useLastCallback(() => {\n    if (selectedTextFormats.spoiler) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.dataset.entityType !== ApiMessageEntityTypes.Spoiler\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        spoiler: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand(\n      'insertHTML', false, `<span class=\"spoiler\" data-entity-type=\"${ApiMessageEntityTypes.Spoiler}\">${text}</span>`,\n    );\n    onClose();\n  });\n\n  const handleBoldText = useLastCallback(() => {\n    setSelectedTextFormats((selectedFormats) => {\n      // Somehow re-applying 'bold' command to already bold text doesn't work\n      document.execCommand(selectedFormats.bold ? 'removeFormat' : 'bold');\n      Object.keys(selectedFormats).forEach((key) => {\n        if ((key === 'italic' || key === 'underline') && Boolean(selectedFormats[key])) {\n          document.execCommand(key);\n        }\n      });\n\n      updateSelectedRange();\n      return {\n        ...selectedFormats,\n        bold: !selectedFormats.bold,\n      };\n    });\n  });\n\n  const handleItalicText = useLastCallback(() => {\n    document.execCommand('italic');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      italic: !selectedFormats.italic,\n    }));\n  });\n\n  const handleUnderlineText = useLastCallback(() => {\n    document.execCommand('underline');\n    updateSelectedRange();\n    setSelectedTextFormats((selectedFormats) => ({\n      ...selectedFormats,\n      underline: !selectedFormats.underline,\n    }));\n  });\n\n  const handleStrikethroughText = useLastCallback(() => {\n    if (selectedTextFormats.strikethrough) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'DEL'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        strikethrough: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText();\n    document.execCommand('insertHTML', false, `<del>${text}</del>`);\n    onClose();\n  });\n\n  const handleMonospaceText = useLastCallback(() => {\n    if (selectedTextFormats.monospace) {\n      const element = getSelectedElement();\n      if (\n        !selectedRange\n        || !element\n        || element.tagName !== 'CODE'\n        || !element.textContent\n      ) {\n        return;\n      }\n\n      element.replaceWith(element.textContent);\n      setSelectedTextFormats((selectedFormats) => ({\n        ...selectedFormats,\n        monospace: false,\n      }));\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    document.execCommand('insertHTML', false, `<code class=\"text-entity-code\" dir=\"auto\">${text}</code>`);\n    onClose();\n  });\n\n  const handleLinkUrlConfirm = useLastCallback(() => {\n    const formattedLinkUrl = (ensureProtocol(linkUrl) || '').split('%').map(encodeURI).join('%');\n\n    if (isEditingLink) {\n      const element = getSelectedElement();\n      if (!element || element.tagName !== 'A') {\n        return;\n      }\n\n      (element as HTMLAnchorElement).href = formattedLinkUrl;\n\n      onClose();\n\n      return;\n    }\n\n    const text = getSelectedText(true);\n    restoreSelection();\n    document.execCommand(\n      'insertHTML',\n      false,\n      `<a href=${formattedLinkUrl} class=\"text-entity-link\" dir=\"auto\">${text}</a>`,\n    );\n    onClose();\n  });\n\n  const handleKeyDown = useLastCallback((e: KeyboardEvent) => {\n    const HANDLERS_BY_KEY: Record<string, AnyToVoidFunction> = {\n      k: openLinkControl,\n      b: handleBoldText,\n      u: handleUnderlineText,\n      i: handleItalicText,\n      m: handleMonospaceText,\n      s: handleStrikethroughText,\n      p: handleSpoilerText,\n    };\n\n    const handler = HANDLERS_BY_KEY[getKeyFromEvent(e)];\n\n    if (\n      e.altKey\n      || !(e.ctrlKey || e.metaKey)\n      || !handler\n    ) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopPropagation();\n    handler();\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      document.addEventListener('keydown', handleKeyDown);\n    }\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, handleKeyDown]);\n\n  const lang = useOldLang();\n\n  function handleContainerKeyDown(e: React.KeyboardEvent<HTMLDivElement>) {\n    if (e.key === 'Enter' && isLinkControlOpen) {\n      handleLinkUrlConfirm();\n      e.preventDefault();\n    }\n  }\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'TextFormatter',\n    transitionClassNames,\n    isLinkControlOpen && 'link-control-shown',\n  );\n\n  const linkUrlConfirmClassName = buildClassName(\n    'TextFormatter-link-url-confirm',\n    Boolean(linkUrl.length) && 'shown',\n  );\n\n  const style = anchorPosition\n    ? `left: ${anchorPosition.x}px; top: ${anchorPosition.y}px;--text-formatter-left: ${anchorPosition.x}px;`\n    : '';\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      style={style}\n      onKeyDown={handleContainerKeyDown}\n      // Prevents focus loss when clicking on the toolbar\n      onMouseDown={stopEvent}\n    >\n      <div className=\"TextFormatter-buttons\">\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Spoiler text\"\n          className={getFormatButtonClassName('spoiler')}\n          onClick={handleSpoilerText}\n        >\n          <Icon name=\"eye-crossed\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Bold text\"\n          className={getFormatButtonClassName('bold')}\n          onClick={handleBoldText}\n        >\n          <Icon name=\"bold\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Italic text\"\n          className={getFormatButtonClassName('italic')}\n          onClick={handleItalicText}\n        >\n          <Icon name=\"italic\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Underlined text\"\n          className={getFormatButtonClassName('underline')}\n          onClick={handleUnderlineText}\n        >\n          <Icon name=\"underlined\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Strikethrough text\"\n          className={getFormatButtonClassName('strikethrough')}\n          onClick={handleStrikethroughText}\n        >\n          <Icon name=\"strikethrough\" />\n        </Button>\n        <Button\n          color=\"translucent\"\n          ariaLabel=\"Monospace text\"\n          className={getFormatButtonClassName('monospace')}\n          onClick={handleMonospaceText}\n        >\n          <Icon name=\"monospace\" />\n        </Button>\n        <div className=\"TextFormatter-divider\" />\n        <Button color=\"translucent\" ariaLabel={lang('TextFormat.AddLinkTitle')} onClick={openLinkControl}>\n          <Icon name=\"link\" />\n        </Button>\n      </div>\n\n      <div className=\"TextFormatter-link-control\">\n        <div className=\"TextFormatter-buttons\">\n          <Button color=\"translucent\" ariaLabel={lang('Cancel')} onClick={closeLinkControl}>\n            <Icon name=\"arrow-left\" />\n          </Button>\n          <div className=\"TextFormatter-divider\" />\n\n          <div\n            className={buildClassName('TextFormatter-link-url-input-wrapper', inputClassName)}\n          >\n            <input\n              ref={linkUrlInputRef}\n              className=\"TextFormatter-link-url-input\"\n              type=\"text\"\n              value={linkUrl}\n              placeholder=\"Enter URL...\"\n              autoComplete=\"off\"\n              inputMode=\"url\"\n              dir=\"auto\"\n              onChange={handleLinkUrlChange}\n              onScroll={updateInputStyles}\n            />\n          </div>\n\n          <div className={linkUrlConfirmClassName}>\n            <div className=\"TextFormatter-divider\" />\n            <Button\n              color=\"translucent\"\n              ariaLabel={lang('Save')}\n              className=\"color-primary\"\n              onClick={handleLinkUrlConfirm}\n            >\n              <Icon name=\"check\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(TextFormatter);\n","export default function getKeyFromEvent(e: KeyboardEvent) {\n  const key = e.key || e.code;\n\n  return key.startsWith('Key') ? key.slice(3).toLowerCase() : key;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './EmojiButton.scss';\n\nconst CUSTOM_EMOJI_SIZE = 32;\n\ntype OwnProps = {\n  emoji: ApiSticker;\n  focus?: boolean;\n  onClick?: (emoji: ApiSticker) => void;\n  observeIntersection?: ObserveFn;\n};\n\nconst CustomEmojiButton: FC<OwnProps> = ({\n  emoji, focus, onClick, observeIntersection,\n}) => {\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick?.(emoji);\n  });\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={emoji.emoji}\n    >\n      <CustomEmoji\n        documentId={emoji.id}\n        size={CUSTOM_EMOJI_SIZE}\n        withSharedAnimation\n        shouldPreloadPreview\n        observeIntersectionForPlaying={observeIntersection}\n      />\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport animateHorizontalScroll from '../../../util/animateHorizontalScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/visibility/isFullyVisible';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport CustomEmojiButton from './CustomEmojiButton';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    animateHorizontalScroll(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  emojis: Emoji[];\n  customEmojis: ApiSticker[];\n  onEmojiSelect: (text: string) => void;\n  onCustomEmojiSelect: (emoji: ApiSticker) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: ({ emoji }: { emoji: string }) => void;\n  addRecentCustomEmoji: ({ documentId }: { documentId: string }) => void;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  customEmojis,\n  onClose,\n  onEmojiSelect,\n  onCustomEmojiSelect,\n  addRecentEmoji,\n  addRecentCustomEmoji,\n}) => {\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const listEmojis: (Emoji | ApiSticker)[] = usePrevDuringAnimation(\n    emojis.length ? [...customEmojis, ...emojis] : undefined, CLOSE_DURATION,\n  ) || [];\n\n  useHorizontalScroll(containerRef);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  const handleSelectEmoji = useLastCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  });\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const handleSelect = useLastCallback((emoji: Emoji | ApiSticker) => {\n    if ('native' in emoji) {\n      handleSelectEmoji(emoji);\n    } else {\n      handleCustomEmojiSelect(emoji);\n    }\n  });\n\n  const handleClick = useLastCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  });\n\n  const handleCustomEmojiClick = useLastCallback((emoji: ApiSticker) => {\n    onCustomEmojiSelect(emoji);\n    addRecentCustomEmoji({ documentId: emoji.id });\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: listEmojis,\n    shouldRemoveSelectionOnReset: true,\n    onSelect: handleSelect,\n    onClose,\n  });\n\n  useEffectWithPrevDeps(([prevSelectedIndex]) => {\n    if (prevSelectedIndex === undefined || prevSelectedIndex === -1) {\n      return;\n    }\n\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          'native' in emoji ? (\n            <EmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleClick}\n            />\n          ) : (\n            <CustomEmojiButton\n              key={emoji.id}\n              emoji={emoji}\n              focus={selectedIndex === index}\n              onClick={handleCustomEmojiClick}\n              observeIntersection={observeIntersection}\n            />\n          )\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getWebDocumentHash } from '../../../../global/helpers';\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport useMedia from '../../../../hooks/useMedia';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? getWebDocumentHash(thumbnail) : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable={false} />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult;\n  onClick: (result: ApiBotInlineResult | ApiBotInlineMediaResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, description,\n  } = inlineResult;\n\n  const url = 'url' in inlineResult ? inlineResult.url : undefined;\n  const webThumbnail = 'webThumbnail' in inlineResult ? inlineResult.webThumbnail : undefined;\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiVideo } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useLastCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  });\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport { getPhotoMediaHash, getWebDocumentHash } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../../../hooks/useMediaTransitionDeprecated';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineMediaResult | ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailBlobUrl = useMedia(getWebDocumentHash(webThumbnail));\n  const mediaBlobUrl = useMedia(photo && getPhotoMediaHash(photo, 'pictogram'));\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl || thumbnailBlobUrl);\n\n  const handleClick = useLastCallback(() => {\n    onClick(inlineResult);\n  });\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailBlobUrl} alt=\"\" draggable={false} />\n        <img\n          src={mediaBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n          draggable={false}\n        />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      thumbUrl={mediaBlobUrl || thumbnail?.dataUri}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult } from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineMediaResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  isCurrentUserPremium?: boolean;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n  isCurrentUserPremium,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n      noShowPremium\n      isCurrentUserPremium={isCurrentUserPremium}\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm, ApiBotInlineSwitchWebview,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport MediaResult from './inlineResults/MediaResult';\nimport StickerResult from './inlineResults/StickerResult';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  switchWebview?: ApiBotInlineSwitchWebview;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean,\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  isCurrentUserPremium?: boolean;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  switchWebview,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n  isCurrentUserPremium,\n}) => {\n  const {\n    openChat,\n    startBot,\n    requestSimpleWebView,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n  const { shouldRender, transitionClassNames } = useShowTransitionDeprecated(isOpen, undefined, undefined, false);\n  const renderedIsGallery = useCurrentOrPrev(isGallery, shouldRender);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  });\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: renderedIsGallery,\n    noArrowNavigation: renderedIsGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useLastCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId: botId!, param: switchPm!.startParam });\n  });\n\n  const handleOpenWebview = useLastCallback(() => {\n    const theme = extractCurrentThemeParams();\n\n    requestSimpleWebView({\n      botId: botId!,\n      url: switchWebview!.url,\n      buttonText: switchWebview!.text,\n      theme,\n      isFromSwitchWebView: true,\n    });\n  });\n\n  const prevInlineBotResults = usePreviousDeprecated(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults?.length ? inlineBotResults : prevInlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    renderedIsGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderSwitchWebview() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleOpenWebview}>\n        <span className=\"title\">{switchWebview!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={renderedIsGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              isCurrentUserPremium={isCurrentUserPremium}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n        case 'voice':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {switchWebview && renderSwitchWebview()}\n      {Boolean(renderedInlineBotResults?.length) && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiSendAsPeerId } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/browser/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Avatar from '../../common/Avatar';\nimport FullNameTitle from '../../common/FullNameTitle';\nimport Icon from '../../common/icons/Icon';\nimport ListItem from '../../ui/ListItem';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsPeerIds?: ApiSendAsPeerId[];\n  isCurrentUserPremium?: boolean;\n  onClose: () => void;\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  chatId,\n  selectedSendAsId,\n  sendAsPeerIds,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { saveDefaultSendAs, showNotification } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useLastCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId: chatId!, sendAsId: id });\n  });\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsPeerIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsPeerIds && !sendAsPeerIds.length) {\n      onClose();\n    }\n  }, [sendAsPeerIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsPeerIds?.map(({ id, isPremium }, index) => {\n        const user = usersById[id];\n        const chat = chatsById[id];\n        const peer = user || chat;\n\n        const handleClick = () => {\n          if (!isPremium || isCurrentUserPremium) {\n            handleUserSelect(id);\n          } else {\n            showNotification({\n              message: lang('SelectSendAsPeerPremiumHint'),\n              actionText: lang('Open'),\n              action: {\n                action: 'openPremiumModal',\n                payload: {},\n              },\n            });\n          }\n        };\n\n        const avatarClassName = buildClassName(selectedSendAsId === id && 'selected');\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n\n            onClick={handleClick}\n            focus={selectedSendAsIndex === index}\n            rightElement={!isCurrentUserPremium && isPremium\n              && <Icon name=\"lock-badge\" className=\"send-as-icon-locked\" />}\n          >\n            <Avatar\n              size=\"small\"\n              peer={peer}\n              className={avatarClassName}\n            />\n            <div className=\"info\">\n              {peer && <FullNameTitle peer={peer} noFake />}\n              <span className=\"subtitle\">\n                {user\n                  ? lang('VoipGroupPersonalAccount')\n                  : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectIsCurrentUserPremium, selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerButton from '../common/StickerButton';\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isModalOpen?: boolean;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst PREMIUM_STICKERS_TO_DISPLAY = 3;\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isModalOpen, isCurrentUserPremium,\n}) => {\n  const { loadStickers, toggleStickerSet, openStickerSet } = getActions();\n\n  const sharedCanvasRef = useRef<HTMLCanvasElement>();\n\n  const lang = useOldLang();\n  const isAdded = set && !set.isArchived && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const premiumStickerIds = (set.stickers?.filter(({ hasEffect }) => hasEffect) ?? [])\n      .slice(0, PREMIUM_STICKERS_TO_DISPLAY);\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...premiumStickerIds, ...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY && set) {\n      loadStickers({\n        stickerSetInfo: {\n          shortName: set.shortName,\n        },\n      });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, set, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  const handleStickerClick = useCallback((sticker: ApiSticker) => {\n    openStickerSet({ stickerSetInfo: sticker.stickerSetInfo });\n  }, [openStickerSet]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main shared-canvas-container\">\n        <canvas ref={sharedCanvasRef} className=\"shared-canvas\" />\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noPlay={!shouldPlay || isModalOpen}\n            clickArg={sticker}\n            onClick={handleStickerClick}\n            noContextMenu\n            isCurrentUserPremium={isCurrentUserPremium}\n            sharedCanvasRef={sharedCanvasRef}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCurrentStickerSearch, selectTabState } from '../../global/selectors';\nimport { throttle } from '../../util/schedulers';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n  isModalOpen: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n  isModalOpen,\n  onClose,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const lang = useOldLang();\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isModalOpen={isModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n      isModalOpen: Boolean(selectTabState(global).openedStickerSetShortName),\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatFullInfo, ApiVideo } from '../../api/types';\nimport type { MessageList } from '../../types';\n\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentMessageList,\n  selectIsChatWithBot,\n  selectIsChatWithSelf, selectThreadInfo,\n  selectTopic,\n} from '../../global/selectors';\nimport { IS_TOUCH_ENV } from '../../util/browser/windowEnvironment';\nimport buildClassName from '../../util/buildClassName';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport GifButton from '../common/GifButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n  currentMessageList?: MessageList;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  chatFullInfo,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  currentMessageList,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat\n    && getAllowedAttachmentOptions(chat, chatFullInfo, isChatWithBot, isSavedMessages).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (!currentMessageList) {\n        return;\n      }\n\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({\n            messageList: currentMessageList,\n            gif,\n            scheduledAt,\n            isSilent,\n          });\n        });\n      } else {\n        sendMessage({ messageList: currentMessageList, gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, currentMessageList, requestCalendar]);\n\n  const handleSearchMoreGifs = useCallback(() => {\n    searchMoreGifs();\n  }, [searchMoreGifs]);\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={handleSearchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const threadInfo = chatId && threadId ? selectThreadInfo(global, chatId, threadId) : undefined;\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = chatId && threadId ? selectTopic(global, chatId, threadId) : undefined;\n    const canPostInChat = Boolean(chat) && Boolean(threadId)\n      && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(GifSearch));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"OAKzmAva\",\"withImage\":\"BQ6HUOqN\",\"imageContainer\":\"TmJvv2A6\",\"image\":\"U96CW2I7\",\"round\":\"yxjDeIct\",\"circle\":\"cdfiLmXo\",\"withStoryCircle\":\"BOfHPv20\",\"summary\":\"vXi2JQlj\",\"title\":\"bi3fL59p\",\"info\":\"GUK4ajPK\",\"meta\":\"YH6jeZIh\",\"metaWithIcon\":\"q1LnuIUn\",\"metaIcon\":\"PJZzyVLK\",\"date\":\"C7NpG5Y9\"};","import { memo } from '../../../lib/teact/teact';\n\nimport type { StatisticsMessageInteractionCounter, StatisticsStoryInteractionCounter } from '../../../api/types';\n\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\ninterface OwnProps {\n  postStatistic: StatisticsStoryInteractionCounter | StatisticsMessageInteractionCounter;\n}\n\nfunction StatisticsRecentPostMeta({ postStatistic }: OwnProps) {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  return (\n    <div className={styles.meta}>\n      {postStatistic.reactionsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"heart-outline\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.reactionsCount)}\n        </span>\n      )}\n\n      {postStatistic.forwardsCount > 0 && (\n        <span className={styles.metaWithIcon}>\n          <Icon name=\"forward\" className={styles.metaIcon} />\n          {formatIntegerCompact(lang, postStatistic.forwardsCount)}\n        </span>\n      )}\n\n      {!postStatistic.forwardsCount && !postStatistic.reactionsCount\n        && oldLang('ChannelStats.SharesCount_ZeroValueHolder')}\n    </div>\n  );\n}\n\nexport default memo(StatisticsRecentPostMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsMessageInteractionCounter } from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageRoundVideo,\n  getMessageVideo,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  postStatistic: StatisticsMessageInteractionCounter;\n  message: ApiMessage;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ postStatistic, message }) => {\n  const lang = useOldLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        Boolean(mediaBlobUrl || mediaThumbnail) && styles.withImage,\n      )}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: OldLangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span>\n      <img\n        src={blobUrl}\n        alt=\"\"\n        draggable={false}\n        className={buildClassName(styles.image, isRoundVideo && styles.round)}\n      />\n      {getMessageVideo(message) && <Icon name=\"play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiTypeStory,\n  StatisticsStoryInteractionCounter,\n} from '../../../api/types';\nimport type { OldLangFn } from '../../../hooks/useOldLang';\n\nimport { getStoryMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dates/dateFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport StatisticsRecentPostMeta from './StatisticsRecentPostMeta';\n\nimport styles from './StatisticsRecentPost.module.scss';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  story?: ApiTypeStory;\n  postStatistic: StatisticsStoryInteractionCounter;\n};\n\nfunction StatisticsRecentStory({ chat, story, postStatistic }: OwnProps) {\n  const lang = useOldLang();\n  const { toggleStoryStatistics } = getActions();\n  const isLoaded = story && 'content' in story;\n\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded ? getStoryMediaHash(story) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const mediaThumbnail = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  const handleClick = useLastCallback(() => {\n    toggleStoryStatistics({ storyId: postStatistic.storyId });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, styles.withImage)}\n      onClick={handleClick}\n    >\n      <div className={styles.title}>\n        <div className={styles.summary}>\n          {renderSummary(lang, chat, imgBlobUrl || mediaThumbnail)}\n        </div>\n        <div className={styles.meta}>\n          {lang('ChannelStats.ViewsCount', postStatistic.viewsCount, 'i')}\n        </div>\n      </div>\n\n      <div className={styles.info}>\n        <div className={styles.date}>\n          {isLoaded && Boolean(story.date) && formatDateTimeToString(story.date * 1000, lang.code)}\n        </div>\n        <StatisticsRecentPostMeta postStatistic={postStatistic} />\n      </div>\n    </div>\n  );\n}\n\nfunction renderSummary(lang: OldLangFn, chat: ApiChat, blobUrl?: string) {\n  return (\n    <span>\n      {blobUrl ? (\n        <span className={styles.imageContainer}>\n          <img\n            src={blobUrl}\n            alt=\"\"\n            draggable={false}\n            className={buildClassName(styles.image, styles.circle, styles.withStoryCircle)}\n          />\n        </span>\n      ) : (\n        <Avatar\n          peer={chat}\n          size=\"small\"\n          className={styles.image}\n          withStorySolid\n          forceUnreadStorySolid\n        />\n      )}\n\n      {lang('Story')}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentStory);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"T1l_4J8z\",\"pie-slim-in\":\"EgyLOizu\",\"pieSlimIn\":\"EgyLOizu\",\"pie-slim-out\":\"TBiNdFb4\",\"pieSlimOut\":\"TBiNdFb4\",\"messages\":\"suY9dEIz\",\"publicForwards\":\"S1x1ovkC\",\"messages-title\":\"evQIkAqx\",\"messagesTitle\":\"evQIkAqx\",\"publicForwards-title\":\"WxL3i5PM\",\"publicForwardsTitle\":\"WxL3i5PM\",\"ready\":\"aUrozL5_\",\"graph\":\"QQHwjG88\",\"hidden\":\"QGctP1Nk\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo,\n  useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChannelStatistics,\n  ApiChat,\n  ApiGroupStatistics,\n  ApiMessage,\n  ApiTypeStory,\n} from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStories,\n  selectStatistics,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\nimport StatisticsRecentStory from './StatisticsRecentStory';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n  reactionsByEmotionGraph: 'ChannelStats.Graph.Reactions',\n  storyInteractionsGraph: 'ChannelStats.Graph.Stories',\n  storyReactionsByEmotionGraph: 'ChannelStats.Graph.StoriesReactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  chat?: ApiChat;\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n  messagesById: Record<string, ApiMessage>;\n  storiesById?: Record<string, ApiTypeStory>;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  statistics,\n  dcId,\n  isGroup,\n  messagesById,\n  storiesById,\n}) => {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  return (\n    <div className={buildClassName(styles.root, 'panel-content custom-scroll', isReady && styles.ready)}>\n      {statistics && (\n        <StatisticsOverview\n          statistics={statistics}\n          type={isGroup ? 'group' : 'channel'}\n          title={lang('StatisticOverview')}\n        />\n      )}\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics)?.recentPosts?.length) && (\n        <div className={styles.messages}>\n          <h2 className={styles.messagesTitle}>{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentPosts.map((postStatistic) => {\n            if ('msgId' in postStatistic) {\n              const message = messagesById[postStatistic.msgId];\n              if (!message || !('content' in message)) return undefined;\n\n              return (\n                <StatisticsRecentMessage\n                  key={`statistic_message_${postStatistic.msgId}`}\n                  message={message}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            if ('storyId' in postStatistic && chat) {\n              const story = storiesById?.[postStatistic.storyId];\n\n              return (\n                <StatisticsRecentStory\n                  key={`statistic_story_${postStatistic.storyId}`}\n                  chat={chat}\n                  story={story}\n                  postStatistic={postStatistic}\n                />\n              );\n            }\n\n            return undefined;\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n    const messagesById = selectChatMessages(global, chatId);\n    const storiesById = selectPeerStories(global, chatId)?.byId;\n\n    return {\n      statistics, dcId, isGroup, chat, messagesById, storiesById,\n    };\n  },\n)(Statistics));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"oXLpD4Y4\",\"title\":\"paQ2VBe_\",\"views\":\"WvFuOAIf\"};","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsMessagePublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useOldLang();\n  const { openChatByUsername } = getActions();\n\n  const username = useMemo(() => (data.chat ? getMainUsername(data.chat) : undefined), [data.chat]);\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: username!, messageId: data.messageId });\n  }, [data.messageId, openChatByUsername, username]);\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={data.chat} />\n\n      <div>\n        <div className={styles.title}>\n          {data.title}\n        </div>\n\n        <div className={styles.views}>\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsMessagePublicForward);\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessagePublicForward,\n  ApiPostStatistics,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { STATISTICS_PUBLIC_FORWARDS_LIMIT } from '../../../config';\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nfunction Statistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadMessagePublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards && messageId) {\n      loadMessagePublicForwards({ chatId, messageId });\n    }\n  });\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <StatisticsOverview statistics={statistics} type=\"message\" title={lang('StatisticOverview')} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName(styles.graph, !loadedCharts.current.includes(graph) && styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            preloadBackwards={STATISTICS_PUBLIC_FORWARDS_LIMIT}\n            noFastList\n          >\n            {(statistics.publicForwardsData as ApiMessagePublicForward[]).map((item) => (\n              <StatisticsMessagePublicForward key={item.messageId} data={item} />\n            ))}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentMessage;\n    const messageId = tabState.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiChat, ApiStoryPublicForward, ApiUser,\n} from '../../../api/types';\n\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\n\nimport styles from './StatisticsPublicForward.module.scss';\n\nexport type OwnProps = {\n  data: ApiStoryPublicForward;\n  usersById: Record<string, ApiUser>;\n  chatsById: Record<string, ApiChat>;\n};\n\nfunction StatisticsMessagePublicForward({ data, chatsById, usersById }: OwnProps) {\n  const lang = useOldLang();\n  const { openChat } = getActions();\n  const user = usersById[data.peerId];\n  const chat = chatsById[data.peerId];\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: user.id });\n  });\n\n  return (\n    <div className={buildClassName(styles.root, 'statistic-public-forward')} onClick={handleClick}>\n      <Avatar size=\"medium\" peer={user || chat} withStorySolid forceUnreadStorySolid />\n\n      <div>\n        <div className={styles.title}>\n          {user ? getUserFullName(user) : getChatTitle(lang, chat)}\n        </div>\n\n        <div className={styles.views}>\n          {data.viewsCount ? lang('ChannelStats.ViewsCount', data.viewsCount, 'i') : lang('NoViews')}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(StatisticsMessagePublicForward);\n","import {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat,\n  ApiPostStatistics,\n  ApiUser,\n  StatisticsGraph,\n} from '../../../api/types';\n\nimport { STATISTICS_PUBLIC_FORWARDS_LIMIT } from '../../../config';\nimport { selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { callApi } from '../../../api/gramjs';\n\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\nimport StatisticsMessagePublicForward from './StatisticsMessagePublicForward';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsStoryPublicForward from './StatisticsStoryPublicForward';\n\nimport styles from './Statistics.module.scss';\n\ntype ILovelyChart = { create: (el: HTMLElement, params: AnyLiteral) => void };\nlet lovelyChartPromise: Promise<ILovelyChart> | undefined;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.StoryInteractionsTitle',\n  reactionsGraph: 'ReactionsByEmotionChartTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiPostStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiPostStatistics;\n  storyId?: number;\n  dcId?: number;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n};\n\nfunction StoryStatistics({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  storyId,\n  chatsById,\n  usersById,\n}: OwnProps & StateProps) {\n  const lang = useOldLang();\n  const containerRef = useRef<HTMLDivElement>();\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStoryStatistics, loadStoryPublicForwards, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (storyId) {\n      loadStoryStatistics({ chatId, storyId });\n    }\n  }, [chatId, storyId]);\n\n  useEffect(() => {\n    if (!isActive || storyId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, storyId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index] as HTMLElement,\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, storyId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  const handleLoadMore = useLastCallback(() => {\n    if (!storyId) return;\n\n    loadStoryPublicForwards({ chatId, storyId });\n  });\n\n  if (!isReady || !statistics || !storyId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <StatisticsOverview statistics={statistics} type=\"story\" title={lang('StatisticOverview')} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName(styles.graph, !loadedCharts.current.includes(graph) && styles.hidden)} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className={styles.publicForwards}>\n          <h2 className={styles.publicForwardsTitle}>{lang('Stats.Message.PublicShares')}</h2>\n\n          <InfiniteScroll\n            items={statistics.publicForwardsData}\n            itemSelector=\".statistic-public-forward\"\n            onLoadMore={handleLoadMore}\n            preloadBackwards={STATISTICS_PUBLIC_FORWARDS_LIMIT}\n            noFastList\n          >\n            {statistics.publicForwardsData!.map((item) => {\n              if ('messageId' in item) {\n                return (\n                  <StatisticsMessagePublicForward key={`message_${item.messageId}`} data={item} />\n                );\n              }\n\n              return (\n                <StatisticsStoryPublicForward\n                  key={`story_${item.storyId}`}\n                  data={item}\n                  chatsById={chatsById}\n                  usersById={usersById}\n                />\n              );\n            })}\n          </InfiniteScroll>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const dcId = selectChatFullInfo(global, chatId)?.statisticsDcId;\n    const tabState = selectTabState(global);\n    const statistics = tabState.statistics.currentStory;\n    const storyId = tabState.statistics.currentStoryId;\n    const { byId: usersById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    return {\n      statistics, dcId, storyId, usersById, chatsById,\n    };\n  },\n)(StoryStatistics));\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { isUserId } from '../../util/entities/ids';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\nimport Loading from '../ui/Loading';\nimport ShowMoreButton from '../ui/ShowMoreButton';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePreviousDeprecated<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useOldLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n\n              onClick={() => handleMemberClick(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo\n                  avatarSize=\"tiny\"\n                  userId={id}\n                  forceShowSelf\n                  noStatusOrTyping\n                />\n              ) : (\n                <GroupChatInfo\n                  avatarSize=\"tiny\"\n                  chatId={id}\n                  noStatusOrTyping\n                />\n              )}\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: text.text,\n            entities: text.entities,\n          })}\n        </span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}\n          %\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = selectTabState(global).pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiPoll } from '../../api/types';\n\nimport {\n  selectChat, selectChatMessage, selectPollFromMessage, selectTabState,\n} from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { renderTextWithEntities } from '../common/helpers/renderTextWithEntities';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Loading from '../ui/Loading';\nimport PollAnswerResults from './PollAnswerResults';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  poll?: ApiPoll;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  message,\n  poll,\n  onClose,\n}) => {\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !poll || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = poll;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n        })}\n      </h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${poll.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n    } = selectTabState(global);\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n    const poll = message && selectPollFromMessage(global, message);\n\n    return {\n      chat,\n      message,\n      poll,\n    };\n  },\n)(PollResults));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"xrnUE4e6\",\"content\":\"z7kF7tij\",\"section\":\"T6wFpdQO\",\"general\":\"YftUWqqw\",\"top\":\"CWsWIKQ1\",\"bottom\":\"KBl0ycLl\",\"iconWrapper\":\"iJ1U9kDD\",\"icon\":\"Rk6PT_yc\",\"clickable\":\"K1CTKtBS\",\"heading\":\"qlo3vSEw\",\"icon-picker\":\"r06zwL42\",\"iconPicker\":\"r06zwL42\"};","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID } from '../../config';\nimport { selectChat, selectIsCurrentUserPremium, selectTabState } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getTopicColors } from '../../util/forumColors';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  createTopicPanel?: TabState['createTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst CreateTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  createTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { createTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconColorIndex, setIconColorIndex] = useState(0);\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isTouched = Boolean(title);\n  const isLoading = Boolean(createTopicPanel?.isLoading);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleIconClick = useCallback(() => {\n    setIconColorIndex((prev) => cycleRestrict(getTopicColors().length, prev + 1));\n  }, []);\n\n  const handleCreateTopic = useCallback(() => {\n    createTopic({\n      chatId: chat!.id,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    });\n  }, [chat, createTopic, iconColorIndex, iconEmojiId, title]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(undefined);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      id: 0,\n      title,\n      iconColor: getTopicColors()[iconColorIndex],\n      iconEmojiId,\n    };\n  }, [iconColorIndex, iconEmojiId, title]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        <div className={buildClassName(styles.section, styles.top)}>\n          <span className={styles.heading}>{lang('CreateTopicTitle')}</span>\n          <Transition\n            name=\"zoomFade\"\n            activeKey={Number(dummyTopic.iconEmojiId) || 0}\n            shouldCleanup\n            direction={1}\n            className={styles.iconWrapper}\n          >\n            <TopicIcon\n              topic={dummyTopic}\n              className={buildClassName(styles.icon, styles.clickable)}\n              onClick={handleIconClick}\n              size={ICON_SIZE}\n              noLoopLimit\n            />\n          </Transition>\n          <InputText\n            value={title}\n            onChange={handleTitleChange}\n            label={lang('lng_forum_topic_title')}\n            disabled={isLoading}\n            teactExperimentControlled\n          />\n        </div>\n        <div className={buildClassName(styles.section, styles.bottom)}>\n          <CustomEmojiPicker\n            idPrefix=\"create-topic-icons-set-\"\n            isHidden={!isActive}\n            loadAndPlay={isActive}\n            onCustomEmojiSelect={handleCustomEmojiSelect}\n            className={styles.iconPicker}\n            pickerListClassName=\"fab-padding-bottom\"\n            withDefaultTopicIcons\n          />\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleCreateTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { createTopicPanel } = selectTabState(global);\n    return {\n      chat: createTopicPanel?.chatId ? selectChat(global, createTopicPanel.chatId) : undefined,\n      createTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(CreateTopic));\n","import type { FC } from '../../lib/teact/teact';\nimport type React from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiSticker, ApiTopic } from '../../api/types';\nimport type { TabState } from '../../global/types';\n\nimport { DEFAULT_TOPIC_ICON_STICKER_ID, GENERAL_TOPIC_ID } from '../../config';\nimport {\n  selectChat, selectIsCurrentUserPremium, selectTabState, selectTopic,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport CustomEmojiPicker from '../common/CustomEmojiPicker';\nimport Icon from '../common/icons/Icon';\nimport TopicIcon from '../common/TopicIcon';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InputText from '../ui/InputText';\nimport Loading from '../ui/Loading';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport styles from './ManageTopic.module.scss';\n\nconst ICON_SIZE = 5 * REM;\nconst RESET_ICON_ID = '0';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  topic?: ApiTopic;\n  editTopicPanel?: TabState['editTopicPanel'];\n  isCurrentUserPremium?: boolean;\n};\n\nconst EditTopic: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  topic,\n  editTopicPanel,\n  isCurrentUserPremium,\n  onClose,\n}) => {\n  const { editTopic, openPremiumModal } = getActions();\n  const [title, setTitle] = useState('');\n  const [iconEmojiId, setIconEmojiId] = useState<string | undefined>(undefined);\n  const lang = useOldLang();\n\n  const isLoading = Boolean(editTopicPanel?.isLoading);\n  const isGeneral = topic?.id === GENERAL_TOPIC_ID;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!isActive) {\n      setTitle('');\n      setIconEmojiId(undefined);\n    }\n  }, [isActive]);\n\n  useEffect(() => {\n    if (topic?.title || topic?.iconEmojiId) {\n      setTitle(topic.title);\n      setIconEmojiId(topic.iconEmojiId);\n    }\n  }, [topic]);\n\n  const isTouched = useMemo(() => {\n    return title !== topic?.title || iconEmojiId !== topic?.iconEmojiId;\n  }, [iconEmojiId, title, topic?.iconEmojiId, topic?.title]);\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const newTitle = e.target.value;\n    setTitle(newTitle);\n  }, []);\n\n  const handleEditTopic = useCallback(() => {\n    editTopic({\n      chatId: chat!.id,\n      title,\n      topicId: topic!.id,\n      iconEmojiId,\n    });\n  }, [chat, editTopic, iconEmojiId, title, topic]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker) => {\n    if (!emoji.isFree && !isCurrentUserPremium && emoji.id !== DEFAULT_TOPIC_ICON_STICKER_ID) {\n      openPremiumModal({ initialSection: 'animated_emoji' });\n      return;\n    }\n\n    if (emoji.id === DEFAULT_TOPIC_ICON_STICKER_ID) {\n      setIconEmojiId(RESET_ICON_ID);\n      return;\n    }\n\n    setIconEmojiId(emoji.id);\n  }, [isCurrentUserPremium, openPremiumModal]);\n\n  const dummyTopic = useMemo(() => {\n    return {\n      ...topic!,\n      title,\n      iconEmojiId,\n    };\n  }, [iconEmojiId, title, topic]);\n\n  if (!chat?.isForum) {\n    return undefined;\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.content, 'custom-scroll')}>\n        {!topic && <Loading />}\n        {topic && (\n          <>\n            <div className={buildClassName(styles.section, styles.top, isGeneral && styles.general)}>\n              <span className={styles.heading}>{lang(isGeneral ? 'CreateGeneralTopicTitle' : 'CreateTopicTitle')}</span>\n              <Transition\n                name=\"zoomFade\"\n                activeKey={Number(dummyTopic.iconEmojiId) || 0}\n                shouldCleanup\n                direction={1}\n                className={styles.iconWrapper}\n              >\n                <TopicIcon\n                  topic={dummyTopic}\n                  className={styles.icon}\n                  size={ICON_SIZE}\n                  noLoopLimit\n                />\n              </Transition>\n              <InputText\n                value={title}\n                onChange={handleTitleChange}\n                label={lang('lng_forum_topic_title')}\n                disabled={isLoading}\n                teactExperimentControlled\n              />\n            </div>\n            {!isGeneral && (\n              <div className={buildClassName(styles.section, styles.bottom)}>\n                <CustomEmojiPicker\n                  idPrefix=\"edit-topic-icons-set-\"\n                  isHidden={!isActive}\n                  loadAndPlay={isActive}\n                  onCustomEmojiSelect={handleCustomEmojiSelect}\n                  className={styles.iconPicker}\n                  pickerListClassName=\"fab-padding-bottom\"\n                  withDefaultTopicIcons\n                />\n              </div>\n            )}\n          </>\n        )}\n      </div>\n      <FloatingActionButton\n        isShown={isTouched}\n        disabled={isLoading}\n        onClick={handleEditTopic}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const { editTopicPanel } = selectTabState(global);\n    const chat = editTopicPanel?.chatId ? selectChat(global, editTopicPanel.chatId) : undefined;\n    const topic = editTopicPanel?.chatId && editTopicPanel?.topicId\n      ? selectTopic(global, editTopicPanel.chatId, editTopicPanel.topicId) : undefined;\n\n    return {\n      chat,\n      topic,\n      editTopicPanel,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(EditTopic));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotInfo, ApiUser } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  getChatAvatarHash, getMainUsername, getUserFirstOrLastName,\n} from '../../../global/helpers';\nimport {\n  selectBot,\n  selectTabState,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  userId?: string;\n  user?: ApiUser;\n  chatBot?: ApiBotInfo;\n  currentBio?: string;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  maxBioLength: number;\n};\n\nconst ERROR_NAME_MISSING = 'Please provide name';\n\nconst ManageBot: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  onClose,\n  currentBio,\n  isActive,\n  maxBioLength,\n}) => {\n  const {\n    setBotInfo,\n    uploadProfilePhoto,\n    uploadContactProfilePhoto,\n    startBotFatherConversation,\n  } = getActions();\n\n  const [isFieldTouched, markFieldTouched, unmarkProfileTouched] = useFlag(false);\n  const [isAvatarTouched, markAvatarTouched, unmarkAvatarTouched] = useFlag(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useOldLang();\n\n  const username = useMemo(() => (user ? getMainUsername(user) : undefined), [user]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentName = user ? getUserFirstOrLastName(user) : '';\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [name, setName] = useState(currentName || '');\n  const [bio, setBio] = useState(currentBio || '');\n\n  const currentAvatarHash = user && getChatAvatarHash(user);\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  useEffect(() => {\n    unmarkProfileTouched();\n    unmarkAvatarTouched();\n  }, [userId]);\n\n  useEffect(() => {\n    setName(currentName || '');\n    setBio(currentBio || '');\n  }, [currentName, currentBio, user]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkProfileTouched();\n      unmarkAvatarTouched();\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleNameChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n    markFieldTouched();\n\n    if (error === ERROR_NAME_MISSING) {\n      setError(undefined);\n    }\n  });\n\n  const handleBioChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setBio(e.target.value);\n    markFieldTouched();\n  });\n\n  const handlePhotoChange = useLastCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n    markAvatarTouched();\n  });\n\n  const handleProfileSave = useLastCallback(() => {\n    const trimmedName = name.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedName.length) {\n      setError(ERROR_NAME_MISSING);\n      return;\n    }\n\n    setBotInfo({\n      ...(isFieldTouched && {\n        bot: user,\n        name: trimmedName,\n        description: trimmedBio,\n      }),\n    });\n\n    if (photo) {\n      uploadProfilePhoto({\n        file: photo,\n        ...(isAvatarTouched && { bot: user }),\n      });\n    }\n  });\n\n  const handleChangeEditIntro = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-intro` });\n  });\n\n  const handleChangeEditCommands = useLastCallback(() => {\n    startBotFatherConversation({ param: `${username}-commands` });\n  });\n\n  const handleChangeSettings = useLastCallback(() => {\n    startBotFatherConversation({ param: username! });\n  });\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSelectAvatar = useLastCallback((file: File) => {\n    markAvatarTouched();\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  });\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title={lang('ChatSetPhotoOrVideo')}\n            disabled={isLoading}\n          />\n          <InputText\n            id=\"user-name\"\n            label={lang('PaymentCheckoutName')}\n            onChange={handleNameChange}\n            value={name}\n            error={error === ERROR_NAME_MISSING ? error : undefined}\n            teactExperimentControlled\n          />\n          <TextArea\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('DescriptionPlaceholder')}\n            disabled={isLoading}\n            maxLength={maxBioLength}\n            maxLengthIndicator={maxBioLength ? (maxBioLength - bio.length).toString() : undefined}\n          />\n        </div>\n        <div className=\"section\">\n          <div className=\"dialog-buttons\">\n            <ListItem icon=\"bot-commands-filled\" ripple onClick={handleChangeEditIntro}>\n              <span>{lang('BotEditIntro')}</span>\n            </ListItem>\n            <ListItem icon=\"bot-command\" ripple onClick={handleChangeEditCommands}>\n              <span>{lang('BotEditCommands')}</span>\n            </ListItem>\n            <ListItem icon=\"bots\" ripple onClick={handleChangeSettings}>\n              <span>{lang('BotChangeSettings')}</span>\n            </ListItem>\n            <div className=\"section-info section-info_push\">\n              {renderText(lang('BotManageInfo'), ['links'])}\n            </div>\n          </div>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isFieldTouched || isAvatarTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectBot(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const maxBioLength = selectCurrentLimit(global, 'aboutLength');\n\n    return {\n      userId,\n      user,\n      progress,\n      currentBio: userFullInfo?.bio,\n      maxBioLength,\n    };\n  },\n)(ManageBot));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  availableReactions?: ApiAvailableReaction[];\n  hasAutoTranslation?: boolean;\n  canToggleAutoTranslation?: boolean;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\nconst CHANNEL_MAX_DESCRIPTION = 255;\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  isActive,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n  hasAutoTranslation,\n  canToggleAutoTranslation,\n}) => {\n  const {\n    updateChat,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleAutoTranslation,\n  } = getActions();\n\n  const currentTitle = chat?.title || '';\n  const currentAbout = chatFullInfo?.about || '';\n  const hasLinkedChat = Boolean(chatFullInfo?.linkedChatId);\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useOldLang();\n\n  const hasAutoTranslationAvailable = chat && isChatChannel(chat);\n\n  const handleAutoTranslationChange = useLastCallback(() => {\n    toggleAutoTranslation({ chatId, isEnabled: !hasAutoTranslation });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!canInvite) return;\n    loadExportedChatInvites({ chatId });\n    loadExportedChatInvites({ chatId, isRevoked: true });\n    loadChatJoinRequests({ chatId });\n  }, [chatId, canInvite]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n  const removedUsersCount = chatFullInfo?.kickedMembers?.length || 0;\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateChannel = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickSubscribers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  });\n\n  const handleRemovedUsersClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  });\n\n  const handleDeleteChannel = useLastCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength ? `${enabledLength} / ${totalLength}` : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n  const isChannelPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"channel-title\"\n              label={lang('EnterChannelName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"channel-about\"\n              label={lang('DescriptionPlaceholder')}\n              onChange={handleAboutChange}\n              value={about}\n              maxLength={CHANNEL_MAX_DESCRIPTION}\n              maxLengthIndicator={(CHANNEL_MAX_DESCRIPTION - about.length).toString()}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{isChannelPublic ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          {hasAutoTranslationAvailable && (\n            <ListItem\n              icon=\"language\"\n              narrow\n              ripple\n              disabled={!canToggleAutoTranslation}\n              onClick={handleAutoTranslationChange}\n            >\n              <span>{lang('AutomaticTranslation')}</span>\n              <Switcher\n                id=\"auto-translation\"\n                label={lang('AutomaticTranslation')}\n                checked={hasAutoTranslation}\n              />\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{formatInteger(chat.membersCount!)}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { management } = selectTabState(global);\n    const { progress } = management;\n    const { invites } = management.byChatId[chatId] || {};\n    const minLevelToToggleAutoTranslation = global.appConfig?.channelAutoTranslationLevelMin;\n    const hasAutoTranslation = chat?.hasAutoTranslation;\n    const chatBoostLevel = chat?.level;\n    const canToggleAutoTranslation = chatBoostLevel && minLevelToToggleAutoTranslation\n      ? chatBoostLevel >= minLevelToToggleAutoTranslation : false;\n    return {\n      chat,\n      chatFullInfo: selectChatFullInfo(global, chatId),\n      progress,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      availableReactions: global.reactions.availableReactions,\n      hasAutoTranslation,\n      canToggleAutoTranslation,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageChannel));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n  isChannel?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  isActive,\n  chat,\n  isChannel,\n  currentUserId,\n  adminMembersById,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n}) => {\n  const { toggleSignatures } = getActions();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const areSignaturesEnabled = Boolean(chat?.areSignaturesShown);\n  const areProfilesEnabled = Boolean(chat?.areProfilesShown);\n\n  const canAddNewAdmins = Boolean(chat?.isCreator || (chat && getHasAdminRight(chat, 'addAdmins')));\n  const canToggleSignatures = isChannel && getHasAdminRight(chat!, 'postMessages');\n\n  const adminMembers = useMemo(() => {\n    if (!adminMembersById) {\n      return [];\n    }\n\n    const [owner, admins] = partition(Object.values(adminMembersById), (member) => member.isOwner);\n\n    return [...owner, ...admins];\n  }, [adminMembersById]);\n\n  const handleAdminMemberClick = useLastCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  });\n\n  const handleToggleSignatures = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled,\n      areSignaturesEnabled: !areSignaturesEnabled,\n    });\n  });\n\n  const handleToggleProfiles = useLastCallback(() => {\n    toggleSignatures({\n      chatId: chat!.id,\n      areProfilesEnabled: !areProfilesEnabled,\n      areSignaturesEnabled,\n    });\n  });\n\n  const handleAddAdminClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  });\n\n  const getMemberStatus = useLastCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            disabled\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\" dir=\"auto\">\n            {lang(isChannel\n              ? 'Channel.Management.AddModeratorHelp'\n              : 'Group.Management.AddModeratorHelp')}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown={canAddNewAdmins}\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <Icon name=\"add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n\n        {canToggleSignatures && (\n          <div className=\"section\">\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={areSignaturesEnabled}\n                label={lang('ChannelSignMessages')}\n                onChange={handleToggleSignatures}\n              />\n            </div>\n            {areSignaturesEnabled && (\n              <>\n                <div className=\"ListItem narrow\">\n                  <Checkbox\n                    checked={areProfilesEnabled}\n                    label={lang('ChannelSignMessagesWithProfile')}\n                    onChange={handleToggleProfiles}\n                  />\n                </div>\n                <p className=\"section-info section-info_push\">\n                  {lang('ChannelSignProfilesInfo')}\n                </p>\n              </>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: chat && isChatChannel(chat),\n      adminMembersById: selectChatFullInfo(global, chatId)?.adminMembersById,\n    };\n  },\n)(ManageChatAdministrators));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { PURCHASE_USERNAME, TME_LINK_PREFIX, USERNAME_PURCHASE_ERROR } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport {\n  selectChat, selectChatFullInfo,\n  selectManagement, selectTabState,\n} from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport ManageUsernames from '../../common/ManageUsernames';\nimport SafeLink from '../../common/SafeLink';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Spinner from '../../ui/Spinner';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  checkedUsername?: string;\n  error?: string;\n  isProtected?: boolean;\n  maxPublicLinks: number;\n  privateInviteLink?: string;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  checkedUsername,\n  error,\n  isProtected,\n  maxPublicLinks,\n  privateInviteLink,\n  onClose,\n}) => {\n  const {\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n    openLimitReachedModal,\n    resetManagementError,\n  } = getActions();\n\n  const firstEditableUsername = useMemo(() => chat.usernames?.find(({ isEditable }) => isEditable), [chat.usernames]);\n  const currentUsername = firstEditableUsername?.username || '';\n  const isPublic = useMemo(() => isChatPublic(chat), [chat]);\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [editableUsername, setEditableUsername] = useState<string>();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n  const [isUsernameLostDialogOpen, openUsernameLostDialog, closeUsernameLostDialog] = useFlag();\n\n  const previousIsUsernameAvailable = usePreviousDeprecated(isUsernameAvailable);\n  const renderingIsUsernameAvailable = isUsernameAvailable ?? previousIsUsernameAvailable;\n\n  const canUpdate = isProfileFieldsTouched && Boolean(\n    (privacyType === 'public'\n      && (editableUsername || (currentUsername && editableUsername === ''))\n      && renderingIsUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (privacyType && !privateInviteLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateInviteLink, updatePrivateLink]);\n\n  const handleUsernameChange = useCallback((value: string) => {\n    setEditableUsername(value);\n    setIsProfileFieldsTouched(true);\n\n    if (error) {\n      resetManagementError({\n        chatId: chat.id,\n      });\n    }\n  }, [chat.id, error]);\n\n  const handleOptionChange = useCallback((value: string, e: ChangeEvent<HTMLInputElement>) => {\n    const myChats = Object.values(getGlobal().chats.byId)\n      .filter(({ isCreator, usernames }) => isCreator && usernames?.some((c) => c.isActive));\n\n    if (myChats.length >= maxPublicLinks && value === 'public') {\n      openLimitReachedModal({ limit: 'channelsPublic' });\n      const radioGroup = e.currentTarget.closest('.radio-group') as HTMLDivElement;\n      // Patch for Teact bug with controlled inputs\n      // TODO Teact support added, this can now be removed\n      (radioGroup.querySelector('[value=public]') as HTMLInputElement).checked = false;\n      (radioGroup.querySelector('[value=private]') as HTMLInputElement).checked = true;\n      return;\n    }\n    setPrivacyType(value as PrivacyType);\n    setIsProfileFieldsTouched(true);\n  }, [maxPublicLinks, openLimitReachedModal]);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    if (isPublic && privacyType === 'private') {\n      openUsernameLostDialog();\n    } else {\n      updatePublicLink({ username: privacyType === 'public' ? (editableUsername || '') : '' });\n    }\n  }, [isPublic, openUsernameLostDialog, privacyType, updatePublicLink, editableUsername]);\n\n  const handleMakeChannelPrivateConfirm = useCallback(() => {\n    updatePublicLink({ username: '', shouldDisableUsernames: true });\n    closeUsernameLostDialog();\n  }, [closeUsernameLostDialog, updatePublicLink]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useOldLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n  const shouldRenderUsernamesManage = privacyType === 'public' && chat.usernames && chat.usernames.length > 0;\n\n  function renderPurchaseLink() {\n    const purchaseInfoLink = `${TME_LINK_PREFIX}${PURCHASE_USERNAME}`;\n\n    return (\n      <p className=\"section-info\" dir=\"auto\">\n        {(lang('lng_username_purchase_available'))\n          .replace('{link}', '%PURCHASE_LINK%')\n          .split('%')\n          .map((s) => {\n            return (s === 'PURCHASE_LINK' ? <SafeLink url={purchaseInfoLink} text={`@${PURCHASE_USERNAME}`} /> : s);\n          })}\n      </p>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateInviteLink ? (\n              <>\n                <LinkField link={privateInviteLink} className=\"invite-link\" />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <div className=\"settings-input\">\n              <UsernameInput\n                asLink\n                currentUsername={currentUsername}\n                isLoading={isLoading}\n                isUsernameAvailable={isUsernameAvailable}\n                checkedUsername={checkedUsername}\n                onChange={handleUsernameChange}\n              />\n            </div>\n            {error === USERNAME_PURCHASE_ERROR && renderPurchaseLink()}\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        {shouldRenderUsernamesManage && (\n          <ManageUsernames\n            chatId={chat.id}\n            usernames={chat.usernames!}\n            onEditUsername={handleUsernameChange}\n          />\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isUsernameLostDialogOpen}\n        onClose={closeUsernameLostDialog}\n        text={lang('ChannelVisibility.Confirm.MakePrivate.Channel', currentUsername)}\n        confirmHandler={handleMakeChannelPrivateConfirm}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable, checkedUsername, error } = selectManagement(global, chatId);\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: selectTabState(global).management.progress,\n      error,\n      isUsernameAvailable,\n      checkedUsername,\n      isProtected: chat?.isProtected,\n      maxPublicLinks: selectCurrentLimit(global, 'channelsPublic'),\n      privateInviteLink: selectChatFullInfo(global, chatId)?.inviteLink,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId) && selectManagement(global, chatId));\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChatFullInfo } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport ChatOrUserPicker from '../../common/pickers/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chatMembers?: ApiChatMember[];\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  chatMembers,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [search, setSearch] = useState('');\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chatMembers || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    return filterPeersByQuery({ ids: availableMemberIds, query: search, type: 'user' });\n  }, [chatMembers, currentUserId, search]);\n\n  const handleLoadMore = useLastCallback(() => {\n    loadMoreMembers({ chatId: chat.id });\n  });\n\n  const handleRemoveUser = useLastCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  });\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      searchPlaceholder={lang('ChannelBlockUser')}\n      search={search}\n      onSearchChange={setSearch}\n      loadMore={handleLoadMore}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chat }): StateProps => {\n    const { currentUserId } = global;\n\n    return {\n      currentUserId,\n      chatMembers: selectChatFullInfo(global, chat.id)?.members,\n    };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  removedMembers: ApiChatMember[];\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  removedMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useOldLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember): MenuItemContextAction[] | undefined => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"section-help\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <Icon name=\"add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      removedMembers: selectChatFullInfo(global, chatId)?.kickedMembers || MEMO_EMPTY_ARRAY,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { isChatChannel, isChatPublic } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Avatar from '../../common/Avatar';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n    toggleJoinRequest,\n    toggleJoinToSend,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const [isJoinToSend, setIsJoinToSend] = useState(Boolean(linkedChat?.isJoinToSend));\n  const [isJoinRequest, setIsJoinRequest] = useState(Boolean(linkedChat?.isJoinRequest));\n  const lang = useOldLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  useEffect(() => {\n    if (isActive) {\n      setIsJoinToSend(linkedChat?.isJoinToSend || false);\n      setIsJoinRequest(linkedChat?.isJoinRequest || false);\n    }\n  }, [linkedChat, isActive]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId! });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId! });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const handleJoinToSendCheck = useCallback((checked: boolean) => {\n    setIsJoinToSend(checked);\n    toggleJoinToSend({ chatId: linkedChatId!, isEnabled: checked });\n    if (!checked) {\n      setIsJoinRequest(false);\n    }\n  }, [linkedChatId, toggleJoinToSend]);\n\n  const handleJoinRequestCheck = useCallback((checked: boolean) => {\n    setIsJoinRequest(checked);\n    toggleJoinRequest({ chatId: linkedChatId!, isEnabled: checked });\n  }, [linkedChatId, toggleJoinRequest]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          peer={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    if (!linkedGroupId) return undefined;\n    const linkedGroup = chatsByIds[linkedGroupId];\n    if (!linkedGroup) return undefined;\n\n    if (isChatPublic(linkedGroup)) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat?.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line @stylistic/max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat?.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        {linkedChat && (\n          <ListItem\n            className=\"chat-item-clickable\"\n            inactive\n          >\n            <GroupChatInfo chatId={linkedChat.id} />\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat?.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  const handleNewGroupClick = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.NewDiscussionGroup);\n  });\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            className=\"create-item\"\n            withPrimaryColor\n            teactOrderKey={0}\n            onClick={handleNewGroupClick}\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n        {linkedChat && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">{lang('ChannelSettingsJoinTitle')}</h3>\n            <div className=\"ListItem narrow\">\n              <Checkbox\n                checked={isJoinToSend}\n                onCheck={handleJoinToSendCheck}\n                label={lang('ChannelSettingsJoinToSend')}\n              />\n            </div>\n            {isJoinToSend && (\n              <div className=\"ListItem narrow\">\n                <Checkbox\n                  checked={isJoinRequest}\n                  onCheck={handleJoinRequestCheck}\n                  label={lang('ChannelSettingsJoinRequest')}\n                />\n              </div>\n            )}\n            <p className=\"section-info section-info_push\">\n              {isJoinToSend ? lang('ChannelSettingsJoinRequestInfo') : lang('ChannelSettingsJoinToSendInfo')}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { linkedChatId } = selectChatFullInfo(global, chatId) || {};\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = linkedChatId ? selectChat(global, linkedChatId) : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatBannedRights, ApiChatFullInfo, ApiExportedInvite,\n} from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  getChatAvatarHash,\n  getHasAdminRight,\n  isChatBasicGroup,\n  isChatPublic,\n} from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { debounce } from '../../../util/schedulers';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\nimport TextArea from '../../ui/TextArea';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  chatFullInfo?: ApiChatFullInfo;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  canEditForum?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  isChannelsPremiumLimitReached: boolean;\n  availableReactions?: ApiAvailableReaction[];\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\nconst GROUP_MAX_DESCRIPTION = 255;\n\nconst ALL_PERMISSIONS: Array<keyof ApiChatBannedRights> = [\n  'sendMessages',\n  'embedLinks',\n  'sendPolls',\n  'changeInfo',\n  'inviteUsers',\n  'pinMessages',\n  'manageTopics',\n  'sendPhotos',\n  'sendVideos',\n  'sendRoundvideos',\n  'sendVoices',\n  'sendAudios',\n  'sendDocs',\n];\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = ALL_PERMISSIONS.length + 1;\n\nconst runDebounced = debounce((cb) => cb(), 500, false);\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  chatFullInfo,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  canEditForum,\n  isActive,\n  exportedInvites,\n  isChannelsPremiumLimitReached,\n  availableReactions,\n  onScreenSelect,\n  onClose,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n    toggleForum,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chatFullInfo?.about || '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const [isForumEnabled, setIsForumEnabled] = useState(chat.isForum);\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = useMemo(() => isChatPublic(chat), [chat]);\n  const lang = useOldLang();\n  const isPreHistoryHiddenCheckboxRef = useRef<HTMLDivElement>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, canInvite]);\n\n  // Resetting `isForum` switch on flood wait error\n  useEffect(() => {\n    setIsForumEnabled(Boolean(chat.isForum));\n  }, [chat.isForum]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  });\n\n  const handleClickDiscussion = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  });\n\n  const handleClickReactions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  });\n\n  const handleClickPermissions = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  });\n\n  const handleClickAdministrators = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  });\n\n  const handleClickInvites = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  });\n\n  const handleClickRequests = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  });\n\n  const handleSetPhoto = useLastCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleTitleChange = useLastCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleAboutChange = useLastCallback((e: ChangeEvent<HTMLTextAreaElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  });\n\n  const handleUpdateGroup = useLastCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  });\n\n  const handleClickMembers = useLastCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  });\n\n  const handleTogglePreHistory = useLastCallback(() => {\n    if (!chatFullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chatFullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  });\n\n  const handleForumToggle = useLastCallback(() => {\n    setIsForumEnabled((current) => {\n      const newIsForumEnabled = !current;\n\n      runDebounced(() => {\n        toggleForum({ chatId, isEnabled: newIsForumEnabled });\n      });\n\n      return newIsForumEnabled;\n    });\n  });\n\n  useEffect(() => {\n    if (!isChannelsPremiumLimitReached) {\n      return;\n    }\n\n    // Teact does not have full support of controlled form components, we need to \"disable\" input value change manually\n    // TODO Teact support added, this can now be removed\n    const checkbox = isPreHistoryHiddenCheckboxRef.current?.querySelector('input') as HTMLInputElement;\n    checkbox.checked = !chatFullInfo?.isPreHistoryHidden;\n  }, [isChannelsPremiumLimitReached, chatFullInfo?.isPreHistoryHidden]);\n\n  const chatReactionsDescription = useMemo(() => {\n    if (!chatFullInfo?.enabledReactions) {\n      return lang('ReactionsOff');\n    }\n\n    if (chatFullInfo.enabledReactions.type === 'all') {\n      return lang('ReactionsAll');\n    }\n\n    const enabledLength = chatFullInfo.enabledReactions.allowed.length;\n    const totalLength = availableReactions?.filter((reaction) => !reaction.isInactive).length || 0;\n\n    return totalLength\n      ? `${enabledLength} / ${totalLength}`\n      : enabledLength.toString();\n  }, [availableReactions, chatFullInfo?.enabledReactions, lang]);\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = ALL_PERMISSIONS.filter(\n      (key) => {\n        if (key === 'manageTopics' && !isForumEnabled) return false;\n        return !chat.defaultBannedRights![key];\n      },\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat.defaultBannedRights, isForumEnabled]);\n\n  const adminsCount = useMemo(() => {\n    return Object.keys(chatFullInfo?.adminMembersById || {}).length;\n  }, [chatFullInfo?.adminMembersById]);\n\n  const handleDeleteGroup = useLastCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  });\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            isForForum={isForumEnabled}\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"group-title\"\n              label={lang('GroupName')}\n              onChange={handleTitleChange}\n              value={title}\n              error={error === GROUP_TITLE_EMPTY ? error : undefined}\n              disabled={!canChangeInfo}\n            />\n            <TextArea\n              id=\"group-about\"\n              label={lang('DescriptionPlaceholder')}\n              maxLength={GROUP_MAX_DESCRIPTION}\n              maxLengthIndicator={(GROUP_MAX_DESCRIPTION - about.length).toString()}\n              onChange={handleAboutChange}\n              value={about}\n              disabled={!canChangeInfo}\n              noReplaceNewlines\n            />\n          </div>\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{isPublicGroup ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}\n              /\n              {TOTAL_PERMISSIONS_COUNT - (isForumEnabled ? 0 : 1)}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {chatReactionsDescription}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests.length)}\n              </span>\n            </ListItem>\n          )}\n          {canEditForum && (\n            <>\n              <ListItem icon=\"forums\" ripple onClick={handleForumToggle}>\n                <span>{lang('ChannelTopics')}</span>\n                <Switcher\n                  id=\"group-notifications\"\n                  label={lang('ChannelTopics')}\n                  checked={isForumEnabled}\n                  inactive\n                />\n              </ListItem>\n              <div className=\"section-info section-info_push\">{lang('ForumToggleDescription')}</div>\n            </>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && !hasLinkedChannel && Boolean(chatFullInfo) && (\n            <div className=\"ListItem narrow\" ref={isPreHistoryHiddenCheckboxRef}>\n              <Checkbox\n                checked={!chatFullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                subLabel={\n                  chatFullInfo.isPreHistoryHidden ? lang('ChatHistoryHiddenInfo2') : lang('ChatHistoryVisibleInfo')\n                }\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const { management, limitReachedModal } = selectTabState(global);\n    const { progress } = management;\n    const hasLinkedChannel = Boolean(chatFullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = management.byChatId[chatId] || {};\n    const canEditForum = !hasLinkedChannel && (getHasAdminRight(chat, 'changeInfo') || chat.isCreator);\n    const canChangeInfo = chat.isCreator || getHasAdminRight(chat, 'changeInfo');\n    const canBanUsers = chat.isCreator || getHasAdminRight(chat, 'banUsers');\n    const canInvite = chat.isCreator || getHasAdminRight(chat, 'inviteUsers');\n\n    return {\n      chat,\n      chatFullInfo,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo,\n      canBanUsers,\n      canInvite,\n      exportedInvites: invites,\n      isChannelsPremiumLimitReached: limitReachedModal?.limit === 'channels',\n      availableReactions: global.reactions.availableReactions,\n      canEditForum,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiChatAdminRights, ApiChatMember, ApiUser,\n} from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  adminMembersById?: Record<string, ApiChatMember>;\n  hasFullInfo: boolean;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  isForum?: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isActive,\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  chat,\n  usersById,\n  currentUserId,\n  adminMembersById,\n  hasFullInfo,\n  isChannel,\n  isForum,\n  isFormFullyDisabled,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = selectedUserId ? adminMembersById?.[selectedUserId] : undefined;\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [adminMembersById, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (hasFullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    if (chat.isCreator) {\n      return false;\n    }\n\n    return !chat.adminRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"postStories\"\n              checked={Boolean(permissions.postStories)}\n              label={lang('EditAdminPostStories')}\n              blocking\n              disabled={getControlIsDisabled('postStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"editStories\"\n              checked={Boolean(permissions.editStories)}\n              label={lang('EditAdminEditStories')}\n              blocking\n              disabled={getControlIsDisabled('editStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"deleteStories\"\n              checked={Boolean(permissions.deleteStories)}\n              label={lang('EditAdminDeleteStories')}\n              blocking\n              disabled={getControlIsDisabled('deleteStories')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isForum && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"manageTopics\"\n                checked={Boolean(permissions.manageTopics)}\n                label={lang('ManageTopicsPermission')}\n                blocking\n                disabled={getControlIsDisabled('manageTopics')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {!isChannel && (\n            <div className=\"ListItem\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n    const isForum = chat.isForum;\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isForum,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n      hasFullInfo: Boolean(fullInfo),\n      adminMembersById: fullInfo?.adminMembersById,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens, NewChatMembersProgress } from '../../../types';\n\nimport {\n  getHasAdminRight, isChatBasicGroup,\n  isChatChannel, isUserBot, isUserRightBanned, sortUserIds,\n} from '../../../global/helpers';\nimport { filterPeersByQuery } from '../../../global/helpers/peers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport usePeerStoriesPolling from '../../../hooks/polling/usePeerStoriesPolling';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport InputText from '../../ui/InputText';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Switcher from '../../ui/Switcher';\nimport DeleteMemberModal from '../DeleteMemberModal';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  canAddMembers?: boolean;\n  adminMembersById?: Record<string, ApiChatMember>;\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  currentUserId?: string;\n  canDeleteMembers?: boolean;\n  areParticipantsHidden?: boolean;\n  canHideParticipants?: boolean;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  chatId,\n  noAdmins,\n  members,\n  canAddMembers,\n  adminMembersById,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  currentUserId,\n  canDeleteMembers,\n  areParticipantsHidden,\n  canHideParticipants,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const {\n    openChat, setUserSearchQuery, closeManagement,\n    toggleParticipantsHidden, setNewChatMembersDialogState, toggleManagement,\n  } = getActions();\n  const lang = useOldLang();\n  const inputRef = useRef<HTMLInputElement>();\n  const containerRef = useRef<HTMLDivElement>();\n\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const adminIds = useMemo(() => {\n    return noAdmins && adminMembersById ? Object.keys(adminMembersById) : [];\n  }, [adminMembersById, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, noAdmins, adminIds]);\n\n  usePeerStoriesPolling(memberIds);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterPeersByQuery({ ids: localContactIds, query: searchQuery, type: 'user' }) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, true);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  });\n\n  const handleFilterChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  });\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  const handleToggleParticipantsHidden = useLastCallback(() => {\n    toggleParticipantsHidden({ chatId, isEnabled: !areParticipantsHidden });\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    toggleManagement();\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"panel-content custom-scroll\">\n        {canHideParticipants && !isChannel && (\n          <div className=\"section\">\n            <ListItem icon=\"group\" ripple onClick={handleToggleParticipantsHidden}>\n              <span>{lang('ChannelHideMembers')}</span>\n              <Switcher label={lang('ChannelHideMembers')} checked={areParticipantsHidden} />\n            </ListItem>\n            <p className=\"section-info\">\n              {lang(areParticipantsHidden ? 'GroupMembers.MembersHiddenOn' : 'GroupMembers.MembersHiddenOff')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n\n                  onClick={() => handleMemberClick(id)}\n                  contextActions={getMemberContextAction(id)}\n                  withPortalForMenu\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf withStory />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <Icon name=\"add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const { members, adminMembersById, areParticipantsHidden } = selectChatFullInfo(global, chatId) || {};\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n    const hiddenMembersMinCount = global.appConfig?.hiddenMembersMinCount;\n\n    const canDeleteMembers = chat && (chat.isCreator || getHasAdminRight(chat, 'banUsers'));\n\n    const canHideParticipants = canDeleteMembers && !isChatBasicGroup(chat) && chat.membersCount !== undefined\n      && hiddenMembersMinCount !== undefined && chat.membersCount >= hiddenMembersMinCount;\n\n    const canAddMembers = chat && ((getHasAdminRight(chat, 'inviteUsers')\n      || (!isChannel && !isUserRightBanned(chat, 'inviteUsers')))\n    || chat.isCreator\n    );\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      areParticipantsHidden: Boolean(chat && areParticipantsHidden),\n      members,\n      canAddMembers,\n      adminMembersById,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      canHideParticipants,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementProgress, ManagementScreens } from '../../../types';\n\nimport {\n  DEFAULT_CHARGE_FOR_MESSAGES,\n} from '../../../config';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PaidMessagePrice from '../../common/paidMessage/PaidMessagePrice';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\nimport Switcher from '../../ui/Switcher';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  progress?: ManagementProgress;\n  currentUserId?: string;\n  removedUsersCount: number;\n  members?: ApiChatMember[];\n  arePaidMessagesAvailable?: boolean;\n  groupPeersPaidStars: number;\n  canChargeForMessages?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst BEFORE_ITEMS_COUNT = 2;\nconst ITEMS_COUNT = 9;\n\nfunction getLangKeyForBannedRightKey(key: keyof ApiChatBannedRights) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    case 'manageTopics':\n      return 'GroupPermission.NoManageTopics';\n    case 'sendPlain':\n      return 'UserRestrictionsNoSendText';\n    case 'sendDocs':\n      return 'UserRestrictionsNoSendDocs';\n    case 'sendRoundvideos':\n      return 'UserRestrictionsNoSendRound';\n    case 'sendVoices':\n      return 'UserRestrictionsNoSendVoice';\n    case 'sendAudios':\n      return 'UserRestrictionsNoSendMusic';\n    case 'sendVideos':\n      return 'UserRestrictionsNoSendVideos';\n    case 'sendPhotos':\n      return 'UserRestrictionsNoSendPhotos';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  progress,\n  currentUserId,\n  removedUsersCount,\n  members,\n  onClose,\n  isActive,\n  arePaidMessagesAvailable,\n  canChargeForMessages,\n  groupPeersPaidStars,\n}) => {\n  const { updateChatDefaultBannedRights, updatePaidMessagesPrice } = getActions();\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(chat?.defaultBannedRights);\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  const [isPriceForMessagesChanged, markPriceForMessagesChanged, unmarkPriceForMessagesChanged] = useFlag();\n  const [isPriceForMessagesOpen, setIsPriceForMessagesOpen] = useState(canChargeForMessages);\n  const [chargeForMessages, setChargeForMessages] = useState<number>(groupPeersPaidStars);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      unmarkPriceForMessagesChanged();\n    }\n  }, [progress]);\n\n  const handleSavePermissions = useLastCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  });\n\n  const handleUpdatePaidMessagesPrice = useLastCallback(() => {\n    if (!chat) return;\n    updatePaidMessagesPrice({\n      chatId: chat?.id,\n      paidMessagesStars: isPriceForMessagesOpen ? chargeForMessages : 0,\n    });\n  });\n\n  const handleUpdatePermissions = useLastCallback(() => {\n    if (isPriceForMessagesChanged) {\n      handleUpdatePaidMessagesPrice();\n    }\n    if (havePermissionChanged) {\n      handleSavePermissions();\n    }\n  });\n\n  const exceptionMembers = useMemo(() => {\n    if (!members) {\n      return [];\n    }\n\n    return members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [members]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, k) => {\n      const key = k as keyof ApiChatBannedRights;\n      if (\n        !bannedRights[key]\n        || (defaultBannedRights?.[key])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = oldLang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, oldLang]);\n\n  const handleChargeStarsForMessages = useLastCallback(() => {\n    setIsPriceForMessagesOpen(!isPriceForMessagesOpen);\n    markPriceForMessagesChanged();\n  });\n\n  const handleChargeForMessagesChange = useLastCallback((value: number) => {\n    setChargeForMessages(value);\n    markPriceForMessagesChanged();\n  });\n\n  const arePermissionsChanged = isPriceForMessagesChanged || havePermissionChanged;\n  const arePermissionsLoading = progress === ManagementProgress.InProgress || isLoading;\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT}px;`}\n    >\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            dropdownClassName=\"DropdownListTrap\"\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n          />\n        </div>\n\n        {arePaidMessagesAvailable && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem onClick={handleChargeStarsForMessages}>\n              <span>{lang('GroupMessagesChargePrice')}</span>\n              <Switcher\n                id=\"charge_for_messages\"\n                label={lang('GroupMessagesChargePrice')}\n                checked={isPriceForMessagesOpen}\n              />\n            </ListItem>\n            <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('RightsChargeStarsAbout')}\n            </p>\n          </div>\n        )}\n\n        {isPriceForMessagesOpen && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <PaidMessagePrice\n              canChangeChargeForMessages\n              isGroupChat\n              chargeForMessages={chargeForMessages}\n              onChange={handleChargeForMessagesChange}\n            />\n          </div>\n        )}\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div\n          className={buildClassName(\n            'section',\n            isMediaDropdownOpen && 'shifted',\n          )}\n        >\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={arePermissionsChanged}\n        onClick={handleUpdatePermissions}\n        ariaLabel={lang('Save')}\n        disabled={arePermissionsLoading}\n      >\n        {arePermissionsLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const { progress } = selectTabState(global).management;\n\n    const paidMessagesStars = chat?.paidMessagesStars;\n    const configStarsPaidMessageCommissionPermille = global.appConfig?.starsPaidMessageCommissionPermille;\n\n    return {\n      chat,\n      progress,\n      currentUserId: global.currentUserId,\n      removedUsersCount: fullInfo?.kickedMembers?.length || 0,\n      members: fullInfo?.members,\n      arePaidMessagesAvailable: Boolean(fullInfo?.arePaidMessagesAvailable && configStarsPaidMessageCommissionPermille),\n      canChargeForMessages: Boolean(paidMessagesStars && configStarsPaidMessageCommissionPermille),\n      groupPeersPaidStars: paidMessagesStars || DEFAULT_CHARGE_FOR_MESSAGES,\n    };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useManagePermissions from '../hooks/useManagePermissions';\n\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport PermissionCheckboxList from '../../main/PermissionCheckboxList';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  hasFullInfo?: boolean;\n  members?: ApiChatMember[];\n  isFormFullyDisabled?: boolean;\n};\n\nconst ITEM_HEIGHT = 48;\nconst SHIFT_HEIGHT_MINUS = 1;\nconst BEFORE_ITEMS_COUNT = 2;\nconst BEFORE_USER_INFO_HEIGHT = 96;\nconst ITEMS_COUNT = 9;\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  hasFullInfo,\n  members,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const selectedChatMember = useMemo(() => {\n    if (!members) {\n      return undefined;\n    }\n\n    return members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [members, selectedChatMemberId]);\n\n  const {\n    permissions, havePermissionChanged, isLoading, handlePermissionChange, setIsLoading,\n  } = useManagePermissions(selectedChatMember?.bannedRights || chat?.defaultBannedRights);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (hasFullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, hasFullInfo, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, setIsLoading, updateChatMemberBannedRights, permissions]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  const [isMediaDropdownOpen, setIsMediaDropdownOpen] = useState(false);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div\n      className=\"Management with-shifted-dropdown\"\n      style={`--shift-height: ${ITEMS_COUNT * ITEM_HEIGHT - SHIFT_HEIGHT_MINUS}px;`\n        + `--before-shift-height: ${BEFORE_ITEMS_COUNT * ITEM_HEIGHT + BEFORE_USER_INFO_HEIGHT}px;`}\n    >\n      <div className=\"custom-scroll\">\n        <div className=\"section without-bottom-shadow\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} forceShowSelf />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{oldLang('UserRestrictionsCanDo')}</h3>\n          <PermissionCheckboxList\n            chatId={chat?.id}\n            isMediaDropdownOpen={isMediaDropdownOpen}\n            setIsMediaDropdownOpen={setIsMediaDropdownOpen}\n            handlePermissionChange={handlePermissionChange}\n            permissions={permissions}\n            className={buildClassName(\n              'DropdownList',\n              isMediaDropdownOpen && 'DropdownList--open',\n            )}\n            dropdownClassName=\"DropdownListTrap\"\n            shiftedClassName={buildClassName('part', isMediaDropdownOpen && 'shifted')}\n            getControlIsDisabled={getControlIsDisabled}\n          />\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div\n            className={buildClassName(\n              'section',\n              isMediaDropdownOpen && 'shifted',\n            )}\n          >\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {oldLang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={oldLang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text={lang('GroupManagementBanUserConfirm')}\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const fullInfo = selectChatFullInfo(global, chatId);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      isFormFullyDisabled,\n      hasFullInfo: Boolean(fullInfo),\n      members: fullInfo?.members,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { isChatChannel, sortUserIds } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport NothingFound from '../../common/NothingFound';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [members, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = selectChatFullInfo(global, chatId)?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nimport CalendarModal from '../../common/CalendarModal';\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useOldLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useSyncEffect(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime() * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime() + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : Number(selectedUsageOption);\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime() + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime() + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"section-help hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-heading\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)}\n              {' '}\n              {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"section-help hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-heading\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"section-help hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <Icon name=\"check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = selectTabState(global).management.byChatId[chatId] || {};\n\n    return {\n      editingInvite,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport LinkField from '../../common/LinkField';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n};\n\nconst BULLET = '\\u2022';\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  onClose,\n}) => {\n  const {\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useOldLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime()) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime()) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"section-help\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => {\n            const joinTime = formatMediaDateTime(lang, importer.date * 1000, true);\n            const status = importer.isFromChatList ? `${joinTime} ${BULLET} ${lang('JoinedViaFolder')}` : joinTime;\n            return (\n              <ListItem\n                className=\"chat-item-clickable scroll-item small-icon\"\n\n                onClick={() => openChat({ id: importer.userId })}\n              >\n                <PrivateChatInfo\n                  userId={importer.userId}\n                  status={status}\n                  forceShowSelf\n                />\n              </ListItem>\n            );\n          })}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p className=\"section-heading\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"section-help\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"panel-content custom-scroll\">\n        {!invite && (\n          <p className=\"section-help\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <LinkField title={invite.title} link={invite.link} className=\"invite-link\" />\n              {Boolean(expireDate) && (\n                <p className=\"section-help\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p className=\"section-heading\">{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = selectTabState(global).management.byChatId[chatId] || {};\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES, TME_LINK_PREFIX } from '../../../config';\nimport { getMainUsername, isChatChannel } from '../../../global/helpers';\nimport { selectChat, selectTabState } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport NothingFound from '../../common/NothingFound';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport ListItem, { type MenuItemContextAction } from '../../ui/ListItem';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n  const oldLang = useOldLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime() < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites]);\n  const forceUpdate = useForceUpdate();\n  useInterval(forceUpdate, hasDetailedCountdown ? 1000 : undefined);\n\n  const chatMainUsername = useMemo(() => chat && getMainUsername(chat), [chat]);\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chatMainUsername ? `${TME_LINK_PREFIX}${chatMainUsername}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.hasUsername ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.hasUsername, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: oldLang('LinkCopied'),\n    });\n  }, [oldLang, showNotification]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = oldLang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = oldLang('PeopleJoined', usage);\n    } else {\n      text = oldLang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${oldLang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${oldLang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${oldLang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = expireDate - getServerTime();\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += oldLang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += oldLang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${oldLang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const getInviteIconClass = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, isRevoked, expireDate,\n    } = invite;\n    if (isRevoked) {\n      return 'link-status-icon-gray';\n    }\n    if (usageLimit && usage < usageLimit) {\n      return 'link-status-icon-green';\n    }\n    if (expireDate) {\n      const diff = (expireDate - getServerTime()) * 1000;\n      if (diff <= 0) {\n        return 'link-status-icon-red';\n      }\n    }\n    return 'link-status-icon-blue';\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions: MenuItemContextAction[] = [];\n    actions.push({\n      title: oldLang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: oldLang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: oldLang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: oldLang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"section-help\">{isChannel ? oldLang('PrimaryLinkHelpChannel') : oldLang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <LinkField\n              className=\"settings-input\"\n              link={primaryInviteLink}\n              withShare\n              onRevoke={!chat?.usernames ? handlePrimaryRevoke : undefined}\n              title={chat?.usernames ? oldLang('PublicLink') : oldLang('lng_create_permanent_link_title')}\n            />\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <ListItem icon=\"add\" withPrimaryColor key=\"create\" className=\"create-item\" onClick={handleCreateNewClick}>\n            {oldLang('CreateNewLink')}\n          </ListItem>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n              secondaryIcon=\"more\"\n              multiline\n\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"section-help hint\" key=\"links-hint\">{oldLang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"section-help\" key=\"title\">{oldLang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{oldLang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                leftElement={<Icon name=\"link\" className={`link-status-icon ${getInviteIconClass(invite)}`} />}\n                secondaryIcon=\"more\"\n                multiline\n\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={oldLang('DeleteAllRevokedLinks')}\n        text={oldLang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={oldLang('RevokeLink')}\n        text={oldLang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={oldLang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={oldLang('DeleteLink')}\n        text={oldLang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={oldLang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = selectTabState(global).management.byChatId[chatId] || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  chatId,\n  about,\n  date,\n  isChannel,\n  user,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useOldLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime()) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            peer={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { isUserId } from '../../../util/entities/ids';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport JoinRequest from './JoinRequest';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"section-help\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport type React from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiChat, ApiChatReactions, ApiReaction,\n} from '../../../api/types';\n\nimport {\n  MAX_UNIQUE_REACTIONS,\n} from '../../../config';\nimport { isChatChannel, isSameReaction } from '../../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../../global/selectors';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RadioGroup from '../../ui/RadioGroup';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: ApiChatReactions;\n  maxUniqueReactions: number;\n  reactionsLimit?: number;\n  isChannel?: boolean;\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n  maxUniqueReactions,\n  reactionsLimit,\n  isChannel,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useOldLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState<ApiChatReactions | undefined>(enabledReactions);\n\n  const [localReactionsLimit, setLocalReactionsLimit] = useState(reactionsLimit);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const reactionsOptions = useMemo(() => [{\n    value: 'all',\n    label: lang('AllReactions'),\n  }, {\n    value: 'some',\n    label: lang('SomeReactions'),\n  }, {\n    value: 'none',\n    label: lang('NoReactions'),\n  }], [lang]);\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n      reactionsLimit: localReactionsLimit,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions, localReactionsLimit]);\n\n  useEffect(() => {\n    setIsLoading(false);\n    setIsTouched(false);\n    setLocalEnabledReactions(enabledReactions);\n    setLocalReactionsLimit(reactionsLimit);\n  }, [enabledReactions, reactionsLimit]);\n\n  const availableActiveReactions = useMemo<ApiAvailableReaction[] | undefined>(\n    () => availableReactions?.filter(({ isInactive }) => !isInactive),\n    [availableReactions],\n  );\n\n  useEffect(() => {\n    if (localReactionsLimit !== undefined && localReactionsLimit !== reactionsLimit) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some') {\n      const isReactionsDisabled = enabledReactions?.type !== 'all' && enabledReactions?.type !== 'some';\n\n      if (isReactionsDisabled && localEnabledReactions.allowed.length === 0) {\n        setIsTouched(false);\n        return;\n      }\n    }\n\n    if (localEnabledReactions?.type !== enabledReactions?.type) {\n      setIsTouched(true);\n      return;\n    }\n\n    if (localEnabledReactions?.type === 'some' && enabledReactions?.type === 'some') {\n      const localAllowedReactions = localEnabledReactions.allowed;\n      const enabledAllowedReactions = enabledReactions?.allowed;\n\n      if (localAllowedReactions.length !== enabledAllowedReactions.length\n        || localAllowedReactions.reverse().some(\n          (localReaction) => !enabledAllowedReactions.find(\n            (enabledReaction) => isSameReaction(localReaction, enabledReaction),\n          ),\n        )) {\n        setIsTouched(true);\n        return;\n      }\n    }\n\n    setIsTouched(false);\n  }, [\n    localReactionsLimit,\n    reactionsLimit,\n    localEnabledReactions,\n    enabledReactions,\n  ]);\n\n  const handleReactionsOptionChange = useCallback((value: string) => {\n    if (value === 'all') {\n      setLocalEnabledReactions({ type: 'all' });\n      setLocalReactionsLimit(reactionsLimit);\n    } else if (value === 'some') {\n      setLocalEnabledReactions({\n        type: 'some',\n        allowed: enabledReactions?.type === 'some' ? enabledReactions.allowed : [],\n      });\n      setLocalReactionsLimit(reactionsLimit);\n    } else {\n      setLocalEnabledReactions(undefined);\n      setLocalReactionsLimit(undefined);\n    }\n  }, [enabledReactions, reactionsLimit]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableActiveReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    if (localEnabledReactions?.type === 'some') {\n      const reaction = { emoticon: name } as ApiReaction;\n      if (checked) {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: [...localEnabledReactions.allowed, reaction],\n        });\n      } else {\n        setLocalEnabledReactions({\n          type: 'some',\n          allowed: localEnabledReactions.allowed.filter((local) => !isSameReaction(local, reaction)),\n        });\n      }\n    }\n  }, [availableActiveReactions, chat, localEnabledReactions]);\n\n  const handleReactionsLimitChange = useCallback((value: number) => {\n    setLocalReactionsLimit(value);\n  }, []);\n\n  const renderReactionsMaxCountValue = useCallback((value: number) => {\n    return lang('PeerInfo.AllowedReactions.MaxCountValue', value);\n  }, [lang]);\n\n  const shouldShowReactionsLimit = isChannel\n    && (localEnabledReactions?.type === 'all' || localEnabledReactions?.type === 'some');\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        {Boolean(localReactionsLimit && shouldShowReactionsLimit) && (\n          <div className=\"section\">\n            <h3 className=\"section-heading\">\n              {lang('MaximumReactionsHeader')}\n            </h3>\n            <RangeSlider\n              min={1}\n              max={maxUniqueReactions}\n              value={localReactionsLimit!}\n              onChange={handleReactionsLimitChange}\n              renderValue={renderReactionsMaxCountValue}\n              isCenteredLayout\n            />\n            <p className=\"section-info section-info_push\">\n              {lang('ChannelReactions.MaxCount.Info')}\n            </p>\n          </div>\n        )}\n        <div className=\"section\">\n          <h3 className=\"section-heading\">\n            {lang('AvailableReactions')}\n          </h3>\n          <RadioGroup\n            selected={localEnabledReactions?.type || 'none'}\n            name=\"reactions\"\n            options={reactionsOptions}\n            onChange={handleReactionsOptionChange}\n          />\n          <p className=\"section-info section-info_push\">\n            {localEnabledReactions?.type === 'all' && lang('EnableAllReactionsInfo')}\n            {localEnabledReactions?.type === 'some' && lang('EnableSomeReactionsInfo')}\n            {!localEnabledReactions && lang('DisableReactionsInfo')}\n          </p>\n        </div>\n        {localEnabledReactions?.type === 'some' && (\n          <div className=\"section section-with-fab\">\n            <h3 className=\"section-heading\">\n              {lang('OnlyAllowThisReactions')}\n            </h3>\n            {availableActiveReactions?.map(({ reaction, title }) => (\n              <div className=\"ListItem\">\n                <Checkbox\n                  name={reaction.emoticon}\n                  checked={localEnabledReactions?.allowed.some((r) => isSameReaction(reaction, r))}\n                  label={(\n                    <div className=\"Reaction\">\n                      <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />\n                      {title}\n                    </div>\n                  )}\n                  withIcon\n                  onChange={handleReactionChange}\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { maxUniqueReactions = MAX_UNIQUE_REACTIONS } = global.appConfig || {};\n\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const reactionsLimit = chatFullInfo?.reactionsLimit || maxUniqueReactions;\n    const isChannel = isChatChannel(chat);\n\n    return {\n      enabledReactions: chatFullInfo?.enabledReactions,\n      availableReactions: global.reactions.availableReactions,\n      chat,\n      maxUniqueReactions,\n      reactionsLimit,\n      isChannel,\n    };\n  },\n  (global, { chatId }) => {\n    return Boolean(selectChat(global, chatId));\n  },\n)(ManageReactions));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPhoto, ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { isUserBot } from '../../../global/helpers';\nimport { getIsChatMuted } from '../../../global/helpers/notifications';\nimport {\n  selectChat,\n  selectNotifyDefaults,\n  selectNotifyException,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport Checkbox from '../../ui/Checkbox';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport SelectAvatar from '../../ui/SelectAvatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n  personalPhoto?: ApiPhoto;\n  notPersonalPhoto?: ApiPhoto;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n  personalPhoto,\n  notPersonalPhoto,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n    uploadContactProfilePhoto,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isResetPersonalPhotoDialogOpen, openResetPersonalPhotoDialog, closeResetPersonalPhotoDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useOldLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n\n    if (error === ERROR_FIRST_NAME_MISSING) {\n      setError(undefined);\n    }\n  }, [error]);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  const inputRef = useRef<HTMLInputElement>();\n  const isSuggestRef = useRef(false);\n\n  const handleSuggestPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = true;\n  }, []);\n\n  const handleSetPersonalPhoto = useCallback(() => {\n    inputRef.current?.click();\n    isSuggestRef.current = false;\n  }, []);\n\n  const handleResetPersonalAvatar = useCallback(() => {\n    closeResetPersonalPhotoDialog();\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId });\n  }, [closeResetPersonalPhotoDialog, uploadContactProfilePhoto, userId]);\n\n  const handleSelectAvatar = useCallback((file: File) => {\n    setIsProfileFieldsTouched(true);\n    uploadContactProfilePhoto({ userId, file, isSuggest: isSuggestRef.current });\n  }, [uploadContactProfilePhoto, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const canSetPersonalPhoto = !isUserBot(user) && user.id !== SERVICE_NOTIFICATIONS_USER_ID;\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            noStatusOrTyping\n            noEmojiStatus\n            withFullInfo\n          />\n          <div className=\"settings-edit\">\n            <InputText\n              id=\"user-first-name\"\n              label={lang('UserInfo.FirstNamePlaceholder')}\n              onChange={handleFirstNameChange}\n              value={firstName}\n              error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n            />\n            <InputText\n              id=\"user-last-name\"\n              label={lang('UserInfo.LastNamePlaceholder')}\n              onChange={handleLastNameChange}\n              value={lastName}\n            />\n          </div>\n          <div className=\"ListItem narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        {canSetPersonalPhoto && (\n          <div className=\"section\">\n            <ListItem icon=\"camera-add\" ripple onClick={handleSuggestPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SuggestPhoto', user.firstName)}</span>\n            </ListItem>\n            <ListItem icon=\"camera-add\" ripple onClick={handleSetPersonalPhoto}>\n              <span className=\"list-item-ellipsis\">{lang('UserInfo.SetCustomPhoto', user.firstName)}</span>\n            </ListItem>\n            {personalPhoto && (\n              <ListItem\n                leftElement={(\n                  <Avatar\n                    photo={notPersonalPhoto}\n                    noPersonalPhoto\n                    peer={user}\n                    size=\"mini\"\n                    className=\"personal-photo\"\n                  />\n                )}\n                ripple\n                onClick={openResetPersonalPhotoDialog}\n              >\n                {lang('UserInfo.ResetCustomPhoto')}\n              </ListItem>\n            )}\n            <p className=\"section-help\" dir=\"auto\">{lang('UserInfo.CustomPhotoInfo', user.firstName)}</p>\n          </div>\n        )}\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <Icon name=\"check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isResetPersonalPhotoDialogOpen}\n        onClose={closeResetPersonalPhotoDialog}\n        text={lang('UserInfo.ResetToOriginalAlertText', user.firstName)}\n        confirmLabel={lang('Reset')}\n        confirmHandler={handleResetPersonalAvatar}\n        confirmIsDestructive\n      />\n      <SelectAvatar\n        onChange={handleSelectAvatar}\n        inputRef={inputRef}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId);\n    const userFullInfo = selectUserFullInfo(global, userId);\n    const { progress } = selectTabState(global).management;\n    const isMuted = chat && getIsChatMuted(chat, selectNotifyDefaults(global), selectNotifyException(global, chat.id));\n    const personalPhoto = userFullInfo?.personalPhoto;\n    const notPersonalPhoto = userFullInfo?.profilePhoto || userFullInfo?.fallbackPhoto;\n\n    return {\n      user, progress, isMuted, personalPhoto, notPersonalPhoto,\n    };\n  },\n)(ManageUser));\n","import type { FC } from '../../../lib/teact/teact.ts';\nimport type React from '../../../lib/teact/teact.ts';\nimport { useState } from '../../../lib/teact/teact.ts';\nimport { memo } from '../../../lib/teact/teact.ts';\n\nimport type { ApiChat } from '../../../api/types/index.ts';\nimport type { ManagementScreens } from '../../../types/index.ts';\nimport { ChatCreationProgress } from '../../../types/index.ts';\n\nimport { getActions, withGlobal } from '../../../global/index.ts';\nimport { selectChat, selectTabState } from '../../../global/selectors/index.ts';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack.ts';\nimport useLang from '../../../hooks/useLang.ts';\nimport useLastCallback from '../../../hooks/useLastCallback.ts';\n\nimport Icon from '../../common/icons/Icon.tsx';\nimport AvatarEditable from '../../ui/AvatarEditable.tsx';\nimport FloatingActionButton from '../../ui/FloatingActionButton.tsx';\nimport InputText from '../../ui/InputText.tsx';\nimport Spinner from '../../ui/Spinner.tsx';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\nconst NewDiscussionGroup: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  creationProgress,\n  creationError,\n}) => {\n  const { createChannel } = getActions();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const [title, setTitle] = useState(lang('NewDiscussionChatTitle', { name: chat?.title }));\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useLastCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.trimStart();\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  });\n\n  const renderedError = (creationError && lang('NewChatTitleEmptyError')) || (\n    error !== lang('NewChatTitleEmptyError') && error !== lang('NewChannelTitleEmptyError')\n      ? error\n      : undefined\n  );\n\n  const handleCreateGroup = useLastCallback(() => {\n    if (!title.length) {\n      setError(lang('NewChatTitleEmptyError'));\n      return;\n    }\n    if (!chat) return;\n\n    createChannel({\n      discussionChannelId: chat.id,\n      title,\n      photo,\n      isSuperGroup: true,\n    });\n  });\n\n  return (\n    <div className=\"Management\">\n      <div className=\"panel-content custom-scroll\">\n        <div className=\"NewChat\">\n          <div className=\"NewChat-inner step-2\">\n            <AvatarEditable\n              onChange={setPhoto}\n              title={lang('AddPhoto')}\n            />\n            <InputText\n              value={title}\n              onChange={handleTitleChange}\n              label={lang('GroupName')}\n              error={error === lang('NewChatTitleEmptyError')\n                || error === lang('NewChannelTitleEmptyError') ? error : undefined}\n            />\n\n            {renderedError && (\n              <p className=\"error\">{renderedError}</p>\n            )}\n          </div>\n\n          <FloatingActionButton\n            isShown={title.length !== 0}\n            onClick={handleCreateGroup}\n            disabled={isLoading}\n            ariaLabel={lang('DiscussionCreateGroup')}\n          >\n            {isLoading ? (\n              <Spinner color=\"white\" />\n            ) : (\n              <Icon name=\"arrow-right\" />\n            )}\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = selectTabState(global).chatCreation || {};\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewDiscussionGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageBot from './ManageBot';\nimport ManageChannel from './ManageChannel';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvite from './ManageInvite';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageInvites from './ManageInvites';\nimport ManageJoinRequests from './ManageJoinRequests';\nimport ManageReactions from './ManageReactions';\nimport ManageUser from './ManageUser';\nimport NewDiscussionGroup from './NewDiscussionGroup.tsx';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'bot':\n          return (\n            <ManageBot\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.NewDiscussionGroup:\n      return (\n        <NewDiscussionGroup\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4\\d/;\nconst MASTERCARD1 = /^5[1-5]/;\nconst MASTERCARD2 = /^2[2-7]\\d{2}/;\nconst MIR = /^220[0-4]/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n  Mir,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n  [CardType.Mir]: 'mir',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MIR.test(cardNumber)) {\n    return CardType.Mir;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType] || '';\n}\n","import type { RegularLangFnParameters } from '../../util/localization';\nimport type { Dispatch, StateReducer } from '../useReducer';\n\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Partial<Record<string, RegularLangFnParameters>>;\n  tipAmount: number;\n  savedCredentialId: string;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors' | 'resetState' | 'setTipAmount' |\n  'changeSavedCredentialId'\n);\nexport type FormEditDispatch = Dispatch<FormState, FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n  tipAmount: 0,\n  savedCredentialId: '',\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    case 'setTipAmount':\n      return {\n        ...state,\n        tipAmount: action.payload,\n      };\n    case 'changeSavedCredentialId':\n      return {\n        ...state,\n        savedCredentialId: action.payload,\n      };\n    case 'resetState':\n      return {\n        ...INITIAL_STATE,\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"maC_9u6e\",\"description\":\"zQ6lEVJ2\",\"checkout-picture\":\"JgWvLdK2\",\"checkoutPicture\":\"JgWvLdK2\",\"text\":\"T2pYH395\",\"checkout-title\":\"HadolzeF\",\"checkoutTitle\":\"HadolzeF\",\"checkout-description\":\"oZW7mUNP\",\"checkoutDescription\":\"oZW7mUNP\",\"price-info\":\"P618Q3yr\",\"priceInfo\":\"P618Q3yr\",\"price-info-item\":\"XNNG_ajy\",\"priceInfoItem\":\"XNNG_ajy\",\"price-info-item-main\":\"D9gYNLVk\",\"priceInfoItemMain\":\"D9gYNLVk\",\"price-info-item-title\":\"NtY5Aah7\",\"priceInfoItemTitle\":\"NtY5Aah7\",\"tipsList\":\"WHO341eB\",\"tipsItem\":\"ksLlzBxw\",\"tipsItem_active\":\"J4yem62L\",\"tipsItemActive\":\"J4yem62L\",\"invoice-info\":\"U2IBOLP1\",\"invoiceInfo\":\"U2IBOLP1\",\"provider\":\"kqWcdro1\",\"stripe\":\"xKztZrna\",\"smartglocal\":\"X_Ge1o4u\",\"checkout-info-item-info-title\":\"ysWuPklS\",\"checkoutInfoItemInfoTitle\":\"ysWuPklS\",\"checkout-info-item-info-data\":\"MpC_P8_c\",\"checkoutInfoItemInfoData\":\"MpC_P8_c\",\"tos-checkbox\":\"OrRb0xG7\",\"tosCheckbox\":\"OrRb0xG7\",\"list\":\"l_wfiFG0\"};","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type {\n  ApiInvoice,\n  ApiLabeledPrice,\n  ApiPaymentCredentials,\n  ApiWebDocument,\n} from '../../api/types';\nimport type { FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport type { IconName } from '../../types/icons';\nimport type { LangFn } from '../../util/localization';\nimport { PaymentStep } from '../../types';\n\nimport { getWebDocumentHash } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatCurrency } from '../../util/formatCurrency';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransition from '../../hooks/useMediaTransition';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport SafeLink from '../common/SafeLink';\nimport Checkbox from '../ui/Checkbox';\nimport ListItem from '../ui/ListItem';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './Checkout.module.scss';\n\nexport type OwnProps = {\n  title: string;\n  description: string;\n  photo?: ApiWebDocument;\n  invoice: ApiInvoice;\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  totalPrice?: number;\n  needAddress?: boolean;\n  hasShippingOptions?: boolean;\n  tipAmount?: number;\n  shippingPrices?: ApiLabeledPrice[];\n  isTosAccepted?: boolean;\n  dispatch?: FormEditDispatch;\n  onAcceptTos?: (isAccepted: boolean) => void;\n  savedCredentials?: ApiPaymentCredentials[];\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  title,\n  description,\n  photo,\n  invoice,\n  shippingPrices,\n  checkoutInfo,\n  totalPrice,\n  isTosAccepted,\n  dispatch,\n  onAcceptTos,\n  tipAmount,\n  needAddress,\n  hasShippingOptions,\n  savedCredentials,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const { setPaymentStep } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const isInteractive = Boolean(dispatch);\n\n  const {\n    termsUrl, suggestedTipAmounts, maxTipAmount,\n  } = invoice || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  const ref = useMediaTransition<HTMLImageElement>(photoUrl);\n\n  const handleTipsClick = useCallback((tips: number) => {\n    dispatch!({ type: 'setTipAmount', payload: maxTipAmount ? Math.min(tips, maxTipAmount) : tips });\n  }, [dispatch, maxTipAmount]);\n\n  const handlePaymentMethodClick = useCallback(() => {\n    setPaymentStep({ step: savedCredentials?.length ? PaymentStep.SavedPayments : PaymentStep.PaymentInfo });\n  }, [savedCredentials?.length, setPaymentStep]);\n\n  const handleShippingAddressClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.ShippingInfo });\n  }, [setPaymentStep]);\n\n  const handleShippingMethodClick = useCallback(() => {\n    setPaymentStep({ step: PaymentStep.Shipping });\n  }, [setPaymentStep]);\n\n  function renderTips() {\n    return (\n      <>\n        <div className={styles.priceInfoItem}>\n          <div className={styles.priceInfoItemTitle}>\n            {title}\n          </div>\n          <div>\n            {formatCurrency(lang, tipAmount!, invoice.currency)}\n          </div>\n        </div>\n        <div className={styles.tipsList}>\n          {suggestedTipAmounts!.map((tip) => (\n            <div\n              key={tip}\n              className={buildClassName(styles.tipsItem, tip === tipAmount && styles.tipsItem_active)}\n              onClick={dispatch ? () => handleTipsClick(tip === tipAmount ? 0 : tip) : undefined}\n            >\n              {formatCurrency(lang, tip, invoice.currency, { shouldOmitFractions: true })}\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n\n  function renderTosLink(url: string, isRtl?: boolean) {\n    const langString = oldLang('PaymentCheckoutAcceptRecurrent', botName);\n    const langStringSplit = langString.split('*');\n    return (\n      <>\n        {langStringSplit[0]}\n        <SafeLink\n          url={url}\n          text={langStringSplit[1]}\n          isRtl={isRtl}\n        />\n        {langStringSplit.slice(2)}\n      </>\n    );\n  }\n\n  function renderTos(url: string) {\n    return (\n      <Checkbox\n        label={renderTosLink(url, oldLang.isRtl)}\n        name=\"checkout_tos\"\n        checked={Boolean(isTosAccepted)}\n        className={styles.tosCheckbox}\n        tabIndex={0}\n        onCheck={onAcceptTos}\n      />\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.description}>\n        {photoUrl && (\n          <img\n            ref={ref}\n            className={styles.checkoutPicture}\n            src={photoUrl}\n            draggable={false}\n            width={photo!.dimensions?.width}\n            height={photo!.dimensions?.height}\n            alt=\"\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton\n            width={photo.dimensions?.width}\n            height={photo.dimensions?.height}\n            className={styles.checkoutPicture}\n            forceAspectRatio\n          />\n        )}\n        <div className={styles.text}>\n          <h5 className={styles.checkoutTitle}>{title}</h5>\n          {description && (\n            <div className={styles.checkoutDescription}>\n              {renderText(description, ['br', 'links', 'emoji'])}\n            </div>\n          )}\n        </div>\n      </div>\n      <div className={styles.priceInfo}>\n        {invoice.prices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang, item.label, item.amount, invoice.currency)\n        ))}\n        {suggestedTipAmounts && suggestedTipAmounts.length > 0 && renderTips()}\n        {totalPrice !== undefined && (\n          renderPaymentItem(lang, oldLang('Checkout.TotalAmount'), totalPrice, invoice.currency, true)\n        )}\n      </div>\n      <div className={styles.invoiceInfo}>\n        {!isPaymentFormUrl && renderCheckoutItem({\n          title: paymentMethod || savedCredentials?.[0].title,\n          label: oldLang('PaymentCheckoutMethod'),\n          icon: 'card',\n          onClick: isInteractive ? handlePaymentMethodClick : undefined,\n        })}\n        {paymentProvider && renderCheckoutItem({\n          title: paymentProvider,\n          label: oldLang('PaymentCheckoutProvider'),\n          customIcon: buildClassName(styles.provider, styles[paymentProvider.toLowerCase()]),\n        })}\n        {(needAddress || (!isInteractive && shippingAddress)) && renderCheckoutItem({\n          title: shippingAddress,\n          label: oldLang('PaymentShippingAddress'),\n          icon: 'location',\n          onClick: isInteractive ? handleShippingAddressClick : undefined,\n        })}\n        {name && renderCheckoutItem({\n          title: name,\n          label: oldLang('PaymentCheckoutName'),\n          icon: 'user',\n        })}\n        {phone && renderCheckoutItem({\n          title: phone,\n          label: oldLang('PaymentCheckoutPhoneNumber'),\n          icon: 'phone',\n        })}\n        {(hasShippingOptions || (!isInteractive && shippingMethod)) && renderCheckoutItem({\n          title: shippingMethod,\n          label: oldLang('PaymentCheckoutShippingMethod'),\n          icon: 'truck',\n          onClick: isInteractive ? handleShippingMethodClick : undefined,\n        })}\n        {termsUrl && renderTos(termsUrl)}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Checkout);\n\nfunction renderPaymentItem(\n  lang: LangFn, title: string, value: number, currency: string, main = false,\n) {\n  return (\n    <div className={buildClassName(styles.priceInfoItem, main && styles.priceInfoItemMain)}>\n      <div className={styles.priceInfoItemTitle}>\n        {title}\n      </div>\n      <div>\n        {formatCurrency(lang, value, currency)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem({\n  title,\n  label,\n  icon,\n  customIcon,\n  onClick,\n}: {\n  title: string | undefined;\n  label: string | undefined;\n  icon?: IconName;\n  onClick?: NoneToVoidFunction;\n  customIcon?: string;\n}) {\n  const isMultiline = Boolean(title && label !== title);\n\n  return (\n    <ListItem\n      className={styles.list}\n      narrow\n      multiline={isMultiline}\n      icon={icon}\n      inactive={!onClick}\n      onClick={onClick}\n      leftElement={customIcon && <i className={buildClassName('icon', customIcon)} />}\n    >\n      <div className={styles.checkoutInfoItemInfoTitle}>\n        {title || label}\n      </div>\n      {title && label !== title && (\n        <p className={styles.checkoutInfoItemInfoData}>\n          {label}\n        </p>\n      )}\n    </ListItem>\n  );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { TME_LINK_PREFIX } from '../../config';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n  noRedirect?: boolean;\n  onClose: NoneToVoidFunction;\n  onPaymentFormSubmit?: (eventData: PaymentFormSubmitEvent['eventData']) => void;\n};\n\nexport interface PaymentFormSubmitEvent {\n  eventType: 'payment_form_submit';\n  eventData: {\n    credentials: {\n      token: string;\n      type: string;\n    };\n    title: string;\n  };\n}\n\ninterface WebAppOpenTgLinkEvent {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full?: string;\n  };\n}\n\ntype IframeCallbackEvent = PaymentFormSubmitEvent | WebAppOpenTgLinkEvent;\n\nconst ConfirmPayment: FC<OwnProps> = ({\n  url, noRedirect, onClose, onPaymentFormSubmit,\n}) => {\n  const { openTelegramLink } = getActions();\n\n  const lang = useOldLang();\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as IframeCallbackEvent;\n      const { eventType, eventData } = data;\n      switch (eventType) {\n        case 'web_app_open_tg_link':\n          if (!noRedirect) {\n            const linkUrl = TME_LINK_PREFIX + eventData.path_full!;\n            openTelegramLink({ url: linkUrl });\n          }\n          onClose();\n          break;\n        case 'payment_form_submit':\n          if (onPaymentFormSubmit) {\n            onPaymentFormSubmit(eventData);\n          }\n          break;\n        default:\n          onClose();\n          break;\n      }\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [onClose, noRedirect, openTelegramLink, onPaymentFormSubmit]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-modals allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useMemo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { RegularLangFnParameters } from '../../util/localization';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport PasswordForm from '../common/PasswordForm';\nimport PasswordMonkey from '../common/PasswordMonkey';\n\ninterface OwnProps {\n  isActive?: boolean;\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  onPasswordChange: (password: string) => void;\n}\n\ninterface StateProps {\n  errorKey?: RegularLangFnParameters;\n  passwordHint?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n}\n\nconst PasswordConfirm: FC<OwnProps & StateProps> = ({\n  isActive,\n  errorKey,\n  state,\n  savedCredentials,\n  passwordHint,\n  onPasswordChange,\n}) => {\n  const { clearPaymentError } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n  const cardName = useMemo(() => {\n    return savedCredentials?.length && state.savedCredentialId\n      ? savedCredentials.find(({ id }) => id === state.savedCredentialId)?.title\n      : undefined;\n  }, [savedCredentials, state.savedCredentialId]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n\n      <PasswordForm\n        error={errorKey && lang.withRegular(errorKey)}\n        hint={passwordHint}\n        description={oldLang('PaymentConfirmationMessage', cardName)}\n        placeholder={oldLang('Password')}\n        clearError={clearPaymentError}\n        shouldShowSubmit={false}\n        shouldResetValue={isActive}\n        isPasswordVisible={shouldShowPassword}\n        onChangePasswordVisibility={setShouldShowPassword}\n        onInputChange={onPasswordChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global): StateProps => {\n  const { payment } = selectTabState(global);\n  return {\n    errorKey: payment.error?.messageKey,\n    passwordHint: global.twoFaSettings.hint,\n    savedCredentials: payment.form?.type === 'regular' ? payment.form.savedCredentials : undefined,\n  };\n})(PasswordConfirm));\n","import type { ElementRef } from '../lib/teact/teact';\nimport { useEffect } from '../lib/teact/teact';\n\nimport { requestMeasure } from '../lib/fasterdom/fasterdom';\nimport { IS_TOUCH_ENV } from '../util/browser/windowEnvironment';\n\nconst DEFAULT_DURATION = 300;\n\nexport default function useFocusAfterAnimation(\n  ref: ElementRef<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      requestMeasure(() => {\n        ref.current?.focus();\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\n\nimport { CardType, detectCardType } from '../common/helpers/detectCardType';\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport mirIconPath from '../../assets/mir.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 19;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput: FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useOldLang();\n  const cardNumberRef = useRef<HTMLInputElement>();\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n  }, [onChange]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-right-addon' : ''}\n        error={error}\n        tabIndex={0}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n        teactExperimentControlled\n      />\n      <span className=\"right-addon\">{cardIcon}</span>\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} draggable={false} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} draggable={false} alt=\"\" />;\n    case CardType.Mir:\n      return <img src={mirIconPath} draggable={false} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport InputText from '../ui/InputText';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput: FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useOldLang();\n\n  const handleChange = useCallback((e) => {\n    const newValue = e.target.value;\n    // Allow deleting separator\n    if (value.endsWith('/') && value.length > newValue.length) {\n      onChange(newValue);\n    } else {\n      onChange(formatCardExpiry(e.target.value));\n    }\n  }, [onChange, value]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      onChange={handleChange}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      tabIndex={0}\n      maxLength={MAX_FIELD_LENGTH}\n      teactExperimentControlled\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport CardInput from './CardInput';\nimport ExpiryInput from './ExpiryInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    const newValue = e.target.value.replace(/[^0-9]/g, '');\n    dispatch({ type: 'changeCvvCode', payload: newValue });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{oldLang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber && lang.withRegular(formErrors.cardNumber)}\n        />\n        {needCardholderName && (\n          <InputText\n            label={oldLang('Checkout.NewCard.CardholderNamePlaceholder')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.cardholder && lang.withRegular(formErrors.cardholder)}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry && lang.withRegular(formErrors.expiry)}\n          />\n          <InputText\n            label={oldLang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            tabIndex={0}\n            error={formErrors.cvv && lang.withRegular(formErrors.cvv)}\n            teactExperimentControlled\n          />\n        </section>\n        {needCountry || needZip ? (\n          <h5>{oldLang('PaymentBillingAddress')}</h5>\n        ) : undefined}\n        <section className=\"inline-inputs\">\n          {needCountry && (\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.billingCountry}\n              hasArrow={Boolean(true)}\n              id=\"billing-country\"\n              error={formErrors.billingCountry && lang.withRegular(formErrors.billingCountry)}\n              tabIndex={0}\n              ref={selectCountryRef}\n            >\n              {\n                countryList.map(({ defaultName, name }) => (\n                  <option\n                    value={defaultName}\n                    className=\"county-item\"\n                    selected={defaultName === state.billingCountry}\n                  >\n                    {defaultName || name}\n                  </option>\n                ))\n              }\n            </Select>\n          )}\n          {needZip && (\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handleBillingPostCodeChange}\n              value={state.billingZip}\n              inputMode=\"text\"\n              tabIndex={0}\n              maxLength={12}\n              error={formErrors.billingZip && lang.withRegular(formErrors.billingZip)}\n            />\n          )}\n        </section>\n        <div className=\"checkbox\">\n          <Checkbox\n            label={oldLang('PaymentCardSavePaymentInformation')}\n            checked={canSaveCredentials ? state.saveCredentials : false}\n            tabIndex={0}\n            subLabel={oldLang(canSaveCredentials ? 'Checkout.NewCard.SaveInfoHelp' : 'Checkout.2FA.Text')}\n            onChange={handleChangeSaveCredentials}\n            disabled={!canSaveCredentials}\n          />\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useMemo } from '../../lib/teact/teact';\n\nimport type { ApiPaymentCredentials } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport RadioGroup from '../ui/RadioGroup';\n\ninterface OwnProps {\n  state: FormState;\n  savedCredentials?: ApiPaymentCredentials[];\n  dispatch: FormEditDispatch;\n  onNewCardClick: NoneToVoidFunction;\n}\n\nconst SavedPaymentCredentials: FC<OwnProps> = ({\n  state,\n  savedCredentials,\n  dispatch,\n  onNewCardClick,\n}) => {\n  const lang = useOldLang();\n\n  const options = useMemo(() => {\n    return savedCredentials?.length\n      ? savedCredentials.map(({ id, title }) => ({ label: title, value: id }))\n      : MEMO_EMPTY_ARRAY;\n  }, [savedCredentials]);\n\n  const onChange = useCallback((value) => {\n    dispatch({ type: 'changeSavedCredentialId', payload: value });\n  }, [dispatch]);\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n\n        <RadioGroup\n          name=\"saved-credentials\"\n          options={options}\n          selected={state.savedCredentialId}\n          onChange={onChange}\n        />\n\n        <Button isText onClick={onNewCardClick}>\n          {lang('PaymentCheckoutMethodNewCard')}\n        </Button>\n      </form>\n    </div>\n  );\n};\n\nexport default memo(SavedPaymentCredentials);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect,\n  useMemo,\n} from '../../lib/teact/teact';\n\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\n\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || !shippingOptions.length || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(lang, amount, currency),\n    value,\n  }))), [shippingOptions, currency, lang]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{oldLang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo,\n  useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\nimport type { FormEditDispatch, FormState } from '../../hooks/reducers/usePaymentReducer';\n\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Checkbox from '../ui/Checkbox';\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  const inputRef = useRef<HTMLInputElement>();\n  const phoneRef = useRef<HTMLInputElement>();\n  const selectCountryRef = useRef<HTMLSelectElement>();\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{oldLang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={oldLang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine1 && lang.withRegular(formErrors.streetLine1)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.streetLine2 && lang.withRegular(formErrors.streetLine2)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.city && lang.withRegular(formErrors.city)}\n            />\n            <InputText\n              label={oldLang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state && lang.withRegular(formErrors.state)}\n            />\n            <Select\n              label={oldLang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2 && lang.withRegular(formErrors.countryIso2)}\n              ref={selectCountryRef}\n              tabIndex={0}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                  selected={iso2 === state.countryIso2}\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={oldLang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              tabIndex={0}\n              error={formErrors.postCode && lang.withRegular(formErrors.postCode)}\n            />\n          </div>\n        ) : undefined}\n        {needName || needEmail || needPhone ? (\n          <h5>{oldLang('PaymentShippingReceiver')}</h5>\n        ) : undefined}\n        {needName && (\n          <InputText\n            label={oldLang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            tabIndex={0}\n            error={formErrors.fullName && lang.withRegular(formErrors.fullName)}\n          />\n        )}\n        {needEmail && (\n          <InputText\n            label={oldLang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            tabIndex={0}\n            error={formErrors.email && lang.withRegular(formErrors.email)}\n          />\n        )}\n        {needPhone && (\n          <InputText\n            label={oldLang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            tabIndex={0}\n            error={formErrors.phone && lang.withRegular(formErrors.phone)}\n            ref={phoneRef}\n          />\n        )}\n        <Checkbox\n          label={oldLang('PaymentShippingSave')}\n          subLabel={oldLang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          tabIndex={0}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiCountry, ApiInvoice, ApiLabeledPrice, ApiPaymentCredentials, ApiPaymentFormRegular,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport type { ShippingOption } from '../../types';\nimport type { PaymentFormSubmitEvent } from './ConfirmPayment';\nimport { PaymentStep } from '../../types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport { selectChat, selectTabState, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport { formatCurrencyAsString } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\n\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport Checkout from './Checkout';\nimport ConfirmPayment from './ConfirmPayment';\nimport PasswordConfirm from './PasswordConfirm';\nimport PaymentInfo from './PaymentInfo';\nimport SavedPaymentCredentials from './SavedPaymentCredentials';\nimport Shipping from './Shipping';\nimport ShippingInfo from './ShippingInfo';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst DONATE_PROVIDER_URL = 'https://payment.smart-glocal.com';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  step?: PaymentStep;\n  chat?: ApiChat;\n  nativeProvider?: string;\n  invoice?: ApiInvoice;\n  form?: ApiPaymentFormRegular;\n  error?: TabState['payment']['error'];\n  prices?: ApiLabeledPrice[];\n  isProviderError?: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n  hasShippingOptions?: boolean;\n  shippingOptions?: ShippingOption[];\n  requestId?: string;\n  smartGlocalToken?: string;\n  stripeId?: string;\n  savedCredentials?: ApiPaymentCredentials[];\n  passwordValidUntil?: number;\n  isExtendedMedia?: boolean;\n  isPaymentFormUrl?: boolean;\n  botName?: string;\n};\n\nconst NETWORK_REQUEST_TIMEOUT_S = 3;\n\nconst PaymentModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  form,\n  isProviderError,\n  invoice,\n  nativeProvider,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n  hasShippingOptions,\n  requestId,\n  smartGlocalToken,\n  stripeId,\n  savedCredentials,\n  passwordValidUntil,\n  isExtendedMedia,\n  isPaymentFormUrl,\n  botName,\n}) => {\n  const {\n    loadPasswordInfo,\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n    validatePaymentPassword,\n    setSmartGlocalCardInfo,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTosAccepted, setIsTosAccepted] = useState(false);\n  const [twoFaPassword, setTwoFaPassword] = useState('');\n  const prevStep = usePreviousDeprecated(step, true);\n  const prevRequestId = usePreviousDeprecated(requestId);\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  useEffect(() => {\n    if (isOpen) {\n      setTwoFaPassword('');\n      loadPasswordInfo();\n      openModal();\n    }\n  }, [isOpen, loadPasswordInfo, openModal]);\n\n  // Modal window can be closed by an event from the server side\n  useEffect(() => {\n    if (!isOpen && isModalOpen) {\n      closeModal();\n    }\n  }, [closeModal, isModalOpen, isOpen]);\n\n  useEffect(() => {\n    if (step !== undefined || error) {\n      setIsLoading(false);\n    }\n  }, [step, error, requestId]);\n\n  // When payment verification occurs and the `step` does not change, the card details must be requested\n  useEffect(() => {\n    if (\n      step === PaymentStep.Checkout\n      && step === prevStep\n      && requestId !== prevRequestId\n      && !paymentState.savedCredentialId\n      && !paymentState.cardNumber\n    ) {\n      setStep(PaymentStep.PaymentInfo);\n    }\n  }, [paymentState.cardNumber, paymentState.savedCredentialId, prevRequestId, prevStep, requestId, setStep, step]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.messageKey,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (form?.savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = form.savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            countryIso2,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [form, paymentDispatch, countryList]);\n\n  useEffect(() => {\n    if (savedCredentials?.length) {\n      paymentDispatch({\n        type: 'changeSavedCredentialId',\n        payload: savedCredentials[0].id,\n      });\n    }\n  }, [paymentDispatch, savedCredentials]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount);\n  }, [step, invoice?.prices, shippingOptions, paymentState.shipping, paymentState.tipAmount]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  const handleNewCardClick = useCallback(() => {\n    setStep(PaymentStep.PaymentInfo);\n  }, [setStep]);\n\n  const handleClearPaymentError = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.descriptionKey ? lang.withRegular(error.descriptionKey) : lang('ErrorUnspecified')}</h4>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={handleClearPaymentError}\n          >\n            {oldLang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n      savedCredentialId: paymentState.savedCredentialId,\n      tipAmount: paymentState.tipAmount,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const handlePaymentFormSubmit = useCallback((eventData: PaymentFormSubmitEvent['eventData']) => {\n    const { credentials } = eventData;\n    setSmartGlocalCardInfo(credentials);\n    sendForm();\n  }, [sendForm]);\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            title={form!.title}\n            description={form!.description}\n            photo={form!.photo}\n            dispatch={paymentDispatch}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoice={invoice!}\n            checkoutInfo={checkoutInfo}\n            isPaymentFormUrl={isPaymentFormUrl}\n            hasShippingOptions={hasShippingOptions}\n            tipAmount={paymentState.tipAmount}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            savedCredentials={savedCredentials}\n            isTosAccepted={isTosAccepted}\n            onAcceptTos={setIsTosAccepted}\n            botName={botName}\n          />\n        );\n      case PaymentStep.SavedPayments:\n        return (\n          <SavedPaymentCredentials\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            dispatch={paymentDispatch}\n            onNewCardClick={handleNewCardClick}\n          />\n        );\n      case PaymentStep.ConfirmPassword:\n        return (\n          <PasswordConfirm\n            state={paymentState}\n            savedCredentials={savedCredentials}\n            onPasswordChange={setTwoFaPassword}\n            isActive={currentStep === step}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!form!.isPasswordMissing && form!.canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(invoice?.isShippingAddressRequested)}\n            needEmail={Boolean(invoice?.isEmailRequested || invoice?.isEmailSentToProvider)}\n            needPhone={Boolean(invoice?.isPhoneRequested || invoice?.isPhoneSentToProvider)}\n            needName={Boolean(invoice?.isNameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={invoice!.currency}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n            noRedirect={isExtendedMedia}\n            onPaymentFormSubmit={handlePaymentFormSubmit}\n            onClose={closeModal}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const handleButtonClick = useLastCallback(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        setIsLoading(true);\n        validateRequest();\n        break;\n\n      case PaymentStep.Shipping:\n        setStep(PaymentStep.Checkout);\n        break;\n\n      case PaymentStep.SavedPayments:\n        setStep(PaymentStep.ConfirmPassword);\n        break;\n\n      case PaymentStep.ConfirmPassword:\n        if (twoFaPassword === '') {\n          return;\n        }\n\n        setIsLoading(true);\n        validatePaymentPassword({ password: twoFaPassword });\n        break;\n\n      case PaymentStep.PaymentInfo:\n        setIsLoading(true);\n        sendCredentials();\n        paymentDispatch({ type: 'changeSavedCredentialId', payload: '' });\n        break;\n\n      case PaymentStep.Checkout: {\n        if (isPaymentFormUrl) {\n          setIsLoading(true);\n          setStep(PaymentStep.ConfirmPayment);\n          return;\n        }\n\n        if (form?.savedInfo && !requestId && !paymentState.shipping) {\n          setIsLoading(true);\n          validateRequest();\n          return;\n        }\n\n        if (\n          paymentState.savedCredentialId\n          && (!passwordValidUntil || passwordValidUntil <= (Date.now() / 1000 - NETWORK_REQUEST_TIMEOUT_S))\n        ) {\n          setStep(PaymentStep.ConfirmPassword);\n          return;\n        }\n\n        if (\n          !paymentState.savedCredentialId\n          && (\n            (nativeProvider === DEFAULT_PROVIDER && !stripeId)\n            || (nativeProvider === DONATE_PROVIDER && !smartGlocalToken)\n          )\n        ) {\n          setStep(PaymentStep.PaymentInfo);\n          return;\n        }\n\n        const { phone, email, fullName } = paymentState;\n        const shouldFillRequestedData = (invoice?.isEmailRequested && !email)\n          || (invoice?.isPhoneRequested && !phone)\n          || (invoice?.isNameRequested && !fullName);\n\n        if ((invoice?.isShippingAddressRequested && !requestId) || shouldFillRequestedData) {\n          setStep(PaymentStep.ShippingInfo);\n          return;\n        }\n\n        if (invoice?.isShippingAddressRequested && !paymentState.shipping && shippingOptions?.length) {\n          setStep(PaymentStep.Shipping);\n          return;\n        }\n\n        setIsLoading(true);\n        sendForm();\n        break;\n      }\n    }\n  });\n\n  useEffect(() => {\n    return step === PaymentStep.ConfirmPassword\n      ? captureKeyboardListeners({ onEnter: handleButtonClick })\n      : undefined;\n  },\n  [handleButtonClick, step]);\n\n  const handleModalClose = useCallback(() => {\n    paymentDispatch({\n      type: 'resetState',\n    });\n    setIsTosAccepted(false);\n    onClose();\n  }, [onClose, paymentDispatch]);\n\n  const handleBackClick = useCallback(() => {\n    setStep(step === PaymentStep.ConfirmPassword ? PaymentStep.SavedPayments : PaymentStep.Checkout);\n  }, [setStep, step]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return oldLang('PaymentCheckout');\n      case PaymentStep.ShippingInfo:\n        return oldLang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return oldLang('PaymentShippingMethod');\n      case PaymentStep.SavedPayments:\n        return oldLang('PaymentCheckoutMethod');\n      case PaymentStep.ConfirmPassword:\n        return oldLang('Checkout.PasswordEntry.Title');\n      case PaymentStep.PaymentInfo:\n        return oldLang('PaymentCardInfo');\n      case PaymentStep.ConfirmPayment:\n        return oldLang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, oldLang]);\n\n  const buttonText = step === PaymentStep.Checkout\n    ? oldLang('Checkout.PayPrice', formatCurrencyAsString(totalPrice, invoice!.currency, oldLang.code))\n    : lang('PaymentInfoDone');\n\n  function getIsSubmitDisabled() {\n    if (isLoading) {\n      return true;\n    }\n\n    switch (step) {\n      case PaymentStep.Checkout:\n        return Boolean(invoice?.termsUrl) && !isTosAccepted;\n\n      case PaymentStep.PaymentInfo:\n        return Boolean(\n          paymentState.cardNumber === ''\n          || (needCardholderName && paymentState.cardholder === '')\n          || paymentState.cvv === ''\n          || paymentState.expiry === '',\n        );\n\n      default:\n        return false;\n    }\n  }\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={handleModalClose}\n      >\n        <p>\n          Sorry, Telegram Web A doesn&apos;t support payments with this provider yet.\n          {' '}\n          <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <div className=\"dialog-buttons mt-2\">\n          <Button\n            isText\n            onClick={closeModal}\n          >\n            {oldLang('OK')}\n          </Button>\n        </div>\n      </Modal>\n    );\n  }\n\n  const isSubmitDisabled = getIsSubmitDisabled();\n\n  return (\n    <Modal\n      className={buildClassName('PaymentModal', invoice?.isRecurring && 'recurring')}\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={handleModalClose}\n    >\n      <div className=\"header\" dir={oldLang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={step === PaymentStep.Checkout ? closeModal : handleBackClick}\n          ariaLabel=\"Close\"\n        >\n          <Icon name={step === PaymentStep.Checkout ? 'close' : 'arrow-left'} />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition\n          name=\"slide\"\n          activeKey={step}\n          shouldCleanup\n          cleanupOnlyKey={PaymentStep.ConfirmPayment}\n        >\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            className=\"button-text\"\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isSubmitDisabled}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      form,\n      step,\n      shippingOptions,\n      error,\n      confirmPaymentUrl,\n      inputInvoice,\n      requestId,\n      stripeCredentials,\n      smartGlocalCredentials,\n      temporaryPassword,\n      isExtendedMedia,\n      url,\n    } = selectTabState(global).payment;\n\n    const { invoice, nativeParams, nativeProvider } = form || {};\n    const countryList = global.countryList.general;\n\n    let providerName = form?.nativeProvider;\n    if (!providerName && url) {\n      providerName = url.startsWith(DONATE_PROVIDER_URL) ? DONATE_PROVIDER : undefined;\n    }\n\n    const chat = inputInvoice && 'chatId' in inputInvoice ? selectChat(global, inputInvoice.chatId) : undefined;\n    const isProviderError = Boolean(invoice && (!providerName || !SUPPORTED_PROVIDERS.has(providerName)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const bot = form?.botId ? selectUser(global, form.botId) : undefined;\n    const botName = getUserFullName(bot);\n\n    return {\n      step,\n      chat,\n      shippingOptions,\n      nativeProvider: providerName,\n      isProviderError,\n      form,\n      invoice,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl: confirmPaymentUrl ?? url,\n      isPaymentFormUrl: Boolean(!nativeProvider && url),\n      countryList,\n      requestId,\n      hasShippingOptions: Boolean(shippingOptions?.length),\n      smartGlocalToken: smartGlocalCredentials?.token,\n      stripeId: stripeCredentials?.id,\n      passwordValidUntil: temporaryPassword?.validUntil,\n      isExtendedMedia,\n      botName,\n    };\n  },\n)(PaymentModal));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(\n  prices: ApiLabeledPrice[] = [],\n  shippingOptions: ShippingOption[] | undefined,\n  shippingOption: string,\n  tipAmount: number,\n) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = tipAmount;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = cardTypeText && state.cardNumber ? `${cardTypeText} *${state.cardNumber.slice(-4)}` : undefined;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nexport type ApiCredentials = {\n  data: {\n    cardNumber: string;\n    cardholder: string;\n    expiryMonth: string;\n    expiryYear: string;\n    cvv: string;\n    country: string;\n    zip: string;\n  };\n};\n\nfunction getCredentials(paymentState: FormState): ApiCredentials {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect, useMemo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiReceiptRegular, ApiShippingAddress } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Checkout from './Checkout';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen?: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  receipt?: ApiReceiptRegular;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  receipt,\n}) => {\n  const lang = useLang();\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useEffect(() => {\n    if (isOpen) {\n      openModal();\n    }\n  }, [isOpen, openModal]);\n\n  const prevReceipt = usePrevious(receipt);\n  const renderingReceipt = receipt || prevReceipt;\n\n  const checkoutInfo = useMemo(() => {\n    if (!renderingReceipt) return undefined;\n    return getCheckoutInfo(renderingReceipt.credentialsTitle, renderingReceipt.info, renderingReceipt.shippingMethod);\n  }, [renderingReceipt]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isModalOpen}\n      onClose={closeModal}\n      onCloseAnimationEnd={onClose}\n    >\n      {renderingReceipt && (\n        <>\n          <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            <Button\n              className=\"close-button\"\n              color=\"translucent\"\n              round\n              size=\"smaller\"\n              onClick={closeModal}\n              ariaLabel=\"Close\"\n            >\n              <Icon name=\"close\" />\n            </Button>\n            <h3>\n              {' '}\n              {lang('PaymentReceipt')}\n              {' '}\n            </h3>\n          </div>\n          <div className=\"receipt-content custom-scroll\">\n            <Checkout\n              shippingPrices={renderingReceipt.shippingPrices}\n              totalPrice={renderingReceipt.totalAmount}\n              tipAmount={renderingReceipt.tipAmount}\n              invoice={renderingReceipt.invoice}\n              checkoutInfo={checkoutInfo}\n              title={renderingReceipt.title}\n              description={renderingReceipt.description}\n              photo={renderingReceipt.photo}\n            />\n          </div>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = selectTabState(global).payment;\n\n    return {\n      receipt,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?: {\n    phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"n8eENbaR\",\"closeButton\":\"smosGkw9\",\"contentText\":\"Qo4PtFZI\",\"title\":\"wtfpombl\",\"separator\":\"UoMeVIyC\",\"userPicker\":\"nEYyTS_m\",\"sendInvites\":\"Ttkq3nqt\",\"avatarList\":\"Nc3SOtKd\"};","import type { FC } from '../../../lib/teact/teact';\nimport {\n  memo, useCallback,\n  useEffect,\n  useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport { partition } from '../../../util/iteratees';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Icon from '../../common/icons/Icon';\nimport PeerPicker from '../../common/pickers/PeerPicker';\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport Separator from '../../ui/Separator';\n\nimport styles from './InviteViaLinkModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['inviteViaLinkModal'];\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst InviteViaLinkModal: FC<OwnProps & StateProps> = ({\n  modal,\n  chat,\n}) => {\n  const { sendInviteMessages, closeInviteViaLinkModal, openPremiumModal } = getActions();\n  const { missingUsers } = modal || {};\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n\n  const userIds = useMemo(() => missingUsers?.map((user) => user.id) || MEMO_EMPTY_ARRAY, [missingUsers]);\n  const [unselectableIds, selectableIds] = useMemo(() => {\n    if (!missingUsers?.length) return [[], []];\n    const [requirePremiumIds, regularIds] = partition(missingUsers, (user) => user.isRequiringPremiumToMessage);\n    return [requirePremiumIds.map((user) => user.id), regularIds.map((user) => user.id)];\n  }, [missingUsers]);\n\n  const invitableWithPremiumIds = useMemo(() => {\n    return missingUsers?.filter((user) => user.isRequiringPremiumToInvite || user.isRequiringPremiumToMessage)\n      .map((user) => user.id);\n  }, [missingUsers]);\n\n  const isEveryPremiumBlocksPm = useMemo(() => {\n    if (!missingUsers) return undefined;\n    return !missingUsers.some((user) => user.isRequiringPremiumToInvite && !user.isRequiringPremiumToMessage);\n  }, [missingUsers]);\n\n  const topListPeers = useMemo(() => {\n    const users = getGlobal().users.byId;\n    return invitableWithPremiumIds?.map((id) => users[id]);\n  }, [invitableWithPremiumIds]);\n\n  useEffect(() => {\n    setSelectedMemberIds(selectableIds);\n  }, [selectableIds]);\n\n  const handleClose = useLastCallback(() => closeInviteViaLinkModal());\n\n  const handleSendInviteLink = useCallback(() => {\n    sendInviteMessages({ chatId: chat!.id, userIds: selectedMemberIds });\n    closeInviteViaLinkModal();\n  }, [selectedMemberIds, chat]);\n\n  const handleOpenPremiumModal = useCallback(() => {\n    openPremiumModal();\n  }, []);\n\n  const canSendInviteLink = useMemo(() => {\n    if (!chat) return undefined;\n    return Boolean(chat?.isCreator || chat?.adminRights?.inviteUsers);\n  }, [chat]);\n\n  const inviteSectionText = useMemo(() => {\n    return canSendInviteLink\n      ? lang(missingUsers?.length === 1 ? 'InviteBlockedOneMessage' : 'InviteBlockedManyMessage')\n      : lang('InviteRestrictedUsers2', missingUsers?.length);\n  }, [canSendInviteLink, lang, missingUsers?.length]);\n\n  const premiumSectionText = useMemo(() => {\n    if (!invitableWithPremiumIds?.length || !topListPeers?.length) return undefined;\n    const prefix = isEveryPremiumBlocksPm ? 'InviteMessagePremiumBlocked' : 'InvitePremiumBlocked';\n    let langKey = `${prefix}One`;\n    let params = [getUserFullName(topListPeers[0])];\n    if (invitableWithPremiumIds.length === 2) {\n      langKey = `${prefix}Two`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1])];\n    } else if (invitableWithPremiumIds.length === 3) {\n      langKey = `${prefix}Three`;\n      params = [getUserFullName(topListPeers[0]), getUserFullName(topListPeers[1]), getUserFullName(topListPeers[2])];\n    } else if (invitableWithPremiumIds.length > 3) {\n      langKey = `${prefix}Many`;\n      params = [\n        getUserFullName(topListPeers[0]),\n        getUserFullName(topListPeers[1]),\n        (invitableWithPremiumIds.length - 2).toString(),\n      ];\n    }\n\n    return lang(langKey, params, undefined, topListPeers.length);\n  }, [invitableWithPremiumIds, isEveryPremiumBlocksPm, lang, topListPeers]);\n\n  const hasPremiumSection = Boolean(topListPeers?.length);\n  const hasSelectableSection = Boolean(selectableIds?.length);\n\n  return (\n    <Modal\n      isOpen={Boolean(userIds && chat)}\n      contentClassName={styles.content}\n      onClose={handleClose}\n      isSlim\n    >\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        className={styles.closeButton}\n        ariaLabel={lang('Close')}\n        onClick={handleClose}\n      >\n        <Icon name=\"close\" />\n      </Button>\n      {premiumSectionText && (\n        <>\n          <AvatarList\n            className={styles.avatarList}\n            peers={topListPeers}\n            size=\"large\"\n          />\n          <h3 className={styles.title}>\n            {canSendInviteLink ? lang('InvitePremiumBlockedTitle') : lang('ChannelInviteViaLinkRestricted')}\n          </h3>\n          <p className={styles.contentText}>\n            {renderText(premiumSectionText, ['simple_markdown'])}\n          </p>\n          <Button\n            withPremiumGradient\n            isShiny\n            size=\"smaller\"\n            onClick={handleOpenPremiumModal}\n          >\n            {lang('InvitePremiumBlockedSubscribe')}\n          </Button>\n        </>\n      )}\n      {hasPremiumSection && hasSelectableSection && (\n        <Separator className={styles.separator}>\n          {lang('InvitePremiumBlockedOr')}\n        </Separator>\n      )}\n      {hasSelectableSection && (\n        <>\n          <h3 className={styles.title}>{lang('InviteBlockedTitle')}</h3>\n          <p className={styles.contentText}>\n            {inviteSectionText}\n          </p>\n          <PeerPicker\n            className={styles.userPicker}\n            itemIds={userIds}\n            selectedIds={selectedMemberIds}\n            lockedUnselectedIds={unselectableIds}\n            lockedUnselectedSubtitle={lang('InvitePremiumBlockedUser')}\n            onSelectedIdsChange={setSelectedMemberIds}\n            isViewOnly={!canSendInviteLink}\n            allowMultiple\n            withStatus\n            itemInputType=\"checkbox\"\n          />\n          {canSendInviteLink && (\n            <Button\n              className={styles.sendInvites}\n              size=\"smaller\"\n              onClick={handleSendInviteLink}\n              disabled={!selectedMemberIds.length}\n            >\n              {lang('SendInviteLink.ActionInvite')}\n            </Button>\n          )}\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { modal }): StateProps => {\n    const chat = modal?.chatId ? selectChat(global, modal.chatId) : undefined;\n\n    return {\n      chat,\n    };\n  },\n)(InviteViaLinkModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"c3xMWwzW\",\"fade-in-opacity\":\"cHb04cFv\",\"fadeInOpacity\":\"cHb04cFv\",\"closing\":\"_0HkZ8ITm\",\"voice\":\"VLiJWMs0\",\"video\":\"ML2YEpGq\",\"footer\":\"VWy1qXJL\",\"closeBtn\":\"FfMrCmD9\"};","import { memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { isOwnMessage } from '../../../global/helpers';\nimport { selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Audio from '../../common/Audio';\nimport RoundVideo from '../../middle/message/RoundVideo';\nimport Button from '../../ui/Button';\n\nimport styles from './OneTimeMediaModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['oneTimeMediaModal'];\n};\n\nconst OneTimeMediaModal = ({\n  modal,\n}: OwnProps) => {\n  const {\n    closeOneTimeMediaModal,\n  } = getActions();\n\n  const lang = useOldLang();\n  const message = useCurrentOrPrev(modal?.message, true);\n\n  const {\n    shouldRender,\n    transitionClassNames,\n  } = useShowTransitionDeprecated(Boolean(modal));\n\n  const handlePlayVoice = useLastCallback(() => {\n    return undefined;\n  });\n\n  const handleClose = useLastCallback(() => {\n    closeOneTimeMediaModal();\n  });\n\n  if (!shouldRender || !message) {\n    return undefined;\n  }\n\n  const isOwn = isOwnMessage(message);\n  const theme = selectTheme(getGlobal());\n  const closeBtnTitle = isOwn ? lang('Chat.Voice.Single.Close') : lang('Chat.Voice.Single.DeleteAndClose');\n\n  function renderMedia() {\n    if (!message?.content) {\n      return undefined;\n    }\n    const { voice, video } = message.content;\n    if (voice) {\n      return (\n        <Audio\n          className={styles.voice}\n          theme={theme}\n          message={message}\n          origin={AudioOrigin.OneTimeModal}\n          autoPlay\n          onPlay={handlePlayVoice}\n          onPause={handleClose}\n        />\n      );\n    } else if (video?.isRound) {\n      return (\n        <RoundVideo\n          className={styles.video}\n          message={message}\n          origin=\"oneTimeModal\"\n          onStop={handleClose}\n        />\n      );\n    }\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, transitionClassNames)}>\n      {renderMedia()}\n      <div className={styles.footer}>\n        <Button\n          faded\n          onClick={handleClose}\n          pill\n          size=\"smaller\"\n          color={theme === 'dark' ? 'dark' : 'secondary'}\n          className={styles.closeBtn}\n        >\n          {closeBtnTitle}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(OneTimeMediaModal);\n","import type { FC } from '../../lib/teact/teact';\nimport {\n  memo, useCallback, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useLang from '../../hooks/useLang';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport Modal from '../ui/Modal';\n\ntype OwnProps = {\n  isOpen: boolean;\n};\n\nconst WebAppsCloseConfirmationModal: FC<OwnProps> = ({\n  isOpen,\n}) => {\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { closeWebAppsCloseConfirmationModal, closeWebAppModal } = getActions();\n\n  const [shouldSkipInFuture, setShouldSkipInFuture] = useState(false);\n\n  const containerRef = useRef<HTMLDivElement>();\n\n  const onClose = useCallback(() => {\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const confirmHandler = useCallback(() => {\n    closeWebAppModal({ shouldSkipConfirmation: true });\n    closeWebAppsCloseConfirmationModal({ shouldSkipInFuture });\n  }, [shouldSkipInFuture]);\n\n  const handleSelectWithEnter = useCallback((index: number) => {\n    if (index === -1) confirmHandler();\n  }, [confirmHandler]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, handleSelectWithEnter, '.Button');\n\n  return (\n    <Modal\n      className={buildClassName('confirm')}\n      title={lang('CloseMiniApps')}\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <p>{lang('AreYouSureCloseMiniApps')}</p>\n      <Checkbox\n        className=\"dialog-checkbox\"\n        label={lang('DoNotAskAgain')}\n        checked={shouldSkipInFuture}\n        onCheck={setShouldSkipInFuture}\n      />\n      <div\n        className=\"dialog-buttons mt-2\"\n        ref={containerRef}\n        onKeyDown={handleKeyDown}\n      >\n        <Button\n          className=\"confirm-dialog-button\"\n          isText\n          onClick={confirmHandler}\n          color=\"danger\"\n        >\n          {oldLang('Confirm')}\n        </Button>\n        <Button className=\"confirm-dialog-button\" isText onClick={onClose}>\n          {oldLang('Cancel')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(WebAppsCloseConfirmationModal);\n","import { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { getMainUsername } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport formatUsername from '../../common/helpers/formatUsername';\n\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport Button from '../../ui/Button';\nimport Link from '../../ui/Link';\nimport TableAboutModal, { type TableAboutData } from '../common/TableAboutModal';\n\nimport styles from './FrozenAccountModal.module.scss';\n\nexport type OwnProps = {\n  modal: TabState['isFrozenAccountModalOpen'];\n};\n\ntype StateProps = {\n  freezeAppealUrl?: string;\n  botFreezeAppealUsername?: string;\n  freezeUntilDate?: number;\n};\n\nconst FrozenAccountModal = ({\n  modal,\n  freezeUntilDate,\n  freezeAppealUrl,\n  botFreezeAppealUsername,\n}: OwnProps & StateProps) => {\n  const {\n    closeFrozenAccountModal,\n    openUrl,\n  } = getActions();\n  const lang = useLang();\n\n  const isOpen = Boolean(modal);\n\n  const handleClose = useLastCallback(() => {\n    closeFrozenAccountModal();\n  });\n\n  const handleAppeal = useLastCallback(() => {\n    closeFrozenAccountModal();\n    if (freezeAppealUrl) {\n      openUrl({ url: freezeAppealUrl });\n    }\n  });\n\n  const header = useMemo(() => {\n    return (\n      <div className={styles.header}>\n        <AnimatedIconWithPreview\n          size={160}\n          tgsUrl={LOCAL_TGS_URLS.BannedDuck}\n          noLoop\n        />\n        <div className={styles.title}>\n          {lang('FrozenAccountModalTitle')}\n        </div>\n      </div>\n    );\n  }, [lang]);\n\n  const footer = useMemo(() => {\n    if (!isOpen) return undefined;\n    return (\n      <div className={styles.footer}>\n        <Button\n          className={styles.buttonAppeal}\n          size=\"smaller\"\n          onClick={handleAppeal}\n          noForcedUpperCase\n        >\n          {lang('ButtonAppeal')}\n        </Button>\n        <Button\n          isText\n          size=\"smaller\"\n          onClick={handleClose}\n          noForcedUpperCase\n        >\n          {lang('ButtonUnderstood')}\n        </Button>\n      </div>\n    );\n  }, [lang, isOpen]);\n\n  if (!freezeUntilDate || !botFreezeAppealUsername) return undefined;\n\n  const date = new Date(freezeUntilDate * 1000);\n\n  const botLink = (\n    <Link onClick={handleAppeal} isPrimary>\n      {formatUsername(botFreezeAppealUsername)}\n    </Link>\n  );\n\n  const listItemData = [\n    ['hand-stop', lang('FrozenAccountViolationTitle'), lang('FrozenAccountViolationSubtitle')],\n    ['lock', lang('FrozenAccountReadOnlyTitle'), lang('FrozenAccountReadOnlySubtitle')],\n    ['frozen-time', lang('FrozenAccountAppealTitle'),\n      lang('FrozenAccountAppealSubtitle', {\n        botLink,\n        date: formatDateToString(date, lang.code),\n      }, {\n        withNodes: true,\n      })],\n  ] satisfies TableAboutData;\n\n  return (\n    <TableAboutModal\n      isOpen={isOpen}\n      header={header}\n      listItemData={listItemData}\n      footer={footer}\n      hasBackdrop\n      onClose={handleClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const freezeUntilDate = global.appConfig?.freezeUntilDate;\n    const freezeAppealUrl = global.appConfig?.freezeAppealUrl;\n    const botFreezeAppeal = global.botFreezeAppealId ? selectUser(global, global.botFreezeAppealId) : undefined;\n    const botFreezeAppealUsername = botFreezeAppeal && getMainUsername(botFreezeAppeal);\n\n    return {\n      freezeUntilDate,\n      freezeAppealUrl,\n      botFreezeAppealUsername,\n    };\n  },\n)(FrozenAccountModal));\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"cW2rtp6M\",\"title\":\"qLSm0uyC\",\"footer\":\"Vj3QQ_JQ\",\"buttonAppeal\":\"anvg3JaY\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"hyRfEyRz\",\"top\":\"p_Ny8jqJ\",\"badge\":\"QRrryqp4\",\"text\":\"I5jdPgFL\"};","import { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer, ApiWebDocument } from '../../api/types';\nimport type { CustomPeer } from '../../types';\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useLang from '../../hooks/useLang';\n\nimport Avatar, { type AvatarSize } from './Avatar';\nimport Icon from './icons/Icon';\n\nimport styles from './PeerBadge.module.scss';\n\ntype OwnProps = {\n  peer?: ApiPeer | CustomPeer;\n  avatarWebPhoto?: ApiWebDocument;\n  avatarSize?: AvatarSize;\n  text?: string;\n  badgeText?: string;\n  badgeIcon?: IconName;\n  className?: string;\n  badgeClassName?: string;\n  badgeIconClassName?: string;\n  textClassName?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst PeerBadge = ({\n  peer: avatarPeer,\n  avatarWebPhoto,\n  avatarSize,\n  text,\n  badgeText,\n  badgeIcon,\n  className,\n  badgeClassName,\n  badgeIconClassName,\n  textClassName,\n  onClick,\n}: OwnProps) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, onClick && styles.clickable, className)}\n      onClick={onClick}\n    >\n      <div className={styles.top}>\n        <Avatar size={avatarSize} peer={avatarPeer} webPhoto={avatarWebPhoto} />\n        {badgeText && (\n          <div className={buildClassName(styles.badge, badgeClassName)} dir={lang.isRtl ? 'rtl' : 'ltr'}>\n            {badgeIcon && <Icon name={badgeIcon} className={badgeIconClassName} />}\n            {badgeText}\n          </div>\n        )}\n      </div>\n      {text && <p className={buildClassName(styles.text, textClassName)}>{text}</p>}\n    </div>\n  );\n};\n\nexport default memo(PeerBadge);\n"],"names":["memo","StarTopupOptionList","isActive","className","options","selectedStarOption","selectedStarCount","starsNeeded","onClick","oldLang","useOldLang","lang","useLang","areOptionsExtended","markOptionsExtended","unmarkOptionsExtended","useFlag","useEffect","renderingOptions","canExtend","useMemo","undefined","maxOption","reduce","max","option","stars","forceShowAll","result","currentStackedStarsCount","canExtendOptions","forEach","index","isExtended","push","starsCount","Math","min","isWide","length","_jsxs","buildClassName","styles","children","map","isOdd","isActiveOption","perUserStarCount","winner","winners","find","opt","users","perUserStars","wideOption","active","optionTop","formatInteger","_jsx","stackedStars","dir","isRtl","Array","from","StarIcon","stackedStar","type","size","optionBottom","formatCurrency","amount","currency","Boolean","renderText","Button","moreOptions","isText","noForcedUpperCase","Icon","iconDown","name","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","PasswordMonkey","isPasswordVisible","isBig","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","isMobile","useAppLayout","stikerSize","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","useTimeout","handleFirstMonkeyLoad","useCallback","id","AnimatedSticker","STICKER_SIZE_TWO_FA","tgsUrl","LOCAL_TGS_URLS","MonkeyClose","playSegment","noLoop","onLoad","MonkeyPeek","TableAboutModal","isOpen","listItemData","headerIconName","header","footer","buttonText","hasBackdrop","withSeparator","onClose","onButtonClick","contentClassName","Modal","hasAbsoluteCloseButton","absoluteCloseButtonColor","icon","title","subtitle","ListItem","isStatic","multiline","iconClassName","Separator","PickerModal","confirmButtonText","isConfirmDisabled","shouldAdaptToSearch","withFixedHeight","onConfirm","withPremiumGradient","modalProps","hasButton","isSlim","headerClassName","color","disabled","TableInfoModal","tableData","headerAvatarPeer","modalHeader","withBalanceBar","isLowStackPriority","openChat","getActions","handleOpenChat","useLastCallback","peerId","hasCloseButton","Avatar","peer","label","value","_Fragment","PeerChip","chatId","forceShowSelf","withEmojiStatus","clickArg","getViewableMedia","params","media","mediaIndex","isSingle","avatar","profilePhotos","photos","action","document","photo","video","webPage","paidMedia","getMessageContent","message","isDocumentPhoto","isDocumentVideo","webPagePhoto","webPageVideo","webPageDocument","isDocumentMedia","extendedMedia","extendedPhoto","extendedVideo","isGif","createGhost","source","origin","ghost","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","ProfileAvatar","SettingsAvatar","profileInfo","querySelector","cloneNode","getNodes","containerSelector","mediaSelector","Album","ScheduledAlbum","getMessageHtmlId","PreviewMedia","SharedMedia","SearchResult","MiddleHeaderAvatar","ChannelAvatar","SuggestedAvatar","StarsTransaction","SponsoredMessage","MESSAGE_CONTENT_SELECTOR","ScheduledInline","Inline","container","mediaEls","querySelectorAll","mediaEl","applyShape","firstChild","style","objectFit","signal","createSignal","setIsPictureInPicture","getSetPresentationMode","webkitSupportsPresentationMode","webkitSetPresentationMode","bind","exitPictureInPictureIfNeeded","pictureInPictureElement","exitPictureInPicture","err","DEBUG","console","log","cache","Map","FALLBACK_DIMENSIONS","AVATAR_FULL_DIMENSIONS","useMediaProps","isAvatar","delay","isPhotoAvatar","mediaType","isVideo","isVideoAvatar","isDocument","isRound","isPhoto","isFromSharedMedia","isFromSearch","getMediaOrAvatarHash","isFull","getVideoProfilePhotoMediaHash","getMediaHash","getProfilePhotoMediaHash","pictogramBlobUrl","useMedia","ApiMediaFormat","BlobUrl","previewMediaHash","previewBlobUrl","mediaData","fullMediaBlobUrl","loadProgress","useMediaWithLoadProgress","getMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","dataUri","blurredRef","useRef","isChanged","useSyncEffect","current","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","onload","blurredDataUri","clear","set","window","setTimeout","useBlur","useBlurSync","getMediaThumbUri","bestData","mediaSize","getMediaFileSize","isLocal","dimensions","VIDEO_AVATAR_FULL_DIMENSIONS","getPhotoFullDimensions","getVideoDimensions","ReportAvatarModal","onCloseAnimationEnd","reportProfilePhoto","selectedReason","setSelectedReason","useState","description","setDescription","handleReport","reason","handleSelectReason","handleDescriptionChange","e","target","REPORT_OPTIONS","onEnter","RadioGroup","onChange","selected","InputText","getZoomChange","setZoomChange","useZoomChange","useUnmountCleanup","DeleteProfilePhotoModal","profileId","deleteProfilePhoto","deleteChatPhoto","handleDeletePhoto","isUserId","withGlobal","global","item","canUpdateMedia","tabState","selectTabState","mediaViewer","avatarOwner","avatarPhoto","chat","selectCurrentChat","currentMessageList","selectCurrentMessageList","threadId","isProtected","selectIsMessageProtected","activeDownloads","selectActiveDownloads","isChatProtected","selectIsChatProtected","canDelete","canDeleteMessage","selectAllowedMessageActionsSlow","isCurrentAvatar","avatarPhotoId","canDeleteAvatar","canUpdate","messageListType","MediaViewerActions","canReportAvatar","onReportAvatar","onReport","onCloseMediaViewer","onBeforeDelete","onForward","isDeleteModalOpen","openDeleteModal","closeDeleteModal","downloadMedia","cancelMediaDownload","updateProfilePhoto","updateChatPhoto","openMediaViewer","openDeleteMessageModal","isMessage","fileName","getMediaFilename","isDownloading","getIsDownloading","downloadProgress","handleDownloadClick","originMessage","handleZoomOut","zoomChange","handleZoomIn","handleUpdate","isAvatarView","forceOnHeavyAnimation","MenuButton","onTrigger","round","ariaLabel","renderDeleteModal","openDeleteModalHandler","messageIds","isSchedule","menuItems","isForwardingAllowed","content","href","download","destructive","DropdownMenu","trigger","positionX","MenuItem","ProgressSpinner","progress","noCross","renderDownloadButton","useSignalRef","getValue","ref","useEffectOnce","subscribe","getControlsVisible","setControlsVisible","getIsLocked","setIsLocked","useControlsSignal","useDerivedSignal","getCurrentTime","setCurrentTime","useCurrentTimeSignal","MediaViewerFooter","text","isForVideo","handleSponsoredClick","isForceMobileVersion","isMultiline","setIsMultiline","getIsVisible","isHidden","useDerivedState","IS_TOUCH_ENV","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","stopPropagation","isRectangular","getIsVideoWaiting","setIsVideoWaiting","useVideoWaitingSignal","IS_MOBILE","IS_ANDROID","IS_IOS","PREVIEW_SIZE_RATIO","MAX_FRAMES","PREVIEW_MAX_SIDE","connections","launchMediaWorkers","videoPreview","VideoPreview","frames","currentTime","constructor","url","this","connector","request","args","MAX_WORKERS","onFrame","time","frame","render","clearCache","close","requestMutation","drawImage","destroy","worker","async","messageId","data","callApi","mediaFormat","Progressive","arrayBuffer","postMessage","cancelAnimation","SeekLine","duration","bufferedRanges","isReady","posterSize","playbackRate","isPlaying","isPreviewDisabled","onSeek","onSeekStart","seekerRef","getCurrentTimeSignal","getIsWaiting","useThrottledSignal","getSelectedTime","setSelectedTime","useSignal","getPreviewOffset","setPreviewOffset","getPreviewTime","setPreviewTime","isLockedRef","isPreviewVisible","setPreviewVisible","isSeeking","setIsSeeking","previewCanvasRef","previewRef","progressRef","previewTimeRef","previewSize","ratio","getPreviewDimensions","setPreview","floor","renderVideoPreview","createVideoPreviews","remaining","animateNumber","to","onUpdate","useLayoutEffect","left","innerText","formatMediaDuration","seeker","seekerSize","getBoundingClientRect","offset","getPreviewProps","pageX","getPointerPosition","x","t","clamp","preview","clientWidth","stopAnimation","handleStopSeek","cleanup","captureEvents","onCapture","handleStartSeek","onRelease","onDrag","handleSeekMouseMove","handleSeekMouseLeave","ShowTransition","start","end","PLAYBACK_RATES","renderTime","VideoPlayerControls","bufferedProgress","fileSize","isFullscreenSupported","isFullscreen","isBuffered","volume","isMuted","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","isPictureInPictureSupported","onPictureInPictureChange","onPlayPause","onSeekingChange","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","trunc","getIsSeeking","closeTimeoutRef","setVisibility","isVisible","body","remove","handleSeek","position","handleSeekStart","volumeIcon","ripple","RangeSlider","bold","formatFileSize","Menu","positionY","autoClose","rate","VideoPlayer","posterData","isMediaViewerOpen","noPlay","shouldCloseOnClick","isClickDisabled","isSponsoredMessage","timestamp","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","setMediaViewerHidden","videoRef","setIsPlaying","setFullscreen","exitFullscreen","useFullscreen","isLooped","handleEnterFullscreen","IS_YA_BROWSER","handleLeaveFullscreen","enterPictureInPicture","isInPictureInPicture","elRef","onLeave","isSupported","setIsSupported","setIsActive","IS_PWA","setMode","pictureInPictureEnabled","disablePictureInPicture","autoPictureInPicture","onEnterInternal","onLeaveInternal","getIsVideoPlaying","requestPictureInPicture","safePlay","usePictureInPicture","toggleControls","lockControls","lastMousePosition","y","updateMousePosition","checkMousePositionAndToggleControls","clientX","clientY","bounds","right","top","bottom","handleVideoMove","handleVideoLeave","handleSeekingChange","bufferingHandlers","useBuffering","isUnsupported","useUnsupportedMedia","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransitionDeprecated","shouldRenderPlayButton","playButtonClassNames","pause","togglePlayState","handleClick","useVideoCleanup","handleTimeUpdate","currentTarget","readyState","handleEnded","handleFullscreenChange","handleVolumeChange","newVolume","handleVolumeMuted","muted","handlePlaybackRateChange","newPlaybackRate","rewind","newTime","Number","isFinite","handleKeyDown","key","preventDefault","wrapperStyle","videoStyle","shouldToggleControls","onMouseMove","onMouseLeave","onContextMenu","onDoubleClick","autoPlay","controlsList","playsInline","loop","onWaiting","onPlay","onEnded","onPause","onTimeUpdate","join","sponsoredMessage","textMessage","maxTimestamp","selectMessageTimestampableDuration","MediaViewerContent","withAnimation","isMoving","onFooterClick","updateLastPlaybackTimestamp","toggleControlsOnMove","updatePlaybackTimestamp","useThrottledCallback","MEDIA_TIMESTAMP_SAVE_MINIMUM_DURATION","isInAlbum","newTimestamp","PLAYBACK_SAVE_INTERVAL","useSignalEffect","calculateMediaViewerDimensions","ARE_WEBCODECS_SUPPORTED","renderPhoto","textParts","renderMessageText","forcePlayback","isForMediaViewer","hasFooter","shouldForceMobileVersion","imageSize","canDrag","alt","Spinner","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelZoomAnimation","SwipeDirection","MediaViewerSlides","isLoadingMoreMedia","isSynced","loadMoreItemsIfNeeded","getNextItem","selectItem","containerRef","activeSlideRef","leftSlideRef","rightSlideRef","lastTransformRef","scale","swipeDirectionRef","initialContentRectRef","isReleasedRef","prevZoomChangeRef","useFullscreenStatus","isMouseDown","setIsMouseDown","getTransform","setTransform","transformRef","getActiveItem","setActiveItem","activeItemRef","isScaled","activeItem","windowHeight","windowWidth","isResizing","useWindowSize","useHistoryBack","onBack","shouldBeReplaced","selectItemDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleControlsVisibility","isFooter","pageY","transform","getTransformStyle","lastTransform","lastDragOffset","lastZoomCenter","panDelta","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","cActiveItem","nextItem","timing","changeSlideOnClick","closest","calculateOffsetBoundaries","offsetTop","initialContentRect","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","maxOffsetX","isBetween","minOffsetY","maxOffsetY","absX","abs","absY","s1","scaleFactor","x1","y1","k","Vx","Vy","dirX","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","withWheelDrag","checkIfControlTarget","event","captureEvent","dragOffsetX","dragOffsetY","cancelDrag","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","absOffsetY","Vertical","Horizontal","SWIPE_DIRECTION_THRESHOLD","SWIPE_DIRECTION_TOLERANCE","limit","SWIPE_X_THRESHOLD","SWIPE_Y_THRESHOLD","includes","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","hasZoomChanged","steps","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","prevItem","hasPrev","hasNext","toFixed","element","selector","matches","messageSender","selectSender","owner","SenderInfo","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","force","forceSyncOnIOs","isFallbackAvatar","fallbackPhoto","isPersonalAvatar","personalPhoto","date","formattedDate","formatMediaDateTime","count","currentIndex","countText","parts","isChannel","isChatChannel","isGroup","isChatGroup","senderTitle","getPeerTitle","shouldSkipHistoryAnimations","withDynamicLoading","standaloneMedia","selectPerformanceSettingsValue","currentUserId","isChatWithSelf","selectIsChatWithSelf","selectPeer","isChatAdmin","selectPeerPhotos","isLoading","chatMessages","selectScheduledMessage","selectChatMessage","selectSponsoredMessage","selectChatScheduledMessages","selectChatMessages","isOriginInline","isOriginAlbum","collectedMessageIds","currentSearch","selectCurrentChatMediaSearch","foundIds","currentSegment","selectCurrentSharedMediaSearch","resultsByType","selectOutlyingListByMessageId","selectListedIds","MediaViewer","openForwardMenu","searchChatMediaMessages","loadMoreProfilePhotos","clickSponsored","openUrl","animationKey","senderId","prevSenderId","usePreviousDeprecated","headerAnimation","isGhostAnimation","isReportAvatarModalOpen","openReportAvatarModal","closeReportAvatarModal","currentItem","getMediaViewerItem","info","messageMediaIds","getChatMediaMessageIds","getIsPictureInPicture","disableDirectTextInput","stopPriorityPlayback","dispatchPriorityPlaybackEvent","enableDirectTextInput","toggle","headerRef","useElectronDrag","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","prevMessage","prevIsHidden","prevOrigin","prevBestImageData","shouldAnimateOpening","beginHeavyAnimation","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","applyStyles","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","imageEl","messageListElement","getOffsetToContainer","scrollTop","offsetHeight","isMessageImageFullyVisible","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","handleClose","handleFooterClick","HTMLElement","isFromMedia","isMedia","randomId","handleForward","fromChatId","captureEscKeyListener","stopCurrentAudio","currentMediaMessageId","fromMedia","fromMediaIndex","nextIndex","fromAvatarOwner","fromProfilePhotos","fromSponsoredMessage","fromSponsoredMessageIndex","fromMessage","getMessagePaidMedia","indexOf","nextMessageId","nextMessage","openMediaViewerItem","itemChatId","itemMessageId","itemStandaloneMedia","handleBeforeDelete","prevMedia","shouldAnimateFirstRender","noCloseTransition","Transition","activeKey","avatarOwnerId","OFFSET_BOTTOM","MOBILE_OFFSET","hasBlur","isGhost2","ctx","alpha","IS_CANVAS_FILTER_SUPPORTED","filter","RADIUS","userId","getPeerStoryHtmlId","StoryViewerOrigin","StoryRibbon","storyRibbonStyles","root","ChatList","calculateOffsetX","slideAmount","isActiveSlideSize","isMoveThroughActiveSlide","isBackward","mainOffset","additionalOffset","totalOffset","roundToNearestEven","useSlideSizes","baseWidth","baseHeight","newWidth","newHeight","widthScale","heightScale","calculateScale","activeSlideWidth","slideWidth","activeSlide","slide","toActiveScale","fromActiveScale","calculateSlideSizes","useStoryProps","story","isCurrentUserPremium","isDropdownMenuOpen","isLoadedStory","isDeletedStory","hasText","hasMessageText","hasForwardInfo","forwardInfo","thumbnail","previewHash","getStoryMediaHash","noSound","fullMediaHash","fullMediaData","altMediaHash","altMediaData","hasFullData","hasThumb","canDownload","noForwards","downloadHash","downloadMediaData","storyViewer","isStealthModalOpen","stealthMode","stories","selectIsCurrentUserPremium","StealthModeModal","toggleStealthModal","activateStealthMode","showNotification","openPremiumModal","isOnCooldown","setIsOnCooldown","serverTime","getServerTime","cooldownUntil","handleTimerEnds","handleActivate","initialSection","inactive","leftElement","isShiny","TextTimer","langKey","endsAt","onEnd","deleteStory","openNextStory","handleDeleteStoryClick","storyId","ConfirmDialog","confirmLabel","confirmHandler","confirmIsDestructive","contactListIds","selectedIds","lockedIds","onSelect","searchQuery","setSearchQuery","displayedIds","contactIds","unique","filterPeersByQuery","ids","query","PeerPicker","itemIds","MEMO_EMPTY_ARRAY","lockedSelectedIds","filterValue","filterPlaceholder","searchInputId","isSearchable","withDefaultPadding","onSelectedIdsChange","onFilterChange","allowMultiple","withStatus","itemInputType","usersById","saveCloseFriends","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","closeFriendIds","isCloseFriend","useEffectWithPrevDeps","prevIsActive","handleSelectedContactIdsChange","handleSubmit","userIds","FloatingActionButton","isShown","OPTIONS","actions","Screens","selectPeerStory","visibility","contactList","byId","editStoryPrivacy","toggleStoryInProfile","isOpenModal","openModal","closeModal","privacy","setPrivacy","isPinned","setIsPinned","isInProfile","setActiveKey","editingBlockingCategory","setEditingBlockingCategory","isBackButton","allowList","allowUserIds","selectedBlockedIds","blockUserIds","handleAllowUserIdsChange","newIds","handleDenyUserIdsChange","handleCloseButtonClick","handleIsPinnedToggle","modal","noBackdrop","closeButton","headerTitle","closeFriends","denyList","renderHeaderContent","slideClassName","storyLifeTime","getHours","expireDate","section","list","checked","input","handleVisibilityChange","newVisibility","teactExperimentControlled","optionContent","option_name","tabIndex","role","handleActionClick","actionInner","getUserFullName","Switcher","submit","renderPrivacyList","CloseFriends","AllowDenyList","sender","fromPeerId","EmbeddedStoryForward","openStoryViewer","loadPeerStoriesByIds","storyIds","fromName","openOriginalStory","isDeleted","isSingleStory","handleMouseDown","useFastClick","PeerColorWrapper","getPeerColorClass","onMouseDown","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","renderTextWithEntities","renderTextContent","renderSender","isExpanded","onExpand","onFold","contentRef","textRef","showMoreButtonRef","renderingStory","useCurrentOrPrev","caption","hasOverflow","setHasOverflow","prevIsExpanded","usePrevDuringAnimation","isInExpandedState","addExtraClass","removeExtraClass","canExpand","shouldRenderShowMore","requestMeasure","button","offsetWidth","setProperty","requestForcedReflow","textContainer","textOffsetTop","lineHeight","totalLines","calcTextLineHeightAndCount","isOverflowing","overflowShift","scrollTo","fullClassName","MessageText","messageOrStory","withTranslucentThumbs","StoryFooter","openStoryViewModal","sendStoryReaction","views","isOut","sentReaction","viewsCount","forwardsCount","reactionsCount","isSentStoryReactionHeart","isSameReaction","HEART_REACTION","canForward","isPublic","containerId","getStoryKey","recentViewers","getGlobal","recentViewerIds","handleOpenStoryViewModal","handleForwardClick","handleLikeStory","reaction","AvatarList","peers","nonInteractive","ReactionAnimatedEmoji","withEffectOnly","getReactionKey","isViewed","isPaused","onImageComplete","handleAnimationEnd","animationName","onAnimationEnd","VIDEO_MIN_READY_STATE","IS_SAFARI","appConfig","user","selectUser","selectChat","userFullInfo","selectUserFullInfo","viewModal","isPrivacyModalOpen","storyList","forwardMessages","forwardedStoryId","premiumModal","safeLinkModalUrl","mapModal","reportModal","giftInfoModal","isPaymentMessageConfirmDialogOpen","isPremiumModalOpen","shouldForcePause","reactionPicker","mediaAreas","forwardSenderId","area","channelId","forwardSender","withHeaderAnimation","fromPeer","fromId","paidMessagesStars","selectPeerPaidMessagesStars","isAccountFrozen","selectIsCurrentUserFrozen","orderedIds","storyIdsByPeerId","storyChangelogUserId","viewersExpirePeriod","storyExpirePeriod","storyViewersExpirePeriod","isChatExist","arePeerSettingsLoaded","settings","isArchivedStories","isPrivateStories","getIsAnimating","onDelete","viewStory","setStoryViewerMuted","openPreviousStory","loadPeerSkippedStories","copyStoryLink","openStoryPrivacyEditor","loadPeerSettings","fetchChat","loadStoryViews","isComposerHasFocus","markComposerHasFocus","unmarkComposerHasFocus","isStoryPlaybackRequested","playStory","pauseStory","isStoryPlaying","markStoryPlaying","unmarkStoryPlaying","isAppFocused","markAppFocused","unmarkAppFocused","isCaptionExpanded","expandCaption","foldCaption","isPausedBySpacebar","setIsPausedBySpacebar","isPausedByLongPress","markIsPausedByLongPress","unmarkIsPausedByLongPress","markDropdownMenuOpen","unmarkDropdownMenuOpen","isChangelog","isUserStory","isChatStory","isChannelStory","canPinToProfile","canUnpinFromProfile","areViewsExpired","forwardSenderTitle","canCopyLink","hasUsername","canShare","canPlayStory","shouldShowComposer","shouldShowFooter","shouldRenderSkeleton","skeletonTransitionClassNames","mediaTransitionClassNames","thumbRef","useCanvasBlur","previewTransitionClassNames","useMediaTransitionDeprecated","shouldRenderComposer","composerAppearanceAnimationClassNames","shouldRenderCaptionBackdrop","captionBackdropTransitionClassNames","appearanceAnimationClassNames","shouldRenderCaption","captionAppearanceAnimationClassNames","isStreamingSupported","useStreaming","PRIMARY_VIDEO_MIME","useStoryPreloader","canWrite","handlePauseStory","handlePlayStory","handleLongPressStart","handleLongPressEnd","handleDropdownMenuOpen","handleDropdownMenuClose","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","hasAllData","useBackgroundMode","load","keyCode","prevIsComposerHasFocus","prevIsCaptionExpanded","prevShouldForcePause","prevIsAppFocused","prevIsPausedByLongPress","handleForwardPeerClick","handleFromPeerClick","handleOpenPrevStory","handleOpenNextStory","handleVideoStoryTimeUpdate","captureKeyboardListeners","onRight","onLeft","handleCopyStoryLink","handlePinClick","handleUnpinClick","handleReportStoryClick","handleInfoPrivacyEdit","handleInfoPrivacyClick","isForContacts","isForCloseFriends","myName","handleOpenStealthModal","activeUntil","diff","handleDownload","inputPlaceholder","formatStarsAsIcon","asFont","withNodes","StoryProgress","formatRelativePastTime","isEdited","privacyIcon","gradient","renderStoryPrivacyButton","onOpen","Skeleton","OptimizedVideo","canPlay","isPriority","disableRemotePlayback","SECONDARY_VIDEO_MIME","MediaAreaOverlay","withStory","storyViewerMode","StoryCaption","Composer","MAIN_THREAD_ID","getIsMobile","editableInputCssSelector","EDITABLE_STORY_INPUT_CSS_SELECTOR","editableInputId","EDITABLE_STORY_INPUT_ID","inputId","onFocus","onBlur","lastViewedByPeerId","lastViewedByPeerIds","lastViewedId","storyIdsForViewer","peerStories","lastReadId","hasUnreadStories","previewIndexId","isLoaded","imageHash","thumbUrl","currentPeerId","currentStoryId","isSinglePeer","isPrivate","isArchive","byPeerId","orderedPeerIds","peerIds","selectIsStoryViewerOpen","stopActiveReaction","renderingPeerId","setRenderingPeerId","renderingStoryId","setRenderingStoryId","prevPeerId","renderingIsArchive","renderingIsPrivate","renderingIsSinglePeer","renderingIsSingleStory","slideSizes","rendersRef","setIsAnimating","setRef","renderingPeerIds","slice","renderingPeerPosition","currentPeerPosition","calculateTransformX","transformX","getCurrentStoryRef","composer","focusEditableElement","disableScrolling","enableScrolling","Object","entries","String","handleTransitionEnd","Story","onTransitionEnd","buildStyle","renderStory","StoryPreview","renderStoryPreview","useScrolledState","threshold","isAtBeginning","setIsAtBeginning","isAtEnd","setIsAtEnd","handleScroll","scrollHeight","DEFAULT_REACTION_SIZE","storyView","availableReactions","reactions","StoryView","closeStoryViewer","unblockUser","blockUser","deleteContact","updateStoryView","closeStoryViewModal","contextActions","areStoriesBlocked","isUserBlocked","isContact","fullName","handler","isOnlyStories","statusIcon","shouldColorStatus","status","isModified","formatDateAtTime","opacityFadeIn","blocked","rightElement","ReactionStaticEmoji","viewReaction","withIconHeart","withPortalForMenu","menuBubbleClassName","menuBubble","PrivateChatInfo","withColoredStatus","noStatusOrTyping","GroupChatInfo","nextOffset","loadStoryViewList","clearStoryViews","areJustContacts","markJustContacts","unmarkJustContacts","areReactionsFirst","markReactionsFirst","unmarkReactionsFirst","setQuery","isExpired","shouldShowJustContacts","STORY_VIEWS_MIN_CONTACTS_FILTER","shouldShowSortByReactions","STORY_MIN_REACTIONS_SORT","shouldShowSearch","STORY_VIEWS_MIN_SEARCH","hasHeader","refetchViews","sortedViews","sort","a","b","reactionA","reactionB","prepareComparator","placeholderCount","notAllAvailable","handleLoadMore","MoreMenuButton","isMenuOpen","fluid","sortButton","topButton","faded","iconSort","viewsList","contactFilter","check","SearchInput","search","topScrolled","onScroll","centeredInfo","InfiniteScroll","items","onLoadMore","view","additionalKeyId","_","i","PlaceholderChatInfo","bottomInfo","closeStoryPrivacyEditor","reportStory","storyToDelete","setStoryToDelete","isPrevOpen","handleOpenDeleteModal","s","handleCloseDeleteModal","openMessageReport","thumb","safeAreaBottom","getComputedStyle","documentElement","getPropertyValue","parseFloat","toTranslateX","toTranslateY","toScaleX","toScaleY","ghost2","ghost2Top","StorySlides","StoryDeleteConfirmModal","StoryViewModal","StorySettings","TOPIC_ICON_SIZE","ITEM_CLASS_NAME","ChatOrUserPicker","chatOrUserIds","searchPlaceholder","loadMore","onSearchChange","onSelectChatOrUser","loadTopics","topicContainerRef","searchRef","topicSearchRef","viewportIds","getMore","useInfiniteScroll","forumId","setForumId","topicSearch","setTopicSearch","viewportOffset","resetSearch","useInputFocusOnOpen","selectTopicsById","selectTopics","forumTopicsById","useSelector","topicIds","topics","chatsById","chats","chatFullInfoById","fullInfoById","searchTitle","toLowerCase","values","acc","topic","getCanPostInChat","keys","handleHeaderBackClick","handleSearchChange","handleTopicSearchChange","useKeyboardListNavigation","isForum","handleTopicKeyDown","renderChatItem","monoforumChannel","selectMonoforumChannel","isSelf","isApiPeerChat","subtitleClassName","getGroupStatus","userStatus","selectUserStatus","getUserStatus","isUserOnline","getSubtitle","PickerItem","FullNameTitle","isMonoforum","isSavedMessages","avatarElement","asMessageBubble","PEER_PICKER_ITEM_HEIGHT_PX","onKeyDown","placeholder","withAbsolutePositioning","maxHeight","Loading","topicId","TopicIcon","letterClassName","itemSelector","listIds","orderedPinnedIds","activeListIds","archivedListIds","archived","pinnedIds","RecipientPicker","API_CHAT_TYPES","onSelectRecipient","setSearch","priorityIds","isDeletedUser","selectIsMonoforumAdmin","chatFullInfo","selectChatFullInfo","sorted","sortChatIds","filterChatIdsByType","renderingIds","isForwarding","isManyMessages","isStory","ForwardRecipientPicker","openChatOrTopicWithReplyInDraft","setForwardChatOrTopic","exitForwardMode","forwardToSavedMessages","forwardStory","renderingIsStory","markIsShown","unmarkIsShown","handleSelectRecipient","recipientId","toChatId","getUserFirstOrLastName","getChatTitle","DraftRecipientPicker","requestedDraft","openChatWithDraft","resetOpenChatWithDraft","files","AttachBotRecipientPicker","requestedAttachBotInChat","cancelAttachBotInChat","callAttachBot","bot","startParam","handlePeerRecipient","getErrorHeader","error","isSlowMode","hasErrorKey","dialogs","Dialogs","dismissDialog","sendMessage","isModalOpen","dialog","contactRequest","handleConfirm","contact","messageList","getReadableErrorText","pick","Notifications","notifications","notification","Notification","localId","SafeLinkModal","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","withMarkdown","OpenMapModal","closeMapModal","point","geoPoint","googleUrl","bingUrl","appleUrl","osmUrl","google","prepareMapUrl","bing","osm","handleGoogleClick","handleBingClick","handleAppleClick","handleOsmClick","IS_MAC_OS","currentUser","UrlAuthModal","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","isWriteAllowed","handleLoginChecked","Checkbox","onCheck","MAX_SAFE_DATE","MAX_INT_32","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","padStart","formatDay","CalendarModal","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleChangeHours","replace","hours","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","handleDateSelect","inputMode","historyCalendarSelectedAt","HistoryCalendar","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","phoneCodeList","countryList","phoneCodes","NewContactModal","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","ResizeHandleType","resizeHandleSelectorsMap","Top","Bottom","Left","Right","topLeft","TopLeft","topRight","TopRight","bottomLeft","BottomLeft","bottomRight","BottomRight","resizeHandleSelectors","resizeTimeout","FULLSCREEN_POSITION","webApps","selectActiveWebApp","modalState","openedWebApps","isMinimizedState","activeTabBot","MinimizedWebAppModal","changeWebAppModalState","closeWebAppModal","openedWebAppsValues","openedTabsCount","activeTabBotId","app","handleCloseClick","handleExpandClick","state","activeTabName","botName","pluralValue","renderTitle","isPopularApp","requestMainWebView","theme","extractCurrentThemeParams","activeUserCount","botActiveUsers","badgeText","formatIntegerCompact","PeerBadge","avatarContainer","textClassName","badgeClassName","userCountBadge","badgeIconClassName","userBadgeIcon","badgeIcon","runThrottled","cb","globalSearch","popularBotApps","fetchingStatus","botApps","recentBotIds","topBotApps","MoreAppsTabContent","shouldShowMoreMine","setShouldShowMoreMine","searchPopularBotApps","handleToggleShowMoreMine","prev","filteredFoundIds","LoadMoreDirection","Backwards","handleSearchInputReset","noFastList","preloadBackwards","onReset","sectionTitle","showMoreLink","sectionContent","WebAppGridItem","FULLSCREEN_BUTTONS_AREA_HEIGHT","MAIN_BUTTON_ANIMATION_TIME","SANDBOX_ATTRIBUTES","DEFAULT_BUTTON_TEXT","ok","cancel","activeWebApp","activeWebAppKey","selectWebApp","activeBotId","attachBot","attachMenu","bots","botAppSettings","botInfo","appSettings","selectTheme","isPaymentModalOpen","regularPaymentStatus","payment","starsPaymentStatus","inputInvoice","starsInputInvoice","starsPayment","botAppPermissions","selectBotAppPermissions","paymentStatus","WebAppModalTabContent","webApp","registerSendEventCallback","registerReloadFrameCallback","isTransforming","isMultiTabSupported","onContextMenuButtonClick","modalHeight","closeActiveWebApp","sendWebViewData","toggleAttachBot","openTelegramLink","setWebAppPaymentSlug","switchBotInline","sharePhoneWithBot","updateWebApp","resetPaymentStatus","openChatWithInfo","openEmojiStatusAccessModal","openLocationAccessModal","openPreparedInlineMessageModal","mainButton","setMainButton","secondaryButton","setSecondaryButton","markLoaded","markUnloaded","popupParameters","setPopupParameters","isRequestingPhone","setIsRequestingPhone","isRequestingWriteAccess","setIsRequestingWriteAccess","requestedFileDownload","setRequestedFileDownload","bottomBarColor","setBottomBarColor","unlockPopupsAt","handlePopupOpened","handlePopupClosed","setUnlockPopupsAt","sequentialCalls","lastClosedDate","usePopupLimit","headerButtonRef","headerButtonCaptionRef","exitFullScreenCallback","fullscreenElementRef","activeWebAppName","appName","isBackButtonVisible","placeholderPath","isCloseModalOpen","isRemoveModalOpen","webAppKey","getWebAppKey","isAvailable","IS_GEOLOCATION_SUPPORTED","isAccessRequested","geolocation","isAccessGranted","updateCurrentWebApp","updatedPartialWebApp","update","themeParams","secondary_bg_color","themeBackgroundColor","bg_color","backgroundColorFromEvent","setBackgroundColorFromEvent","backgroundColorFromSettings","backgroundColor","backgroundDarkColor","themeHeaderColor","headerColorFromEvent","setHeaderColorFromEvent","headerColorFromSettings","headerColor","headerDarkColor","frameRef","isSimple","reloadFrame","sendEvent","sendFullScreenChanged","sendViewport","sendSafeArea","sendTheme","useWebAppFrame","isSimpleView","onEvent","openInvoice","closeWebApp","openSuggestedStatusModal","isReloadSupported","reloadTimeout","ignoreEventsRef","lastFrameSizeRef","handleLoad","contentWindow","JSON","stringify","eventType","eventData","is_fullscreen","forceReloadFrame","once","isNonStable","is_expanded","is_state_stable","theme_params","sendCustomStyle","handleMessage","parse","skipClosingConfirmation","scrollbarColor","reload_supported","req_id","slug","linkUrl","available","custom_emoji_id","BigInt","customEmojiId","plannedEvents","getIsWebAppsFullscreenSupported","exitIfFullscreenCallback","TME_LINK_PREFIX","path_full","shouldIgnoreCache","force_request","is_visible","isSettingsButtonVisible","validateHexColor","color_key","textColor","text_color","trim","is_active","isProgressVisible","is_progress_visible","shouldConfirmClosing","buttons","handleAppPopupClose","chat_types","convertToApiChatType","isSamePeer","handleRejectPhone","handleRejectWriteAccess","handleRequestWriteAccess","method","requestId","parameters","customMethod","handleInvokeCustomMethod","handleRejectFileDownload","fileUrl","handleCheckDownloadFile","file_name","access_requested","access_granted","geolocationData","getGeolocationStatus","accessRequested","accessGranted","latitude","longitude","altitude","course","heading","speed","horizontal_accuracy","accuracy","vertical_accuracy","altitudeAccuracy","handleRequestLocation","isMainButtonVisible","isSecondaryButtonVisible","handleHideCloseModal","handleConfirmCloseModal","handleHideRemoveModal","handleMainButtonClick","handleSecondaryButtonClick","buttonId","button_id","handleAppPopupModalClose","sendThemeCallback","setFullscreenCallback","checkIfFullscreen","sendFullScreenChangedCallback","visibilityChangedCallBack","prevModalState","prevIsPaymentModalOpen","handleRemoveAttachBot","isEnabled","handleAcceptPhone","shouldCloseActive","handleAcceptWriteAccess","handleDownloadFile","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","secondaryButtonCurrentPosition","secondaryButtonCurrentColor","secondaryButtonCurrentTextColor","secondaryButtonCurrentIsActive","secondaryButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideMainButton","setShouldHideMainButton","shouldHideSecondaryButton","setShouldHideSecondaryButton","shouldShowMainButton","setShouldShowMainButton","shouldShowSecondaryButton","setShouldShowSecondaryButton","shouldShowAppNameInFullscreen","setShouldShowAppNameInFullscreen","backButtonTextWidth","setBackButtonTextWidth","isVerticalLayout","rowsCount","hideDirection","mainButtonChangeTimeout","mainButtonFastTimeout","secondaryButtonChangeTimeout","secondaryButtonFastTimeout","appNameDisplayTimeout","frameStyle","handleBackClick","handleCollapseClick","handleShowContextMenu","backIconClass","backButtonCaption","hasHeaderElement","viewBox","renderDefaultPlaceholder","sandbox","allow","allowFullScreen","filename","MINIMIZED_STATE_SIZE","DEFAULT_MAXIMIZED_STATE_SIZE","MAXIMIZED_STATE_MINIMUM_SIZE","miniAppsCachedPosition","miniAppsCachedSize","selectSharedSettings","cachedPosition","cachedSize","WebAppModal","prolongWebView","openWebAppTab","openMoreAppsTab","closeMoreAppsTab","updateMiniAppCachedPosition","updateMiniAppCachedSize","getMaximizedStateSize","setMaximizedStateSize","getSize","openedOrderedKeys","sessionKeys","isMoreAppsTabActive","tabs","isMaximizedState","isFullScreen","supportMultiTabMode","menuRef","getTriggerElement","getRootElement","getMenuElement","isContextMenuOpen","contextMenuAnchor","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","isDraggingEnabled","setIsDraggingEnabled","headerElement","containerElement","isDragging","draggableStyle","dragHandleElementRef","isDragEnabled","originalSize","minimumSize","elementCurrentPosition","setElementCurrentPosition","elementCurrentSize","setElementCurrentSize","getElementPositionOnStartTransform","setElementPositionOnStartTransform","getElementSizeOnStartTransform","setElementSizeOnStartTransform","getTransformStartPoint","setTransformStartPoint","elementPositionOnStartTransform","transformStartPoint","dragHandleElement","isInitiated","setIsInitiated","wasElementShown","setWasElementShown","startDragging","stopDragging","startResizing","stopResizing","isWindowsResizing","startWindowResizing","stopWindowResizing","hitResizeHandle","setHitResizeHandle","getVisibleArea","innerWidth","innerHeight","updateCurrentPosition","getActualPosition","getCenteredPosition","visibleArea","centeredPosition","handleStartDrag","MouseEvent","handleStartResize","targetElement","resizeHandle","RESIZE_HANDLE_SELECTOR","getResizeHandleFromTarget","handleDragRelease","handleResizeRelease","ensurePositionInVisibleArea","visibleAreaWidth","visibleAreaHeight","componentWidth","componentHeight","newX","newY","adjustPositionWithinBounds","newPosition","ensureSizeInVisibleArea","sizeForCheck","newSize","originalWidth","originalHeight","adjustSizeWithinBounds","handleWindowResize","handleDrag","sizeOnStartTransform","pageVisibleX","pageVisibleY","maxX","maxY","newBounds","cleanups","resizeHandler","cursorStyle","actualPosition","useDraggable","getMinimumSize","currentSize","currentWidth","currentHeight","queryId","openTabsCount","useInterval","replyInfo","sendEventCallback","reloadFrameCallback","callback","handleSettingsButtonClick","handleRefreshClick","handleModalClose","handleCloseMoreAppsTab","handleTabClose","handleToggleClick","handleFullscreenClick","handleOpenMoreAppsTabClick","handleTabClick","tab","openBotChat","renderMenuItems","isAttachBot","renderMoreMenu","anchor","backButtonClassName","headerTextVar","r","g","hexToRgb","luma","getColorLuma","renderTabCurveBorder","fill","buildResizeHandleClass","handleClassName","RESIZE_HANDLE_CLASS_NAME","useHorizontalScroll","dialogRef","dialogStyle","dialogContent","shortName","renderActiveTab","noBackdropClose","BotTrustModal","cancelBotTrustRequest","markBotTrusted","setIsWriteAllowed","handleBotTrustAccept","handleBotTrustDecline","AttachBotInstallModal","confirmAttachBotInstall","cancelAttachBotInstall","isTosAccepted","setIsTosAccepted","tosLabel","split","linkText","MINI_APP_TOS_URL","rel","DeleteFolderDialog","folder","closeDeleteChatFolderModal","deleteChatFolder","openDeleteChatFolderModal","renderingFolder","isMyChatlist","hasMyInvites","handleDeleteFolderMessage","folderId","isConfirmedForChatlist","COLORS","PremiumFeatureItem","isFontIcon","newIndex","colorA","colorB","ceil","lerpRgb","buttonClassName","fontIcon","SliderDots","onSelectSlide","startFrom","isPreLastBatch","isLastBatch","isFirstBatch","isPreFirstBatch","shownDotsCount","handleGoForward","handleGoBack","isLast","isPreLast","isFirst","isPreFirst","isInvisible","PremiumLimitsCompare","leftValue","rightValue","floatingBadgeIcon","rightStyle","COLOR_START","COLOR_END","PremiumLimitPreview","colorStepProgress","lerp","AnimatedCircleSticker","realIndex","sticker","maxLength","mediaDataAround","isActivated","isAnimated","animate","inanimate","circleSize","angle","PI","cos","sin","play","isLowPriority","stickers","premium","PremiumFeaturePreviewStickers","setOffset","setSize","renderedStickers","cycleRestrict","STORY_FEATURE_TITLES","stories_order","stories_stealth","stories_views","stories_timer","stories_save","stories_caption","stories_link","STORY_FEATURE_DESCRIPTIONS","STORY_FEATURE_ICONS","STORY_FEATURE_ORDER","CIRCLE_SIZE","AVATAR_SIZES","giant","PremiumFeaturePreviewVideo","circleRef","dpr","useDevicePixelRatio","drawGradientCircle","segmentsCount","readSegmentsCount","readSegmentColor","maxSize","forPremiumPromo","videoId","isReverseAnimation","isDown","videoThumbnail","thumbnailRef","wrapper","reverse","down","DeviceFrame","PREMIUM_FEATURE_TITLES","double_limits","infinite_reactions","premium_stickers","animated_emoji","no_ads","voice_to_text","profile_badge","faster_download","more_upload","advanced_chat_management","animated_userpics","emoji_status","translations","saved_tags","last_seen","message_privacy","effects","PREMIUM_FEATURE_DESCRIPTIONS","LIMITS_TITLES","channels","dialogFolderPinned","channelsPublic","savedGifs","stickersFaved","aboutLength","captionLength","dialogFilters","dialogFiltersChats","recommendedChannels","moreAccounts","LIMITS_DESCRIPTIONS","PremiumFeatureModal","promo","isPremium","limits","premiumPromoOrder","subscriptionOption","onClickSubscribe","scrollContainerRef","currentSlideIndex","setCurrentSlideIndex","PREMIUM_FEATURE_SECTIONS","reverseAnimationSlideIndex","setReverseAnimationSlideIndex","isScrolling","startScrolling","stopScrolling","isScrolledToTop","setIsScrolledToTop","isScrolledToBottom","setIsScrolledToBottom","prevInitialSection","filteredSections","subscriptionButtonText","months","perMonthPrice","price","handleLimitsScroll","scrollContainer","animateHorizontalScroll","then","handleSelectSlide","currentSection","hasHeaderBackdrop","scrollLeft","scrollLeftOriginal","reverseIndex","prevElement","reverseElement","toString","toggleExtraClass","PREMIUM_LIMITS_ORDER","defaultLimit","premiumLimit","PremiumFeaturePreviewStories","videoSections","videos","PREMIUM_BOTTOM_VIDEOS","PremiumSubscriptionOption","fullMonthlyAmount","isGiveaway","perMonth","isUserCountPlural","discount","handleChange","formatCurrencyAsString","STATUS_EMOJI_SIZE","PREMIUM_FEATURE_COLOR_ICONS","PremiumStatus","PremiumLimits","PremiumReactions","PremiumStickers","PremiumEmoji","PremiumAds","PremiumVoice","PremiumBadge","PremiumSpeed","PremiumFile","PremiumChats","PremiumVideo","PremiumTranslate","PremiumTags","PremiumLastSeen","PremiumMessagePrivacy","PremiumEffects","fromUser","fromUserId","fromUserStatusEmoji","emojiStatus","customEmojis","documentId","fromUserStatusSet","selectStickerSet","stickerSetInfo","isSuccess","isGift","monthsAmount","toUser","toUserId","limitChannels","selectPremiumLimit","limitFolders","limitPins","limitLinks","premiumSlug","premiumInvoiceSlug","premiumBotUsername","PremiumMainModal","closePremiumModal","requestConfetti","loadStickers","openStickerSet","isHeaderHidden","setHeaderHidden","setCurrentSection","selectedSubscriptionOption","setSubscriptionOption","handleOpenSection","handleResetSection","handleClickWithStartParam","handleChangeSubscriptionOption","foundOption","showConfetti","withStars","prevIsPremium","defaultOption","handleOpenStatusSet","monthOption","subscribeButtonText","CustomEmoji","PremiumLogo","template","first","second","emoji","thumbCustomEmojiId","link","getHeaderText","statusText","entities","statusEntities","renderFooterText","ItemPicker","notFoundText","noScrollRestore","isViewOnly","itemClassName","forceRenderAllItems","onDisabledClick","optionalProps","lockedSelectedValues","lockedUnselectedValues","timeoutId","selectedValues","selectedValue","lockedSelectedValuesSet","Set","lockedUnselectedValuesSet","sortedItemValuesList","lockedSelectedBucket","unlockedBucket","lockedUnselectableBucket","has","concat","handleItemClick","newSelectedValues","splice","onSelectedValuesChange","onSelectedValueChange","viewportValuesList","handleFilterChange","renderItem","itemOption","subLabel","isItemLoading","isAlwaysUnselected","isAlwaysSelected","isLocked","isChecked","inputElement","Radio","onlyInput","pickerList","padded","noResults","CountryPickerModal","selectionLimit","selectedCountryIds","setSelectedCountryIds","noPickerScrollRestore","country","iso2","defaultName","handleSelectedIdsChange","newSelectedIds","pickerSelector","pickerTitle","main","picker","GiveawayChannelPickerModal","giveawayChatId","initialSelectedIds","onSelectedIdsConfirmed","pendingChannelId","setPendingChannelId","isConfirmModalOpen","openConfirmModal","closeConfirmModal","setSelectedIds","channelIds","isChatSuperGroup","displayedChannelIds","foundChannelIds","handleSelectedChannelIdsChange","privateLinkChannelId","isChatPublic","confirmPrivateLinkChannelSelection","handleModalConfirm","GiveawayTypeOption","isLink","onClickAction","userNames","selectedMemberIds","displayText","members","adminMembersById","GiveawayUserPickerModal","memberIds","statusesById","adminIdsSet","sortUserIds","displayedMemberIds","filteredUserIds","isUserBot","handleSelectedMemberIdsChange","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","giveawayModal","gifts","selectedMemberList","selectedChannelList","selectedChannelIds","giveawayBoostPerPremiumLimit","giveawayBoostsPerPremium","isStarsGiftEnabled","userSelectionLimit","giveawayAddPeersMax","countrySelectionLimit","giveawayCountriesMax","general","prepaidGiveaway","starsGiftOptions","starOptions","GiveawayModal","GIVEAWAY_BOOST_PER_PREMIUM","GIVEAWAY_MAX_ADDITIONAL_COUNTRIES","GIVEAWAY_MAX_ADDITIONAL_USERS","closeGiveawayModal","launchPrepaidGiveaway","launchPrepaidStarsGiveaway","isCalendarOpened","openCalendar","closeCalendar","isCountryPickerModalOpen","openCountryPickerModal","closeCountryPickerModal","isUserPickerModalOpen","openUserPickerModal","closeUserPickerModal","isChannelPickerModalOpen","openChannelPickerModal","closeChannelPickerModal","TYPE_OPTIONS","GiftStar","customExpireDate","setCustomExpireDate","selectedRandomUserCount","setSelectedRandomUserCount","selectedGiveawayOption","setGiveawayOption","setSelectedStarOption","selectedSubscriberOption","setSelectedSubscriberOption","selectedMonthOption","setSelectedMonthOption","selectedUserIds","setSelectedUserIds","setSelectedChannelIds","shouldShowWinners","setShouldShowWinners","shouldShowPrizes","setShouldShowPrizes","prizeDescription","setPrizeDescription","dataPrepaidGiveaway","setDataPrepaidGiveaway","dataStarsPrepaidGiveaway","setDataStarsPrepaidGiveaway","isPremiumGiveaway","isStarsGiveaway","selectedUserCount","boostQuantity","boostStarsQuantity","yearlyBoosts","SUBSCRIBER_OPTIONS","monthQuantity","isStarsPrepaidGiveaway","isPremiumPrepaidGiveaway","selectedGift","gift","selectedStarsGift","filteredGifts","STARS_CURRENCY_CODE","basicGift","userCountOptions","winnerCountOptions","quantity","handlePremiumClick","boostChannelId","additionalChannelIds","isOnlyForNewSubscribers","countries","areWinnersVisible","untilDate","confirmLaunchPrepaidGiveaway","giveawayId","paymentPurpose","handleRandomUserCountChange","newValue","handleWinnerCountChange","handlePrizeDescriptionChange","handleChangeSubscriberOption","handleChangeTypeOption","handleExpireDateChange","handleSetCountriesListChange","handleSelectedUserIdsChange","handleShouldShowWinnersChange","handleShouldShowPrizesChange","onClickActionHandler","handleStarClick","renderGiveawayOptionList","filteredChannelIds","deleteParticipantsHandler","subLabelClassName","formatDateTimeToString","boosts","RangeSliderWithMarks","rangeCount","marks","match","Link","isPrimary","renderPremiumFeaturesLink","GIVEAWAY_MAX_ADDITIONAL_CHANNELS","LIMIT_DESCRIPTION","uploadMaxFileparts","chatlistInvites","chatlistJoined","savedDialogsPinned","LIMIT_DESCRIPTION_BLOCKED","LIMIT_DESCRIPTION_PREMIUM","LIMIT_ICON","LIMIT_VALUE_FORMATTER","MAX_UPLOAD_FILEPART_SIZE","defaultValue","premiumValue","canBuyPremium","selectIsPremiumPurchaseBlocked","PremiumLimitReachedModal","closeLimitReachedModal","isClosing","startClosing","stopClosing","valueFormatter","limitType","defaultValueFormatted","premiumValueFormatted","getLimiterDescription","canUpgrade","SLIDE_TRANSITION_DURATION","FOCUS_MARGIN","useStickerPickerObservers","idPrefix","stickerSetIntersectionsRef","activeSetIndex","setActiveSetIndex","observe","observeIntersectionForSet","freeze","freezeForSet","unfreeze","unfreezeForSet","useIntersectionObserver","rootRef","stickerSetIntersections","entry","isIntersecting","minIntersectingIndex","lowestIndex","Infinity","observeIntersectionForShowingItems","freezeForShowingItems","unfreezeForShowingItems","throttleMs","margin","observeIntersectionForPlayingItems","observeIntersectionForCovers","stickerSetEl","isClose","animateScroll","maxDistance","StickerSetCover","stickerSet","STICKER_SIZE_PICKER_HEADER","observeIntersection","sharedCanvasRef","hasThumbnail","hasVideoThumb","hasAnimatedThumb","hasStaticThumb","customEmoji","useCustomEmoji","hasCustomColor","shouldUseTextColor","customColor","useDynamicColorListener","colorFilter","useColorFilter","useIsIntersecting","shouldPlay","shouldFallbackToSticker","IS_WEBM_SUPPORTED","firstStickerHash","getStickerMediaHash","firstStickerMediaData","mediaHash","coords","useCoordsInSharedCanvas","observeIntersectionForPlaying","selectIsAlwaysHighPriorityEmoji","sharedCanvas","sharedCanvasCoords","forceAlways","getFirstLetters","contentForStatusMenuContext","arg","StickerButton","noContextMenu","isStatusPicker","canViewSet","observeIntersectionForShowing","isSelected","shouldIgnorePremium","noShowPremium","withTranslucentThumb","onFaveClick","onUnfaveClick","onRemoveRecentClick","onContextMenuOpen","onContextMenuClose","onContextMenuClick","isEffectEmoji","withSparkles","setEmojiStatus","isFree","hasEffect","isCustomEmoji","shouldLoad","isIntesectingForShowing","handleBeforeContextMenu","shouldRenderContextMenu","getLayout","withPortal","shouldAvoidNegativePosition","handleRemoveClick","handleContextRemoveRecent","handleContextUnfave","handleContextFave","handleSendQuiet","handleSendScheduled","handleOpenSet","handleEmojiStatusExpiresClick","until","shouldShowCloseButton","contextMenuItems","preventMessageInputBlurWithBubbling","Sparkles","preset","StickerView","isSmall","shouldLoop","shouldPreloadPreview","noLoad","noVideoOnMobile","withSharedAnimation","noFastClick","ReactionEmoji","loadAndPlay","sharedCanvasHqRef","isCustom","availableReaction","staticIcon","animationId","selectAnimation","getDocumentMediaHash","StarReaction","EMOJI_SIZE_PICKER","AnimatedIconWithPreview","collectibleStatuses","collectibleEmojiStatuses","statuses","StickerSet","isNearActive","favoriteStickers","isReactionPicker","shouldHideHeader","withDefaultTopicIcon","selectedReactionIds","withDefaultStatusIcon","isChatEmojiSet","isChatStickerSet","isTranslucent","noContextMenus","onReactionSelect","onReactionContext","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","clearRecentCustomEmoji","clearRecentReactions","toggleStickerSet","itemsPerRow","setItemsPerRow","getItemsPerRowFallback","stickerMarginPx","emojiMarginPx","emojiVerticalMarginPx","isRecent","RECENT_SYMBOL_SET_ID","isStatusCollectible","COLLECTIBLE_STATUS_SET_ID","isFavorite","FAVORITE_SYMBOL_SET_ID","isPopular","POPULAR_SYMBOL_SET_ID","isEmoji","isPremiumSet","selectIsSetPremium","handleClearRecent","handleAddClick","stickerSetId","handleDefaultTopicIconClick","DEFAULT_TOPIC_ICON_STICKER_ID","isLottie","handleDefaultStatusIconClick","DEFAULT_STATUS_ICON_ID","itemSize","STICKER_SIZE_PICKER","verticalMargin","calculateItemsPerRow","contentRect","useResizeObserver","accessHash","isInstalled","installedDate","isArchived","canCut","EFFECT_EMOJIS_SET_ID","EFFECT_STICKERS_SET_ID","isCut","expand","itemsBeforeCutout","totalItemsCount","itemHeight","heightWhenCut","favoriteStickerIdsSet","collectibleEmojiIdsSet","withAddSetButton","addSetButtonText","pill","grey","reactionId","isHqEmoji","canvasRef","HEADER_BUTTON_WIDTH","FADED_BUTTON_SET_IDS","STICKER_SET_IDS_WITH_COVER","setsById","stickerSetsById","customEmojisById","featuredIds","customEmojiFeaturedIds","statusRecent","emojis","recentStatusEmojis","recentCustomEmojis","recentCustomEmojiIds","recentReactions","topReactions","defaultTags","addedCustomEmojiIds","added","setIds","canAnimate","selectCanPlayAnimatedEmojis","defaultTopicIconsId","defaultStatusIconsId","chatEmojiSetId","emojiSet","isWithPaidReaction","isPaidReactionAvailable","defaultTagReactions","CustomEmojiPicker","pickerListClassName","withDefaultTopicIcons","onCustomEmojiSelect","handleContentScroll","shouldHideTopBorder","pickTruthy","collectibleStatusEmojis","collectibleStatusEmojiIds","prefix","canLoadAndPlay","areAddedLoaded","allSets","defaultSets","TOP_SYMBOL_SET_ID","topReactionsSlice","unshift","cleanRecentReactions","some","topReaction","cleanAvailableReactions","isInactive","allRecentReactions","defaultStatusIconsPack","uniqueByField","defaultTopicIconsPack","userSetIds","setIdsToDisplay","setsToDisplay","noPopulatedSets","canRenderContent","useAsyncRendering","shouldRenderContent","newLeft","handleEmojiSelect","pickerStyles","listClassName","firstSticker","withSharedCanvas","STICKER_PICKER_MAX_SHARED_COVERS","isHq","isFaded","areFeaturedStickersLoaded","selectIsContextMenuTranslucent","StatusPickerMenu","statusButtonRef","onEmojiStatusSelect","loadFeaturedEmojiStickers","transformOriginX","isContextMenuShown","markContextMenuShown","unmarkContextMenuShown","Portal","noCompact","bubbleClassName","noCloseOnBackdrop","CUSTOM_EMOJI_SIZE","SuggestedStatusModal","closeSuggestedStatusModal","sendWebAppEvent","renderingModal","mockPeerWithStatus","formatShortDuration","handleSetStatus","expires","referrerWebAppKey","loopLimit","mockPeer","getFirstAvailableBoost","myBoosts","boost","firstBoost","prevBoostedChat","BoostModal","applyBoost","closeBoostModal","loadFullChat","isReplaceModalOpen","openReplaceModal","closeReplaceModal","isWaitDialogOpen","openWaitDialog","closeWaitDialog","isPremiumDialogOpen","openPremiumDialog","closePremiumDialog","chatTitle","boostedChatTitle","isStatusLoaded","isBoosted","leftText","rightText","descriptionText","canBoostMore","boostStatus","hasMyBoost","areBoostsInDifferentChannels","every","currentLevel","hasNextLevel","levelProgress","remainingBoosts","isMaxLevel","getBoostProgressInfo","hasBoost","moreBoosts","modalTitle","boostsLeftToUnrestrict","boostsToUnrestrict","boostsApplied","boostTimes","isBoostDisabled","isReplacingBoost","handleApplyBoost","slots","slot","handleProceedPremium","handleButtonClick","PremiumProgress","floatingBadgeText","isOnlyConfirm","chatMessage","GiftCodeModal","closeGiftCodeModal","applyGiftCode","canUse","toId","usedAt","handleOpenGiveaway","giveawayMessageId","modalData","LinkField","isFromGiveaway","getClosestEntry","arr","curr","selfDestructAccountDays","DeleteAccountModal","closeDeleteAccountModal","setAccountTTL","selectedOption","setSelectedOption","optionToDays","initialSelectedOption","ACCOUNT_TTL_OPTIONS","days","onCloseHandler","withIcon","ChatlistAlready","invite","closeChatlistModal","joinChatlistInvite","selectedPeerIds","setSelectedPeerIds","missingPeerIds","hasChatsToAdd","isNew","alreadyPeerIds","newChatsCount","noCustomEmojiPlayback","noTitleAnimations","handleSelectionToggle","areAllSelected","pickerWrapper","pickerHeader","pickerHeaderInfo","selectionToggle","Badge","buttonBadge","isAlternateColor","ChatlistDelete","suggestedPeerIds","leaveChatlist","ChatlistNew","joinedIds","isNotJoined","selectedCount","removal","selectChatFolder","ChatlistInviteModal","renderingInfo","renderingFolderTitle","folderTabNumber","renderContent","folderTitle","foldersWrapper","folders","Tab","badgeCount","isBadgeActive","ChatInviteModal","acceptChatInvite","closeChatInviteModal","participantsRef","prevModal","usePrevious","hash","inviteInfo","about","isBroadcast","participantIds","participantsCount","isRequestNeeded","handleAccept","acceptLangKey","requestToJoinLangKey","customPeer","getCustomPeerFromInvite","participants","withVideo","participantCount","participant","minLevelToRestrictAds","channelRestrictAdsLevelMin","AboutAdsModal","closeAboutAdsModal","moreMenuRef","canReport","additionalInfo","sponsorInfo","isMonetizationSharing","renderingIsNewDesign","regularAdContent","SafeLink","SponsoredMessageContextMenuContainer","triggerRef","shouldSkipAbout","onItemClick","AboutMonetizationModal","blockchainText","monetizationTitle","specialReplacement","twoFaSettings","hint","passwordHint","VerificationMonetizationModal","closeMonetizationVerificationModal","clearMonetizationVerificationError","processMonetizationRevenueWithdrawalUrl","shouldShowPassword","setShouldShowPassword","password","currentPassword","handleClearError","PasswordForm","shouldShowSubmit","errorKey","withRegular","clearError","shouldResetValue","onChangePasswordVisibility","EmojiStatusAccessModal","closeEmojiStatusAccessModal","toggleUserEmojiStatusPermission","loadDefaultStatusIcons","currentStatusIndex","setCurrentStatusIndex","totalCount","prevIndex","renderPickerItem","chatItem","itemName","isBotAccessEmojiGranted","renderStatusText","LocationAccessModal","closeLocationAccessModal","toggleUserLocationPermission","renderInfo","ReportAdModal","reportSponsored","closeReportAdModal","openPreviousReportAdModal","transitionRef","handleOptionClick","renderingSection","renderingDepth","sectionDepth","sections","bottomText","hasSubtitle","ACTIVE_SLIDE_CLASS_NAME","handleAnimationStart","TO_SLIDE_CLASS_NAME","narrow","secondaryIcon","ReportModal","reportMessages","closeReportModal","openPreviousReportModal","setText","subject","handleTextChange","closeReportMessageModalHandler","sendMessageReportHandler","Report","TextArea","isOptional","maxLengthIndicator","noReplaceNewlines","isBlurred","isBackgroundBlurred","patternColor","background","customBackground","selectThemeValues","PreparedMessageModal","closePreparedInlineMessageModal","openSharePreparedMessageModal","customBackgroundValue","useCustomBackground","handleOpenClick","localMessage","getMockPreparedMessageFromResult","bgClassName","inert","Message","noComments","noReplies","appearanceOrder","isJustAdded","isFirstInGroup","isLastInGroup","isLastInList","isFirstInDocumentGroup","isLastInDocumentGroup","starsBalance","balance","isStarsBalanceModalOpen","starsBalanceModal","SharePreparedMessageModal","closeSharePreparedMessageModal","sendInlineBotResult","updateSharePreparedMessageModalSendArgs","pendingSendArgs","starsForSendMessage","closeConfirmDialog","closeConfirmModalPayForMessage","dialogHandler","paymentMessageConfirmDialogHandler","shouldAutoApprove","shouldPaidMessageAutoApprove","setAutoApprove","setShouldPaidMessageAutoApprove","handleWithConfirmation","handleActionWithPaymentConfirmation","usePaidMessageConfirmation","handleSend","handleSendWithPaymentConfirmation","handleClosePaymentMessageConfirmDialog","peerName","PaymentMessageConfirmDialog","userName","messagePriceInStars","messagesCount","MEDIA_PERMISSIONS","MESSAGE_PERMISSIONS","useManagePermissions","defaultPermissions","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","setIsLoading","handlePermissionChange","targetName","getUpdatedPermissionValue","oldPermissions","newPermissions","sendGifs","checkMedia","mediaPermissions","v","sendMedia","assign","embedLinks","sendPlain","sendMessages","resetPermissions","permissionKeyList","fullInfo","hasLinkedChat","linkedChatId","PermissionCheckboxList","isMediaDropdownOpen","setIsMediaDropdownOpen","shiftedClassName","dropdownClassName","withCheckbox","getControlIsDisabled","permissionGroup","shouldDisablePermissionForPublicGroup","countCheckedPermissions","handleOpenMediaDropdown","handleDisabledClick","blocking","labelText","rightIcon","onClickLabel","sendPhotos","sendVideos","sendStickers","sendAudios","sendDocs","sendVoices","sendRoundvideos","sendPolls","inviteUsers","pinMessages","changeInfo","manageTopics","deleteMessageModal","canDeleteForAll","selectCanDeleteSelectedMessages","isSuperGroup","contactName","getPrivateChatUserId","chatBot","isSystemBot","selectBot","canBanUsers","getHasAdminRight","isCreator","isChatWithBot","selectIsChatWithBot","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","DeleteMessageModal","closeDeleteMessageModal","deleteMessages","reportChannelSpam","deleteChatMember","deleteScheduledMessages","exitMessageSelectMode","updateChatMemberBannedRights","deleteParticipantHistory","defaultBannedRights","peerIdsToDeleteAll","setPeerIdsToDeleteAll","peerIdsToBan","setPeerIdsToBan","peerIdsToReportSpam","setPeerIdsToReportSpam","isAdditionalOptionsVisible","setIsAdditionalOptionsVisible","shouldDeleteForAll","setShouldDeleteForAll","peerList","senderArray","getSendersFromSelectedMessages","linkedMonoforumId","buildNestedOptionListWithAvatars","member","peerListToDeleteAll","peerListToReportSpam","peerListToBan","isCurrentUserInList","isAdmin","shouldShowOption","peerNames","buildCollectionByCallback","ACTION_SPAM_OPTION","nestedOptions","ACTION_DELETE_OPTION","ACTION_BAN_OPTION","toggleAdditionalOptions","filterMessageIdByPeerId","selectedMessageIdList","msgId","selectSenderFromMessage","handleReportSpam","userMessagesMap","messageIdList","participantId","handleDeleteMessages","filteredMessageIdList","handleDeleteAllPeerMessages","peerIdList","handleDeleteMember","filteredUserIdList","handleUpdateChatMemberBannedRights","bannedRights","handleDeleteMessageList","isNaN","CheckboxGroup","nestedCheckbox","isPrivateChat","canPinForAll","PinMessageModal","pinMessage","shouldPinForAll","setShouldPinForAll","handlePinMessage","isUnpin","isOneSide","isSilent","UnpinAllMessagesModal","pinnedMessagesCount","onUnpin","shouldWarnAboutSvg","selectCanReportSelectedMessages","selectCanDownloadSelectedMessages","selectedMessageIds","selectedMessages","hasProtectedMessage","selectHasProtectedMessage","selectCanForwardMessages","hasSvgs","selectHasSvg","isShareMessageModalOpen","isShareMessageModalShown","isAnyModalOpen","requestedAttachBotInstall","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canForwardMessages","MessageSelectToolbar","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","setSharedSettingOption","handleCopy","useHotkeys","useCopySelectedMessages","isSvgDialogOpen","openSvgDialog","closeSvgDialog","shouldNotWarnAboutSvg","setShouldNotWarnAboutSvg","handleExitMessageSelectMode","handleDelete","onBackspace","onEsc","handleMessageDownload","handleSvgConfirm","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","seenByDates","closeSeenByModal","renderingSeenByDates","leftId","rightId","handleCloseSeenByModal","CLOSE_ANIMATION_DURATION","isReadDate","privacySettingsNoticeModal","PrivacySettingsNoticeModal","updateGlobalPrivacySettings","closePrivacySettingsNoticeModal","setPrivacyVisibility","loadUser","handleShowReadTime","shouldHideReadMarks","handleShowLastSeen","privacyKey","onSuccess","handleOpenPremium","ReadTime","LastSeen","reactorModal","reactors","ReactorListModal","loadReactors","closeReactorListModal","chosenTab","setChosenTab","canShowFilters","results","chatIdRef","handleCloseAnimationEnd","allReactions","uniqueReactions","seenByUserIds","flatMap","peerReactions","reactor","seenByUser","addedDate","avatarSize","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","EmojiInteractionAnimation","stopActiveEmojiInteraction","isHiding","startHiding","startPlaying","stop","handleCancelAnimation","endHeavyAnimation","effectHash","effectTgsUrl","startSize","isReversed","quality","chatLanguageModal","currentLanguageCode","selectLanguageCode","activeTranslationLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","ChatLanguageModal","requestMessageTranslation","closeChatLanguageModal","setSettingOption","requestChatTranslation","handleSelect","langCode","toLanguageCode","translationLanguage","handleSearch","translateLanguages","SUPPORTED_TRANSLATION_LANGUAGES","translatedName","Intl","DisplayNames","of","originalName","filteredDisplayedLanguages","highlight","CollectibleInfoModal","closeCollectibleInfoModal","isUsername","handleOpenUrl","shouldSkipModal","formatUsername","collectible","copyTextToClipboard","formattedCollectible","purchaseDate","cryptoCurrency","cryptoAmount","Mention","Fragment","chip","createMapStateToProps","props","currentType","isVoice","byChatId","globalMessagesByChatId","messages","searchChatId","AudioResults","searchMessagesGlobal","openAudioPlayer","foundMessages","parseSearchResultKey","handleMessageFocus","handlePlayAudio","canRenderContents","NothingFound","shouldDrawDateDivider","toYearMonth","getMessageDownloadableMedia","formatMonthAndYear","Audio","AudioOrigin","Search","getSenderName","onDateClick","buttonRef","activeElement","selectIsChatPinned","getIsChatMuted","selectNotifyDefaults","selectNotifyException","canChangeFolder","chatFolders","LeftSearchResultChat","withUsername","withOpenAppButton","isMuteModalOpen","openMuteModal","closeMuteModal","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","shouldRenderChatFolderModal","markRenderChatFolderModal","unmarkRenderChatFolderModal","shouldRenderMuteModal","markRenderMuteModal","unmarkRenderMuteModal","handleChatFolderChange","handleMute","useChatContextActions","handleOpenApp","useSelectWithEnter","storyViewerOrigin","hasMainMiniApp","MuteChatModal","ChatFolderModal","BotAppResults","recentSet","withoutRecent","handleChatClick","shouldReplaceHistory","renderSummary","isRoundVideo","renderMessageSummary","isSpoiler","getMessageIsSpoiler","getMessageVideo","privateChatUserId","privateChatUser","ChatMessage","mediaThumbnail","getMessageSticker","getMessageMediaThumbDataUri","mediaBlobUrl","getMessageMediaHash","getMessageRoundVideo","formatPastTimeShort","DateSuggest","searchDate","suggestions","suggestion","currentDate","latestYear","getSuggestionsFromDate","selectTopic","LeftSearchResultTopic","foundTopicIds","ChatMessageResults","dateSearchQuery","onSearchDateSelect","openThread","handleTopicClick","nothingFound","LeftSearchResultSponsored","sponsoredPeer","viewSponsored","useOnIntersect","intersectionRatio","handleBadgeClick","handleBadgeMouseDown","BadgeButton","topUserIds","topPeers","recentlyFoundChatIds","RecentContacts","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","handleClearRecentlyFoundChats","isChannelList","globalResults","localResults","globalPeerIds","accountPeerIds","similarChannelIds","selectSimilarChannelIds","GLOBAL_SUGGESTED_CHANNELS_ID","suggestedChannelIds","ChatResults","setGlobalSearchChatId","loadChannelRecommendations","chatSelectionRef","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","searchContext","setSearchContext","context","handlePickerItemClick","getSearchContextCaption","handleClickContext","itemPlaceholderClass","startsWith","filteredChatIds","getOrderedIds","ALL_FOLDER_ID","localChatIds","contactIdsWithMe","localPeerIds","filteredIds","shouldResetResultsByType","shouldCheckFetchingMessagesStatus","handleClickShowMoreLocal","handleClickShowMoreGlobal","actualFoundIds","isMessagesFetching","shouldRenderTopPeers","shouldRenderMessagesSection","noScrollRestoreOnTop","customIcon","shouldCleanup","CURRENT_TYPE","FileResults","observeIntersectionForMedia","getMessageDocument","Document","withDate","datetime","smaller","LinkResults","WebLink","onMessageClick","MediaResults","handleSelectMedia","isMediaGrid","isMessageList","Media","TABS","GlobalSearchContent","ChannelList","BotApps","Links","Files","Music","Voice","CHAT_TABS","currentContent","LeftSearch","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","handleSearchDateSelect","TabList","onSwitchTab","renderCount","INITIAL_STATE","email","twoFaReducer","payload","maxChats","selectCurrentLimit","SettingsFoldersChatFilters","mode","dispatch","onSaveFilter","openLimitReachedModal","chatFilter","selectedChatIds","selectedChatTypes","selectChatFilters","chatTypes","CUSTOM_PEER_INCLUDED_CHAT_TYPES","CUSTOM_PEER_EXCLUDED_CHAT_TYPES","isTouched","setIsTouched","folderAllOrderedIds","useFolderManagerForOrderedIds","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","shouldHideChatTypes","isChatList","chatIds","newFilter","includeFilters","includedChatIds","excludeFilters","excludedChatIds","handleSelectedChatTypesChange","newFilters","categories","selectedCategories","categoryPlaceholderKey","withPeerTypes","onSelectedCategoriesChange","ERROR_NO_TITLE","ERROR_NO_CHATS","invites","chatListCount","el","loadedActiveChatIds","loadedArchivedChatIds","isRemoved","maxInviteLinks","maxChatLists","SettingsFoldersEdit","onAddIncludedChats","onAddExcludedChats","onShareFolder","onOpenInvite","isOnlyInvites","onSaveFolder","loadChatlistInvites","isCreating","isEditingChatList","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","includedChatTypes","excludedChatTypes","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleCreateInviteClick","selectCanShareFolder","handleEditInviteClick","renderChats","visibleChatIds","leftChatsCount","clickHandler","chatType","typeKey","renderChatType","STICKER_SIZE_FOLDER_SETTINGS","FoldersNew","runThrottledForLoadRecommended","folderIds","foldersById","recommended","recommendedChatFolders","maxFolders","SettingsFoldersMain","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","sortChatFolders","setState","orderedFolderIds","dragOrderIds","draggedIndex","prevFolderIds","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","getFolderDescriptionText","handleCreateFolderFromRecommended","translation","handleDragEnd","canCreateNewFolder","FoldersAll","isBlocked","isDragged","draggedTop","Draggable","onDragEnd","knobStyle","allowSelection","shareFolderScreen","SettingsShareChatlist","createChatlistInvite","deleteChatlistInvite","editChatlistInvite","handleRevoke","pinnedChatIds","unlockedIds","partition","selectCanInviteToChat","isFirstRenderRef","prevUrl","handleClickDisabled","chatsCount","AnimatedIcon","FoldersShare","withShare","onRevoke","lockedUnselectedIds","SettingsFolders","currentScreen","shownScreen","openShareChatFolderModal","editChatFolder","openSettingsScreen","handleReset","SettingsScreens","FoldersCreateFolder","FoldersEditFolder","FoldersEditFolderFromChatList","FoldersEditFolderInvites","FoldersIncludedChats","FoldersExcludedChats","screen","saveState","newState","folderUpdate","handleSaveFolder","handleSaveFilter","handleEditFolder","handleAddIncludedChats","FoldersIncludedChatsFromChatList","handleAddExcludedChats","FoldersExcludedChatsFromChatList","handleShareFolder","noRequestNextScreen","handleOpenInvite","Folders","SettingsPasswordForm","shouldDisablePasswordManager","expectedPassword","validationError","setValidationError","newPassword","SettingsPasscodeCongratulations","fullReset","STICKER_SIZE_PASSCODE","Congratulations","SettingsPasscodeEnabled","Lock","previewUrl","lockPreviewUrl","PasscodeChangePasscodeCurrent","PasscodeTurnOff","SettingsPasscodeStart","passcode","SettingsPasscode","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","handleStartWizard","PasscodeNewPasscode","handleNewPassword","PasscodeNewPasscodeConfirm","handleNewPasswordConfirm","PasscodeCongratulations","handleChangePasswordCurrent","currentPasscode","decryptSession","PasscodeChangePasscodeNew","handleChangePasswordNew","PasscodeChangePasscodeConfirm","handleTurnOff","Privacy","PasscodeDisabled","SettingsPasscodeForm","PasscodeEnabled","DEFAULT_POINTS","getProgress","points","pointIndex","findIndex","prevPoint","nextPoint","pointValue","PaidMessageSlider","readOnly","canChangeChargeForMessages","mainClassName","number","formatStarsAsText","step","starsUsdWithdrawRateX1000","starsUsdWithdrawRate","configStarsPaidMessageCommissionPermille","starsPaidMessageCommissionPermille","starsPaidMessageAmountMax","DEFAULT_MAXIMUM_CHARGE_FOR_MESSAGES","isGroupChat","chargeForMessages","handleChargeForMessagesChange","handleUnlockWithPremium","MINIMUM_CHARGE_FOR_MESSAGES","percent","formatPercent","premiumSection","handleOpenPremiumModal","nonContactPeersPaidStars","selectNonContactPeersPaidStars","noPaidReactionsForUsersCount","noPaidMessages","shouldNewNonContactPeersRequirePremium","selectNewNoncontactPeersRequirePremium","shouldChargeForMessages","DEFAULT_CHARGE_FOR_MESSAGES","canLimitNewMessagesWithoutPremium","canChargeForMessages","starsPaidMessagesAvailable","canChangeForContactsAndPremium","setChargeForMessages","hasShownNotification","setHasShownNotification","prevSelectedValue","chatInvite","PrivacyGroupChats","actionText","phoneCall","PrivacyPhoneCall","PrivacyLockedOption","hidden","isCanCheckedInDisabled","privacyValue","updateGlobalPrivacySettingsWithDebounced","privacyDescription","PaidMessagePrice","itemSubtitle","PrivacyNoPaidMessages","renderSectionNoPaidMessagesForUsers","PremiumStatusItem","getSessionIcon","session","platform","device","deviceModel","systemVersion","getLocation","region","activeSessions","byHash","SettingsActiveSession","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","headerButton","iconDevice","dateActive","box","appVersion","ip","note","actionHeader","actionName","SettingsActiveSessions","orderedHashes","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","areButtonsInColumn","activeWebSessions","SettingsActiveWebsite","terminateWebAuthorization","renderingBot","browser","SettingsActiveWebsites","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","clearHelp","StickerSetCard","handleCardClick","CHAT_HEIGHT_PX","STICKER_SIZE_GENERAL_SETTINGS","renderPreview","byKey","customEmojiSetIds","canPlayAnimatedEmojis","SettingsCustomEmoji","shouldSuggestCustomEmoji","stickerSettingsRef","handleStickerSetClick","handleSuggestCustomEmojiChange","customEmojiSets","SettingsDataStorage","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","autoLoadFileMaxSizeMb","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","renderContentSizeSlider","renderValue","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","LOCAL_SUPPORTED_DETECTION_LANGUAGES","SUPPORTED_LANGUAGES","doNotTranslate","SettingsDoNotTranslate","language","displayedOptions","setDisplayedOptions","displayedOptionList","currentLanguageOption","otherOptionList","prevLanguage","ManageUsernames","usernames","onEditUsername","toggleUsername","toggleChatUsername","sortUsernames","sortChatUsernames","usernameForConfirm","setUsernameForConfirm","usernameList","username","prevUsernameList","orderedUsernames","dragOrderUsernames","handleCopyUsername","handleUsernameClick","isEditable","closeConfirmUsernameDialog","handleUsernameToggle","usernameData","LINK_PREFIX_REGEX","runDebouncedForCheckUsername","UsernameInput","currentUsername","asLink","isUsernameAvailable","checkedUsername","checkUsername","checkPublicLink","setUsername","langPrefix","previousIsUsernameAvailable","renderingIsUsernameAvailable","isChecking","usernameSuccess","usernameError","MIN_UPDATE_USERNAME_LENGTH","MAX_USERNAME_LENGTH","USERNAME_REGEX","test","handleUsernameChange","newUsername","isUsernameValid","success","ERROR_FIRST_NAME_MISSING","editUsernameError","profileEdit","maxBioLength","currentFirstName","currentLastName","currentUserFullInfo","currentAvatarHash","getChatAvatarHash","currentBio","bio","SettingsEditProfile","loadCurrentUser","updateProfile","firstEditableUsername","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","editableUsername","setEditableUsername","currentAvatarBlobUrl","ProfileEditProgress","InProgress","isUsernameError","shouldRenderUsernamesManage","isSaveButtonShown","Complete","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","USERNAME_PURCHASE_ERROR","purchaseInfoLink","PURCHASE_USERNAME","renderPurchaseLink","shouldForceHttpTransport","shouldAllowHttpTransport","shouldCollectDebugLogs","shouldDebugExportedSenders","SettingsExperimental","requestWave","snapButtonRef","isSnapButtonAnimating","setIsSnapButtonAnimating","isAutoUpdateEnabled","setIsAutoUpdateEnabled","electron","getIsAutoUpdateEnabled","handleDownloadLog","file","File","getDebugLogs","DEBUG_LOG_FILENAME","URL","createObjectURL","handleIsAutoUpdateEnabledChange","handleRequestWave","startX","startY","handleRequestConfetti","handleSnap","animateSnap","Experimental","IS_WAVE_TRANSFORM_SUPPORTED","IS_SNAP_EFFECT_SUPPORTED","IS_ELECTRON","shouldUseSystemTheme","messageSendKeyCombo","messageTextSize","timeFormat","SettingsGeneral","isMobileDevice","timeFormatOptions","appearanceThemeOptions","keyboardSendOptions","handleMessageTextSizeChange","setAttribute","handleAppearanceThemeChange","newTheme","getSystemTheme","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleMessageSendComboChange","newCombo","isTrayIconEnabled","setIsTrayIconEnabled","getIsTrayIconEnabled","handleIsTrayIconEnabledChange","GeneralChatBackground","IS_WINDOWS","WallpaperTile","wallpaper","localMediaHash","isLoadingRef","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","loadedWallpapers","SettingsGeneralBackground","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","validatedFiles","validateFiles","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","GeneralChatBackgroundColor","handleResetToDefault","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","getAverageColor","getPatternColor","rgbColor","rgb2hex","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","rgb2hsb","hex2rgb","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hsb2rgb","hue","hueHex","rgb","w","h","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","SettingsHeader","editedFolderId","signOut","isSignOutDialogOpen","setIsSignOutDialogOpen","handleMultiClick","currentAmountRef","useMultiClick","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","handleSignOutMessage","forceInitApi","SettingsMenuButton","EditProfile","General","QuickReaction","DataStorage","Language","DoNotTranslate","Stickers","PrivacyPhoneNumber","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyGifts","PrivacyForwarding","PrivacyVoiceMessages","PrivacyMessages","PrivacyLastSeenAllowedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyBioAllowedContacts","PrivacyGroupChatsAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioDeniedContacts","PrivacyGroupChatsDeniedContacts","PrivacyPhoneNumberAllowedContacts","PrivacyBirthdayAllowedContacts","PrivacyGiftsAllowedContacts","PrivacyForwardingAllowedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyBirthdayDeniedContacts","PrivacyGiftsDeniedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PDeniedContacts","Performance","ActiveSessions","ActiveWebsites","PrivacyBlockedUsers","TwoFaDisabled","TwoFaEnabled","TwoFaNewPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaChangePasswordHint","TwoFaNewPasswordEmail","TwoFaRecoveryEmail","TwoFaNewPasswordEmailCode","TwoFaRecoveryEmailCode","TwoFaCongratulations","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","canTranslate","canTranslateChats","languages","SettingsLanguage","loadLanguages","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","canTranslateChatsEnabled","oldSetLanguage","currentLangCode","navigator","shortLangCode","substr","nativeName","handleShouldTranslateChange","handleShouldTranslateChatsChange","handleShouldTranslateChatsClick","doNotTranslateText","IS_TRANSLATION_SUPPORTED","handleDoNotSelectOpen","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","sessionCount","SettingsMain","openSupportChat","openGiftRecipientPicker","openStarsBalanceModal","isSupportDialogOpen","openSupportDialog","closeSupportDialog","isPreload","handleOpenSupport","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","isInSettings","languageInfo","formatStarsAmount","FAQ_URL","PRIVACY_URL","renderTextFilters","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","SettingsNotifications","notifyDefaults","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","areNotificationsSupported","checkIfNotificationsSupported","areOfflineNotificationsSupported","checkIfOfflinePushFailed","handleSettingsChange","peerType","setting","currentIsMuted","mutedUntil","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","groups","ANIMATION_LEVEL_OPTIONS","ANIMATION_LEVEL_CUSTOM_OPTIONS","PERFORMANCE_OPTIONS","IS_BACKDROP_BLUR_SUPPORTED","performanceSettings","selectPerformanceSettings","updatePerformanceSettings","sectionExpandedStates","setSectionExpandedStates","sectionCheckedStates","animationLevelState","areDeepEqual","INITIAL_PERFORMANCE_STATE_MAX","ANIMATION_LEVEL_MAX","INITIAL_PERFORMANCE_STATE_MIN","ANIMATION_LEVEL_MIN","INITIAL_PERFORMANCE_STATE_MID","ANIMATION_LEVEL_MED","ANIMATION_LEVEL_CUSTOM","animationLevelOptions","handleToggleSection","sectionIndex","handleAnimationLevelChange","newLevel","performance","animationLevel","handlePropertyGroupChange","perfomanceSection","sectionName","newSettings","handlePropertyChange","hasPassword","isSensitiveEnabled","canChangeSensitive","shouldArchiveAndMuteNewNonContact","accountDaysTtl","hasPasscode","canDisplayChatInTitle","isCurrentUserFrozen","blockedCount","webAuthCount","canDisplayAutoarchiveSetting","canSetPasscode","selectCanSetPasscode","SettingsPrivacy","openDeleteAccountModal","loadPrivacySettings","loadBlockedUsers","loadContentSettings","updateContentSettings","loadGlobalPrivacySettings","loadWebAuthorizations","loadAccountDaysTtl","handleArchiveAndMuteChange","handleChatInTitleChange","handleUpdateContentSettings","handleOpenDeleteAccountModal","dayOption","getVisibilityValue","shouldAllowPremium","botsPrivacy","isVisibilityEverybody","shouldShowBotsString","blockCount","blockChatIds","allowCount","allowChatIds","total","exceptionString","conjunction","lastSeen","profilePhoto","birthday","forwards","allowDisabledClick","voiceMessages","blockedIds","localContactIds","userSearch","localUserIds","BlockUserModal","setUserSearchQuery","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","chatsByIds","usersByIds","SettingsPrivacyBlockedUsers","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","blockedUsernamesById","mainUsername","getMainUsername","userMainUsername","renderContact","getPrivacyKey","PrivacyPhoneP2P","PrivacyAddByPhone","disallowedGifts","SettingsAcceptedGift","handleOpenTelegramPremiumModal","handleLimitedEditionChange","shouldDisallowLimitedStarGifts","handleUnlimitedEditionChange","shouldDisallowUnlimitedStarGifts","handleUniqueChange","shouldDisallowUniqueStarGifts","handlePremiumSubscriptionChange","shouldDisallowPremiumGifts","selectShouldHideReadMarks","SettingsPrivacyLastSeen","canShowHideReadTime","handleChangeShouldHideReadMarks","SettingsPrivacyPublicProfilePhoto","hasCurrentUserFullInfo","currentUserFallbackPhoto","loadFullUser","uploadProfilePhoto","isDeleteFallbackPhotoModalOpen","openDeleteFallbackPhotoModal","closeDeleteFallbackPhotoModal","handleSelectFile","isFallback","handleConfirmDelete","handleOpenFileSelector","click","SelectAvatar","PrivacySubsection","isPremiumRequired","visibilityOptions","hasNobody","primaryExceptionLists","shouldShowDenied","shouldShowAllowed","headerText","prepareSubtitle","userIdsCount","chatIdsCount","isAllowBots","userCountString","chatCountString","allowedString","blockString","allowedContactsScreen","deniedContactsScreen","primaryPrivacy","secondaryPrivacy","shouldDisplayGiftsButton","addByPhone","phoneP2P","SettingsPrivacyVisibility","handleShowGiftIconInChats","secondaryScreen","PREMIUM_CATEGORY","CUSTOM_PEER_PREMIUM","getCurrentPrivacySettings","SettingsPrivacyVisibilityExceptionList","isAllowList","withPremiumCategory","withMiniAppsCategory","usersOnly","setPrivacySettings","customPeerBots","isCustomPeer","avatarIcon","isAvatarSquare","peerColorId","miniAppsCategory","selectedContactIds","selectedCategoryTypes","newSelectedCategoryTypes","setNewSelectedCategoryTypes","SERVICE_NOTIFICATIONS_USER_ID","filteredChats","handleSelectedCategoriesChange","updatedIds","isPremiumAllowed","config","selectedReaction","defaultReaction","SettingsQuickReaction","setDefaultReaction","emoticon","addedSetIds","SettingsStickers","shouldSuggestStickers","shouldUpdateStickerSetOrder","handleSuggestStickerSetOrderChange","handleSuggestStickersChange","stickerSets","SettingsTwoFaCongratulations","recoveryEmail","animatedEmoji","selectAnimatedEmoji","codeLength","waitingEmailCodeLength","SettingsTwoFaEmailCode","focusDelayTimeoutMs","setValue","handleInputChange","AnimatedIconFromSticker","SettingsTwoFaEnabled","SettingsTwoFaSkippableForm","shouldConfirm","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleSkip","handleSkipConfirm","SettingsTwoFaStart","SettingsTwoFa","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleNewPasswordHint","handleNewPasswordEmail","handleChangePasswordConfirm","handleChangePasswordHint","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","SettingsTwoFaPassword","TRANSITION_RENDER_COUNT","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_BIO_SCREENS","PRIVACY_BIRTHDAY_SCREENS","PRIVACY_GIFTS_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_VOICE_MESSAGES_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","PRIVACY_MESSAGES_SCREENS","Settings","foldersState","foldersDispatch","shouldSkipTransition","closeShareChatFolderModal","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","useMarkScrolled","forceReturnToChatList","isFromSettings","renderCurrentSectionContent","isScreenActive","activeScreen","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","Main","SettingsGeneralBackgroundColor","SettingsPerformance","LAYERS_ANIMATION_NAME","shouldWrap","withSwipeControl","_isFrom","_currentKey","userStatusesById","ContactList","openNewContactDialog","isSearching","NewChatStep1","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","foundContactIds","canBeInvitedToGroup","handleNextStep","creationProgress","creationError","chatCreation","maxGroupSize","NewChatStep2","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","ChatCreationProgress","memberFirstNames","generatedChatName","handleTitleChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","NewChat","openLeftColumnContent","newChatMemberIds","setNewChatMemberIds","contentKey","NewChannelStep2","NewGroupStep2","changeSelectedMemberIdsHandler","isSelection","isStepActive","NewChannelStep1","NewGroupStep1","ArchivedChats","isForumPanelOpen","archiveSettings","isStoryRibbonShown","onTopicSearch","updateArchiveSettings","handleDisplayArchiveInChats","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","shouldRenderTitle","titleClassNames","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelVisible","shouldRenderStoryRibbon","storyRibbonClassNames","isStoryRibbonClosing","StoryToggler","canShow","folderType","isMainList","ForumPanel","onOpenAnimationStart","folderOrderedIds","editChatFolders","initialSelectedFolderIds","selectedFolderIds","setSelectedFolderIds","idsToRemove","idsToAdd","MuteDuration","muteUntilOption","setMuteUntilOption","Forever","updateChatMutedState","updateTopicMutedState","muteForOptions","OneHour","FourHours","EightHours","OneDay","ThreeDays","fromSticker","stickerSetShortName","sendOptions","getAllowedAttachmentOptions","threadInfo","selectThreadInfo","isMessageThread","isCommentsInfo","fromChannelId","canSendStickers","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","StickerSetModal","prevStickerSet","renderingStickerSet","isAdded","requestCalendar","calendar","useSchedule","isScheduleRequested","isPreloadedGlobally","scheduledAt","handleCopyLink","suffix","renderHeader","EMOJI_SIZE_MODAL","STICKER_SIZE_MODAL","renderButtonText","CustomEmojiSetsModal","customEmojiModalRef","prevCustomEmojiSets","renderingCustomEmojiSets","handleSetClick","sets","teactFastList","customEmojiSet","setCard","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","isMainThread","currentChatId","currentThreadId","canReportChat","canGift","selectCanGift","canCreateTopic","isUserRightBanned","canEditTopic","getCanManageTopic","canManage","selectCanManage","selectCanTranslateChat","isTranslationDisabled","savedDialog","getIsSavedDialog","isTopic","isForumAsMessages","canDeleteChat","getCanDeleteChat","botCommands","commands","botPrivacyPolicyUrl","privacyPolicyUrl","isChatInfoShown","isRightColumnShown","selectIsRightColumnShown","isBot","HeaderMenuContainer","withExtraActions","withForumActions","canStartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canViewMonetization","canViewBoosts","pendingJoinRequests","canLeave","canEnterVoiceChat","canCreateVoiceChat","canShowBoostModal","channelMonoforumId","onJoinRequestsClick","onSubscribeChannel","onSearchClick","onAsMessagesClick","enterMessageSelectMode","sendBotCommand","restartBot","requestMasterAndJoinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","openFrozenAccountModal","requestMasterAndRequestCall","toggleStatistics","openMonetizationStatistics","openBoostStatistics","openGiftModal","openThreadWithInfo","openCreateTopicPanel","openEditTopicPanel","toggleManagement","togglePeerTranslations","setViewForumAsMessages","openBoostModal","setIsMenuOpen","shouldCloseFast","setShouldCloseFast","setIsDeleteModalOpen","setIsMuteModalOpen","isViewGroupInfoShown","areAllGiftsDisallowed","closeMenu","handleViewGroupInfo","handleStartBot","command","handleRestartBot","handleUnmuteClick","handleMuteClick","handleCreateTopicClick","handleEditClick","handleEditTopicClick","handleViewAsTopicsClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleGiftClick","forUserId","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleStatisticsClick","handleMonetizationClick","handleBoostClick","handleEnableTranslations","handleSelectMessages","handleOpenAsMessages","handleBlock","handleUnblock","handleSendChannelMessage","botButtons","commandButtons","cmd","hasPrivacyCommand","deleteTitle","MenuSeparator","DeleteChatModal","isSavedDialog","MiddleSearchResult","senderPeer","messageChat","shouldShowChat","hiddenForwardTitle","hiddenUserName","senderName","getMessageSenderName","topRow","LastMessageMeta","meta","MessageSummary","truncateLength","CHANNELS_PEER","titleKey","RESULT_ITEM_CLASS_NAME","runDebouncedForSearch","requestedQuery","savedTag","fetchingQuery","isHashtag","selectCurrentMiddleSearch","lastSearchQuery","savedTags","savedReactionTags","monoforumChat","isHistoryCalendarOpen","isHashtagQuery","searchType","MiddleSearch","updateMiddleSearch","resetMiddleSearch","performMiddleSearch","closeMiddleSearch","openHistoryCalendar","loadSavedReactionTags","shouldCancelSearchRef","focusedIndex","setFocusedIndex","canFocusNewer","canFocusOlder","isFullyHidden","setIsFullyHidden","hiddenTimerRef","maybeLongPressActiveRef","isFocused","markFocused","markBlurred","isViewAsList","setIsViewAsList","refs","handleClickOutside","useClickOutside","hasResultsContainer","isOnlyHash","areResultsEmpty","hasResultsDropdown","hasQueryData","hasNavigationButtons","focusInput","blurInput","blur","visualViewport","mainEl","pageTop","requestNextMutation","prevIsCalendarOpen","savedTagsArray","hasSavedTags","areSavedTagsDisabled","handleQueryChange","newQuery","removeListeners","fastRaf","viewportResults","searchResultKey","originalSender","ANONYMOUS_USER_ID","selectForwardedSender","handleMessageClick","getSearchResultKey","handleTriggerViewStyle","foundResult","updateSearchParams","activateSearchTag","tag","removeSearchSavedTag","handleDeleteTag","handleChangeSearchType","handleFocusOlder","newFocusIndex","handleFocusNewer","renderTypeTag","isForTag","selectedType","renderDropdown","dropdown","dropdownHidden","separator","wrap","isChosen","SavedTagButton","withCount","searchTypes","teactOrderKey","focused","mobile","withDropdown","adaptSearchBorders","canClose","resultsItemSelector","hasUpButton","hasDownButton","onStartBackspace","withBackIcon","onUpClick","onDownClick","searchTags","savedSearchTag","icons","getDayStartAt","counter","viewStyle","mobileNavigation","navigationButton","navigationDisabled","recent","favorite","effect","chatStickerSetId","effectStickers","effectEmojis","recentStickers","selectShouldLoopStickers","StickerPicker","isForEffects","loadRecentStickers","addRecentSticker","unfaveSticker","faveSticker","removeRecentSticker","sendMessageAction","useSendMessageAction","effectSets","existingAddedSetIds","shouldRenderContents","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleMouseMove","handleRemoveRecentSticker","CHAT_STICKER_SET_ID","maxUniqueReactions","enabledReactions","reactionsLimit","ReactionPickerLimited","isTouchScreen","currentReactions","shouldUseCurrentReactions","allAvailableReactions","reactionsToSort","sortReactions","allowed","pickerHeight","pickerWidth","gapWidth","itemsInRow","pickerMaxHeight","REACTION_SELECTOR_WIDTH","availableEffectById","storyPeerId","sendAsMessage","areSomeReactionsAllowed","areAllReactionsAllowed","areCustomAllowed","shouldUseFullPicker","isForbidden","ReactionPicker","toggleReaction","closeReactionPicker","saveEffectInDraft","requestEffectInComposer","addLocalPaidReaction","openPaidReactionModal","renderedMessageId","renderedChatId","renderedStoryPeerId","renderedStoryId","storedPosition","renderingPosition","isDense","deltaX","FULL_PICKER_SHIFT_DELTA","handleToggleCustomReaction","shouldAddToRecent","handleToggleReaction","handleReactionContextMenu","handleStoryReactionSelect","customEmojiMessage","parseHtmlAsFormattedText","buildCustomEmojiHtml","isReaction","availableEffects","effectId","effectStickerId","chosenOrder","backdropExcludedSelector","div","BLUR_CANVAS_SIZE","AttachmentModalItem","attachment","shouldDisplayCompressed","shouldDisplayGrouped","onToggleSpoiler","displayType","quick","SUPPORTED_PHOTO_CONTENT_TYPES","mimeType","SUPPORTED_VIDEO_CONTENT_TYPES","getDisplayType","handleSpoilerClick","extension","getFileExtension","previewData","shouldSkipGrouping","shouldDisplaySpoiler","shouldSendAsSpoiler","shouldRenderOverlay","rootClassName","MediaSpoiler","isFullyVisible","isHorizontal","viewportY1","viewportY2","y2","findInViewport","selectorOrElements","shouldContainBottom","allElements","visibleIndexes","isFound","setTooltipItemVisible","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","handleArrowKey","handleItemSelect","altKey","metaKey","shiftKey","isSelectionOutOfRange","onUp","onDown","onTab","MentionTooltip","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","selectedMentionIndex","prevChatMembers","renderedChatMembers","ATTACHMENT_MODAL_INPUT_ID","recentEmojis","attachmentSettings","baseEmojiKeywords","emojiKeywords","BASE_EMOJI_KEYWORD_LANG","groupChatMembers","keywords","customEmojiForEmoji","forEmoji","captionLimit","AttachmentModal","attachments","getHtml","editingMessage","canShowCustomSendMenu","isForMessage","shouldForceCompression","shouldForceAsFile","isForCurrentMessageList","forceDarkTheme","onAttachmentsUpdate","onCaptionUpdate","onSend","onFileAppend","onClear","onSendSilent","onSendScheduled","onRemoveSymbol","onEmojiSelect","canSchedule","onSendWhenOnline","svgRef","addRecentCustomEmoji","addRecentEmoji","updateAttachmentSettings","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isEditing","groupedId","notEditingFile","getAttachmentMediaType","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","shouldSendCompressed","shouldCompress","isSendingCompressed","shouldSendGrouped","setShouldSendGrouped","isInvertedMedia","shouldSendInHighQuality","setShouldSendInHighQuality","renderingShouldSendInHighQuality","setRenderingShouldSendInHighQuality","handleAttachmentsScroll","areAttachmentsNotScrolled","areAttachmentsScrolledToBottom","handleCaptionScroll","isCaptionNotScrolled","renderingIsOpen","isHovered","markHovered","unmarkHovered","timerRef","hasMedia","hasOnlyMedia","audio","hasSpoiler","isEverySpoiler","getSelectionRange","useGetSelectionRange","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","filteredEmojis","filteredCustomEmojis","insertEmoji","closeEmojiTooltip","useEmojiTooltip","isCustomEmojiTooltipOpen","insertCustomEmoji","closeCustomEmojiTooltip","useCustomEmojiTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","setIsInvertedMedia","removeAllSelections","isCustomSendMenuOpen","sendAttachments","shouldSendScheduled","handleSendSilent","handleSendClick","handleScheduleClick","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","handleDocumentSelect","handleEnableSpoilers","handleToggleShouldCompress","handleToggleQuality","handleDisableSpoilers","handleToggleSpoiler","svg","baseVal","leftChars","leftCharsBeforeLimit","html","innerHTML","fixImageContent","br","replaceWith","textContent","isQuickGallery","areAllPhotos","areAllVideos","areAllAudios","hasAnyPhoto","SUPPORTED_AUDIO_CONTENT_TYPES","hasAnySpoilerable","isMultiple","canInvertMedia","attachmentsLength","isBottomDividerShown","buttonSendCaption","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","rx","uniqueId","EmojiTooltip","CustomEmojiTooltip","SymbolMenuButton","isAttachmentModal","canSendPlainText","MessageInput","isAttachmentModalInput","customEmojiPrefix","canAutoFocus","shouldSuppressFocus","onSuppressedFocus","CustomSendMenu","onSendSchedule","PollModal","isQuiz","shouldBeAnonymous","maxOptionsCount","questionInputRef","optionsListRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","handleSolutionChange","addNewOption","newOptions","behavior","handleCreate","isNoCorrectOptionError","answers","correct","questionTrimmed","substring","optionsTrimmed","o","summary","multipleChoice","quiz","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","EmojiButton","native","IS_PACKAGED_ELECTRON","BASE_URL","image","LOADED_EMOJIS","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","EMOJI_MARGIN","EMOJI_VERTICAL_MARGIN","EMOJI_VERTICAL_MARGIN_MOBILE","MOBILE_CONTAINER_PADDING","EmojiCategory","category","allEmojis","emojisPerRow","displayedEmoji","ICONS_BY_CATEGORY","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","EmojiPicker","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","MENU_TRANSITION_DURATION","allCategories","themeCategories","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","containerClassName","GifButton","gif","onUnsaveClick","hasVideoPreview","getVideoMediaHash","withThumb","videoHash","getVideoPreviewMediaHash","videoData","shouldRenderVideo","isVideoReady","handleUnsaveClick","handleContextDelete","preload","gifs","saved","GifPicker","canSendGifs","onGifSelect","loadSavedGifs","saveGif","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","Emoji","GIFs","SYMBOL_MENU_TAB_ICONS","SymbolMenuFooter","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","isBackgroundTranslucent","SymbolMenu","isMessageComposer","menuPositionOptions","setRecentEmojis","setRecentCustomEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","recentEmojisRef","recentCustomEmojisRef","handleCustomEmojiSelect","canUpdateStickerSetsOrder","isFrom","mobileClassName","onMouseEnter","ChatCommand","withAvatar","freezeWhenClosed","ChatCommandTooltip","quickReplies","quickReplyMessages","self","sendQuickReply","handleSendCommand","handleSendQuickReply","quickReplyId","quickRepliesWithDescription","reply","topMessageId","shortcut","handleKeyboardSelect","selectedCommandIndex","isEmpty","BotCommandMenu","botCommand","StickerTooltip","prevStickers","displayedStickers","clearCustomEmojiForEmoji","ce","emojiButton","COMPOSER_EMOJI_SIZE_PICKER","isOpenToBottom","onRemoveEffect","withEffects","hasCurrentEffect","effectReactions","onToggleReaction","isInSavedMessages","isInStoryViewer","openEffectPicker","displayScheduleUntilOnline","setDisplayScheduleUntilOnline","areItemsHidden","hideItems","showItems","markIsReady","unmarkIsReady","handleOpenMessageEffectsPicker","ReactionSelector","onShowMore","TEXT_FORMAT_BY_TAG_NAME","B","STRONG","I","EM","U","DEL","CODE","SPAN","fragmentEl","TextFormatter","anchorPosition","selectedRange","setSelectedRange","linkUrlInputRef","isLinkControlOpen","openLinkControl","closeLinkControl","setLinkUrl","isEditingLink","setIsEditingLink","inputClassName","setInputClassName","selectedTextFormats","setSelectedTextFormats","useVirtualBackdrop","selectedFormats","parentElement","commonAncestorContainer","EDITABLE_INPUT_ID","textFormat","tagName","restoreSelection","selection","getSelection","removeAllRanges","addRange","updateSelectedRange","getRangeAt","getSelectedText","shouldDropCustomEmoji","replaceChildren","cloneContents","INPUT_CUSTOM_EMOJI_SELECTOR","getAttribute","getSelectedElement","updateInputStyles","scrollWidth","getFormatButtonClassName","fKey","monospace","strikethrough","handleSpoilerText","spoiler","entityType","ApiMessageEntityTypes","Spoiler","execCommand","handleBoldText","handleItalicText","italic","handleUnderlineText","underline","handleStrikethroughText","handleMonospaceText","handleLinkUrlConfirm","formattedLinkUrl","encodeURI","u","m","p","getKeyFromEvent","linkUrlConfirmClassName","autoComplete","CustomEmojiButton","listEmojis","handleSelectEmoji","handleCustomEmojiClick","selectedIndex","prevSelectedIndex","setItemVisible","BaseResult","thumbnailDataUrl","getWebDocumentHash","decoding","ArticleResult","inlineResult","webThumbnail","GifResult","_gif","MediaResult","isForGallery","thumbnailBlobUrl","getPhotoMediaHash","StickerResult","STICKER_SIZE_INLINE_BOT_RESULT","InlineBotTooltip","isGallery","inlineBotResults","switchPm","switchWebview","onSelectResult","startBot","requestSimpleWebView","renderedIsGallery","handleSendPm","param","handleOpenWebview","isFromSwitchWebView","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","SendAsMenu","selectedSendAsId","sendAsPeerIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","avatarClassName","noFake","membersCount","StickerSetResult","areStickersLoaded","premiumStickerIds","coverStickerIds","covers","otherStickers","handleStickerClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","openedStickerSetShortName","StickerSearch","loadFeaturedStickers","selectCurrentGifSearch","canPostInChat","GifSearch","searchMoreGifs","setGifSearchQuery","handleGifClick","handleSearchMoreGifs","hasResults","postStatistic","StatisticsRecentMessage","toggleMessageStatistics","StatisticsRecentPostMeta","withStorySolid","forceUnreadStorySolid","toggleStoryStatistics","imgBlobUrl","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","reactionsByEmotionGraph","storyInteractionsGraph","storyReactionsByEmotionGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","statistics","selectStatistics","dcId","statisticsDcId","messagesById","storiesById","selectPeerStories","Statistics","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","isPercentage","ensureLovelyChart","zoomToken","create","zoomOutLabel","StatisticsOverview","recentPosts","StatisticsRecentStory","StatisticsMessagePublicForward","openChatByUsername","GRAPH_TITLES","viewsGraph","reactionsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","loadMessagePublicForwards","publicForwards","publicForwardsData","STATISTICS_PUBLIC_FORWARDS_LIMIT","currentStory","loadStoryStatistics","loadStoryPublicForwards","StatisticsStoryPublicForward","answer","voters","offsets","pollResults","PollAnswerResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","ShowMoreButton","renderViewMoreButton","poll","selectPollFromMessage","PollResults","resultsByOption","buildCollectionByKey","ICON_SIZE","createTopicPanel","CreateTopic","createTopic","iconColorIndex","setIconColorIndex","iconEmojiId","setIconEmojiId","handleIconClick","getTopicColors","handleCreateTopic","iconColor","dummyTopic","noLoopLimit","editTopicPanel","EditTopic","editTopic","isGeneral","GENERAL_TOPIC_ID","newTitle","handleEditTopic","ERROR_NAME_MISSING","management","ManageBot","setBotInfo","uploadContactProfilePhoto","startBotFatherConversation","isFieldTouched","markFieldTouched","unmarkProfileTouched","isAvatarTouched","markAvatarTouched","unmarkAvatarTouched","currentName","setName","ManagementProgress","handleNameChange","trimmedName","handleChangeEditIntro","handleChangeEditCommands","handleChangeSettings","isSuggestRef","handleSelectAvatar","isSuggest","CHANNEL_TITLE_EMPTY","minLevelToToggleAutoTranslation","channelAutoTranslationLevelMin","hasAutoTranslation","chatBoostLevel","level","canToggleAutoTranslation","canChangeInfo","canInvite","exportedInvites","ManageChannel","onScreenSelect","updateChat","closeManagement","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","toggleAutoTranslation","currentTitle","currentAbout","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","hasAutoTranslationAvailable","handleAutoTranslationChange","isRevoked","adminsCount","removedUsersCount","kickedMembers","handleClickEditType","ManagementScreens","ChatPrivacyType","handleClickDiscussion","Discussion","handleClickReactions","Reactions","handleClickAdministrators","ChatAdministrators","handleClickInvites","Invites","handleClickRequests","JoinRequests","handleSetPhoto","handleAboutChange","handleUpdateChannel","trimmedTitle","trimmedAbout","handleClickSubscribers","ChannelSubscribers","handleRemovedUsersClick","ChannelRemovedUsers","handleDeleteChannel","chatReactionsDescription","enabledLength","totalLength","isChannelPublic","joinRequests","ManageChatAdministrators","onChatMemberSelect","toggleSignatures","areSignaturesEnabled","areSignaturesShown","areProfilesEnabled","areProfilesShown","canAddNewAdmins","canToggleSignatures","adminMembers","admins","isOwner","handleAdminMemberClick","promotedByUserId","ChatAdminRights","handleToggleSignatures","handleToggleProfiles","handleAddAdminClick","GroupAddAdmins","getMemberStatus","promotedByUser","selectManagement","maxPublicLinks","privateInviteLink","inviteLink","ManageChatPrivacyType","updatePublicLink","updatePrivateLink","toggleIsProtected","resetManagementError","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","isUsernameLostDialogOpen","openUsernameLostDialog","closeUsernameLostDialog","handleOptionChange","c","radioGroup","handleForwardingOptionChange","handleSave","handleMakeChannelPrivateConfirm","shouldDisableUsernames","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","chatMembers","RemoveGroupUserModal","loadMoreMembers","usersId","availableMemberIds","canDeleteMembers","removedMembers","ManageChatRemovedUsers","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","forDiscussionIds","linkedChat","ManageDiscussion","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","toggleJoinRequest","toggleJoinToSend","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","isJoinToSend","setIsJoinToSend","isJoinRequest","setIsJoinRequest","handleUnlinkGroupSessions","Initial","handleLinkGroupSessions","handleJoinToSendCheck","handleJoinRequestCheck","handleNewGroupClick","NewDiscussionGroup","DiscussionGroups","STICKER_SIZE_DISCUSSION_GROUPS","withPrimaryColor","linkedGroup","renderLinkGroupHeader","renderLinkGroupConfirmText","GROUP_TITLE_EMPTY","ALL_PERMISSIONS","TOTAL_PERMISSIONS_COUNT","limitReachedModal","hasLinkedChannel","isBasicGroup","canEditForum","isChannelsPremiumLimitReached","ManageGroup","togglePreHistoryHidden","deleteChat","toggleForum","isForumEnabled","setIsForumEnabled","isPublicGroup","isPreHistoryHiddenCheckboxRef","handleClickPermissions","GroupPermissions","handleUpdateGroup","handleClickMembers","GroupMembers","handleTogglePreHistory","isPreHistoryHidden","handleForumToggle","newIsForumEnabled","checkbox","enabledPermissionsCount","handleDeleteGroup","isForForum","isPromotedByCurrentUser","isFormFullyDisabled","defaultRights","adminRights","hasFullInfo","ManageGroupAdminRights","isNewAdmin","selectedUserId","updateChatAdmin","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedChatMember","selectedAdminMember","handleSavePermissions","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","postStories","editStories","deleteStories","banUsers","addAdmins","manageCall","anonymous","areParticipantsHidden","hiddenMembersMinCount","canHideParticipants","canAddMembers","globalUserIds","ManageGroupMembers","noAdmins","toggleParticipantsHidden","setNewChatMembersDialogState","deletingUserId","setDeletingUserId","adminIds","usePeerStoriesPolling","shouldUseSearchResults","listedIds","ChatNewAdminRights","handleDeleteMembersModalClose","handleToggleParticipantsHidden","handleNewMemberDialogOpen","newChatMembersProgress","NewChatMembersProgress","memberId","DeleteMemberModal","arePaidMessagesAvailable","groupPeersPaidStars","ManageGroupPermissions","updateChatDefaultBannedRights","updatePaidMessagesPrice","GroupRemovedUsers","handleAddExceptionClick","GroupUserPermissionsCreate","handleExceptionMemberClick","GroupUserPermissions","isPriceForMessagesChanged","markPriceForMessagesChanged","unmarkPriceForMessagesChanged","isPriceForMessagesOpen","setIsPriceForMessagesOpen","handleUpdatePaidMessagesPrice","handleUpdatePermissions","exceptionMembers","getMemberExceptions","getLangKeyForBannedRightKey","translatedString","handleChargeStarsForMessages","arePermissionsChanged","arePermissionsLoading","ManageGroupUserPermissions","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","handleBanFromGroup","viewMessages","ManageGroupUserPermissionsCreate","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","ManageInvite","editExportedChatInvite","exportChatInvite","setIsRequestNeeded","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","usageLimit","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","parseInt","handleSaveClick","formatFullDate","n","importers","requesters","ManageInviteInfo","loadChatInviteImporters","loadChatInviteRequesters","usage","adminId","renderImporters","importer","joinTime","isFromChatList","renderRequesters","requester","BULLET","inviteComparator","i1","i2","isPermanent","i1IsPermanent","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","ManageInvites","setEditingExportedInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","MILLISECONDS_IN_DAY","chatMainUsername","primaryInvite","primaryInviteLink","temporalInvites","revokeInvite","askToRevoke","handleCreateNewClick","EditInvite","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","InviteInfo","deleteInvite","askToDelete","copyLink","prepareUsageText","requested","formatCountdown","getInviteIconClass","prepareContextActions","editInvite","Invite","STICKER_SIZE_INVITES","JoinRequest","hideChatJoinRequest","createClassNameBuilder","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","handleUserClick","ManageJoinRequests","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","MAX_UNIQUE_REACTIONS","ManageReactions","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","localReactionsLimit","setLocalReactionsLimit","reactionsOptions","handleSaveReactions","availableActiveReactions","localAllowedReactions","enabledAllowedReactions","localReaction","enabledReaction","handleReactionsOptionChange","handleReactionChange","local","handleReactionsLimitChange","renderReactionsMaxCountValue","shouldShowReactionsLimit","isCenteredLayout","notPersonalPhoto","ManageUser","isResetPersonalPhotoDialogOpen","openResetPersonalPhotoDialog","closeResetPersonalPhotoDialog","isNotificationsEnabled","setIsNotificationsEnabled","handleNotificationChange","handleDeleteContact","handleSuggestPhoto","handleSetPersonalPhoto","handleResetPersonalAvatar","canSetPersonalPhoto","noEmojiStatus","withFullInfo","noPersonalPhoto","trimStart","discussionChannelId","managementType","selectCurrentManagementType","Management","GroupRecentActions","VISA","MASTERCARD1","MASTERCARD2","MIR","CardType","cards","Default","Visa","Mastercard","Mir","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","tipAmount","savedCredentialId","reducer","Checkout","invoice","shippingPrices","checkoutInfo","totalPrice","onAcceptTos","needAddress","hasShippingOptions","savedCredentials","isPaymentFormUrl","setPaymentStep","isInteractive","termsUrl","suggestedTipAmounts","maxTipAmount","paymentMethod","paymentProvider","shippingAddress","shippingMethod","photoUrl","useMediaTransition","handleTipsClick","tips","handlePaymentMethodClick","PaymentStep","SavedPayments","PaymentInfo","handleShippingAddressClick","ShippingInfo","handleShippingMethodClick","Shipping","checkoutPicture","forceAspectRatio","checkoutTitle","checkoutDescription","priceInfo","prices","renderPaymentItem","priceInfoItem","priceInfoItemTitle","tipsList","tip","tipsItem","tipsItem_active","shouldOmitFractions","invoiceInfo","renderCheckoutItem","provider","langStringSplit","renderTosLink","tosCheckbox","priceInfoItemMain","checkoutInfoItemInfoTitle","checkoutInfoItemInfoData","ConfirmPayment","noRedirect","onPaymentFormSubmit","messageKey","form","PasswordConfirm","onPasswordChange","clearPaymentError","cardName","onInputChange","useFocusAfterAnimation","animationDuration","CardInput","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","mirIconPath","getCardIcon","ExpiryInput","endsWith","formatCardExpiry","canSaveCredentials","needCardholderName","needCountry","needZip","selectCountryRef","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleCountryChange","handleBillingPostCodeChange","handleChangeSaveCredentials","Select","hasArrow","SavedPaymentCredentials","onNewCardClick","shippingOptions","handleShippingSelect","needEmail","needPhone","needName","phoneRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","DEFAULT_PROVIDER","DONATE_PROVIDER","SUPPORTED_PROVIDERS","confirmPaymentUrl","stripeCredentials","smartGlocalCredentials","temporaryPassword","isExtendedMedia","nativeParams","nativeProvider","providerName","isProviderError","smartGlocalToken","stripeId","passwordValidUntil","validUntil","PaymentModal","loadPasswordInfo","validateRequestedInfo","sendPaymentForm","sendCredentialsInfo","validatePaymentPassword","setSmartGlocalCardInfo","paymentState","paymentDispatch","twoFaPassword","setTwoFaPassword","prevStep","prevRequestId","canRenderFooter","setStep","nextStep","field","savedInfo","shippingAddressRest","shippingCountry","charAt","handleErrorModalClose","shippingOption","getShippingPrices","cur","getTotalPrice","cardTypeText","detectCardTypeText","findShippingOption","getCheckoutInfo","handleNewCardClick","handleClearPaymentError","sendForm","shippingOptionId","handlePaymentFormSubmit","credentials","validateRequest","requestInfo","getRequestInfo","sendCredentials","expiryMonth","expiryYear","zip","getCredentials","ConfirmPassword","shouldFillRequestedData","isEmailRequested","isPhoneRequested","isNameRequested","isShippingAddressRequested","isSubmitDisabled","getIsSubmitDisabled","isRecurring","cleanupOnlyKey","currentStep","isPasswordMissing","isEmailSentToProvider","isPhoneSentToProvider","renderModalContent","descriptionKey","renderError","optionId","receipt","ReceiptModal","prevReceipt","renderingReceipt","fullAddress","credentialsTitle","totalAmount","InviteViaLinkModal","sendInviteMessages","closeInviteViaLinkModal","missingUsers","setSelectedMemberIds","unselectableIds","selectableIds","requirePremiumIds","regularIds","isRequiringPremiumToMessage","invitableWithPremiumIds","isRequiringPremiumToInvite","isEveryPremiumBlocksPm","topListPeers","handleSendInviteLink","canSendInviteLink","inviteSectionText","premiumSectionText","hasPremiumSection","hasSelectableSection","lockedUnselectedSubtitle","OneTimeMediaModal","closeOneTimeMediaModal","handlePlayVoice","isOwn","isOwnMessage","closeBtnTitle","voice","OneTimeModal","RoundVideo","onStop","renderMedia","WebAppsCloseConfirmationModal","closeWebAppsCloseConfirmationModal","shouldSkipInFuture","setShouldSkipInFuture","shouldSkipConfirmation","handleSelectWithEnter","freezeUntilDate","freezeAppealUrl","botFreezeAppeal","botFreezeAppealId","botFreezeAppealUsername","FrozenAccountModal","closeFrozenAccountModal","handleAppeal","BannedDuck","botLink","avatarPeer","avatarWebPhoto","clickable","webPhoto","badge"],"sourceRoot":""}