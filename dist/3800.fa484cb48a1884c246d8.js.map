{"version":3,"file":"3800.fa484cb48a1884c246d8.js","mappings":"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","sources":["webpack://telegram-t/./node_modules/highlight.js/lib/languages/elixir.js"],"sourcesContent":["/*\nLanguage: Elixir\nAuthor: Josh Adams <josh@isotope11.com>\nDescription: language definition for Elixir source code files (.ex and .exs).  Based on ruby language support.\nCategory: functional\nWebsite: https://elixir-lang.org\n*/\n\n/** @type LanguageFn */\nfunction elixir(hljs) {\n  const regex = hljs.regex;\n  const ELIXIR_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9_.]*(!|\\\\?)?';\n  const ELIXIR_METHOD_RE = '[a-zA-Z_]\\\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\\\*\\\\*|[-/+%^&*~`|]|\\\\[\\\\]=?';\n  const KEYWORDS = [\n    \"after\",\n    \"alias\",\n    \"and\",\n    \"case\",\n    \"catch\",\n    \"cond\",\n    \"defstruct\",\n    \"defguard\",\n    \"do\",\n    \"else\",\n    \"end\",\n    \"fn\",\n    \"for\",\n    \"if\",\n    \"import\",\n    \"in\",\n    \"not\",\n    \"or\",\n    \"quote\",\n    \"raise\",\n    \"receive\",\n    \"require\",\n    \"reraise\",\n    \"rescue\",\n    \"try\",\n    \"unless\",\n    \"unquote\",\n    \"unquote_splicing\",\n    \"use\",\n    \"when\",\n    \"with|0\"\n  ];\n  const LITERALS = [\n    \"false\",\n    \"nil\",\n    \"true\"\n  ];\n  const KWS = {\n    $pattern: ELIXIR_IDENT_RE,\n    keyword: KEYWORDS,\n    literal: LITERALS\n  };\n  const SUBST = {\n    className: 'subst',\n    begin: /#\\{/,\n    end: /\\}/,\n    keywords: KWS\n  };\n  const NUMBER = {\n    className: 'number',\n    begin: '(\\\\b0o[0-7_]+)|(\\\\b0b[01_]+)|(\\\\b0x[0-9a-fA-F_]+)|(-?\\\\b[0-9][0-9_]*(\\\\.[0-9_]+([eE][-+]?[0-9]+)?)?)',\n    relevance: 0\n  };\n  // TODO: could be tightened\n  // https://elixir-lang.readthedocs.io/en/latest/intro/18.html\n  // but you also need to include closing delemeters in the escape list per\n  // individual sigil mode from what I can tell,\n  // ie: \\} might or might not be an escape depending on the sigil used\n  const ESCAPES_RE = /\\\\[\\s\\S]/;\n  // const ESCAPES_RE = /\\\\[\"'\\\\abdefnrstv0]/;\n  const BACKSLASH_ESCAPE = {\n    match: ESCAPES_RE,\n    scope: \"char.escape\",\n    relevance: 0\n  };\n  const SIGIL_DELIMITERS = '[/|([{<\"\\']';\n  const SIGIL_DELIMITER_MODES = [\n    {\n      begin: /\"/,\n      end: /\"/\n    },\n    {\n      begin: /'/,\n      end: /'/\n    },\n    {\n      begin: /\\//,\n      end: /\\//\n    },\n    {\n      begin: /\\|/,\n      end: /\\|/\n    },\n    {\n      begin: /\\(/,\n      end: /\\)/\n    },\n    {\n      begin: /\\[/,\n      end: /\\]/\n    },\n    {\n      begin: /\\{/,\n      end: /\\}/\n    },\n    {\n      begin: /</,\n      end: />/\n    }\n  ];\n  const escapeSigilEnd = (end) => {\n    return {\n      scope: \"char.escape\",\n      begin: regex.concat(/\\\\/, end),\n      relevance: 0\n    };\n  };\n  const LOWERCASE_SIGIL = {\n    className: 'string',\n    begin: '~[a-z]' + '(?=' + SIGIL_DELIMITERS + ')',\n    contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,\n      { contains: [\n        escapeSigilEnd(x.end),\n        BACKSLASH_ESCAPE,\n        SUBST\n      ] }\n    ))\n  };\n\n  const UPCASE_SIGIL = {\n    className: 'string',\n    begin: '~[A-Z]' + '(?=' + SIGIL_DELIMITERS + ')',\n    contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,\n      { contains: [ escapeSigilEnd(x.end) ] }\n    ))\n  };\n\n  const REGEX_SIGIL = {\n    className: 'regex',\n    variants: [\n      {\n        begin: '~r' + '(?=' + SIGIL_DELIMITERS + ')',\n        contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,\n          {\n            end: regex.concat(x.end, /[uismxfU]{0,7}/),\n            contains: [\n              escapeSigilEnd(x.end),\n              BACKSLASH_ESCAPE,\n              SUBST\n            ]\n          }\n        ))\n      },\n      {\n        begin: '~R' + '(?=' + SIGIL_DELIMITERS + ')',\n        contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,\n          {\n            end: regex.concat(x.end, /[uismxfU]{0,7}/),\n            contains: [ escapeSigilEnd(x.end) ]\n          })\n        )\n      }\n    ]\n  };\n\n  const STRING = {\n    className: 'string',\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      SUBST\n    ],\n    variants: [\n      {\n        begin: /\"\"\"/,\n        end: /\"\"\"/\n      },\n      {\n        begin: /'''/,\n        end: /'''/\n      },\n      {\n        begin: /~S\"\"\"/,\n        end: /\"\"\"/,\n        contains: [] // override default\n      },\n      {\n        begin: /~S\"/,\n        end: /\"/,\n        contains: [] // override default\n      },\n      {\n        begin: /~S'''/,\n        end: /'''/,\n        contains: [] // override default\n      },\n      {\n        begin: /~S'/,\n        end: /'/,\n        contains: [] // override default\n      },\n      {\n        begin: /'/,\n        end: /'/\n      },\n      {\n        begin: /\"/,\n        end: /\"/\n      }\n    ]\n  };\n  const FUNCTION = {\n    className: 'function',\n    beginKeywords: 'def defp defmacro defmacrop',\n    end: /\\B\\b/, // the mode is ended by the title\n    contains: [\n      hljs.inherit(hljs.TITLE_MODE, {\n        begin: ELIXIR_IDENT_RE,\n        endsParent: true\n      })\n    ]\n  };\n  const CLASS = hljs.inherit(FUNCTION, {\n    className: 'class',\n    beginKeywords: 'defimpl defmodule defprotocol defrecord',\n    end: /\\bdo\\b|$|;/\n  });\n  const ELIXIR_DEFAULT_CONTAINS = [\n    STRING,\n    REGEX_SIGIL,\n    UPCASE_SIGIL,\n    LOWERCASE_SIGIL,\n    hljs.HASH_COMMENT_MODE,\n    CLASS,\n    FUNCTION,\n    { begin: '::' },\n    {\n      className: 'symbol',\n      begin: ':(?![\\\\s:])',\n      contains: [\n        STRING,\n        { begin: ELIXIR_METHOD_RE }\n      ],\n      relevance: 0\n    },\n    {\n      className: 'symbol',\n      begin: ELIXIR_IDENT_RE + ':(?!:)',\n      relevance: 0\n    },\n    { // Usage of a module, struct, etc.\n      className: 'title.class',\n      begin: /(\\b[A-Z][a-zA-Z0-9_]+)/,\n      relevance: 0\n    },\n    NUMBER,\n    {\n      className: 'variable',\n      begin: '(\\\\$\\\\W)|((\\\\$|@@?)(\\\\w+))'\n    }\n    // -> has been removed, capnproto always uses this grammar construct\n  ];\n  SUBST.contains = ELIXIR_DEFAULT_CONTAINS;\n\n  return {\n    name: 'Elixir',\n    aliases: [\n      'ex',\n      'exs'\n    ],\n    keywords: KWS,\n    contains: ELIXIR_DEFAULT_CONTAINS\n  };\n}\n\nmodule.exports = elixir;\n"],"names":["module","exports","hljs","regex","ELIXIR_IDENT_RE","KWS","$pattern","keyword","literal","SUBST","className","begin","end","keywords","BACKSLASH_ESCAPE","match","scope","relevance","SIGIL_DELIMITERS","SIGIL_DELIMITER_MODES","escapeSigilEnd","concat","LOWERCASE_SIGIL","contains","map","x","inherit","UPCASE_SIGIL","REGEX_SIGIL","variants","STRING","FUNCTION","beginKeywords","TITLE_MODE","endsParent","CLASS","ELIXIR_DEFAULT_CONTAINS","HASH_COMMENT_MODE","name","aliases"],"sourceRoot":""}