{"version":3,"file":"5769.97d6ca3430fb7ae36e29.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.module.scss?16ed","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/middle/message/hooks/useMessageTranslation.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/primitives/LimitedMap.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessageSuggestedAvatar.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/helpers/webpageType.ts","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/middle/hooks/useAuthorWidth.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/lib/cleanDocsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/middle/message/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectSendAs, selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat, ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { omit, pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n  updateMessageTranslations,\n  clearMessageTranslation,\n  removeChatFromChatLists,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n  selectSendAs,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions, isActionMessage,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action)) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: tabState.activeEmojiInteractions?.length || 0,\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageLocalId: omit(global.fileUploads.byMessageLocalId, [localId.toString()]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const currentSendAs = selectSendAs(global, message.chatId);\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(peerId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (currentSendAs?.id === peerId || peerId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message) && !isActionMessage(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  replaceScheduledMessages,\n  replaceSettings,\n  replaceThreadParam,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateRequestedMessageTranslation,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectTranslationLanguage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPinnedIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectThreadOriginChat,\n  selectThreadTopMessageId,\n  selectUser,\n  selectUserFullInfo,\n  selectViewportIds,\n} from '../../selectors';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport {\n  getMessageOriginalId,\n  getUserFullName, isChatChannel,\n  isDeletedUser, isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport { translate } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  if (!messageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = messageList;\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  const params = {\n    ...payload,\n    chat,\n    currentThreadId: messageList.threadId,\n    replyingTo: replyingToId,\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        });\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          });\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft, shouldForce,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  draft.shouldForce = shouldForce;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly, shouldForce,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  const newDraft: ApiDraft | undefined = shouldForce ? { shouldForce, text: '' } : undefined;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n      });\n    })();\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        currentThreadId: toThreadId || MAIN_THREAD_ID,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const originChannelId = selectThreadOriginChat(global, chatId, threadId)?.id;\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId, originChannelId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, chatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId) || {};\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(threadId);\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingList! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  currentThreadId: number;\n  replyingToTopId?: number;\n  groupedId?: string;\n}) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  global = getGlobal();\n  if (params.currentThreadId === undefined) {\n    return;\n  }\n\n  if (!params.replyingTo && params.currentThreadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, params.currentThreadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && params.currentThreadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, params.currentThreadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    let fullInfo = selectUserFullInfo(global, chatId);\n    if (!fullInfo) {\n      const { accessHash } = user;\n      const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n      user = result?.user;\n      fullInfo = result?.fullInfo;\n    }\n\n    if (fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n      recentReplierIds: update.recentReplierIds,\n      lastMessageId: update.maxId,\n      lastReadInboxMessageId: update.readMaxId,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery, selectTabState } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        localChats, localUsers, globalChats, globalUsers,\n      } = result;\n\n      if (localChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n      }\n\n      if (localUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: localChats.map(({ id }) => id),\n          userIds: localUsers.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread, updateThreadInfo,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId, selectReplyingToId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n          replyingToId: selectReplyingToId(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        if (threadInfo?.originChannelId) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, threadInfo);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser, selectUserFullInfo,\n} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  if ((hasChangedAvatarHash || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto)\n    && user.photos?.length) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, profileId);\n  if (user && !fullInfo?.profilePhoto) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n\n    user = result.user;\n    fullInfo = result.fullInfo;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n  const fallbackPhoto = fullInfo?.fallbackPhoto;\n  const personalPhoto = fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState, selectBot,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser, selectThreadTopMessageId, selectUserFullInfo,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { translate } from '../../../util/langProvider';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedContact(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    botId = message.viaBotId || message.senderId;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n  const replyingToTopId = (chat.isForum || threadId !== MAIN_THREAD_ID)\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo: replyingToId || replyingToTopId,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockContact', bot.id, bot.accessHash);\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: translate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  if (botApp.isInactive && !selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = updateTabState(global, {\n    webApp: {\n      url,\n      botId,\n      buttonText: '',\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyingToTopId: threadId,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  isSameReaction, getUserReactions, isMessageLocal, getDocumentMediaHash,\n} from '../../helpers';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation), ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const reactions = newUserReactions.slice(-limit);\n  const tabState = selectTabState(global, tabId);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  global = addMessageReaction(global, message, reactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions,\n      shouldAddToRecent,\n    });\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {});\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: result.reactions,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    recentReactions: [],\n  };\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat, selectChatFullInfo } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { IS_ELECTRON } from '../../../config';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\nimport type {\n  GlobalState, ActionReturnType,\n} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  replaceTabThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage,\n  cancelMessageMediaDownload,\n  addActiveMessageMediaDownload,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n  selectTabState,\n  selectRequestedMessageTranslationLanguage,\n  selectPinnedIds,\n  selectRequestedChatTranslationLanguage,\n} from '../../selectors';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle, isChatChannel } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      const chat = selectChat(global, chatId);\n\n      lastMessageId = chat?.lastMessage?.id;\n    }\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, threadId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openChat({\n      id: chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return cancelMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  for (const message of messages) {\n    global = cancelMessageMediaDownload(global, message, tabId);\n  }\n\n  return global;\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  return addActiveMessageMediaDownload(global, message, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { IS_ELECTRON } from '../config';\nimport { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE, IS_ELECTRON,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsTrustedBot,\n  selectTabState,\n} from '../../selectors';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport { compact, unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\nimport * as langProvider from '../../../util/langProvider';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  if (IS_ELECTRON) {\n    return;\n  }\n\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsAppUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : PAGE_TITLE);\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: playbackRate || tabState.mediaViewer.playbackRate || global.mediaViewer.lastPlaybackRate,\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { SettingsScreens } from '../../../types';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import { addActionHandler } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (id) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId: id,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  leaveChat,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n  selectChatFullInfo,\n  selectTabState,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport {\n  deleteContact, replaceUserStatuses, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUserFullInfo } from '../../selectors';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          // TODO Do not display modal if premium is bought from another device\n          if (update.user.isPremium) actions.openPremiumModal({ isSuccess: true, tabId });\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(global, update.id);\n      } else {\n        return removeBlockedContact(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/windowEnvironment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nimport useLastCallback from './useLastCallback';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  const lastCallback = useLastCallback(callback);\n\n  useEffect(() => onBeforeUnload(lastCallback), [lastCallback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HAg4STRlxDV3frYuABYr\",\"particle\":\"HO3tML0GAC9vTH28baKB\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatus;\n  className?: string;\n  isLottie?: boolean;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useTimeout from '../../../hooks/useTimeout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../middle/message/CustomEmojiEffect';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  APP_NAME,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_ELECTRON,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_APP, IS_MAC_OS } from '../../../util/windowEnvironment';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\nimport { useFullscreenStatus } from '../../../hooks/useFullscreen';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport StatusButton from './StatusButton';\nimport Toggle from '../../ui/Toggle';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference' | 'archiveSettings'>\n  & Pick<TabState, 'canInstall'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  canInstall,\n  archiveSettings,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n    openUrl,\n    updatePerformanceSettings,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined);\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid')\n    : 'min';\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={WEBK_VERSION_URL}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  ), [\n    animationLevelValue, archivedUnreadChatsCount, canInstall, handleAnimationLevelChange, handleBugReportClick, lang,\n    handleChangelogClick, handleDarkModeToggle, handleOpenTipsChat, handleSelectSaved, handleSwitchToWebK,\n    onSelectArchived, onSelectContacts, onSelectSettings, theme, withOtherVersions, archiveSettings,\n  ]);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            chatOrUserId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            canClose\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      currentUserId, connectionState, isSyncing, archiveSettings, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite } from '../../../api/types';\nimport type { SettingsScreens, LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../../global/types';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  archiveSettings,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={hasArchivedChats && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_ELECTRON } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\n\nimport { IS_MAC_OS, IS_APP, LAYERS_ANIMATION_NAME } from '../../util/windowEnvironment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isUpdateAvailable={isUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n    };\n  },\n)(LeftColumn));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinnedMessageBorder\":\"II9Qj_b_XQlgwGAOoy7u\",\"pinned-message-border-wrapper-1\":\"QpNjYZM0KJrGrocs69__\",\"pinnedMessageBorderWrapper1\":\"QpNjYZM0KJrGrocs69__\",\"pinned-message-border-wrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinnedMessageBorderWrapper\":\"sNpxwL0ihB0aXnfphNmp\",\"pinned-message-border-mark\":\"YX_iyQuDtga6uKXRQqR0\",\"pinnedMessageBorderMark\":\"YX_iyQuDtga6uKXRQqR0\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useLayoutEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"TMOjo7XfD1ZiiuRtfpkm\",\"pinnedMessage\":\"uhn_g6FmUELuGJrCm45w\",\"messageText\":\"bSvmca5kaTIUh3yJBxnF\",\"loading\":\"d7XDT4Keip1KHh7mcCv9\",\"pinListIcon\":\"DusHAy2Lx0SlaPpVAb_o\",\"pinListIconHidden\":\"jSVbc8Hb7PjitJujB_dQ\",\"no-hover\":\"jeTsUEkDCkzGUVwy6lrL\",\"noHover\":\"jeTsUEkDCkzGUVwy6lrL\",\"messageTextTransition\":\"ugsKEK4Xb166oFMP8hHy\",\"withMedia\":\"FBCNFm307_rxATSHPSiN\",\"title\":\"q9_FnsHlndM1hZqZjxjM\",\"summary\":\"WRuyhyQK6mv28Mz8iK28\",\"inlineButton\":\"kXRuktM2s7UN91zOl0Tx\",\"pictogramTransition\":\"EK6juGhJwhsLLm4Aag2F\",\"pinnedThumb\":\"RFnmHP92f6CwfuR2Upaw\",\"pinnedThumbImage\":\"JfPOYkOcaMjS7Y5rsHZ4\",\"fade-in\":\"IkKnzordTRzWWtIbLHdD\",\"fadeIn\":\"IkKnzordTRzWWtIbLHdD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  isLoading?: boolean;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  isLoading, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler\n          && <img className={styles.pinnedThumbImage} src={srcUrl} width={width} height={height} alt=\"\" />}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}>\n          <div className={styles.title} dir=\"auto\">\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                lang={lang}\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\nimport useLastCallback from '../../hooks/useLastCallback';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash: accessHash! });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useDerivedState from '../../hooks/useDerivedState';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndexes: Signal<Record<string, number>>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndexes,\n  getLoadingPinnedId,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndexes = useDerivedState(getCurrentPinnedIndexes);\n  const currentPinnedIndex = currentPinnedIndexes[`${chatId}_${threadId}`] || 0;\n  const waitingForPinnedId = useDerivedState(getLoadingPinnedId);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const { handleClick: handleHeaderClick, handleMouseDown: handleHeaderMouseDown } = useFastClick(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (onFocusPinnedMessage(messageId)) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage), undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div\n          className=\"chat-info-wrapper\"\n          onClick={handleHeaderClick}\n          onMouseDown={handleHeaderMouseDown}\n        >\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          isLoading={waitingForPinnedId !== undefined}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n    let isReversed = false;\n\n    entries.forEach((entry) => {\n      const {\n        isIntersecting, target, boundingClientRect, rootBounds,\n      } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          if (rootBounds && boundingClientRect.bottom < rootBounds.top) {\n            isReversed = true;\n          }\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onPinnedIntersectionChange({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove, isReversed });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions, REM } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isOwnMessage,\n  getMessageVideo,\n  getMessageWebPageVideo,\n} from '../../../../global/helpers';\n\nconst SMALL_IMAGE_THRESHOLD = 12;\nconst MIN_MESSAGE_LENGTH_FOR_BLUR = 40;\nexport const MIN_MEDIA_WIDTH_WITH_TEXT = 20 * REM;\nconst MIN_MEDIA_WIDTH = SMALL_IMAGE_THRESHOLD * REM;\nexport const MIN_MEDIA_HEIGHT = 5 * REM;\n\nexport function getMinMediaWidth(text?: string, hasCommentButton?: boolean) {\n  return (text?.length ?? 0) > MIN_MESSAGE_LENGTH_FOR_BLUR || hasCommentButton\n    ? MIN_MEDIA_WIDTH_WITH_TEXT\n    : MIN_MEDIA_WIDTH;\n}\n\nexport function calculateMediaDimensions(\n  message: ApiMessage, asForwarded?: boolean, noAvatars?: boolean, isMobile?: boolean,\n) {\n  const isOwn = isOwnMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, asForwarded, isWebPagePhoto, noAvatars, isMobile)\n    : calculateVideoDimensions(video!, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const messageText = getMessageText(message);\n  const minMediaWidth = getMinMediaWidth(messageText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import { useLayoutEffect, useRef } from '../../../../lib/teact/teact';\nimport { requestForcedReflow, requestMeasure, requestMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport type { FocusDirection } from '../../../../types';\n\nimport animateScroll from '../../../../util/animateScroll';\n\n// This is used when the viewport was replaced.\nconst BOTTOM_FOCUS_OFFSET = 500;\nconst RELOCATED_FOCUS_OFFSET = 750;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n  isJustAdded?: boolean,\n) {\n  const isRelocatedRef = useRef(!isJustAdded);\n\n  useLayoutEffect(() => {\n    const isRelocated = isRelocatedRef.current;\n    isRelocatedRef.current = false;\n\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n      // `noFocusHighlight` is always called with “scroll-to-bottom” buttons\n      const isToBottom = noFocusHighlight;\n\n      const exec = () => animateScroll(\n        messagesContainer,\n        elementRef.current!,\n        isToBottom ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? (isToBottom ? BOTTOM_FOCUS_OFFSET : RELOCATED_FOCUS_OFFSET) : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n        true,\n      );\n\n      if (isRelocated) {\n        // We need this to override scroll setting from Message List layout effect\n        requestForcedReflow(exec);\n      } else {\n        requestMeasure(() => {\n          requestMutation(exec()!);\n        });\n      }\n    }\n  }, [\n    elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer,\n  ]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport type { Signal } from '../../../../util/signals';\n\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { ChatTranslatedMessages } from '../../../../global/types';\nimport { throttle } from '../../../../util/schedulers';\n\nconst MESSAGE_LIMIT_PER_REQUEST = 20;\nconst THROTTLE_DELAY = 500;\nconst PENDING_TRANSLATIONS = new Map<string, Map<string, number[]>>();\n\nexport default function useMessageTranslation(\n  chatTranslations: ChatTranslatedMessages | undefined,\n  chatId?: string,\n  messageId?: number,\n  requestedLanguageCode?: string,\n) {\n  const messageTranslation = requestedLanguageCode && messageId\n    ? chatTranslations?.byLangCode[requestedLanguageCode]?.[messageId] : undefined;\n\n  const { isPending, text } = messageTranslation || {};\n\n  useEffect(() => {\n    if (!chatId || !messageId) return;\n\n    if (!text && isPending === undefined && requestedLanguageCode) {\n      addPendingTranslation(chatId, messageId, requestedLanguageCode);\n    }\n  }, [chatId, text, isPending, messageId, requestedLanguageCode]);\n\n  if (!chatId || !messageId) {\n    return {\n      isPending: false,\n      translatedText: undefined,\n    };\n  }\n\n  return {\n    isPending,\n    translatedText: text,\n  };\n}\n\nconst throttledProcessPending = throttle(processPending, THROTTLE_DELAY);\n\nfunction processPending() {\n  const { translateMessages } = getActions();\n  let hasUnprocessed = false;\n  PENDING_TRANSLATIONS.forEach((chats, toLanguageCode) => {\n    chats.forEach((messageIds, chatId) => {\n      const messageIdsToTranslate = messageIds.slice(0, MESSAGE_LIMIT_PER_REQUEST);\n\n      if (messageIdsToTranslate.length < messageIds.length) {\n        hasUnprocessed = true;\n      }\n\n      translateMessages({ chatId, messageIds: messageIdsToTranslate, toLanguageCode });\n\n      removePendingTranslations(chatId, messageIdsToTranslate, toLanguageCode);\n    });\n  });\n\n  if (hasUnprocessed) {\n    throttledProcessPending();\n  }\n}\n\nfunction addPendingTranslation(\n  chatId: string,\n  messageId: number,\n  toLanguageCode: string,\n) {\n  const languageTranslations = PENDING_TRANSLATIONS.get(toLanguageCode) || new Map<string, number[]>();\n  const messageIds = languageTranslations.get(chatId) || [];\n\n  if (messageIds.includes(messageId)) {\n    throttledProcessPending();\n    return;\n  }\n\n  messageIds.push(messageId);\n  languageTranslations.set(chatId, messageIds);\n  PENDING_TRANSLATIONS.set(toLanguageCode, languageTranslations);\n\n  getActions().markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  throttledProcessPending();\n}\n\nfunction removePendingTranslations(\n  chatId: string,\n  messageIds: number[],\n  toLanguageCode: string,\n) {\n  const languageTranslations = PENDING_TRANSLATIONS.get(toLanguageCode);\n  if (!languageTranslations?.size) {\n    PENDING_TRANSLATIONS.delete(toLanguageCode);\n    return;\n  }\n\n  const oldMessageIds = languageTranslations.get(chatId);\n  if (!oldMessageIds?.length) {\n    languageTranslations.delete(chatId);\n    return;\n  }\n\n  const newMessageIds = oldMessageIds.filter((id) => !messageIds.includes(id));\n\n  if (!newMessageIds?.length) {\n    languageTranslations.delete(chatId);\n    if (!languageTranslations.size) {\n      PENDING_TRANSLATIONS.delete(toLanguageCode);\n    }\n    return;\n  }\n\n  languageTranslations.set(chatId, newMessageIds);\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\nimport { createConnector } from './PostMessageConnector';\nimport Deferred from './Deferred';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","/**\n * A Map that has a limited size. When the limit is reached, the oldest entry is removed.\n * Ignores last access time, only cares about insertion order.\n */\nexport default class LimitedMap<K, V> {\n  private map: Map<K, V>;\n\n  private insertionQueue: Set<K>;\n\n  constructor(private limit: number) {\n    this.map = new Map();\n    this.insertionQueue = new Set<K>();\n  }\n\n  public get(key: K): V | undefined {\n    return this.map.get(key);\n  }\n\n  public set(key: K, value: V): this {\n    if (this.map.size === this.limit) {\n      const keyToRemove = Array.from(this.insertionQueue).shift();\n      if (keyToRemove) {\n        this.map.delete(keyToRemove);\n        this.insertionQueue.delete(keyToRemove);\n      }\n    }\n\n    this.map.set(key, value);\n    this.insertionQueue.add(key);\n\n    return this;\n  }\n\n  public delete(key: K): boolean {\n    const result = this.map.delete(key);\n    if (result) {\n      this.insertionQueue.delete(key);\n    }\n    return result;\n  }\n\n  public clear(): void {\n    this.map.clear();\n    this.insertionQueue.clear();\n  }\n\n  public forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void {\n    this.map.forEach(callbackfn, thisArg);\n  }\n\n  public get size(): number {\n    return this.map.size;\n  }\n\n  public get [Symbol.toStringTag](): string {\n    return this.map[Symbol.toStringTag];\n  }\n\n  public [Symbol.iterator](): IterableIterator<[K, V]> {\n    return this.map[Symbol.iterator]();\n  }\n\n  public entries(): IterableIterator<[K, V]> {\n    return this.map.entries();\n  }\n\n  public keys(): IterableIterator<K> {\n    return this.map.keys();\n  }\n\n  public values(): IterableIterator<V> {\n    return this.map.values();\n  }\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\nimport { useEffect } from '../../../../lib/teact/teact';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default ContextMenuContainerAsync;\n","import React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getMessageMediaHash } from '../../global/helpers';\nimport * as mediaLoader from '../../util/mediaLoader';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Avatar from '../common/Avatar';\nimport CropModal from '../ui/CropModal';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ntype OwnProps = {\n  message: ApiMessage;\n  renderContent: () => TextPart | undefined;\n};\n\nconst ActionMessageSuggestedAvatar: FC<OwnProps> = ({\n  message,\n  renderContent,\n}) => {\n  const {\n    openMediaViewer, uploadProfilePhoto, showNotification,\n  } = getActions();\n\n  const { isOutgoing } = message;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n  const suggestedPhotoUrl = useMedia(getMessageMediaHash(message, 'full'));\n  const isVideo = message.content.action!.photo?.isVideo;\n\n  const showAvatarNotification = useLastCallback(() => {\n    showNotification({\n      title: lang('ApplyAvatarHintTitle'),\n      message: lang('ApplyAvatarHint'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  });\n\n  const handleSetSuggestedAvatar = useLastCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  });\n\n  const handleCloseCropModal = useLastCallback(() => {\n    setCropModalBlob(undefined);\n  });\n\n  const handleSetVideo = useLastCallback(async () => {\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const photo = message.content.action!.photo!;\n    const blobUrl = await mediaLoader.fetch(`videoAvatar${photo.id}?size=u`, ApiMediaFormat.BlobUrl);\n    const blob = await fetch(blobUrl).then((r) => r.blob());\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  });\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetch(suggestedPhotoUrl).then((r) => r.blob()));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        mediaId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <span className=\"action-message-suggested-avatar\" tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        photo={message.content.action!.photo}\n        loopIndefinitely\n        withVideo={isVideo}\n        size=\"jumbo\"\n      />\n      <span>{renderContent()}</span>\n\n      <span className=\"action-message-button\">{lang(isVideo ? 'ViewVideoAction' : 'ViewPhotoAction')}</span>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('SuggestedVideo')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        textParts={renderContent()}\n      />\n    </span>\n  );\n};\n\nexport default memo(ActionMessageSuggestedAvatar);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiSticker, ApiTopic, ApiUser,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectTabState,\n  selectTopicFromMessage,\n  selectUser,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\nimport ActionMessageSuggestedAvatar from './ActionMessageSuggestedAvatar';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId?: number;\n  messageListType?: MessageListType;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isJustAdded?: boolean;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n  onPinnedIntersectionChange?: PinnedIntersectionChangedCallback;\n};\n\ntype StateProps = {\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isJustAdded,\n  isLastInList,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  canPlayAnimatedEmojis,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onPinnedIntersectionChange,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight, isJustAdded);\n\n  useEffect(() => {\n    if (!message.isPinned) return undefined;\n\n    return () => {\n      onPinnedIntersectionChange?.({ viewportPinnedIdsToRemove: [message.id], isUnmount: true });\n    };\n  }, [onPinnedIntersectionChange, message.isPinned, message.id]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n  const isSuggestedAvatar = message.content.action?.type === 'suggestProfilePhoto' && message.content.action!.photo;\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const renderContent = useCallback(() => {\n    return renderActionMessageText(\n      lang,\n      message,\n      senderUser,\n      senderChat,\n      targetUsers,\n      targetMessage,\n      targetChatId,\n      topic,\n      { isEmbedded },\n      observeIntersectionForLoading,\n      observeIntersectionForPlaying,\n    );\n  }, [\n    isEmbedded, lang, message, observeIntersectionForLoading, observeIntersectionForPlaying,\n    senderChat, senderUser, targetChatId, targetMessage, targetUsers, topic,\n  ]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{renderContent()}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play={canPlayAnimatedEmojis}\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    (isGift || isSuggestedAvatar) && 'centered-action',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    !isGift && !isSuggestedAvatar && 'in-one-row',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      data-is-pinned={message.isPinned || undefined}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isSuggestedAvatar && <span className=\"action-message-content\">{renderContent()}</span>}\n      {isGift && renderGift()}\n      {isSuggestedAvatar && (\n        <ActionMessageSuggestedAvatar\n          message={message}\n          renderContent={renderContent}\n        />\n      )}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, threadId }): StateProps => {\n    const {\n      chatId, senderId, replyToMessageId, content,\n    } = message;\n\n    const userId = senderId;\n    const { targetUserIds, targetChatId } = content.action || {};\n    const targetMessageId = replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = threadId ? selectIsMessageFocused(global, message, threadId) : false;\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n    } = (isFocused && selectTabState(global).focusedMessage) || {};\n\n    const chat = selectChat(global, chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n      }),\n    };\n  },\n)(ActionMessage));\n","import React, { useRef } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\nimport type { ChatTranslatedMessages } from '../../global/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n  getMessageIsSpoiler,\n  isMessageTranslatable,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useMessageTranslation from '../middle/message/hooks/useMessageTranslation';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\nimport MediaSpoiler from './MediaSpoiler';\nimport Skeleton from '../ui/Skeleton';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  requestedChatTranslationLanguage?: string;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  chatTranslations,\n  requestedChatTranslationLanguage,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n  const isSpoiler = Boolean(message && getMessageIsSpoiler(message));\n\n  const shouldTranslate = message && isMessageTranslatable(message);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, message?.chatId, shouldTranslate ? message?.id : undefined, requestedChatTranslationLanguage,\n  );\n\n  const {\n    shouldRender: shouldRenderLoader,\n    transitionClassNames,\n  } = useShowTransition(isTranslationPending || (!message && !customText));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message && handleClick}\n      onMouseDown={message && handleMouseDown}\n    >\n      {shouldRenderLoader && <Skeleton className={buildClassName('embed-loading', transitionClassNames)} />}\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected, isSpoiler)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              translatedText={translatedText}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, undefined, lang.timeFormat);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon icon-reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <i className=\"icon icon-pinned-message message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getActions } from '../../../global';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {hasEffect && withEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport { IS_ELECTRON } from '../../../config';\n\nimport safePlay from '../../../util/safePlay';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../../util/windowEnvironment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nexport default function useBlurredMediaThumbRef(\n  message: ApiMessage,\n  isDisabled?: boolean | string,\n  forcedUri?: string,\n) {\n  const { isMobile } = useAppLayout();\n\n  const dataUri = forcedUri || getMessageMediaThumbDataUri(message);\n\n  return useCanvasBlur(\n    dataUri,\n    Boolean(isDisabled),\n    isMobile && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import React, { useRef, useState } from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions, MIN_MEDIA_HEIGHT } from './helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  forcedWidth?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  forcedWidth,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const withBlurredBackground = Boolean(forcedWidth);\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground);\n  const thumbClassNames = useMediaTransition(!noThumb);\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(photo.isSpoiler);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useLastCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  });\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, asForwarded, noAvatars, isMobile);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n    height < MIN_MEDIA_HEIGHT && 'fix-min-height',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n      <img\n        src={fullMediaData}\n        className={buildClassName('full-media', withBlurredBackground && 'with-blurred-bg')}\n        alt=\"\"\n        style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n        draggable={!isProtected}\n      />\n      {withThumb && (\n        <canvas ref={thumbRef} className={buildClassName('thumbnail', thumbClassNames)} />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton\n        && <i className={buildClassName('icon', 'icon-download', downloadButtonClassNames)} />}\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import React, { useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { MIN_MEDIA_HEIGHT } from './helpers/mediaDimensions';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  forcedWidth?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  forcedWidth,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(video.isSpoiler);\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(Boolean(canAutoPlay && !isSpoilerShown));\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'),\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const hasThumb = Boolean(thumbDataUri);\n  const withBlurredBackground = Boolean(forcedWidth);\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useLastCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  });\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const handleClick = useLastCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  });\n\n  const className = buildClassName(\n    'media-inner dark',\n    !isUploading && 'interactive',\n    height < MIN_MEDIA_HEIGHT && 'fix-min-height',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className={buildClassName('full-media', withBlurredBackground && 'with-blurred-bg')}\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n          style={forcedWidth ? `width: ${forcedWidth}px` : undefined}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames, withBlurredBackground && 'with-blurred-bg')}\n        alt=\"\"\n        style={forcedWidth ? `width: ${forcedWidth}px;` : undefined}\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon', 'icon-large-play', playButtonClassNames)} />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar\n        size=\"large\"\n        peer={user}\n        text={firstName || lastName}\n      />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    const user = selectUser(global, contact.userId);\n\n    return {\n      user,\n      phoneCodeList,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={buildClassName('icon', correctAnswer ? 'icon-check' : 'icon-close')} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import React, {\n  useEffect,\n  useLayoutEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { LangFn } from '../../../hooks/useLang';\nimport type {\n  ApiMessage, ApiPoll, ApiPollAnswer, ApiChat, ApiUser,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [closePeriod, summary]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n    return recentVoterIds ? recentVoterIds.reduce((result: (ApiChat | ApiUser)[], id) => {\n      const chat = chatsById[id];\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      } else if (chat) {\n        result.push(chat);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"micro\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { getWebpageButtonText } from './helpers/webpageType';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useLang from '../../../hooks/useLang';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Button from '../../ui/Button';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const { openTelegramLink } = getActions();\n  const webPage = getMessageWebPage(message);\n  const { isMobile } = useAppLayout();\n\n  const lang = useLang();\n\n  const handleMediaClick = useLastCallback(() => {\n    onMediaClick!();\n  });\n\n  const handleQuickButtonClick = useLastCallback(() => {\n    if (!webPage) return;\n    openTelegramLink({\n      url: webPage.url,\n    });\n  });\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n    type,\n  } = webPage;\n  const quickButtonLangKey = !inPreview ? getWebpageButtonText(type) : undefined;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message, undefined, undefined, isMobile);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n    quickButtonLangKey && 'with-quick-button',\n  );\n\n  function renderQuickButton(langKey: string) {\n    return (\n      <Button\n        className=\"WebPage--quick-button\"\n        size=\"tiny\"\n        color=\"translucent-bordered\"\n        onClick={handleQuickButtonClick}\n      >\n        {lang(langKey)}\n      </Button>\n    );\n  }\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      <div className=\"WebPage--content\">\n        {photo && !video && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersection}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoad}\n            size={isSquarePhoto ? 'pictogram' : 'inline'}\n            asForwarded={asForwarded}\n            nonInteractive={!isMediaInteractive}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onClick={isMediaInteractive ? handleMediaClick : undefined}\n            onCancelUpload={onCancelMediaTransfer}\n          />\n        )}\n        {isArticle && (\n          <div className=\"WebPage-text\">\n            <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n            {!inPreview && title && (\n              <p className=\"site-title\">{renderText(title)}</p>\n            )}\n            {truncatedDescription && (\n              <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n            )}\n          </div>\n        )}\n        {!inPreview && video && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersection!}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoad}\n            canAutoPlay={canAutoPlay}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            onClick={isMediaInteractive ? handleMediaClick : undefined}\n            onCancelUpload={onCancelMediaTransfer}\n          />\n        )}\n      </div>\n      {quickButtonLangKey && renderQuickButton(quickButtonLangKey)}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","// https://github.com/telegramdesktop/tdesktop/blob/3da787791f6d227f69b32bf4003bc6071d05e2ac/Telegram/SourceFiles/history/view/history_view_view_button.cpp#L51\nexport function getWebpageButtonText(type?: string) {\n  switch (type) {\n    case 'telegram_channel_request':\n    case 'telegram_megagroup_request':\n    case 'telegram_chat_request':\n      return 'lng_view_button_request_join';\n    case 'telegram_message':\n      return 'lng_view_button_message';\n    case 'telegram_bot':\n      return 'lng_view_button_bot';\n    case 'telegram_voicechat':\n      return 'lng_view_button_voice_chat';\n    case 'telegram_livestream':\n      return 'lng_view_button_voice_chat_channel';\n    case 'telegram_megagroup':\n    case 'telegram_chat':\n      return 'lng_view_button_group';\n    case 'telegram_channel':\n      return 'lng_view_button_channel';\n    case 'telegram_user':\n      return 'lng_view_button_user';\n    case 'telegram_botapp':\n      return 'lng_view_button_bot_app';\n    case 'telegram_chatlist':\n      return 'ViewChatList';\n    default:\n      return undefined;\n  }\n}\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport buildStyle from '../../../util/buildStyle';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(message, !withBlurredBackground, photoUrl);\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { useMemo, memo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds?: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useLastCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds?.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n    const isScheduled = album.mainMessage.isScheduled;\n\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds: isScheduled ? activeDownloads?.scheduledIds : activeDownloads?.ids,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useSignal from '../../../hooks/useSignal';\nimport { useThrottledSignal } from '../../../hooks/useAsyncResolvers';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  isDownloading?: boolean;\n};\n\nconst PROGRESS_CENTER = ROUND_VIDEO_DIMENSIONS_PX / 2;\nconst PROGRESS_MARGIN = 6;\nconst PROGRESS_CIRCUMFERENCE = (PROGRESS_CENTER - PROGRESS_MARGIN) * 2 * Math.PI;\nconst PROGRESS_THROTTLE = 16; // Min period needed for `playerEl.currentTime` to update\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const circleRef = useRef<SVGCircleElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState(false);\n\n  const [getProgress, setProgress] = useSignal(0);\n  const getThrottledProgress = useThrottledSignal(getProgress, PROGRESS_THROTTLE);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [setProgress, isActivated, getThrottledProgress]);\n\n  useLayoutEffect(() => {\n    if (!isActivated || !circleRef.current) {\n      return;\n    }\n\n    const strokeDashOffset = PROGRESS_CIRCUMFERENCE - getThrottledProgress() * PROGRESS_CIRCUMFERENCE;\n    circleRef.current.setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n  }, [isActivated, getThrottledProgress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useLastCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n  });\n\n  const capturePlaying = useLastCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  });\n\n  const handleTimeUpdate = useLastCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  });\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\">\n        {isActivated && (\n          <svg width={ROUND_VIDEO_DIMENSIONS_PX} height={ROUND_VIDEO_DIMENSIONS_PX}>\n            <circle\n              ref={circleRef}\n              cx={PROGRESS_CENTER}\n              cy={PROGRESS_CENTER}\n              r={PROGRESS_CENTER - PROGRESS_MARGIN}\n              className=\"progress-circle\"\n              transform={`rotate(-90, ${PROGRESS_CENTER}, ${PROGRESS_CENTER})`}\n              stroke-dasharray={PROGRESS_CIRCUMFERENCE}\n              stroke-dashoffset={PROGRESS_CIRCUMFERENCE}\n            />\n          </svg>\n        )}\n      </div>\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiThreadInfo,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmojiEffect from './CustomEmojiEffect';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  withEffects?: boolean;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n  withEffects,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const { customEmoji } = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(withEffects && activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useLastCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  });\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomEmojiEffect reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiChat, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\nimport AvatarList from '../../common/AvatarList';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  withEffects?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  withEffects,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats or users, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.peerId] || chatsById[recentReaction.peerId])\n      .filter(Boolean) as (ApiChat | ApiUser)[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useLastCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n        withEffects={withEffects}\n      />\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} className=\"counter\" />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n  withEffects?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n  withEffects,\n}) => {\n  const lang = useLang();\n\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n          withEffects={withEffects}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"canceled\":\"Q7dh9ssyXXCzatPRmIDv\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\nimport type {\n  ActiveEmojiInteraction,\n  ActiveReaction,\n  ChatTranslatedMessages,\n  MessageListType,\n} from '../../../global/types';\nimport type {\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiReaction,\n  ApiStickerSet,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiUser,\n  ApiUsername,\n} from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { FocusDirection, IAlbum, ISettings } from '../../../types';\nimport { AudioOrigin } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport type { PinnedIntersectionChangedCallback } from '../hooks/usePinnedMessage';\nimport type { Signal } from '../../../util/signals';\n\nimport { IS_ANDROID, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID, IS_ELECTRON } from '../../../config';\nimport {\n  selectAllowedMessageActions,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentTextSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsDownloading,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPerformanceSettingsValue,\n  selectReplySender,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport {\n  areReactionsEmpty,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageHtmlId,\n  getMessageLocation,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  hasMessageText,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatWithRepliesBot,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useAuthorWidth from '../hooks/useAuthorWidth';\nimport { dispatchHeavyAnimationEvent } from '../../../hooks/useHeavyAnimationCheck';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n    getIsMessageListReady: Signal<boolean>;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withReactionEffects?: boolean;\n  withStickerEffects?: boolean;\n  isConnected: boolean;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withReactionEffects,\n  withStickerEffects,\n  isConnected,\n  onPinnedIntersectionChange,\n  getIsMessageListReady,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuPosition,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const { transitionClassNames } = useShowTransition(\n    isShown || isJustAdded,\n    undefined,\n    noAppearanceAnimation && !isJustAdded,\n    false,\n  );\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  useEffect(() => {\n    if (!isPinned) return undefined;\n    const id = album ? album.mainMessage.id : messageId;\n\n    return () => {\n      onPinnedIntersectionChange({ viewportPinnedIdsToRemove: [id], isUnmount: true });\n    };\n  }, [album, isPinned, messageId, onPinnedIntersectionChange]);\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    Boolean(requestedChatTranslationLanguage),\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item allow-selection',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    isJustAdded && 'is-just-added',\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video || (location && location.type === 'geo')) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n\n  useFocusMessage(\n    ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, isJustAdded,\n  );\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  useAuthorWidth(ref, signature);\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    dispatchHeavyAnimationEvent(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      } else if (video) {\n        if (video.isRound) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, message, noAvatars, photo, sticker, text?.text, video,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        message={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    activeReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        withEffects={withReactionEffects}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            withEffect={withStickerEffects}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withStickerEffects && isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.views !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            maxWidth={reactionsMaxWidth}\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            withEffects={withReactionEffects}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nfunction MessageAppendix({ isOwn } : { isOwn: boolean }) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId, isPinned,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withReactionEffects: selectPerformanceSettingsValue(global, 'reactionEffects'),\n      withStickerEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      isConnected,\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n      }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n  isTranslatingChat?: boolean,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n    openChatLanguageModal,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { RefObject } from 'react';\nimport { useLayoutEffect } from '../../../lib/teact/teact';\nimport { requestForcedReflow } from '../../../lib/fasterdom/fasterdom';\n\nexport default function useAuthorWidth(\n  containerRef: RefObject<HTMLDivElement>,\n  signature?: string,\n) {\n  useLayoutEffect(() => {\n    if (!signature) return;\n\n    requestForcedReflow(() => {\n      const width = containerRef.current!.querySelector<HTMLDivElement>('.message-signature')?.offsetWidth;\n      if (!width) return undefined;\n\n      return () => {\n        containerRef.current!.style.setProperty('--meta-safe-author-width', `${width}px`);\n      };\n    });\n  }, [containerRef, signature]);\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  });\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.text.text,\n                entities: message.text.entities,\n              })}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiBotInfo } from '../../api/types';\n\nimport { DPR } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport {\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n} from '../../global/helpers';\nimport buildStyle from '../../util/buildStyle';\nimport buildClassName from '../../util/buildClassName';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const { width, height } = botInfoRealDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={botInfoRealDimensions && (\n            `width: ${botInfoRealDimensions.width}px`\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              src={botInfoPhotoUrl}\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              width={botInfoRealDimensions?.width}\n              height={botInfoRealDimensions?.height}\n            />\n          )}\n          {botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Lsq8MNpDNQOesVld_hE2\",\"bot-info\":\"QDlMH9oNVNDnHBMnbvhw\",\"botInfo\":\"QDlMH9oNVNDnHBMnbvhw\",\"bot-info-description\":\"qhxnNXJM8_CyuUQ0pxo7\",\"botInfoDescription\":\"qhxnNXJM8_CyuUQ0pxo7\",\"bot-info-title\":\"mdOWgfW0GwJTT3vqO5_M\",\"botInfoTitle\":\"mdOWgfW0GwJTT3vqO5_M\"};","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport type { Signal } from '../../util/signals';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport usePrevious from '../../hooks/usePrevious';\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n  onPinnedIntersectionChange,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsReady = useDerivedSignal(isReady);\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onPinnedIntersectionChange, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePrevious(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onPinnedIntersectionChange={onPinnedIntersectionChange}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\n\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\nimport { debounce } from '../../../util/schedulers';\nimport { isLocalMessageId } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = isLocalMessageId(messageIds[0]);\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback((selectedSticker: ApiSticker) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker, messageList: currentMessageList });\n  });\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, {\n  memo,\n  useEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { requestForcedReflow, forceMeasure, requestMeasure } from '../../lib/fasterdom/fasterdom';\n\nimport type { FC } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\nimport type {\n  ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\n\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport type { PinnedIntersectionChangedCallback } from './hooks/usePinnedMessage';\nimport { LoadMoreDirection } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectBot,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium,\n  selectLastScrollOffset,\n  selectThreadInfo,\n  selectTabState,\n  selectChatFullInfo,\n  selectPerformanceSettingsValue,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  isLocalMessageId,\n  getMessageHtmlId,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll from '../../util/resetScroll';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport { isBackgroundModeActive } from '../../hooks/useBackgroundMode';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport MessageListBotInfo from './MessageListBotInfo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onPinnedIntersectionChange: PinnedIntersectionChangedCallback;\n  getForceNextPinnedInHeader: Signal<boolean | undefined>;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  threadTopMessageId?: number;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  threadTopMessageId,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  onPinnedIntersectionChange,\n  getForceNextPinnedInHeader,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages = messageIds.map((id) => messagesById[id]).filter(Boolean);\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, orderRule), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments\n      || messagesById[id]?.views !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n      const forceNextPinnedInHeader = getForceNextPinnedInHeader() && !selectTabState(global).focusedMessage?.chatId;\n      if (forceNextPinnedInHeader) {\n        onPinnedIntersectionChange({ hasScrolled: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n          onPinnedIntersectionChange={onPinnedIntersectionChange}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = chat.topics?.[threadId];\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      threadTopMessageId,\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport animateScroll from '../../util/animateScroll';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useLastCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst MAX_THUMB_IMG_SIZE = 40; // px\nconst MAX_ASPECT_RATIO = 20;\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n  let shouldSendAsFile;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;\n    const isGif = mimeType === GIF_MIME_TYPE;\n\n    if (!shouldSendAsFile) {\n      if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        return buildAttachment(filename, blob, {\n          compressedBlobUrl: resizedUrl,\n        });\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    }\n\n    const shouldShrinkPreview = Math.max(width, height) > MAX_THUMB_IMG_SIZE;\n    if (shouldShrinkPreview) {\n      previewBlobUrl = await scaleImage(\n        blobUrl, MAX_THUMB_IMG_SIZE / Math.max(width, height), 'image/jpeg',\n      );\n    } else {\n      previewBlobUrl = blobUrl;\n    }\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    if (!shouldSendAsFile) {\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    shouldSendAsFile: shouldSendAsFile || undefined,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !attach.voice ? true : undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n\nfunction validateAspectRatio(width: number, height: number) {\n  const maxAspectRatio = Math.max(width, height) / Math.min(width, height);\n  return maxAspectRatio <= MAX_ASPECT_RATIO;\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  tempInput.className = 'allow-selection'; // Patch for Safari\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { IS_IOS } from '../../../../util/windowEnvironment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/windowEnvironment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst MAX_LENGTH = 8;\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const getSingleEmoji = useDerivedSignal(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || (IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH)) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const cleanHtml = prepareForRegExp(html);\n    const isSingleEmoji = cleanHtml && (\n      (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n      || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n    );\n\n    return isSingleEmoji\n      ? (IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!)\n      : undefined;\n  }, [getHtml, isEnabled]);\n\n  const isActive = useDerivedState(() => Boolean(getSingleEmoji()), [getSingleEmoji]);\n  const hasStickers = Boolean(stickers?.length);\n\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    const singleEmoji = getSingleEmoji();\n    if (singleEmoji) {\n      if (!hasStickers) {\n        loadStickersForEmoji({ emoji: singleEmoji });\n      }\n    } else {\n      clearStickersForEmoji();\n    }\n  }, [isEnabled, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),\n    closeStickerTooltip: markManuallyClosed,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\nimport { requestMeasure } from '../lib/fasterdom/fasterdom';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestMeasure(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","// Utility for cleaning html code from Google Docs.\n// Original source from DocsSoap:\n// https://www.npmjs.com/package/docs-soap\n\nconst GDOCS_ELEMENT_ID_REGEXP = /id=\"docs-internal-guid/i;\n\nconst GDOCS_STYLES = {\n  BOLD: '700',\n  ITALIC: 'italic',\n  UNDERLINE: 'underline',\n  STRIKETHROUGH: 'line-through',\n  SUPERSCRIPT: 'super',\n  SUBSCRIPT: 'sub',\n};\n\nconst ELEMENTS = {\n  ANCHOR: 'a',\n  BOLD: 'strong',\n  ITALIC: 'em',\n  UNDERLINE: 'u',\n  STRIKETHROUGH: 'del',\n  SUPERSCRIPT: 'sup',\n  SUBSCRIPT: 'sub',\n};\n\nconst headers = [\n  'H1',\n  'H2',\n  'H3',\n  'H4',\n  'H5',\n  'H6',\n];\n\nfunction parseHtml(html: string): HTMLElement {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n\n  return doc.body;\n}\n\nfunction wrapNodeAnchor(node: Node, href: string): HTMLAnchorElement {\n  const anchor = document.createElement(ELEMENTS.ANCHOR) as HTMLAnchorElement;\n  anchor.href = href;\n  anchor.appendChild(node.cloneNode(true));\n\n  return anchor;\n}\n\nfunction wrapNodeInline(node: Node, style: string): Node {\n  const el = document.createElement(style);\n  el.appendChild(node.cloneNode(true));\n\n  return el;\n}\n\nfunction wrapNode(inner: HTMLElement, result: Node): Node {\n  let newNode = result.cloneNode(true);\n  if (!inner) {\n    return newNode;\n  }\n  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);\n  }\n  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);\n  }\n\n  return newNode;\n}\n\nfunction applyBlockStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = document.createTextNode('') as Node;\n  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n    styledNode = node.childNodes[0];\n  }\n  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode.cloneNode(true), (node.childNodes[0] as HTMLAnchorElement).href);\n    styledNode = node.childNodes[0].childNodes[0];\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction applyInlineStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = node;\n  if (node.nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode, (node as HTMLAnchorElement).href);\n    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n      styledNode = node.childNodes[0];\n    }\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction getCleanNode(node: Node): Node[] {\n  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {\n    let newWrapper: Node | undefined;\n    let newNode = document.createTextNode(node.textContent || '') as Node;\n    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = document.createDocumentFragment();\n      const items = [];\n      for (let i = 0; i < node.childNodes.length; i++) {\n        items.push(...getCleanNode(node.childNodes[i]));\n      }\n      items.map((i: Node): Node => newNode.appendChild(i));\n    } else if (headers.indexOf(node.nodeName) !== -1) {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = applyInlineStyles(node.childNodes[0]);\n    } else if (node.nodeName === 'P') {\n      newWrapper = document.createElement('p');\n      newNode = applyBlockStyles(node);\n    } else if (node.nodeName === 'BR') {\n      newNode = node;\n    } else {\n      newWrapper = document.createElement('span');\n      newNode = applyInlineStyles(node);\n    }\n    if (newWrapper) {\n      newWrapper.appendChild(newNode);\n      return [newWrapper];\n    }\n\n    return [node.cloneNode(true)];\n  }\n\n  if (node.childNodes) {\n    const nodes = [];\n    for (let i = 0; i < node.childNodes.length; i++) {\n      nodes.push(...getCleanNode(node.childNodes[i]));\n    }\n    return nodes;\n  }\n\n  return [node];\n}\n\nfunction filterNode(node: Node): boolean {\n  return node.nodeType !== 8; // Node.COMMENT_NODE = 8\n}\n\nfunction getCleanDocument(dirty: HTMLElement): HTMLElement {\n  const body = document.createElement('body');\n  const nodes = dirty.childNodes;\n  const filteredNodes = Array.from(nodes).filter(filterNode);\n  const cleanNodes = [];\n\n  for (const node of filteredNodes) {\n    cleanNodes.push(...getCleanNode(node));\n  }\n\n  for (let i = 0; i < cleanNodes.length; i++) {\n    body.appendChild(cleanNodes[i].cloneNode(true));\n  }\n\n  return body;\n}\n\nexport default function cleanDocsHtml(clipboardContent: string): string {\n  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {\n    return parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, '')).innerHTML;\n  }\n\n  return getCleanDocument(parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, ''))).innerHTML;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { StateHookSetter } from '../../../../lib/teact/teact';\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { DEBUG, EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport cleanDocsHtml from '../../../../lib/cleanDocsHtml';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\nconst TYPE_HTML = 'text/html';\nconst DOCUMENT_TYPE_WORD = 'urn:schemas-microsoft-com:office:word';\nconst NAMESPACE_PREFIX_WORD = 'xmlns:w';\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  try {\n    html = cleanDocsHtml(html);\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  setNextText: StateHookSetter<ApiFormattedText | undefined>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      let isWordDocument = false;\n      try {\n        const parser = new DOMParser();\n        const parsedDocument = parser.parseFromString(html, TYPE_HTML);\n        isWordDocument = parsedDocument.documentElement\n          .getAttribute(NAMESPACE_PREFIX_WORD) === DOCUMENT_TYPE_WORD;\n      } catch (err: any) {\n        // Ignore\n      }\n\n      const hasText = textToPaste && textToPaste.text;\n      const shouldSetAttachments = files?.length && !editedMessage && !isWordDocument;\n\n      if (shouldSetAttachments) {\n        const newAttachments = await Promise.all(files!.map((file) => {\n          return buildAttachment(file.name, file);\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      if (hasText) {\n        if (shouldSetAttachments) {\n          setNextText(textToPaste);\n        } else {\n          insertTextAndUpdateCursor(textToPaste, input?.id);\n        }\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n    setNextText,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport { requestMeasure, requestNextMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\nimport type { Signal } from '../../../../util/signals';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useDebouncedResolver } from '../../../../hooks/useAsyncResolvers';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst URL_ENTITIES = new Set<string>([ApiMessageEntityTypes.TextUrl, ApiMessageEntityTypes.Url]);\nconst DEBOUNCE_MS = 300;\n\nconst useEditing = (\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n  replyingToId?: number,\n): [VoidFunction, VoidFunction, boolean] => {\n  const { editMessage, setEditingDraft, toggleMessageWebPage } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState(false);\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n\n    setHtml(html);\n    setShouldForceShowEditing(true);\n\n    requestNextMutation(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n  }, [editedMessage, replyingToId, editingDraft, setHtml]);\n\n  useEffect(() => {\n    if (!editedMessage) {\n      return;\n    }\n\n    const shouldSetNoWebPage = !('webPage' in editedMessage.content)\n      && editedMessage.content.text?.entities?.some((entity) => URL_ENTITIES.has(entity.type));\n\n    toggleMessageWebPage({\n      chatId,\n      threadId,\n      noWebPage: shouldSetNoWebPage,\n    });\n  }, [chatId, threadId, editedMessage]);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      const edited = parseMessageInput(getHtml());\n      const update = edited.text.length ? edited : undefined;\n\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    if (!editedMessage) return false;\n\n    const edited = parseMessageInput(getHtml());\n    return !('webPage' in editedMessage.content)\n      && editedMessage.content.text?.entities?.some((entity) => URL_ENTITIES.has(entity.type))\n      && !(edited.entities?.some((entity) => URL_ENTITIES.has(entity.type)));\n  }, [editedMessage, getHtml], DEBOUNCE_MS, true);\n\n  const getShouldResetNoWebPageDebounced = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffectWithPrevDeps(([prevEditedMessage]) => {\n    if (!editedMessage || prevEditedMessage?.id !== editedMessage.id) {\n      return;\n    }\n\n    if (getShouldResetNoWebPageDebounced()) {\n      toggleMessageWebPage({\n        chatId,\n        threadId,\n        noWebPage: false,\n      });\n    }\n  }, [editedMessage, chatId, getHtml, threadId, getShouldResetNoWebPageDebounced]);\n\n  const restoreNewDraftAfterEditing = useLastCallback(() => {\n    if (!draft) return;\n\n    // Run one frame after editing draft reset\n    requestMeasure(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n\n      // Wait one more frame until new HTML is rendered\n      requestNextMutation(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    });\n  });\n\n  const handleEditCancel = useLastCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  });\n\n  const handleEditComplete = useLastCallback(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      messageList: { chatId, threadId, type },\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  });\n\n  const handleBlur = useLastCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(getHtml());\n    const update = edited.text.length ? edited : undefined;\n\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  });\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { InlineBotSettings } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport memoized from '../../../../util/memoized';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst THROTTLE = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isEnabled: boolean,\n  chatId: string,\n  getHtml: Signal<string>,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractBotQueryThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;\n  }, [getHtml, isEnabled], THROTTLE);\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDerivedState(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);\n\n  useSyncEffect(([prevUsername]) => {\n    if (prevUsername) {\n      resetInlineBot({ username: prevUsername });\n    }\n  }, [username, resetInlineBot]);\n\n  useEffect(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query,\n    });\n  }, [chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  const {\n    id: botId,\n    switchPm,\n    switchWebview,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = (usernameLowered && inlineBots?.[usernameLowered]) || {};\n\n  const isOpen = Boolean((results?.length || switchPm) && !isManuallyClosed);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  const loadMore = useLastCallback(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  });\n\n  return {\n    isOpen,\n    botId,\n    isGallery,\n    switchPm,\n    switchWebview,\n    results,\n    closeTooltip: markManuallyClosed,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nconst buildQueryStateMemo = memoized((username: string, query: string, canShowHelp: boolean) => ({\n  username,\n  query,\n  canShowHelp,\n  usernameLowered: username.toLowerCase(),\n}));\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst RE_COMMAND = /^\\/([\\w@]{1,32})?$/i;\n\nconst THROTTLE = 300;\n\nexport default function useBotCommandTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const detectCommandThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('/') ? prepareForRegExp(html).match(RE_COMMAND)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getCommand = useDerivedSignal(\n    detectCommandThrottled, [detectCommandThrottled, getHtml], true,\n  );\n\n  useEffect(() => {\n    const command = getCommand();\n    const commands = botCommands || chatBotCommands;\n    if (!command || !commands) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const filter = command.substring(1);\n    const nextFilteredBotCommands = commands.filter((c) => !filter || c.command.startsWith(filter));\n\n    setFilteredBotCommands(\n      nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined,\n    );\n  }, [getCommand, botCommands, chatBotCommands]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isOpen: Boolean(filteredBotCommands?.length && !isManuallyClosed),\n    close: markManuallyClosed,\n    filteredBotCommands,\n  };\n}\n","import { useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n  chatId,\n  canSendAudios,\n  canSendVideos,\n  canSendPhotos,\n  canSendDocuments,\n  insertNextText,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n  chatId: string;\n  canSendAudios?: boolean;\n  canSendVideos?: boolean;\n  canSendPhotos?: boolean;\n  canSendDocuments?: boolean;\n  insertNextText: VoidFunction;\n}) {\n  const { openLimitReachedModal, showAllowedMessageTypesNotification } = getActions();\n  const [shouldForceAsFile, setShouldForceAsFile] = useState<boolean>(false);\n  const [shouldForceCompression, setShouldForceCompression] = useState<boolean>(false);\n  const [shouldSuggestCompression, setShouldSuggestCompression] = useState<boolean | undefined>(undefined);\n\n  const handleClearAttachments = useLastCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n    insertNextText();\n  });\n\n  const handleSetAttachments = useLastCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        handleClearAttachments();\n        return;\n      }\n\n      if (newAttachments.some((attachment) => {\n        const type = getAttachmentType(attachment);\n\n        return (type === 'audio' && !canSendAudios && !canSendDocuments)\n          || (type === 'video' && !canSendVideos && !canSendDocuments)\n          || (type === 'image' && !canSendPhotos && !canSendDocuments)\n          || (type === 'file' && !canSendDocuments);\n      })) {\n        showAllowedMessageTypesNotification({ chatId });\n      } else if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n        const shouldForce = newAttachments.some((attachment) => {\n          const type = getAttachmentType(attachment);\n\n          return (type === 'audio' && !canSendAudios)\n            || (type === 'video' && !canSendVideos)\n            || (type === 'image' && !canSendPhotos);\n        });\n\n        setShouldForceAsFile(Boolean(shouldForce && canSendDocuments));\n        setShouldForceCompression(!canSendDocuments);\n      }\n    },\n  );\n\n  const handleAppendFiles = useLastCallback(async (files: File[], isSpoiler?: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file, { shouldSendAsSpoiler: isSpoiler || undefined })\n      ))),\n    ]);\n  });\n\n  const handleFileSelect = useLastCallback(async (files: File[], suggestCompression?: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file))));\n    setShouldSuggestCompression(suggestCompression);\n  });\n\n  return {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n    shouldForceCompression,\n    shouldForceAsFile,\n  };\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  if (attachment.shouldSendAsFile) return 'file';\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'image';\n  }\n\n  if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'video';\n  }\n\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'audio';\n  }\n\n  return 'file';\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { requestMeasure, requestNextMutation } from '../../../../lib/fasterdom/fasterdom';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft } from '../../../../global/types';\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { ApiMessageEntityTypes } from '../../../../api/types';\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport { IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useStateRef } from '../../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useRunDebounced from '../../../../hooks/useRunDebounced';\n\nlet isFrozen = false;\n\nfunction freeze() {\n  isFrozen = true;\n\n  requestMeasure(() => {\n    isFrozen = false;\n  });\n}\n\nconst useDraft = (\n  draft: ApiDraft | undefined,\n  chatId: string,\n  threadId: number,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n\n  const isEditing = Boolean(editedMessage);\n\n  const updateDraft = useLastCallback((prevState: { chatId?: string; threadId?: number } = {}, shouldForce = false) => {\n    if (isEditing) return;\n\n    const html = getHtml();\n\n    if (html) {\n      saveDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        draft: parseMessageInput(html),\n        shouldForce,\n      });\n    } else {\n      clearDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        shouldForce,\n      });\n    }\n  });\n\n  const updateDraftRef = useStateRef(updateDraft);\n  const runDebouncedForSaveDraft = useRunDebounced(DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);\n\n  // Restore draft on chat change\n  useEffectWithPrevDeps(([prevChatId, prevThreadId, prevDraft]) => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n\n      if (!draft?.shouldForce) {\n        return;\n      }\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestNextMutation(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n  }, [chatId, threadId, draft, setHtml, editedMessage, loadCustomEmojis]);\n\n  // Save draft on chat change\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      if (!isEditing) {\n        // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n        updateDraftRef.current({ chatId, threadId });\n      }\n\n      freeze();\n    };\n  }, [chatId, threadId, isEditing, updateDraftRef]);\n\n  const chatIdRef = useStateRef(chatId);\n  const threadIdRef = useStateRef(threadId);\n  useEffect(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    if (!getHtml()) {\n      updateDraftRef.current();\n\n      return;\n    }\n\n    const scopedShatId = chatIdRef.current;\n    const scopedThreadId = threadIdRef.current;\n\n    runDebouncedForSaveDraft(() => {\n      if (chatIdRef.current === scopedShatId && threadIdRef.current === scopedThreadId) {\n        updateDraftRef.current();\n      }\n    });\n  }, [chatIdRef, getHtml, runDebouncedForSaveDraft, threadIdRef, updateDraftRef]);\n\n  function forceUpdateDraft() {\n    updateDraft(undefined, true);\n  }\n\n  useBackgroundMode(forceUpdateDraft);\n  useBeforeUnload(forceUpdateDraft);\n};\n\nexport default useDraft;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useMedia from '../../../hooks/useMedia';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const { isTouchScreen } = useAppLayout();\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, 'icon', !isTouchScreen && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, !isTouchScreen && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useLastCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  });\n\n  const handleCloseMenu = useLastCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  });\n\n  const handleCloseAnimationEnd = useLastCallback(() => {\n    setMenuPosition(undefined);\n  });\n\n  const handleRemoveBot = useLastCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  });\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        bot,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW, DEBUG_LOG_FILENAME, SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { validateFiles } from '../../../util/files';\nimport { getDebugLogs } from '../../../util/debugConsole';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  canSendPhotos: boolean;\n  canSendVideos: boolean;\n  canSendDocuments: boolean;\n  canSendAudios: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  shouldCollectDebugLogs?: boolean;\n  onFileSelect: (files: File[], shouldSuggestCompression?: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  canSendPhotos,\n  canSendVideos,\n  canSendDocuments,\n  canSendAudios,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n  shouldCollectDebugLogs,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const canSendVideoAndPhoto = canSendPhotos && canSendVideos;\n  const canSendVideoOrPhoto = canSendPhotos || canSendVideos;\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useLastCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  });\n\n  const handleFileSelect = useLastCallback((e: Event, shouldSuggestCompression?: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles, shouldSuggestCompression);\n    }\n  });\n\n  const handleQuickSelect = useLastCallback(() => {\n    openSystemFilesDialog(\n      Array.from(canSendVideoAndPhoto ? CONTENT_TYPES_WITH_PREVIEW : (\n        canSendPhotos ? SUPPORTED_IMAGE_CONTENT_TYPES : SUPPORTED_VIDEO_CONTENT_TYPES\n      )).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  });\n\n  const handleDocumentSelect = useLastCallback(() => {\n    openSystemFilesDialog(!canSendDocuments && canSendAudios\n      ? Array.from(SUPPORTED_AUDIO_CONTENT_TYPES).join(',') : (\n        '*'\n      ), (e) => handleFileSelect(e, false));\n  });\n\n  const handleSendLogs = useLastCallback(() => {\n    const file = new File([getDebugLogs()], DEBUG_LOG_FILENAME, { type: 'text/plain' });\n    onFileSelect([file]);\n  });\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            {canSendVideoOrPhoto && (\n              <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n                {lang(canSendVideoAndPhoto ? 'AttachmentMenu.PhotoOrVideo'\n                  : (canSendPhotos ? 'InputAttach.Popover.Photo' : 'InputAttach.Popover.Video'))}\n              </MenuItem>\n            )}\n            {(canSendDocuments || canSendAudios)\n              && (\n                <MenuItem icon=\"document\" onClick={handleDocumentSelect}>\n                  {lang(!canSendDocuments && canSendAudios ? 'InputAttach.Popover.Music' : 'AttachDocument')}\n                </MenuItem>\n              )}\n            {canSendDocuments && shouldCollectDebugLogs && (\n              <MenuItem icon=\"bug\" onClick={handleSendLogs}>\n                {lang('DebugSendLogs')}\n              </MenuItem>\n            )}\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default InlineBotTooltipAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default MentionTooltipAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default StickerTooltipAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default BotCommandTooltipAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectCanAnimateInterface,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useMenuPosition from '../../../hooks/useMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n  shouldForceShowEditing?: boolean;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useLastCallback(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  });\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useLastCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  });\n\n  const handleClearClick = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  });\n\n  const handleChangeRecipientClick = useLastCallback(() => {\n    changeForwardRecipient();\n  });\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useLastCallback(() => ref.current);\n  const getRootElement = useLastCallback(() => ref.current!);\n  const getMenuElement = useLastCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'));\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  useEffect(() => {\n    if (!shouldRender) handleContextMenuClose();\n  }, [handleContextMenuClose, shouldRender]);\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId, shouldForceShowEditing]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div className=\"ComposerEmbeddedMessage_inner\">\n        <div className=\"embedded-left-icon\">\n          <i className={buildClassName('icon', leftIcon)} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: false,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: true,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: false,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: true,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { shouldForceShowEditing }): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = selectTabState(global);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = selectCanAnimateInterface(global);\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId && !shouldForceShowEditing) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default AttachmentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default BotCommandMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default PollModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default DropAreaAsync;\nexport { DropAreaState } from './DropArea';\n","import React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  ApiFormattedText, ApiMessage, ApiMessageEntityTextUrl, ApiWebPage,\n} from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { Signal } from '../../../util/signals';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectTabState, selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport parseMessageInput from '../../../util/parseMessageInput';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport { useDebouncedResolver } from '../../../hooks/useAsyncResolvers';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  getHtml: Signal<string>;\n  isDisabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  getHtml,\n  isDisabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const formattedTextWithLinkRef = useRef<ApiFormattedText>();\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    const formattedText = parseMessageInput(getHtml());\n    const linkEntity = formattedText.entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n\n    formattedTextWithLinkRef.current = formattedText;\n\n    return linkEntity?.url || formattedText.text.match(RE_LINK)?.[0];\n  }, [getHtml], DEBOUNCE_MS, true);\n\n  const getLink = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffect(() => {\n    const link = getLink();\n    const formattedText = formattedTextWithLinkRef.current;\n\n    if (link) {\n      loadWebPagePreview({ text: formattedText! });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [getLink, chatId, threadId]);\n\n  useSyncEffect(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);\n\n  const isShown = useDerivedState(() => {\n    return Boolean(webPagePreview && getHtml() && !noWebPage && !isDisabled);\n  }, [isDisabled, getHtml, noWebPage, webPagePreview]);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useLastCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  });\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div className=\"WebPagePreview_inner\">\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: selectTabState(global).webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default SendAsMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { requestMeasure, requestNextMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type {\n  TabState, MessageListType, GlobalState, ApiDraft, MessageList,\n} from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n  ApiChatFullInfo,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_UPLOAD_FILEPART_SIZE,\n  EDITABLE_INPUT_MODAL_ID,\n  SCHEDULED_WHEN_ONLINE,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_IOS } from '../../../util/windowEnvironment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectBot,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatType,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingMessage,\n  selectEditingScheduledDraft,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectReplyingToId,\n  selectRequestedDraftFiles,\n  selectRequestedDraftText,\n  selectScheduledIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserFullInfo,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  isChatAdmin,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment, { prepareAttachmentsToSend } from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { buildCustomEmojiHtml } from './helpers/customEmoji';\nimport { processMessageInputForCustomEmoji } from '../../../util/customEmojiManager';\nimport { getTextWithEntitiesAsHtml } from '../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAttachmentModal from './hooks/useAttachmentModal';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useDraft from './hooks/useDraft';\nimport useTimeout from '../../../hooks/useTimeout';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    isOnActiveTab: boolean;\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiDraft;\n    currentMessageList?: MessageList;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    replyingToId?: number;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: TabState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n    slowMode?: ApiChatFullInfo['slowMode'];\n    shouldUpdateStickerSetOrder?: boolean;\n    shouldCollectDebugLogs?: boolean;\n  };\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\nconst MOUNT_ANIMATION_DURATION = 430;\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  isOnActiveTab,\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  currentMessageList,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  replyingToId,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n  slowMode,\n  shouldUpdateStickerSetOrder,\n  shouldCollectDebugLogs,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n    showAllowedMessageTypesNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const [getHtml, setHtml] = useSignal('');\n  const [isMounted, setIsMounted] = useState(false);\n  const getSelectionRange = useGetSelectionRange(EDITABLE_INPUT_CSS_SELECTOR);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(processMessageInputForCustomEmoji, [getHtml]);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, cancelForceShowSymbolMenu);\n\n  useTimeout(() => {\n    setIsMounted(true);\n  }, MOUNT_ANIMATION_DURATION);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useSyncEffect(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n  const hasAttachments = Boolean(attachments.length);\n  const [nextText, setNextText] = useState<ApiFormattedText | undefined>(undefined);\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n    canSendVoices, canSendPlainText, canSendAudios, canSendVideos, canSendPhotos, canSendDocuments,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isComposerBlocked = !canSendPlainText && !editingMessage;\n\n  const insertHtmlAndUpdateCursor = useLastCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    if (inputId === EDITABLE_INPUT_ID && isComposerBlocked) return;\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${getHtml()}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestNextMutation(() => {\n      focusEditableElement(messageInput);\n    });\n  });\n\n  const insertTextAndUpdateCursor = useLastCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  });\n\n  const insertFormattedTextAndUpdateCursor = useLastCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  });\n\n  const insertCustomEmojiAndUpdateCursor = useLastCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  });\n\n  const insertNextText = useLastCallback(() => {\n    if (!nextText) return;\n    insertFormattedTextAndUpdateCursor(nextText, EDITABLE_INPUT_ID);\n    setNextText(undefined);\n  });\n\n  const {\n    shouldSuggestCompression,\n    shouldForceCompression,\n    shouldForceAsFile,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n    chatId,\n    canSendAudios,\n    canSendVideos,\n    canSendPhotos,\n    canSendDocuments,\n    insertNextText,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const isEditingRef = useStateRef(Boolean(editingMessage));\n  useEffect(() => {\n    if (getHtml() && !isEditingRef.current) {\n      sendMessageAction({ type: 'typing' });\n    }\n  }, [getHtml, isEditingRef, sendMessageAction]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(isReady && isOnActiveTab && isForCurrentMessageList && shouldSuggestStickers && !hasAttachments),\n    getHtml,\n    setHtml,\n    undefined,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    closeCustomEmojiTooltip,\n    insertCustomEmoji,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isOnActiveTab && isForCurrentMessageList && shouldSuggestCustomEmoji && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isStickerTooltipOpen,\n    closeStickerTooltip,\n  } = useStickerTooltip(\n    Boolean(isReady\n      && isOnActiveTab\n      && isForCurrentMessageList\n      && shouldSuggestStickers\n      && canSendStickers\n      && !hasAttachments),\n    getHtml,\n    stickersForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    botId: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    switchWebview: inlineBotSwitchWebview,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    chatId,\n    getHtml,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean(isReady && isForCurrentMessageList && ((botCommands && botCommands?.length) || chatBotCommands?.length)),\n    getHtml,\n    botCommands,\n    chatBotCommands,\n  );\n\n  useDraft(draft, chatId, threadId, getHtml, setHtml, editingMessage);\n\n  const resetComposer = useLastCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n\n    setAttachments(MEMO_EMPTY_ARRAY);\n    setNextText(undefined);\n\n    closeEmojiTooltip();\n    closeCustomEmojiTooltip();\n    closeStickerTooltip();\n    closeMentionTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  });\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    getHtml,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n    replyingToId,\n  );\n\n  // Handle chat change (should be placed after `useDraft` and `useEditing`)\n  const resetComposerRef = useStateRef(resetComposer);\n  const stopRecordingVoiceRef = useStateRef(stopRecordingVoice);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      stopRecordingVoiceRef.current();\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      resetComposerRef.current();\n    };\n  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useLastCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  });\n\n  const mainButtonState = useDerivedState(() => {\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Record;\n    }\n\n    if (shouldSchedule) {\n      return MainButtonState.Schedule;\n    }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, editingMessage, getHtml, hasAttachments, isForwarding, shouldForceShowEditing, shouldSchedule,\n  ]);\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    setNextText,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useLastCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  });\n\n  const validateTextLength = useLastCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  });\n\n  const checkSlowMode = useLastCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  });\n\n  const sendAttachments = useLastCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n  }: {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  }) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n    if (!text && !attachmentsToSend.length) {\n      return;\n    }\n    if (!validateTextLength(text, true)) return;\n    if (!checkSlowMode()) return;\n\n    sendMessage({\n      messageList: currentMessageList,\n      text,\n      entities,\n      scheduledAt,\n      isSilent,\n      shouldUpdateStickerSetOrder,\n      attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      shouldGroupMessages: sendGrouped,\n    });\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handleSendAttachments = useLastCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n  ) => {\n    sendAttachments({\n      attachments,\n      sendCompressed,\n      sendGrouped,\n      isSilent,\n      scheduledAt,\n    });\n  });\n\n  const handleSend = useLastCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (currentAttachments.length) {\n      sendAttachments({\n        attachments: currentAttachments,\n      });\n      return;\n    }\n\n    if (!text && !isForwarding) {\n      return;\n    }\n\n    if (!validateTextLength(text)) return;\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (text) {\n      if (!checkSlowMode()) return;\n\n      sendMessage({\n        messageList: currentMessageList,\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetOrder,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handleClickBotMenu = useLastCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      chatId, url: botMenuButton.url, threadId,\n    });\n  });\n\n  const handleActivateBotCommandMenu = useLastCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  });\n\n  const handleMessageSchedule = useLastCallback((\n    args: ScheduledMessageArgs, scheduledAt: number, messageList: MessageList,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n        messageList,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        messageList,\n        scheduledAt,\n      });\n    }\n  });\n\n  useEffectWithPrevDeps(([prevContentToBeScheduled]) => {\n    if (currentMessageList && contentToBeScheduled && contentToBeScheduled !== prevContentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt, currentMessageList);\n      });\n    }\n  }, [contentToBeScheduled, currentMessageList, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n\n      requestNextMutation(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      void handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useLastCallback((emoji: ApiSticker, inputId?: string) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji, inputId);\n  });\n\n  const handleCustomEmojiSelectAttachmentModal = useLastCallback((emoji: ApiSticker) => {\n    handleCustomEmojiSelect(emoji, EDITABLE_INPUT_MODAL_ID);\n  });\n\n  const handleGifSelect = useLastCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt, currentMessageList);\n        requestMeasure(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ messageList: currentMessageList, gif, isSilent });\n      requestMeasure(() => {\n        resetComposer(true);\n      });\n    }\n  });\n\n  const handleStickerSelect = useLastCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    canUpdateStickerSetsOrder?: boolean,\n  ) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt, currentMessageList);\n        requestMeasure(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({\n        messageList: currentMessageList,\n        sticker,\n        isSilent,\n        shouldUpdateStickerSetOrder: shouldUpdateStickerSetOrder && canUpdateStickerSetsOrder,\n      });\n      requestMeasure(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  });\n\n  const handleInlineBotSelect = useLastCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt, currentMessageList);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n        messageList: currentMessageList,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handleBotCommandSelect = useLastCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestMeasure(() => {\n      resetComposer();\n    });\n  });\n\n  const handlePollSend = useLastCallback((poll: ApiNewPoll) => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt, currentMessageList);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ messageList: currentMessageList, poll });\n      closePollModal();\n    }\n  });\n\n  const sendSilent = useLastCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt, currentMessageList!);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true);\n    } else {\n      void handleSend(true);\n    }\n  });\n\n  const handleSendAsMenuOpen = useLastCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  });\n\n  useEffect(() => {\n    if (!isComposerBlocked) return;\n\n    setHtml('');\n  }, [isComposerBlocked, setHtml, attachments]);\n\n  const insertTextAndUpdateCursorAttachmentModal = useLastCallback((text: string) => {\n    insertTextAndUpdateCursor(text, EDITABLE_INPUT_MODAL_ID);\n  });\n\n  const removeSymbol = useLastCallback((inputId = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(getHtml()));\n  });\n\n  const removeSymbolAttachmentModal = useLastCallback(() => {\n    removeSymbol(EDITABLE_INPUT_MODAL_ID);\n  });\n\n  const handleAllScheduledClick = useLastCallback(() => {\n    openChat({\n      id: chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  });\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy || !canSendVoices);\n\n  const mainButtonHandler = useLastCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        void handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          } else if (!canSendVoices) {\n            showAllowedMessageTypesNotification({ chatId });\n          }\n        } else {\n          void startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        if (!currentMessageList) {\n          return;\n        }\n\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt, currentMessageList!);\n        });\n        break;\n      default:\n        break;\n    }\n  });\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n    isMounted && 'mounted',\n  );\n\n  const handleSendScheduled = useLastCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt, currentMessageList!);\n    });\n  });\n\n  const handleSendSilent = useLastCallback(() => {\n    sendSilent();\n  });\n\n  const handleSendWhenOnline = useLastCallback(() => {\n    handleMessageSchedule({}, SCHEDULED_WHEN_ONLINE, currentMessageList!);\n  });\n\n  const handleSendScheduledAttachments = useLastCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({ sendCompressed, sendGrouped }, scheduledAt, currentMessageList!);\n    });\n  });\n\n  const handleSendSilentAttachments = useLastCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    sendSilent({ sendCompressed, sendGrouped });\n  });\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage;\n  const isBotMenuButtonOpen = useDerivedState(() => {\n    return withBotMenuButton && !getHtml() && !activeVoiceRecording;\n  }, [withBotMenuButton, getHtml, activeVoiceRecording]);\n\n  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage\n    && botCommands !== false && !activeVoiceRecording;\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        getHtml={getHtml}\n        isReady={isReady}\n        shouldSuggestCompression={shouldSuggestCompression}\n        shouldForceCompression={shouldForceCompression}\n        shouldForceAsFile={shouldForceAsFile}\n        isForCurrentMessageList={isForCurrentMessageList}\n        shouldSchedule={shouldSchedule}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachments}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n        onCustomEmojiSelect={handleCustomEmojiSelectAttachmentModal}\n        onRemoveSymbol={removeSymbolAttachmentModal}\n        onEmojiSelect={insertTextAndUpdateCursorAttachmentModal}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filteredUsers={mentionFilteredUsers}\n        onInsertUserName={insertMention}\n        onClose={closeMentionTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        getHtml={getHtml}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <svg className=\"svg-appendix\" width=\"9\" height=\"20\">\n          <defs>\n            <filter\n              x=\"-50%\"\n              y=\"-14.7%\"\n              width=\"200%\"\n              height=\"141.2%\"\n              filterUnits=\"objectBoundingBox\"\n              id=\"composerAppendix\"\n            >\n              <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n              <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n              <feColorMatrix\n                values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n                in=\"shadowBlurOuter1\"\n              />\n            </filter>\n          </defs>\n          <g fill=\"none\" fill-rule=\"evenodd\">\n            <path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#composerAppendix)\" />\n            <path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" className=\"corner\" />\n          </g>\n        </svg>\n\n        <InlineBotTooltip\n          isOpen={isInlineBotTooltipOpen}\n          botId={inlineBotId}\n          isGallery={isInlineBotTooltipGallery}\n          inlineBotResults={inlineBotResults}\n          switchPm={inlineBotSwitchPm}\n          switchWebview={inlineBotSwitchWebview}\n          loadMore={loadMoreForInlineBot}\n          isSavedMessages={isChatWithSelf}\n          canSendGifs={canSendGifs}\n          isCurrentUserPremium={isCurrentUserPremium}\n          onSelectResult={handleInlineBotSelect}\n          onClose={closeInlineBotTooltip}\n        />\n        <ComposerEmbeddedMessage\n          onClear={handleEmbeddedClear}\n          shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n        />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          getHtml={getHtml}\n          isDisabled={!canAttachEmbedLinks || hasAttachments}\n        />\n        <div className=\"message-input-wrapper\">\n          {withBotMenuButton && (\n            <BotMenuButton\n              isOpen={isBotMenuButtonOpen}\n              text={botMenuButton.text}\n              isDisabled={Boolean(activeVoiceRecording)}\n              onClick={handleClickBotMenu}\n            />\n          )}\n          {withBotCommands && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                peer={sendAsUser || sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {(!isComposerBlocked || canSendGifs || canSendStickers) && (\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              canSendStickers={canSendStickers}\n              canSendGifs={canSendGifs}\n              onGifSelect={handleGifSelect}\n              onStickerSelect={handleStickerSelect}\n              onCustomEmojiSelect={handleCustomEmojiSelect}\n              onRemoveSymbol={removeSymbol}\n              onEmojiSelect={insertTextAndUpdateCursor}\n              closeBotCommandMenu={closeBotCommandMenu}\n              closeSendAsMenu={closeSendAsMenu}\n              isSymbolMenuForced={isSymbolMenuForced}\n              canSendPlainText={!isComposerBlocked}\n            />\n          )}\n          <MessageInput\n            ref={inputRef}\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            canSendPlainText={!isComposerBlocked}\n            threadId={threadId}\n            isReady={isReady}\n            isActive={!hasAttachments}\n            getHtml={getHtml}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : (!isComposerBlocked\n                  ? (botKeyboardPlaceholder || lang('Message'))\n                  : lang('Chat.PlaceholderTextNotAllowed'))\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && isForCurrentMessageList && !hasAttachments}\n            noFocusInterception={hasAttachments}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon icon-schedule\" />\n            </Button>\n          )}\n          {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            canSendPhotos={canSendPhotos}\n            canSendVideos={canSendVideos}\n            canSendDocuments={canSendDocuments}\n            canSendAudios={canSendAudios}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            shouldCollectDebugLogs={shouldCollectDebugLogs}\n            theme={theme}\n          />\n          {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n            onClose={closeStickerTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        noFastClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon icon-send\" />\n        <i className=\"icon icon-schedule\" />\n        <i className=\"icon icon-microphone-alt\" />\n        <i className=\"icon icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          canScheduleUntilOnline={canScheduleUntilOnline}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onSendWhenOnline={handleSendWhenOnline}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChatWithUser = isUserId(chatId);\n    const chatBotFullInfo = isChatWithBot ? selectUserFullInfo(global, chatBot.id) : undefined;\n    const chatFullInfo = !isChatWithUser ? selectChatFullInfo(global, chatId) : undefined;\n    const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser)\n      && selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const {\n      language, shouldSuggestStickers, shouldSuggestCustomEmoji, shouldUpdateStickerSetOrder,\n    } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chatFullInfo ? chatFullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId && (\n      chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId)\n        ? defaultSendAsId\n        : (chat?.adminRights?.anonymous ? chat?.id : undefined)\n    );\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !selectUserFullInfo(global, user.id)?.noVoiceMessages) ?? true;\n    const slowMode = chatFullInfo?.slowMode;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      isOnActiveTab: !tabState.isBlurred,\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      replyingToId,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === tabState.forwardMessages.toChatId,\n      pollModal: tabState.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chatFullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      shouldUpdateStickerSetOrder,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      chatBotCommands: chatFullInfo?.botCommands,\n      botCommands: chatBotFullInfo ? (chatBotFullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBotFullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n      slowMode,\n      currentMessageList,\n      shouldCollectDebugLogs: global.settings.byKey.shouldCollectDebugLogs,\n    };\n  },\n)(Composer));\n","import { useEffect, useRef, useState } from '../../../../lib/teact/teact';\nimport { requestMutation } from '../../../../lib/fasterdom/fasterdom';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/windowEnvironment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype ActiveVoiceRecording =\n  { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction }\n  | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useLastCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            requestMutation(() => {\n              recordButtonRef.current!.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n            });\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  });\n\n  const pauseRecordingVoice = useLastCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    requestMutation(() => {\n      if (recordButtonRef.current) {\n        recordButtonRef.current!.style.boxShadow = 'none';\n      }\n    });\n\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  });\n\n  const stopRecordingVoice = useLastCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n\n    requestMutation(() => {\n      if (recordButtonRef.current) {\n        recordButtonRef.current!.style.boxShadow = 'none';\n      }\n    });\n\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  });\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default MobileSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default GiftPremiumModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import React, {\n  useEffect, useState, memo, useMemo,\n} from '../../lib/teact/teact';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { ThemeKey } from '../../types';\n\nimport {\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  ANIMATION_END_DELAY,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n  TMP_CHAT_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n} from '../../config';\nimport {\n  IS_ANDROID, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectBot,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n  getHasAdminRight,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport usePinnedMessage from './hooks/usePinnedMessage';\nimport { useResize } from '../../hooks/useResize';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport ChatLanguageModal from './ChatLanguageModal.async';\n\nimport './MiddleColumn.scss';\n\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  topMessageId?: number;\n  canUnpin?: boolean;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  topMessageId,\n  canUnpin,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  } = usePinnedMessage(chatId, threadId, pinnedIds, topMessageId);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingOnPinnedIntersectionChange = usePrevDuringAnimation(\n    chatId ? onIntersectionChanged : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndexes={getCurrentPinnedIndexes}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={onFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onPinnedIntersectionChange={renderingOnPinnedIntersectionChange!}\n                getForceNextPinnedInHeader={getForceNextPinnedInHeader}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown!}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !selectChatFullInfo(global, chat.id),\n    );\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !chat?.isForum;\n    const topMessageId = isCommentThread ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      topMessageId,\n      canUnpin,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import { getGlobal } from '../../../global';\nimport { useEffect, useRef } from '../../../lib/teact/teact';\n\nimport {\n  selectFocusedMessageId,\n  selectListedIds,\n  selectOutlyingListByMessageId,\n} from '../../../global/selectors';\nimport { unique } from '../../../util/iteratees';\nimport { clamp } from '../../../util/math';\nimport cycleRestrict from '../../../util/cycleRestrict';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSignal from '../../../hooks/useSignal';\n\ntype PinnedIntersectionChangedParams = {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  isReversed?: boolean;\n  hasScrolled?: boolean;\n  isUnmount?: boolean;\n};\n\nexport type PinnedIntersectionChangedCallback = (params: PinnedIntersectionChangedParams) => void;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: number, pinnedIds?: number[], topMessageId?: number,\n) {\n  const [getCurrentPinnedIndexes, setCurrentPinnedIndexes] = useSignal<Record<string, number>>({});\n  const [getForceNextPinnedInHeader, setForceNextPinnedInHeader] = useSignal<boolean | undefined>();\n  const viewportPinnedIdsRef = useRef<number[] | undefined>();\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n\n  // Reset when switching chat\n  useEffect(() => {\n    setForceNextPinnedInHeader(undefined);\n    viewportPinnedIdsRef.current = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setCurrentPinnedIndexes, setForceNextPinnedInHeader, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getCurrentPinnedIndexes()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getCurrentPinnedIndexes, key, pinnedIds?.length, setCurrentPinnedIndexes]);\n\n  const onIntersectionChanged = useLastCallback(({\n    viewportPinnedIdsToAdd = [], viewportPinnedIdsToRemove = [], isReversed, hasScrolled, isUnmount,\n  }: PinnedIntersectionChangedParams) => {\n    if (!chatId || !threadId || !key) return;\n\n    const global = getGlobal();\n\n    const pinnedMessagesCount = pinnedIds?.length || 0;\n\n    if (!pinnedMessagesCount || !pinnedIds) return;\n\n    const waitingForPinnedId = getLoadingPinnedId();\n    if (waitingForPinnedId && !hasScrolled) {\n      const newPinnedIndex = pinnedIds.indexOf(waitingForPinnedId);\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    if (hasScrolled) {\n      setForceNextPinnedInHeader(undefined);\n      setLoadingPinnedId(undefined);\n    }\n\n    const forceNextPinnedInHeader = getForceNextPinnedInHeader();\n\n    const currentViewportPinnedIds = viewportPinnedIdsRef.current;\n\n    // Unmounting the Message component will fire this action, and if we've already marked the pin as\n    // outside the viewport, we don't need to do anything\n    if (isUnmount\n      && viewportPinnedIdsToAdd.length === 0 && viewportPinnedIdsToRemove.length === 1\n      && !currentViewportPinnedIds?.includes(viewportPinnedIdsToRemove[0])) {\n      return;\n    }\n\n    const newPinnedViewportIds = unique(\n      (currentViewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) || [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    viewportPinnedIdsRef.current = newPinnedViewportIds;\n\n    const focusedMessageId = selectFocusedMessageId(global, chatId);\n    // Focused to some non-pinned message\n    if (!newPinnedViewportIds.length && isUnmount && focusedMessageId && !pinnedIds.includes(focusedMessageId)) {\n      const firstPinnedIdAfterFocused = pinnedIds.find((id) => id < focusedMessageId);\n      if (firstPinnedIdAfterFocused) {\n        const newIndex = pinnedIds.indexOf(firstPinnedIdAfterFocused);\n        setCurrentPinnedIndexes({\n          ...getCurrentPinnedIndexes(),\n          [key]: newIndex,\n        });\n      }\n    }\n\n    if (forceNextPinnedInHeader || isUnmount) {\n      return;\n    }\n\n    const maxId = Math.max(...newPinnedViewportIds);\n    const maxIdIndex = pinnedIds.findIndex((id) => id === maxId);\n    const delta = isReversed ? 0 : 1;\n    const newIndex = newPinnedViewportIds.length ? maxIdIndex : (\n      currentViewportPinnedIds?.length\n        ? clamp(pinnedIds.indexOf(currentViewportPinnedIds[0]) + delta, 0, pinnedIds.length - 1)\n        : 0\n    );\n\n    setCurrentPinnedIndexes({\n      ...getCurrentPinnedIndexes(),\n      [key]: newIndex,\n    });\n  });\n\n  const onFocusPinnedMessage = useLastCallback((messageId: number): boolean => {\n    if (!chatId || !threadId || !key || getLoadingPinnedId()) return false;\n\n    const global = getGlobal();\n    if (!pinnedIds?.length) {\n      // Focusing on a post in comments\n      return topMessageId === messageId;\n    }\n\n    const index = pinnedIds.indexOf(messageId);\n    const newPinnedIndex = cycleRestrict(pinnedIds.length, index + 1);\n    setForceNextPinnedInHeader(true);\n\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    if (isMessageLoaded) {\n      setCurrentPinnedIndexes({\n        ...getCurrentPinnedIndexes(),\n        [key]: newPinnedIndex,\n      });\n      return true;\n    } else {\n      setLoadingPinnedId(pinnedIds[newPinnedIndex]);\n      return true;\n    }\n  });\n\n  return {\n    onIntersectionChanged,\n    onFocusPinnedMessage,\n    getCurrentPinnedIndexes,\n    getLoadingPinnedId,\n    getForceNextPinnedInHeader,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useState, useEffect, useLayoutEffect } from '../lib/teact/teact';\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\n\nimport useLastCallback from './useLastCallback';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectCurrentTextSearch,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleMessageSearchQueryChange = useLastCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader);\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n","import React, {\n  useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloadIds?: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloadIds,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    loadProfilePhotos({ profileId });\n  }, [profileId]);\n\n  const handleSelectMedia = useLastCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds?.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds?.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloadIds: activeDownloads?.ids,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\nimport { requestMutation, requestMeasure } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default RightSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList, selectTabState,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}`}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return (\n          <RightSearch\n            key={`right_search_${chatId!}`}\n            chatId={chatId!}\n            threadId={threadId!}\n            onClose={close}\n            isActive={isOpen && isActive}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { GlobalState, TabState } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\nimport { compact } from '../../util/iteratees';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads']['byChatId'];\n  messages?: GlobalState['messages']['byChatId'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useLastCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    // No need for expensive global updates on messages, so we avoid them\n    const messages = getGlobal().messages.byChatId;\n    const scheduledMessages = getGlobal().scheduledMessages.byChatId;\n\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, chatActiveDownloads]) => {\n      const chatMessages = chatActiveDownloads.ids?.map((id) => messages[chatId]?.byId[id]);\n      const chatScheduledMessages = chatActiveDownloads.scheduledIds?.map((id) => scheduledMessages[chatId]?.byId[id]);\n\n      return compact([...chatMessages || [], ...chatScheduledMessages || []]);\n    }).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../util/moduleLoader';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ninterface LocalOwnProps {\n  shouldLoad?: boolean;\n}\n\nconst ReactionPickerAsync: FC<OwnProps & LocalOwnProps> = (props) => {\n  const { isOpen, shouldLoad } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen && !shouldLoad);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { info } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !info);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import React, {\n  useEffect, memo, useState, useRef, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat,\n  ApiChatFolder,\n  ApiMessage,\n  ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER, IS_ELECTRON,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/windowEnvironment';\nimport {\n  selectChatMessage,\n  selectTabState,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n  selectIsReactionPickerOpen,\n  selectPerformanceSettingsValue,\n  selectCanAnimateInterface,\n  selectChatFolder,\n} from '../../global/selectors';\nimport { getUserFullName } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport updateIcon from '../../util/updateIcon';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport { useFullscreenStatus } from '../../hooks/useFullscreen';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport ReactionPicker from '../middle/message/ReactionPicker.async';\nimport ChatlistModal from '../modals/chatlist/ChatlistModal.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUserName?: string;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isCurrentUserPremium?: boolean;\n  chatlistModal?: TabState['chatlistModal'];\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\nconst REACTION_PICKER_LOADING_DELAY_MS = 7000; // 7 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUserName,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  chatlistModal,\n  noRightColumnAnimation,\n  isSynced,\n}) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadFeaturedEmojiStickers,\n    setIsAppUpdateAvailable,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const [shouldLoadReactionPicker, markShouldLoadReactionPicker] = useFlag(false);\n  useTimeout(markShouldLoadReactionPicker, REACTION_PICKER_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, (isMasterTab && !IS_ELECTRON) ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateDownloadedListener = window.electron!.on(ElectronEvent.UPDATE_DOWNLOADED, () => {\n      setIsAppUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsAppUpdateAvailable(false);\n      removeUpdateDownloadedListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateDownloadedListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadFeaturedEmojiStickers();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    openChat({\n      id: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, []);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations, undefined, true,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUserName={currentUserName} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <ChatlistModal info={chatlistModal} />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} shouldLoad={shouldLoadReactionPicker} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n      chatlistModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUserName: getUserFullName(currentUser),\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      chatlistModal,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\nimport { DEBUG } from '../config';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","currentReactions","reactions","results","currentSendAs","selectSendAs","chatId","map","current","isReactionChosen","chosenOrder","undefined","count","filter","_ref","forEach","reaction","i","existingIndex","findIndex","r","isSameReaction","push","recentReactions","length","_ref2","isOwn","peerId","currentUserId","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","updateReactions","chat","isOutgoing","areDeepEqual","alreadyHasUnreadReaction","unreadReactions","includes","checkIfHasUnreadReactions","unreadReactionsCount","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","updateWithLocalMedia","messageUpdate","isScheduled","arguments","currentMessage","selectScheduledMessage","content","photo","video","sticker","document","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","actions","isDeleting","threadInfo","selectThreadByMessage","replyToMessageId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","selectChat","unreadCount","selectListedIds","MAIN_THREAD_ID","isMessageLocal","updateListedIds","threadId","Object","values","byTabId","_ref6","tabId","selectIsViewportNewest","addViewportId","replaceThreadParam","isActionMessage","updateThreadInfo","messagesCount","_ref7","firstUnreadId","selectFirstUnreadId","candidateGlobal","newViewportIds","selectViewportIds","updateChatLastMessage","force","chats","byId","currentLastMessage","lastMessage","topic","isForum","selectTopicFromMessage","updateTopic","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","newLastMessage","clearMessageTranslation","topics","deleteTopic","requestChatUpdate","threadIdsToUpdate","selectThreadIdFromMessage","setGlobal","setTimeout","getGlobal","deleteChatMessages","unique","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","addActionHandler","shouldForceReply","repliesThreadInfo","isTopicReply","loadTopicById","topicId","isLocal","selectIsMessageInCurrentMessageList","action","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","selectIsChatListed","loadTopChats","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","keys","selectChatScheduledMessages","Number","sort","a","b","localId","deleteChatScheduledMessages","fileUploads","byMessageLocalId","omit","toString","thread","_ref3","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messageIds","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref4","pinnedIds","selectPinnedIds","newPinnedIds","concat","currentThreadInfo","selectThreadInfo","newThreadInfo","topMessageId","lastReadInboxMessageIdInThread","messagesById","isUserId","getCurrentTabId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","channelId","pollId","pollUpdate","selectChatMessageByPollId","poll","oldResults","newResults","isMin","result","isChosen","find","option","updatedPoll","options","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","createServiceNotification","media","preview","invoice","extendedMedia","transcriptionId","isPending","transcriptions","error","match","_ref5","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","offsetId","direction","isOutlying","isBudgetPreload","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","round","callApi","limit","users","repliesThreadInfos","localMessages","allMessages","buildCollectionByKey","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","addUsers","addChats","updateThreadInfos","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","replyingToTopId","delete","payload","shouldForceRender","isRestricted","viewportIds","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","type","scheduledAt","contentToBeScheduled","replyingToId","selectReplyingToId","replyingToMessage","replyToTopMessageId","noWebPage","selectNoWebPage","sendAs","setReplyingToId","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","groupedId","isFirst","messageListType","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","apiUpdate","draft","shouldForce","user","selectUser","isDeletedUser","draftDate","replyToMsgId","localOnly","selectDraft","newDraft","isUnpin","isOneSide","isSilent","selectCurrentChat","topId","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","reason","description","peer","showNotification","translate","connectionState","isUserBot","isUnread","minId","readCount","l","countSortedIds","newTopicUnreadCount","webPagePreview","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","forwardMessages","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","scheduledInThread","originChannelId","selectThreadOriginChat","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","url","shouldSkipModal","urlWithProtocol","ensureProtocol","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","showDialog","data","getUserFullName","selectForwardsCanBeSentToChat","isModalShown","closeMediaViewer","exitMessageSelectMode","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","shouldSendAsFile","mimeType","GIF_MIME_TYPE","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","Set","add","views","forwards","repliesChatId","recentReplierIds","readMaxId","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","title","langProvider","className","newGifs","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","updateGlobalSearch","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","globalSearch","localChats","localUsers","globalChats","globalUsers","localResults","chatIds","userIds","globalResults","date","timestampPlusDay","resultsByType","foundIds","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","timestamp","management","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","link","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","userId","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","editingDraft","selectEditingDraft","activeThreadId","currentChat","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","shouldCloseChatOnError","threads","updateThread","_ref8","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isSynced","initFolderManager","addCallback","authState","isMasterTab","sync","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","newUser","newFullInfo","avatarHash","profilePhoto","fallbackPhoto","personalPhoto","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","updateUser","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","closeNewContactDialog","isPrivate","userOrChat","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","expires","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","botId","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","_len3","_key3","openUrl","openGame","alert","isError","buildQueryString","k","join","getPaymentForm","inputInvoice","form","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","_len4","_key4","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","senderId","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","selectBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","webApp","isFromBotMenu","reply","appName","startApp","botApp","isInactive","app","closeWebApp","slug","trustedBotIds","newTrustedBotIds","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","payment","isPaymentModalOpen","status","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","cardNumber","expiryMonth","expiryYear","cvv","zip","country","response","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","replace","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","closeInvoice","step","isClosed","premiumModal","isOpen","isClosing","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","promo","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","emoticon","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","some","userReaction","newUserReactions","selectMaxUserReactions","selectPerformanceSettingsValue","newActiveReactions","activeReactions","active","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","fetchUnreadReactions","fromEntries","unread","topReactions","isGroup","selectChatFullInfo","dcId","statisticsDcId","stats","recentTopMessages","msgId","updateStatistics","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","closeLocalTextSearch","updateLocalTextSearch","replaceLocalTextSearchResults","chatThreadKey","buildChatThreadKey","currentQuery","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","replaceTabThreadParam","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","isChatInfoShown","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActions","canCopy","message1","message2","resultHtml","resultText","sender","selectSender","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","groupedMessageIds","selectedMessages","openForwardMenu","cancelMessageMediaDownload","addActiveMessageMediaDownload","canDownload","downloadMessageMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseMessageInput","serviceChat","fractionalPart","serviceNotification","reactorModal","seenByModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","fetchingStatus","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","stickerSearch","newContact","isByPhoneNumber","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","newStickers","s","order","isCustomEmoji","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","top","left","height","selectCanAnimateInterface","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isHidden","isMinimized","APP_VERSION_REGEX","then","trim","test","isUpdateAvailable","catch","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","byKey","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","clearPayment","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","_global$passcode$inva","timeoutUntil","reactionPicker","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","noTopChatsRequest","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","updateUserFullInfo","loadFullUser","statusUpdate","targetUserFullInfo","botInfo","menuButton","addBlockedContact","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","lastCallback","useLastCallback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","props","StickerSetModal","useModuleLoader","Bundles","React","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","isLottie","stickerHash","getStickerPreviewHash","previewMediaData","useMedia","paths","useMemo","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","buildClassName","path","style","CustomEmoji","styles","withSharedAnimation","src","alt","StatusPickerMenu","withGlobal","setEmojiStatus","loadCurrentUser","buttonRef","useRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","useCallback","handleEmojiStatusClick","CustomEmojiEffect","ref","ripple","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","onClose","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isFetchingDifference","isConnectionStatusMinimized","animationLevel","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","onSearchQuery","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","skipLockOnUnload","updatePerformanceSettings","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","archivedUnreadChatsCount","chatsCount","handleLockScreenHotkey","stopPropagation","useHotkeys","IS_APP","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ariaLabel","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","ANIMATION_LEVEL_MAX","ANIMATION_LEVEL_MIN","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","animationLevelValue","isFullscreen","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","menuItems","MenuItem","icon","Switcher","label","checked","noAnimation","Toggle","isCharIcon","getPromptInstall","searchContent","PickerSelectedItem","canClose","clickArg","chatOrUserId","DropdownMenu","trigger","footer","APP_NAME","positionX","transformOriginX","IS_MAC_OS","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","orderedFolderIds","folderInvitesById","archived","shouldSkipHistoryAnimations","hasArchivedChats","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","allChatsFolder","ALL_FOLDER_ID","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","isBadgeActive","notificationsCount","handleSwitchTab","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionY","autoClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","installUpdate","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","fluid","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","useSyncEffect","handleSettingsScreenSelect","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","LAYERS_ANIMATION_NAME","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","useLayoutEffect","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","EMOJI_SIZE","customTitle","onUnpinMessage","onAllPinnedClick","isFullWidth","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","shouldShowLoader","useAsyncRendering","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","handleClick","handleMouseDown","useFastClick","ConfirmDialog","confirmLabel","confirmHandler","onMouseDown","PinnedMessageNavigation","thumbDataUri","spoiler","getPictogramDimensions","srcUrl","MediaSpoiler","isVisible","renderPictogram","AnimatedCounter","renderText","MessageSummary","noEmoji","emojiSize","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","confirmIsDestructive","Checkbox","onCheck","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","selectForwardedSender","canUnpin","isComments","firstPinnedMessage","isReady","getCurrentPinnedIndexes","getLoadingPinnedId","onFocusPinnedMessage","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","useDerivedState","waitingForPinnedId","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handleHeaderMouseDown","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleBackClick","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","classList","requestMutation","remove","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","getMessageKey","HeaderActions","canExpandActions","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","senderUserId","inlineButtons","INTERSECTION_THROTTLE_FOR_MEDIA","MIN_MEDIA_WIDTH_WITH_TEXT","MIN_MEDIA_WIDTH","MIN_MEDIA_HEIGHT","getMinMediaWidth","hasCommentButton","_text$length","calculateMediaDimensions","asForwarded","noAvatars","isOwnMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","isWebPageVideo","getMessageWebPageVideo","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","useFocusMessage","elementRef","isFocused","focusDirection","noFocusHighlight","isJustAdded","isRelocatedRef","isRelocated","messagesContainer","closest","isToBottom","exec","animateScroll","requestForcedReflow","requestMeasure","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","startedAt","excludedClosestSelector","onRelease","preventMessageInputBlur","target","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","PENDING_TRANSLATIONS","useMessageTranslation","chatTranslations","requestedLanguageCode","messageTranslation","byLangCode","languageTranslations","throttledProcessPending","addPendingTranslation","translatedText","translateMessages","hasUnprocessed","messageIdsToTranslate","oldMessageIds","newMessageIds","removePendingTranslations","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","Symbol","toStringTag","_Symbol$iterator","iterator","LimitedMap","_defineProperty","insertionQueue","keyToRemove","shift","clear","callbackfn","thisArg","_Symbol$toStringTag","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","metadata","isTranslatable","detectedLanguage","occurrences","ContextMenuContainer","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","showAvatarNotification","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","File","videoTs","videoSizes","videoStartTs","role","MediaViewerOrigin","Avatar","loopIndefinitely","withVideo","CropModal","textParts","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","focusedMessage","isChat","senderUser","senderChat","premiumGiftSticker","canPlayAnimatedEmojis","selectCanPlayAnimatedEmojis","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","onPinnedIntersectionChange","requestConfetti","useOnIntersect","viewportPinnedIdsToRemove","isUnmount","noAppearanceAnimation","markShown","isSuggestedAvatar","useIsIntersecting","shouldShowConfettiRef","usersById","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","handlePremiumGiftClick","AnimatedIconFromSticker","play","noLoop","nonInteractive","ActionMessageSuggestedAvatar","anchor","customText","noUserColors","hasContextMenu","requestedChatTranslationLanguage","isIntersecting","isRoundVideo","getMessageRoundVideo","shouldTranslate","isMessageTranslatable","isTranslationPending","shouldRenderLoader","getUserColorKey","Skeleton","draggable","ActionMessage","outgoingStatus","signature","withReactionOffset","renderQuickReactionButton","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","formatDateTimeToString","timeFormat","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","formatTime","MessageOutgoingStatus","observeIntersection","shouldLoop","shouldPlayEffect","withEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","container","performance","interactionMessageId","withEffects","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","getCustomEmojiSize","isBig","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","crossOrigin","getImageData","getAppendixColorFromImage","useBlurredMediaThumbRef","forcedUri","dataUri","getMessageMediaThumbDataUri","useCanvasBlur","IS_CANVAS_FILTER_SUPPORTED","canAutoLoad","uploadProgress","forcedWidth","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","fullMediaData","withBlurredBackground","withThumb","noThumb","thumbRef","blurredBackgroundRef","thumbClassNames","useMediaTransition","isSpoilerShown","hideSpoiler","downloadProgress","getMessageMediaFormat","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","MESSAGE_CONTENT_SELECTOR","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","setProperty","dimensionsStyle","ProgressSpinner","withAnimation","canAutoPlay","videoRef","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","isInline","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","getPercentage","total","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","isCorrect","answers","hidden","quiz","chosen","strokeDashOffset","timer","recentVoters","chatsById","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","cx","cy","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","PollOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","handleQuickButtonClick","siteName","displayUrl","quickButtonLangKey","getWebpageButtonText","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","Photo","SafeLink","Video","langKey","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","forceAspectRatio","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","PinSvg","viewBox","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","timeLeft","formatCountdownShort","textContent","long","prepareMapUrl","pinClassName","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","VideoWithSelect","activeDownloads","selectActiveDownloads","uploadsById","activeDownloadIds","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","selectCanAutoLoadMedia","selectCanAutoPlayMedia","PROGRESS_CENTER","ROUND_VIDEO_DIMENSIONS_PX","PROGRESS_CIRCUMFERENCE","stopPrevious","playerRef","circleRef","shouldSpinnerRender","setIsActivated","getProgress","setProgress","useSignal","getThrottledProgress","useThrottledSignal","playerEl","shouldPlay","stopPlaying","capturePlaying","paused","stopCurrentAudio","renderIcon","openComments","recentRepliers","hasUnread","commentsText","CENTER_ICON_SIZE","EFFECT_SIZE","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","withRecentReactors","recentReactors","recentReaction","ReactionAnimatedEmoji","AvatarList","peers","isOutside","metaChildren","noRecentReactors","ReactionButton","getReactionUniqueKey","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","MessageAppendix","filterUnits","dy","in","stdDeviation","fill","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","chatFullInfo","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","selectChatTranslations","requestedTranslationLanguage","areTranslationsEnabled","canTranslate","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withReactionEffects","withStickerEffects","selectOutgoingStatus","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","isTouchScreen","contextMenuTarget","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","isTranslatingChat","openAudioPlayer","sendPollVote","focusMessageInComments","openChatLanguageModal","channelPostId","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","previousMetadata","processMessageMetadata","useDetectChatLanguage","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","hasText","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","metaPosition","reactionsPosition","quickReactionPosition","postAuthorTitle","offsetWidth","useAuthorWidth","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","isAnimatingScroll","dispatchHeavyAnimationEvent","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","isForAnimation","MessageText","withTranslucentThumbs","renderReactionsAndMeta","meta","MessageMeta","Reactions","forwardAuthor","chatUsername","c","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","renderSenderName","TopicChip","EmbeddedMessage","Sticker","AnimatedCustomEmoji","AnimatedEmoji","Album","MessagePhoneCall","RoundVideo","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","Contact","Poll","Game","InvoiceMediaPreview","DotAnimation","WebPage","Invoice","Location","CommentButton","InlineButtons","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","isBotInfoEmpty","messageGroups","getContainerHeight","isViewportNewest","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isSchedule","shouldRenderBotInfo","onFabToggle","onNotchToggle","openHistoryCalendar","useDerivedSignal","markMentionsRead","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","boundingClientRect","rootBounds","dataset","shouldUpdateViews","albumMainId","bottom","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","isLocalMessageId","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","Message","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","SponsoredMessage","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isCreator","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","canPost","withBottomShift","withDefaultBg","getForceNextPinnedInHeader","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderRule","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","hasScrolled","parentElement","prevContainerHeightRef","isComposerVisible","setContainerHeight","currentNormalHeight","normalHeight","String","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","useStateRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","ContactGreeting","NoMessages","MessageListContent","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","ScrollDownButton","FILE_EXT_REGEX","buildAttachment","filename","quick","preloadImage","validateAspectRatio","shouldShrink","compressedBlobUrl","resizedUrl","videoWidth","videoHeight","preloadVideo","createPosterForVideo","coverUrl","fetchFromUrl","selectCover","common","picture","format","cover","parseAudioMetadata","uniqueId","prepareAttachmentsToSend","shouldSendCompressed","attach","shouldSendAsSpoiler","deleteLastCharacterOutsideSelection","html","tempInput","contentEditable","appendChild","lastChild","textLength","range","createRange","selection","getSelection","setStart","setEnd","removeAllRanges","addRange","execCommand","removeChild","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","subscribeToAnalyzer","reject","onstop","onerror","delayStop","GDOCS_ELEMENT_ID_REGEXP","parseHtml","DOMParser","parseFromString","wrapNodeAnchor","node","cloneNode","wrapNodeInline","wrapNode","inner","newNode","fontWeight","fontStyle","textDecoration","verticalAlign","applyInlineStyles","dirty","createTextNode","styledNode","nodeName","childNodes","getCleanNode","newWrapper","createDocumentFragment","items","applyBlockStyles","nodes","filterNode","nodeType","STYLE_TAG_REGEX","useClipboardPaste","insertTextAndUpdateCursor","setAttachments","setNextText","editedMessage","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_ID","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","clipboardContent","filteredNodes","cleanNodes","getCleanDocument","textContents","getElementsByTagName","HTMLElement","tagName","replaceWith","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","innerText","ApiMessageEntityTypes","trimEnd","preparePastedHtml","containsCustomEmoji","stripCustomEmoji","getFilesFromDataTransferItems","textToPaste","isWordDocument","documentElement","shouldSetAttachments","newAttachments","URL_ENTITIES","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","buildQueryStateMemo","memoized","RE_COMMAND","isFrozen","DeleteMessageModal","COLOR_REPLACE_PATTERN","iconSvg","mediaDataWithReplacedColors","doc","stroke","strokeWidth","outerHTML","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","AttachBotIcon","Portal","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","shouldCollectDebugLogs","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","canSendVideoAndPhoto","canSendVideoOrPhoto","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","shouldSuggestCompression","validatedFiles","validateFiles","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","handleSendLogs","getDebugLogs","DEBUG_LOG_FILENAME","ResponsiveHoverButton","onActivate","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","AttachBotItem","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","keyboardButtons","noCompact","shouldForceShowEditing","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginY","menuStyle","useMenuPosition","leftIcon","strippedMessage","strippedText","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","getHtml","loadWebPagePreview","toggleMessageWebPage","formattedTextWithLinkRef","detectLinkDebounced","useDebouncedResolver","linkEntity","entity","getLink","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","isChatWithUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","shouldUpdateStickerSetOrder","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","slowMode","selectEditingScheduledDraft","isOnActiveTab","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","closePollModal","loadScheduledHistory","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","inputRef","setHtml","isMounted","setIsMounted","getSelectionRange","useGetSelectionRange","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","processMessageInputForCustomEmoji","customEmojiNotificationNumber","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","hasAttachments","nextText","canSendGifs","canAttachEmbedLinks","isComposerBlocked","insertHtmlAndUpdateCursor","newHtml","messageInput","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","requestNextMutation","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","insertNextText","shouldForceCompression","shouldForceAsFile","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","setShouldForceAsFile","setShouldForceCompression","setShouldSuggestCompression","newValue","suggestCompression","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","useVoiceRecording","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","SEND_MESSAGE_ACTION_INTERVAL","isEditingRef","isChatAdmin","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","useEmojiTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isStickerTooltipOpen","closeStickerTooltip","loadStickersForEmoji","clearStickersForEmoji","isManuallyClosed","markManuallyClosed","unmarkManuallyClosed","getSingleEmoji","IS_EMOJI_SUPPORTED","twemojiRegex","cleanHtml","prepareForRegExp","parseEmojiOnlyString","hasStickers","useStickerTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotSwitchWebview","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetAllInlineBots","extractBotQueryThrottled","useThrottledResolver","getPlainText","parseBotQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","detectCommandThrottled","getCommand","nextFilteredBotCommands","useBotCommandTooltip","useDraft","saveDraft","isEditing","updateDraft","prevState","_prevState$chatId","_prevState$threadId","_prevState$chatId2","_prevState$threadId2","updateDraftRef","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevDraft","customEmojiIds","chatIdRef","threadIdRef","forceUpdateDraft","scopedShatId","scopedThreadId","resetComposer","shouldPreserveInput","handleEditComplete","handleEditCancel","useEditing","editMessage","setEditingDraft","setShouldForceShowEditing","prevEditedMessage","prevReplyingToId","shouldSetNoWebPage","edited","getShouldResetNoWebPageDebounced","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","resetComposerRef","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isCustomSendMenuOpen","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","checkSlowMode","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","sendAttachments","attachmentsToSend","sendCompressed","sendGrouped","handleSendAttachments","handleSend","currentAttachments","record","handleClickBotMenu","handleActivateBotCommandMenu","handleMessageSchedule","restArgs","prevContentToBeScheduled","handleCustomEmojiSelect","isFree","handleCustomEmojiSelectAttachmentModal","handleGifSelect","isScheduleRequested","canUpdateStickerSetsOrder","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","sendSilent","additionalArgs","handleSendAsMenuOpen","insertTextAndUpdateCursorAttachmentModal","removeSymbol","removeSymbolAttachmentModal","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","handleSendScheduled","handleSendSilent","handleSendWhenOnline","handleSendScheduledAttachments","handleSendSilentAttachments","onSend","withBotMenuButton","isBotMenuButtonOpen","withBotCommands","DropAreaState","withQuick","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","onCustomEmojiSelect","onRemoveSymbol","onEmojiSelect","shouldBeAnonymous","selectedSendAsId","filteredUsers","onInsertUserName","withUsername","isSavedMessages","onSelectResult","ComposerEmbeddedMessage","WebPagePreview","BotMenuButton","SymbolMenuButton","onGifSelect","onStickerSelect","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","AttachMenu","BotKeyboardMenu","CustomEmojiTooltip","EmojiTooltip","allowDisabledClick","noFastClick","CustomSendMenu","onSendSchedule","onSendWhenOnline","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","ChatLanguageModal","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","isDesktop","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","onIntersectionChanged","setCurrentPinnedIndexes","setForceNextPinnedInHeader","viewportPinnedIdsRef","setLoadingPinnedId","pinnedLength","newPinnedIndex","forceNextPinnedInHeader","currentViewportPinnedIds","newPinnedViewportIds","focusedMessageId","firstPinnedIdAfterFocused","maxIdIndex","delta","usePinnedMessage","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingOnPinnedIntersectionChange","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","useResize","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","useCustomBackground","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onMouseUp","onDragEnter","MiddleHeader","onStop","MessageList","Composer","FloatingActionButtons","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","selectCanManage","isEditingInvite","canViewStatistics","_useCurrentOrPrev","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","resultType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","StickerSearchAsync","GifSearchAsync","PollResultsAsync","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","RightHeader","MediaViewer","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","activeMessages","chatActiveDownloads","chatScheduledMessages","downloadHash","download","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createLocationHash","_extends","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","pick","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","hideTimeout","prevConfettiTime","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","ReactionPicker","info","ChatlistModal","DEBUG_isLogged","wasTimeFormatSetManually","currentUser","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","currentUserName","isPremiumModalOpen","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadTopReactions","loadFeaturedEmojiStickers","setIsAppUpdateAvailable","loadBundle","shouldLoadReactionPicker","markShouldLoadReactionPicker","removeUpdateDownloadedListener","on","ElectronEvent","removeUpdateErrorListener","langCode","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","parentNode","childElementCount","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","LOCAL_TGS_URLS","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}