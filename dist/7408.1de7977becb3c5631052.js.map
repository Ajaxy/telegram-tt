{"version":3,"file":"7408.1de7977becb3c5631052.js","mappings":"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","sources":["webpack://telegram-t/./node_modules/music-metadata/lib/dsdiff/DsdiffToken.js","webpack://telegram-t/./node_modules/music-metadata/lib/dsdiff/DsdiffParser.js"],"sourcesContent":["import * as Token from 'token-types';\nimport { FourCcToken } from '../common/FourCC.js';\n/**\n * DSDIFF chunk header\n * The data-size encoding is deviating from EA-IFF 85\n * Ref: http://www.sonicstudio.com/pdf/dsd/DSDIFF_1.5_Spec.pdf\n */\nexport const ChunkHeader64 = {\n    len: 12,\n    get: (buf, off) => {\n        return {\n            // Group-ID\n            chunkID: FourCcToken.get(buf, off),\n            // Size\n            chunkSize: Token.INT64_BE.get(buf, off + 4)\n        };\n    }\n};\n//# sourceMappingURL=DsdiffToken.js.map","import * as Token from 'token-types';\nimport initDebug from 'debug';\nimport * as strtok3 from 'strtok3';\nimport { FourCcToken } from '../common/FourCC.js';\nimport { BasicParser } from '../common/BasicParser.js';\nimport { ID3v2Parser } from '../id3v2/ID3v2Parser.js';\nimport { ChunkHeader64 } from './DsdiffToken.js';\nimport { makeUnexpectedFileContentError } from '../ParseError.js';\nconst debug = initDebug('music-metadata:parser:aiff');\nexport class DsdiffContentParseError extends makeUnexpectedFileContentError('DSDIFF') {\n}\n/**\n * DSDIFF - Direct Stream Digital Interchange File Format (Phillips)\n *\n * Ref:\n * - http://www.sonicstudio.com/pdf/dsd/DSDIFF_1.5_Spec.pdf\n */\nexport class DsdiffParser extends BasicParser {\n    async parse() {\n        const header = await this.tokenizer.readToken(ChunkHeader64);\n        if (header.chunkID !== 'FRM8')\n            throw new DsdiffContentParseError('Unexpected chunk-ID');\n        const type = (await this.tokenizer.readToken(FourCcToken)).trim();\n        switch (type) {\n            case 'DSD':\n                this.metadata.setFormat('container', `DSDIFF/${type}`);\n                this.metadata.setFormat('lossless', true);\n                return this.readFmt8Chunks(header.chunkSize - BigInt(FourCcToken.len));\n            default:\n                throw new DsdiffContentParseError(`Unsupported DSDIFF type: ${type}`);\n        }\n    }\n    async readFmt8Chunks(remainingSize) {\n        while (remainingSize >= ChunkHeader64.len) {\n            const chunkHeader = await this.tokenizer.readToken(ChunkHeader64);\n            //  If the data is an odd number of bytes in length, a pad byte must be added at the end\n            debug(`Chunk id=${chunkHeader.chunkID}`);\n            await this.readData(chunkHeader);\n            remainingSize -= (BigInt(ChunkHeader64.len) + chunkHeader.chunkSize);\n        }\n    }\n    async readData(header) {\n        debug(`Reading data of chunk[ID=${header.chunkID}, size=${header.chunkSize}]`);\n        const p0 = this.tokenizer.position;\n        switch (header.chunkID.trim()) {\n            case 'FVER': { // 3.1 FORMAT VERSION CHUNK\n                const version = await this.tokenizer.readToken(Token.UINT32_LE);\n                debug(`DSDIFF version=${version}`);\n                break;\n            }\n            case 'PROP': { // 3.2 PROPERTY CHUNK\n                const propType = await this.tokenizer.readToken(FourCcToken);\n                if (propType !== 'SND ')\n                    throw new DsdiffContentParseError('Unexpected PROP-chunk ID');\n                await this.handleSoundPropertyChunks(header.chunkSize - BigInt(FourCcToken.len));\n                break;\n            }\n            case 'ID3': { // Unofficial ID3 tag support\n                const id3_data = await this.tokenizer.readToken(new Token.Uint8ArrayType(Number(header.chunkSize)));\n                const rst = strtok3.fromBuffer(id3_data);\n                await new ID3v2Parser().parse(this.metadata, rst, this.options);\n                break;\n            }\n            case 'DSD':\n                if (this.metadata.format.numberOfChannels) {\n                    this.metadata.setFormat('numberOfSamples', Number(header.chunkSize * BigInt(8) / BigInt(this.metadata.format.numberOfChannels)));\n                }\n                if (this.metadata.format.numberOfSamples && this.metadata.format.sampleRate) {\n                    this.metadata.setFormat('duration', this.metadata.format.numberOfSamples / this.metadata.format.sampleRate);\n                }\n                break;\n            default:\n                debug(`Ignore chunk[ID=${header.chunkID}, size=${header.chunkSize}]`);\n                break;\n        }\n        const remaining = header.chunkSize - BigInt(this.tokenizer.position - p0);\n        if (remaining > 0) {\n            debug(`After Parsing chunk, remaining ${remaining} bytes`);\n            await this.tokenizer.ignore(Number(remaining));\n        }\n    }\n    async handleSoundPropertyChunks(remainingSize) {\n        debug(`Parsing sound-property-chunks, remainingSize=${remainingSize}`);\n        while (remainingSize > 0) {\n            const sndPropHeader = await this.tokenizer.readToken(ChunkHeader64);\n            debug(`Sound-property-chunk[ID=${sndPropHeader.chunkID}, size=${sndPropHeader.chunkSize}]`);\n            const p0 = this.tokenizer.position;\n            switch (sndPropHeader.chunkID.trim()) {\n                case 'FS': { // 3.2.1 Sample Rate Chunk\n                    const sampleRate = await this.tokenizer.readToken(Token.UINT32_BE);\n                    this.metadata.setFormat('sampleRate', sampleRate);\n                    break;\n                }\n                case 'CHNL': { // 3.2.2 Channels Chunk\n                    const numChannels = await this.tokenizer.readToken(Token.UINT16_BE);\n                    this.metadata.setFormat('numberOfChannels', numChannels);\n                    await this.handleChannelChunks(sndPropHeader.chunkSize - BigInt(Token.UINT16_BE.len));\n                    break;\n                }\n                case 'CMPR': { // 3.2.3 Compression Type Chunk\n                    const compressionIdCode = (await this.tokenizer.readToken(FourCcToken)).trim();\n                    const count = await this.tokenizer.readToken(Token.UINT8);\n                    const compressionName = await this.tokenizer.readToken(new Token.StringType(count, 'ascii'));\n                    if (compressionIdCode === 'DSD') {\n                        this.metadata.setFormat('lossless', true);\n                        this.metadata.setFormat('bitsPerSample', 1);\n                    }\n                    this.metadata.setFormat('codec', `${compressionIdCode} (${compressionName})`);\n                    break;\n                }\n                case 'ABSS': { // 3.2.4 Absolute Start Time Chunk\n                    const hours = await this.tokenizer.readToken(Token.UINT16_BE);\n                    const minutes = await this.tokenizer.readToken(Token.UINT8);\n                    const seconds = await this.tokenizer.readToken(Token.UINT8);\n                    const samples = await this.tokenizer.readToken(Token.UINT32_BE);\n                    debug(`ABSS ${hours}:${minutes}:${seconds}.${samples}`);\n                    break;\n                }\n                case 'LSCO': { // 3.2.5 Loudspeaker Configuration Chunk\n                    const lsConfig = await this.tokenizer.readToken(Token.UINT16_BE);\n                    debug(`LSCO lsConfig=${lsConfig}`);\n                    break;\n                }\n                default:\n                    debug(`Unknown sound-property-chunk[ID=${sndPropHeader.chunkID}, size=${sndPropHeader.chunkSize}]`);\n                    await this.tokenizer.ignore(Number(sndPropHeader.chunkSize));\n            }\n            const remaining = sndPropHeader.chunkSize - BigInt(this.tokenizer.position - p0);\n            if (remaining > 0) {\n                debug(`After Parsing sound-property-chunk ${sndPropHeader.chunkSize}, remaining ${remaining} bytes`);\n                await this.tokenizer.ignore(Number(remaining));\n            }\n            remainingSize -= BigInt(ChunkHeader64.len) + sndPropHeader.chunkSize;\n            debug(`Parsing sound-property-chunks, remainingSize=${remainingSize}`);\n        }\n        if (this.metadata.format.lossless && this.metadata.format.sampleRate && this.metadata.format.numberOfChannels && this.metadata.format.bitsPerSample) {\n            const bitrate = this.metadata.format.sampleRate * this.metadata.format.numberOfChannels * this.metadata.format.bitsPerSample;\n            this.metadata.setFormat('bitrate', bitrate);\n        }\n    }\n    async handleChannelChunks(remainingSize) {\n        debug(`Parsing channel-chunks, remainingSize=${remainingSize}`);\n        const channels = [];\n        while (remainingSize >= FourCcToken.len) {\n            const channelId = await this.tokenizer.readToken(FourCcToken);\n            debug(`Channel[ID=${channelId}]`);\n            channels.push(channelId);\n            remainingSize -= BigInt(FourCcToken.len);\n        }\n        debug(`Channels: ${channels.join(', ')}`);\n        return channels;\n    }\n}\n//# sourceMappingURL=DsdiffParser.js.map"],"names":["ChunkHeader64","len","get","buf","off","chunkID","chunkSize","debug","DsdiffContentParseError","DsdiffParser","BasicParser","parse","header","this","tokenizer","readToken","type","trim","metadata","setFormat","readFmt8Chunks","BigInt","remainingSize","chunkHeader","readData","p0","position","version","handleSoundPropertyChunks","id3_data","Number","rst","ID3v2Parser","options","format","numberOfChannels","numberOfSamples","sampleRate","remaining","ignore","sndPropHeader","numChannels","handleChannelChunks","compressionIdCode","count","compressionName","hours","minutes","seconds","samples","lsConfig","lossless","bitsPerSample","bitrate","channels","channelId","push","join"],"sourceRoot":""}